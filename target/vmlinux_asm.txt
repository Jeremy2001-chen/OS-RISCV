
target/vmlinux.img:     file format elf64-littleriscv


Disassembly of section .text:

0000000080200000 <_start>:
    80200000:	00015117          	auipc	sp,0x15
    80200004:	00010113          	mv	sp,sp
    80200008:	62c1                	lui	t0,0x10
    8020000a:	9116                	add	sp,sp,t0
    8020000c:	006000ef          	jal	ra,80200012 <main>

0000000080200010 <loop>:
    80200010:	a001                	j	80200010 <loop>

0000000080200012 <main>:
static inline void initHartId(u64 hartId) {
    asm volatile("mv tp, %0" : : "r" (hartId & 0x7));
}

u8 binary[1024];
void main(u64 hartId) {
    80200012:	7179                	addi	sp,sp,-48
    80200014:	f406                	sd	ra,40(sp)
    80200016:	f022                	sd	s0,32(sp)
    80200018:	ec26                	sd	s1,24(sp)
    8020001a:	1800                	addi	s0,sp,48
    8020001c:	84aa                	mv	s1,a0
    asm volatile("mv tp, %0" : : "r" (hartId & 0x7));
    8020001e:	00757793          	andi	a5,a0,7
    80200022:	823e                	mv	tp,a5
    initHartId(hartId);

    if (mainCount == 1000) {
    80200024:	00025717          	auipc	a4,0x25
    80200028:	fdc72703          	lw	a4,-36(a4) # 80225000 <mainCount>
    8020002c:	3e800793          	li	a5,1000
    80200030:	00f70a63          	beq	a4,a5,80200044 <main+0x32>
        PROCESS_CREATE_PRIORITY(ForkTest, 1);

        yield();
        printf("reach end\n");*/
    } else {
        putchar('a' + hartId);
    80200034:	0615051b          	addiw	a0,a0,97
#define SBI_REMOTE_SFENCE_VMA 6
#define SBI_REMOTE_SFENCE_VMA_ASID 7
#define SBI_SHUTDOWN 8

inline void putchar(char c) {
    register u64 a0 asm ("a0") = (u64) c;
    80200038:	0ff57513          	zext.b	a0,a0
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    8020003c:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    8020003e:	00000073          	ecall
        while(1);
    80200042:	a001                	j	80200042 <main+0x30>
        for (u64 *i = bssStart; i < bssEnd; i++) {
    80200044:	00026717          	auipc	a4,0x26
    80200048:	fbc70713          	addi	a4,a4,-68 # 80226000 <binary>
    8020004c:	0013e797          	auipc	a5,0x13e
    80200050:	fb478793          	addi	a5,a5,-76 # 8033e000 <bssEnd>
    80200054:	02f77063          	bgeu	a4,a5,80200074 <main+0x62>
    80200058:	87ba                	mv	a5,a4
    8020005a:	0013e717          	auipc	a4,0x13e
    8020005e:	fa570713          	addi	a4,a4,-91 # 8033dfff <_pgdir+0xfff>
    80200062:	8f1d                	sub	a4,a4,a5
    80200064:	9b61                	andi	a4,a4,-8
    80200066:	0721                	addi	a4,a4,8
    80200068:	973e                	add	a4,a4,a5
            *i = 0;
    8020006a:	0007b023          	sd	zero,0(a5)
        for (u64 *i = bssStart; i < bssEnd; i++) {
    8020006e:	07a1                	addi	a5,a5,8
    80200070:	fee79de3          	bne	a5,a4,8020006a <main+0x58>
        mainCount = mainCount + 1;
    80200074:	3e900793          	li	a5,1001
    80200078:	00025717          	auipc	a4,0x25
    8020007c:	f8f72423          	sw	a5,-120(a4) # 80225000 <mainCount>
        consoleInit();
    80200080:	00000097          	auipc	ra,0x0
    80200084:	094080e7          	jalr	148(ra) # 80200114 <consoleInit>
        printfInit();
    80200088:	00000097          	auipc	ra,0x0
    8020008c:	098080e7          	jalr	152(ra) # 80200120 <printfInit>
        printf("Hello, risc-v!\nBoot hartId: %ld \n\n", hartId);
    80200090:	85a6                	mv	a1,s1
    80200092:	00004517          	auipc	a0,0x4
    80200096:	f6e50513          	addi	a0,a0,-146 # 80204000 <textEnd>
    8020009a:	00000097          	auipc	ra,0x0
    8020009e:	376080e7          	jalr	886(ra) # 80200410 <printf>
    802000a2:	4785                	li	a5,1
                unsigned long mask = 1 << i;
    802000a4:	4f85                	li	t6,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    return a0;
}

inline void setMode(int hartId) {
	register u64 a7 asm ("a7") = 0x48534D;
    802000a6:	00485eb7          	lui	t4,0x485
    802000aa:	34de8e93          	addi	t4,t4,845 # 48534d <_start-0x7fd7acb3>
	register u64 a0 asm ("a0") = hartId;
	register u64 a1 asm ("a1") = 0x80200000;
    802000ae:	40100e13          	li	t3,1025
    802000b2:	0e56                	slli	t3,t3,0x15
	register u64 a2 asm ("a2") = 19260817; // priv
    802000b4:	0125e337          	lui	t1,0x125e
    802000b8:	59130313          	addi	t1,t1,1425 # 125e591 <_start-0x7efa1a6f>
        for (int i = 1; i < 5; ++ i) {
    802000bc:	4f15                	li	t5,5
    802000be:	a021                	j	802000c6 <main+0xb4>
    802000c0:	0785                	addi	a5,a5,1
    802000c2:	03e78a63          	beq	a5,t5,802000f6 <main+0xe4>
    802000c6:	0007871b          	sext.w	a4,a5
            if (i != hartId) {
    802000ca:	fef48be3          	beq	s1,a5,802000c0 <main+0xae>
                unsigned long mask = 1 << i;
    802000ce:	00ef973b          	sllw	a4,t6,a4
    802000d2:	fce43c23          	sd	a4,-40(s0)
	register u64 a7 asm ("a7") = 0x48534D;
    802000d6:	88f6                	mv	a7,t4
	register u64 a0 asm ("a0") = hartId;
    802000d8:	853e                	mv	a0,a5
	register u64 a1 asm ("a1") = 0x80200000;
    802000da:	85f2                	mv	a1,t3
	register u64 a2 asm ("a2") = 19260817; // priv
    802000dc:	861a                	mv	a2,t1
	register u64 a6 asm ("a6") = 0; // funcid
    802000de:	4801                	li	a6,0
	asm volatile ("ecall" : "+r" (a0) : "r"(a0), "r"(a1), "r"(a2), "r"(a6), "r" (a7) : "memory");
    802000e0:	00000073          	ecall
		SBI_CALL(which, arg0, arg1, arg2, 0)
#define SBI_CALL_4(which, arg0, arg1, arg2, arg3) \
		SBI_CALL(which, arg0, arg1, arg2, arg3)

static inline void sbi_send_ipi(const unsigned long* hart_mask) {
    SBI_CALL_1(SBI_SEND_IPI, hart_mask);
    802000e4:	fd840513          	addi	a0,s0,-40
    802000e8:	4581                	li	a1,0
    802000ea:	4601                	li	a2,0
    802000ec:	4681                	li	a3,0
    802000ee:	4891                	li	a7,4
    802000f0:	00000073          	ecall
    802000f4:	b7f1                	j	802000c0 <main+0xae>
        printf("end\n");
    802000f6:	00004517          	auipc	a0,0x4
    802000fa:	f3250513          	addi	a0,a0,-206 # 80204028 <textEnd+0x28>
    802000fe:	00000097          	auipc	ra,0x0
    80200102:	312080e7          	jalr	786(ra) # 80200410 <printf>
        __sync_synchronize();
    80200106:	0ff0000f          	fence
    }
    8020010a:	70a2                	ld	ra,40(sp)
    8020010c:	7402                	ld	s0,32(sp)
    8020010e:	64e2                	ld	s1,24(sp)
    80200110:	6145                	addi	sp,sp,48
    80200112:	8082                	ret

0000000080200114 <consoleInit>:
#include <Type.h>
#include <Driver.h>

void consoleInit() {
    80200114:	1141                	addi	sp,sp,-16
    80200116:	e422                	sd	s0,8(sp)
    80200118:	0800                	addi	s0,sp,16
    // todo
}
    8020011a:	6422                	ld	s0,8(sp)
    8020011c:	0141                	addi	sp,sp,16
    8020011e:	8082                	ret

0000000080200120 <printfInit>:

void printfInit() {
    80200120:	1141                	addi	sp,sp,-16
    80200122:	e422                	sd	s0,8(sp)
    80200124:	0800                	addi	s0,sp,16
    // todo
}
    80200126:	6422                	ld	s0,8(sp)
    80200128:	0141                	addi	sp,sp,16
    8020012a:	8082                	ret

000000008020012c <consoleInterrupt>:

void consoleInterrupt(int c) {
    8020012c:	1141                	addi	sp,sp,-16
    8020012e:	e422                	sd	s0,8(sp)
    80200130:	0800                	addi	s0,sp,16
    // todo

    80200132:	6422                	ld	s0,8(sp)
    80200134:	0141                	addi	sp,sp,16
    80200136:	8082                	ret

0000000080200138 <print>:

static void print(const char *fmt, va_list ap) {
    int i, c;
    char *s;

    for (i = 0; fmt[i]; i++) {
    80200138:	00054703          	lbu	a4,0(a0)
    8020013c:	2c070963          	beqz	a4,8020040e <print+0x2d6>
static void print(const char *fmt, va_list ap) {
    80200140:	711d                	addi	sp,sp,-96
    80200142:	eca2                	sd	s0,88(sp)
    80200144:	e8a6                	sd	s1,80(sp)
    80200146:	e4ca                	sd	s2,72(sp)
    80200148:	e0ce                	sd	s3,64(sp)
    8020014a:	fc52                	sd	s4,56(sp)
    8020014c:	f856                	sd	s5,48(sp)
    8020014e:	f45a                	sd	s6,40(sp)
    80200150:	1080                	addi	s0,sp,96
    80200152:	882a                	mv	a6,a0
    for (i = 0; fmt[i]; i++) {
    80200154:	862a                	mv	a2,a0
    80200156:	4781                	li	a5,0
        if (fmt[i] != '%'){
    80200158:	02500e13          	li	t3,37
            putchar(fmt[i]);
            continue;
        }
        c = fmt[++i];
        bool l = false;
        if (c == 'l') {
    8020015c:	06c00293          	li	t0,108
            l = true;
            c = fmt[++i];
        }
        switch (c) {
    80200160:	06400e93          	li	t4,100
    80200164:	07300493          	li	s1,115
    80200168:	07800393          	li	t2,120
    i = 0;
    8020016c:	4901                	li	s2,0
        buf[i++] = digits[x % base];
    8020016e:	00004317          	auipc	t1,0x4
    80200172:	ef230313          	addi	t1,t1,-270 # 80204060 <digits>
    } while((x /= base) != 0);
    80200176:	4fbd                	li	t6,15
        buf[i++] = digits[x % base];
    80200178:	46a9                	li	a3,10
    } while((x /= base) != 0);
    8020017a:	4f25                	li	t5,9
        buf[i++] = '-';
    8020017c:	02d00993          	li	s3,45
    while (*s) {
    80200180:	02800a13          	li	s4,40
    80200184:	a839                	j	802001a2 <print+0x6a>
            if (fmt[i] == '\n') {
    80200186:	08d70d63          	beq	a4,a3,80200220 <print+0xe8>
#define SBI_REMOTE_SFENCE_VMA 6
#define SBI_REMOTE_SFENCE_VMA_ASID 7
#define SBI_SHUTDOWN 8

inline void putchar(char c) {
    register u64 a0 asm ("a0") = (u64) c;
    8020018a:	00064503          	lbu	a0,0(a2)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    8020018e:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80200190:	00000073          	ecall
    for (i = 0; fmt[i]; i++) {
    80200194:	2785                	addiw	a5,a5,1
    80200196:	00f80633          	add	a2,a6,a5
    8020019a:	00064703          	lbu	a4,0(a2)
    8020019e:	24070f63          	beqz	a4,802003fc <print+0x2c4>
        if (fmt[i] != '%'){
    802001a2:	ffc712e3          	bne	a4,t3,80200186 <print+0x4e>
        c = fmt[++i];
    802001a6:	00178a9b          	addiw	s5,a5,1
    802001aa:	01580733          	add	a4,a6,s5
    802001ae:	00074703          	lbu	a4,0(a4)
    802001b2:	0007061b          	sext.w	a2,a4
        if (c == 'l') {
    802001b6:	06560a63          	beq	a2,t0,8020022a <print+0xf2>
        switch (c) {
    802001ba:	17d70a63          	beq	a4,t4,8020032e <print+0x1f6>
    802001be:	22eef763          	bgeu	t4,a4,802003ec <print+0x2b4>
    802001c2:	1e970263          	beq	a4,s1,802003a6 <print+0x26e>
    802001c6:	0c771d63          	bne	a4,t2,802002a0 <print+0x168>
                break;
            case 'x':
                if (l) {
                    printInt(va_arg(ap, u64), 16, false);
                } else {
                    printInt((u64) va_arg(ap, u32), 16, false);
    802001ca:	00858b13          	addi	s6,a1,8
        x = xx;
    802001ce:	0005e783          	lwu	a5,0(a1)
    802001d2:	fa040593          	addi	a1,s0,-96
    i = 0;
    802001d6:	864a                	mv	a2,s2
        buf[i++] = digits[x % base];
    802001d8:	8532                	mv	a0,a2
    802001da:	2605                	addiw	a2,a2,1
    802001dc:	00f7f713          	andi	a4,a5,15
    802001e0:	971a                	add	a4,a4,t1
    802001e2:	00074703          	lbu	a4,0(a4)
    802001e6:	00e58023          	sb	a4,0(a1)
    } while((x /= base) != 0);
    802001ea:	873e                	mv	a4,a5
    802001ec:	8391                	srli	a5,a5,0x4
    802001ee:	0585                	addi	a1,a1,1
    802001f0:	feefe4e3          	bltu	t6,a4,802001d8 <print+0xa0>
    while (--i >= 0) {
    802001f4:	02054363          	bltz	a0,8020021a <print+0xe2>
    802001f8:	fa040793          	addi	a5,s0,-96
    802001fc:	97aa                	add	a5,a5,a0
    802001fe:	f9f40713          	addi	a4,s0,-97
    80200202:	972a                	add	a4,a4,a0
    80200204:	1502                	slli	a0,a0,0x20
    80200206:	9101                	srli	a0,a0,0x20
    80200208:	8f09                	sub	a4,a4,a0
    register u64 a0 asm ("a0") = (u64) c;
    8020020a:	0007c503          	lbu	a0,0(a5)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    8020020e:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80200210:	00000073          	ecall
    80200214:	17fd                	addi	a5,a5,-1
    80200216:	fee79ae3          	bne	a5,a4,8020020a <print+0xd2>
                    printInt((u64) va_arg(ap, u32), 16, false);
    8020021a:	85da                	mv	a1,s6
}
    8020021c:	87d6                	mv	a5,s5
    8020021e:	bf9d                	j	80200194 <print+0x5c>
    register u64 a0 asm ("a0") = (u64) c;
    80200220:	4535                	li	a0,13
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    80200222:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80200224:	00000073          	ecall
};
    80200228:	b78d                	j	8020018a <print+0x52>
            c = fmt[++i];
    8020022a:	00278a9b          	addiw	s5,a5,2
    8020022e:	015807b3          	add	a5,a6,s5
    80200232:	0007c603          	lbu	a2,0(a5)
        switch (c) {
    80200236:	07d60f63          	beq	a2,t4,802002b4 <print+0x17c>
    8020023a:	06cef063          	bgeu	t4,a2,8020029a <print+0x162>
    8020023e:	16960463          	beq	a2,s1,802003a6 <print+0x26e>
    80200242:	04761e63          	bne	a2,t2,8020029e <print+0x166>
                    printInt(va_arg(ap, u64), 16, false);
    80200246:	00858b13          	addi	s6,a1,8
    8020024a:	619c                	ld	a5,0(a1)
    8020024c:	fa040593          	addi	a1,s0,-96
    i = 0;
    80200250:	864a                	mv	a2,s2
        buf[i++] = digits[x % base];
    80200252:	8532                	mv	a0,a2
    80200254:	2605                	addiw	a2,a2,1
    80200256:	00f7f713          	andi	a4,a5,15
    8020025a:	971a                	add	a4,a4,t1
    8020025c:	00074703          	lbu	a4,0(a4)
    80200260:	00e58023          	sb	a4,0(a1)
    } while((x /= base) != 0);
    80200264:	873e                	mv	a4,a5
    80200266:	8391                	srli	a5,a5,0x4
    80200268:	0585                	addi	a1,a1,1
    8020026a:	feefe4e3          	bltu	t6,a4,80200252 <print+0x11a>
    while (--i >= 0) {
    8020026e:	02054363          	bltz	a0,80200294 <print+0x15c>
    80200272:	fa040793          	addi	a5,s0,-96
    80200276:	97aa                	add	a5,a5,a0
    80200278:	f9f40713          	addi	a4,s0,-97
    8020027c:	972a                	add	a4,a4,a0
    8020027e:	1502                	slli	a0,a0,0x20
    80200280:	9101                	srli	a0,a0,0x20
    80200282:	8f09                	sub	a4,a4,a0
    register u64 a0 asm ("a0") = (u64) c;
    80200284:	0007c503          	lbu	a0,0(a5)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    80200288:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    8020028a:	00000073          	ecall
    8020028e:	17fd                	addi	a5,a5,-1
    80200290:	fef71ae3          	bne	a4,a5,80200284 <print+0x14c>
                    printInt(va_arg(ap, u64), 16, false);
    80200294:	85da                	mv	a1,s6
            c = fmt[++i];
    80200296:	87d6                	mv	a5,s5
}
    80200298:	bdf5                	j	80200194 <print+0x5c>
        switch (c) {
    8020029a:	15c60b63          	beq	a2,t3,802003f0 <print+0x2b8>
            c = fmt[++i];
    8020029e:	2601                	sext.w	a2,a2
    register u64 a0 asm ("a0") = (u64) c;
    802002a0:	8572                	mv	a0,t3
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    802002a2:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    802002a4:	00000073          	ecall
    register u64 a0 asm ("a0") = (u64) c;
    802002a8:	0ff67513          	zext.b	a0,a2
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    802002ac:	00000073          	ecall
};
    802002b0:	87d6                	mv	a5,s5
    802002b2:	b5cd                	j	80200194 <print+0x5c>
                    printInt(va_arg(ap, i64), 10, true);
    802002b4:	00858b13          	addi	s6,a1,8
    802002b8:	0005b883          	ld	a7,0(a1)
        x = -xx;
    802002bc:	43f8d713          	srai	a4,a7,0x3f
    802002c0:	011747b3          	xor	a5,a4,a7
    802002c4:	8f99                	sub	a5,a5,a4
    for (i = 0; fmt[i]; i++) {
    802002c6:	fa040593          	addi	a1,s0,-96
    802002ca:	874a                	mv	a4,s2
        buf[i++] = digits[x % base];
    802002cc:	853a                	mv	a0,a4
    802002ce:	2705                	addiw	a4,a4,1
    802002d0:	02d7f633          	remu	a2,a5,a3
    802002d4:	961a                	add	a2,a2,t1
    802002d6:	00064603          	lbu	a2,0(a2)
    802002da:	00c58023          	sb	a2,0(a1)
    } while((x /= base) != 0);
    802002de:	863e                	mv	a2,a5
    802002e0:	02d7d7b3          	divu	a5,a5,a3
    802002e4:	0585                	addi	a1,a1,1
    802002e6:	fecf63e3          	bltu	t5,a2,802002cc <print+0x194>
    if (sign) {
    802002ea:	0008da63          	bgez	a7,802002fe <print+0x1c6>
        buf[i++] = '-';
    802002ee:	fc070793          	addi	a5,a4,-64
    802002f2:	00878733          	add	a4,a5,s0
    802002f6:	ff370023          	sb	s3,-32(a4)
    802002fa:	0025071b          	addiw	a4,a0,2
    while (--i >= 0) {
    802002fe:	02e05563          	blez	a4,80200328 <print+0x1f0>
    80200302:	fa040793          	addi	a5,s0,-96
    80200306:	97ba                	add	a5,a5,a4
    80200308:	f9f40613          	addi	a2,s0,-97
    8020030c:	963a                	add	a2,a2,a4
    8020030e:	377d                	addiw	a4,a4,-1
    80200310:	1702                	slli	a4,a4,0x20
    80200312:	9301                	srli	a4,a4,0x20
    80200314:	40e60733          	sub	a4,a2,a4
    register u64 a0 asm ("a0") = (u64) c;
    80200318:	fff7c503          	lbu	a0,-1(a5)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    8020031c:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    8020031e:	00000073          	ecall
    80200322:	17fd                	addi	a5,a5,-1
    80200324:	fef71ae3          	bne	a4,a5,80200318 <print+0x1e0>
                    printInt(va_arg(ap, i64), 10, true);
    80200328:	85da                	mv	a1,s6
}
    8020032a:	87d6                	mv	a5,s5
    8020032c:	b5a5                	j	80200194 <print+0x5c>
                    printInt((i64) va_arg(ap, i32), 10, true);
    8020032e:	00858b13          	addi	s6,a1,8
    80200332:	419c                	lw	a5,0(a1)
    80200334:	88be                	mv	a7,a5
        x = -xx;
    80200336:	43f7d713          	srai	a4,a5,0x3f
    8020033a:	8fb9                	xor	a5,a5,a4
    8020033c:	8f99                	sub	a5,a5,a4
        buf[i++] = '-';
    8020033e:	fa040593          	addi	a1,s0,-96
    80200342:	874a                	mv	a4,s2
        buf[i++] = digits[x % base];
    80200344:	853a                	mv	a0,a4
    80200346:	2705                	addiw	a4,a4,1
    80200348:	02d7f633          	remu	a2,a5,a3
    8020034c:	961a                	add	a2,a2,t1
    8020034e:	00064603          	lbu	a2,0(a2)
    80200352:	00c58023          	sb	a2,0(a1)
    } while((x /= base) != 0);
    80200356:	863e                	mv	a2,a5
    80200358:	02d7d7b3          	divu	a5,a5,a3
    8020035c:	0585                	addi	a1,a1,1
    8020035e:	fecf63e3          	bltu	t5,a2,80200344 <print+0x20c>
    if (sign) {
    80200362:	0008da63          	bgez	a7,80200376 <print+0x23e>
        buf[i++] = '-';
    80200366:	fc070793          	addi	a5,a4,-64
    8020036a:	00878733          	add	a4,a5,s0
    8020036e:	ff370023          	sb	s3,-32(a4)
    80200372:	0025071b          	addiw	a4,a0,2
    while (--i >= 0) {
    80200376:	02e05563          	blez	a4,802003a0 <print+0x268>
    8020037a:	fa040793          	addi	a5,s0,-96
    8020037e:	97ba                	add	a5,a5,a4
    80200380:	f9f40613          	addi	a2,s0,-97
    80200384:	963a                	add	a2,a2,a4
    80200386:	377d                	addiw	a4,a4,-1
    80200388:	1702                	slli	a4,a4,0x20
    8020038a:	9301                	srli	a4,a4,0x20
    8020038c:	40e60733          	sub	a4,a2,a4
    register u64 a0 asm ("a0") = (u64) c;
    80200390:	fff7c503          	lbu	a0,-1(a5)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    80200394:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80200396:	00000073          	ecall
    8020039a:	17fd                	addi	a5,a5,-1
    8020039c:	fee79ae3          	bne	a5,a4,80200390 <print+0x258>
                    printInt((i64) va_arg(ap, i32), 10, true);
    802003a0:	85da                	mv	a1,s6
        c = fmt[++i];
    802003a2:	87d6                	mv	a5,s5
}
    802003a4:	bbc5                	j	80200194 <print+0x5c>
                }
                break;
            case 's':
                if ((s = va_arg(ap, char*)) == 0) {
    802003a6:	00858613          	addi	a2,a1,8
    802003aa:	619c                	ld	a5,0(a1)
    802003ac:	c799                	beqz	a5,802003ba <print+0x282>
    while (*s) {
    802003ae:	0007c703          	lbu	a4,0(a5)
    802003b2:	e31d                	bnez	a4,802003d8 <print+0x2a0>
                if ((s = va_arg(ap, char*)) == 0) {
    802003b4:	85b2                	mv	a1,a2
    while (*s) {
    802003b6:	87d6                	mv	a5,s5
    802003b8:	bbf1                	j	80200194 <print+0x5c>
                    s = "(null)";
    802003ba:	00004797          	auipc	a5,0x4
    802003be:	c7678793          	addi	a5,a5,-906 # 80204030 <textEnd+0x30>
    while (*s) {
    802003c2:	8752                	mv	a4,s4
    802003c4:	a811                	j	802003d8 <print+0x2a0>
        putchar(*s++);
    802003c6:	0785                	addi	a5,a5,1
    register u64 a0 asm ("a0") = (u64) c;
    802003c8:	fff7c503          	lbu	a0,-1(a5)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    802003cc:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    802003ce:	00000073          	ecall
    while (*s) {
    802003d2:	0007c703          	lbu	a4,0(a5)
    802003d6:	cb01                	beqz	a4,802003e6 <print+0x2ae>
        if (*s == '\n') {
    802003d8:	fed717e3          	bne	a4,a3,802003c6 <print+0x28e>
    register u64 a0 asm ("a0") = (u64) c;
    802003dc:	4535                	li	a0,13
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    802003de:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    802003e0:	00000073          	ecall
};
    802003e4:	b7cd                	j	802003c6 <print+0x28e>
                if ((s = va_arg(ap, char*)) == 0) {
    802003e6:	85b2                	mv	a1,a2
    802003e8:	87d6                	mv	a5,s5
    802003ea:	b36d                	j	80200194 <print+0x5c>
        switch (c) {
    802003ec:	ebc71ae3          	bne	a4,t3,802002a0 <print+0x168>
    register u64 a0 asm ("a0") = (u64) c;
    802003f0:	8572                	mv	a0,t3
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    802003f2:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    802003f4:	00000073          	ecall
};
    802003f8:	87d6                	mv	a5,s5
    802003fa:	bb69                	j	80200194 <print+0x5c>
                putchar('%');
                putchar(c);
                break;
        }
    }
}
    802003fc:	6466                	ld	s0,88(sp)
    802003fe:	64c6                	ld	s1,80(sp)
    80200400:	6926                	ld	s2,72(sp)
    80200402:	6986                	ld	s3,64(sp)
    80200404:	7a62                	ld	s4,56(sp)
    80200406:	7ac2                	ld	s5,48(sp)
    80200408:	7b22                	ld	s6,40(sp)
    8020040a:	6125                	addi	sp,sp,96
    8020040c:	8082                	ret
    8020040e:	8082                	ret

0000000080200410 <printf>:

void printf(const char *fmt, ...) {
    80200410:	711d                	addi	sp,sp,-96
    80200412:	ec06                	sd	ra,24(sp)
    80200414:	e822                	sd	s0,16(sp)
    80200416:	1000                	addi	s0,sp,32
    80200418:	e40c                	sd	a1,8(s0)
    8020041a:	e810                	sd	a2,16(s0)
    8020041c:	ec14                	sd	a3,24(s0)
    8020041e:	f018                	sd	a4,32(s0)
    80200420:	f41c                	sd	a5,40(s0)
    80200422:	03043823          	sd	a6,48(s0)
    80200426:	03143c23          	sd	a7,56(s0)
    va_list ap;
    va_start(ap, fmt);
    8020042a:	00840593          	addi	a1,s0,8
    8020042e:	feb43423          	sd	a1,-24(s0)
    print(fmt, ap);
    80200432:	00000097          	auipc	ra,0x0
    80200436:	d06080e7          	jalr	-762(ra) # 80200138 <print>
    va_end(ap);
}
    8020043a:	60e2                	ld	ra,24(sp)
    8020043c:	6442                	ld	s0,16(sp)
    8020043e:	6125                	addi	sp,sp,96
    80200440:	8082                	ret

0000000080200442 <_panic_>:

void _panic_(const char *file, int line, const char *fmt, ...) {
    80200442:	711d                	addi	sp,sp,-96
    80200444:	f406                	sd	ra,40(sp)
    80200446:	f022                	sd	s0,32(sp)
    80200448:	ec26                	sd	s1,24(sp)
    8020044a:	1800                	addi	s0,sp,48
    8020044c:	84b2                	mv	s1,a2
    8020044e:	e414                	sd	a3,8(s0)
    80200450:	e818                	sd	a4,16(s0)
    80200452:	ec1c                	sd	a5,24(s0)
    80200454:	03043023          	sd	a6,32(s0)
    80200458:	03143423          	sd	a7,40(s0)
#define SSTATUS_SIE (1L << 1)  // Supervisor Interrupt Enable
#define SSTATUS_UIE (1L << 0)  // User Interrupt Enable

static inline u64 r_sstatus() {
    u64 x;
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020045c:	100027f3          	csrr	a5,sstatus
	w_sstatus(r_sstatus() | SSTATUS_SIE);
}

// disable device interrupts
static inline void intr_off() {
	w_sstatus(r_sstatus() & ~SSTATUS_SIE);
    80200460:	9bf5                	andi	a5,a5,-3
    asm volatile("csrw sstatus, %0" : : "r" (x));
    80200462:	10079073          	csrw	sstatus,a5
    intr_off();
    printf("panic at %s: %d: ", file, line);
    80200466:	862e                	mv	a2,a1
    80200468:	85aa                	mv	a1,a0
    8020046a:	00004517          	auipc	a0,0x4
    8020046e:	bce50513          	addi	a0,a0,-1074 # 80204038 <textEnd+0x38>
    80200472:	00000097          	auipc	ra,0x0
    80200476:	f9e080e7          	jalr	-98(ra) # 80200410 <printf>
    va_list ap;
    va_start(ap, fmt);
    8020047a:	00840593          	addi	a1,s0,8
    8020047e:	fcb43c23          	sd	a1,-40(s0)
    print(fmt, ap);
    80200482:	8526                	mv	a0,s1
    80200484:	00000097          	auipc	ra,0x0
    80200488:	cb4080e7          	jalr	-844(ra) # 80200138 <print>
    register u64 a0 asm ("a0") = (u64) c;
    8020048c:	4529                	li	a0,10
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    8020048e:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80200490:	00000073          	ecall
    va_end(ap);
    putchar('\n');
    while (true);
    80200494:	a001                	j	80200494 <_panic_+0x52>

0000000080200496 <_assert_>:
}

void _assert_(const char* file, int line, int statement) {
    if (!statement) {
    80200496:	c211                	beqz	a2,8020049a <_assert_+0x4>
    80200498:	8082                	ret
void _assert_(const char* file, int line, int statement) {
    8020049a:	1141                	addi	sp,sp,-16
    8020049c:	e406                	sd	ra,8(sp)
    8020049e:	e022                	sd	s0,0(sp)
    802004a0:	0800                	addi	s0,sp,16
        _panic_(file, line, "assert failed\n");
    802004a2:	00004617          	auipc	a2,0x4
    802004a6:	bae60613          	addi	a2,a2,-1106 # 80204050 <textEnd+0x50>
    802004aa:	00000097          	auipc	ra,0x0
    802004ae:	f98080e7          	jalr	-104(ra) # 80200442 <_panic_>

00000000802004b2 <sd_cmd>:
{
	return spi_xfer(0xFF);
}

static u8 sd_cmd(u8 cmd, u32 arg, u8 crc)
{
    802004b2:	1101                	addi	sp,sp,-32
    802004b4:	ec06                	sd	ra,24(sp)
    802004b6:	e822                	sd	s0,16(sp)
    802004b8:	e426                	sd	s1,8(sp)
    802004ba:	1000                	addi	s0,sp,32
	unsigned long n;
	u8 r;

	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_HOLD;
    802004bc:	100507b7          	lui	a5,0x10050
    802004c0:	4709                	li	a4,2
    802004c2:	cf98                	sw	a4,24(a5)
	REG32(spi, SPI_REG_TXFIFO) = d;
    802004c4:	0ff00713          	li	a4,255
    802004c8:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802004ca:	10050737          	lui	a4,0x10050
    802004ce:	477c                	lw	a5,76(a4)
	} while (r < 0);
    802004d0:	fe07cfe3          	bltz	a5,802004ce <sd_cmd+0x1c>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802004d4:	2501                	sext.w	a0,a0
    802004d6:	100507b7          	lui	a5,0x10050
    802004da:	c7a8                	sw	a0,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802004dc:	10050737          	lui	a4,0x10050
    802004e0:	477c                	lw	a5,76(a4)
	} while (r < 0);
    802004e2:	fe07cfe3          	bltz	a5,802004e0 <sd_cmd+0x2e>
	sd_dummy();
	spi_xfer(cmd);
	spi_xfer(arg >> 24);
    802004e6:	0185d79b          	srliw	a5,a1,0x18
	REG32(spi, SPI_REG_TXFIFO) = d;
    802004ea:	10050737          	lui	a4,0x10050
    802004ee:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    802004f0:	477c                	lw	a5,76(a4)
	} while (r < 0);
    802004f2:	fe07cfe3          	bltz	a5,802004f0 <sd_cmd+0x3e>
	spi_xfer(arg >> 16);
    802004f6:	0105d79b          	srliw	a5,a1,0x10
    802004fa:	0ff7f793          	zext.b	a5,a5
	REG32(spi, SPI_REG_TXFIFO) = d;
    802004fe:	10050737          	lui	a4,0x10050
    80200502:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200504:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200506:	fe07cfe3          	bltz	a5,80200504 <sd_cmd+0x52>
	spi_xfer(arg >> 8);
    8020050a:	0085d79b          	srliw	a5,a1,0x8
    8020050e:	0ff7f793          	zext.b	a5,a5
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200512:	10050737          	lui	a4,0x10050
    80200516:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200518:	477c                	lw	a5,76(a4)
	} while (r < 0);
    8020051a:	fe07cfe3          	bltz	a5,80200518 <sd_cmd+0x66>
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020051e:	0ff5f593          	zext.b	a1,a1
    80200522:	100507b7          	lui	a5,0x10050
    80200526:	c7ac                	sw	a1,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200528:	10050737          	lui	a4,0x10050
    8020052c:	477c                	lw	a5,76(a4)
	} while (r < 0);
    8020052e:	fe07cfe3          	bltz	a5,8020052c <sd_cmd+0x7a>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200532:	0006079b          	sext.w	a5,a2
    80200536:	10050737          	lui	a4,0x10050
    8020053a:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020053c:	477c                	lw	a5,76(a4)
	} while (r < 0);
    8020053e:	fe07cfe3          	bltz	a5,8020053c <sd_cmd+0x8a>
    80200542:	3e800693          	li	a3,1000
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200546:	10050737          	lui	a4,0x10050
    8020054a:	04870593          	addi	a1,a4,72 # 10050048 <_start-0x701affb8>
    8020054e:	0ff00613          	li	a2,255
    80200552:	c190                	sw	a2,0(a1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200554:	477c                	lw	a5,76(a4)
    80200556:	0007849b          	sext.w	s1,a5
	} while (r < 0);
    8020055a:	fe07cde3          	bltz	a5,80200554 <sd_cmd+0xa2>
	spi_xfer(crc);

	n = 1000;
	do {
		r = sd_dummy();
		if (!(r & 0x80)) {
    8020055e:	0184979b          	slliw	a5,s1,0x18
    80200562:	4187d79b          	sraiw	a5,a5,0x18
    80200566:	0007dc63          	bgez	a5,8020057e <sd_cmd+0xcc>
			//printf("sd:cmd: %x\r\n", r);
			goto done;
		}
	} while (--n > 0);
    8020056a:	16fd                	addi	a3,a3,-1
    8020056c:	f2fd                	bnez	a3,80200552 <sd_cmd+0xa0>
	printf("sd_cmd: timeout\n");
    8020056e:	00004517          	auipc	a0,0x4
    80200572:	b0a50513          	addi	a0,a0,-1270 # 80204078 <digits+0x18>
    80200576:	00000097          	auipc	ra,0x0
    8020057a:	e9a080e7          	jalr	-358(ra) # 80200410 <printf>
done:
	return r;
}
    8020057e:	0ff4f513          	zext.b	a0,s1
    80200582:	60e2                	ld	ra,24(sp)
    80200584:	6442                	ld	s0,16(sp)
    80200586:	64a2                	ld	s1,8(sp)
    80200588:	6105                	addi	sp,sp,32
    8020058a:	8082                	ret

000000008020058c <sd_cmd0>:
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
	//for (a = 0; a < 1000000; a++) a = a;
}

static int sd_cmd0(void)
{
    8020058c:	1141                	addi	sp,sp,-16
    8020058e:	e406                	sd	ra,8(sp)
    80200590:	e022                	sd	s0,0(sp)
    80200592:	0800                	addi	s0,sp,16
	int rc;
	//printf("CMD0");
	rc = (sd_cmd(0x40, 0, 0x95) != 0x01);
    80200594:	09500613          	li	a2,149
    80200598:	4581                	li	a1,0
    8020059a:	04000513          	li	a0,64
    8020059e:	00000097          	auipc	ra,0x0
    802005a2:	f14080e7          	jalr	-236(ra) # 802004b2 <sd_cmd>
    802005a6:	2501                	sext.w	a0,a0
    802005a8:	157d                	addi	a0,a0,-1
    802005aa:	00a03533          	snez	a0,a0
	REG32(spi, SPI_REG_TXFIFO) = d;
    802005ae:	100507b7          	lui	a5,0x10050
    802005b2:	0ff00713          	li	a4,255
    802005b6:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802005b8:	10050737          	lui	a4,0x10050
    802005bc:	477c                	lw	a5,76(a4)
	} while (r < 0);
    802005be:	fe07cfe3          	bltz	a5,802005bc <sd_cmd0+0x30>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    802005c2:	100507b7          	lui	a5,0x10050
    802005c6:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	sd_cmd_end();
	return rc;
}
    802005ca:	60a2                	ld	ra,8(sp)
    802005cc:	6402                	ld	s0,0(sp)
    802005ce:	0141                	addi	sp,sp,16
    802005d0:	8082                	ret

00000000802005d2 <sdRead>:
#define SPIN_UPDATE(i)	(!((i) & ((1 << SPIN_SHIFT)-1)))
#define SPIN_INDEX(i)	(((i) >> SPIN_SHIFT) & 0x3)

//static const char spinner[] = { '-', '/', '|', '\\' };

int sdRead(u8 *buf, u64 startSector, u32 sectorNumber) {
    802005d2:	1101                	addi	sp,sp,-32
    802005d4:	ec06                	sd	ra,24(sp)
    802005d6:	e822                	sd	s0,16(sp)
    802005d8:	e426                	sd	s1,8(sp)
    802005da:	e04a                	sd	s2,0(sp)
    802005dc:	1000                	addi	s0,sp,32
    802005de:	84aa                	mv	s1,a0
    802005e0:	8932                	mv	s2,a2
	int rc = 0;

	//printf("CMD18");
	//printf("LOADING  ");

	if (sd_cmd(0x52, startSector * 512, 0xE1) != 0x00) {
    802005e2:	0e100613          	li	a2,225
    802005e6:	0095959b          	slliw	a1,a1,0x9
    802005ea:	05200513          	li	a0,82
    802005ee:	00000097          	auipc	ra,0x0
    802005f2:	ec4080e7          	jalr	-316(ra) # 802004b2 <sd_cmd>
    802005f6:	e905                	bnez	a0,80200626 <sdRead+0x54>
    802005f8:	20048813          	addi	a6,s1,512
    802005fc:	fff9079b          	addiw	a5,s2,-1
    80200600:	02079713          	slli	a4,a5,0x20
    80200604:	01775793          	srli	a5,a4,0x17
    80200608:	40078793          	addi	a5,a5,1024
    8020060c:	00f48eb3          	add	t4,s1,a5
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200610:	10050637          	lui	a2,0x10050
    80200614:	0ff00f13          	li	t5,255
    80200618:	857a                	mv	a0,t5
		long n;

		crc = 0;
		n = 512;
		//printf("%d\n", __LINE__);
		while (sd_dummy() != 0xFE);
    8020061a:	0fe00e13          	li	t3,254
		crc = 0;
    8020061e:	4f81                	li	t6,0
	crc ^= (crc & 0xff) << 5;
    80200620:	6889                	lui	a7,0x2
    80200622:	1881                	addi	a7,a7,-32
    80200624:	a075                	j	802006d0 <sdRead+0xfe>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200626:	100507b7          	lui	a5,0x10050
    8020062a:	0ff00713          	li	a4,255
    8020062e:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200630:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200632:	fe074fe3          	bltz	a4,80200630 <sdRead+0x5e>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200636:	100507b7          	lui	a5,0x10050
    8020063a:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
		return 1;
    8020063e:	4485                	li	s1,1
    80200640:	aa3d                	j	8020077e <sdRead+0x1ac>
		//printf("%d\n", __LINE__);
		do {
			u8 x = sd_dummy();
			*p++ = x;
    80200642:	8596                	mv	a1,t0
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200644:	00a32023          	sw	a0,0(t1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200648:	467c                	lw	a5,76(a2)
    8020064a:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    8020064e:	fe07cde3          	bltz	a5,80200648 <sdRead+0x76>
	return r;
    80200652:	0ff6f693          	zext.b	a3,a3
			*p++ = x;
    80200656:	00158293          	addi	t0,a1,1
    8020065a:	00d58023          	sb	a3,0(a1)
	crc = (u8)(crc >> 8) | (crc << 8);
    8020065e:	0087579b          	srliw	a5,a4,0x8
    80200662:	0087171b          	slliw	a4,a4,0x8
    80200666:	8fd9                	or	a5,a5,a4
    80200668:	17c2                	slli	a5,a5,0x30
    8020066a:	93c1                	srli	a5,a5,0x30
	crc ^= data;
    8020066c:	8fb5                	xor	a5,a5,a3
	crc ^= (u8)(crc >> 4) & 0xf;
    8020066e:	0047d71b          	srliw	a4,a5,0x4
    80200672:	8b3d                	andi	a4,a4,15
    80200674:	8f3d                	xor	a4,a4,a5
	crc ^= crc << 12;
    80200676:	00c7179b          	slliw	a5,a4,0xc
    8020067a:	8f3d                	xor	a4,a4,a5
	crc ^= (crc & 0xff) << 5;
    8020067c:	0107179b          	slliw	a5,a4,0x10
    80200680:	0107d79b          	srliw	a5,a5,0x10
    80200684:	0057979b          	slliw	a5,a5,0x5
    80200688:	00f8f7b3          	and	a5,a7,a5
    8020068c:	8f3d                	xor	a4,a4,a5
    8020068e:	1742                	slli	a4,a4,0x30
    80200690:	9341                	srli	a4,a4,0x30
			crc = crc16_round(crc, x);
		} while (--n > 0);
    80200692:	fb0298e3          	bne	t0,a6,80200642 <sdRead+0x70>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200696:	05e62423          	sw	t5,72(a2) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    8020069a:	467c                	lw	a5,76(a2)
    8020069c:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    802006a0:	fe07cde3          	bltz	a5,8020069a <sdRead+0xc8>

		crc_exp = ((u16)sd_dummy() << 8);
    802006a4:	0ff6f693          	zext.b	a3,a3
    802006a8:	0086969b          	slliw	a3,a3,0x8
    802006ac:	16c2                	slli	a3,a3,0x30
    802006ae:	92c1                	srli	a3,a3,0x30
	REG32(spi, SPI_REG_TXFIFO) = d;
    802006b0:	05e62423          	sw	t5,72(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    802006b4:	467c                	lw	a5,76(a2)
    802006b6:	0007859b          	sext.w	a1,a5
	} while (r < 0);
    802006ba:	fe07cde3          	bltz	a5,802006b4 <sdRead+0xe2>
		crc_exp |= sd_dummy();
    802006be:	0ff5f793          	zext.b	a5,a1

		if (crc != crc_exp) {
    802006c2:	8fd5                	or	a5,a5,a3
    802006c4:	02e79863          	bne	a5,a4,802006f4 <sdRead+0x122>
			printf("\b- CRC mismatch ");
			rc = 1;
			break;
		}
	} while (--sectorNumber > 0);
    802006c8:	20080813          	addi	a6,a6,512
    802006cc:	09d80a63          	beq	a6,t4,80200760 <sdRead+0x18e>
    802006d0:	e0080593          	addi	a1,a6,-512
	REG32(spi, SPI_REG_TXFIFO) = d;
    802006d4:	04860693          	addi	a3,a2,72
    802006d8:	c288                	sw	a0,0(a3)
		r = REG32(spi, SPI_REG_RXFIFO);
    802006da:	467c                	lw	a5,76(a2)
    802006dc:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    802006e0:	fe07cde3          	bltz	a5,802006da <sdRead+0x108>
		while (sd_dummy() != 0xFE);
    802006e4:	0ff77713          	zext.b	a4,a4
    802006e8:	ffc718e3          	bne	a4,t3,802006d8 <sdRead+0x106>
		crc = 0;
    802006ec:	877e                	mv	a4,t6
	REG32(spi, SPI_REG_TXFIFO) = d;
    802006ee:	04860313          	addi	t1,a2,72
    802006f2:	bf89                	j	80200644 <sdRead+0x72>
			printf("\b- CRC mismatch ");
    802006f4:	00004517          	auipc	a0,0x4
    802006f8:	99c50513          	addi	a0,a0,-1636 # 80204090 <digits+0x30>
    802006fc:	00000097          	auipc	ra,0x0
    80200700:	d14080e7          	jalr	-748(ra) # 80200410 <printf>
			rc = 1;
    80200704:	4485                	li	s1,1
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200706:	100507b7          	lui	a5,0x10050
    8020070a:	0ff00713          	li	a4,255
    8020070e:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200710:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200712:	fe074fe3          	bltz	a4,80200710 <sdRead+0x13e>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200716:	100507b7          	lui	a5,0x10050
    8020071a:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	sd_cmd_end();

	sd_cmd(0x4C, 0, 0x01);
    8020071e:	4605                	li	a2,1
    80200720:	4581                	li	a1,0
    80200722:	04c00513          	li	a0,76
    80200726:	00000097          	auipc	ra,0x0
    8020072a:	d8c080e7          	jalr	-628(ra) # 802004b2 <sd_cmd>
	int timeout = 0xfff;
	while (timeout--) {
    8020072e:	6605                	lui	a2,0x1
    80200730:	1679                	addi	a2,a2,-2
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200732:	100506b7          	lui	a3,0x10050
    80200736:	04868893          	addi	a7,a3,72 # 10050048 <_start-0x701affb8>
    8020073a:	0ff00593          	li	a1,255
    8020073e:	882e                	mv	a6,a1
	while (timeout--) {
    80200740:	557d                	li	a0,-1
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200742:	0108a023          	sw	a6,0(a7) # 2000 <_start-0x801fe000>
		r = REG32(spi, SPI_REG_RXFIFO);
    80200746:	46fc                	lw	a5,76(a3)
    80200748:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    8020074c:	fe07cde3          	bltz	a5,80200746 <sdRead+0x174>
		int tmp = sd_dummy();
		if (tmp == 0xFF) {
    80200750:	0ff77713          	zext.b	a4,a4
    80200754:	00b70863          	beq	a4,a1,80200764 <sdRead+0x192>
	while (timeout--) {
    80200758:	367d                	addiw	a2,a2,-1
    8020075a:	fea614e3          	bne	a2,a0,80200742 <sdRead+0x170>
    8020075e:	a021                	j	80200766 <sdRead+0x194>
	int rc = 0;
    80200760:	4481                	li	s1,0
    80200762:	b755                	j	80200706 <sdRead+0x134>
			break;
		}
	}
	if (!timeout) {
    80200764:	c605                	beqz	a2,8020078c <sdRead+0x1ba>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200766:	100507b7          	lui	a5,0x10050
    8020076a:	0ff00713          	li	a4,255
    8020076e:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200770:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200772:	fe074fe3          	bltz	a4,80200770 <sdRead+0x19e>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200776:	100507b7          	lui	a5,0x10050
    8020077a:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
		panic("");
	}
	sd_cmd_end();

	return rc;
}
    8020077e:	8526                	mv	a0,s1
    80200780:	60e2                	ld	ra,24(sp)
    80200782:	6442                	ld	s0,16(sp)
    80200784:	64a2                	ld	s1,8(sp)
    80200786:	6902                	ld	s2,0(sp)
    80200788:	6105                	addi	sp,sp,32
    8020078a:	8082                	ret
		panic("");
    8020078c:	00004617          	auipc	a2,0x4
    80200790:	8fc60613          	addi	a2,a2,-1796 # 80204088 <digits+0x28>
    80200794:	0d200593          	li	a1,210
    80200798:	00004517          	auipc	a0,0x4
    8020079c:	91050513          	addi	a0,a0,-1776 # 802040a8 <digits+0x48>
    802007a0:	00000097          	auipc	ra,0x0
    802007a4:	ca2080e7          	jalr	-862(ra) # 80200442 <_panic_>

00000000802007a8 <sdWrite>:

int sdWrite(u8 *buf, u64 startSector, u32 sectorNumber) {
    802007a8:	1101                	addi	sp,sp,-32
    802007aa:	ec06                	sd	ra,24(sp)
    802007ac:	e822                	sd	s0,16(sp)
    802007ae:	e426                	sd	s1,8(sp)
    802007b0:	e04a                	sd	s2,0(sp)
    802007b2:	1000                	addi	s0,sp,32
    802007b4:	84aa                	mv	s1,a0
    802007b6:	8932                	mv	s2,a2
	if (sd_cmd(25 | 0x40, startSector * 512, 0) != 0) {
    802007b8:	4601                	li	a2,0
    802007ba:	0095959b          	slliw	a1,a1,0x9
    802007be:	05900513          	li	a0,89
    802007c2:	00000097          	auipc	ra,0x0
    802007c6:	cf0080e7          	jalr	-784(ra) # 802004b2 <sd_cmd>
    802007ca:	e531                	bnez	a0,80200816 <sdWrite+0x6e>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802007cc:	100507b7          	lui	a5,0x10050
    802007d0:	0ff00713          	li	a4,255
    802007d4:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802007d6:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    802007d8:	fe074fe3          	bltz	a4,802007d6 <sdWrite+0x2e>
		return 1;
	}
	sd_dummy();

	u8 *p = buf;
	while (sectorNumber--) {
    802007dc:	fff9079b          	addiw	a5,s2,-1
    802007e0:	0c090f63          	beqz	s2,802008be <sdWrite+0x116>
    802007e4:	20048593          	addi	a1,s1,512
    802007e8:	40048e13          	addi	t3,s1,1024
    802007ec:	02079713          	slli	a4,a5,0x20
    802007f0:	01775793          	srli	a5,a4,0x17
    802007f4:	9e3e                	add	t3,t3,a5
	REG32(spi, SPI_REG_TXFIFO) = d;
    802007f6:	10050737          	lui	a4,0x10050
    802007fa:	04870613          	addi	a2,a4,72 # 10050048 <_start-0x701affb8>
    802007fe:	0fc00f93          	li	t6,252
    80200802:	0ff00813          	li	a6,255
    80200806:	6785                	lui	a5,0x1
    80200808:	ffe78f13          	addi	t5,a5,-2 # ffe <_start-0x801ff002>
    8020080c:	8342                	mv	t1,a6
		sd_dummy();
		sd_dummy();
		int timeout = 0xfff;
		while (--timeout) {
			int x = sd_dummy();
			if (5 == (x & 0x1f)) {
    8020080e:	4895                	li	a7,5
    80200810:	fff78e93          	addi	t4,a5,-1
    80200814:	a081                	j	80200854 <sdWrite+0xac>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200816:	100507b7          	lui	a5,0x10050
    8020081a:	0ff00713          	li	a4,255
    8020081e:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200820:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200822:	fe074fe3          	bltz	a4,80200820 <sdWrite+0x78>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200826:	100507b7          	lui	a5,0x10050
    8020082a:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
		return 1;
    8020082e:	4505                	li	a0,1
    80200830:	a0d5                	j	80200914 <sdWrite+0x16c>
    80200832:	8576                	mv	a0,t4
		}
		if (timeout == 0) {
			panic("");
		}
		timeout = 0xfff;
		while (--timeout) {
    80200834:	357d                	addiw	a0,a0,-1
    80200836:	c919                	beqz	a0,8020084c <sdWrite+0xa4>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200838:	01062023          	sw	a6,0(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020083c:	477c                	lw	a5,76(a4)
    8020083e:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    80200842:	fe07cde3          	bltz	a5,8020083c <sdWrite+0x94>
			int x = sd_dummy();
			if (x) {
    80200846:	0ff6f693          	zext.b	a3,a3
    8020084a:	d6ed                	beqz	a3,80200834 <sdWrite+0x8c>
	while (sectorNumber--) {
    8020084c:	20058593          	addi	a1,a1,512
    80200850:	07c58763          	beq	a1,t3,802008be <sdWrite+0x116>
    80200854:	e0058693          	addi	a3,a1,-512
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200858:	01f62023          	sw	t6,0(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020085c:	477c                	lw	a5,76(a4)
	} while (r < 0);
    8020085e:	fe07cfe3          	bltz	a5,8020085c <sdWrite+0xb4>
			spi_xfer(*p++);
    80200862:	0685                	addi	a3,a3,1
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200864:	fff6c783          	lbu	a5,-1(a3)
    80200868:	c21c                	sw	a5,0(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020086a:	477c                	lw	a5,76(a4)
	} while (r < 0);
    8020086c:	fe07cfe3          	bltz	a5,8020086a <sdWrite+0xc2>
		} while (--n > 0);
    80200870:	feb699e3          	bne	a3,a1,80200862 <sdWrite+0xba>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200874:	01062023          	sw	a6,0(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200878:	477c                	lw	a5,76(a4)
	} while (r < 0);
    8020087a:	fe07cfe3          	bltz	a5,80200878 <sdWrite+0xd0>
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020087e:	01062023          	sw	a6,0(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200882:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200884:	fe07cfe3          	bltz	a5,80200882 <sdWrite+0xda>
    80200888:	857a                	mv	a0,t5
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020088a:	00662023          	sw	t1,0(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020088e:	477c                	lw	a5,76(a4)
    80200890:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    80200894:	fe07cde3          	bltz	a5,8020088e <sdWrite+0xe6>
			if (5 == (x & 0x1f)) {
    80200898:	8afd                	andi	a3,a3,31
    8020089a:	f9168ce3          	beq	a3,a7,80200832 <sdWrite+0x8a>
		while (--timeout) {
    8020089e:	357d                	addiw	a0,a0,-1
    802008a0:	f56d                	bnez	a0,8020088a <sdWrite+0xe2>
			panic("");
    802008a2:	00003617          	auipc	a2,0x3
    802008a6:	7e660613          	addi	a2,a2,2022 # 80204088 <digits+0x28>
    802008aa:	0f100593          	li	a1,241
    802008ae:	00003517          	auipc	a0,0x3
    802008b2:	7fa50513          	addi	a0,a0,2042 # 802040a8 <digits+0x48>
    802008b6:	00000097          	auipc	ra,0x0
    802008ba:	b8c080e7          	jalr	-1140(ra) # 80200442 <_panic_>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802008be:	100507b7          	lui	a5,0x10050
    802008c2:	0fd00713          	li	a4,253
    802008c6:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802008c8:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    802008ca:	fe074fe3          	bltz	a4,802008c8 <sdWrite+0x120>
    802008ce:	6605                	lui	a2,0x1
    802008d0:	1679                	addi	a2,a2,-2
	REG32(spi, SPI_REG_TXFIFO) = d;
    802008d2:	100506b7          	lui	a3,0x10050
    802008d6:	04868813          	addi	a6,a3,72 # 10050048 <_start-0x701affb8>
    802008da:	0ff00593          	li	a1,255
    802008de:	852e                	mv	a0,a1
    802008e0:	00a82023          	sw	a0,0(a6)
		r = REG32(spi, SPI_REG_RXFIFO);
    802008e4:	46fc                	lw	a5,76(a3)
    802008e6:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    802008ea:	fe07cde3          	bltz	a5,802008e4 <sdWrite+0x13c>

	spi_xfer(0xFD);
	int timeout = 0xfff;
	while (--timeout) {
		int x = sd_dummy();
		if (x == 0xFF) {
    802008ee:	0ff77713          	zext.b	a4,a4
    802008f2:	00b70463          	beq	a4,a1,802008fa <sdWrite+0x152>
	while (--timeout) {
    802008f6:	367d                	addiw	a2,a2,-1
    802008f8:	f665                	bnez	a2,802008e0 <sdWrite+0x138>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802008fa:	100507b7          	lui	a5,0x10050
    802008fe:	0ff00713          	li	a4,255
    80200902:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200904:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200906:	fe074fe3          	bltz	a4,80200904 <sdWrite+0x15c>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    8020090a:	100507b7          	lui	a5,0x10050
    8020090e:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
			break;
		}
	}
	sd_cmd_end();

	return 0;
    80200912:	4501                	li	a0,0
}
    80200914:	60e2                	ld	ra,24(sp)
    80200916:	6442                	ld	s0,16(sp)
    80200918:	64a2                	ld	s1,8(sp)
    8020091a:	6902                	ld	s2,0(sp)
    8020091c:	6105                	addi	sp,sp,32
    8020091e:	8082                	ret

0000000080200920 <sdInit>:

int sdInit(void) {
    80200920:	7179                	addi	sp,sp,-48
    80200922:	f406                	sd	ra,40(sp)
    80200924:	f022                	sd	s0,32(sp)
    80200926:	ec26                	sd	s1,24(sp)
    80200928:	e84a                	sd	s2,16(sp)
    8020092a:	e44e                	sd	s3,8(sp)
    8020092c:	e052                	sd	s4,0(sp)
    8020092e:	1800                	addi	s0,sp,48
	REG32(uart, UART_REG_TXCTRL) = UART_TXEN;
    80200930:	100107b7          	lui	a5,0x10010
    80200934:	4705                	li	a4,1
    80200936:	c798                	sw	a4,8(a5)
	REG32(spi, SPI_REG_FMT) = 0x80000;
    80200938:	100507b7          	lui	a5,0x10050
    8020093c:	00080737          	lui	a4,0x80
    80200940:	c3b8                	sw	a4,64(a5)
	REG32(spi, SPI_REG_CSDEF) |= 1;
    80200942:	4bd8                	lw	a4,20(a5)
    80200944:	00176713          	ori	a4,a4,1
    80200948:	cbd8                	sw	a4,20(a5)
	REG32(spi, SPI_REG_CSID) = 0;
    8020094a:	0007a823          	sw	zero,16(a5) # 10050010 <_start-0x701afff0>
	REG32(spi, SPI_REG_SCKDIV) = f;
    8020094e:	6705                	lui	a4,0x1
    80200950:	1779                	addi	a4,a4,-2
    80200952:	c398                	sw	a4,0(a5)
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_OFF;
    80200954:	470d                	li	a4,3
    80200956:	cf98                	sw	a4,24(a5)
    80200958:	46a9                	li	a3,10
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020095a:	10050737          	lui	a4,0x10050
    8020095e:	04870593          	addi	a1,a4,72 # 10050048 <_start-0x701affb8>
    80200962:	0ff00613          	li	a2,255
    80200966:	c190                	sw	a2,0(a1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200968:	477c                	lw	a5,76(a4)
	} while (r < 0);
    8020096a:	fe07cfe3          	bltz	a5,80200968 <sdInit+0x48>
	for (i = 10; i > 0; i--) {
    8020096e:	16fd                	addi	a3,a3,-1
    80200970:	fafd                	bnez	a3,80200966 <sdInit+0x46>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200972:	100507b7          	lui	a5,0x10050
    80200976:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>

	sd_poweron(4094);
	sd_cmd0();
    8020097a:	00000097          	auipc	ra,0x0
    8020097e:	c12080e7          	jalr	-1006(ra) # 8020058c <sd_cmd0>
	//sd_poweron(4094);
	printf("INIT\n");
    80200982:	00003517          	auipc	a0,0x3
    80200986:	72e50513          	addi	a0,a0,1838 # 802040b0 <digits+0x50>
    8020098a:	00000097          	auipc	ra,0x0
    8020098e:	a86080e7          	jalr	-1402(ra) # 80200410 <printf>
	if (sd_cmd0() ||
    80200992:	00000097          	auipc	ra,0x0
    80200996:	bfa080e7          	jalr	-1030(ra) # 8020058c <sd_cmd0>
    8020099a:	892a                	mv	s2,a0
    8020099c:	e95d                	bnez	a0,80200a52 <sdInit+0x132>
	rc = (sd_cmd(0x48, 0x000001AA, 0x87) != 0x01);
    8020099e:	08700613          	li	a2,135
    802009a2:	1aa00593          	li	a1,426
    802009a6:	04800513          	li	a0,72
    802009aa:	00000097          	auipc	ra,0x0
    802009ae:	b08080e7          	jalr	-1272(ra) # 802004b2 <sd_cmd>
    802009b2:	0005071b          	sext.w	a4,a0
    802009b6:	177d                	addi	a4,a4,-1
    802009b8:	00e03633          	snez	a2,a4
	REG32(spi, SPI_REG_TXFIFO) = d;
    802009bc:	100507b7          	lui	a5,0x10050
    802009c0:	0ff00713          	li	a4,255
    802009c4:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802009c6:	10050737          	lui	a4,0x10050
    802009ca:	477c                	lw	a5,76(a4)
	} while (r < 0);
    802009cc:	fe07cfe3          	bltz	a5,802009ca <sdInit+0xaa>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802009d0:	100507b7          	lui	a5,0x10050
    802009d4:	0ff00713          	li	a4,255
    802009d8:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802009da:	10050737          	lui	a4,0x10050
    802009de:	477c                	lw	a5,76(a4)
	} while (r < 0);
    802009e0:	fe07cfe3          	bltz	a5,802009de <sdInit+0xbe>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802009e4:	100507b7          	lui	a5,0x10050
    802009e8:	0ff00713          	li	a4,255
    802009ec:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802009ee:	100506b7          	lui	a3,0x10050
    802009f2:	46fc                	lw	a5,76(a3)
    802009f4:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    802009f8:	fe07cde3          	bltz	a5,802009f2 <sdInit+0xd2>
	rc |= ((sd_dummy() & 0xF) != 0x1); /* voltage */
    802009fc:	8b3d                	andi	a4,a4,15
    802009fe:	fff70793          	addi	a5,a4,-1 # 1004ffff <_start-0x701b0001>
    80200a02:	00f03733          	snez	a4,a5
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200a06:	100507b7          	lui	a5,0x10050
    80200a0a:	0ff00693          	li	a3,255
    80200a0e:	c7b4                	sw	a3,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200a10:	100505b7          	lui	a1,0x10050
    80200a14:	45fc                	lw	a5,76(a1)
    80200a16:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    80200a1a:	fe07cde3          	bltz	a5,80200a14 <sdInit+0xf4>
	rc |= (sd_dummy() != 0xAA); /* check pattern */
    80200a1e:	0ff6f793          	zext.b	a5,a3
    80200a22:	f5678793          	addi	a5,a5,-170 # 1004ff56 <_start-0x701b00aa>
    80200a26:	00f037b3          	snez	a5,a5
    80200a2a:	8fd9                	or	a5,a5,a4
    80200a2c:	00f66733          	or	a4,a2,a5
    80200a30:	0ff77713          	zext.b	a4,a4
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200a34:	100507b7          	lui	a5,0x10050
    80200a38:	0ff00693          	li	a3,255
    80200a3c:	c7b4                	sw	a3,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200a3e:	100506b7          	lui	a3,0x10050
    80200a42:	46fc                	lw	a5,76(a3)
	} while (r < 0);
    80200a44:	fe07cfe3          	bltz	a5,80200a42 <sdInit+0x122>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200a48:	100507b7          	lui	a5,0x10050
    80200a4c:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	if (sd_cmd0() ||
    80200a50:	c31d                	beqz	a4,80200a76 <sdInit+0x156>
	    sd_cmd8() ||
	    sd_acmd41() ||
	    sd_cmd58() ||
	    sd_cmd16()) {
		printf("ERROR");
    80200a52:	00003517          	auipc	a0,0x3
    80200a56:	66e50513          	addi	a0,a0,1646 # 802040c0 <digits+0x60>
    80200a5a:	00000097          	auipc	ra,0x0
    80200a5e:	9b6080e7          	jalr	-1610(ra) # 80200410 <printf>
		return 1;
    80200a62:	4905                	li	s2,1
	REG32(spi, SPI_REG_SCKDIV) = (F_CLK / 16666666UL);
	printf("BOOT");

	__asm__ __volatile__ ("fence.i" : : : "memory");
	return 0;
}
    80200a64:	854a                	mv	a0,s2
    80200a66:	70a2                	ld	ra,40(sp)
    80200a68:	7402                	ld	s0,32(sp)
    80200a6a:	64e2                	ld	s1,24(sp)
    80200a6c:	6942                	ld	s2,16(sp)
    80200a6e:	69a2                	ld	s3,8(sp)
    80200a70:	6a02                	ld	s4,0(sp)
    80200a72:	6145                	addi	sp,sp,48
    80200a74:	8082                	ret
	printf("ACMD41");
    80200a76:	00003517          	auipc	a0,0x3
    80200a7a:	64250513          	addi	a0,a0,1602 # 802040b8 <digits+0x58>
    80200a7e:	00000097          	auipc	ra,0x0
    80200a82:	992080e7          	jalr	-1646(ra) # 80200410 <printf>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200a86:	100504b7          	lui	s1,0x10050
    80200a8a:	0ff00a13          	li	s4,255
	} while (r == 0x01);
    80200a8e:	4985                	li	s3,1
	sd_cmd(0x77, 0, 0x65);
    80200a90:	06500613          	li	a2,101
    80200a94:	4581                	li	a1,0
    80200a96:	07700513          	li	a0,119
    80200a9a:	00000097          	auipc	ra,0x0
    80200a9e:	a18080e7          	jalr	-1512(ra) # 802004b2 <sd_cmd>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200aa2:	0544a423          	sw	s4,72(s1) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    80200aa6:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80200aa8:	fe07cfe3          	bltz	a5,80200aa6 <sdInit+0x186>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200aac:	0004ac23          	sw	zero,24(s1)
		r = sd_cmd(0x69, 0x40000000, 0x77); /* HCS = 1 */
    80200ab0:	07700613          	li	a2,119
    80200ab4:	400005b7          	lui	a1,0x40000
    80200ab8:	06900513          	li	a0,105
    80200abc:	00000097          	auipc	ra,0x0
    80200ac0:	9f6080e7          	jalr	-1546(ra) # 802004b2 <sd_cmd>
	} while (r == 0x01);
    80200ac4:	fd3506e3          	beq	a0,s3,80200a90 <sdInit+0x170>
	    sd_cmd8() ||
    80200ac8:	f549                	bnez	a0,80200a52 <sdInit+0x132>
	rc = (sd_cmd(0x50, 0x200, 0x15) != 0x00);
    80200aca:	4655                	li	a2,21
    80200acc:	20000593          	li	a1,512
    80200ad0:	05000513          	li	a0,80
    80200ad4:	00000097          	auipc	ra,0x0
    80200ad8:	9de080e7          	jalr	-1570(ra) # 802004b2 <sd_cmd>
    80200adc:	86aa                	mv	a3,a0
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200ade:	100507b7          	lui	a5,0x10050
    80200ae2:	0ff00713          	li	a4,255
    80200ae6:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200ae8:	10050737          	lui	a4,0x10050
    80200aec:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200aee:	fe07cfe3          	bltz	a5,80200aec <sdInit+0x1cc>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200af2:	100507b7          	lui	a5,0x10050
    80200af6:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	    sd_cmd58() ||
    80200afa:	fea1                	bnez	a3,80200a52 <sdInit+0x132>
	REG32(spi, SPI_REG_SCKDIV) = (F_CLK / 16666666UL);
    80200afc:	100507b7          	lui	a5,0x10050
    80200b00:	03c00713          	li	a4,60
    80200b04:	c398                	sw	a4,0(a5)
	printf("BOOT");
    80200b06:	00003517          	auipc	a0,0x3
    80200b0a:	5c250513          	addi	a0,a0,1474 # 802040c8 <digits+0x68>
    80200b0e:	00000097          	auipc	ra,0x0
    80200b12:	902080e7          	jalr	-1790(ra) # 80200410 <printf>
	__asm__ __volatile__ ("fence.i" : : : "memory");
    80200b16:	0000100f          	fence.i
	return 0;
    80200b1a:	b7a9                	j	80200a64 <sdInit+0x144>

0000000080200b1c <memoryInit>:
    pageInsert(kernelPageDirectory, 1ll << 35, page2pa(p), PTE_READ | PTE_WRITE);
    *((u32*)page2pa(p)) = 65536;
    printf("value1 of %lx:  %d\n", 1ll << 35, *((u32*)(1ll<<35)));
}

void memoryInit() {
    80200b1c:	715d                	addi	sp,sp,-80
    80200b1e:	e486                	sd	ra,72(sp)
    80200b20:	e0a2                	sd	s0,64(sp)
    80200b22:	fc26                	sd	s1,56(sp)
    80200b24:	f84a                	sd	s2,48(sp)
    80200b26:	f44e                	sd	s3,40(sp)
    80200b28:	f052                	sd	s4,32(sp)
    80200b2a:	ec56                	sd	s5,24(sp)
    80200b2c:	0880                	addi	s0,sp,80
    printf("Memory init start...\n");
    80200b2e:	00003517          	auipc	a0,0x3
    80200b32:	5a250513          	addi	a0,a0,1442 # 802040d0 <digits+0x70>
    80200b36:	00000097          	auipc	ra,0x0
    80200b3a:	8da080e7          	jalr	-1830(ra) # 80200410 <printf>
    u32 n = PA2PPN(kernelEnd);
    80200b3e:	0013d817          	auipc	a6,0x13d
    80200b42:	4c280813          	addi	a6,a6,1218 # 8033e000 <bssEnd>
    80200b46:	00c85813          	srli	a6,a6,0xc
    80200b4a:	0008061b          	sext.w	a2,a6
    80200b4e:	1842                	slli	a6,a6,0x30
    80200b50:	03085813          	srli	a6,a6,0x30
    for (i = 0; i < n; i++) {
    80200b54:	40080363          	beqz	a6,80200f5a <memoryInit+0x43e>
    80200b58:	00026797          	auipc	a5,0x26
    80200b5c:	8b878793          	addi	a5,a5,-1864 # 80226410 <pages+0x10>
    80200b60:	fff8069b          	addiw	a3,a6,-1
    80200b64:	1682                	slli	a3,a3,0x20
    80200b66:	9281                	srli	a3,a3,0x20
    80200b68:	00169713          	slli	a4,a3,0x1
    80200b6c:	9736                	add	a4,a4,a3
    80200b6e:	070e                	slli	a4,a4,0x3
    80200b70:	00026697          	auipc	a3,0x26
    80200b74:	8b868693          	addi	a3,a3,-1864 # 80226428 <pages+0x28>
    80200b78:	9736                	add	a4,a4,a3
        pages[i].ref = 1;
    80200b7a:	4685                	li	a3,1
    80200b7c:	c394                	sw	a3,0(a5)
    for (i = 0; i < n; i++) {
    80200b7e:	07e1                	addi	a5,a5,24
    80200b80:	fee79ee3          	bne	a5,a4,80200b7c <memoryInit+0x60>
    LIST_INIT(&freePages);
    80200b84:	000e6797          	auipc	a5,0xe6
    80200b88:	8607be23          	sd	zero,-1924(a5) # 802e6400 <freePages>
    for (; i < n; i++) {
    80200b8c:	823d                	srli	a2,a2,0xf
    80200b8e:	8a05                	andi	a2,a2,1
    80200b90:	ee59                	bnez	a2,80200c2e <memoryInit+0x112>
    80200b92:	000e6717          	auipc	a4,0xe6
    80200b96:	86e73703          	ld	a4,-1938(a4) # 802e6400 <freePages>
void memoryInit() {
    80200b9a:	8642                	mv	a2,a6
        pages[i].ref = 0;
    80200b9c:	00026597          	auipc	a1,0x26
    80200ba0:	86458593          	addi	a1,a1,-1948 # 80226400 <pages>
        LIST_INSERT_HEAD(&freePages, &pages[i], link);
    80200ba4:	000e6317          	auipc	t1,0xe6
    80200ba8:	85c30313          	addi	t1,t1,-1956 # 802e6400 <freePages>
    for (; i < n; i++) {
    80200bac:	68a1                	lui	a7,0x8
    80200bae:	a02d                	j	80200bd8 <memoryInit+0xbc>
        LIST_INSERT_HEAD(&freePages, &pages[i], link);
    80200bb0:	00151793          	slli	a5,a0,0x1
    80200bb4:	97aa                	add	a5,a5,a0
    80200bb6:	078e                	slli	a5,a5,0x3
    80200bb8:	97ae                	add	a5,a5,a1
    80200bba:	e71c                	sd	a5,8(a4)
    80200bbc:	02061693          	slli	a3,a2,0x20
    80200bc0:	9281                	srli	a3,a3,0x20
    80200bc2:	00169793          	slli	a5,a3,0x1
    80200bc6:	00d78733          	add	a4,a5,a3
    80200bca:	070e                	slli	a4,a4,0x3
    80200bcc:	972e                	add	a4,a4,a1
    80200bce:	00673423          	sd	t1,8(a4)
    for (; i < n; i++) {
    80200bd2:	2605                	addiw	a2,a2,1
    80200bd4:	03167063          	bgeu	a2,a7,80200bf4 <memoryInit+0xd8>
        pages[i].ref = 0;
    80200bd8:	02061513          	slli	a0,a2,0x20
    80200bdc:	9101                	srli	a0,a0,0x20
    80200bde:	00151793          	slli	a5,a0,0x1
    80200be2:	00a786b3          	add	a3,a5,a0
    80200be6:	068e                	slli	a3,a3,0x3
    80200be8:	96ae                	add	a3,a3,a1
    80200bea:	0006a823          	sw	zero,16(a3)
        LIST_INSERT_HEAD(&freePages, &pages[i], link);
    80200bee:	e298                	sd	a4,0(a3)
    80200bf0:	f361                	bnez	a4,80200bb0 <memoryInit+0x94>
    80200bf2:	b7e9                	j	80200bbc <memoryInit+0xa0>
    80200bf4:	00180693          	addi	a3,a6,1
    80200bf8:	6621                	lui	a2,0x8
    80200bfa:	4781                	li	a5,0
    80200bfc:	00d66663          	bltu	a2,a3,80200c08 <memoryInit+0xec>
    80200c00:	67a1                	lui	a5,0x8
    80200c02:	37fd                	addiw	a5,a5,-1
    80200c04:	410787bb          	subw	a5,a5,a6
    80200c08:	000e5697          	auipc	a3,0xe5
    80200c0c:	7f868693          	addi	a3,a3,2040 # 802e6400 <freePages>
    80200c10:	e298                	sd	a4,0(a3)
    80200c12:	010787bb          	addw	a5,a5,a6
    80200c16:	1782                	slli	a5,a5,0x20
    80200c18:	9381                	srli	a5,a5,0x20
    80200c1a:	00179713          	slli	a4,a5,0x1
    80200c1e:	97ba                	add	a5,a5,a4
    80200c20:	078e                	slli	a5,a5,0x3
    80200c22:	00025717          	auipc	a4,0x25
    80200c26:	7de70713          	addi	a4,a4,2014 # 80226400 <pages>
    80200c2a:	97ba                	add	a5,a5,a4
    80200c2c:	e794                	sd	a3,8(a5)
    pageInsert(kernelPageDirectory, UART_V, UART, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200c2e:	0c600693          	li	a3,198
    80200c32:	10000637          	lui	a2,0x10000
    80200c36:	3f100593          	li	a1,1009
    80200c3a:	05f2                	slli	a1,a1,0x1c
    80200c3c:	0013c517          	auipc	a0,0x13c
    80200c40:	3c450513          	addi	a0,a0,964 # 8033d000 <_pgdir>
    80200c44:	00000097          	auipc	ra,0x0
    80200c48:	62e080e7          	jalr	1582(ra) # 80201272 <pageInsert>
    80200c4c:	01f814b7          	lui	s1,0x1f81
    80200c50:	04b6                	slli	s1,s1,0xd
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200c52:	fc100993          	li	s3,-63
    80200c56:	1982                	slli	s3,s3,0x20
    80200c58:	0013ca97          	auipc	s5,0x13c
    80200c5c:	3a8a8a93          	addi	s5,s5,936 # 8033d000 <_pgdir>
    for (u64 i = 0; i < 0x10000; i += PAGE_SIZE) {
    80200c60:	6a05                	lui	s4,0x1
    80200c62:	003f0937          	lui	s2,0x3f0
    80200c66:	20190913          	addi	s2,s2,513 # 3f0201 <_start-0x7fe0fdff>
    80200c6a:	0942                	slli	s2,s2,0x10
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200c6c:	0c600693          	li	a3,198
    80200c70:	01348633          	add	a2,s1,s3
    80200c74:	85a6                	mv	a1,s1
    80200c76:	8556                	mv	a0,s5
    80200c78:	00000097          	auipc	ra,0x0
    80200c7c:	5fa080e7          	jalr	1530(ra) # 80201272 <pageInsert>
    for (u64 i = 0; i < 0x10000; i += PAGE_SIZE) {
    80200c80:	94d2                	add	s1,s1,s4
    80200c82:	ff2495e3          	bne	s1,s2,80200c6c <memoryInit+0x150>
    80200c86:	00fc34b7          	lui	s1,0xfc3
    80200c8a:	04ba                	slli	s1,s1,0xe
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200c8c:	fc100993          	li	s3,-63
    80200c90:	1982                	slli	s3,s3,0x20
    80200c92:	0013ca97          	auipc	s5,0x13c
    80200c96:	36ea8a93          	addi	s5,s5,878 # 8033d000 <_pgdir>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    80200c9a:	6a05                	lui	s4,0x1
    80200c9c:	00fc3937          	lui	s2,0xfc3
    80200ca0:	0905                	addi	s2,s2,1
    80200ca2:	093a                	slli	s2,s2,0xe
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200ca4:	0c600693          	li	a3,198
    80200ca8:	01348633          	add	a2,s1,s3
    80200cac:	85a6                	mv	a1,s1
    80200cae:	8556                	mv	a0,s5
    80200cb0:	00000097          	auipc	ra,0x0
    80200cb4:	5c2080e7          	jalr	1474(ra) # 80201272 <pageInsert>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    80200cb8:	94d2                	add	s1,s1,s4
    80200cba:	ff2495e3          	bne	s1,s2,80200ca4 <memoryInit+0x188>
    80200cbe:	1f8614b7          	lui	s1,0x1f861
    80200cc2:	04a6                	slli	s1,s1,0x9
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200cc4:	fc100993          	li	s3,-63
    80200cc8:	1982                	slli	s3,s3,0x20
    80200cca:	0013ca97          	auipc	s5,0x13c
    80200cce:	336a8a93          	addi	s5,s5,822 # 8033d000 <_pgdir>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    80200cd2:	6a05                	lui	s4,0x1
    80200cd4:	00fc3937          	lui	s2,0xfc3
    80200cd8:	08190913          	addi	s2,s2,129 # fc3081 <_start-0x7f23cf7f>
    80200cdc:	093a                	slli	s2,s2,0xe
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200cde:	0c600693          	li	a3,198
    80200ce2:	01348633          	add	a2,s1,s3
    80200ce6:	85a6                	mv	a1,s1
    80200ce8:	8556                	mv	a0,s5
    80200cea:	00000097          	auipc	ra,0x0
    80200cee:	588080e7          	jalr	1416(ra) # 80201272 <pageInsert>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    80200cf2:	94d2                	add	s1,s1,s4
    80200cf4:	ff2495e3          	bne	s1,s2,80200cde <memoryInit+0x1c2>
    pageInsert(kernelPageDirectory, SPI_CTRL_ADDR, SPI_CTRL_ADDR, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200cf8:	0c600693          	li	a3,198
    80200cfc:	10050637          	lui	a2,0x10050
    80200d00:	100505b7          	lui	a1,0x10050
    80200d04:	0013c517          	auipc	a0,0x13c
    80200d08:	2fc50513          	addi	a0,a0,764 # 8033d000 <_pgdir>
    80200d0c:	00000097          	auipc	ra,0x0
    80200d10:	566080e7          	jalr	1382(ra) # 80201272 <pageInsert>
    pageInsert(kernelPageDirectory, UART_CTRL_ADDR, UART_CTRL_ADDR, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200d14:	0c600693          	li	a3,198
    80200d18:	10010637          	lui	a2,0x10010
    80200d1c:	100105b7          	lui	a1,0x10010
    80200d20:	0013c517          	auipc	a0,0x13c
    80200d24:	2e050513          	addi	a0,a0,736 # 8033d000 <_pgdir>
    80200d28:	00000097          	auipc	ra,0x0
    80200d2c:	54a080e7          	jalr	1354(ra) # 80201272 <pageInsert>
    va = pa = (u64)kernelStart;
    80200d30:	fffff917          	auipc	s2,0xfffff
    80200d34:	2d090913          	addi	s2,s2,720 # 80200000 <_start>
    for (u64 i = 0; va + i < (u64)textEnd; i += PAGE_SIZE) {
    80200d38:	00003497          	auipc	s1,0x3
    80200d3c:	2c848493          	addi	s1,s1,712 # 80204000 <textEnd>
    80200d40:	02997363          	bgeu	s2,s1,80200d66 <memoryInit+0x24a>
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_EXECUTE | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200d44:	0013ca17          	auipc	s4,0x13c
    80200d48:	2bca0a13          	addi	s4,s4,700 # 8033d000 <_pgdir>
    for (u64 i = 0; va + i < (u64)textEnd; i += PAGE_SIZE) {
    80200d4c:	6985                	lui	s3,0x1
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_EXECUTE | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200d4e:	0ce00693          	li	a3,206
    80200d52:	864a                	mv	a2,s2
    80200d54:	85ca                	mv	a1,s2
    80200d56:	8552                	mv	a0,s4
    80200d58:	00000097          	auipc	ra,0x0
    80200d5c:	51a080e7          	jalr	1306(ra) # 80201272 <pageInsert>
    for (u64 i = 0; va + i < (u64)textEnd; i += PAGE_SIZE) {
    80200d60:	994e                	add	s2,s2,s3
    80200d62:	fe9966e3          	bltu	s2,s1,80200d4e <memoryInit+0x232>
    for (u64 i = 0; va + i < PHYSICAL_MEMORY_TOP; i += PAGE_SIZE) {
    80200d66:	47c5                	li	a5,17
    80200d68:	07ee                	slli	a5,a5,0x1b
    80200d6a:	02f4f463          	bgeu	s1,a5,80200d92 <memoryInit+0x276>
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200d6e:	0013ca17          	auipc	s4,0x13c
    80200d72:	292a0a13          	addi	s4,s4,658 # 8033d000 <_pgdir>
    for (u64 i = 0; va + i < PHYSICAL_MEMORY_TOP; i += PAGE_SIZE) {
    80200d76:	6985                	lui	s3,0x1
    80200d78:	893e                	mv	s2,a5
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200d7a:	0c600693          	li	a3,198
    80200d7e:	8626                	mv	a2,s1
    80200d80:	85a6                	mv	a1,s1
    80200d82:	8552                	mv	a0,s4
    80200d84:	00000097          	auipc	ra,0x0
    80200d88:	4ee080e7          	jalr	1262(ra) # 80201272 <pageInsert>
    for (u64 i = 0; va + i < PHYSICAL_MEMORY_TOP; i += PAGE_SIZE) {
    80200d8c:	94ce                	add	s1,s1,s3
    80200d8e:	ff24e6e3          	bltu	s1,s2,80200d7a <memoryInit+0x25e>
    pageInsert(kernelPageDirectory, TRAMPOLINE_BASE, (u64)trampoline, 
    80200d92:	0ce00693          	li	a3,206
    80200d96:	00002617          	auipc	a2,0x2
    80200d9a:	26a60613          	addi	a2,a2,618 # 80203000 <_trampoline>
    80200d9e:	040005b7          	lui	a1,0x4000
    80200da2:	15fd                	addi	a1,a1,-1
    80200da4:	05b2                	slli	a1,a1,0xc
    80200da6:	0013c517          	auipc	a0,0x13c
    80200daa:	25a50513          	addi	a0,a0,602 # 8033d000 <_pgdir>
    80200dae:	00000097          	auipc	ra,0x0
    80200db2:	4c4080e7          	jalr	1220(ra) # 80201272 <pageInsert>
#define SBI_REMOTE_SFENCE_VMA 6
#define SBI_REMOTE_SFENCE_VMA_ASID 7
#define SBI_SHUTDOWN 8

inline void putchar(char c) {
    register u64 a0 asm ("a0") = (u64) c;
    80200db6:	02300513          	li	a0,35
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    80200dba:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80200dbc:	00000073          	ecall
    w_satp(MAKE_SATP(kernelPageDirectory));
    80200dc0:	0013ca97          	auipc	s5,0x13c
    80200dc4:	240a8a93          	addi	s5,s5,576 # 8033d000 <_pgdir>
    80200dc8:	00cad793          	srli	a5,s5,0xc
    80200dcc:	577d                	li	a4,-1
    80200dce:	177e                	slli	a4,a4,0x3f
    80200dd0:	8fd9                	or	a5,a5,a4
#define MAKE_SATP(pagetable) (SATP_SV39 | (((u64)pagetable) >> 12))

// supervisor address translation and protection;
// holds the address of the page table.
static inline void w_satp(u64 x) {
	asm volatile("csrw satp, %0" : : "r" (x));
    80200dd2:	18079073          	csrw	satp,a5

// flush the TLB.
static inline void sfence_vma() {
	// the zero, zero means flush all TLB entries.
	// asm volatile("sfence.vma zero, zero");
	asm volatile("sfence.vma");
    80200dd6:	12000073          	sfence.vma
    register u64 a0 asm ("a0") = (u64) c;
    80200dda:	02300513          	li	a0,35
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80200dde:	00000073          	ecall
    initFreePages();
    virtualMemory();
    startPage();
    printf("Memory init finish!\n");
    80200de2:	00003517          	auipc	a0,0x3
    80200de6:	30650513          	addi	a0,a0,774 # 802040e8 <digits+0x88>
    80200dea:	fffff097          	auipc	ra,0xfffff
    80200dee:	626080e7          	jalr	1574(ra) # 80200410 <printf>
    printf("Test memory start...\n");
    80200df2:	00003517          	auipc	a0,0x3
    80200df6:	30e50513          	addi	a0,a0,782 # 80204100 <digits+0xa0>
    80200dfa:	fffff097          	auipc	ra,0xfffff
    80200dfe:	616080e7          	jalr	1558(ra) # 80200410 <printf>
    pageAlloc(&p);
    80200e02:	fb840513          	addi	a0,s0,-72
    80200e06:	00000097          	auipc	ra,0x0
    80200e0a:	254080e7          	jalr	596(ra) # 8020105a <pageAlloc>
    u32 ref;
} PhysicalPage;

inline u32 page2PPN(PhysicalPage *page) {
    extern PhysicalPage pages[];
    return page - pages;
    80200e0e:	00025a17          	auipc	s4,0x25
    80200e12:	5f2a0a13          	addi	s4,s4,1522 # 80226400 <pages>
    80200e16:	fb843583          	ld	a1,-72(s0)
    80200e1a:	414585b3          	sub	a1,a1,s4
    80200e1e:	858d                	srai	a1,a1,0x3
    80200e20:	00003997          	auipc	s3,0x3
    80200e24:	5c89b983          	ld	s3,1480(s3) # 802043e8 <rodataEnd+0x6>
    80200e28:	033585b3          	mul	a1,a1,s3
    return pages + ppn;
}


inline u64 page2pa(PhysicalPage *page) {
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80200e2c:	00c5959b          	slliw	a1,a1,0xc
    80200e30:	1582                	slli	a1,a1,0x20
    80200e32:	9181                	srli	a1,a1,0x20
    80200e34:	4485                	li	s1,1
    80200e36:	01f49913          	slli	s2,s1,0x1f
    printf("alloced page1:  %lx\n", page2pa(p));
    80200e3a:	95ca                	add	a1,a1,s2
    80200e3c:	00003517          	auipc	a0,0x3
    80200e40:	2dc50513          	addi	a0,a0,732 # 80204118 <digits+0xb8>
    80200e44:	fffff097          	auipc	ra,0xfffff
    80200e48:	5cc080e7          	jalr	1484(ra) # 80200410 <printf>
    return page - pages;
    80200e4c:	fb843603          	ld	a2,-72(s0)
    80200e50:	41460633          	sub	a2,a2,s4
    80200e54:	860d                	srai	a2,a2,0x3
    80200e56:	03360633          	mul	a2,a2,s3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80200e5a:	00c6161b          	slliw	a2,a2,0xc
    80200e5e:	1602                	slli	a2,a2,0x20
    80200e60:	9201                	srli	a2,a2,0x20
    pageInsert(kernelPageDirectory, 1ll << 35, page2pa(p), PTE_READ | PTE_WRITE);
    80200e62:	4699                	li	a3,6
    80200e64:	964a                	add	a2,a2,s2
    80200e66:	02349593          	slli	a1,s1,0x23
    80200e6a:	8556                	mv	a0,s5
    80200e6c:	00000097          	auipc	ra,0x0
    80200e70:	406080e7          	jalr	1030(ra) # 80201272 <pageInsert>
    return page - pages;
    80200e74:	fb843783          	ld	a5,-72(s0)
    80200e78:	414787b3          	sub	a5,a5,s4
    80200e7c:	878d                	srai	a5,a5,0x3
    80200e7e:	033787b3          	mul	a5,a5,s3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80200e82:	00c7979b          	slliw	a5,a5,0xc
    80200e86:	1782                	slli	a5,a5,0x20
    80200e88:	9381                	srli	a5,a5,0x20
    *((u32*)page2pa(p)) = 147893;
    80200e8a:	97ca                	add	a5,a5,s2
    80200e8c:	00024737          	lui	a4,0x24
    80200e90:	1b570713          	addi	a4,a4,437 # 241b5 <_start-0x801dbe4b>
    80200e94:	c398                	sw	a4,0(a5)
    printf("value1 of %lx:  %d\n", 1ll << 35, *((u32*)(1ll<<35)));
    80200e96:	148e                	slli	s1,s1,0x23
    80200e98:	4090                	lw	a2,0(s1)
    80200e9a:	85a6                	mv	a1,s1
    80200e9c:	00003517          	auipc	a0,0x3
    80200ea0:	29450513          	addi	a0,a0,660 # 80204130 <digits+0xd0>
    80200ea4:	fffff097          	auipc	ra,0xfffff
    80200ea8:	56c080e7          	jalr	1388(ra) # 80200410 <printf>
    pageAlloc(&p);
    80200eac:	fb840513          	addi	a0,s0,-72
    80200eb0:	00000097          	auipc	ra,0x0
    80200eb4:	1aa080e7          	jalr	426(ra) # 8020105a <pageAlloc>
    return page - pages;
    80200eb8:	fb843583          	ld	a1,-72(s0)
    80200ebc:	414585b3          	sub	a1,a1,s4
    80200ec0:	858d                	srai	a1,a1,0x3
    80200ec2:	033585b3          	mul	a1,a1,s3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80200ec6:	00c5959b          	slliw	a1,a1,0xc
    80200eca:	1582                	slli	a1,a1,0x20
    80200ecc:	9181                	srli	a1,a1,0x20
    printf("alloced page2:  %lx\n", page2pa(p));
    80200ece:	95ca                	add	a1,a1,s2
    80200ed0:	00003517          	auipc	a0,0x3
    80200ed4:	27850513          	addi	a0,a0,632 # 80204148 <digits+0xe8>
    80200ed8:	fffff097          	auipc	ra,0xfffff
    80200edc:	538080e7          	jalr	1336(ra) # 80200410 <printf>
    return page - pages;
    80200ee0:	fb843603          	ld	a2,-72(s0)
    80200ee4:	41460633          	sub	a2,a2,s4
    80200ee8:	860d                	srai	a2,a2,0x3
    80200eea:	03360633          	mul	a2,a2,s3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80200eee:	00c6161b          	slliw	a2,a2,0xc
    80200ef2:	1602                	slli	a2,a2,0x20
    80200ef4:	9201                	srli	a2,a2,0x20
    pageInsert(kernelPageDirectory, 1ll << 35, page2pa(p), PTE_READ | PTE_WRITE);
    80200ef6:	4699                	li	a3,6
    80200ef8:	964a                	add	a2,a2,s2
    80200efa:	85a6                	mv	a1,s1
    80200efc:	8556                	mv	a0,s5
    80200efe:	00000097          	auipc	ra,0x0
    80200f02:	374080e7          	jalr	884(ra) # 80201272 <pageInsert>
    return page - pages;
    80200f06:	fb843783          	ld	a5,-72(s0)
    80200f0a:	414787b3          	sub	a5,a5,s4
    80200f0e:	878d                	srai	a5,a5,0x3
    80200f10:	033787b3          	mul	a5,a5,s3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80200f14:	00c7979b          	slliw	a5,a5,0xc
    80200f18:	1782                	slli	a5,a5,0x20
    80200f1a:	9381                	srli	a5,a5,0x20
    *((u32*)page2pa(p)) = 65536;
    80200f1c:	993e                	add	s2,s2,a5
    80200f1e:	67c1                	lui	a5,0x10
    80200f20:	00f92023          	sw	a5,0(s2)
    printf("value1 of %lx:  %d\n", 1ll << 35, *((u32*)(1ll<<35)));
    80200f24:	4090                	lw	a2,0(s1)
    80200f26:	85a6                	mv	a1,s1
    80200f28:	00003517          	auipc	a0,0x3
    80200f2c:	20850513          	addi	a0,a0,520 # 80204130 <digits+0xd0>
    80200f30:	fffff097          	auipc	ra,0xfffff
    80200f34:	4e0080e7          	jalr	1248(ra) # 80200410 <printf>
    testMemory();
    printf("Test memory finish!\n");
    80200f38:	00003517          	auipc	a0,0x3
    80200f3c:	22850513          	addi	a0,a0,552 # 80204160 <digits+0x100>
    80200f40:	fffff097          	auipc	ra,0xfffff
    80200f44:	4d0080e7          	jalr	1232(ra) # 80200410 <printf>
}
    80200f48:	60a6                	ld	ra,72(sp)
    80200f4a:	6406                	ld	s0,64(sp)
    80200f4c:	74e2                	ld	s1,56(sp)
    80200f4e:	7942                	ld	s2,48(sp)
    80200f50:	79a2                	ld	s3,40(sp)
    80200f52:	7a02                	ld	s4,32(sp)
    80200f54:	6ae2                	ld	s5,24(sp)
    80200f56:	6161                	addi	sp,sp,80
    80200f58:	8082                	ret
    LIST_INIT(&freePages);
    80200f5a:	000e5797          	auipc	a5,0xe5
    80200f5e:	4a07b323          	sd	zero,1190(a5) # 802e6400 <freePages>
    for (; i < n; i++) {
    80200f62:	b905                	j	80200b92 <memoryInit+0x76>

0000000080200f64 <bcopy>:

void bcopy(void *src, void *dst, u32 len) {
    80200f64:	1141                	addi	sp,sp,-16
    80200f66:	e422                	sd	s0,8(sp)
    80200f68:	0800                	addi	s0,sp,16
    void *finish = src + len;
    80200f6a:	02061693          	slli	a3,a2,0x20
    80200f6e:	9281                	srli	a3,a3,0x20
    80200f70:	96aa                	add	a3,a3,a0

    if (len <= 7) {
    80200f72:	479d                	li	a5,7
    80200f74:	06c7f063          	bgeu	a5,a2,80200fd4 <bcopy+0x70>
            src++;
            dst++;
        }
        return;
    }
    while (((u64)src) & 7) {
    80200f78:	00757793          	andi	a5,a0,7
    80200f7c:	cb91                	beqz	a5,80200f90 <bcopy+0x2c>
        *(u8*)dst = *(u8*)src;
    80200f7e:	00054783          	lbu	a5,0(a0)
    80200f82:	00f58023          	sb	a5,0(a1) # 4000000 <_start-0x7c200000>
        src++;
    80200f86:	0505                	addi	a0,a0,1
        dst++;
    80200f88:	0585                	addi	a1,a1,1
    while (((u64)src) & 7) {
    80200f8a:	00757793          	andi	a5,a0,7
    80200f8e:	fbe5                	bnez	a5,80200f7e <bcopy+0x1a>
    }
    while (src + 7 < finish) {
    80200f90:	00750793          	addi	a5,a0,7
    80200f94:	04d7fb63          	bgeu	a5,a3,80200fea <bcopy+0x86>
    80200f98:	ff868813          	addi	a6,a3,-8
    80200f9c:	40a80833          	sub	a6,a6,a0
    80200fa0:	ff887813          	andi	a6,a6,-8
    80200fa4:	0821                	addi	a6,a6,8
    80200fa6:	010507b3          	add	a5,a0,a6
    80200faa:	872e                	mv	a4,a1
        *(u64*)dst = *(u64*)src;
    80200fac:	6110                	ld	a2,0(a0)
    80200fae:	e310                	sd	a2,0(a4)
        src += 8;
    80200fb0:	0521                	addi	a0,a0,8
        dst += 8;
    80200fb2:	0721                	addi	a4,a4,8
    while (src + 7 < finish) {
    80200fb4:	fef51ce3          	bne	a0,a5,80200fac <bcopy+0x48>
        dst += 8;
    80200fb8:	95c2                	add	a1,a1,a6
    }
    while (src < finish){
    80200fba:	00d7fa63          	bgeu	a5,a3,80200fce <bcopy+0x6a>
        *(u8*)dst = *(u8*)src;
    80200fbe:	0007c703          	lbu	a4,0(a5)
    80200fc2:	00e58023          	sb	a4,0(a1)
        src++;
    80200fc6:	0785                	addi	a5,a5,1
        dst++;
    80200fc8:	0585                	addi	a1,a1,1
    while (src < finish){
    80200fca:	fef69ae3          	bne	a3,a5,80200fbe <bcopy+0x5a>
    }
}
    80200fce:	6422                	ld	s0,8(sp)
    80200fd0:	0141                	addi	sp,sp,16
    80200fd2:	8082                	ret
        while (src < finish) {
    80200fd4:	fed57de3          	bgeu	a0,a3,80200fce <bcopy+0x6a>
            *(u8*)dst = *(u8*)src;
    80200fd8:	00054783          	lbu	a5,0(a0)
    80200fdc:	00f58023          	sb	a5,0(a1)
            src++;
    80200fe0:	0505                	addi	a0,a0,1
            dst++;
    80200fe2:	0585                	addi	a1,a1,1
        while (src < finish) {
    80200fe4:	fea69ae3          	bne	a3,a0,80200fd8 <bcopy+0x74>
    80200fe8:	b7dd                	j	80200fce <bcopy+0x6a>
    while (src + 7 < finish) {
    80200fea:	87aa                	mv	a5,a0
    80200fec:	b7f9                	j	80200fba <bcopy+0x56>

0000000080200fee <bzero>:

void bzero(void *start, u32 len) {
    80200fee:	1141                	addi	sp,sp,-16
    80200ff0:	e422                	sd	s0,8(sp)
    80200ff2:	0800                	addi	s0,sp,16
    void *finish = start + len;
    80200ff4:	02059713          	slli	a4,a1,0x20
    80200ff8:	9301                	srli	a4,a4,0x20
    80200ffa:	972a                	add	a4,a4,a0

    if (len <= 7) {
    80200ffc:	479d                	li	a5,7
    80200ffe:	04b7f463          	bgeu	a5,a1,80201046 <bzero+0x58>
        while (start < finish) {
            *(u8*)start++ = 0;
        }
        return;
    }
    while (((u64) start) & 7) {
    80201002:	00757793          	andi	a5,a0,7
    80201006:	c799                	beqz	a5,80201014 <bzero+0x26>
        *(u8*)start++ = 0;
    80201008:	0505                	addi	a0,a0,1
    8020100a:	fe050fa3          	sb	zero,-1(a0)
    while (((u64) start) & 7) {
    8020100e:	00757793          	andi	a5,a0,7
    80201012:	fbfd                	bnez	a5,80201008 <bzero+0x1a>
    }
    while (start + 7 < finish) {
    80201014:	00750793          	addi	a5,a0,7
    80201018:	02e7ff63          	bgeu	a5,a4,80201056 <bzero+0x68>
    8020101c:	ff870793          	addi	a5,a4,-8
    80201020:	8f89                	sub	a5,a5,a0
    80201022:	9be1                	andi	a5,a5,-8
    80201024:	07a1                	addi	a5,a5,8
    80201026:	97aa                	add	a5,a5,a0
        *(u64*)start = 0;
    80201028:	00053023          	sd	zero,0(a0)
        start += 8;
    8020102c:	0521                	addi	a0,a0,8
    while (start + 7 < finish) {
    8020102e:	fef51de3          	bne	a0,a5,80201028 <bzero+0x3a>
    }
    while (start < finish) {
    80201032:	00e7f763          	bgeu	a5,a4,80201040 <bzero+0x52>
        *(u8*)start++ = 0;
    80201036:	0785                	addi	a5,a5,1
    80201038:	fe078fa3          	sb	zero,-1(a5)
    while (start < finish) {
    8020103c:	fef71de3          	bne	a4,a5,80201036 <bzero+0x48>
    }
    80201040:	6422                	ld	s0,8(sp)
    80201042:	0141                	addi	sp,sp,16
    80201044:	8082                	ret
        while (start < finish) {
    80201046:	fee57de3          	bgeu	a0,a4,80201040 <bzero+0x52>
            *(u8*)start++ = 0;
    8020104a:	0505                	addi	a0,a0,1
    8020104c:	fe050fa3          	sb	zero,-1(a0)
        while (start < finish) {
    80201050:	fea71de3          	bne	a4,a0,8020104a <bzero+0x5c>
    80201054:	b7f5                	j	80201040 <bzero+0x52>
    while (start + 7 < finish) {
    80201056:	87aa                	mv	a5,a0
    80201058:	bfe9                	j	80201032 <bzero+0x44>

000000008020105a <pageAlloc>:
#include <Driver.h>
#include <Error.h>
#include <Riscv.h>

extern PageList freePages;
int pageAlloc(PhysicalPage **pp) {
    8020105a:	1101                	addi	sp,sp,-32
    8020105c:	ec06                	sd	ra,24(sp)
    8020105e:	e822                	sd	s0,16(sp)
    80201060:	e426                	sd	s1,8(sp)
    80201062:	1000                	addi	s0,sp,32
    80201064:	84aa                	mv	s1,a0
    PhysicalPage *page;
    if ((page = LIST_FIRST(&freePages)) != NULL) {
    80201066:	000e5797          	auipc	a5,0xe5
    8020106a:	39a7b783          	ld	a5,922(a5) # 802e6400 <freePages>
    8020106e:	c7b9                	beqz	a5,802010bc <pageAlloc+0x62>
        *pp = page;
    80201070:	e11c                	sd	a5,0(a0)
        LIST_REMOVE(page, link);
    80201072:	6398                	ld	a4,0(a5)
    80201074:	c319                	beqz	a4,8020107a <pageAlloc+0x20>
    80201076:	6794                	ld	a3,8(a5)
    80201078:	e714                	sd	a3,8(a4)
    8020107a:	6798                	ld	a4,8(a5)
    8020107c:	6394                	ld	a3,0(a5)
    8020107e:	e314                	sd	a3,0(a4)
    return page - pages;
    80201080:	00025717          	auipc	a4,0x25
    80201084:	38070713          	addi	a4,a4,896 # 80226400 <pages>
    80201088:	8f99                	sub	a5,a5,a4
    8020108a:	878d                	srai	a5,a5,0x3
    8020108c:	00003717          	auipc	a4,0x3
    80201090:	35c73703          	ld	a4,860(a4) # 802043e8 <rodataEnd+0x6>
    80201094:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201098:	00c7979b          	slliw	a5,a5,0xc
    8020109c:	1782                	slli	a5,a5,0x20
    8020109e:	9381                	srli	a5,a5,0x20
        bzero((void*)page2pa(page), PAGE_SIZE);
    802010a0:	6585                	lui	a1,0x1
    802010a2:	4505                	li	a0,1
    802010a4:	057e                	slli	a0,a0,0x1f
    802010a6:	953e                	add	a0,a0,a5
    802010a8:	00000097          	auipc	ra,0x0
    802010ac:	f46080e7          	jalr	-186(ra) # 80200fee <bzero>
        return 0;
    802010b0:	4501                	li	a0,0
    }
    printf("there's no physical page left!\n");
    *pp = NULL;
    return -NO_FREE_MEMORY;
}
    802010b2:	60e2                	ld	ra,24(sp)
    802010b4:	6442                	ld	s0,16(sp)
    802010b6:	64a2                	ld	s1,8(sp)
    802010b8:	6105                	addi	sp,sp,32
    802010ba:	8082                	ret
    printf("there's no physical page left!\n");
    802010bc:	00003517          	auipc	a0,0x3
    802010c0:	0bc50513          	addi	a0,a0,188 # 80204178 <digits+0x118>
    802010c4:	fffff097          	auipc	ra,0xfffff
    802010c8:	34c080e7          	jalr	844(ra) # 80200410 <printf>
    *pp = NULL;
    802010cc:	0004b023          	sd	zero,0(s1)
    return -NO_FREE_MEMORY;
    802010d0:	5571                	li	a0,-4
    802010d2:	b7c5                	j	802010b2 <pageAlloc+0x58>

00000000802010d4 <pageWalk>:

static int pageWalk(u64 *pgdir, u64 va, bool create, u64 **pte) {
    802010d4:	7159                	addi	sp,sp,-112
    802010d6:	f486                	sd	ra,104(sp)
    802010d8:	f0a2                	sd	s0,96(sp)
    802010da:	eca6                	sd	s1,88(sp)
    802010dc:	e8ca                	sd	s2,80(sp)
    802010de:	e4ce                	sd	s3,72(sp)
    802010e0:	e0d2                	sd	s4,64(sp)
    802010e2:	fc56                	sd	s5,56(sp)
    802010e4:	f85a                	sd	s6,48(sp)
    802010e6:	f45e                	sd	s7,40(sp)
    802010e8:	f062                	sd	s8,32(sp)
    802010ea:	ec66                	sd	s9,24(sp)
    802010ec:	e86a                	sd	s10,16(sp)
    802010ee:	1880                	addi	s0,sp,112
    802010f0:	892e                	mv	s2,a1
    802010f2:	8b32                	mv	s6,a2
    802010f4:	8ab6                	mv	s5,a3
    802010f6:	49f9                	li	s3,30
    return page - pages;
    802010f8:	00025d17          	auipc	s10,0x25
    802010fc:	308d0d13          	addi	s10,s10,776 # 80226400 <pages>
    80201100:	00003c97          	auipc	s9,0x3
    80201104:	2e8c8c93          	addi	s9,s9,744 # 802043e8 <rodataEnd+0x6>
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201108:	4b85                	li	s7,1
    8020110a:	0bfe                	slli	s7,s7,0x1f
                return ret;
            }
            (*addr) = page2pte(pp) | PTE_VALID;
            pp->ref++;
        }
        addr = (u64*)PTE2PA(*addr);
    8020110c:	fff00a37          	lui	s4,0xfff00
    80201110:	008a5a13          	srli	s4,s4,0x8
    for (level = 2; level > 0; level--) {
    80201114:	4c31                	li	s8,12
    80201116:	a821                	j	8020112e <pageWalk+0x5a>
                *pte = NULL;
    80201118:	000ab023          	sd	zero,0(s5)
                return 0;
    8020111c:	4501                	li	a0,0
    8020111e:	a895                	j	80201192 <pageWalk+0xbe>
        addr = (u64*)PTE2PA(*addr);
    80201120:	6088                	ld	a0,0(s1)
    80201122:	050a                	slli	a0,a0,0x2
    80201124:	01457533          	and	a0,a0,s4
    for (level = 2; level > 0; level--) {
    80201128:	39dd                	addiw	s3,s3,-9
    8020112a:	05898b63          	beq	s3,s8,80201180 <pageWalk+0xac>
        addr += GET_PAGE_TABLE_INDEX(va, level);
    8020112e:	013957b3          	srl	a5,s2,s3
    80201132:	1ff7f793          	andi	a5,a5,511
    80201136:	078e                	slli	a5,a5,0x3
    80201138:	00f504b3          	add	s1,a0,a5
        if (!(*addr) & PTE_VALID) {
    8020113c:	609c                	ld	a5,0(s1)
    8020113e:	f3ed                	bnez	a5,80201120 <pageWalk+0x4c>
            if (!create) {
    80201140:	fc0b0ce3          	beqz	s6,80201118 <pageWalk+0x44>
            int ret = pageAlloc(&pp);
    80201144:	f9840513          	addi	a0,s0,-104
    80201148:	00000097          	auipc	ra,0x0
    8020114c:	f12080e7          	jalr	-238(ra) # 8020105a <pageAlloc>
            if (ret < 0) {
    80201150:	04054163          	bltz	a0,80201192 <pageWalk+0xbe>
            (*addr) = page2pte(pp) | PTE_VALID;
    80201154:	f9843703          	ld	a4,-104(s0)
    return page - pages;
    80201158:	41a707b3          	sub	a5,a4,s10
    8020115c:	878d                	srai	a5,a5,0x3
    8020115e:	000cb683          	ld	a3,0(s9)
    80201162:	02d787b3          	mul	a5,a5,a3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201166:	00c7979b          	slliw	a5,a5,0xc
    8020116a:	1782                	slli	a5,a5,0x20
    8020116c:	9381                	srli	a5,a5,0x20
    8020116e:	97de                	add	a5,a5,s7
#define PTE2PERM(pte) (((u64)(pte)) & ~((1ull << 54) - (1ull << 10)))
#define PTE2PA(pte) (((((u64)(pte)) & ((1ull << 54) - (1ull << 10))) >> PERM_WIDTH) << PAGE_SHIFT)
#define PA2PTE(pa) ((((u64)(pa)) >> PAGE_SHIFT) << PERM_WIDTH)

inline u64 page2pte(PhysicalPage *page) {
    return (page2pa(page) >> PAGE_SHIFT) << PERM_WIDTH;
    80201170:	8389                	srli	a5,a5,0x2
    80201172:	0017e793          	ori	a5,a5,1
    80201176:	e09c                	sd	a5,0(s1)
            pp->ref++;
    80201178:	4b1c                	lw	a5,16(a4)
    8020117a:	2785                	addiw	a5,a5,1
    8020117c:	cb1c                	sw	a5,16(a4)
    8020117e:	b74d                	j	80201120 <pageWalk+0x4c>
    }
    *pte = addr + GET_PAGE_TABLE_INDEX(va, 0);
    80201180:	00c95913          	srli	s2,s2,0xc
    80201184:	1ff97913          	andi	s2,s2,511
    80201188:	090e                	slli	s2,s2,0x3
    8020118a:	954a                	add	a0,a0,s2
    8020118c:	00aab023          	sd	a0,0(s5)
    return 0;
    80201190:	4501                	li	a0,0
}
    80201192:	70a6                	ld	ra,104(sp)
    80201194:	7406                	ld	s0,96(sp)
    80201196:	64e6                	ld	s1,88(sp)
    80201198:	6946                	ld	s2,80(sp)
    8020119a:	69a6                	ld	s3,72(sp)
    8020119c:	6a06                	ld	s4,64(sp)
    8020119e:	7ae2                	ld	s5,56(sp)
    802011a0:	7b42                	ld	s6,48(sp)
    802011a2:	7ba2                	ld	s7,40(sp)
    802011a4:	7c02                	ld	s8,32(sp)
    802011a6:	6ce2                	ld	s9,24(sp)
    802011a8:	6d42                	ld	s10,16(sp)
    802011aa:	6165                	addi	sp,sp,112
    802011ac:	8082                	ret

00000000802011ae <pageLookup>:

u64 pageLookup(u64 *pgdir, u64 va, u64 **pte) {
    802011ae:	7179                	addi	sp,sp,-48
    802011b0:	f406                	sd	ra,40(sp)
    802011b2:	f022                	sd	s0,32(sp)
    802011b4:	ec26                	sd	s1,24(sp)
    802011b6:	1800                	addi	s0,sp,48
    802011b8:	84b2                	mv	s1,a2
    u64 *entry;
    pageWalk(pgdir, va, false, &entry);
    802011ba:	fd840693          	addi	a3,s0,-40
    802011be:	4601                	li	a2,0
    802011c0:	00000097          	auipc	ra,0x0
    802011c4:	f14080e7          	jalr	-236(ra) # 802010d4 <pageWalk>

    if (entry == NULL || !(*entry & PTE_VALID)) {
    802011c8:	fd843783          	ld	a5,-40(s0)
    802011cc:	c38d                	beqz	a5,802011ee <pageLookup+0x40>
    802011ce:	6388                	ld	a0,0(a5)
    802011d0:	8905                	andi	a0,a0,1
    802011d2:	c909                	beqz	a0,802011e4 <pageLookup+0x36>
        return 0;
    }
    if (pte) {
    802011d4:	c091                	beqz	s1,802011d8 <pageLookup+0x2a>
        *pte = entry;
    802011d6:	e09c                	sd	a5,0(s1)
    }
    return PTE2PA(*entry);
    802011d8:	6388                	ld	a0,0(a5)
    802011da:	050a                	slli	a0,a0,0x2
    802011dc:	fff007b7          	lui	a5,0xfff00
    802011e0:	83a1                	srli	a5,a5,0x8
    802011e2:	8d7d                	and	a0,a0,a5
}
    802011e4:	70a2                	ld	ra,40(sp)
    802011e6:	7402                	ld	s0,32(sp)
    802011e8:	64e2                	ld	s1,24(sp)
    802011ea:	6145                	addi	sp,sp,48
    802011ec:	8082                	ret
        return 0;
    802011ee:	4501                	li	a0,0
    802011f0:	bfd5                	j	802011e4 <pageLookup+0x36>

00000000802011f2 <pageFree>:

void pageFree(PhysicalPage *page) {
    802011f2:	1141                	addi	sp,sp,-16
    802011f4:	e422                	sd	s0,8(sp)
    802011f6:	0800                	addi	s0,sp,16
    if (page->ref > 0) {
    802011f8:	491c                	lw	a5,16(a0)
    802011fa:	ef91                	bnez	a5,80201216 <pageFree+0x24>
        return;
    }
    if (page->ref == 0) {
        LIST_INSERT_HEAD(&freePages, page, link);
    802011fc:	000e5797          	auipc	a5,0xe5
    80201200:	2047b783          	ld	a5,516(a5) # 802e6400 <freePages>
    80201204:	e11c                	sd	a5,0(a0)
    80201206:	c391                	beqz	a5,8020120a <pageFree+0x18>
    80201208:	e788                	sd	a0,8(a5)
    8020120a:	000e5797          	auipc	a5,0xe5
    8020120e:	1f678793          	addi	a5,a5,502 # 802e6400 <freePages>
    80201212:	e388                	sd	a0,0(a5)
    80201214:	e51c                	sd	a5,8(a0)
    }
}
    80201216:	6422                	ld	s0,8(sp)
    80201218:	0141                	addi	sp,sp,16
    8020121a:	8082                	ret

000000008020121c <pageRemove>:

void pageRemove(u64 *pgdir, u64 va) {
    8020121c:	1101                	addi	sp,sp,-32
    8020121e:	ec06                	sd	ra,24(sp)
    80201220:	e822                	sd	s0,16(sp)
    80201222:	1000                	addi	s0,sp,32
    u64 *pte;
    u64 pa = pageLookup(pgdir, va, &pte);
    80201224:	fe840613          	addi	a2,s0,-24
    80201228:	00000097          	auipc	ra,0x0
    8020122c:	f86080e7          	jalr	-122(ra) # 802011ae <pageLookup>

    // tlb flush
    if (pa < PHYSICAL_ADDRESS_BASE || pa >= PHYSICAL_MEMORY_TOP) {
    80201230:	800007b7          	lui	a5,0x80000
    80201234:	953e                	add	a0,a0,a5
    80201236:	080007b7          	lui	a5,0x8000
    8020123a:	00f56663          	bltu	a0,a5,80201246 <pageRemove+0x2a>
    }
    PhysicalPage *page = pa2page(pa);
    page->ref--;
    pageFree(page);
    *pte = 0;
}
    8020123e:	60e2                	ld	ra,24(sp)
    80201240:	6442                	ld	s0,16(sp)
    80201242:	6105                	addi	sp,sp,32
    80201244:	8082                	ret
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80201246:	8131                	srli	a0,a0,0xc
    return pages + ppn;
    80201248:	00151793          	slli	a5,a0,0x1
    8020124c:	953e                	add	a0,a0,a5
    8020124e:	050e                	slli	a0,a0,0x3
    80201250:	00025797          	auipc	a5,0x25
    80201254:	1b078793          	addi	a5,a5,432 # 80226400 <pages>
    80201258:	953e                	add	a0,a0,a5
    page->ref--;
    8020125a:	491c                	lw	a5,16(a0)
    8020125c:	37fd                	addiw	a5,a5,-1
    8020125e:	c91c                	sw	a5,16(a0)
    pageFree(page);
    80201260:	00000097          	auipc	ra,0x0
    80201264:	f92080e7          	jalr	-110(ra) # 802011f2 <pageFree>
    *pte = 0;
    80201268:	fe843783          	ld	a5,-24(s0)
    8020126c:	0007b023          	sd	zero,0(a5)
    80201270:	b7f9                	j	8020123e <pageRemove+0x22>

0000000080201272 <pageInsert>:

int pageInsert(u64 *pgdir, u64 va, u64 pa, u64 perm) {
    80201272:	715d                	addi	sp,sp,-80
    80201274:	e486                	sd	ra,72(sp)
    80201276:	e0a2                	sd	s0,64(sp)
    80201278:	fc26                	sd	s1,56(sp)
    8020127a:	f84a                	sd	s2,48(sp)
    8020127c:	f44e                	sd	s3,40(sp)
    8020127e:	f052                	sd	s4,32(sp)
    80201280:	ec56                	sd	s5,24(sp)
    80201282:	0880                	addi	s0,sp,80
    80201284:	8aaa                	mv	s5,a0
    80201286:	84b2                	mv	s1,a2
    80201288:	89b6                	mv	s3,a3
    u64 *pte;
    va = DOWN_ALIGN(va, PAGE_SIZE);
    8020128a:	77fd                	lui	a5,0xfffff
    8020128c:	00f5fa33          	and	s4,a1,a5
    pa = DOWN_ALIGN(pa, PAGE_SIZE);
    perm |= PTE_ACCESSED | PTE_DIRTY;
    int ret = pageWalk(pgdir, va, true, &pte);
    80201290:	fb840693          	addi	a3,s0,-72
    80201294:	4605                	li	a2,1
    80201296:	85d2                	mv	a1,s4
    80201298:	00000097          	auipc	ra,0x0
    8020129c:	e3c080e7          	jalr	-452(ra) # 802010d4 <pageWalk>
    if (ret < 0) {
    802012a0:	04054b63          	bltz	a0,802012f6 <pageInsert+0x84>
        return ret;
    }
    if (pte != NULL && (*pte & PTE_VALID)) {
    802012a4:	fb843903          	ld	s2,-72(s0)
    802012a8:	00090663          	beqz	s2,802012b4 <pageInsert+0x42>
    802012ac:	00093783          	ld	a5,0(s2)
    802012b0:	8b85                	andi	a5,a5,1
    802012b2:	ebb9                	bnez	a5,80201308 <pageInsert+0x96>
    pa = DOWN_ALIGN(pa, PAGE_SIZE);
    802012b4:	77fd                	lui	a5,0xfffff
    802012b6:	00f4f633          	and	a2,s1,a5
        pageRemove(pgdir, va);
    }
    if (pa >= PHYSICAL_ADDRESS_BASE && pa < PHYSICAL_MEMORY_TOP) {
    802012ba:	800007b7          	lui	a5,0x80000
    802012be:	97b2                	add	a5,a5,a2
    802012c0:	08000737          	lui	a4,0x8000
    802012c4:	00e7ff63          	bgeu	a5,a4,802012e2 <pageInsert+0x70>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    802012c8:	00c7d713          	srli	a4,a5,0xc
    return pages + ppn;
    802012cc:	83ad                	srli	a5,a5,0xb
    802012ce:	97ba                	add	a5,a5,a4
    802012d0:	078e                	slli	a5,a5,0x3
    802012d2:	00025717          	auipc	a4,0x25
    802012d6:	12e70713          	addi	a4,a4,302 # 80226400 <pages>
    802012da:	97ba                	add	a5,a5,a4
        pa2page(pa)->ref++;
    802012dc:	4b98                	lw	a4,16(a5)
    802012de:	2705                	addiw	a4,a4,1
    802012e0:	cb98                	sw	a4,16(a5)
    }
    *pte = PA2PTE(pa) | perm | PTE_VALID;
    802012e2:	8209                	srli	a2,a2,0x2
    802012e4:	01366633          	or	a2,a2,s3
    802012e8:	0c166613          	ori	a2,a2,193
    802012ec:	00c93023          	sd	a2,0(s2)
    802012f0:	12000073          	sfence.vma
    sfence_vma();
    return 0;
    802012f4:	4501                	li	a0,0
}
    802012f6:	60a6                	ld	ra,72(sp)
    802012f8:	6406                	ld	s0,64(sp)
    802012fa:	74e2                	ld	s1,56(sp)
    802012fc:	7942                	ld	s2,48(sp)
    802012fe:	79a2                	ld	s3,40(sp)
    80201300:	7a02                	ld	s4,32(sp)
    80201302:	6ae2                	ld	s5,24(sp)
    80201304:	6161                	addi	sp,sp,80
    80201306:	8082                	ret
        pageRemove(pgdir, va);
    80201308:	85d2                	mv	a1,s4
    8020130a:	8556                	mv	a0,s5
    8020130c:	00000097          	auipc	ra,0x0
    80201310:	f10080e7          	jalr	-240(ra) # 8020121c <pageRemove>
    80201314:	b745                	j	802012b4 <pageInsert+0x42>

0000000080201316 <allocPgdir>:

int allocPgdir(PhysicalPage **page) {
    80201316:	1101                	addi	sp,sp,-32
    80201318:	ec06                	sd	ra,24(sp)
    8020131a:	e822                	sd	s0,16(sp)
    8020131c:	e426                	sd	s1,8(sp)
    8020131e:	1000                	addi	s0,sp,32
    80201320:	84aa                	mv	s1,a0
    int r;
    if ((r = pageAlloc(page)) < 0) {
    80201322:	00000097          	auipc	ra,0x0
    80201326:	d38080e7          	jalr	-712(ra) # 8020105a <pageAlloc>
    8020132a:	00054763          	bltz	a0,80201338 <allocPgdir+0x22>
        return r;
    }
    (*page)->ref++;
    8020132e:	6098                	ld	a4,0(s1)
    80201330:	4b1c                	lw	a5,16(a4)
    80201332:	2785                	addiw	a5,a5,1
    80201334:	cb1c                	sw	a5,16(a4)
    return 0;
    80201336:	4501                	li	a0,0
}
    80201338:	60e2                	ld	ra,24(sp)
    8020133a:	6442                	ld	s0,16(sp)
    8020133c:	64a2                	ld	s1,8(sp)
    8020133e:	6105                	addi	sp,sp,32
    80201340:	8082                	ret

0000000080201342 <pageout>:

void pageout(u64 *pgdir, u64 badAddr) {
    80201342:	7179                	addi	sp,sp,-48
    80201344:	f406                	sd	ra,40(sp)
    80201346:	f022                	sd	s0,32(sp)
    80201348:	ec26                	sd	s1,24(sp)
    8020134a:	e84a                	sd	s2,16(sp)
    8020134c:	1800                	addi	s0,sp,48
    if (badAddr <= PAGE_SIZE) {
    8020134e:	6785                	lui	a5,0x1
    80201350:	06b7f863          	bgeu	a5,a1,802013c0 <pageout+0x7e>
    80201354:	892a                	mv	s2,a0
    80201356:	84ae                	mv	s1,a1
        panic("^^^^^^^^^^TOO LOW^^^^^^^^^^^\n");
    }
    printf("pageout at %lx\n", badAddr);
    80201358:	00003517          	auipc	a0,0x3
    8020135c:	e6850513          	addi	a0,a0,-408 # 802041c0 <digits+0x160>
    80201360:	fffff097          	auipc	ra,0xfffff
    80201364:	0b0080e7          	jalr	176(ra) # 80200410 <printf>
    PhysicalPage *page;
    if (pageAlloc(&page) < 0) {
    80201368:	fd840513          	addi	a0,s0,-40
    8020136c:	00000097          	auipc	ra,0x0
    80201370:	cee080e7          	jalr	-786(ra) # 8020105a <pageAlloc>
    80201374:	06054463          	bltz	a0,802013dc <pageout+0x9a>
    return page - pages;
    80201378:	fd843783          	ld	a5,-40(s0)
    8020137c:	00025717          	auipc	a4,0x25
    80201380:	08470713          	addi	a4,a4,132 # 80226400 <pages>
    80201384:	8f99                	sub	a5,a5,a4
    80201386:	878d                	srai	a5,a5,0x3
    80201388:	00003717          	auipc	a4,0x3
    8020138c:	06073703          	ld	a4,96(a4) # 802043e8 <rodataEnd+0x6>
    80201390:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201394:	00c7979b          	slliw	a5,a5,0xc
    80201398:	1782                	slli	a5,a5,0x20
    8020139a:	9381                	srli	a5,a5,0x20
        panic("");
    }
    if (pageInsert(pgdir, badAddr, page2pa(page), 
    8020139c:	46d9                	li	a3,22
    8020139e:	4605                	li	a2,1
    802013a0:	067e                	slli	a2,a2,0x1f
    802013a2:	963e                	add	a2,a2,a5
    802013a4:	85a6                	mv	a1,s1
    802013a6:	854a                	mv	a0,s2
    802013a8:	00000097          	auipc	ra,0x0
    802013ac:	eca080e7          	jalr	-310(ra) # 80201272 <pageInsert>
    802013b0:	04054463          	bltz	a0,802013f8 <pageout+0xb6>
        PTE_USER | PTE_READ | PTE_WRITE) < 0) {
        panic("");
    }
}
    802013b4:	70a2                	ld	ra,40(sp)
    802013b6:	7402                	ld	s0,32(sp)
    802013b8:	64e2                	ld	s1,24(sp)
    802013ba:	6942                	ld	s2,16(sp)
    802013bc:	6145                	addi	sp,sp,48
    802013be:	8082                	ret
        panic("^^^^^^^^^^TOO LOW^^^^^^^^^^^\n");
    802013c0:	00003617          	auipc	a2,0x3
    802013c4:	dd860613          	addi	a2,a2,-552 # 80204198 <digits+0x138>
    802013c8:	06f00593          	li	a1,111
    802013cc:	00003517          	auipc	a0,0x3
    802013d0:	dec50513          	addi	a0,a0,-532 # 802041b8 <digits+0x158>
    802013d4:	fffff097          	auipc	ra,0xfffff
    802013d8:	06e080e7          	jalr	110(ra) # 80200442 <_panic_>
        panic("");
    802013dc:	00003617          	auipc	a2,0x3
    802013e0:	cac60613          	addi	a2,a2,-852 # 80204088 <digits+0x28>
    802013e4:	07400593          	li	a1,116
    802013e8:	00003517          	auipc	a0,0x3
    802013ec:	dd050513          	addi	a0,a0,-560 # 802041b8 <digits+0x158>
    802013f0:	fffff097          	auipc	ra,0xfffff
    802013f4:	052080e7          	jalr	82(ra) # 80200442 <_panic_>
        panic("");
    802013f8:	00003617          	auipc	a2,0x3
    802013fc:	c9060613          	addi	a2,a2,-880 # 80204088 <digits+0x28>
    80201400:	07800593          	li	a1,120
    80201404:	00003517          	auipc	a0,0x3
    80201408:	db450513          	addi	a0,a0,-588 # 802041b8 <digits+0x158>
    8020140c:	fffff097          	auipc	ra,0xfffff
    80201410:	036080e7          	jalr	54(ra) # 80200442 <_panic_>

0000000080201414 <cowHandler>:

void cowHandler(u64 *pgdir, u64 badAddr) {
    80201414:	7139                	addi	sp,sp,-64
    80201416:	fc06                	sd	ra,56(sp)
    80201418:	f822                	sd	s0,48(sp)
    8020141a:	f426                	sd	s1,40(sp)
    8020141c:	f04a                	sd	s2,32(sp)
    8020141e:	ec4e                	sd	s3,24(sp)
    80201420:	e852                	sd	s4,16(sp)
    80201422:	0080                	addi	s0,sp,64
    80201424:	89aa                	mv	s3,a0
    80201426:	8a2e                	mv	s4,a1
    u64 *pte;
    u64 pa = pageLookup(pgdir, badAddr, &pte);
    80201428:	fc840613          	addi	a2,s0,-56
    8020142c:	00000097          	auipc	ra,0x0
    80201430:	d82080e7          	jalr	-638(ra) # 802011ae <pageLookup>
    if (!(*pte & PTE_COW)) {
    80201434:	fc843783          	ld	a5,-56(s0)
    80201438:	639c                	ld	a5,0(a5)
    8020143a:	1007f793          	andi	a5,a5,256
    8020143e:	cfbd                	beqz	a5,802014bc <cowHandler+0xa8>
    80201440:	892a                	mv	s2,a0
        printf("access denied");
        return;
    }
    PhysicalPage *page;
    int r = pageAlloc(&page);
    80201442:	fc040513          	addi	a0,s0,-64
    80201446:	00000097          	auipc	ra,0x0
    8020144a:	c14080e7          	jalr	-1004(ra) # 8020105a <pageAlloc>
    if (r < 0) {
    8020144e:	08054063          	bltz	a0,802014ce <cowHandler+0xba>
    return page - pages;
    80201452:	fc043483          	ld	s1,-64(s0)
    80201456:	00025797          	auipc	a5,0x25
    8020145a:	faa78793          	addi	a5,a5,-86 # 80226400 <pages>
    8020145e:	8c9d                	sub	s1,s1,a5
    80201460:	848d                	srai	s1,s1,0x3
    80201462:	00003797          	auipc	a5,0x3
    80201466:	f867b783          	ld	a5,-122(a5) # 802043e8 <rodataEnd+0x6>
    8020146a:	02f484b3          	mul	s1,s1,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020146e:	00c4949b          	slliw	s1,s1,0xc
    80201472:	1482                	slli	s1,s1,0x20
    80201474:	9081                	srli	s1,s1,0x20
    80201476:	4785                	li	a5,1
    80201478:	07fe                	slli	a5,a5,0x1f
    8020147a:	94be                	add	s1,s1,a5
        panic("");
        return;
    }
    pageInsert(pgdir, badAddr, page2pa(page), (PTE2PERM(*pte) | PTE_WRITE) & ~PTE_COW);
    8020147c:	fc843783          	ld	a5,-56(s0)
    80201480:	6394                	ld	a3,0(a5)
    80201482:	57fd                	li	a5,-1
    80201484:	17da                	slli	a5,a5,0x36
    80201486:	2fb78793          	addi	a5,a5,763
    8020148a:	8efd                	and	a3,a3,a5
    8020148c:	0046e693          	ori	a3,a3,4
    80201490:	8626                	mv	a2,s1
    80201492:	85d2                	mv	a1,s4
    80201494:	854e                	mv	a0,s3
    80201496:	00000097          	auipc	ra,0x0
    8020149a:	ddc080e7          	jalr	-548(ra) # 80201272 <pageInsert>
    bcopy((void*) pa, (void*) page2pa(page), PAGE_SIZE);
    8020149e:	6605                	lui	a2,0x1
    802014a0:	85a6                	mv	a1,s1
    802014a2:	854a                	mv	a0,s2
    802014a4:	00000097          	auipc	ra,0x0
    802014a8:	ac0080e7          	jalr	-1344(ra) # 80200f64 <bcopy>
}
    802014ac:	70e2                	ld	ra,56(sp)
    802014ae:	7442                	ld	s0,48(sp)
    802014b0:	74a2                	ld	s1,40(sp)
    802014b2:	7902                	ld	s2,32(sp)
    802014b4:	69e2                	ld	s3,24(sp)
    802014b6:	6a42                	ld	s4,16(sp)
    802014b8:	6121                	addi	sp,sp,64
    802014ba:	8082                	ret
        printf("access denied");
    802014bc:	00003517          	auipc	a0,0x3
    802014c0:	d1450513          	addi	a0,a0,-748 # 802041d0 <digits+0x170>
    802014c4:	fffff097          	auipc	ra,0xfffff
    802014c8:	f4c080e7          	jalr	-180(ra) # 80200410 <printf>
        return;
    802014cc:	b7c5                	j	802014ac <cowHandler+0x98>
        panic("");
    802014ce:	00003617          	auipc	a2,0x3
    802014d2:	bba60613          	addi	a2,a2,-1094 # 80204088 <digits+0x28>
    802014d6:	08600593          	li	a1,134
    802014da:	00003517          	auipc	a0,0x3
    802014de:	cde50513          	addi	a0,a0,-802 # 802041b8 <digits+0x158>
    802014e2:	fffff097          	auipc	ra,0xfffff
    802014e6:	f60080e7          	jalr	-160(ra) # 80200442 <_panic_>

00000000802014ea <loadElf>:
    u8 *ph_table = 0;
    u16 entry_cnt;
    u16 entry_size;
    int r;

    if (size < 4 || !is_elf_format(binary)) {
    802014ea:	478d                	li	a5,3
    802014ec:	0cb7d863          	bge	a5,a1,802015bc <loadElf+0xd2>
    int (*map)(u64 va, u32 segmentSize, u8 *bin, u32 binSize, void *userData)) {
    802014f0:	711d                	addi	sp,sp,-96
    802014f2:	ec86                	sd	ra,88(sp)
    802014f4:	e8a2                	sd	s0,80(sp)
    802014f6:	e4a6                	sd	s1,72(sp)
    802014f8:	e0ca                	sd	s2,64(sp)
    802014fa:	fc4e                	sd	s3,56(sp)
    802014fc:	f852                	sd	s4,48(sp)
    802014fe:	f456                	sd	s5,40(sp)
    80201500:	f05a                	sd	s6,32(sp)
    80201502:	ec5e                	sd	s7,24(sp)
    80201504:	e862                	sd	s8,16(sp)
    80201506:	e466                	sd	s9,8(sp)
    80201508:	1080                	addi	s0,sp,96
    8020150a:	8b2a                	mv	s6,a0
    8020150c:	8cb2                	mv	s9,a2
    8020150e:	8bb6                	mv	s7,a3
    80201510:	8c3a                	mv	s8,a4
    if (magic[0] == ELF_MAGIC0 &&
    80201512:	00054703          	lbu	a4,0(a0)
    80201516:	07f00793          	li	a5,127
        return -NOT_ELF_FILE;
    8020151a:	5569                	li	a0,-6
    if (magic[0] == ELF_MAGIC0 &&
    8020151c:	08f71363          	bne	a4,a5,802015a2 <loadElf+0xb8>
    80201520:	001b4703          	lbu	a4,1(s6)
    80201524:	04500793          	li	a5,69
    80201528:	06f71d63          	bne	a4,a5,802015a2 <loadElf+0xb8>
        magic[1] == ELF_MAGIC1 &&
    8020152c:	002b4703          	lbu	a4,2(s6)
    80201530:	04c00793          	li	a5,76
    80201534:	06f71763          	bne	a4,a5,802015a2 <loadElf+0xb8>
    if (size < 4 || !is_elf_format(binary)) {
    80201538:	003b4703          	lbu	a4,3(s6)
    8020153c:	04600793          	li	a5,70
    80201540:	08f71063          	bne	a4,a5,802015c0 <loadElf+0xd6>
    }

    ph_table = binary + ehdr->phoff;
    80201544:	020b3903          	ld	s2,32(s6)
    80201548:	995a                	add	s2,s2,s6
    entry_cnt = ehdr->phnum;
    8020154a:	038b5783          	lhu	a5,56(s6)
    entry_size = ehdr->phentsize;
    8020154e:	036b5a83          	lhu	s5,54(s6)

    while (entry_cnt--) {
    80201552:	fff7849b          	addiw	s1,a5,-1
    80201556:	14c2                	slli	s1,s1,0x30
    80201558:	90c1                	srli	s1,s1,0x30
    8020155a:	cf9d                	beqz	a5,80201598 <loadElf+0xae>
        phdr = (Phdr*)ph_table;
        if (phdr->type == PT_LOAD) {
    8020155c:	4a05                	li	s4,1
    while (entry_cnt--) {
    8020155e:	69c1                	lui	s3,0x10
    80201560:	19fd                	addi	s3,s3,-1
    80201562:	a809                	j	80201574 <loadElf+0x8a>
            r = map(phdr->vaddr, phdr->memsz, binary + phdr->offset, phdr->filesz, userData);
            if (r < 0) {
                return r;
            }
        }
        ph_table += entry_size;
    80201564:	9956                	add	s2,s2,s5
    while (entry_cnt--) {
    80201566:	34fd                	addiw	s1,s1,-1
    80201568:	14c2                	slli	s1,s1,0x30
    8020156a:	90c1                	srli	s1,s1,0x30
    8020156c:	0004879b          	sext.w	a5,s1
    80201570:	03378463          	beq	a5,s3,80201598 <loadElf+0xae>
        if (phdr->type == PT_LOAD) {
    80201574:	00092783          	lw	a5,0(s2)
    80201578:	ff4796e3          	bne	a5,s4,80201564 <loadElf+0x7a>
            r = map(phdr->vaddr, phdr->memsz, binary + phdr->offset, phdr->filesz, userData);
    8020157c:	00893603          	ld	a2,8(s2)
    80201580:	875e                	mv	a4,s7
    80201582:	02092683          	lw	a3,32(s2)
    80201586:	965a                	add	a2,a2,s6
    80201588:	02892583          	lw	a1,40(s2)
    8020158c:	01093503          	ld	a0,16(s2)
    80201590:	9c02                	jalr	s8
            if (r < 0) {
    80201592:	fc0559e3          	bgez	a0,80201564 <loadElf+0x7a>
    80201596:	a031                	j	802015a2 <loadElf+0xb8>
    }
    
    *entry = ehdr->entry;
    80201598:	018b3783          	ld	a5,24(s6)
    8020159c:	00fcb023          	sd	a5,0(s9)
    return 0;
    802015a0:	4501                	li	a0,0
    802015a2:	60e6                	ld	ra,88(sp)
    802015a4:	6446                	ld	s0,80(sp)
    802015a6:	64a6                	ld	s1,72(sp)
    802015a8:	6906                	ld	s2,64(sp)
    802015aa:	79e2                	ld	s3,56(sp)
    802015ac:	7a42                	ld	s4,48(sp)
    802015ae:	7aa2                	ld	s5,40(sp)
    802015b0:	7b02                	ld	s6,32(sp)
    802015b2:	6be2                	ld	s7,24(sp)
    802015b4:	6c42                	ld	s8,16(sp)
    802015b6:	6ca2                	ld	s9,8(sp)
    802015b8:	6125                	addi	sp,sp,96
    802015ba:	8082                	ret
        return -NOT_ELF_FILE;
    802015bc:	5569                	li	a0,-6
    802015be:	8082                	ret
        return -NOT_ELF_FILE;
    802015c0:	5569                	li	a0,-6
    802015c2:	b7c5                	j	802015a2 <loadElf+0xb8>

00000000802015c4 <kernelVector>:
.globl kernelTrap
.section .text
.globl kernelVector
.align 2
kernelVector:
    addi sp, sp, -256
    802015c4:	7111                	addi	sp,sp,-256

    sd ra, 0(sp)
    802015c6:	e006                	sd	ra,0(sp)
    sd sp, 8(sp)
    802015c8:	e40a                	sd	sp,8(sp)
    sd gp, 16(sp)
    802015ca:	e80e                	sd	gp,16(sp)
    sd tp, 24(sp)
    802015cc:	ec12                	sd	tp,24(sp)
    sd t0, 32(sp)
    802015ce:	f016                	sd	t0,32(sp)
    sd t1, 40(sp)
    802015d0:	f41a                	sd	t1,40(sp)
    sd t2, 48(sp)
    802015d2:	f81e                	sd	t2,48(sp)
    sd s0, 56(sp)
    802015d4:	fc22                	sd	s0,56(sp)
    sd s1, 64(sp)
    802015d6:	e0a6                	sd	s1,64(sp)
    sd a0, 72(sp)
    802015d8:	e4aa                	sd	a0,72(sp)
    sd a1, 80(sp)
    802015da:	e8ae                	sd	a1,80(sp)
    sd a2, 88(sp)
    802015dc:	ecb2                	sd	a2,88(sp)
    sd a3, 96(sp)
    802015de:	f0b6                	sd	a3,96(sp)
    sd a4, 104(sp)
    802015e0:	f4ba                	sd	a4,104(sp)
    sd a5, 112(sp)
    802015e2:	f8be                	sd	a5,112(sp)
    sd a6, 120(sp)
    802015e4:	fcc2                	sd	a6,120(sp)
    sd a7, 128(sp)
    802015e6:	e146                	sd	a7,128(sp)
    sd s2, 136(sp)
    802015e8:	e54a                	sd	s2,136(sp)
    sd s3, 144(sp)
    802015ea:	e94e                	sd	s3,144(sp)
    sd s4, 152(sp)
    802015ec:	ed52                	sd	s4,152(sp)
    sd s5, 160(sp)
    802015ee:	f156                	sd	s5,160(sp)
    sd s6, 168(sp)
    802015f0:	f55a                	sd	s6,168(sp)
    sd s7, 176(sp)
    802015f2:	f95e                	sd	s7,176(sp)
    sd s8, 184(sp)
    802015f4:	fd62                	sd	s8,184(sp)
    sd s9, 192(sp)
    802015f6:	e1e6                	sd	s9,192(sp)
    sd s10, 200(sp)
    802015f8:	e5ea                	sd	s10,200(sp)
    sd s11, 208(sp)
    802015fa:	e9ee                	sd	s11,208(sp)
    sd t3, 216(sp)
    802015fc:	edf2                	sd	t3,216(sp)
    sd t4, 224(sp)
    802015fe:	f1f6                	sd	t4,224(sp)
    sd t5, 232(sp)
    80201600:	f5fa                	sd	t5,232(sp)
    sd t6, 240(sp)
    80201602:	f9fe                	sd	t6,240(sp)

	// call the C trap handler in trap.c
    call kernelTrap
    80201604:	37d000ef          	jal	ra,80202180 <kernelTrap>
    ld ra, 0(sp)
    80201608:	6082                	ld	ra,0(sp)
    ld sp, 8(sp)
    8020160a:	6122                	ld	sp,8(sp)
    ld gp, 16(sp)
    8020160c:	61c2                	ld	gp,16(sp)
    // not this, in case we moved CPUs: ld tp, 24(sp)
    ld t0, 32(sp)
    8020160e:	7282                	ld	t0,32(sp)
    ld t1, 40(sp)
    80201610:	7322                	ld	t1,40(sp)
    ld t2, 48(sp)
    80201612:	73c2                	ld	t2,48(sp)
    ld s0, 56(sp)
    80201614:	7462                	ld	s0,56(sp)
    ld s1, 64(sp)
    80201616:	6486                	ld	s1,64(sp)
    ld a0, 72(sp)
    80201618:	6526                	ld	a0,72(sp)
    ld a1, 80(sp)
    8020161a:	65c6                	ld	a1,80(sp)
    ld a2, 88(sp)
    8020161c:	6666                	ld	a2,88(sp)
    ld a3, 96(sp)
    8020161e:	7686                	ld	a3,96(sp)
    ld a4, 104(sp)
    80201620:	7726                	ld	a4,104(sp)
    ld a5, 112(sp)
    80201622:	77c6                	ld	a5,112(sp)
    ld a6, 120(sp)
    80201624:	7866                	ld	a6,120(sp)
    ld a7, 128(sp)
    80201626:	688a                	ld	a7,128(sp)
    ld s2, 136(sp)
    80201628:	692a                	ld	s2,136(sp)
    ld s3, 144(sp)
    8020162a:	69ca                	ld	s3,144(sp)
    ld s4, 152(sp)
    8020162c:	6a6a                	ld	s4,152(sp)
    ld s5, 160(sp)
    8020162e:	7a8a                	ld	s5,160(sp)
    ld s6, 168(sp)
    80201630:	7b2a                	ld	s6,168(sp)
    ld s7, 176(sp)
    80201632:	7bca                	ld	s7,176(sp)
    ld s8, 184(sp)
    80201634:	7c6a                	ld	s8,184(sp)
    ld s9, 192(sp)
    80201636:	6c8e                	ld	s9,192(sp)
    ld s10, 200(sp)
    80201638:	6d2e                	ld	s10,200(sp)
    ld s11, 208(sp)
    8020163a:	6dce                	ld	s11,208(sp)
    ld t3, 216(sp)
    8020163c:	6e6e                	ld	t3,216(sp)
    ld t4, 224(sp)
    8020163e:	7e8e                	ld	t4,224(sp)
    ld t5, 232(sp)
    80201640:	7f2e                	ld	t5,232(sp)
    ld t6, 240(sp)
    80201642:	7fce                	ld	t6,240(sp)

    addi sp, sp, 256
    80201644:	6111                	addi	sp,sp,256
    sret
    80201646:	10200073          	sret

000000008020164a <codeMapper>:

    *new = p;
    return 0;
}

int codeMapper(u64 va, u32 segmentSize, u8 *binary, u32 binSize, void *userData) {
    8020164a:	7119                	addi	sp,sp,-128
    8020164c:	fc86                	sd	ra,120(sp)
    8020164e:	f8a2                	sd	s0,112(sp)
    80201650:	f4a6                	sd	s1,104(sp)
    80201652:	f0ca                	sd	s2,96(sp)
    80201654:	ecce                	sd	s3,88(sp)
    80201656:	e8d2                	sd	s4,80(sp)
    80201658:	e4d6                	sd	s5,72(sp)
    8020165a:	e0da                	sd	s6,64(sp)
    8020165c:	fc5e                	sd	s7,56(sp)
    8020165e:	f862                	sd	s8,48(sp)
    80201660:	f466                	sd	s9,40(sp)
    80201662:	f06a                	sd	s10,32(sp)
    80201664:	ec6e                	sd	s11,24(sp)
    80201666:	0100                	addi	s0,sp,128
    80201668:	8baa                	mv	s7,a0
    8020166a:	8d2e                	mv	s10,a1
    8020166c:	8db2                	mv	s11,a2
    8020166e:	89b6                	mv	s3,a3
    80201670:	8c3a                	mv	s8,a4
    Process *process = (Process*)userData;
    PhysicalPage *p = NULL;
    80201672:	f8043423          	sd	zero,-120(s0)
    u64 i;
    int r = 0;
    u64 offset = va - DOWN_ALIGN(va, PAGE_SIZE);
    80201676:	03451793          	slli	a5,a0,0x34
    8020167a:	0347d913          	srli	s2,a5,0x34
    u64* j;

    if (offset > 0) {
    8020167e:	e39d                	bnez	a5,802016a4 <codeMapper+0x5a>
                PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        }
        r = MIN(binSize, PAGE_SIZE - offset);
        bcopy(binary, (void*) page2pa(p) + offset, r);
    }
    for (i = r; i < binSize; i += r) {
    80201680:	02069993          	slli	s3,a3,0x20
    80201684:	0209d993          	srli	s3,s3,0x20
    80201688:	26098063          	beqz	s3,802018e8 <codeMapper+0x29e>
    u32 ref;
} PhysicalPage;

inline u32 page2PPN(PhysicalPage *page) {
    extern PhysicalPage pages[];
    return page - pages;
    8020168c:	00025b17          	auipc	s6,0x25
    80201690:	d74b0b13          	addi	s6,s6,-652 # 80226400 <pages>
    80201694:	00003a97          	auipc	s5,0x3
    80201698:	d54a8a93          	addi	s5,s5,-684 # 802043e8 <rodataEnd+0x6>
    return pages + ppn;
}


inline u64 page2pa(PhysicalPage *page) {
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020169c:	4a05                	li	s4,1
    8020169e:	0a7e                	slli	s4,s4,0x1f
        if (pageAlloc(&p) != 0) {
            return -1;
        }
        pageInsert(process->pgdir, va + i, page2pa(p), 
            PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        r = MIN(PAGE_SIZE, binSize - i);
    802016a0:	6c85                	lui	s9,0x1
    802016a2:	a0c5                	j	80201782 <codeMapper+0x138>
        p = pa2page(pageLookup(process->pgdir, va, &j));
    802016a4:	f8040613          	addi	a2,s0,-128
    802016a8:	85aa                	mv	a1,a0
    802016aa:	13073503          	ld	a0,304(a4)
    802016ae:	00000097          	auipc	ra,0x0
    802016b2:	b00080e7          	jalr	-1280(ra) # 802011ae <pageLookup>
}

inline PhysicalPage* pa2page(u64 pa) {
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    802016b6:	800007b7          	lui	a5,0x80000
    802016ba:	00f50733          	add	a4,a0,a5
    802016be:	8331                	srli	a4,a4,0xc
    return pages + ppn;
    802016c0:	1702                	slli	a4,a4,0x20
    802016c2:	9301                	srli	a4,a4,0x20
    802016c4:	00171793          	slli	a5,a4,0x1
    802016c8:	97ba                	add	a5,a5,a4
    802016ca:	078e                	slli	a5,a5,0x3
    802016cc:	00025717          	auipc	a4,0x25
    802016d0:	d3470713          	addi	a4,a4,-716 # 80226400 <pages>
    802016d4:	973e                	add	a4,a4,a5
    802016d6:	f8e43423          	sd	a4,-120(s0)
        r = MIN(binSize, PAGE_SIZE - offset);
    802016da:	1982                	slli	s3,s3,0x20
    802016dc:	0209d993          	srli	s3,s3,0x20
    802016e0:	6485                	lui	s1,0x1
    802016e2:	412484b3          	sub	s1,s1,s2
    802016e6:	0099f363          	bgeu	s3,s1,802016ec <codeMapper+0xa2>
    802016ea:	84ce                	mv	s1,s3
    802016ec:	2481                	sext.w	s1,s1
    return page - pages;
    802016ee:	878d                	srai	a5,a5,0x3
    802016f0:	00003717          	auipc	a4,0x3
    802016f4:	cf873703          	ld	a4,-776(a4) # 802043e8 <rodataEnd+0x6>
    802016f8:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802016fc:	00c7979b          	slliw	a5,a5,0xc
    80201700:	1782                	slli	a5,a5,0x20
    80201702:	9381                	srli	a5,a5,0x20
        bcopy(binary, (void*) page2pa(p) + offset, r);
    80201704:	4585                	li	a1,1
    80201706:	05fe                	slli	a1,a1,0x1f
    80201708:	95ca                	add	a1,a1,s2
    8020170a:	8626                	mv	a2,s1
    8020170c:	95be                	add	a1,a1,a5
    8020170e:	856e                	mv	a0,s11
    80201710:	00000097          	auipc	ra,0x0
    80201714:	854080e7          	jalr	-1964(ra) # 80200f64 <bcopy>
    for (i = r; i < binSize; i += r) {
    80201718:	8926                	mv	s2,s1
    8020171a:	f734e9e3          	bltu	s1,s3,8020168c <codeMapper+0x42>
        bcopy(binary + i, (void*) page2pa(p), r);
    }

    offset = va + i - DOWN_ALIGN(va + i, PAGE_SIZE);
    8020171e:	012b85b3          	add	a1,s7,s2
    80201722:	03459793          	slli	a5,a1,0x34
    80201726:	0347d993          	srli	s3,a5,0x34
    if (offset > 0) {
    8020172a:	e3cd                	bnez	a5,802017cc <codeMapper+0x182>
                PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        }
        r = MIN(segmentSize - i, PAGE_SIZE - offset);
        bzero((void*) page2pa(p) + offset, r);
    }
    for (i += r; i < segmentSize; i += r) {
    8020172c:	94ca                	add	s1,s1,s2
    8020172e:	1d02                	slli	s10,s10,0x20
    80201730:	020d5d13          	srli	s10,s10,0x20
    80201734:	1ba4f663          	bgeu	s1,s10,802018e0 <codeMapper+0x296>
    return page - pages;
    80201738:	00025b17          	auipc	s6,0x25
    8020173c:	cc8b0b13          	addi	s6,s6,-824 # 80226400 <pages>
    80201740:	00003a97          	auipc	s5,0x3
    80201744:	ca8a8a93          	addi	s5,s5,-856 # 802043e8 <rodataEnd+0x6>
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201748:	4a05                	li	s4,1
    8020174a:	0a7e                	slli	s4,s4,0x1f
        if (pageAlloc(&p) != 0) {
            return -1;
        }
        pageInsert(process->pgdir, va + i, page2pa(p), 
            PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        r = MIN(PAGE_SIZE, segmentSize - i);
    8020174c:	6c85                	lui	s9,0x1
    8020174e:	a21d                	j	80201874 <codeMapper+0x22a>
        r = MIN(PAGE_SIZE, binSize - i);
    80201750:	2481                	sext.w	s1,s1
    return page - pages;
    80201752:	f8843583          	ld	a1,-120(s0)
    80201756:	416585b3          	sub	a1,a1,s6
    8020175a:	858d                	srai	a1,a1,0x3
    8020175c:	000ab783          	ld	a5,0(s5)
    80201760:	02f585b3          	mul	a1,a1,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201764:	00c5959b          	slliw	a1,a1,0xc
    80201768:	1582                	slli	a1,a1,0x20
    8020176a:	9181                	srli	a1,a1,0x20
        bcopy(binary + i, (void*) page2pa(p), r);
    8020176c:	8626                	mv	a2,s1
    8020176e:	95d2                	add	a1,a1,s4
    80201770:	012d8533          	add	a0,s11,s2
    80201774:	fffff097          	auipc	ra,0xfffff
    80201778:	7f0080e7          	jalr	2032(ra) # 80200f64 <bcopy>
    for (i = r; i < binSize; i += r) {
    8020177c:	9926                	add	s2,s2,s1
    8020177e:	fb3970e3          	bgeu	s2,s3,8020171e <codeMapper+0xd4>
        if (pageAlloc(&p) != 0) {
    80201782:	f8840513          	addi	a0,s0,-120
    80201786:	00000097          	auipc	ra,0x0
    8020178a:	8d4080e7          	jalr	-1836(ra) # 8020105a <pageAlloc>
    8020178e:	12051863          	bnez	a0,802018be <codeMapper+0x274>
    return page - pages;
    80201792:	f8843603          	ld	a2,-120(s0)
    80201796:	41660633          	sub	a2,a2,s6
    8020179a:	860d                	srai	a2,a2,0x3
    8020179c:	000ab783          	ld	a5,0(s5)
    802017a0:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802017a4:	00c6161b          	slliw	a2,a2,0xc
    802017a8:	1602                	slli	a2,a2,0x20
    802017aa:	9201                	srli	a2,a2,0x20
        pageInsert(process->pgdir, va + i, page2pa(p), 
    802017ac:	46f9                	li	a3,30
    802017ae:	9652                	add	a2,a2,s4
    802017b0:	012b85b3          	add	a1,s7,s2
    802017b4:	130c3503          	ld	a0,304(s8)
    802017b8:	00000097          	auipc	ra,0x0
    802017bc:	aba080e7          	jalr	-1350(ra) # 80201272 <pageInsert>
        r = MIN(PAGE_SIZE, binSize - i);
    802017c0:	412984b3          	sub	s1,s3,s2
    802017c4:	f89cf6e3          	bgeu	s9,s1,80201750 <codeMapper+0x106>
    802017c8:	84e6                	mv	s1,s9
    802017ca:	b759                	j	80201750 <codeMapper+0x106>
        p = pa2page(pageLookup(process->pgdir, va + i, &j));
    802017cc:	f8040613          	addi	a2,s0,-128
    802017d0:	130c3503          	ld	a0,304(s8)
    802017d4:	00000097          	auipc	ra,0x0
    802017d8:	9da080e7          	jalr	-1574(ra) # 802011ae <pageLookup>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    802017dc:	800007b7          	lui	a5,0x80000
    802017e0:	00f50733          	add	a4,a0,a5
    802017e4:	8331                	srli	a4,a4,0xc
    return pages + ppn;
    802017e6:	1702                	slli	a4,a4,0x20
    802017e8:	9301                	srli	a4,a4,0x20
    802017ea:	00171793          	slli	a5,a4,0x1
    802017ee:	97ba                	add	a5,a5,a4
    802017f0:	078e                	slli	a5,a5,0x3
    802017f2:	00025717          	auipc	a4,0x25
    802017f6:	c0e70713          	addi	a4,a4,-1010 # 80226400 <pages>
    802017fa:	973e                	add	a4,a4,a5
    802017fc:	f8e43423          	sd	a4,-120(s0)
        r = MIN(segmentSize - i, PAGE_SIZE - offset);
    80201800:	020d1493          	slli	s1,s10,0x20
    80201804:	9081                	srli	s1,s1,0x20
    80201806:	6705                	lui	a4,0x1
    80201808:	41370733          	sub	a4,a4,s3
    8020180c:	412484b3          	sub	s1,s1,s2
    80201810:	00977363          	bgeu	a4,s1,80201816 <codeMapper+0x1cc>
    80201814:	84ba                	mv	s1,a4
    80201816:	2481                	sext.w	s1,s1
    return page - pages;
    80201818:	878d                	srai	a5,a5,0x3
    8020181a:	00003717          	auipc	a4,0x3
    8020181e:	bce73703          	ld	a4,-1074(a4) # 802043e8 <rodataEnd+0x6>
    80201822:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201826:	00c7979b          	slliw	a5,a5,0xc
    8020182a:	1782                	slli	a5,a5,0x20
    8020182c:	9381                	srli	a5,a5,0x20
        bzero((void*) page2pa(p) + offset, r);
    8020182e:	4705                	li	a4,1
    80201830:	077e                	slli	a4,a4,0x1f
    80201832:	00e98533          	add	a0,s3,a4
    80201836:	85a6                	mv	a1,s1
    80201838:	953e                	add	a0,a0,a5
    8020183a:	fffff097          	auipc	ra,0xfffff
    8020183e:	7b4080e7          	jalr	1972(ra) # 80200fee <bzero>
    80201842:	b5ed                	j	8020172c <codeMapper+0xe2>
        bzero((void*) page2pa(p), r);
    80201844:	2901                	sext.w	s2,s2
    return page - pages;
    80201846:	f8843783          	ld	a5,-120(s0)
    8020184a:	416787b3          	sub	a5,a5,s6
    8020184e:	878d                	srai	a5,a5,0x3
    80201850:	000ab703          	ld	a4,0(s5)
    80201854:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201858:	00c7979b          	slliw	a5,a5,0xc
    8020185c:	1782                	slli	a5,a5,0x20
    8020185e:	9381                	srli	a5,a5,0x20
    80201860:	85ca                	mv	a1,s2
    80201862:	01478533          	add	a0,a5,s4
    80201866:	fffff097          	auipc	ra,0xfffff
    8020186a:	788080e7          	jalr	1928(ra) # 80200fee <bzero>
    for (i += r; i < segmentSize; i += r) {
    8020186e:	94ca                	add	s1,s1,s2
    80201870:	05a4f863          	bgeu	s1,s10,802018c0 <codeMapper+0x276>
        if (pageAlloc(&p) != 0) {
    80201874:	f8840513          	addi	a0,s0,-120
    80201878:	fffff097          	auipc	ra,0xfffff
    8020187c:	7e2080e7          	jalr	2018(ra) # 8020105a <pageAlloc>
    80201880:	89aa                	mv	s3,a0
    80201882:	e12d                	bnez	a0,802018e4 <codeMapper+0x29a>
    return page - pages;
    80201884:	f8843603          	ld	a2,-120(s0)
    80201888:	41660633          	sub	a2,a2,s6
    8020188c:	860d                	srai	a2,a2,0x3
    8020188e:	000ab783          	ld	a5,0(s5)
    80201892:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201896:	00c6161b          	slliw	a2,a2,0xc
    8020189a:	1602                	slli	a2,a2,0x20
    8020189c:	9201                	srli	a2,a2,0x20
        pageInsert(process->pgdir, va + i, page2pa(p), 
    8020189e:	46f9                	li	a3,30
    802018a0:	9652                	add	a2,a2,s4
    802018a2:	009b85b3          	add	a1,s7,s1
    802018a6:	130c3503          	ld	a0,304(s8)
    802018aa:	00000097          	auipc	ra,0x0
    802018ae:	9c8080e7          	jalr	-1592(ra) # 80201272 <pageInsert>
        r = MIN(PAGE_SIZE, segmentSize - i);
    802018b2:	409d0933          	sub	s2,s10,s1
    802018b6:	f92cf7e3          	bgeu	s9,s2,80201844 <codeMapper+0x1fa>
    802018ba:	8966                	mv	s2,s9
    802018bc:	b761                	j	80201844 <codeMapper+0x1fa>
            return -1;
    802018be:	59fd                	li	s3,-1
    }
    return 0;
}
    802018c0:	854e                	mv	a0,s3
    802018c2:	70e6                	ld	ra,120(sp)
    802018c4:	7446                	ld	s0,112(sp)
    802018c6:	74a6                	ld	s1,104(sp)
    802018c8:	7906                	ld	s2,96(sp)
    802018ca:	69e6                	ld	s3,88(sp)
    802018cc:	6a46                	ld	s4,80(sp)
    802018ce:	6aa6                	ld	s5,72(sp)
    802018d0:	6b06                	ld	s6,64(sp)
    802018d2:	7be2                	ld	s7,56(sp)
    802018d4:	7c42                	ld	s8,48(sp)
    802018d6:	7ca2                	ld	s9,40(sp)
    802018d8:	7d02                	ld	s10,32(sp)
    802018da:	6de2                	ld	s11,24(sp)
    802018dc:	6109                	addi	sp,sp,128
    802018de:	8082                	ret
    return 0;
    802018e0:	4981                	li	s3,0
    802018e2:	bff9                	j	802018c0 <codeMapper+0x276>
            return -1;
    802018e4:	59fd                	li	s3,-1
    802018e6:	bfe9                	j	802018c0 <codeMapper+0x276>
    for (i = r; i < binSize; i += r) {
    802018e8:	894e                	mv	s2,s3
    int r = 0;
    802018ea:	4481                	li	s1,0
    802018ec:	b581                	j	8020172c <codeMapper+0xe2>

00000000802018ee <processInit>:
void processInit() {
    802018ee:	1141                	addi	sp,sp,-16
    802018f0:	e406                	sd	ra,8(sp)
    802018f2:	e022                	sd	s0,0(sp)
    802018f4:	0800                	addi	s0,sp,16
    printf("Process init start...\n");
    802018f6:	00003517          	auipc	a0,0x3
    802018fa:	8ea50513          	addi	a0,a0,-1814 # 802041e0 <digits+0x180>
    802018fe:	fffff097          	auipc	ra,0xfffff
    80201902:	b12080e7          	jalr	-1262(ra) # 80200410 <printf>
    LIST_INIT(&scheduleList[0]);
    80201906:	000e5797          	auipc	a5,0xe5
    8020190a:	b0278793          	addi	a5,a5,-1278 # 802e6408 <scheduleList>
    8020190e:	0007b023          	sd	zero,0(a5)
    LIST_INIT(&scheduleList[1]);
    80201912:	0007b423          	sd	zero,8(a5)
        processes[i].trapframe.kernelSatp = MAKE_SATP(kernelPageDirectory);
    80201916:	0013b597          	auipc	a1,0x13b
    8020191a:	6ea58593          	addi	a1,a1,1770 # 8033d000 <_pgdir>
    8020191e:	81b1                	srli	a1,a1,0xc
    80201920:	57fd                	li	a5,-1
    80201922:	17fe                	slli	a5,a5,0x3f
    80201924:	8ddd                	or	a1,a1,a5
    80201926:	0013b797          	auipc	a5,0x13b
    8020192a:	9ba78793          	addi	a5,a5,-1606 # 8033c2e0 <processes+0x55ea8>
    8020192e:	000e5817          	auipc	a6,0xe5
    80201932:	b0a80813          	addi	a6,a6,-1270 # 802e6438 <processes>
    80201936:	4681                	li	a3,0
        LIST_INSERT_HEAD(&freeProcesses, &processes[i], link);
    80201938:	0013b517          	auipc	a0,0x13b
    8020193c:	b1050513          	addi	a0,a0,-1264 # 8033c448 <freeProcesses>
    80201940:	a801                	j	80201950 <processInit+0x62>
    80201942:	12a6b423          	sd	a0,296(a3)
    for (i = PROCESS_TOTAL_NUMBER - 1; i >= 0; i--) {
    80201946:	ea878713          	addi	a4,a5,-344
    8020194a:	03078063          	beq	a5,a6,8020196a <processInit+0x7c>
    8020194e:	87ba                	mv	a5,a4
        processes[i].state = UNUSED;
    80201950:	8736                	mv	a4,a3
    80201952:	86be                	mv	a3,a5
    80201954:	1407aa23          	sw	zero,340(a5)
        processes[i].trapframe.kernelSatp = MAKE_SATP(kernelPageDirectory);
    80201958:	e38c                	sd	a1,0(a5)
        LIST_INSERT_HEAD(&freeProcesses, &processes[i], link);
    8020195a:	12e7b023          	sd	a4,288(a5)
    8020195e:	d375                	beqz	a4,80201942 <processInit+0x54>
    80201960:	12078613          	addi	a2,a5,288
    80201964:	12c73423          	sd	a2,296(a4)
    80201968:	bfe9                	j	80201942 <processInit+0x54>
    8020196a:	0013b717          	auipc	a4,0x13b
    8020196e:	ade70713          	addi	a4,a4,-1314 # 8033c448 <freeProcesses>
    80201972:	000e5797          	auipc	a5,0xe5
    80201976:	ac678793          	addi	a5,a5,-1338 # 802e6438 <processes>
    8020197a:	e31c                	sd	a5,0(a4)
    8020197c:	12e7b423          	sd	a4,296(a5)
	return x;
}

// Supervisor Scratch register, for early trap handler in trampoline.S.
static inline void w_sscratch(u64 x) {
	asm volatile("csrw sscratch, %0" : : "r" (x));
    80201980:	00001797          	auipc	a5,0x1
    80201984:	7a278793          	addi	a5,a5,1954 # 80203122 <trapframe>
    80201988:	14079073          	csrw	sscratch,a5
    printf("Process init finish!\n");
    8020198c:	00003517          	auipc	a0,0x3
    80201990:	86c50513          	addi	a0,a0,-1940 # 802041f8 <digits+0x198>
    80201994:	fffff097          	auipc	ra,0xfffff
    80201998:	a7c080e7          	jalr	-1412(ra) # 80200410 <printf>
}
    8020199c:	60a2                	ld	ra,8(sp)
    8020199e:	6402                	ld	s0,0(sp)
    802019a0:	0141                	addi	sp,sp,16
    802019a2:	8082                	ret

00000000802019a4 <generateProcessId>:
u32 generateProcessId(Process *p) {
    802019a4:	1141                	addi	sp,sp,-16
    802019a6:	e422                	sd	s0,8(sp)
    802019a8:	0800                	addi	s0,sp,16
    return (++nextId << (1 + LOG_PROCESS_NUM)) | idx;
    802019aa:	0013b717          	auipc	a4,0x13b
    802019ae:	a9670713          	addi	a4,a4,-1386 # 8033c440 <nextId.2>
    802019b2:	431c                	lw	a5,0(a4)
    802019b4:	2785                	addiw	a5,a5,1
    802019b6:	c31c                	sw	a5,0(a4)
    u32 idx = p - processes;
    802019b8:	000e5717          	auipc	a4,0xe5
    802019bc:	a8070713          	addi	a4,a4,-1408 # 802e6438 <processes>
    802019c0:	8d19                	sub	a0,a0,a4
    802019c2:	850d                	srai	a0,a0,0x3
    802019c4:	00003717          	auipc	a4,0x3
    802019c8:	a2c73703          	ld	a4,-1492(a4) # 802043f0 <rodataEnd+0xe>
    802019cc:	02e50533          	mul	a0,a0,a4
    return (++nextId << (1 + LOG_PROCESS_NUM)) | idx;
    802019d0:	00b7979b          	slliw	a5,a5,0xb
    802019d4:	8d5d                	or	a0,a0,a5
}
    802019d6:	2501                	sext.w	a0,a0
    802019d8:	6422                	ld	s0,8(sp)
    802019da:	0141                	addi	sp,sp,16
    802019dc:	8082                	ret

00000000802019de <processAlloc>:
int processAlloc(Process **new, u64 parentId) {
    802019de:	7139                	addi	sp,sp,-64
    802019e0:	fc06                	sd	ra,56(sp)
    802019e2:	f822                	sd	s0,48(sp)
    802019e4:	f426                	sd	s1,40(sp)
    802019e6:	f04a                	sd	s2,32(sp)
    802019e8:	ec4e                	sd	s3,24(sp)
    802019ea:	e852                	sd	s4,16(sp)
    802019ec:	0080                	addi	s0,sp,64
    802019ee:	89aa                	mv	s3,a0
    if (LIST_EMPTY(&freeProcesses)) {
    802019f0:	0013b497          	auipc	s1,0x13b
    802019f4:	a584b483          	ld	s1,-1448(s1) # 8033c448 <freeProcesses>
    802019f8:	c8e9                	beqz	s1,80201aca <processAlloc+0xec>
    802019fa:	8a2e                	mv	s4,a1
    LIST_REMOVE(p, link);
    802019fc:	1204b783          	ld	a5,288(s1)
    80201a00:	c789                	beqz	a5,80201a0a <processAlloc+0x2c>
    80201a02:	1284b703          	ld	a4,296(s1)
    80201a06:	12e7b423          	sd	a4,296(a5)
    80201a0a:	1284b783          	ld	a5,296(s1)
    80201a0e:	1204b703          	ld	a4,288(s1)
    80201a12:	e398                	sd	a4,0(a5)
    r = allocPgdir(&page);
    80201a14:	fc840513          	addi	a0,s0,-56
    80201a18:	00000097          	auipc	ra,0x0
    80201a1c:	8fe080e7          	jalr	-1794(ra) # 80201316 <allocPgdir>
    if (r < 0) {
    80201a20:	08054763          	bltz	a0,80201aae <processAlloc+0xd0>
    return page - pages;
    80201a24:	fc843783          	ld	a5,-56(s0)
    80201a28:	00025717          	auipc	a4,0x25
    80201a2c:	9d870713          	addi	a4,a4,-1576 # 80226400 <pages>
    80201a30:	8f99                	sub	a5,a5,a4
    80201a32:	878d                	srai	a5,a5,0x3
    80201a34:	00003717          	auipc	a4,0x3
    80201a38:	9b473703          	ld	a4,-1612(a4) # 802043e8 <rodataEnd+0x6>
    80201a3c:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201a40:	00c7979b          	slliw	a5,a5,0xc
    80201a44:	1782                	slli	a5,a5,0x20
    80201a46:	9381                	srli	a5,a5,0x20
    80201a48:	4705                	li	a4,1
    80201a4a:	077e                	slli	a4,a4,0x1f
    80201a4c:	00e78533          	add	a0,a5,a4
    p->pgdir = (u64*) page2pa(page);
    80201a50:	12a4b823          	sd	a0,304(s1)
    pageInsert(p->pgdir, TRAMPOLINE_BASE, (u64)trampoline, 
    80201a54:	46b9                	li	a3,14
    80201a56:	00001617          	auipc	a2,0x1
    80201a5a:	5aa60613          	addi	a2,a2,1450 # 80203000 <_trampoline>
    80201a5e:	04000937          	lui	s2,0x4000
    80201a62:	197d                	addi	s2,s2,-1
    80201a64:	00c91593          	slli	a1,s2,0xc
    80201a68:	00000097          	auipc	ra,0x0
    80201a6c:	80a080e7          	jalr	-2038(ra) # 80201272 <pageInsert>
    p->id = generateProcessId(p);
    80201a70:	8526                	mv	a0,s1
    80201a72:	00000097          	auipc	ra,0x0
    80201a76:	f32080e7          	jalr	-206(ra) # 802019a4 <generateProcessId>
    80201a7a:	12a4ac23          	sw	a0,312(s1)
    p->state = RUNNABLE;
    80201a7e:	4789                	li	a5,2
    80201a80:	14f4aa23          	sw	a5,340(s1)
    p->parentId = parentId;
    80201a84:	1344ae23          	sw	s4,316(s1)
    p->trapframe.kernelSp = (u64)kernelStack + KERNEL_STACK_SIZE;
    80201a88:	00023797          	auipc	a5,0x23
    80201a8c:	57878793          	addi	a5,a5,1400 # 80225000 <mainCount>
    80201a90:	e49c                	sd	a5,8(s1)
    p->trapframe.sp = USER_STACK_TOP;
    80201a92:	0932                	slli	s2,s2,0xc
    80201a94:	0324b823          	sd	s2,48(s1)
    return 0;
    80201a98:	4501                	li	a0,0
        *new = NULL;
    80201a9a:	0099b023          	sd	s1,0(s3) # 10000 <_start-0x801f0000>
}
    80201a9e:	70e2                	ld	ra,56(sp)
    80201aa0:	7442                	ld	s0,48(sp)
    80201aa2:	74a2                	ld	s1,40(sp)
    80201aa4:	7902                	ld	s2,32(sp)
    80201aa6:	69e2                	ld	s3,24(sp)
    80201aa8:	6a42                	ld	s4,16(sp)
    80201aaa:	6121                	addi	sp,sp,64
    80201aac:	8082                	ret
        panic("setup page alloc error\n");
    80201aae:	00002617          	auipc	a2,0x2
    80201ab2:	76260613          	addi	a2,a2,1890 # 80204210 <digits+0x1b0>
    80201ab6:	02a00593          	li	a1,42
    80201aba:	00002517          	auipc	a0,0x2
    80201abe:	76e50513          	addi	a0,a0,1902 # 80204228 <digits+0x1c8>
    80201ac2:	fffff097          	auipc	ra,0xfffff
    80201ac6:	980080e7          	jalr	-1664(ra) # 80200442 <_panic_>
        return -NO_FREE_PROCESS;
    80201aca:	556d                	li	a0,-5
    80201acc:	b7f9                	j	80201a9a <processAlloc+0xbc>

0000000080201ace <processCreatePriority>:

void processCreatePriority(u8 *binary, u32 size, u32 priority) {
    80201ace:	7139                	addi	sp,sp,-64
    80201ad0:	fc06                	sd	ra,56(sp)
    80201ad2:	f822                	sd	s0,48(sp)
    80201ad4:	f426                	sd	s1,40(sp)
    80201ad6:	f04a                	sd	s2,32(sp)
    80201ad8:	ec4e                	sd	s3,24(sp)
    80201ada:	e852                	sd	s4,16(sp)
    80201adc:	0080                	addi	s0,sp,64
    80201ade:	892a                	mv	s2,a0
    80201ae0:	89ae                	mv	s3,a1
    80201ae2:	8a32                	mv	s4,a2
    Process *p;

    int r = processAlloc(&p, 0);
    80201ae4:	4581                	li	a1,0
    80201ae6:	fc840513          	addi	a0,s0,-56
    80201aea:	00000097          	auipc	ra,0x0
    80201aee:	ef4080e7          	jalr	-268(ra) # 802019de <processAlloc>
    if (r < 0) {
    80201af2:	06054263          	bltz	a0,80201b56 <processCreatePriority+0x88>
        return;
    }
    p->priority = priority;
    80201af6:	fc843483          	ld	s1,-56(s0)
    80201afa:	1544a823          	sw	s4,336(s1)
    u64 entryPoint;
    if (loadElf(binary, size, &entryPoint, p, codeMapper) < 0) {
    80201afe:	00000717          	auipc	a4,0x0
    80201b02:	b4c70713          	addi	a4,a4,-1204 # 8020164a <codeMapper>
    80201b06:	86a6                	mv	a3,s1
    80201b08:	fc040613          	addi	a2,s0,-64
    80201b0c:	85ce                	mv	a1,s3
    80201b0e:	854a                	mv	a0,s2
    80201b10:	00000097          	auipc	ra,0x0
    80201b14:	9da080e7          	jalr	-1574(ra) # 802014ea <loadElf>
    80201b18:	04054763          	bltz	a0,80201b66 <processCreatePriority+0x98>
        panic("process create error\n");
    }
    p->trapframe.epc = entryPoint;
    80201b1c:	fc043783          	ld	a5,-64(s0)
    80201b20:	ec9c                	sd	a5,24(s1)

    LIST_INSERT_TAIL(&scheduleList[0], p, scheduleLink);
    80201b22:	000e5717          	auipc	a4,0xe5
    80201b26:	8e673703          	ld	a4,-1818(a4) # 802e6408 <scheduleList>
    80201b2a:	cf21                	beqz	a4,80201b82 <processCreatePriority+0xb4>
    80201b2c:	14e4b023          	sd	a4,320(s1)
    80201b30:	14073783          	ld	a5,320(a4)
    80201b34:	c799                	beqz	a5,80201b42 <processCreatePriority+0x74>
    80201b36:	14f4b023          	sd	a5,320(s1)
    80201b3a:	873e                	mv	a4,a5
    80201b3c:	1407b783          	ld	a5,320(a5)
    80201b40:	fbfd                	bnez	a5,80201b36 <processCreatePriority+0x68>
    80201b42:	14973023          	sd	s1,320(a4)
    80201b46:	1404b783          	ld	a5,320(s1)
    80201b4a:	14078793          	addi	a5,a5,320
    80201b4e:	14f4b423          	sd	a5,328(s1)
    80201b52:	1404b023          	sd	zero,320(s1)
}
    80201b56:	70e2                	ld	ra,56(sp)
    80201b58:	7442                	ld	s0,48(sp)
    80201b5a:	74a2                	ld	s1,40(sp)
    80201b5c:	7902                	ld	s2,32(sp)
    80201b5e:	69e2                	ld	s3,24(sp)
    80201b60:	6a42                	ld	s4,16(sp)
    80201b62:	6121                	addi	sp,sp,64
    80201b64:	8082                	ret
        panic("process create error\n");
    80201b66:	00002617          	auipc	a2,0x2
    80201b6a:	6d260613          	addi	a2,a2,1746 # 80204238 <digits+0x1d8>
    80201b6e:	08f00593          	li	a1,143
    80201b72:	00002517          	auipc	a0,0x2
    80201b76:	6b650513          	addi	a0,a0,1718 # 80204228 <digits+0x1c8>
    80201b7a:	fffff097          	auipc	ra,0xfffff
    80201b7e:	8c8080e7          	jalr	-1848(ra) # 80200442 <_panic_>
    LIST_INSERT_TAIL(&scheduleList[0], p, scheduleLink);
    80201b82:	1404b023          	sd	zero,320(s1)
    80201b86:	000e5797          	auipc	a5,0xe5
    80201b8a:	88278793          	addi	a5,a5,-1918 # 802e6408 <scheduleList>
    80201b8e:	e384                	sd	s1,0(a5)
    80201b90:	14f4b423          	sd	a5,328(s1)
    80201b94:	b7c9                	j	80201b56 <processCreatePriority+0x88>

0000000080201b96 <processRun>:

void processRun(Process *p) {
    80201b96:	1101                	addi	sp,sp,-32
    80201b98:	ec06                	sd	ra,24(sp)
    80201b9a:	e822                	sd	s0,16(sp)
    80201b9c:	e426                	sd	s1,8(sp)
    80201b9e:	e04a                	sd	s2,0(sp)
    80201ba0:	1000                	addi	s0,sp,32
    80201ba2:	892a                	mv	s2,a0
    asm volatile("mv %0, tp" : "=r" (x) );
    80201ba4:	8492                	mv	s1,tp
    int hartId = r_hartid();
    80201ba6:	2481                	sext.w	s1,s1
    if (currentProcess[hartId]) {
    80201ba8:	00349713          	slli	a4,s1,0x3
    80201bac:	000e5797          	auipc	a5,0xe5
    80201bb0:	85c78793          	addi	a5,a5,-1956 # 802e6408 <scheduleList>
    80201bb4:	97ba                	add	a5,a5,a4
    80201bb6:	6b8c                	ld	a1,16(a5)
    80201bb8:	c999                	beqz	a1,80201bce <processRun+0x38>
        bcopy(trapframe, &(currentProcess[hartId]->trapframe), sizeof(Trapframe));
    80201bba:	12000613          	li	a2,288
    80201bbe:	00001517          	auipc	a0,0x1
    80201bc2:	56450513          	addi	a0,a0,1380 # 80203122 <trapframe>
    80201bc6:	fffff097          	auipc	ra,0xfffff
    80201bca:	39e080e7          	jalr	926(ra) # 80200f64 <bcopy>
    }
    currentProcess[hartId] = p;
    80201bce:	048e                	slli	s1,s1,0x3
    80201bd0:	000e5797          	auipc	a5,0xe5
    80201bd4:	83878793          	addi	a5,a5,-1992 # 802e6408 <scheduleList>
    80201bd8:	97a6                	add	a5,a5,s1
    80201bda:	0127b823          	sd	s2,16(a5)
    bcopy(&(currentProcess[hartId]->trapframe), trapframe, sizeof(Trapframe));
    80201bde:	12000613          	li	a2,288
    80201be2:	00001597          	auipc	a1,0x1
    80201be6:	54058593          	addi	a1,a1,1344 # 80203122 <trapframe>
    80201bea:	854a                	mv	a0,s2
    80201bec:	fffff097          	auipc	ra,0xfffff
    80201bf0:	378080e7          	jalr	888(ra) # 80200f64 <bcopy>
    userTrapReturn();
    80201bf4:	00000097          	auipc	ra,0x0
    80201bf8:	65e080e7          	jalr	1630(ra) # 80202252 <userTrapReturn>
}
    80201bfc:	60e2                	ld	ra,24(sp)
    80201bfe:	6442                	ld	s0,16(sp)
    80201c00:	64a2                	ld	s1,8(sp)
    80201c02:	6902                	ld	s2,0(sp)
    80201c04:	6105                	addi	sp,sp,32
    80201c06:	8082                	ret

0000000080201c08 <wakeup>:

void wakeup(void *channel) {
    80201c08:	1141                	addi	sp,sp,-16
    80201c0a:	e422                	sd	s0,8(sp)
    80201c0c:	0800                	addi	s0,sp,16
    // todo
}
    80201c0e:	6422                	ld	s0,8(sp)
    80201c10:	0141                	addi	sp,sp,16
    80201c12:	8082                	ret

0000000080201c14 <yield>:

void yield() {
    80201c14:	1101                	addi	sp,sp,-32
    80201c16:	ec06                	sd	ra,24(sp)
    80201c18:	e822                	sd	s0,16(sp)
    80201c1a:	e426                	sd	s1,8(sp)
    80201c1c:	1000                	addi	s0,sp,32
    80201c1e:	8792                	mv	a5,tp
    static int count = 0;
    static int point = 0;
    int hartId = r_hartid();
    Process* next_env = currentProcess[hartId];
    80201c20:	2781                	sext.w	a5,a5
    80201c22:	078e                	slli	a5,a5,0x3
    80201c24:	000e4717          	auipc	a4,0xe4
    80201c28:	7e470713          	addi	a4,a4,2020 # 802e6408 <scheduleList>
    80201c2c:	97ba                	add	a5,a5,a4
    80201c2e:	6b84                	ld	s1,16(a5)
    while ((count == 0) || (next_env == NULL) || (next_env->state != RUNNABLE)) {
    80201c30:	0013b697          	auipc	a3,0x13b
    80201c34:	80c6a683          	lw	a3,-2036(a3) # 8033c43c <point.1>
    80201c38:	0013b597          	auipc	a1,0x13b
    80201c3c:	8005a583          	lw	a1,-2048(a1) # 8033c438 <count.0>
    80201c40:	4801                	li	a6,0
    80201c42:	4301                	li	t1,0
    80201c44:	4889                	li	a7,2
        if (next_env != NULL) {
            LIST_INSERT_TAIL(&scheduleList[point ^ 1], next_env, scheduleLink);
    80201c46:	863a                	mv	a2,a4
        }
        if (LIST_EMPTY(&scheduleList[point])) {
            point = 1 - point;
    80201c48:	4e05                	li	t3,1
    80201c4a:	4505                	li	a0,1
    while ((count == 0) || (next_env == NULL) || (next_env->state != RUNNABLE)) {
    80201c4c:	a0a1                	j	80201c94 <yield+0x80>
        if (next_env != NULL) {
    80201c4e:	cc99                	beqz	s1,80201c6c <yield+0x58>
            LIST_INSERT_TAIL(&scheduleList[point ^ 1], next_env, scheduleLink);
    80201c50:	0016c793          	xori	a5,a3,1
    80201c54:	00379713          	slli	a4,a5,0x3
    80201c58:	9732                	add	a4,a4,a2
    80201c5a:	6318                	ld	a4,0(a4)
    80201c5c:	e349                	bnez	a4,80201cde <yield+0xca>
    80201c5e:	1404b023          	sd	zero,320(s1)
    80201c62:	078e                	slli	a5,a5,0x3
    80201c64:	97b2                	add	a5,a5,a2
    80201c66:	e384                	sd	s1,0(a5)
    80201c68:	14f4b423          	sd	a5,328(s1)
        if (LIST_EMPTY(&scheduleList[point])) {
    80201c6c:	00369793          	slli	a5,a3,0x3
    80201c70:	97b2                	add	a5,a5,a2
    80201c72:	6384                	ld	s1,0(a5)
    80201c74:	c8d9                	beqz	s1,80201d0a <yield+0xf6>
        }
        if (LIST_EMPTY(&scheduleList[point])) {
            panic("No Env is RUNNABLE\n");
        }
        next_env = LIST_FIRST(&scheduleList[point]);
        LIST_REMOVE(next_env, scheduleLink);
    80201c76:	1404b783          	ld	a5,320(s1)
    80201c7a:	c789                	beqz	a5,80201c84 <yield+0x70>
    80201c7c:	1484b703          	ld	a4,328(s1)
    80201c80:	14e7b423          	sd	a4,328(a5)
    80201c84:	1484b783          	ld	a5,328(s1)
    80201c88:	1404b703          	ld	a4,320(s1)
    80201c8c:	e398                	sd	a4,0(a5)
        count = next_env->priority;
    80201c8e:	1504a583          	lw	a1,336(s1)
    80201c92:	882a                	mv	a6,a0
    while ((count == 0) || (next_env == NULL) || (next_env->state != RUNNABLE)) {
    80201c94:	ddcd                	beqz	a1,80201c4e <yield+0x3a>
    80201c96:	d8f9                	beqz	s1,80201c6c <yield+0x58>
    80201c98:	1544a783          	lw	a5,340(s1)
    80201c9c:	fb179ae3          	bne	a5,a7,80201c50 <yield+0x3c>
    80201ca0:	00030663          	beqz	t1,80201cac <yield+0x98>
    80201ca4:	0013a797          	auipc	a5,0x13a
    80201ca8:	78d7ac23          	sw	a3,1944(a5) # 8033c43c <point.1>
    }
    count--;
    80201cac:	35fd                	addiw	a1,a1,-1
    80201cae:	0013a797          	auipc	a5,0x13a
    80201cb2:	78b7a523          	sw	a1,1930(a5) # 8033c438 <count.0>
    printf("\nyield %d\n", next_env->id);
    80201cb6:	1384a583          	lw	a1,312(s1)
    80201cba:	00002517          	auipc	a0,0x2
    80201cbe:	5ae50513          	addi	a0,a0,1454 # 80204268 <digits+0x208>
    80201cc2:	ffffe097          	auipc	ra,0xffffe
    80201cc6:	74e080e7          	jalr	1870(ra) # 80200410 <printf>
    processRun(next_env);
    80201cca:	8526                	mv	a0,s1
    80201ccc:	00000097          	auipc	ra,0x0
    80201cd0:	eca080e7          	jalr	-310(ra) # 80201b96 <processRun>
}
    80201cd4:	60e2                	ld	ra,24(sp)
    80201cd6:	6442                	ld	s0,16(sp)
    80201cd8:	64a2                	ld	s1,8(sp)
    80201cda:	6105                	addi	sp,sp,32
    80201cdc:	8082                	ret
            LIST_INSERT_TAIL(&scheduleList[point ^ 1], next_env, scheduleLink);
    80201cde:	14e4b023          	sd	a4,320(s1)
    80201ce2:	14073783          	ld	a5,320(a4)
    80201ce6:	c799                	beqz	a5,80201cf4 <yield+0xe0>
    80201ce8:	14f4b023          	sd	a5,320(s1)
    80201cec:	873e                	mv	a4,a5
    80201cee:	1407b783          	ld	a5,320(a5)
    80201cf2:	fbfd                	bnez	a5,80201ce8 <yield+0xd4>
    80201cf4:	14973023          	sd	s1,320(a4)
    80201cf8:	1404b783          	ld	a5,320(s1)
    80201cfc:	14078793          	addi	a5,a5,320
    80201d00:	14f4b423          	sd	a5,328(s1)
    80201d04:	1404b023          	sd	zero,320(s1)
    80201d08:	b795                	j	80201c6c <yield+0x58>
            point = 1 - point;
    80201d0a:	40de06bb          	subw	a3,t3,a3
        if (LIST_EMPTY(&scheduleList[point])) {
    80201d0e:	00369793          	slli	a5,a3,0x3
    80201d12:	97b2                	add	a5,a5,a2
    80201d14:	6384                	ld	s1,0(a5)
    80201d16:	c099                	beqz	s1,80201d1c <yield+0x108>
    80201d18:	832a                	mv	t1,a0
    80201d1a:	bfb1                	j	80201c76 <yield+0x62>
    80201d1c:	00080663          	beqz	a6,80201d28 <yield+0x114>
    80201d20:	0013a797          	auipc	a5,0x13a
    80201d24:	70b7ac23          	sw	a1,1816(a5) # 8033c438 <count.0>
    80201d28:	0013a797          	auipc	a5,0x13a
    80201d2c:	70d7aa23          	sw	a3,1812(a5) # 8033c43c <point.1>
            panic("No Env is RUNNABLE\n");
    80201d30:	00002617          	auipc	a2,0x2
    80201d34:	52060613          	addi	a2,a2,1312 # 80204250 <digits+0x1f0>
    80201d38:	0b100593          	li	a1,177
    80201d3c:	00002517          	auipc	a0,0x2
    80201d40:	4ec50513          	addi	a0,a0,1260 # 80204228 <digits+0x1c8>
    80201d44:	ffffe097          	auipc	ra,0xffffe
    80201d48:	6fe080e7          	jalr	1790(ra) # 80200442 <_panic_>

0000000080201d4c <processFork>:

void processFork() {
    80201d4c:	7175                	addi	sp,sp,-144
    80201d4e:	e506                	sd	ra,136(sp)
    80201d50:	e122                	sd	s0,128(sp)
    80201d52:	fca6                	sd	s1,120(sp)
    80201d54:	f8ca                	sd	s2,112(sp)
    80201d56:	f4ce                	sd	s3,104(sp)
    80201d58:	f0d2                	sd	s4,96(sp)
    80201d5a:	ecd6                	sd	s5,88(sp)
    80201d5c:	e8da                	sd	s6,80(sp)
    80201d5e:	e4de                	sd	s7,72(sp)
    80201d60:	e0e2                	sd	s8,64(sp)
    80201d62:	fc66                	sd	s9,56(sp)
    80201d64:	f86a                	sd	s10,48(sp)
    80201d66:	f46e                	sd	s11,40(sp)
    80201d68:	0900                	addi	s0,sp,144
    80201d6a:	8492                	mv	s1,tp
    Process *process;
    int hartId = r_hartid();
    80201d6c:	2481                	sext.w	s1,s1
    int r = processAlloc(&process, currentProcess[hartId]->id);
    80201d6e:	00349713          	slli	a4,s1,0x3
    80201d72:	000e4797          	auipc	a5,0xe4
    80201d76:	69678793          	addi	a5,a5,1686 # 802e6408 <scheduleList>
    80201d7a:	97ba                	add	a5,a5,a4
    80201d7c:	6b9c                	ld	a5,16(a5)
    80201d7e:	1387e583          	lwu	a1,312(a5)
    80201d82:	f8840513          	addi	a0,s0,-120
    80201d86:	00000097          	auipc	ra,0x0
    80201d8a:	c58080e7          	jalr	-936(ra) # 802019de <processAlloc>
    if (r < 0) {
    80201d8e:	08054e63          	bltz	a0,80201e2a <processFork+0xde>
        currentProcess[hartId]->trapframe.a0 = r;
        panic("");
        return;
    }
    process->priority = currentProcess[hartId]->priority;
    80201d92:	f8843583          	ld	a1,-120(s0)
    80201d96:	000e4917          	auipc	s2,0xe4
    80201d9a:	67290913          	addi	s2,s2,1650 # 802e6408 <scheduleList>
    80201d9e:	00349793          	slli	a5,s1,0x3
    80201da2:	97ca                	add	a5,a5,s2
    80201da4:	6b9c                	ld	a5,16(a5)
    80201da6:	1507a783          	lw	a5,336(a5)
    80201daa:	14f5a823          	sw	a5,336(a1)
    bcopy(trapframe, &process->trapframe, sizeof(Trapframe));
    80201dae:	12000613          	li	a2,288
    80201db2:	00001517          	auipc	a0,0x1
    80201db6:	37050513          	addi	a0,a0,880 # 80203122 <trapframe>
    80201dba:	fffff097          	auipc	ra,0xfffff
    80201dbe:	1aa080e7          	jalr	426(ra) # 80200f64 <bcopy>
    process->trapframe.a0 = 0;
    80201dc2:	f8843783          	ld	a5,-120(s0)
    80201dc6:	0607b823          	sd	zero,112(a5)
    LIST_INSERT_TAIL(&scheduleList[0], process, scheduleLink);
    80201dca:	00093683          	ld	a3,0(s2)
    80201dce:	c6c1                	beqz	a3,80201e56 <processFork+0x10a>
    80201dd0:	14d7b023          	sd	a3,320(a5)
    80201dd4:	1406b703          	ld	a4,320(a3)
    80201dd8:	c719                	beqz	a4,80201de6 <processFork+0x9a>
    80201dda:	14e7b023          	sd	a4,320(a5)
    80201dde:	86ba                	mv	a3,a4
    80201de0:	14073703          	ld	a4,320(a4)
    80201de4:	fb7d                	bnez	a4,80201dda <processFork+0x8e>
    80201de6:	14f6b023          	sd	a5,320(a3)
    80201dea:	1407b703          	ld	a4,320(a5)
    80201dee:	14070713          	addi	a4,a4,320
    80201df2:	14e7b423          	sd	a4,328(a5)
    80201df6:	1407b023          	sd	zero,320(a5)
    trapframe->a0 = process->id;
    80201dfa:	1387e783          	lwu	a5,312(a5)
    80201dfe:	00001717          	auipc	a4,0x1
    80201e02:	38f73a23          	sd	a5,916(a4) # 80203192 <trapframe+0x70>
    80201e06:	00200db7          	lui	s11,0x200
    80201e0a:	4d01                	li	s10,0

    u64 i, j, k;
    for (i = 0; i < 512; i++) {
        if (!(currentProcess[hartId]->pgdir[i] & PTE_VALID)) {
    80201e0c:	048e                	slli	s1,s1,0x3
    80201e0e:	000e4797          	auipc	a5,0xe4
    80201e12:	5fa78793          	addi	a5,a5,1530 # 802e6408 <scheduleList>
    80201e16:	97a6                	add	a5,a5,s1
    80201e18:	f6f43c23          	sd	a5,-136(s0)
            continue;
        }
        u64 *pa = (u64*) PTE2PA(currentProcess[hartId]->pgdir[i]);
    80201e1c:	fff00cb7          	lui	s9,0xfff00
            for (k = 0; k < 512; k++) {
                if (!(pa2[k] & PTE_VALID)) {
                    continue;
                }
                u64 va = (i << 30) + (j << 21) + (k << 12);
                if (va == TRAMPOLINE_BASE) {
    80201e20:	04000a37          	lui	s4,0x4000
    80201e24:	1a7d                	addi	s4,s4,-1
    80201e26:	0a32                	slli	s4,s4,0xc
    80201e28:	a0d9                	j	80201eee <processFork+0x1a2>
        currentProcess[hartId]->trapframe.a0 = r;
    80201e2a:	048e                	slli	s1,s1,0x3
    80201e2c:	000e4717          	auipc	a4,0xe4
    80201e30:	5dc70713          	addi	a4,a4,1500 # 802e6408 <scheduleList>
    80201e34:	9726                	add	a4,a4,s1
    80201e36:	6b18                	ld	a4,16(a4)
    80201e38:	fb28                	sd	a0,112(a4)
        panic("");
    80201e3a:	00002617          	auipc	a2,0x2
    80201e3e:	24e60613          	addi	a2,a2,590 # 80204088 <digits+0x28>
    80201e42:	0c200593          	li	a1,194
    80201e46:	00002517          	auipc	a0,0x2
    80201e4a:	3e250513          	addi	a0,a0,994 # 80204228 <digits+0x1c8>
    80201e4e:	ffffe097          	auipc	ra,0xffffe
    80201e52:	5f4080e7          	jalr	1524(ra) # 80200442 <_panic_>
    LIST_INSERT_TAIL(&scheduleList[0], process, scheduleLink);
    80201e56:	1407b023          	sd	zero,320(a5)
    80201e5a:	000e4717          	auipc	a4,0xe4
    80201e5e:	5ae70713          	addi	a4,a4,1454 # 802e6408 <scheduleList>
    80201e62:	e31c                	sd	a5,0(a4)
    80201e64:	14e7b423          	sd	a4,328(a5)
    80201e68:	bf49                	j	80201dfa <processFork+0xae>
                }
                if (pa2[k] & PTE_WRITE) {
                    pa2[k] |= PTE_COW;
                    pa2[k] &= ~PTE_WRITE;
                }
                pageInsert(process->pgdir, va, PTE2PA(pa2[k]), PTE2PERM(pa2[k]));
    80201e6a:	6294                	ld	a3,0(a3)
    80201e6c:	00269613          	slli	a2,a3,0x2
    80201e70:	0166f6b3          	and	a3,a3,s6
    80201e74:	01567633          	and	a2,a2,s5
    80201e78:	85a6                	mv	a1,s1
    80201e7a:	f8843783          	ld	a5,-120(s0)
    80201e7e:	1307b503          	ld	a0,304(a5)
    80201e82:	fffff097          	auipc	ra,0xfffff
    80201e86:	3f0080e7          	jalr	1008(ra) # 80201272 <pageInsert>
            for (k = 0; k < 512; k++) {
    80201e8a:	0921                	addi	s2,s2,8
    80201e8c:	6785                	lui	a5,0x1
    80201e8e:	94be                	add	s1,s1,a5
    80201e90:	02998363          	beq	s3,s1,80201eb6 <processFork+0x16a>
                if (!(pa2[k] & PTE_VALID)) {
    80201e94:	86ca                	mv	a3,s2
    80201e96:	00093783          	ld	a5,0(s2)
    80201e9a:	0017f713          	andi	a4,a5,1
    80201e9e:	d775                	beqz	a4,80201e8a <processFork+0x13e>
                if (va == TRAMPOLINE_BASE) {
    80201ea0:	ff4485e3          	beq	s1,s4,80201e8a <processFork+0x13e>
                if (pa2[k] & PTE_WRITE) {
    80201ea4:	0047f713          	andi	a4,a5,4
    80201ea8:	d369                	beqz	a4,80201e6a <processFork+0x11e>
                    pa2[k] &= ~PTE_WRITE;
    80201eaa:	9bed                	andi	a5,a5,-5
    80201eac:	1007e793          	ori	a5,a5,256
    80201eb0:	00f93023          	sd	a5,0(s2)
    80201eb4:	bf5d                	j	80201e6a <processFork+0x11e>
        for (j = 0; j < 512; j++) {
    80201eb6:	0ba1                	addi	s7,s7,8
    80201eb8:	002007b7          	lui	a5,0x200
    80201ebc:	99be                	add	s3,s3,a5
    80201ebe:	03898163          	beq	s3,s8,80201ee0 <processFork+0x194>
            if (!(pa[j] & PTE_VALID)) {
    80201ec2:	000bb783          	ld	a5,0(s7)
    80201ec6:	0017f713          	andi	a4,a5,1
    80201eca:	d775                	beqz	a4,80201eb6 <processFork+0x16a>
            u64 *pa2 = (u64*) PTE2PA(pa[j]);
    80201ecc:	078a                	slli	a5,a5,0x2
    80201ece:	008cd713          	srli	a4,s9,0x8
    80201ed2:	00e7f933          	and	s2,a5,a4
                u64 va = (i << 30) + (j << 21) + (k << 12);
    80201ed6:	ffe004b7          	lui	s1,0xffe00
    80201eda:	94ce                	add	s1,s1,s3
                pageInsert(process->pgdir, va, PTE2PA(pa2[k]), PTE2PERM(pa2[k]));
    80201edc:	8aba                	mv	s5,a4
    80201ede:	bf5d                	j	80201e94 <processFork+0x148>
    for (i = 0; i < 512; i++) {
    80201ee0:	0d21                	addi	s10,s10,8
    80201ee2:	400007b7          	lui	a5,0x40000
    80201ee6:	9dbe                	add	s11,s11,a5
    80201ee8:	6785                	lui	a5,0x1
    80201eea:	02fd0c63          	beq	s10,a5,80201f22 <processFork+0x1d6>
        if (!(currentProcess[hartId]->pgdir[i] & PTE_VALID)) {
    80201eee:	f7843783          	ld	a5,-136(s0)
    80201ef2:	6b9c                	ld	a5,16(a5)
    80201ef4:	1307b783          	ld	a5,304(a5) # 1130 <_start-0x801feed0>
    80201ef8:	97ea                	add	a5,a5,s10
    80201efa:	639c                	ld	a5,0(a5)
    80201efc:	0017f713          	andi	a4,a5,1
    80201f00:	d365                	beqz	a4,80201ee0 <processFork+0x194>
        u64 *pa = (u64*) PTE2PA(currentProcess[hartId]->pgdir[i]);
    80201f02:	078a                	slli	a5,a5,0x2
    80201f04:	008cd713          	srli	a4,s9,0x8
    80201f08:	00e7fbb3          	and	s7,a5,a4
        for (j = 0; j < 512; j++) {
    80201f0c:	01bd1c13          	slli	s8,s10,0x1b
    80201f10:	402007b7          	lui	a5,0x40200
    80201f14:	9c3e                	add	s8,s8,a5
        u64 *pa = (u64*) PTE2PA(currentProcess[hartId]->pgdir[i]);
    80201f16:	89ee                	mv	s3,s11
                pageInsert(process->pgdir, va, PTE2PA(pa2[k]), PTE2PERM(pa2[k]));
    80201f18:	5b7d                	li	s6,-1
    80201f1a:	1b5a                	slli	s6,s6,0x36
    80201f1c:	3ffb0b13          	addi	s6,s6,1023
    80201f20:	b74d                	j	80201ec2 <processFork+0x176>

// flush the TLB.
static inline void sfence_vma() {
	// the zero, zero means flush all TLB entries.
	// asm volatile("sfence.vma zero, zero");
	asm volatile("sfence.vma");
    80201f22:	12000073          	sfence.vma
            }
        }
    }
    sfence_vma();
    return;
    80201f26:	60aa                	ld	ra,136(sp)
    80201f28:	640a                	ld	s0,128(sp)
    80201f2a:	74e6                	ld	s1,120(sp)
    80201f2c:	7946                	ld	s2,112(sp)
    80201f2e:	79a6                	ld	s3,104(sp)
    80201f30:	7a06                	ld	s4,96(sp)
    80201f32:	6ae6                	ld	s5,88(sp)
    80201f34:	6b46                	ld	s6,80(sp)
    80201f36:	6ba6                	ld	s7,72(sp)
    80201f38:	6c06                	ld	s8,64(sp)
    80201f3a:	7ce2                	ld	s9,56(sp)
    80201f3c:	7d42                	ld	s10,48(sp)
    80201f3e:	7da2                	ld	s11,40(sp)
    80201f40:	6149                	addi	sp,sp,144
    80201f42:	8082                	ret

0000000080201f44 <syscallPutchar>:
    [SYSCALL_FORK]              syscallFork,
    [SYSCALL_PUT_STRING]        syscallPutString
};

extern Trapframe trapframe[];
void syscallPutchar() {
    80201f44:	1141                	addi	sp,sp,-16
    80201f46:	e422                	sd	s0,8(sp)
    80201f48:	0800                	addi	s0,sp,16
#define SBI_REMOTE_SFENCE_VMA 6
#define SBI_REMOTE_SFENCE_VMA_ASID 7
#define SBI_SHUTDOWN 8

inline void putchar(char c) {
    register u64 a0 asm ("a0") = (u64) c;
    80201f4a:	00001517          	auipc	a0,0x1
    80201f4e:	24854503          	lbu	a0,584(a0) # 80203192 <trapframe+0x70>
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    80201f52:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80201f54:	00000073          	ecall
    putchar(trapframe->a0);
}
    80201f58:	6422                	ld	s0,8(sp)
    80201f5a:	0141                	addi	sp,sp,16
    80201f5c:	8082                	ret

0000000080201f5e <syscallGetProcessId>:

void syscallGetProcessId() {
    80201f5e:	1141                	addi	sp,sp,-16
    80201f60:	e422                	sd	s0,8(sp)
    80201f62:	0800                	addi	s0,sp,16

}
    80201f64:	6422                	ld	s0,8(sp)
    80201f66:	0141                	addi	sp,sp,16
    80201f68:	8082                	ret

0000000080201f6a <syscallYield>:

void syscallYield() {
    80201f6a:	1141                	addi	sp,sp,-16
    80201f6c:	e422                	sd	s0,8(sp)
    80201f6e:	0800                	addi	s0,sp,16

}
    80201f70:	6422                	ld	s0,8(sp)
    80201f72:	0141                	addi	sp,sp,16
    80201f74:	8082                	ret

0000000080201f76 <syscallFork>:

void syscallFork() {
    80201f76:	1141                	addi	sp,sp,-16
    80201f78:	e406                	sd	ra,8(sp)
    80201f7a:	e022                	sd	s0,0(sp)
    80201f7c:	0800                	addi	s0,sp,16
    processFork();
    80201f7e:	00000097          	auipc	ra,0x0
    80201f82:	dce080e7          	jalr	-562(ra) # 80201d4c <processFork>
}
    80201f86:	60a2                	ld	ra,8(sp)
    80201f88:	6402                	ld	s0,0(sp)
    80201f8a:	0141                	addi	sp,sp,16
    80201f8c:	8082                	ret

0000000080201f8e <syscallPutString>:

void syscallPutString() {
    80201f8e:	7139                	addi	sp,sp,-64
    80201f90:	fc06                	sd	ra,56(sp)
    80201f92:	f822                	sd	s0,48(sp)
    80201f94:	f426                	sd	s1,40(sp)
    80201f96:	f04a                	sd	s2,32(sp)
    80201f98:	ec4e                	sd	s3,24(sp)
    80201f9a:	0080                	addi	s0,sp,64
    u64 va = trapframe->a0;
    80201f9c:	00001797          	auipc	a5,0x1
    80201fa0:	18678793          	addi	a5,a5,390 # 80203122 <trapframe>
    80201fa4:	0707b983          	ld	s3,112(a5)
    int len = trapframe->a1;
    80201fa8:	7fa4                	ld	s1,120(a5)
    80201faa:	0004891b          	sext.w	s2,s1
    asm volatile("mv %0, tp" : "=r" (x) );
    80201fae:	8792                	mv	a5,tp
    extern Process *currentProcess[HART_TOTAL_NUMBER];
    int hartId = r_hartid();
    u64* pte;
    u64 pa = pageLookup(currentProcess[hartId]->pgdir, va, &pte);
    80201fb0:	2781                	sext.w	a5,a5
    80201fb2:	078e                	slli	a5,a5,0x3
    80201fb4:	000e4717          	auipc	a4,0xe4
    80201fb8:	46470713          	addi	a4,a4,1124 # 802e6418 <currentProcess>
    80201fbc:	97ba                	add	a5,a5,a4
    80201fbe:	639c                	ld	a5,0(a5)
    80201fc0:	fc840613          	addi	a2,s0,-56
    80201fc4:	85ce                	mv	a1,s3
    80201fc6:	1307b503          	ld	a0,304(a5)
    80201fca:	fffff097          	auipc	ra,0xfffff
    80201fce:	1e4080e7          	jalr	484(ra) # 802011ae <pageLookup>
    if (pa == 0) {
    80201fd2:	c90d                	beqz	a0,80202004 <syscallPutString+0x76>
        panic("Syscall put string address error!\nThe virtual address is %x, the length is %x\n", va, len);
    }
    char* start = (char*) pa;
    80201fd4:	87aa                	mv	a5,a0
    while (len--) {
    80201fd6:	02090063          	beqz	s2,80201ff6 <syscallPutString+0x68>
    80201fda:	fff4871b          	addiw	a4,s1,-1
    80201fde:	1702                	slli	a4,a4,0x20
    80201fe0:	9301                	srli	a4,a4,0x20
    80201fe2:	0705                	addi	a4,a4,1
    80201fe4:	972a                	add	a4,a4,a0
    register u64 a0 asm ("a0") = (u64) c;
    80201fe6:	0007c503          	lbu	a0,0(a5)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    80201fea:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80201fec:	00000073          	ecall
        putchar(*start);
        start++;
    80201ff0:	0785                	addi	a5,a5,1
    while (len--) {
    80201ff2:	fee79ae3          	bne	a5,a4,80201fe6 <syscallPutString+0x58>
    }
    80201ff6:	70e2                	ld	ra,56(sp)
    80201ff8:	7442                	ld	s0,48(sp)
    80201ffa:	74a2                	ld	s1,40(sp)
    80201ffc:	7902                	ld	s2,32(sp)
    80201ffe:	69e2                	ld	s3,24(sp)
    80202000:	6121                	addi	sp,sp,64
    80202002:	8082                	ret
        panic("Syscall put string address error!\nThe virtual address is %x, the length is %x\n", va, len);
    80202004:	874a                	mv	a4,s2
    80202006:	86ce                	mv	a3,s3
    80202008:	00002617          	auipc	a2,0x2
    8020200c:	27060613          	addi	a2,a2,624 # 80204278 <digits+0x218>
    80202010:	02900593          	li	a1,41
    80202014:	00002517          	auipc	a0,0x2
    80202018:	2b450513          	addi	a0,a0,692 # 802042c8 <digits+0x268>
    8020201c:	ffffe097          	auipc	ra,0xffffe
    80202020:	426080e7          	jalr	1062(ra) # 80200442 <_panic_>

0000000080202024 <setNextTimeout>:
#include <Process.h>
#include <Riscv.h>

static u32 ticks;

void setNextTimeout() {
    80202024:	1141                	addi	sp,sp,-16
    80202026:	e422                	sd	s0,8(sp)
    80202028:	0800                	addi	s0,sp,16
	asm volatile("rdtime %0" : "=r" (x) );
    8020202a:	c0102573          	rdtime	a0
    SBI_CALL_1(SBI_SET_TIMER, r_time() + INTERVAL);
    8020202e:	000317b7          	lui	a5,0x31
    80202032:	d4078793          	addi	a5,a5,-704 # 30d40 <_start-0x801cf2c0>
    80202036:	953e                	add	a0,a0,a5
    80202038:	4581                	li	a1,0
    8020203a:	4601                	li	a2,0
    8020203c:	4681                	li	a3,0
    8020203e:	4881                	li	a7,0
    80202040:	00000073          	ecall
}
    80202044:	6422                	ld	s0,8(sp)
    80202046:	0141                	addi	sp,sp,16
    80202048:	8082                	ret

000000008020204a <timerTick>:

void timerTick() {
    8020204a:	1141                	addi	sp,sp,-16
    8020204c:	e406                	sd	ra,8(sp)
    8020204e:	e022                	sd	s0,0(sp)
    80202050:	0800                	addi	s0,sp,16
    ticks++;
    80202052:	0013a517          	auipc	a0,0x13a
    80202056:	3fe50513          	addi	a0,a0,1022 # 8033c450 <ticks>
    8020205a:	411c                	lw	a5,0(a0)
    8020205c:	2785                	addiw	a5,a5,1
    8020205e:	c11c                	sw	a5,0(a0)
    wakeup(&ticks);
    80202060:	00000097          	auipc	ra,0x0
    80202064:	ba8080e7          	jalr	-1112(ra) # 80201c08 <wakeup>
    setNextTimeout();
    80202068:	00000097          	auipc	ra,0x0
    8020206c:	fbc080e7          	jalr	-68(ra) # 80202024 <setNextTimeout>
    80202070:	60a2                	ld	ra,8(sp)
    80202072:	6402                	ld	s0,0(sp)
    80202074:	0141                	addi	sp,sp,16
    80202076:	8082                	ret

0000000080202078 <trapInit>:
#include <Trap.h>
#include <Process.h>
#include <Page.h>
#include <Syscall.h>

void trapInit() {
    80202078:	1141                	addi	sp,sp,-16
    8020207a:	e406                	sd	ra,8(sp)
    8020207c:	e022                	sd	s0,0(sp)
    8020207e:	0800                	addi	s0,sp,16
    printf("Trap init start...\n");
    80202080:	00002517          	auipc	a0,0x2
    80202084:	25850513          	addi	a0,a0,600 # 802042d8 <digits+0x278>
    80202088:	ffffe097          	auipc	ra,0xffffe
    8020208c:	388080e7          	jalr	904(ra) # 80200410 <printf>
	asm volatile("csrw stvec, %0" : : "r" (x));
    80202090:	fffff797          	auipc	a5,0xfffff
    80202094:	53478793          	addi	a5,a5,1332 # 802015c4 <kernelVector>
    80202098:	10579073          	csrw	stvec,a5
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020209c:	100027f3          	csrr	a5,sstatus
    w_stvec((u64)kernelVector);
    w_sstatus(r_sstatus() | SSTATUS_SIE | SSTATUS_SPIE);
    802020a0:	0227e793          	ori	a5,a5,34
    asm volatile("csrw sstatus, %0" : : "r" (x));
    802020a4:	10079073          	csrw	sstatus,a5
    asm volatile("csrr %0, sie" : "=r" (x) );
    802020a8:	104027f3          	csrr	a5,sie
    w_sie(r_sie() | SIE_SEIE | SIE_SSIE | SIE_STIE);
    802020ac:	2227e793          	ori	a5,a5,546
	asm volatile("csrw sie, %0" : : "r" (x));
    802020b0:	10479073          	csrw	sie,a5
    setNextTimeout();
    802020b4:	00000097          	auipc	ra,0x0
    802020b8:	f70080e7          	jalr	-144(ra) # 80202024 <setNextTimeout>
    printf("Trap init finish!\n");
    802020bc:	00002517          	auipc	a0,0x2
    802020c0:	23450513          	addi	a0,a0,564 # 802042f0 <digits+0x290>
    802020c4:	ffffe097          	auipc	ra,0xffffe
    802020c8:	34c080e7          	jalr	844(ra) # 80200410 <printf>
}
    802020cc:	60a2                	ld	ra,8(sp)
    802020ce:	6402                	ld	s0,0(sp)
    802020d0:	0141                	addi	sp,sp,16
    802020d2:	8082                	ret

00000000802020d4 <trapDevice>:
	asm volatile("csrr %0, scause" : "=r" (x) );
    802020d4:	142027f3          	csrr	a5,scause
    #ifdef QEMU
    if ((scause & SCAUSE_INTERRUPT) && 
    ((scause & SCAUSE_EXCEPTION_CODE) == SCAUSE_SUPERVISOR_EXTERNAL)) {
    #else
    // todo
    if ((scause & SCAUSE_INTERRUPT) && 
    802020d8:	0007c463          	bltz	a5,802020e0 <trapDevice+0xc>
    if ((scause & SCAUSE_INTERRUPT) &&
    ((scause & SCAUSE_EXCEPTION_CODE) == SCAUSE_SUPERVISOR_TIMER)) {
        timerTick();
        return TIMER_INTERRUPT;
    }
    return UNKNOWN_DEVICE;
    802020dc:	4501                	li	a0,0
}
    802020de:	8082                	ret
int trapDevice() {
    802020e0:	1101                	addi	sp,sp,-32
    802020e2:	ec06                	sd	ra,24(sp)
    802020e4:	e822                	sd	s0,16(sp)
    802020e6:	e426                	sd	s1,8(sp)
    802020e8:	1000                	addi	s0,sp,32
    ((scause & SCAUSE_EXCEPTION_CODE) == SCAUSE_SUPERVISOR_EXTERNAL)) {
    802020ea:	0786                	slli	a5,a5,0x1
    802020ec:	8385                	srli	a5,a5,0x1
    if ((scause & SCAUSE_INTERRUPT) && 
    802020ee:	4725                	li	a4,9
    802020f0:	00e78b63          	beq	a5,a4,80202106 <trapDevice+0x32>
    if ((scause & SCAUSE_INTERRUPT) &&
    802020f4:	4715                	li	a4,5
    return UNKNOWN_DEVICE;
    802020f6:	4501                	li	a0,0
    if ((scause & SCAUSE_INTERRUPT) &&
    802020f8:	06e78e63          	beq	a5,a4,80202174 <trapDevice+0xa0>
}
    802020fc:	60e2                	ld	ra,24(sp)
    802020fe:	6442                	ld	s0,16(sp)
    80202100:	64a2                	ld	s1,8(sp)
    80202102:	6105                	addi	sp,sp,32
    80202104:	8082                	ret
	asm volatile("mv %0, tp" : "=r" (x) );
    80202106:	8712                	mv	a4,tp
void userTrapReturn();

inline static u32 interruptServed() {
    int hart = r_tp();
    #ifndef QEMU
    return *(u32*)PLIC_MCLAIM(hart);
    80202108:	00d7171b          	slliw	a4,a4,0xd
    8020210c:	1f8617b7          	lui	a5,0x1f861
    80202110:	07a6                	slli	a5,a5,0x9
    80202112:	97ba                	add	a5,a5,a4
    80202114:	43c4                	lw	s1,4(a5)
        int irq = interruptServed();
    80202116:	0004869b          	sext.w	a3,s1
        if (irq == UART_IRQ) {
    8020211a:	02100793          	li	a5,33
    8020211e:	02f68563          	beq	a3,a5,80202148 <trapDevice+0x74>
        } else if (irq == DISK_IRQ) {
    80202122:	47ed                	li	a5,27
    80202124:	02f68963          	beq	a3,a5,80202156 <trapDevice+0x82>
        return SOFTWARE_TRAP;
    80202128:	4505                	li	a0,1
        } else if (irq) {
    8020212a:	dae9                	beqz	a3,802020fc <trapDevice+0x28>
            panic("unexpected interrupt irq = %d\n", irq);
    8020212c:	00002617          	auipc	a2,0x2
    80202130:	1dc60613          	addi	a2,a2,476 # 80204308 <digits+0x2a8>
    80202134:	02500593          	li	a1,37
    80202138:	00002517          	auipc	a0,0x2
    8020213c:	1f050513          	addi	a0,a0,496 # 80204328 <digits+0x2c8>
    80202140:	ffffe097          	auipc	ra,0xffffe
    80202144:	302080e7          	jalr	770(ra) # 80200442 <_panic_>
};

inline int getchar() {
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_GETCHAR;
    80202148:	4889                	li	a7,2
    register u64 a0 asm ("a0");
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    8020214a:	00000073          	ecall
    return a0;
    8020214e:	2501                	sext.w	a0,a0
            if (c != -1) {
    80202150:	57fd                	li	a5,-1
    80202152:	00f51c63          	bne	a0,a5,8020216a <trapDevice+0x96>
    80202156:	8712                	mv	a4,tp
}

inline static void interruptCompleted(int irq) {
    int hart = r_tp();
    #ifndef QEMU
    *(u32*)PLIC_MCLAIM(hart) = irq;
    80202158:	00d7171b          	slliw	a4,a4,0xd
    8020215c:	1f8617b7          	lui	a5,0x1f861
    80202160:	07a6                	slli	a5,a5,0x9
    80202162:	97ba                	add	a5,a5,a4
    80202164:	c3c4                	sw	s1,4(a5)
        return SOFTWARE_TRAP;
    80202166:	4505                	li	a0,1
    #else
    *(u32*)PLIC_SCLAIM(hart) = irq;
    #endif
}
    80202168:	bf51                	j	802020fc <trapDevice+0x28>
                consoleInterrupt(c);
    8020216a:	ffffe097          	auipc	ra,0xffffe
    8020216e:	fc2080e7          	jalr	-62(ra) # 8020012c <consoleInterrupt>
    80202172:	b7d5                	j	80202156 <trapDevice+0x82>
        timerTick();
    80202174:	00000097          	auipc	ra,0x0
    80202178:	ed6080e7          	jalr	-298(ra) # 8020204a <timerTick>
        return TIMER_INTERRUPT;
    8020217c:	4509                	li	a0,2
    8020217e:	bfbd                	j	802020fc <trapDevice+0x28>

0000000080202180 <kernelTrap>:

void kernelTrap() {
    80202180:	1101                	addi	sp,sp,-32
    80202182:	ec06                	sd	ra,24(sp)
    80202184:	e822                	sd	s0,16(sp)
    80202186:	e426                	sd	s1,8(sp)
    80202188:	e04a                	sd	s2,0(sp)
    8020218a:	1000                	addi	s0,sp,32
    printf("kernel trap\n");
    8020218c:	00002517          	auipc	a0,0x2
    80202190:	1a450513          	addi	a0,a0,420 # 80204330 <digits+0x2d0>
    80202194:	ffffe097          	auipc	ra,0xffffe
    80202198:	27c080e7          	jalr	636(ra) # 80200410 <printf>
    asm volatile("csrr %0, sepc" : "=r" (x) );
    8020219c:	14102973          	csrr	s2,sepc
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    802021a0:	100024f3          	csrr	s1,sstatus
    u64 sepc = r_sepc();
    u64 sstatus = r_sstatus();

    if (!(sstatus & SSTATUS_SPP)) {
    802021a4:	1004f793          	andi	a5,s1,256
    802021a8:	cb85                	beqz	a5,802021d8 <kernelTrap+0x58>
    802021aa:	100027f3          	csrr	a5,sstatus
	return (x & SSTATUS_SIE) != 0;
    802021ae:	8b89                	andi	a5,a5,2
        panic("kernel trap not from supervisor mode");
    }
    if (intr_get()) {
    802021b0:	e3b1                	bnez	a5,802021f4 <kernelTrap+0x74>
        panic("kernel trap while interrupts enbled");
    }
    
    int device = trapDevice();
    802021b2:	00000097          	auipc	ra,0x0
    802021b6:	f22080e7          	jalr	-222(ra) # 802020d4 <trapDevice>
    if (device == UNKNOWN_DEVICE) {
    802021ba:	c939                	beqz	a0,80202210 <kernelTrap+0x90>
    asm volatile("mv %0, tp" : "=r" (x) );
    802021bc:	8792                	mv	a5,tp
        panic("kernel trap");
    }
    extern Process *currentProcess[HART_TOTAL_NUMBER];
    int hartId = r_hartid();
    if (device == TIMER_INTERRUPT && currentProcess[hartId] != NULL &&
    802021be:	4709                	li	a4,2
    802021c0:	06e50663          	beq	a0,a4,8020222c <kernelTrap+0xac>
  	asm volatile("csrw sepc, %0" : : "r" (x));
    802021c4:	14191073          	csrw	sepc,s2
    asm volatile("csrw sstatus, %0" : : "r" (x));
    802021c8:	10049073          	csrw	sstatus,s1
        currentProcess[hartId]->state == RUNNING) {
        yield();
    }
    w_sepc(sepc);
    w_sstatus(sstatus);
}
    802021cc:	60e2                	ld	ra,24(sp)
    802021ce:	6442                	ld	s0,16(sp)
    802021d0:	64a2                	ld	s1,8(sp)
    802021d2:	6902                	ld	s2,0(sp)
    802021d4:	6105                	addi	sp,sp,32
    802021d6:	8082                	ret
        panic("kernel trap not from supervisor mode");
    802021d8:	00002617          	auipc	a2,0x2
    802021dc:	16860613          	addi	a2,a2,360 # 80204340 <digits+0x2e0>
    802021e0:	03d00593          	li	a1,61
    802021e4:	00002517          	auipc	a0,0x2
    802021e8:	14450513          	addi	a0,a0,324 # 80204328 <digits+0x2c8>
    802021ec:	ffffe097          	auipc	ra,0xffffe
    802021f0:	256080e7          	jalr	598(ra) # 80200442 <_panic_>
        panic("kernel trap while interrupts enbled");
    802021f4:	00002617          	auipc	a2,0x2
    802021f8:	17460613          	addi	a2,a2,372 # 80204368 <digits+0x308>
    802021fc:	04000593          	li	a1,64
    80202200:	00002517          	auipc	a0,0x2
    80202204:	12850513          	addi	a0,a0,296 # 80204328 <digits+0x2c8>
    80202208:	ffffe097          	auipc	ra,0xffffe
    8020220c:	23a080e7          	jalr	570(ra) # 80200442 <_panic_>
        panic("kernel trap");
    80202210:	00002617          	auipc	a2,0x2
    80202214:	18060613          	addi	a2,a2,384 # 80204390 <digits+0x330>
    80202218:	04500593          	li	a1,69
    8020221c:	00002517          	auipc	a0,0x2
    80202220:	10c50513          	addi	a0,a0,268 # 80204328 <digits+0x2c8>
    80202224:	ffffe097          	auipc	ra,0xffffe
    80202228:	21e080e7          	jalr	542(ra) # 80200442 <_panic_>
    if (device == TIMER_INTERRUPT && currentProcess[hartId] != NULL &&
    8020222c:	2781                	sext.w	a5,a5
    8020222e:	078e                	slli	a5,a5,0x3
    80202230:	000e4717          	auipc	a4,0xe4
    80202234:	1e870713          	addi	a4,a4,488 # 802e6418 <currentProcess>
    80202238:	97ba                	add	a5,a5,a4
    8020223a:	639c                	ld	a5,0(a5)
    8020223c:	d7c1                	beqz	a5,802021c4 <kernelTrap+0x44>
    8020223e:	1547a703          	lw	a4,340(a5) # 1f861154 <_start-0x6099eeac>
    80202242:	478d                	li	a5,3
    80202244:	f8f710e3          	bne	a4,a5,802021c4 <kernelTrap+0x44>
        yield();
    80202248:	00000097          	auipc	ra,0x0
    8020224c:	9cc080e7          	jalr	-1588(ra) # 80201c14 <yield>
    80202250:	bf95                	j	802021c4 <kernelTrap+0x44>

0000000080202252 <userTrapReturn>:
        }
    }
    userTrapReturn();
}

void userTrapReturn() {
    80202252:	1141                	addi	sp,sp,-16
    80202254:	e406                	sd	ra,8(sp)
    80202256:	e022                	sd	s0,0(sp)
    80202258:	0800                	addi	s0,sp,16
    extern char trampoline[];
    w_stvec(TRAMPOLINE_BASE + ((u64)userVector - (u64)trampoline));
    8020225a:	00001517          	auipc	a0,0x1
    8020225e:	da650513          	addi	a0,a0,-602 # 80203000 <_trampoline>
    80202262:	040007b7          	lui	a5,0x4000
    80202266:	17fd                	addi	a5,a5,-1
    80202268:	07b2                	slli	a5,a5,0xc
    8020226a:	00001717          	auipc	a4,0x1
    8020226e:	d9670713          	addi	a4,a4,-618 # 80203000 <_trampoline>
    80202272:	973e                	add	a4,a4,a5
    80202274:	8f09                	sub	a4,a4,a0
	asm volatile("csrw stvec, %0" : : "r" (x));
    80202276:	10571073          	csrw	stvec,a4
    asm volatile("mv %0, tp" : "=r" (x) );
    8020227a:	8692                	mv	a3,tp

    extern Process *currentProcess[HART_TOTAL_NUMBER];
    extern char kernelStack[];
    extern Trapframe trapframe[];
    int hartId = r_hartid();
    trapframe->kernelSp = (u64)kernelStack + KERNEL_STACK_SIZE;
    8020227c:	00001717          	auipc	a4,0x1
    80202280:	ea670713          	addi	a4,a4,-346 # 80203122 <trapframe>
    80202284:	00023617          	auipc	a2,0x23
    80202288:	d7c60613          	addi	a2,a2,-644 # 80225000 <mainCount>
    8020228c:	e710                	sd	a2,8(a4)
    trapframe->trapHandler = (u64)userTrap;
    8020228e:	00000617          	auipc	a2,0x0
    80202292:	05660613          	addi	a2,a2,86 # 802022e4 <userTrap>
    80202296:	eb10                	sd	a2,16(a4)
	asm volatile("mv %0, tp" : "=r" (x) );
    80202298:	8612                	mv	a2,tp
    trapframe->kernelHartId = r_tp();
    8020229a:	f310                	sd	a2,32(a4)
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020229c:	10002673          	csrr	a2,sstatus

    //bcopy(&(currentProcess->trapframe), trapframe, sizeof(Trapframe));

    u64 sstatus = r_sstatus();
    sstatus &= ~SSTATUS_SPP;
    802022a0:	eff67613          	andi	a2,a2,-257
    sstatus |= SSTATUS_SPIE;
    802022a4:	02066613          	ori	a2,a2,32
    asm volatile("csrw sstatus, %0" : : "r" (x));
    802022a8:	10061073          	csrw	sstatus,a2
    w_sstatus(sstatus);
    u64 satp = MAKE_SATP(currentProcess[hartId]->pgdir);
    802022ac:	2681                	sext.w	a3,a3
    802022ae:	068e                	slli	a3,a3,0x3
    802022b0:	000e4617          	auipc	a2,0xe4
    802022b4:	16860613          	addi	a2,a2,360 # 802e6418 <currentProcess>
    802022b8:	96b2                	add	a3,a3,a2
    802022ba:	6294                	ld	a3,0(a3)
    802022bc:	1306b583          	ld	a1,304(a3)
    802022c0:	81b1                	srli	a1,a1,0xc
    u64 fn = TRAMPOLINE_BASE + ((u64)userReturn - (u64)trampoline);
    ((void(*)(u64, u64))fn)(TRAMPOLINE_BASE + (u64)trapframe - (u64)trampoline, satp);
    802022c2:	973e                	add	a4,a4,a5
    u64 fn = TRAMPOLINE_BASE + ((u64)userReturn - (u64)trampoline);
    802022c4:	00001697          	auipc	a3,0x1
    802022c8:	dd468693          	addi	a3,a3,-556 # 80203098 <userReturn>
    802022cc:	97b6                	add	a5,a5,a3
    802022ce:	8f89                	sub	a5,a5,a0
    ((void(*)(u64, u64))fn)(TRAMPOLINE_BASE + (u64)trapframe - (u64)trampoline, satp);
    802022d0:	56fd                	li	a3,-1
    802022d2:	16fe                	slli	a3,a3,0x3f
    802022d4:	8dd5                	or	a1,a1,a3
    802022d6:	40a70533          	sub	a0,a4,a0
    802022da:	9782                	jalr	a5
}
    802022dc:	60a2                	ld	ra,8(sp)
    802022de:	6402                	ld	s0,0(sp)
    802022e0:	0141                	addi	sp,sp,16
    802022e2:	8082                	ret

00000000802022e4 <userTrap>:
void userTrap() {
    802022e4:	7179                	addi	sp,sp,-48
    802022e6:	f406                	sd	ra,40(sp)
    802022e8:	f022                	sd	s0,32(sp)
    802022ea:	ec26                	sd	s1,24(sp)
    802022ec:	1800                	addi	s0,sp,48
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    802022ee:	100027f3          	csrr	a5,sstatus
    if (sstatus & SSTATUS_SPP) {
    802022f2:	1007f793          	andi	a5,a5,256
    802022f6:	e3bd                	bnez	a5,8020235c <userTrap+0x78>
	asm volatile("csrw stvec, %0" : : "r" (x));
    802022f8:	fffff797          	auipc	a5,0xfffff
    802022fc:	2cc78793          	addi	a5,a5,716 # 802015c4 <kernelVector>
    80202300:	10579073          	csrw	stvec,a5
    asm volatile("mv %0, tp" : "=r" (x) );
    80202304:	8592                	mv	a1,tp
	asm volatile("csrr %0, scause" : "=r" (x) );
    80202306:	142026f3          	csrr	a3,scause
    if (scause & SCAUSE_INTERRUPT) {
    8020230a:	0606c763          	bltz	a3,80202378 <userTrap+0x94>
        u64 *pte = NULL;
    8020230e:	fc043c23          	sd	zero,-40(s0)
        switch (scause & SCAUSE_EXCEPTION_CODE)
    80202312:	00169713          	slli	a4,a3,0x1
    80202316:	8305                	srli	a4,a4,0x1
    80202318:	57ed                	li	a5,-5
    8020231a:	8385                	srli	a5,a5,0x1
    8020231c:	8ff5                	and	a5,a5,a3
    8020231e:	4635                	li	a2,13
    80202320:	06c78563          	beq	a5,a2,8020238a <userTrap+0xa6>
    80202324:	47a1                	li	a5,8
    80202326:	0ef71d63          	bne	a4,a5,80202420 <userTrap+0x13c>
            trapframe->epc += 4;
    8020232a:	00001797          	auipc	a5,0x1
    8020232e:	df878793          	addi	a5,a5,-520 # 80203122 <trapframe>
    80202332:	6f98                	ld	a4,24(a5)
    80202334:	0711                	addi	a4,a4,4
    80202336:	ef98                	sd	a4,24(a5)
            syscallVector[trapframe->a7]();
    80202338:	77d8                	ld	a4,168(a5)
    8020233a:	070e                	slli	a4,a4,0x3
    8020233c:	00003797          	auipc	a5,0x3
    80202340:	cc478793          	addi	a5,a5,-828 # 80205000 <syscallVector>
    80202344:	97ba                	add	a5,a5,a4
    80202346:	639c                	ld	a5,0(a5)
    80202348:	9782                	jalr	a5
    userTrapReturn();
    8020234a:	00000097          	auipc	ra,0x0
    8020234e:	f08080e7          	jalr	-248(ra) # 80202252 <userTrapReturn>
}
    80202352:	70a2                	ld	ra,40(sp)
    80202354:	7402                	ld	s0,32(sp)
    80202356:	64e2                	ld	s1,24(sp)
    80202358:	6145                	addi	sp,sp,48
    8020235a:	8082                	ret
        panic("usertrap: not from user mode\n");
    8020235c:	00002617          	auipc	a2,0x2
    80202360:	04460613          	addi	a2,a2,68 # 802043a0 <digits+0x340>
    80202364:	05400593          	li	a1,84
    80202368:	00002517          	auipc	a0,0x2
    8020236c:	fc050513          	addi	a0,a0,-64 # 80204328 <digits+0x2c8>
    80202370:	ffffe097          	auipc	ra,0xffffe
    80202374:	0d2080e7          	jalr	210(ra) # 80200442 <_panic_>
        trapDevice();
    80202378:	00000097          	auipc	ra,0x0
    8020237c:	d5c080e7          	jalr	-676(ra) # 802020d4 <trapDevice>
        yield();
    80202380:	00000097          	auipc	ra,0x0
    80202384:	894080e7          	jalr	-1900(ra) # 80201c14 <yield>
    80202388:	b7c9                	j	8020234a <userTrap+0x66>
    int hartId = r_hartid();
    8020238a:	0005849b          	sext.w	s1,a1
	asm volatile("csrr %0, stval" : "=r" (x) );
    8020238e:	143025f3          	csrr	a1,stval
            pa = pageLookup(currentProcess[hartId]->pgdir, r_stval(), &pte);
    80202392:	00349713          	slli	a4,s1,0x3
    80202396:	000e4797          	auipc	a5,0xe4
    8020239a:	08278793          	addi	a5,a5,130 # 802e6418 <currentProcess>
    8020239e:	97ba                	add	a5,a5,a4
    802023a0:	639c                	ld	a5,0(a5)
    802023a2:	fd840613          	addi	a2,s0,-40
    802023a6:	1307b503          	ld	a0,304(a5)
    802023aa:	fffff097          	auipc	ra,0xfffff
    802023ae:	e04080e7          	jalr	-508(ra) # 802011ae <pageLookup>
            if (pa == 0) {
    802023b2:	c905                	beqz	a0,802023e2 <userTrap+0xfe>
            } else if (*pte & PTE_COW) {
    802023b4:	fd843783          	ld	a5,-40(s0)
    802023b8:	639c                	ld	a5,0(a5)
    802023ba:	1007f793          	andi	a5,a5,256
    802023be:	c3b9                	beqz	a5,80202404 <userTrap+0x120>
    802023c0:	143025f3          	csrr	a1,stval
                cowHandler(currentProcess[hartId]->pgdir, r_stval());
    802023c4:	00349793          	slli	a5,s1,0x3
    802023c8:	000e4717          	auipc	a4,0xe4
    802023cc:	05070713          	addi	a4,a4,80 # 802e6418 <currentProcess>
    802023d0:	97ba                	add	a5,a5,a4
    802023d2:	639c                	ld	a5,0(a5)
    802023d4:	1307b503          	ld	a0,304(a5)
    802023d8:	fffff097          	auipc	ra,0xfffff
    802023dc:	03c080e7          	jalr	60(ra) # 80201414 <cowHandler>
    802023e0:	b7ad                	j	8020234a <userTrap+0x66>
    802023e2:	143025f3          	csrr	a1,stval
                pageout(currentProcess[hartId]->pgdir, r_stval());
    802023e6:	00349793          	slli	a5,s1,0x3
    802023ea:	000e4717          	auipc	a4,0xe4
    802023ee:	02e70713          	addi	a4,a4,46 # 802e6418 <currentProcess>
    802023f2:	97ba                	add	a5,a5,a4
    802023f4:	639c                	ld	a5,0(a5)
    802023f6:	1307b503          	ld	a0,304(a5)
    802023fa:	fffff097          	auipc	ra,0xfffff
    802023fe:	f48080e7          	jalr	-184(ra) # 80201342 <pageout>
    80202402:	b7a1                	j	8020234a <userTrap+0x66>
                panic("unknown");
    80202404:	00002617          	auipc	a2,0x2
    80202408:	fbc60613          	addi	a2,a2,-68 # 802043c0 <digits+0x360>
    8020240c:	07000593          	li	a1,112
    80202410:	00002517          	auipc	a0,0x2
    80202414:	f1850513          	addi	a0,a0,-232 # 80204328 <digits+0x2c8>
    80202418:	ffffe097          	auipc	ra,0xffffe
    8020241c:	02a080e7          	jalr	42(ra) # 80200442 <_panic_>
    80202420:	14302773          	csrr	a4,stval
            panic("unhandled error %d,  %lx\n", scause, r_stval());
    80202424:	00002617          	auipc	a2,0x2
    80202428:	fa460613          	addi	a2,a2,-92 # 802043c8 <digits+0x368>
    8020242c:	07400593          	li	a1,116
    80202430:	00002517          	auipc	a0,0x2
    80202434:	ef850513          	addi	a0,a0,-264 # 80204328 <digits+0x2c8>
    80202438:	ffffe097          	auipc	ra,0xffffe
    8020243c:	00a080e7          	jalr	10(ra) # 80200442 <_panic_>
	...

0000000080203000 <_trampoline>:
    80203000:	14051573          	csrrw	a0,sscratch,a0
    80203004:	02153423          	sd	ra,40(a0)
    80203008:	02253823          	sd	sp,48(a0)
    8020300c:	02353c23          	sd	gp,56(a0)
    80203010:	04453023          	sd	tp,64(a0)
    80203014:	04553423          	sd	t0,72(a0)
    80203018:	04653823          	sd	t1,80(a0)
    8020301c:	04753c23          	sd	t2,88(a0)
    80203020:	f120                	sd	s0,96(a0)
    80203022:	f524                	sd	s1,104(a0)
    80203024:	fd2c                	sd	a1,120(a0)
    80203026:	e150                	sd	a2,128(a0)
    80203028:	e554                	sd	a3,136(a0)
    8020302a:	e958                	sd	a4,144(a0)
    8020302c:	ed5c                	sd	a5,152(a0)
    8020302e:	0b053023          	sd	a6,160(a0)
    80203032:	0b153423          	sd	a7,168(a0)
    80203036:	0b253823          	sd	s2,176(a0)
    8020303a:	0b353c23          	sd	s3,184(a0)
    8020303e:	0d453023          	sd	s4,192(a0)
    80203042:	0d553423          	sd	s5,200(a0)
    80203046:	0d653823          	sd	s6,208(a0)
    8020304a:	0d753c23          	sd	s7,216(a0)
    8020304e:	0f853023          	sd	s8,224(a0)
    80203052:	0f953423          	sd	s9,232(a0)
    80203056:	0fa53823          	sd	s10,240(a0)
    8020305a:	0fb53c23          	sd	s11,248(a0)
    8020305e:	11c53023          	sd	t3,256(a0)
    80203062:	11d53423          	sd	t4,264(a0)
    80203066:	11e53823          	sd	t5,272(a0)
    8020306a:	11f53c23          	sd	t6,280(a0)
    8020306e:	140022f3          	csrr	t0,sscratch
    80203072:	06553823          	sd	t0,112(a0)
    80203076:	00853103          	ld	sp,8(a0)
    8020307a:	02053203          	ld	tp,32(a0)
    8020307e:	01053283          	ld	t0,16(a0)
    80203082:	14102373          	csrr	t1,sepc
    80203086:	00653c23          	sd	t1,24(a0)
    8020308a:	00053303          	ld	t1,0(a0)
    8020308e:	18031073          	csrw	satp,t1
    80203092:	12000073          	sfence.vma
    80203096:	8282                	jr	t0

0000000080203098 <userReturn>:
    80203098:	18059073          	csrw	satp,a1
    8020309c:	12000073          	sfence.vma
    802030a0:	07053283          	ld	t0,112(a0)
    802030a4:	14029073          	csrw	sscratch,t0
    802030a8:	01853303          	ld	t1,24(a0)
    802030ac:	14131073          	csrw	sepc,t1
    802030b0:	02853083          	ld	ra,40(a0)
    802030b4:	03053103          	ld	sp,48(a0)
    802030b8:	03853183          	ld	gp,56(a0)
    802030bc:	04053203          	ld	tp,64(a0)
    802030c0:	04853283          	ld	t0,72(a0)
    802030c4:	05053303          	ld	t1,80(a0)
    802030c8:	05853383          	ld	t2,88(a0)
    802030cc:	7120                	ld	s0,96(a0)
    802030ce:	7524                	ld	s1,104(a0)
    802030d0:	7d2c                	ld	a1,120(a0)
    802030d2:	6150                	ld	a2,128(a0)
    802030d4:	6554                	ld	a3,136(a0)
    802030d6:	6958                	ld	a4,144(a0)
    802030d8:	6d5c                	ld	a5,152(a0)
    802030da:	0a053803          	ld	a6,160(a0)
    802030de:	0a853883          	ld	a7,168(a0)
    802030e2:	0b053903          	ld	s2,176(a0)
    802030e6:	0b853983          	ld	s3,184(a0)
    802030ea:	0c053a03          	ld	s4,192(a0)
    802030ee:	0c853a83          	ld	s5,200(a0)
    802030f2:	0d053b03          	ld	s6,208(a0)
    802030f6:	0d853b83          	ld	s7,216(a0)
    802030fa:	0e053c03          	ld	s8,224(a0)
    802030fe:	0e853c83          	ld	s9,232(a0)
    80203102:	0f053d03          	ld	s10,240(a0)
    80203106:	0f853d83          	ld	s11,248(a0)
    8020310a:	10053e03          	ld	t3,256(a0)
    8020310e:	10853e83          	ld	t4,264(a0)
    80203112:	11053f03          	ld	t5,272(a0)
    80203116:	11853f83          	ld	t6,280(a0)
    8020311a:	14051573          	csrrw	a0,sscratch,a0
    8020311e:	10200073          	sret

0000000080203122 <trapframe>:
	...
