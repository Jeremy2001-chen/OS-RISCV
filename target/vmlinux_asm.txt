
target/vmlinux.img:     file format elf64-littleriscv


Disassembly of section .text:

0000000080200000 <_start>:
    80200000:	82aa                	mv	t0,a0
    80200002:	0285                	addi	t0,t0,1
    80200004:	02c2                	slli	t0,t0,0x10
    80200006:	00047117          	auipc	sp,0x47
    8020000a:	ffa10113          	addi	sp,sp,-6 # 80247000 <_stack>
    8020000e:	9116                	add	sp,sp,t0
    80200010:	006000ef          	jal	ra,80200016 <main>

0000000080200014 <loop>:
    80200014:	a001                	j	80200014 <loop>

0000000080200016 <main>:
    asm volatile("mv tp, %0" : : "r" (hartId & 0x7));
}

extern struct superblock *fat;

void main(u64 hartId) {
    80200016:	7179                	addi	sp,sp,-48
    80200018:	f406                	sd	ra,40(sp)
    8020001a:	f022                	sd	s0,32(sp)
    8020001c:	ec26                	sd	s1,24(sp)
    8020001e:	1800                	addi	s0,sp,48
    80200020:	84aa                	mv	s1,a0
    asm volatile("mv tp, %0" : : "r" (hartId & 0x7));
    80200022:	00757793          	andi	a5,a0,7
    80200026:	823e                	mv	tp,a5
    initHartId(hartId);

    if (mainCount == 1000) {
    80200028:	00097697          	auipc	a3,0x97
    8020002c:	fd86a683          	lw	a3,-40(a3) # 80297000 <mainCount>
    80200030:	3e800793          	li	a5,1000
        // PROCESS_CREATE_PRIORITY(ProcessIdTest, 4);
        PROCESS_CREATE_PRIORITY(ls, 1);
        // PROCESS_CREATE_PRIORITY(SysfileTest, 1);

    } else {
        while (initFinish == 0);
    80200034:	00098717          	auipc	a4,0x98
    80200038:	fcc70713          	addi	a4,a4,-52 # 80298000 <initFinish>
    if (mainCount == 1000) {
    8020003c:	04f68163          	beq	a3,a5,8020007e <main+0x68>
        while (initFinish == 0);
    80200040:	431c                	lw	a5,0(a4)
    80200042:	2781                	sext.w	a5,a5
    80200044:	dff5                	beqz	a5,80200040 <main+0x2a>
        __sync_synchronize();
    80200046:	0ff0000f          	fence

        printf("Hello, risc-v!\nCurrent hartId: %ld \n\n", hartId);
    8020004a:	85a6                	mv	a1,s1
    8020004c:	00009517          	auipc	a0,0x9
    80200050:	fdc50513          	addi	a0,a0,-36 # 80209028 <textEnd+0x28>
    80200054:	00000097          	auipc	ra,0x0
    80200058:	462080e7          	jalr	1122(ra) # 802004b6 <printf>

        startPage();
    8020005c:	00001097          	auipc	ra,0x1
    80200060:	e2e080e7          	jalr	-466(ra) # 80200e8a <startPage>
        trapInit();
    80200064:	00003097          	auipc	ra,0x3
    80200068:	080080e7          	jalr	128(ra) # 802030e4 <trapInit>
        //PROCESS_CREATE_PRIORITY(ForkTest, 1);
        //PROCESS_CREATE_PRIORITY(ProcessB, 3);
        //printf("Reach this place\n");
    }

    yield();
    8020006c:	00002097          	auipc	ra,0x2
    80200070:	7b0080e7          	jalr	1968(ra) # 8020281c <yield>
    80200074:	70a2                	ld	ra,40(sp)
    80200076:	7402                	ld	s0,32(sp)
    80200078:	64e2                	ld	s1,24(sp)
    8020007a:	6145                	addi	sp,sp,48
    8020007c:	8082                	ret
        for (u64 *i = bssStart; i < bssEnd; i++) {
    8020007e:	00098717          	auipc	a4,0x98
    80200082:	f8270713          	addi	a4,a4,-126 # 80298000 <initFinish>
    80200086:	001f1797          	auipc	a5,0x1f1
    8020008a:	f7a78793          	addi	a5,a5,-134 # 803f1000 <bssEnd>
    8020008e:	02f77063          	bgeu	a4,a5,802000ae <main+0x98>
    80200092:	87ba                	mv	a5,a4
    80200094:	001f1717          	auipc	a4,0x1f1
    80200098:	f6b70713          	addi	a4,a4,-149 # 803f0fff <_pgdir+0xfff>
    8020009c:	8f1d                	sub	a4,a4,a5
    8020009e:	9b61                	andi	a4,a4,-8
    802000a0:	0721                	addi	a4,a4,8
    802000a2:	973e                	add	a4,a4,a5
            *i = 0;
    802000a4:	0007b023          	sd	zero,0(a5)
        for (u64 *i = bssStart; i < bssEnd; i++) {
    802000a8:	07a1                	addi	a5,a5,8
    802000aa:	fee79de3          	bne	a5,a4,802000a4 <main+0x8e>
        mainCount = mainCount + 1;
    802000ae:	00097717          	auipc	a4,0x97
    802000b2:	f5270713          	addi	a4,a4,-174 # 80297000 <mainCount>
    802000b6:	431c                	lw	a5,0(a4)
    802000b8:	2785                	addiw	a5,a5,1
    802000ba:	c31c                	sw	a5,0(a4)
        consoleInit();
    802000bc:	00000097          	auipc	ra,0x0
    802000c0:	0d6080e7          	jalr	214(ra) # 80200192 <consoleInit>
        printLockInit();
    802000c4:	00000097          	auipc	ra,0x0
    802000c8:	3ca080e7          	jalr	970(ra) # 8020048e <printLockInit>
        pageLockInit();
    802000cc:	00001097          	auipc	ra,0x1
    802000d0:	40a080e7          	jalr	1034(ra) # 802014d6 <pageLockInit>
        printf("Hello, risc-v!\nBoot hartId: %ld \n\n", hartId);
    802000d4:	85a6                	mv	a1,s1
    802000d6:	00009517          	auipc	a0,0x9
    802000da:	f2a50513          	addi	a0,a0,-214 # 80209000 <textEnd>
    802000de:	00000097          	auipc	ra,0x0
    802000e2:	3d8080e7          	jalr	984(ra) # 802004b6 <printf>
        memoryInit();
    802000e6:	00001097          	auipc	ra,0x1
    802000ea:	dc8080e7          	jalr	-568(ra) # 80200eae <memoryInit>
        processInit();
    802000ee:	00002097          	auipc	ra,0x2
    802000f2:	0d8080e7          	jalr	216(ra) # 802021c6 <processInit>
        sdInit();
    802000f6:	00001097          	auipc	ra,0x1
    802000fa:	a7a080e7          	jalr	-1414(ra) # 80200b70 <sdInit>
        binit();
    802000fe:	00004097          	auipc	ra,0x4
    80200102:	ac6080e7          	jalr	-1338(ra) # 80203bc4 <binit>
        fileinit();
    80200106:	00006097          	auipc	ra,0x6
    8020010a:	8d4080e7          	jalr	-1836(ra) # 802059da <fileinit>
    8020010e:	4785                	li	a5,1
                unsigned long mask = 1 << i;
    80200110:	4f85                	li	t6,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    return a0;
}

inline void setMode(int hartId) {
	register u64 a7 asm ("a7") = 0x48534D;
    80200112:	00485eb7          	lui	t4,0x485
    80200116:	34de8e93          	addi	t4,t4,845 # 48534d <_start-0x7fd7acb3>
	register u64 a0 asm ("a0") = hartId;
	register u64 a1 asm ("a1") = 0x80200000;
    8020011a:	40100e13          	li	t3,1025
    8020011e:	0e56                	slli	t3,t3,0x15
	register u64 a2 asm ("a2") = 19260817; // priv
    80200120:	0125e337          	lui	t1,0x125e
    80200124:	59130313          	addi	t1,t1,1425 # 125e591 <_start-0x7efa1a6f>
        for (int i = 1; i < 5; ++ i) {
    80200128:	4f15                	li	t5,5
    8020012a:	a021                	j	80200132 <main+0x11c>
    8020012c:	0785                	addi	a5,a5,1
    8020012e:	03e78a63          	beq	a5,t5,80200162 <main+0x14c>
    80200132:	0007871b          	sext.w	a4,a5
            if (i != hartId) {
    80200136:	fe978be3          	beq	a5,s1,8020012c <main+0x116>
                unsigned long mask = 1 << i;
    8020013a:	00ef973b          	sllw	a4,t6,a4
    8020013e:	fce43c23          	sd	a4,-40(s0)
	register u64 a7 asm ("a7") = 0x48534D;
    80200142:	88f6                	mv	a7,t4
	register u64 a0 asm ("a0") = hartId;
    80200144:	853e                	mv	a0,a5
	register u64 a1 asm ("a1") = 0x80200000;
    80200146:	85f2                	mv	a1,t3
	register u64 a2 asm ("a2") = 19260817; // priv
    80200148:	861a                	mv	a2,t1
	register u64 a6 asm ("a6") = 0; // funcid
    8020014a:	4801                	li	a6,0
	asm volatile ("ecall" : "+r" (a0) : "r"(a0), "r"(a1), "r"(a2), "r"(a6), "r" (a7) : "memory");
    8020014c:	00000073          	ecall
		SBI_CALL(which, arg0, arg1, arg2, 0)
#define SBI_CALL_4(which, arg0, arg1, arg2, arg3) \
		SBI_CALL(which, arg0, arg1, arg2, arg3)

static inline void sbi_send_ipi(const unsigned long* hart_mask) {
    SBI_CALL_1(SBI_SEND_IPI, hart_mask);
    80200150:	fd840513          	addi	a0,s0,-40
    80200154:	4581                	li	a1,0
    80200156:	4601                	li	a2,0
    80200158:	4681                	li	a3,0
    8020015a:	4891                	li	a7,4
    8020015c:	00000073          	ecall
    80200160:	b7f1                	j	8020012c <main+0x116>
        trapInit();
    80200162:	00003097          	auipc	ra,0x3
    80200166:	f82080e7          	jalr	-126(ra) # 802030e4 <trapInit>
        __sync_synchronize();     
    8020016a:	0ff0000f          	fence
        initFinish = 0;
    8020016e:	00098797          	auipc	a5,0x98
    80200172:	e807a923          	sw	zero,-366(a5) # 80298000 <initFinish>
        PROCESS_CREATE_PRIORITY(ls, 1);
    80200176:	4605                	li	a2,1
    80200178:	00097597          	auipc	a1,0x97
    8020017c:	eac5a583          	lw	a1,-340(a1) # 80297024 <binarylsSize>
    80200180:	0003c517          	auipc	a0,0x3c
    80200184:	10050513          	addi	a0,a0,256 # 8023c280 <binarylsStart>
    80200188:	00002097          	auipc	ra,0x2
    8020018c:	40e080e7          	jalr	1038(ra) # 80202596 <processCreatePriority>
    80200190:	bdf1                	j	8020006c <main+0x56>

0000000080200192 <consoleInit>:
#include <Type.h>
#include <Driver.h>

void consoleInit() {
    80200192:	1141                	addi	sp,sp,-16
    80200194:	e422                	sd	s0,8(sp)
    80200196:	0800                	addi	s0,sp,16
    // todo
}
    80200198:	6422                	ld	s0,8(sp)
    8020019a:	0141                	addi	sp,sp,16
    8020019c:	8082                	ret

000000008020019e <consoleInterrupt>:

void consoleInterrupt(int c) {
    8020019e:	1141                	addi	sp,sp,-16
    802001a0:	e422                	sd	s0,8(sp)
    802001a2:	0800                	addi	s0,sp,16
    // todo

    802001a4:	6422                	ld	s0,8(sp)
    802001a6:	0141                	addi	sp,sp,16
    802001a8:	8082                	ret

00000000802001aa <print>:

static void print(const char *fmt, va_list ap) {
    int i, c;
    char *s;

    for (i = 0; fmt[i]; i++) {
    802001aa:	00054783          	lbu	a5,0(a0)
    802001ae:	2c078f63          	beqz	a5,8020048c <print+0x2e2>
static void print(const char *fmt, va_list ap) {
    802001b2:	711d                	addi	sp,sp,-96
    802001b4:	eca2                	sd	s0,88(sp)
    802001b6:	e8a6                	sd	s1,80(sp)
    802001b8:	e4ca                	sd	s2,72(sp)
    802001ba:	e0ce                	sd	s3,64(sp)
    802001bc:	fc52                	sd	s4,56(sp)
    802001be:	f856                	sd	s5,48(sp)
    802001c0:	f45a                	sd	s6,40(sp)
    802001c2:	f05e                	sd	s7,32(sp)
    802001c4:	1080                	addi	s0,sp,96
    802001c6:	882a                	mv	a6,a0
    for (i = 0; fmt[i]; i++) {
    802001c8:	86aa                	mv	a3,a0
    802001ca:	4701                	li	a4,0
        if (fmt[i] != '%'){
    802001cc:	02500313          	li	t1,37
            putchar(fmt[i]);
            continue;
        }
        c = fmt[++i];
        bool l = false;
        if (c == 'l') {
    802001d0:	06c00913          	li	s2,108
            l = true;
            c = fmt[++i];
        }
        switch (c) {
    802001d4:	06400e93          	li	t4,100
        bool l = false;
    802001d8:	4981                	li	s3,0
        buf[i++] = digits[x % base];
    802001da:	00009e17          	auipc	t3,0x9
    802001de:	ec6e0e13          	addi	t3,t3,-314 # 802090a0 <digits>
    802001e2:	4629                	li	a2,10
    } while((x /= base) != 0);
    802001e4:	4fa5                	li	t6,9
        buf[i++] = '-';
    802001e6:	02d00a13          	li	s4,45
        switch (c) {
    802001ea:	07300493          	li	s1,115
    while (*s) {
    802001ee:	02800a93          	li	s5,40
        switch (c) {
    802001f2:	07800393          	li	t2,120
    } while((x /= base) != 0);
    802001f6:	4f3d                	li	t5,15
        switch (c) {
    802001f8:	06300293          	li	t0,99
    802001fc:	a00d                	j	8020021e <print+0x74>
            if (fmt[i] == '\n') {
    802001fe:	0ac78063          	beq	a5,a2,8020029e <print+0xf4>
#define SBI_REMOTE_SFENCE_VMA 6
#define SBI_REMOTE_SFENCE_VMA_ASID 7
#define SBI_SHUTDOWN 8

inline void putchar(char c) {
    register u64 a0 asm ("a0") = (u64) c;
    80200202:	0006c503          	lbu	a0,0(a3)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    80200206:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80200208:	00000073          	ecall
            continue;
    8020020c:	86ba                	mv	a3,a4
    for (i = 0; fmt[i]; i++) {
    8020020e:	0016871b          	addiw	a4,a3,1
    80200212:	00e806b3          	add	a3,a6,a4
    80200216:	0006c783          	lbu	a5,0(a3)
    8020021a:	24078f63          	beqz	a5,80200478 <print+0x2ce>
        if (fmt[i] != '%'){
    8020021e:	fe6790e3          	bne	a5,t1,802001fe <print+0x54>
        c = fmt[++i];
    80200222:	0017069b          	addiw	a3,a4,1
    80200226:	00d807b3          	add	a5,a6,a3
    8020022a:	0007c783          	lbu	a5,0(a5)
        if (c == 'l') {
    8020022e:	07278d63          	beq	a5,s2,802002a8 <print+0xfe>
        switch (c) {
    80200232:	11d78d63          	beq	a5,t4,8020034c <print+0x1a2>
        bool l = false;
    80200236:	874e                	mv	a4,s3
        switch (c) {
    80200238:	08fed263          	bge	t4,a5,802002bc <print+0x112>
    8020023c:	1c978f63          	beq	a5,s1,8020041a <print+0x270>
    80200240:	22779363          	bne	a5,t2,80200466 <print+0x2bc>
                } else {
                    printInt((i64) va_arg(ap, i32), 10, true);
                }
                break;
            case 'x':
                if (l) {
    80200244:	16070f63          	beqz	a4,802003c2 <print+0x218>
                    printInt(va_arg(ap, u64), 16, false);
    80200248:	00858b13          	addi	s6,a1,8
    8020024c:	619c                	ld	a5,0(a1)
    8020024e:	fa040513          	addi	a0,s0,-96
    i = 0;
    80200252:	85ce                	mv	a1,s3
        buf[i++] = digits[x % base];
    80200254:	88ae                	mv	a7,a1
    80200256:	2585                	addiw	a1,a1,1
    80200258:	00f7f713          	andi	a4,a5,15
    8020025c:	9772                	add	a4,a4,t3
    8020025e:	00074703          	lbu	a4,0(a4)
    80200262:	00e50023          	sb	a4,0(a0)
    } while((x /= base) != 0);
    80200266:	873e                	mv	a4,a5
    80200268:	8391                	srli	a5,a5,0x4
    8020026a:	0505                	addi	a0,a0,1
    8020026c:	feef64e3          	bltu	t5,a4,80200254 <print+0xaa>
    while (--i >= 0) {
    80200270:	0208c563          	bltz	a7,8020029a <print+0xf0>
    80200274:	fa040793          	addi	a5,s0,-96
    80200278:	97c6                	add	a5,a5,a7
    8020027a:	f9f40713          	addi	a4,s0,-97
    8020027e:	9746                	add	a4,a4,a7
    80200280:	1882                	slli	a7,a7,0x20
    80200282:	0208d893          	srli	a7,a7,0x20
    80200286:	41170733          	sub	a4,a4,a7
    register u64 a0 asm ("a0") = (u64) c;
    8020028a:	0007c503          	lbu	a0,0(a5)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    8020028e:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80200290:	00000073          	ecall
    80200294:	17fd                	addi	a5,a5,-1
    80200296:	fee79ae3          	bne	a5,a4,8020028a <print+0xe0>
                    printInt(va_arg(ap, u64), 16, false);
    8020029a:	85da                	mv	a1,s6
}
    8020029c:	bf8d                	j	8020020e <print+0x64>
    register u64 a0 asm ("a0") = (u64) c;
    8020029e:	4535                	li	a0,13
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    802002a0:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    802002a2:	00000073          	ecall
};
    802002a6:	bfb1                	j	80200202 <print+0x58>
            c = fmt[++i];
    802002a8:	0027069b          	addiw	a3,a4,2
    802002ac:	00d807b3          	add	a5,a6,a3
    802002b0:	0007c783          	lbu	a5,0(a5)
        switch (c) {
    802002b4:	03d78163          	beq	a5,t4,802002d6 <print+0x12c>
            l = true;
    802002b8:	4705                	li	a4,1
    802002ba:	bfbd                	j	80200238 <print+0x8e>
        switch (c) {
    802002bc:	1a678063          	beq	a5,t1,8020045c <print+0x2b2>
    802002c0:	1a579363          	bne	a5,t0,80200466 <print+0x2bc>
                putchar(va_arg(ap, u32));
    802002c4:	00858793          	addi	a5,a1,8
    register u64 a0 asm ("a0") = (u64) c;
    802002c8:	0005c503          	lbu	a0,0(a1)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    802002cc:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    802002ce:	00000073          	ecall
    802002d2:	85be                	mv	a1,a5
};
    802002d4:	bf2d                	j	8020020e <print+0x64>
                    printInt(va_arg(ap, i64), 10, true);
    802002d6:	00858b13          	addi	s6,a1,8
    802002da:	0005bb83          	ld	s7,0(a1)
        x = -xx;
    802002de:	43fbd713          	srai	a4,s7,0x3f
    802002e2:	017747b3          	xor	a5,a4,s7
    802002e6:	8f99                	sub	a5,a5,a4
        bool l = false;
    802002e8:	fa040513          	addi	a0,s0,-96
    802002ec:	85ce                	mv	a1,s3
        buf[i++] = digits[x % base];
    802002ee:	88ae                	mv	a7,a1
    802002f0:	2585                	addiw	a1,a1,1
    802002f2:	02c7f733          	remu	a4,a5,a2
    802002f6:	9772                	add	a4,a4,t3
    802002f8:	00074703          	lbu	a4,0(a4)
    802002fc:	00e50023          	sb	a4,0(a0)
    } while((x /= base) != 0);
    80200300:	873e                	mv	a4,a5
    80200302:	02c7d7b3          	divu	a5,a5,a2
    80200306:	0505                	addi	a0,a0,1
    80200308:	feefe3e3          	bltu	t6,a4,802002ee <print+0x144>
    if (sign) {
    8020030c:	000bda63          	bgez	s7,80200320 <print+0x176>
        buf[i++] = '-';
    80200310:	fc058793          	addi	a5,a1,-64
    80200314:	008785b3          	add	a1,a5,s0
    80200318:	ff458023          	sb	s4,-32(a1)
    8020031c:	0028859b          	addiw	a1,a7,2
    while (--i >= 0) {
    80200320:	02b05463          	blez	a1,80200348 <print+0x19e>
    80200324:	fa040793          	addi	a5,s0,-96
    80200328:	97ae                	add	a5,a5,a1
    8020032a:	f9f40713          	addi	a4,s0,-97
    8020032e:	972e                	add	a4,a4,a1
    80200330:	35fd                	addiw	a1,a1,-1
    80200332:	1582                	slli	a1,a1,0x20
    80200334:	9181                	srli	a1,a1,0x20
    80200336:	8f0d                	sub	a4,a4,a1
    register u64 a0 asm ("a0") = (u64) c;
    80200338:	fff7c503          	lbu	a0,-1(a5)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    8020033c:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    8020033e:	00000073          	ecall
    80200342:	17fd                	addi	a5,a5,-1
    80200344:	fee79ae3          	bne	a5,a4,80200338 <print+0x18e>
                    printInt(va_arg(ap, i64), 10, true);
    80200348:	85da                	mv	a1,s6
}
    8020034a:	b5d1                	j	8020020e <print+0x64>
                    printInt((i64) va_arg(ap, i32), 10, true);
    8020034c:	00858b13          	addi	s6,a1,8
    80200350:	419c                	lw	a5,0(a1)
    80200352:	8bbe                	mv	s7,a5
        x = -xx;
    80200354:	43f7d713          	srai	a4,a5,0x3f
    80200358:	8fb9                	xor	a5,a5,a4
    8020035a:	8f99                	sub	a5,a5,a4
        buf[i++] = '-';
    8020035c:	fa040513          	addi	a0,s0,-96
    80200360:	874e                	mv	a4,s3
        buf[i++] = digits[x % base];
    80200362:	88ba                	mv	a7,a4
    80200364:	2705                	addiw	a4,a4,1
    80200366:	02c7f5b3          	remu	a1,a5,a2
    8020036a:	95f2                	add	a1,a1,t3
    8020036c:	0005c583          	lbu	a1,0(a1)
    80200370:	00b50023          	sb	a1,0(a0)
    } while((x /= base) != 0);
    80200374:	85be                	mv	a1,a5
    80200376:	02c7d7b3          	divu	a5,a5,a2
    8020037a:	0505                	addi	a0,a0,1
    8020037c:	febfe3e3          	bltu	t6,a1,80200362 <print+0x1b8>
    if (sign) {
    80200380:	000bda63          	bgez	s7,80200394 <print+0x1ea>
        buf[i++] = '-';
    80200384:	fc070793          	addi	a5,a4,-64
    80200388:	00878733          	add	a4,a5,s0
    8020038c:	ff470023          	sb	s4,-32(a4)
    80200390:	0028871b          	addiw	a4,a7,2
    while (--i >= 0) {
    80200394:	02e05563          	blez	a4,802003be <print+0x214>
    80200398:	fa040793          	addi	a5,s0,-96
    8020039c:	97ba                	add	a5,a5,a4
    8020039e:	f9f40593          	addi	a1,s0,-97
    802003a2:	95ba                	add	a1,a1,a4
    802003a4:	377d                	addiw	a4,a4,-1
    802003a6:	1702                	slli	a4,a4,0x20
    802003a8:	9301                	srli	a4,a4,0x20
    802003aa:	40e58733          	sub	a4,a1,a4
    register u64 a0 asm ("a0") = (u64) c;
    802003ae:	fff7c503          	lbu	a0,-1(a5)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    802003b2:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    802003b4:	00000073          	ecall
    802003b8:	17fd                	addi	a5,a5,-1
    802003ba:	fef71ae3          	bne	a4,a5,802003ae <print+0x204>
                    printInt((i64) va_arg(ap, i32), 10, true);
    802003be:	85da                	mv	a1,s6
}
    802003c0:	b5b9                	j	8020020e <print+0x64>
                } else {
                    printInt((u64) va_arg(ap, u32), 16, false);
    802003c2:	00858b13          	addi	s6,a1,8
        x = xx;
    802003c6:	0005e783          	lwu	a5,0(a1)
    802003ca:	fa040513          	addi	a0,s0,-96
    i = 0;
    802003ce:	85ce                	mv	a1,s3
        buf[i++] = digits[x % base];
    802003d0:	88ae                	mv	a7,a1
    802003d2:	2585                	addiw	a1,a1,1
    802003d4:	00f7f713          	andi	a4,a5,15
    802003d8:	9772                	add	a4,a4,t3
    802003da:	00074703          	lbu	a4,0(a4)
    802003de:	00e50023          	sb	a4,0(a0)
    } while((x /= base) != 0);
    802003e2:	873e                	mv	a4,a5
    802003e4:	8391                	srli	a5,a5,0x4
    802003e6:	0505                	addi	a0,a0,1
    802003e8:	feef64e3          	bltu	t5,a4,802003d0 <print+0x226>
    while (--i >= 0) {
    802003ec:	0208c563          	bltz	a7,80200416 <print+0x26c>
    802003f0:	fa040793          	addi	a5,s0,-96
    802003f4:	97c6                	add	a5,a5,a7
    802003f6:	f9f40713          	addi	a4,s0,-97
    802003fa:	9746                	add	a4,a4,a7
    802003fc:	1882                	slli	a7,a7,0x20
    802003fe:	0208d893          	srli	a7,a7,0x20
    80200402:	41170733          	sub	a4,a4,a7
    register u64 a0 asm ("a0") = (u64) c;
    80200406:	0007c503          	lbu	a0,0(a5)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    8020040a:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    8020040c:	00000073          	ecall
    80200410:	17fd                	addi	a5,a5,-1
    80200412:	fee79ae3          	bne	a5,a4,80200406 <print+0x25c>
                    printInt((u64) va_arg(ap, u32), 16, false);
    80200416:	85da                	mv	a1,s6
}
    80200418:	bbdd                	j	8020020e <print+0x64>
                }
                break;
            case 's':
                if ((s = va_arg(ap, char*)) == 0) {
    8020041a:	00858b13          	addi	s6,a1,8
    8020041e:	619c                	ld	a5,0(a1)
    80200420:	c791                	beqz	a5,8020042c <print+0x282>
    while (*s) {
    80200422:	0007c703          	lbu	a4,0(a5)
    80200426:	e315                	bnez	a4,8020044a <print+0x2a0>
                if ((s = va_arg(ap, char*)) == 0) {
    80200428:	85da                	mv	a1,s6
    8020042a:	b3d5                	j	8020020e <print+0x64>
                    s = "(null)";
    8020042c:	00009797          	auipc	a5,0x9
    80200430:	c2478793          	addi	a5,a5,-988 # 80209050 <textEnd+0x50>
    while (*s) {
    80200434:	8756                	mv	a4,s5
    80200436:	a811                	j	8020044a <print+0x2a0>
        putchar(*s++);
    80200438:	0785                	addi	a5,a5,1
    register u64 a0 asm ("a0") = (u64) c;
    8020043a:	fff7c503          	lbu	a0,-1(a5)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    8020043e:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80200440:	00000073          	ecall
    while (*s) {
    80200444:	0007c703          	lbu	a4,0(a5)
    80200448:	cb01                	beqz	a4,80200458 <print+0x2ae>
        if (*s == '\n') {
    8020044a:	fec717e3          	bne	a4,a2,80200438 <print+0x28e>
    register u64 a0 asm ("a0") = (u64) c;
    8020044e:	4535                	li	a0,13
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    80200450:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80200452:	00000073          	ecall
};
    80200456:	b7cd                	j	80200438 <print+0x28e>
                if ((s = va_arg(ap, char*)) == 0) {
    80200458:	85da                	mv	a1,s6
    8020045a:	bb55                	j	8020020e <print+0x64>
    register u64 a0 asm ("a0") = (u64) c;
    8020045c:	851a                	mv	a0,t1
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    8020045e:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80200460:	00000073          	ecall
};
    80200464:	b36d                	j	8020020e <print+0x64>
    register u64 a0 asm ("a0") = (u64) c;
    80200466:	851a                	mv	a0,t1
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    80200468:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    8020046a:	00000073          	ecall
    register u64 a0 asm ("a0") = (u64) c;
    8020046e:	0ff7f513          	zext.b	a0,a5
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80200472:	00000073          	ecall
};
    80200476:	bb61                	j	8020020e <print+0x64>
                putchar('%');
                putchar(c);
                break;
        }
    }
}
    80200478:	6466                	ld	s0,88(sp)
    8020047a:	64c6                	ld	s1,80(sp)
    8020047c:	6926                	ld	s2,72(sp)
    8020047e:	6986                	ld	s3,64(sp)
    80200480:	7a62                	ld	s4,56(sp)
    80200482:	7ac2                	ld	s5,48(sp)
    80200484:	7b22                	ld	s6,40(sp)
    80200486:	7b82                	ld	s7,32(sp)
    80200488:	6125                	addi	sp,sp,96
    8020048a:	8082                	ret
    8020048c:	8082                	ret

000000008020048e <printLockInit>:
inline void printLockInit(void) {
    8020048e:	1141                	addi	sp,sp,-16
    80200490:	e406                	sd	ra,8(sp)
    80200492:	e022                	sd	s0,0(sp)
    80200494:	0800                	addi	s0,sp,16
    initLock(&printLock, "printLock");
    80200496:	00009597          	auipc	a1,0x9
    8020049a:	bc258593          	addi	a1,a1,-1086 # 80209058 <textEnd+0x58>
    8020049e:	00098517          	auipc	a0,0x98
    802004a2:	b6a50513          	addi	a0,a0,-1174 # 80298008 <printLock>
    802004a6:	00003097          	auipc	ra,0x3
    802004aa:	3c2080e7          	jalr	962(ra) # 80203868 <initLock>
}
    802004ae:	60a2                	ld	ra,8(sp)
    802004b0:	6402                	ld	s0,0(sp)
    802004b2:	0141                	addi	sp,sp,16
    802004b4:	8082                	ret

00000000802004b6 <printf>:

void printf(const char *fmt, ...) {
    802004b6:	7159                	addi	sp,sp,-112
    802004b8:	f406                	sd	ra,40(sp)
    802004ba:	f022                	sd	s0,32(sp)
    802004bc:	ec26                	sd	s1,24(sp)
    802004be:	e84a                	sd	s2,16(sp)
    802004c0:	1800                	addi	s0,sp,48
    802004c2:	84aa                	mv	s1,a0
    802004c4:	e40c                	sd	a1,8(s0)
    802004c6:	e810                	sd	a2,16(s0)
    802004c8:	ec14                	sd	a3,24(s0)
    802004ca:	f018                	sd	a4,32(s0)
    802004cc:	f41c                	sd	a5,40(s0)
    802004ce:	03043823          	sd	a6,48(s0)
    802004d2:	03143c23          	sd	a7,56(s0)
    acquireLock(&printLock);
    802004d6:	00098917          	auipc	s2,0x98
    802004da:	b3290913          	addi	s2,s2,-1230 # 80298008 <printLock>
    802004de:	854a                	mv	a0,s2
    802004e0:	00003097          	auipc	ra,0x3
    802004e4:	3d2080e7          	jalr	978(ra) # 802038b2 <acquireLock>
    // printString("[hart is : ");
    // printInt(r_hartid(), 10, 0);
    // printString("]");
    va_list ap;
    va_start(ap, fmt);
    802004e8:	00840593          	addi	a1,s0,8
    802004ec:	fcb43c23          	sd	a1,-40(s0)
    print(fmt, ap);
    802004f0:	8526                	mv	a0,s1
    802004f2:	00000097          	auipc	ra,0x0
    802004f6:	cb8080e7          	jalr	-840(ra) # 802001aa <print>
    va_end(ap);
    releaseLock(&printLock);
    802004fa:	854a                	mv	a0,s2
    802004fc:	00003097          	auipc	ra,0x3
    80200500:	41a080e7          	jalr	1050(ra) # 80203916 <releaseLock>
}
    80200504:	70a2                	ld	ra,40(sp)
    80200506:	7402                	ld	s0,32(sp)
    80200508:	64e2                	ld	s1,24(sp)
    8020050a:	6942                	ld	s2,16(sp)
    8020050c:	6165                	addi	sp,sp,112
    8020050e:	8082                	ret

0000000080200510 <panicPrintf>:

void panicPrintf(const char *fmt, ...) {
    80200510:	711d                	addi	sp,sp,-96
    80200512:	ec06                	sd	ra,24(sp)
    80200514:	e822                	sd	s0,16(sp)
    80200516:	1000                	addi	s0,sp,32
    80200518:	e40c                	sd	a1,8(s0)
    8020051a:	e810                	sd	a2,16(s0)
    8020051c:	ec14                	sd	a3,24(s0)
    8020051e:	f018                	sd	a4,32(s0)
    80200520:	f41c                	sd	a5,40(s0)
    80200522:	03043823          	sd	a6,48(s0)
    80200526:	03143c23          	sd	a7,56(s0)
    va_list ap;
    va_start(ap, fmt);
    8020052a:	00840593          	addi	a1,s0,8
    8020052e:	feb43423          	sd	a1,-24(s0)
    print(fmt, ap);
    80200532:	00000097          	auipc	ra,0x0
    80200536:	c78080e7          	jalr	-904(ra) # 802001aa <print>
    va_end(ap);
}
    8020053a:	60e2                	ld	ra,24(sp)
    8020053c:	6442                	ld	s0,16(sp)
    8020053e:	6125                	addi	sp,sp,96
    80200540:	8082                	ret

0000000080200542 <_panic_>:

void _panic_(const char *file, int line, const char *func,const char *fmt, ...) {
    80200542:	7159                	addi	sp,sp,-112
    80200544:	e486                	sd	ra,72(sp)
    80200546:	e0a2                	sd	s0,64(sp)
    80200548:	fc26                	sd	s1,56(sp)
    8020054a:	f84a                	sd	s2,48(sp)
    8020054c:	f44e                	sd	s3,40(sp)
    8020054e:	f052                	sd	s4,32(sp)
    80200550:	ec56                	sd	s5,24(sp)
    80200552:	0880                	addi	s0,sp,80
    80200554:	892a                	mv	s2,a0
    80200556:	89ae                	mv	s3,a1
    80200558:	8a32                	mv	s4,a2
    8020055a:	84b6                	mv	s1,a3
    8020055c:	e018                	sd	a4,0(s0)
    8020055e:	e41c                	sd	a5,8(s0)
    80200560:	01043823          	sd	a6,16(s0)
    80200564:	01143c23          	sd	a7,24(s0)
    acquireLock(&printLock);
    80200568:	00098a97          	auipc	s5,0x98
    8020056c:	aa0a8a93          	addi	s5,s5,-1376 # 80298008 <printLock>
    80200570:	8556                	mv	a0,s5
    80200572:	00003097          	auipc	ra,0x3
    80200576:	340080e7          	jalr	832(ra) # 802038b2 <acquireLock>
#define HART_TOTAL_NUMBER 5

// which hart (core) is this?
static inline u64 r_hartid() {
    u64 x;
    asm volatile("mv %0, tp" : "=r" (x) );
    8020057a:	8592                	mv	a1,tp
    panicPrintf("hartId %d panic at %s: %d in %s(): ", r_hartid(), file, line, func);
    8020057c:	8752                	mv	a4,s4
    8020057e:	86ce                	mv	a3,s3
    80200580:	864a                	mv	a2,s2
    80200582:	00009517          	auipc	a0,0x9
    80200586:	ae650513          	addi	a0,a0,-1306 # 80209068 <textEnd+0x68>
    8020058a:	00000097          	auipc	ra,0x0
    8020058e:	f86080e7          	jalr	-122(ra) # 80200510 <panicPrintf>
    va_list ap;
    va_start(ap, fmt);
    80200592:	fa843c23          	sd	s0,-72(s0)
    print(fmt, ap);
    80200596:	85a2                	mv	a1,s0
    80200598:	8526                	mv	a0,s1
    8020059a:	00000097          	auipc	ra,0x0
    8020059e:	c10080e7          	jalr	-1008(ra) # 802001aa <print>
    register u64 a0 asm ("a0") = (u64) c;
    802005a2:	4529                	li	a0,10
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    802005a4:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    802005a6:	00000073          	ecall
    va_end(ap);
    putchar('\n');
    releaseLock(&printLock);
    802005aa:	8556                	mv	a0,s5
    802005ac:	00003097          	auipc	ra,0x3
    802005b0:	36a080e7          	jalr	874(ra) # 80203916 <releaseLock>
    //timerTick();
    //w_sstatus(r_sstatus() | SSTATUS_SIE);
    while (true);
    802005b4:	a001                	j	802005b4 <_panic_+0x72>

00000000802005b6 <_assert_>:
}

void _assert_(const char* file, int line, const char *func, int statement) {
    if (!statement) {
    802005b6:	c291                	beqz	a3,802005ba <_assert_+0x4>
    802005b8:	8082                	ret
void _assert_(const char* file, int line, const char *func, int statement) {
    802005ba:	1141                	addi	sp,sp,-16
    802005bc:	e406                	sd	ra,8(sp)
    802005be:	e022                	sd	s0,0(sp)
    802005c0:	0800                	addi	s0,sp,16
        _panic_(file, line, func, "assert failed\n");
    802005c2:	00009697          	auipc	a3,0x9
    802005c6:	ace68693          	addi	a3,a3,-1330 # 80209090 <textEnd+0x90>
    802005ca:	00000097          	auipc	ra,0x0
    802005ce:	f78080e7          	jalr	-136(ra) # 80200542 <_panic_>

00000000802005d2 <sd_cmd>:
{
	return spi_xfer(0xFF);
}

static u8 sd_cmd(u8 cmd, u32 arg, u8 crc)
{
    802005d2:	1101                	addi	sp,sp,-32
    802005d4:	ec06                	sd	ra,24(sp)
    802005d6:	e822                	sd	s0,16(sp)
    802005d8:	e426                	sd	s1,8(sp)
    802005da:	1000                	addi	s0,sp,32
	unsigned long n;
	u8 r;

	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_HOLD;
    802005dc:	100507b7          	lui	a5,0x10050
    802005e0:	4709                	li	a4,2
    802005e2:	cf98                	sw	a4,24(a5)
	REG32(spi, SPI_REG_TXFIFO) = d;
    802005e4:	0ff00713          	li	a4,255
    802005e8:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802005ea:	10050737          	lui	a4,0x10050
    802005ee:	477c                	lw	a5,76(a4)
	} while (r < 0);
    802005f0:	fe07cfe3          	bltz	a5,802005ee <sd_cmd+0x1c>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802005f4:	2501                	sext.w	a0,a0
    802005f6:	100507b7          	lui	a5,0x10050
    802005fa:	c7a8                	sw	a0,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802005fc:	10050737          	lui	a4,0x10050
    80200600:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200602:	fe07cfe3          	bltz	a5,80200600 <sd_cmd+0x2e>
	sd_dummy();
	spi_xfer(cmd);
	spi_xfer(arg >> 24);
    80200606:	0185d79b          	srliw	a5,a1,0x18
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020060a:	10050737          	lui	a4,0x10050
    8020060e:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200610:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200612:	fe07cfe3          	bltz	a5,80200610 <sd_cmd+0x3e>
	spi_xfer(arg >> 16);
    80200616:	0105d79b          	srliw	a5,a1,0x10
    8020061a:	0ff7f793          	zext.b	a5,a5
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020061e:	10050737          	lui	a4,0x10050
    80200622:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200624:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200626:	fe07cfe3          	bltz	a5,80200624 <sd_cmd+0x52>
	spi_xfer(arg >> 8);
    8020062a:	0085d79b          	srliw	a5,a1,0x8
    8020062e:	0ff7f793          	zext.b	a5,a5
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200632:	10050737          	lui	a4,0x10050
    80200636:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200638:	477c                	lw	a5,76(a4)
	} while (r < 0);
    8020063a:	fe07cfe3          	bltz	a5,80200638 <sd_cmd+0x66>
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020063e:	0ff5f593          	zext.b	a1,a1
    80200642:	100507b7          	lui	a5,0x10050
    80200646:	c7ac                	sw	a1,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200648:	10050737          	lui	a4,0x10050
    8020064c:	477c                	lw	a5,76(a4)
	} while (r < 0);
    8020064e:	fe07cfe3          	bltz	a5,8020064c <sd_cmd+0x7a>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200652:	0006079b          	sext.w	a5,a2
    80200656:	10050737          	lui	a4,0x10050
    8020065a:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020065c:	477c                	lw	a5,76(a4)
	} while (r < 0);
    8020065e:	fe07cfe3          	bltz	a5,8020065c <sd_cmd+0x8a>
    80200662:	3e800693          	li	a3,1000
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200666:	10050737          	lui	a4,0x10050
    8020066a:	04870593          	addi	a1,a4,72 # 10050048 <_start-0x701affb8>
    8020066e:	0ff00613          	li	a2,255
    80200672:	c190                	sw	a2,0(a1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200674:	477c                	lw	a5,76(a4)
    80200676:	0007849b          	sext.w	s1,a5
	} while (r < 0);
    8020067a:	fe07cde3          	bltz	a5,80200674 <sd_cmd+0xa2>
	spi_xfer(crc);

	n = 1000;
	do {
		r = sd_dummy();
		if (!(r & 0x80)) {
    8020067e:	0184979b          	slliw	a5,s1,0x18
    80200682:	4187d79b          	sraiw	a5,a5,0x18
    80200686:	0007dc63          	bgez	a5,8020069e <sd_cmd+0xcc>
			//printf("sd:cmd: %x\r\n", r);
			goto done;
		}
	} while (--n > 0);
    8020068a:	16fd                	addi	a3,a3,-1
    8020068c:	f2fd                	bnez	a3,80200672 <sd_cmd+0xa0>
	printf("sd_cmd: timeout\n");
    8020068e:	00009517          	auipc	a0,0x9
    80200692:	a2a50513          	addi	a0,a0,-1494 # 802090b8 <digits+0x18>
    80200696:	00000097          	auipc	ra,0x0
    8020069a:	e20080e7          	jalr	-480(ra) # 802004b6 <printf>
done:
	return (r & 0xFF);
}
    8020069e:	0ff4f513          	zext.b	a0,s1
    802006a2:	60e2                	ld	ra,24(sp)
    802006a4:	6442                	ld	s0,16(sp)
    802006a6:	64a2                	ld	s1,8(sp)
    802006a8:	6105                	addi	sp,sp,32
    802006aa:	8082                	ret

00000000802006ac <sd_cmd0>:
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
	//for (a = 0; a < 1000000; a++) a = a;
}

static int sd_cmd0(void)
{
    802006ac:	1141                	addi	sp,sp,-16
    802006ae:	e406                	sd	ra,8(sp)
    802006b0:	e022                	sd	s0,0(sp)
    802006b2:	0800                	addi	s0,sp,16
	int rc;
	//printf("CMD0");
	rc = (sd_cmd(0x40, 0, 0x95) != 0x01);
    802006b4:	09500613          	li	a2,149
    802006b8:	4581                	li	a1,0
    802006ba:	04000513          	li	a0,64
    802006be:	00000097          	auipc	ra,0x0
    802006c2:	f14080e7          	jalr	-236(ra) # 802005d2 <sd_cmd>
    802006c6:	2501                	sext.w	a0,a0
    802006c8:	157d                	addi	a0,a0,-1
    802006ca:	00a03533          	snez	a0,a0
	REG32(spi, SPI_REG_TXFIFO) = d;
    802006ce:	100507b7          	lui	a5,0x10050
    802006d2:	0ff00713          	li	a4,255
    802006d6:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802006d8:	10050737          	lui	a4,0x10050
    802006dc:	477c                	lw	a5,76(a4)
	} while (r < 0);
    802006de:	fe07cfe3          	bltz	a5,802006dc <sd_cmd0+0x30>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    802006e2:	100507b7          	lui	a5,0x10050
    802006e6:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	sd_cmd_end();
	return rc;
}
    802006ea:	60a2                	ld	ra,8(sp)
    802006ec:	6402                	ld	s0,0(sp)
    802006ee:	0141                	addi	sp,sp,16
    802006f0:	8082                	ret

00000000802006f2 <sdRead>:
#define SPIN_UPDATE(i)	(!((i) & ((1 << SPIN_SHIFT)-1)))
#define SPIN_INDEX(i)	(((i) >> SPIN_SHIFT) & 0x3)

//static const char spinner[] = { '-', '/', '|', '\\' };

int sdRead(u8 *buf, u64 startSector, u32 sectorNumber) {
    802006f2:	711d                	addi	sp,sp,-96
    802006f4:	ec86                	sd	ra,88(sp)
    802006f6:	e8a2                	sd	s0,80(sp)
    802006f8:	e4a6                	sd	s1,72(sp)
    802006fa:	e0ca                	sd	s2,64(sp)
    802006fc:	fc4e                	sd	s3,56(sp)
    802006fe:	f852                	sd	s4,48(sp)
    80200700:	f456                	sd	s5,40(sp)
    80200702:	f05a                	sd	s6,32(sp)
    80200704:	ec5e                	sd	s7,24(sp)
    80200706:	e862                	sd	s8,16(sp)
    80200708:	e466                	sd	s9,8(sp)
    8020070a:	1080                	addi	s0,sp,96
    8020070c:	8caa                	mv	s9,a0
    8020070e:	8c2e                	mv	s8,a1
    80200710:	8ab2                	mv	s5,a2
	DEC_PRINT(sectorNumber);
	printf("[SD Read]Read: %x\n", startSector);
    80200712:	00009517          	auipc	a0,0x9
    80200716:	9be50513          	addi	a0,a0,-1602 # 802090d0 <digits+0x30>
    8020071a:	00000097          	auipc	ra,0x0
    8020071e:	d9c080e7          	jalr	-612(ra) # 802004b6 <printf>
	int readTimes = 0;
    80200722:	4b01                	li	s6,0
	int timeout;
	u8 x;
	#ifdef QEMU
	if (sd_cmd(0x52, startSector * 512, 0xE1) != 0x00) {
	#else
	if (sd_cmd(0x52, startSector, 0xE1) != 0x00) {
    80200724:	2c01                	sext.w	s8,s8
		long n;

		crc = 0;
		n = 512;
		timeout = MAX_TIMES;
		while (timeout--) {
    80200726:	0fe00993          	li	s3,254
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020072a:	0ff00a13          	li	s4,255
    8020072e:	84d2                	mv	s1,s4
	crc ^= (crc & 0xff) << 5;
    80200730:	6909                	lui	s2,0x2
    80200732:	1901                	addi	s2,s2,-32
    80200734:	aa65                	j	802008ec <sdRead+0x1fa>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200736:	100507b7          	lui	a5,0x10050
    8020073a:	0ff00713          	li	a4,255
    8020073e:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200740:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200742:	fe074fe3          	bltz	a4,80200740 <sdRead+0x4e>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200746:	100507b7          	lui	a5,0x10050
    8020074a:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
		panic("[SD Read]Read Error, retry times %x\n", readTimes);
    8020074e:	875a                	mv	a4,s6
    80200750:	00009697          	auipc	a3,0x9
    80200754:	99868693          	addi	a3,a3,-1640 # 802090e8 <digits+0x48>
    80200758:	00009617          	auipc	a2,0x9
    8020075c:	4d060613          	addi	a2,a2,1232 # 80209c28 <__func__.1>
    80200760:	0b900593          	li	a1,185
    80200764:	00009517          	auipc	a0,0x9
    80200768:	9ac50513          	addi	a0,a0,-1620 # 80209110 <digits+0x70>
    8020076c:	00000097          	auipc	ra,0x0
    80200770:	dd6080e7          	jalr	-554(ra) # 80200542 <_panic_>
			x = sd_dummy();
			if (x == 0xFE)
				break;
		}

		if (!timeout) {
    80200774:	14068d63          	beqz	a3,802008ce <sdRead+0x1dc>
    80200778:	8746                	mv	a4,a7
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020077a:	04860513          	addi	a0,a2,72
    8020077e:	a011                	j	80200782 <sdRead+0x90>
			goto retry;
		}

		do {
			u8 x = sd_dummy();
			*p++ = x;
    80200780:	8e1a                	mv	t3,t1
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200782:	c104                	sw	s1,0(a0)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200784:	467c                	lw	a5,76(a2)
    80200786:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    8020078a:	fe07cde3          	bltz	a5,80200784 <sdRead+0x92>
	return (r & 0xFF);
    8020078e:	0ff6f693          	zext.b	a3,a3
			*p++ = x;
    80200792:	001e0313          	addi	t1,t3,1
    80200796:	00de0023          	sb	a3,0(t3)
	crc = (u8)(crc >> 8) | (crc << 8);
    8020079a:	0087579b          	srliw	a5,a4,0x8
    8020079e:	0087171b          	slliw	a4,a4,0x8
    802007a2:	8fd9                	or	a5,a5,a4
    802007a4:	17c2                	slli	a5,a5,0x30
    802007a6:	93c1                	srli	a5,a5,0x30
	crc ^= data;
    802007a8:	8fb5                	xor	a5,a5,a3
	crc ^= (u8)(crc >> 4) & 0xf;
    802007aa:	0047d71b          	srliw	a4,a5,0x4
    802007ae:	8b3d                	andi	a4,a4,15
    802007b0:	8f3d                	xor	a4,a4,a5
	crc ^= crc << 12;
    802007b2:	00c7179b          	slliw	a5,a4,0xc
    802007b6:	8f3d                	xor	a4,a4,a5
	crc ^= (crc & 0xff) << 5;
    802007b8:	0107179b          	slliw	a5,a4,0x10
    802007bc:	0107d79b          	srliw	a5,a5,0x10
    802007c0:	0057979b          	slliw	a5,a5,0x5
    802007c4:	00f977b3          	and	a5,s2,a5
    802007c8:	8f3d                	xor	a4,a4,a5
    802007ca:	1742                	slli	a4,a4,0x30
    802007cc:	9341                	srli	a4,a4,0x30
			crc = crc16_round(crc, x);
		} while (--n > 0);
    802007ce:	fab319e3          	bne	t1,a1,80200780 <sdRead+0x8e>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802007d2:	05462423          	sw	s4,72(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    802007d6:	467c                	lw	a5,76(a2)
    802007d8:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    802007dc:	fe07cde3          	bltz	a5,802007d6 <sdRead+0xe4>

		crc_exp = ((u16)sd_dummy() << 8);
    802007e0:	0ff6f693          	zext.b	a3,a3
    802007e4:	0086969b          	slliw	a3,a3,0x8
    802007e8:	16c2                	slli	a3,a3,0x30
    802007ea:	92c1                	srli	a3,a3,0x30
	REG32(spi, SPI_REG_TXFIFO) = d;
    802007ec:	05462423          	sw	s4,72(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    802007f0:	467c                	lw	a5,76(a2)
    802007f2:	0007851b          	sext.w	a0,a5
	} while (r < 0);
    802007f6:	fe07cde3          	bltz	a5,802007f0 <sdRead+0xfe>
		crc_exp |= sd_dummy();
    802007fa:	0ff57793          	zext.b	a5,a0

		if (crc != crc_exp) {
    802007fe:	8fd5                	or	a5,a5,a3
    80200800:	02e79b63          	bne	a5,a4,80200836 <sdRead+0x144>
			printf("\b- CRC mismatch ");
			rc = 1;
			break;
		}
	} while (--sectorNumber > 0);
    80200804:	3afd                	addiw	s5,s5,-1
    80200806:	20058593          	addi	a1,a1,512
    8020080a:	0a0a8f63          	beqz	s5,802008c8 <sdRead+0x1d6>
    8020080e:	e0058e13          	addi	t3,a1,-512
		while (timeout--) {
    80200812:	86ce                	mv	a3,s3
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200814:	04860513          	addi	a0,a2,72
    80200818:	c104                	sw	s1,0(a0)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020081a:	467c                	lw	a5,76(a2)
    8020081c:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    80200820:	fe07cde3          	bltz	a5,8020081a <sdRead+0x128>
			if (x == 0xFE)
    80200824:	0ff77713          	zext.b	a4,a4
    80200828:	f53706e3          	beq	a4,s3,80200774 <sdRead+0x82>
		while (timeout--) {
    8020082c:	36fd                	addiw	a3,a3,-1
    8020082e:	ff0695e3          	bne	a3,a6,80200818 <sdRead+0x126>
    80200832:	8746                	mv	a4,a7
    80200834:	b799                	j	8020077a <sdRead+0x88>
			printf("\b- CRC mismatch ");
    80200836:	00009517          	auipc	a0,0x9
    8020083a:	8e250513          	addi	a0,a0,-1822 # 80209118 <digits+0x78>
    8020083e:	00000097          	auipc	ra,0x0
    80200842:	c78080e7          	jalr	-904(ra) # 802004b6 <printf>
			rc = 1;
    80200846:	4b85                	li	s7,1
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200848:	100507b7          	lui	a5,0x10050
    8020084c:	0547a423          	sw	s4,72(a5) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    80200850:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200852:	fe074fe3          	bltz	a4,80200850 <sdRead+0x15e>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200856:	100507b7          	lui	a5,0x10050
    8020085a:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	sd_cmd_end();

	sd_cmd(0x4C, 0, 0x01);
    8020085e:	4605                	li	a2,1
    80200860:	4581                	li	a1,0
    80200862:	04c00513          	li	a0,76
    80200866:	00000097          	auipc	ra,0x0
    8020086a:	d6c080e7          	jalr	-660(ra) # 802005d2 <sd_cmd>
	timeout = MAX_TIMES;
	while (timeout--) {
    8020086e:	864e                	mv	a2,s3
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200870:	100506b7          	lui	a3,0x10050
    80200874:	04868513          	addi	a0,a3,72 # 10050048 <_start-0x701affb8>
	while (timeout--) {
    80200878:	55fd                	li	a1,-1
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020087a:	c104                	sw	s1,0(a0)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020087c:	46fc                	lw	a5,76(a3)
    8020087e:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    80200882:	fe07cde3          	bltz	a5,8020087c <sdRead+0x18a>
		x = sd_dummy();
		if (x == 0xFF) {
    80200886:	0ff77713          	zext.b	a4,a4
    8020088a:	05470163          	beq	a4,s4,802008cc <sdRead+0x1da>
	while (timeout--) {
    8020088e:	367d                	addiw	a2,a2,-1
    80200890:	feb615e3          	bne	a2,a1,8020087a <sdRead+0x188>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200894:	100507b7          	lui	a5,0x10050
    80200898:	0ff00713          	li	a4,255
    8020089c:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020089e:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    802008a0:	fe074fe3          	bltz	a4,8020089e <sdRead+0x1ac>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    802008a4:	100507b7          	lui	a5,0x10050
    802008a8:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	if (readTimes > 10) {
		panic("[SD Read]There must be some error in sd read");
	}
	sd_cmd_end();
	goto start;
}
    802008ac:	855e                	mv	a0,s7
    802008ae:	60e6                	ld	ra,88(sp)
    802008b0:	6446                	ld	s0,80(sp)
    802008b2:	64a6                	ld	s1,72(sp)
    802008b4:	6906                	ld	s2,64(sp)
    802008b6:	79e2                	ld	s3,56(sp)
    802008b8:	7a42                	ld	s4,48(sp)
    802008ba:	7aa2                	ld	s5,40(sp)
    802008bc:	7b02                	ld	s6,32(sp)
    802008be:	6be2                	ld	s7,24(sp)
    802008c0:	6c42                	ld	s8,16(sp)
    802008c2:	6ca2                	ld	s9,8(sp)
    802008c4:	6125                	addi	sp,sp,96
    802008c6:	8082                	ret
	int rc = 0;
    802008c8:	4b81                	li	s7,0
    802008ca:	bfbd                	j	80200848 <sdRead+0x156>
	if (!timeout) {
    802008cc:	f661                	bnez	a2,80200894 <sdRead+0x1a2>
	readTimes++;
    802008ce:	2b05                	addiw	s6,s6,1
	if (readTimes > 10) {
    802008d0:	47ad                	li	a5,11
    802008d2:	02fb0f63          	beq	s6,a5,80200910 <sdRead+0x21e>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802008d6:	100507b7          	lui	a5,0x10050
    802008da:	0547a423          	sw	s4,72(a5) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    802008de:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    802008e0:	fe074fe3          	bltz	a4,802008de <sdRead+0x1ec>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    802008e4:	100507b7          	lui	a5,0x10050
    802008e8:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	if (sd_cmd(0x52, startSector, 0xE1) != 0x00) {
    802008ec:	0e100613          	li	a2,225
    802008f0:	85e2                	mv	a1,s8
    802008f2:	05200513          	li	a0,82
    802008f6:	00000097          	auipc	ra,0x0
    802008fa:	cdc080e7          	jalr	-804(ra) # 802005d2 <sd_cmd>
    802008fe:	e2051ce3          	bnez	a0,80200736 <sdRead+0x44>
    80200902:	200c8593          	addi	a1,s9,512
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200906:	10050637          	lui	a2,0x10050
		while (timeout--) {
    8020090a:	587d                	li	a6,-1
    8020090c:	4881                	li	a7,0
    8020090e:	b701                	j	8020080e <sdRead+0x11c>
		panic("[SD Read]There must be some error in sd read");
    80200910:	00009697          	auipc	a3,0x9
    80200914:	82068693          	addi	a3,a3,-2016 # 80209130 <digits+0x90>
    80200918:	00009617          	auipc	a2,0x9
    8020091c:	31060613          	addi	a2,a2,784 # 80209c28 <__func__.1>
    80200920:	0f400593          	li	a1,244
    80200924:	00008517          	auipc	a0,0x8
    80200928:	7ec50513          	addi	a0,a0,2028 # 80209110 <digits+0x70>
    8020092c:	00000097          	auipc	ra,0x0
    80200930:	c16080e7          	jalr	-1002(ra) # 80200542 <_panic_>

0000000080200934 <sdWrite>:

int sdWrite(u8 *buf, u64 startSector, u32 sectorNumber) {
    80200934:	7175                	addi	sp,sp,-144
    80200936:	e506                	sd	ra,136(sp)
    80200938:	e122                	sd	s0,128(sp)
    8020093a:	fca6                	sd	s1,120(sp)
    8020093c:	f8ca                	sd	s2,112(sp)
    8020093e:	f4ce                	sd	s3,104(sp)
    80200940:	f0d2                	sd	s4,96(sp)
    80200942:	ecd6                	sd	s5,88(sp)
    80200944:	e8da                	sd	s6,80(sp)
    80200946:	e4de                	sd	s7,72(sp)
    80200948:	e0e2                	sd	s8,64(sp)
    8020094a:	fc66                	sd	s9,56(sp)
    8020094c:	f86a                	sd	s10,48(sp)
    8020094e:	f46e                	sd	s11,40(sp)
    80200950:	0900                	addi	s0,sp,144
    80200952:	f8a43023          	sd	a0,-128(s0)
    80200956:	f6b43c23          	sd	a1,-136(s0)
    8020095a:	8db2                	mv	s11,a2
	printf("[SD Write]Write: %x\n", startSector);
    8020095c:	00009517          	auipc	a0,0x9
    80200960:	80450513          	addi	a0,a0,-2044 # 80209160 <digits+0xc0>
    80200964:	00000097          	auipc	ra,0x0
    80200968:	b52080e7          	jalr	-1198(ra) # 802004b6 <printf>
	int writeTimes = 0;
    8020096c:	f8043423          	sd	zero,-120(s0)
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200970:	100504b7          	lui	s1,0x10050
    80200974:	0ff00a93          	li	s5,255
    80200978:	8b56                	mv	s6,s5
		// sd_dummy();

		timeout = MAX_TIMES;
		while (timeout--) {
			x = sd_dummy();
			printf("%x ", x);
    8020097a:	00009c17          	auipc	s8,0x9
    8020097e:	836c0c13          	addi	s8,s8,-1994 # 802091b0 <digits+0x110>
    80200982:	a295                	j	80200ae6 <sdWrite+0x1b2>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200984:	100507b7          	lui	a5,0x10050
    80200988:	0ff00713          	li	a4,255
    8020098c:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020098e:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200990:	fe074fe3          	bltz	a4,8020098e <sdWrite+0x5a>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200994:	100507b7          	lui	a5,0x10050
    80200998:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
		panic("[SD Write]Read Error, retry times %x\n", writeTimes);
    8020099c:	f8843703          	ld	a4,-120(s0)
    802009a0:	00008697          	auipc	a3,0x8
    802009a4:	7d868693          	addi	a3,a3,2008 # 80209178 <digits+0xd8>
    802009a8:	00009617          	auipc	a2,0x9
    802009ac:	27860613          	addi	a2,a2,632 # 80209c20 <__func__.0>
    802009b0:	10700593          	li	a1,263
    802009b4:	00008517          	auipc	a0,0x8
    802009b8:	75c50513          	addi	a0,a0,1884 # 80209110 <digits+0x70>
    802009bc:	00000097          	auipc	ra,0x0
    802009c0:	b86080e7          	jalr	-1146(ra) # 80200542 <_panic_>
			panic("error");
    802009c4:	00008697          	auipc	a3,0x8
    802009c8:	7e468693          	addi	a3,a3,2020 # 802091a8 <digits+0x108>
    802009cc:	00009617          	auipc	a2,0x9
    802009d0:	25460613          	addi	a2,a2,596 # 80209c20 <__func__.0>
    802009d4:	11000593          	li	a1,272
    802009d8:	00008517          	auipc	a0,0x8
    802009dc:	73850513          	addi	a0,a0,1848 # 80209110 <digits+0x70>
    802009e0:	00000097          	auipc	ra,0x0
    802009e4:	b62080e7          	jalr	-1182(ra) # 80200542 <_panic_>
			if (5 == (x & 0x1f)) {
				break;
			}
		}

		if (!timeout) {
    802009e8:	0c0a0f63          	beqz	s4,80200ac6 <sdWrite+0x192>
    802009ec:	86d6                	mv	a3,s5
			goto retry;
		}

		timeout = MAX_TIMES;
		while (--timeout) {
    802009ee:	36fd                	addiw	a3,a3,-1
    802009f0:	caf9                	beqz	a3,80200ac6 <sdWrite+0x192>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802009f2:	0554a423          	sw	s5,72(s1) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    802009f6:	44fc                	lw	a5,76(s1)
    802009f8:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    802009fc:	fe07cde3          	bltz	a5,802009f6 <sdWrite+0xc2>
			x = sd_dummy();
			if (x == 0xFF) {
    80200a00:	0ff77713          	zext.b	a4,a4
    80200a04:	ff5715e3          	bne	a4,s5,802009ee <sdWrite+0xba>
    80200a08:	3dfd                	addiw	s11,s11,-1
    80200a0a:	20098993          	addi	s3,s3,512
    80200a0e:	e0098913          	addi	s2,s3,-512
	while (sectorNumber--) {
    80200a12:	097d8363          	beq	s11,s7,80200a98 <sdWrite+0x164>
		printf("%x \n", sectorNumber);
    80200a16:	85ee                	mv	a1,s11
    80200a18:	00008517          	auipc	a0,0x8
    80200a1c:	78850513          	addi	a0,a0,1928 # 802091a0 <digits+0x100>
    80200a20:	00000097          	auipc	ra,0x0
    80200a24:	a96080e7          	jalr	-1386(ra) # 802004b6 <printf>
		if ((int)sectorNumber < 0) {
    80200a28:	f80dcee3          	bltz	s11,802009c4 <sdWrite+0x90>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200a2c:	0554a423          	sw	s5,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200a30:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80200a32:	fe07cfe3          	bltz	a5,80200a30 <sdWrite+0xfc>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200a36:	0554a423          	sw	s5,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200a3a:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80200a3c:	fe07cfe3          	bltz	a5,80200a3a <sdWrite+0x106>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200a40:	0fc00793          	li	a5,252
    80200a44:	c4bc                	sw	a5,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200a46:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80200a48:	fe07cfe3          	bltz	a5,80200a46 <sdWrite+0x112>
			spi_xfer(*p++);
    80200a4c:	0905                	addi	s2,s2,1
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200a4e:	fff94783          	lbu	a5,-1(s2) # 1fff <_start-0x801fe001>
    80200a52:	c4bc                	sw	a5,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200a54:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80200a56:	fe07cfe3          	bltz	a5,80200a54 <sdWrite+0x120>
		} while (--n > 0);
    80200a5a:	ff3919e3          	bne	s2,s3,80200a4c <sdWrite+0x118>
		while (timeout--) {
    80200a5e:	0fe00a13          	li	s4,254
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200a62:	04848d13          	addi	s10,s1,72
			if (5 == (x & 0x1f)) {
    80200a66:	4c95                	li	s9,5
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200a68:	016d2023          	sw	s6,0(s10)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200a6c:	44fc                	lw	a5,76(s1)
    80200a6e:	0007891b          	sext.w	s2,a5
	} while (r < 0);
    80200a72:	fe07cde3          	bltz	a5,80200a6c <sdWrite+0x138>
			printf("%x ", x);
    80200a76:	0ff97913          	zext.b	s2,s2
    80200a7a:	85ca                	mv	a1,s2
    80200a7c:	8562                	mv	a0,s8
    80200a7e:	00000097          	auipc	ra,0x0
    80200a82:	a38080e7          	jalr	-1480(ra) # 802004b6 <printf>
			if (5 == (x & 0x1f)) {
    80200a86:	01f97913          	andi	s2,s2,31
    80200a8a:	f5990fe3          	beq	s2,s9,802009e8 <sdWrite+0xb4>
		while (timeout--) {
    80200a8e:	3a7d                	addiw	s4,s4,-1
    80200a90:	fd7a1ce3          	bne	s4,s7,80200a68 <sdWrite+0x134>
    80200a94:	86d6                	mv	a3,s5
    80200a96:	bfa1                	j	802009ee <sdWrite+0xba>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200a98:	0fd00793          	li	a5,253
    80200a9c:	c4bc                	sw	a5,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200a9e:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80200aa0:	fe07cfe3          	bltz	a5,80200a9e <sdWrite+0x16a>
    80200aa4:	0fe00693          	li	a3,254
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200aa8:	04848613          	addi	a2,s1,72
    80200aac:	01662023          	sw	s6,0(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200ab0:	44fc                	lw	a5,76(s1)
    80200ab2:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    80200ab6:	fe07cde3          	bltz	a5,80200ab0 <sdWrite+0x17c>

	spi_xfer(0xFD);
	timeout = MAX_TIMES;
	while (--timeout) {
		x = sd_dummy();
		if (x == 0xFF) {
    80200aba:	0ff77713          	zext.b	a4,a4
    80200abe:	07570d63          	beq	a4,s5,80200b38 <sdWrite+0x204>
	while (--timeout) {
    80200ac2:	36fd                	addiw	a3,a3,-1
    80200ac4:	f6e5                	bnez	a3,80200aac <sdWrite+0x178>
	sd_cmd_end();
	// printf("[SD Write]Finish\n");
	return 0;

retry:
	writeTimes++;
    80200ac6:	f8843783          	ld	a5,-120(s0)
    80200aca:	2785                	addiw	a5,a5,1
    80200acc:	873e                	mv	a4,a5
    80200ace:	f8f43423          	sd	a5,-120(s0)
	if (writeTimes > 10) {
    80200ad2:	47ad                	li	a5,11
    80200ad4:	04f70063          	beq	a4,a5,80200b14 <sdWrite+0x1e0>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200ad8:	0554a423          	sw	s5,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200adc:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80200ade:	fe07cfe3          	bltz	a5,80200adc <sdWrite+0x1a8>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200ae2:	0004ac23          	sw	zero,24(s1)
	if (sd_cmd(25 | 0x40, startSector, 0) != 0) {
    80200ae6:	4601                	li	a2,0
    80200ae8:	f7842583          	lw	a1,-136(s0)
    80200aec:	05900513          	li	a0,89
    80200af0:	00000097          	auipc	ra,0x0
    80200af4:	ae2080e7          	jalr	-1310(ra) # 802005d2 <sd_cmd>
    80200af8:	e80516e3          	bnez	a0,80200984 <sdWrite+0x50>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200afc:	0554a423          	sw	s5,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200b00:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80200b02:	fe07cfe3          	bltz	a5,80200b00 <sdWrite+0x1cc>
    80200b06:	3dfd                	addiw	s11,s11,-1
    80200b08:	f8043783          	ld	a5,-128(s0)
    80200b0c:	20078993          	addi	s3,a5,512
	while (sectorNumber--) {
    80200b10:	5bfd                	li	s7,-1
    80200b12:	bdf5                	j	80200a0e <sdWrite+0xda>
		panic("[SD Write]There must be some error in sd write");
    80200b14:	00008697          	auipc	a3,0x8
    80200b18:	6a468693          	addi	a3,a3,1700 # 802091b8 <digits+0x118>
    80200b1c:	00009617          	auipc	a2,0x9
    80200b20:	10460613          	addi	a2,a2,260 # 80209c20 <__func__.0>
    80200b24:	14a00593          	li	a1,330
    80200b28:	00008517          	auipc	a0,0x8
    80200b2c:	5e850513          	addi	a0,a0,1512 # 80209110 <digits+0x70>
    80200b30:	00000097          	auipc	ra,0x0
    80200b34:	a12080e7          	jalr	-1518(ra) # 80200542 <_panic_>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200b38:	100507b7          	lui	a5,0x10050
    80200b3c:	0ff00713          	li	a4,255
    80200b40:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200b42:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200b44:	fe074fe3          	bltz	a4,80200b42 <sdWrite+0x20e>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200b48:	100507b7          	lui	a5,0x10050
    80200b4c:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	}
	sd_cmd_end();
	goto start;
}
    80200b50:	4501                	li	a0,0
    80200b52:	60aa                	ld	ra,136(sp)
    80200b54:	640a                	ld	s0,128(sp)
    80200b56:	74e6                	ld	s1,120(sp)
    80200b58:	7946                	ld	s2,112(sp)
    80200b5a:	79a6                	ld	s3,104(sp)
    80200b5c:	7a06                	ld	s4,96(sp)
    80200b5e:	6ae6                	ld	s5,88(sp)
    80200b60:	6b46                	ld	s6,80(sp)
    80200b62:	6ba6                	ld	s7,72(sp)
    80200b64:	6c06                	ld	s8,64(sp)
    80200b66:	7ce2                	ld	s9,56(sp)
    80200b68:	7d42                	ld	s10,48(sp)
    80200b6a:	7da2                	ld	s11,40(sp)
    80200b6c:	6149                	addi	sp,sp,144
    80200b6e:	8082                	ret

0000000080200b70 <sdInit>:

	return 0;
}
*/

int sdInit(void) {
    80200b70:	7179                	addi	sp,sp,-48
    80200b72:	f406                	sd	ra,40(sp)
    80200b74:	f022                	sd	s0,32(sp)
    80200b76:	ec26                	sd	s1,24(sp)
    80200b78:	e84a                	sd	s2,16(sp)
    80200b7a:	e44e                	sd	s3,8(sp)
    80200b7c:	e052                	sd	s4,0(sp)
    80200b7e:	1800                	addi	s0,sp,48
	REG32(uart, UART_REG_TXCTRL) = UART_TXEN;
    80200b80:	100107b7          	lui	a5,0x10010
    80200b84:	4705                	li	a4,1
    80200b86:	c798                	sw	a4,8(a5)
	REG32(spi, SPI_REG_FMT) = 0x80000;
    80200b88:	100507b7          	lui	a5,0x10050
    80200b8c:	00080737          	lui	a4,0x80
    80200b90:	c3b8                	sw	a4,64(a5)
	REG32(spi, SPI_REG_CSDEF) |= 1;
    80200b92:	4bd8                	lw	a4,20(a5)
    80200b94:	00176713          	ori	a4,a4,1
    80200b98:	cbd8                	sw	a4,20(a5)
	REG32(spi, SPI_REG_CSID) = 0;
    80200b9a:	0007a823          	sw	zero,16(a5) # 10050010 <_start-0x701afff0>
	REG32(spi, SPI_REG_SCKDIV) = f;
    80200b9e:	7d000713          	li	a4,2000
    80200ba2:	c398                	sw	a4,0(a5)
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_OFF;
    80200ba4:	470d                	li	a4,3
    80200ba6:	cf98                	sw	a4,24(a5)
    80200ba8:	46a9                	li	a3,10
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200baa:	10050737          	lui	a4,0x10050
    80200bae:	04870593          	addi	a1,a4,72 # 10050048 <_start-0x701affb8>
    80200bb2:	0ff00613          	li	a2,255
    80200bb6:	c190                	sw	a2,0(a1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200bb8:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200bba:	fe07cfe3          	bltz	a5,80200bb8 <sdInit+0x48>
	for (i = 10; i > 0; i--) {
    80200bbe:	16fd                	addi	a3,a3,-1
    80200bc0:	fafd                	bnez	a3,80200bb6 <sdInit+0x46>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200bc2:	100507b7          	lui	a5,0x10050
    80200bc6:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>

	sd_poweron(2000);
	sd_cmd0();
    80200bca:	00000097          	auipc	ra,0x0
    80200bce:	ae2080e7          	jalr	-1310(ra) # 802006ac <sd_cmd0>
	//sd_poweron(4094);
	printf("SD card init\n");
    80200bd2:	00008517          	auipc	a0,0x8
    80200bd6:	61650513          	addi	a0,a0,1558 # 802091e8 <digits+0x148>
    80200bda:	00000097          	auipc	ra,0x0
    80200bde:	8dc080e7          	jalr	-1828(ra) # 802004b6 <printf>
	if (sd_cmd0() ||
    80200be2:	00000097          	auipc	ra,0x0
    80200be6:	aca080e7          	jalr	-1334(ra) # 802006ac <sd_cmd0>
    80200bea:	892a                	mv	s2,a0
    80200bec:	e95d                	bnez	a0,80200ca2 <sdInit+0x132>
	rc = (sd_cmd(0x48, 0x000001AA, 0x87) != 0x01);
    80200bee:	08700613          	li	a2,135
    80200bf2:	1aa00593          	li	a1,426
    80200bf6:	04800513          	li	a0,72
    80200bfa:	00000097          	auipc	ra,0x0
    80200bfe:	9d8080e7          	jalr	-1576(ra) # 802005d2 <sd_cmd>
    80200c02:	0005071b          	sext.w	a4,a0
    80200c06:	177d                	addi	a4,a4,-1
    80200c08:	00e03633          	snez	a2,a4
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c0c:	100507b7          	lui	a5,0x10050
    80200c10:	0ff00713          	li	a4,255
    80200c14:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c16:	10050737          	lui	a4,0x10050
    80200c1a:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c1c:	fe07cfe3          	bltz	a5,80200c1a <sdInit+0xaa>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c20:	100507b7          	lui	a5,0x10050
    80200c24:	0ff00713          	li	a4,255
    80200c28:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c2a:	10050737          	lui	a4,0x10050
    80200c2e:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c30:	fe07cfe3          	bltz	a5,80200c2e <sdInit+0xbe>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c34:	100507b7          	lui	a5,0x10050
    80200c38:	0ff00713          	li	a4,255
    80200c3c:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c3e:	100506b7          	lui	a3,0x10050
    80200c42:	46fc                	lw	a5,76(a3)
    80200c44:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    80200c48:	fe07cde3          	bltz	a5,80200c42 <sdInit+0xd2>
	rc |= ((sd_dummy() & 0xF) != 0x1); /* voltage */
    80200c4c:	8b3d                	andi	a4,a4,15
    80200c4e:	fff70793          	addi	a5,a4,-1 # 1004ffff <_start-0x701b0001>
    80200c52:	00f03733          	snez	a4,a5
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c56:	100507b7          	lui	a5,0x10050
    80200c5a:	0ff00693          	li	a3,255
    80200c5e:	c7b4                	sw	a3,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c60:	100505b7          	lui	a1,0x10050
    80200c64:	45fc                	lw	a5,76(a1)
    80200c66:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    80200c6a:	fe07cde3          	bltz	a5,80200c64 <sdInit+0xf4>
	rc |= (sd_dummy() != 0xAA); /* check pattern */
    80200c6e:	0ff6f793          	zext.b	a5,a3
    80200c72:	f5678793          	addi	a5,a5,-170 # 1004ff56 <_start-0x701b00aa>
    80200c76:	00f037b3          	snez	a5,a5
    80200c7a:	8fd9                	or	a5,a5,a4
    80200c7c:	00f66733          	or	a4,a2,a5
    80200c80:	0ff77713          	zext.b	a4,a4
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c84:	100507b7          	lui	a5,0x10050
    80200c88:	0ff00693          	li	a3,255
    80200c8c:	c7b4                	sw	a3,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c8e:	100506b7          	lui	a3,0x10050
    80200c92:	46fc                	lw	a5,76(a3)
	} while (r < 0);
    80200c94:	fe07cfe3          	bltz	a5,80200c92 <sdInit+0x122>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200c98:	100507b7          	lui	a5,0x10050
    80200c9c:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	if (sd_cmd0() ||
    80200ca0:	c31d                	beqz	a4,80200cc6 <sdInit+0x156>
	    sd_cmd8() ||
	    sd_acmd41() ||
	    sd_cmd58() ||
	    sd_cmd16()) {
		printf("ERROR");
    80200ca2:	00008517          	auipc	a0,0x8
    80200ca6:	56e50513          	addi	a0,a0,1390 # 80209210 <digits+0x170>
    80200caa:	00000097          	auipc	ra,0x0
    80200cae:	80c080e7          	jalr	-2036(ra) # 802004b6 <printf>
		return 1;
    80200cb2:	4905                	li	s2,1
	REG32(spi, SPI_REG_SCKDIV) = (F_CLK / 16666666UL);
	printf("BOOT\n");

	__asm__ __volatile__ ("fence.i" : : : "memory");
	return 0;
}
    80200cb4:	854a                	mv	a0,s2
    80200cb6:	70a2                	ld	ra,40(sp)
    80200cb8:	7402                	ld	s0,32(sp)
    80200cba:	64e2                	ld	s1,24(sp)
    80200cbc:	6942                	ld	s2,16(sp)
    80200cbe:	69a2                	ld	s3,8(sp)
    80200cc0:	6a02                	ld	s4,0(sp)
    80200cc2:	6145                	addi	sp,sp,48
    80200cc4:	8082                	ret
	printf("ACMD41");
    80200cc6:	00008517          	auipc	a0,0x8
    80200cca:	53250513          	addi	a0,a0,1330 # 802091f8 <digits+0x158>
    80200cce:	fffff097          	auipc	ra,0xfffff
    80200cd2:	7e8080e7          	jalr	2024(ra) # 802004b6 <printf>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200cd6:	100504b7          	lui	s1,0x10050
    80200cda:	0ff00a13          	li	s4,255
	} while (r == 0x01);
    80200cde:	4985                	li	s3,1
	sd_cmd(0x77, 0, 0x65);
    80200ce0:	06500613          	li	a2,101
    80200ce4:	4581                	li	a1,0
    80200ce6:	07700513          	li	a0,119
    80200cea:	00000097          	auipc	ra,0x0
    80200cee:	8e8080e7          	jalr	-1816(ra) # 802005d2 <sd_cmd>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200cf2:	0544a423          	sw	s4,72(s1) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    80200cf6:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80200cf8:	fe07cfe3          	bltz	a5,80200cf6 <sdInit+0x186>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200cfc:	0004ac23          	sw	zero,24(s1)
		r = sd_cmd(0x69, 0x40000000, 0x77); /* HCS = 1 */
    80200d00:	07700613          	li	a2,119
    80200d04:	400005b7          	lui	a1,0x40000
    80200d08:	06900513          	li	a0,105
    80200d0c:	00000097          	auipc	ra,0x0
    80200d10:	8c6080e7          	jalr	-1850(ra) # 802005d2 <sd_cmd>
	} while (r == 0x01);
    80200d14:	fd3506e3          	beq	a0,s3,80200ce0 <sdInit+0x170>
	    sd_cmd8() ||
    80200d18:	f549                	bnez	a0,80200ca2 <sdInit+0x132>
	printf("CMD58");
    80200d1a:	00008517          	auipc	a0,0x8
    80200d1e:	4e650513          	addi	a0,a0,1254 # 80209200 <digits+0x160>
    80200d22:	fffff097          	auipc	ra,0xfffff
    80200d26:	794080e7          	jalr	1940(ra) # 802004b6 <printf>
	rc = (sd_cmd(0x7A, 0, 0xFD) != 0x00);
    80200d2a:	0fd00613          	li	a2,253
    80200d2e:	4581                	li	a1,0
    80200d30:	07a00513          	li	a0,122
    80200d34:	00000097          	auipc	ra,0x0
    80200d38:	89e080e7          	jalr	-1890(ra) # 802005d2 <sd_cmd>
    80200d3c:	0005069b          	sext.w	a3,a0
    80200d40:	00d03633          	snez	a2,a3
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200d44:	100507b7          	lui	a5,0x10050
    80200d48:	0ff00713          	li	a4,255
    80200d4c:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200d4e:	100506b7          	lui	a3,0x10050
    80200d52:	46fc                	lw	a5,76(a3)
    80200d54:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    80200d58:	fe07cde3          	bltz	a5,80200d52 <sdInit+0x1e2>
	rc |= ((sd_dummy() & 0x80) != 0x80); /* Power up status */
    80200d5c:	0ff77793          	zext.b	a5,a4
    80200d60:	0807c793          	xori	a5,a5,128
    80200d64:	839d                	srli	a5,a5,0x7
    80200d66:	00f666b3          	or	a3,a2,a5
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200d6a:	100507b7          	lui	a5,0x10050
    80200d6e:	0ff00713          	li	a4,255
    80200d72:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200d74:	10050737          	lui	a4,0x10050
    80200d78:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200d7a:	fe07cfe3          	bltz	a5,80200d78 <sdInit+0x208>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200d7e:	100507b7          	lui	a5,0x10050
    80200d82:	0ff00713          	li	a4,255
    80200d86:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200d88:	10050737          	lui	a4,0x10050
    80200d8c:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200d8e:	fe07cfe3          	bltz	a5,80200d8c <sdInit+0x21c>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200d92:	100507b7          	lui	a5,0x10050
    80200d96:	0ff00713          	li	a4,255
    80200d9a:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200d9c:	10050737          	lui	a4,0x10050
    80200da0:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200da2:	fe07cfe3          	bltz	a5,80200da0 <sdInit+0x230>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200da6:	100507b7          	lui	a5,0x10050
    80200daa:	0ff00713          	li	a4,255
    80200dae:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200db0:	10050737          	lui	a4,0x10050
    80200db4:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200db6:	fe07cfe3          	bltz	a5,80200db4 <sdInit+0x244>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200dba:	100507b7          	lui	a5,0x10050
    80200dbe:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	    sd_acmd41() ||
    80200dc2:	ee0690e3          	bnez	a3,80200ca2 <sdInit+0x132>
	printf("CMD16");
    80200dc6:	00008517          	auipc	a0,0x8
    80200dca:	44250513          	addi	a0,a0,1090 # 80209208 <digits+0x168>
    80200dce:	fffff097          	auipc	ra,0xfffff
    80200dd2:	6e8080e7          	jalr	1768(ra) # 802004b6 <printf>
	rc = (sd_cmd(0x50, 0x200, 0x15) != 0x00);
    80200dd6:	4655                	li	a2,21
    80200dd8:	20000593          	li	a1,512
    80200ddc:	05000513          	li	a0,80
    80200de0:	fffff097          	auipc	ra,0xfffff
    80200de4:	7f2080e7          	jalr	2034(ra) # 802005d2 <sd_cmd>
    80200de8:	86aa                	mv	a3,a0
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200dea:	100507b7          	lui	a5,0x10050
    80200dee:	0ff00713          	li	a4,255
    80200df2:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200df4:	10050737          	lui	a4,0x10050
    80200df8:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200dfa:	fe07cfe3          	bltz	a5,80200df8 <sdInit+0x288>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200dfe:	100507b7          	lui	a5,0x10050
    80200e02:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	    sd_cmd58() ||
    80200e06:	e8069ee3          	bnez	a3,80200ca2 <sdInit+0x132>
	REG32(spi, SPI_REG_SCKDIV) = (F_CLK / 16666666UL);
    80200e0a:	100507b7          	lui	a5,0x10050
    80200e0e:	03c00713          	li	a4,60
    80200e12:	c398                	sw	a4,0(a5)
	printf("BOOT\n");
    80200e14:	00008517          	auipc	a0,0x8
    80200e18:	40450513          	addi	a0,a0,1028 # 80209218 <digits+0x178>
    80200e1c:	fffff097          	auipc	ra,0xfffff
    80200e20:	69a080e7          	jalr	1690(ra) # 802004b6 <printf>
	__asm__ __volatile__ ("fence.i" : : : "memory");
    80200e24:	0000100f          	fence.i
	return 0;
    80200e28:	b571                	j	80200cb4 <sdInit+0x144>

0000000080200e2a <sdTest>:

u8 binary[1024];
int sdTest(void) {
    80200e2a:	7179                	addi	sp,sp,-48
    80200e2c:	f406                	sd	ra,40(sp)
    80200e2e:	f022                	sd	s0,32(sp)
    80200e30:	ec26                	sd	s1,24(sp)
    80200e32:	e84a                	sd	s2,16(sp)
    80200e34:	e44e                	sd	s3,8(sp)
    80200e36:	e052                	sd	s4,0(sp)
    80200e38:	1800                	addi	s0,sp,48
	sdInit();
    80200e3a:	00000097          	auipc	ra,0x0
    80200e3e:	d36080e7          	jalr	-714(ra) # 80200b70 <sdInit>
    80200e42:	4481                	li	s1,0
        // }
        // sdWrite(binary, j, 2);
        // for (int i = 0; i < 1024; i++) {
        //     binary[i] = 0;
        // }
        sdRead(binary, j, 2);
    80200e44:	00097a17          	auipc	s4,0x97
    80200e48:	1dca0a13          	addi	s4,s4,476 # 80298020 <binary>
        //     if (binary[i] != (i & 7)) {
        //         panic("gg: %d ", j);
        //         break;
        //     }
        // }
        printf("finish %d\n", j);
    80200e4c:	00008997          	auipc	s3,0x8
    80200e50:	3d498993          	addi	s3,s3,980 # 80209220 <digits+0x180>
    for (int j = 0; j < 20; j += 2) {
    80200e54:	4951                	li	s2,20
        sdRead(binary, j, 2);
    80200e56:	4609                	li	a2,2
    80200e58:	85a6                	mv	a1,s1
    80200e5a:	8552                	mv	a0,s4
    80200e5c:	00000097          	auipc	ra,0x0
    80200e60:	896080e7          	jalr	-1898(ra) # 802006f2 <sdRead>
        printf("finish %d\n", j);
    80200e64:	0004859b          	sext.w	a1,s1
    80200e68:	854e                	mv	a0,s3
    80200e6a:	fffff097          	auipc	ra,0xfffff
    80200e6e:	64c080e7          	jalr	1612(ra) # 802004b6 <printf>
    for (int j = 0; j < 20; j += 2) {
    80200e72:	0489                	addi	s1,s1,2
    80200e74:	ff2491e3          	bne	s1,s2,80200e56 <sdTest+0x2c>
    }
	return 0;
    80200e78:	4501                	li	a0,0
    80200e7a:	70a2                	ld	ra,40(sp)
    80200e7c:	7402                	ld	s0,32(sp)
    80200e7e:	64e2                	ld	s1,24(sp)
    80200e80:	6942                	ld	s2,16(sp)
    80200e82:	69a2                	ld	s3,8(sp)
    80200e84:	6a02                	ld	s4,0(sp)
    80200e86:	6145                	addi	sp,sp,48
    80200e88:	8082                	ret

0000000080200e8a <startPage>:
        PTE_READ | PTE_WRITE | PTE_EXECUTE | PTE_ACCESSED | PTE_DIRTY);
    pageInsert(kernelPageDirectory, TRAMPOLINE_BASE + PAGE_SIZE, (u64)trampoline + PAGE_SIZE, 
        PTE_READ | PTE_WRITE | PTE_EXECUTE | PTE_ACCESSED | PTE_DIRTY);
}

void startPage() {
    80200e8a:	1141                	addi	sp,sp,-16
    80200e8c:	e422                	sd	s0,8(sp)
    80200e8e:	0800                	addi	s0,sp,16
    w_satp(MAKE_SATP(kernelPageDirectory));
    80200e90:	001ef797          	auipc	a5,0x1ef
    80200e94:	17078793          	addi	a5,a5,368 # 803f0000 <_pgdir>
    80200e98:	83b1                	srli	a5,a5,0xc
    80200e9a:	577d                	li	a4,-1
    80200e9c:	177e                	slli	a4,a4,0x3f
    80200e9e:	8fd9                	or	a5,a5,a4
#define MAKE_SATP(pagetable) (SATP_SV39 | (((u64)pagetable) >> 12))

// supervisor address translation and protection;
// holds the address of the page table.
static inline void w_satp(u64 x) {
	asm volatile("csrw satp, %0" : : "r" (x));
    80200ea0:	18079073          	csrw	satp,a5

// flush the TLB.
static inline void sfence_vma() {
	// the zero, zero means flush all TLB entries.
	// asm volatile("sfence.vma zero, zero");
	asm volatile("sfence.vma");
    80200ea4:	12000073          	sfence.vma
    sfence_vma();
}
    80200ea8:	6422                	ld	s0,8(sp)
    80200eaa:	0141                	addi	sp,sp,16
    80200eac:	8082                	ret

0000000080200eae <memoryInit>:
    pageInsert(kernelPageDirectory, 1ll << 35, page2pa(p), PTE_READ | PTE_WRITE);
    *((u32*)page2pa(p)) = 65536;
    printf("value1 of %lx:  %d\n", 1ll << 35, *((u32*)(1ll<<35)));
}

void memoryInit() {
    80200eae:	711d                	addi	sp,sp,-96
    80200eb0:	ec86                	sd	ra,88(sp)
    80200eb2:	e8a2                	sd	s0,80(sp)
    80200eb4:	e4a6                	sd	s1,72(sp)
    80200eb6:	e0ca                	sd	s2,64(sp)
    80200eb8:	fc4e                	sd	s3,56(sp)
    80200eba:	f852                	sd	s4,48(sp)
    80200ebc:	f456                	sd	s5,40(sp)
    80200ebe:	f05a                	sd	s6,32(sp)
    80200ec0:	ec5e                	sd	s7,24(sp)
    80200ec2:	1080                	addi	s0,sp,96
    printf("Memory init start...\n");
    80200ec4:	00008517          	auipc	a0,0x8
    80200ec8:	36c50513          	addi	a0,a0,876 # 80209230 <digits+0x190>
    80200ecc:	fffff097          	auipc	ra,0xfffff
    80200ed0:	5ea080e7          	jalr	1514(ra) # 802004b6 <printf>
    u32 n = PA2PPN(kernelEnd);
    80200ed4:	001f0917          	auipc	s2,0x1f0
    80200ed8:	12c90913          	addi	s2,s2,300 # 803f1000 <bssEnd>
    80200edc:	00c95913          	srli	s2,s2,0xc
    80200ee0:	0009099b          	sext.w	s3,s2
    80200ee4:	1942                	slli	s2,s2,0x30
    80200ee6:	03095913          	srli	s2,s2,0x30
    for (i = 0; i < n; i++) {
    80200eea:	44090763          	beqz	s2,80201338 <memoryInit+0x48a>
    80200eee:	00097797          	auipc	a5,0x97
    80200ef2:	54278793          	addi	a5,a5,1346 # 80298430 <pages+0x10>
    80200ef6:	fff9069b          	addiw	a3,s2,-1
    80200efa:	1682                	slli	a3,a3,0x20
    80200efc:	9281                	srli	a3,a3,0x20
    80200efe:	00169713          	slli	a4,a3,0x1
    80200f02:	9736                	add	a4,a4,a3
    80200f04:	070e                	slli	a4,a4,0x3
    80200f06:	00097697          	auipc	a3,0x97
    80200f0a:	54268693          	addi	a3,a3,1346 # 80298448 <pages+0x28>
    80200f0e:	9736                	add	a4,a4,a3
        pages[i].ref = 1;
    80200f10:	4685                	li	a3,1
    80200f12:	c394                	sw	a3,0(a5)
    for (i = 0; i < n; i++) {
    80200f14:	07e1                	addi	a5,a5,24
    80200f16:	fee79ee3          	bne	a5,a4,80200f12 <memoryInit+0x64>
    LIST_INIT(&freePages);
    80200f1a:	00157797          	auipc	a5,0x157
    80200f1e:	5007b323          	sd	zero,1286(a5) # 80358420 <freePages>
    for (; i < n; i++) {
    80200f22:	00f9d793          	srli	a5,s3,0xf
    80200f26:	8b85                	andi	a5,a5,1
    80200f28:	e3c5                	bnez	a5,80200fc8 <memoryInit+0x11a>
    for (i = 0; i < n; i++) {
    80200f2a:	834a                	mv	t1,s2
    80200f2c:	00157717          	auipc	a4,0x157
    80200f30:	4f473703          	ld	a4,1268(a4) # 80358420 <freePages>
    80200f34:	861a                	mv	a2,t1
        pages[i].ref = 0;
    80200f36:	00097597          	auipc	a1,0x97
    80200f3a:	4ea58593          	addi	a1,a1,1258 # 80298420 <pages>
        LIST_INSERT_HEAD(&freePages, &pages[i], link);
    80200f3e:	00157897          	auipc	a7,0x157
    80200f42:	4e288893          	addi	a7,a7,1250 # 80358420 <freePages>
    for (; i < n; i++) {
    80200f46:	6821                	lui	a6,0x8
    80200f48:	a02d                	j	80200f72 <memoryInit+0xc4>
        LIST_INSERT_HEAD(&freePages, &pages[i], link);
    80200f4a:	00151793          	slli	a5,a0,0x1
    80200f4e:	97aa                	add	a5,a5,a0
    80200f50:	078e                	slli	a5,a5,0x3
    80200f52:	97ae                	add	a5,a5,a1
    80200f54:	e71c                	sd	a5,8(a4)
    80200f56:	02061693          	slli	a3,a2,0x20
    80200f5a:	9281                	srli	a3,a3,0x20
    80200f5c:	00169793          	slli	a5,a3,0x1
    80200f60:	00d78733          	add	a4,a5,a3
    80200f64:	070e                	slli	a4,a4,0x3
    80200f66:	972e                	add	a4,a4,a1
    80200f68:	01173423          	sd	a7,8(a4)
    for (; i < n; i++) {
    80200f6c:	2605                	addiw	a2,a2,1
    80200f6e:	03067063          	bgeu	a2,a6,80200f8e <memoryInit+0xe0>
        pages[i].ref = 0;
    80200f72:	02061513          	slli	a0,a2,0x20
    80200f76:	9101                	srli	a0,a0,0x20
    80200f78:	00151793          	slli	a5,a0,0x1
    80200f7c:	00a786b3          	add	a3,a5,a0
    80200f80:	068e                	slli	a3,a3,0x3
    80200f82:	96ae                	add	a3,a3,a1
    80200f84:	0006a823          	sw	zero,16(a3)
        LIST_INSERT_HEAD(&freePages, &pages[i], link);
    80200f88:	e298                	sd	a4,0(a3)
    80200f8a:	f361                	bnez	a4,80200f4a <memoryInit+0x9c>
    80200f8c:	b7e9                	j	80200f56 <memoryInit+0xa8>
    80200f8e:	0013069b          	addiw	a3,t1,1
    80200f92:	6621                	lui	a2,0x8
    80200f94:	4781                	li	a5,0
    80200f96:	00d66663          	bltu	a2,a3,80200fa2 <memoryInit+0xf4>
    80200f9a:	67a1                	lui	a5,0x8
    80200f9c:	37fd                	addiw	a5,a5,-1
    80200f9e:	406787bb          	subw	a5,a5,t1
    80200fa2:	00157697          	auipc	a3,0x157
    80200fa6:	47e68693          	addi	a3,a3,1150 # 80358420 <freePages>
    80200faa:	e298                	sd	a4,0(a3)
    80200fac:	006787bb          	addw	a5,a5,t1
    80200fb0:	1782                	slli	a5,a5,0x20
    80200fb2:	9381                	srli	a5,a5,0x20
    80200fb4:	00179713          	slli	a4,a5,0x1
    80200fb8:	97ba                	add	a5,a5,a4
    80200fba:	078e                	slli	a5,a5,0x3
    80200fbc:	00097717          	auipc	a4,0x97
    80200fc0:	46470713          	addi	a4,a4,1124 # 80298420 <pages>
    80200fc4:	97ba                	add	a5,a5,a4
    80200fc6:	e794                	sd	a3,8(a5)
    pageInsert(kernelPageDirectory, UART_V, UART, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200fc8:	0c600693          	li	a3,198
    80200fcc:	10000637          	lui	a2,0x10000
    80200fd0:	3f100593          	li	a1,1009
    80200fd4:	05f2                	slli	a1,a1,0x1c
    80200fd6:	001ef517          	auipc	a0,0x1ef
    80200fda:	02a50513          	addi	a0,a0,42 # 803f0000 <_pgdir>
    80200fde:	00001097          	auipc	ra,0x1
    80200fe2:	8fe080e7          	jalr	-1794(ra) # 802018dc <pageInsert>
    80200fe6:	01f814b7          	lui	s1,0x1f81
    80200fea:	04b6                	slli	s1,s1,0xd
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80200fec:	fc100a93          	li	s5,-63
    80200ff0:	1a82                	slli	s5,s5,0x20
    80200ff2:	001efb97          	auipc	s7,0x1ef
    80200ff6:	00eb8b93          	addi	s7,s7,14 # 803f0000 <_pgdir>
    for (u64 i = 0; i < 0x10000; i += PAGE_SIZE) {
    80200ffa:	6b05                	lui	s6,0x1
    80200ffc:	003f0a37          	lui	s4,0x3f0
    80201000:	201a0a13          	addi	s4,s4,513 # 3f0201 <_start-0x7fe0fdff>
    80201004:	0a42                	slli	s4,s4,0x10
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201006:	0c600693          	li	a3,198
    8020100a:	01548633          	add	a2,s1,s5
    8020100e:	85a6                	mv	a1,s1
    80201010:	855e                	mv	a0,s7
    80201012:	00001097          	auipc	ra,0x1
    80201016:	8ca080e7          	jalr	-1846(ra) # 802018dc <pageInsert>
    for (u64 i = 0; i < 0x10000; i += PAGE_SIZE) {
    8020101a:	94da                	add	s1,s1,s6
    8020101c:	ff4495e3          	bne	s1,s4,80201006 <memoryInit+0x158>
    80201020:	00fc34b7          	lui	s1,0xfc3
    80201024:	04ba                	slli	s1,s1,0xe
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201026:	fc100a93          	li	s5,-63
    8020102a:	1a82                	slli	s5,s5,0x20
    8020102c:	001efb97          	auipc	s7,0x1ef
    80201030:	fd4b8b93          	addi	s7,s7,-44 # 803f0000 <_pgdir>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    80201034:	6b05                	lui	s6,0x1
    80201036:	00fc3a37          	lui	s4,0xfc3
    8020103a:	0a05                	addi	s4,s4,1
    8020103c:	0a3a                	slli	s4,s4,0xe
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    8020103e:	0c600693          	li	a3,198
    80201042:	01548633          	add	a2,s1,s5
    80201046:	85a6                	mv	a1,s1
    80201048:	855e                	mv	a0,s7
    8020104a:	00001097          	auipc	ra,0x1
    8020104e:	892080e7          	jalr	-1902(ra) # 802018dc <pageInsert>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    80201052:	94da                	add	s1,s1,s6
    80201054:	ff4495e3          	bne	s1,s4,8020103e <memoryInit+0x190>
    80201058:	1f8614b7          	lui	s1,0x1f861
    8020105c:	04a6                	slli	s1,s1,0x9
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    8020105e:	fc100a93          	li	s5,-63
    80201062:	1a82                	slli	s5,s5,0x20
    80201064:	001efb97          	auipc	s7,0x1ef
    80201068:	f9cb8b93          	addi	s7,s7,-100 # 803f0000 <_pgdir>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    8020106c:	6b05                	lui	s6,0x1
    8020106e:	00fc3a37          	lui	s4,0xfc3
    80201072:	081a0a13          	addi	s4,s4,129 # fc3081 <_start-0x7f23cf7f>
    80201076:	0a3a                	slli	s4,s4,0xe
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201078:	0c600693          	li	a3,198
    8020107c:	01548633          	add	a2,s1,s5
    80201080:	85a6                	mv	a1,s1
    80201082:	855e                	mv	a0,s7
    80201084:	00001097          	auipc	ra,0x1
    80201088:	858080e7          	jalr	-1960(ra) # 802018dc <pageInsert>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    8020108c:	94da                	add	s1,s1,s6
    8020108e:	ff4495e3          	bne	s1,s4,80201078 <memoryInit+0x1ca>
    pageInsert(kernelPageDirectory, SPI_CTRL_ADDR, SPI_CTRL_ADDR, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201092:	0c600693          	li	a3,198
    80201096:	10050637          	lui	a2,0x10050
    8020109a:	100505b7          	lui	a1,0x10050
    8020109e:	001ef517          	auipc	a0,0x1ef
    802010a2:	f6250513          	addi	a0,a0,-158 # 803f0000 <_pgdir>
    802010a6:	00001097          	auipc	ra,0x1
    802010aa:	836080e7          	jalr	-1994(ra) # 802018dc <pageInsert>
    pageInsert(kernelPageDirectory, UART_CTRL_ADDR, UART_CTRL_ADDR, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    802010ae:	0c600693          	li	a3,198
    802010b2:	10010637          	lui	a2,0x10010
    802010b6:	100105b7          	lui	a1,0x10010
    802010ba:	001ef517          	auipc	a0,0x1ef
    802010be:	f4650513          	addi	a0,a0,-186 # 803f0000 <_pgdir>
    802010c2:	00001097          	auipc	ra,0x1
    802010c6:	81a080e7          	jalr	-2022(ra) # 802018dc <pageInsert>
    va = pa = (u64)kernelStart;
    802010ca:	fffffa17          	auipc	s4,0xfffff
    802010ce:	f36a0a13          	addi	s4,s4,-202 # 80200000 <_start>
    for (u64 i = 0; va + i < (u64)textEnd; i += PAGE_SIZE) {
    802010d2:	00008497          	auipc	s1,0x8
    802010d6:	f2e48493          	addi	s1,s1,-210 # 80209000 <textEnd>
    802010da:	029a7363          	bgeu	s4,s1,80201100 <memoryInit+0x252>
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_EXECUTE | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    802010de:	001efb17          	auipc	s6,0x1ef
    802010e2:	f22b0b13          	addi	s6,s6,-222 # 803f0000 <_pgdir>
    for (u64 i = 0; va + i < (u64)textEnd; i += PAGE_SIZE) {
    802010e6:	6a85                	lui	s5,0x1
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_EXECUTE | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    802010e8:	0ce00693          	li	a3,206
    802010ec:	8652                	mv	a2,s4
    802010ee:	85d2                	mv	a1,s4
    802010f0:	855a                	mv	a0,s6
    802010f2:	00000097          	auipc	ra,0x0
    802010f6:	7ea080e7          	jalr	2026(ra) # 802018dc <pageInsert>
    for (u64 i = 0; va + i < (u64)textEnd; i += PAGE_SIZE) {
    802010fa:	9a56                	add	s4,s4,s5
    802010fc:	fe9a66e3          	bltu	s4,s1,802010e8 <memoryInit+0x23a>
    for (u64 i = 0; va + i < PHYSICAL_MEMORY_TOP; i += PAGE_SIZE) {
    80201100:	47c5                	li	a5,17
    80201102:	07ee                	slli	a5,a5,0x1b
    80201104:	02f4f463          	bgeu	s1,a5,8020112c <memoryInit+0x27e>
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201108:	001efb17          	auipc	s6,0x1ef
    8020110c:	ef8b0b13          	addi	s6,s6,-264 # 803f0000 <_pgdir>
    for (u64 i = 0; va + i < PHYSICAL_MEMORY_TOP; i += PAGE_SIZE) {
    80201110:	6a85                	lui	s5,0x1
    80201112:	8a3e                	mv	s4,a5
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201114:	0c600693          	li	a3,198
    80201118:	8626                	mv	a2,s1
    8020111a:	85a6                	mv	a1,s1
    8020111c:	855a                	mv	a0,s6
    8020111e:	00000097          	auipc	ra,0x0
    80201122:	7be080e7          	jalr	1982(ra) # 802018dc <pageInsert>
    for (u64 i = 0; va + i < PHYSICAL_MEMORY_TOP; i += PAGE_SIZE) {
    80201126:	94d6                	add	s1,s1,s5
    80201128:	ff44e6e3          	bltu	s1,s4,80201114 <memoryInit+0x266>
    pageInsert(kernelPageDirectory, TRAMPOLINE_BASE, (u64)trampoline, 
    8020112c:	0ce00693          	li	a3,206
    80201130:	00006617          	auipc	a2,0x6
    80201134:	ed060613          	addi	a2,a2,-304 # 80207000 <_trampoline>
    80201138:	020005b7          	lui	a1,0x2000
    8020113c:	15fd                	addi	a1,a1,-1
    8020113e:	05b6                	slli	a1,a1,0xd
    80201140:	001ef517          	auipc	a0,0x1ef
    80201144:	ec050513          	addi	a0,a0,-320 # 803f0000 <_pgdir>
    80201148:	00000097          	auipc	ra,0x0
    8020114c:	794080e7          	jalr	1940(ra) # 802018dc <pageInsert>
    pageInsert(kernelPageDirectory, TRAMPOLINE_BASE + PAGE_SIZE, (u64)trampoline + PAGE_SIZE, 
    80201150:	0ce00693          	li	a3,206
    80201154:	00007617          	auipc	a2,0x7
    80201158:	eac60613          	addi	a2,a2,-340 # 80208000 <trapframe>
    8020115c:	040005b7          	lui	a1,0x4000
    80201160:	15fd                	addi	a1,a1,-1
    80201162:	05b2                	slli	a1,a1,0xc
    80201164:	001ef517          	auipc	a0,0x1ef
    80201168:	e9c50513          	addi	a0,a0,-356 # 803f0000 <_pgdir>
    8020116c:	00000097          	auipc	ra,0x0
    80201170:	770080e7          	jalr	1904(ra) # 802018dc <pageInsert>
    for (; i < n; i++) {
    80201174:	00f9d993          	srli	s3,s3,0xf
    80201178:	0019f993          	andi	s3,s3,1
    8020117c:	02099563          	bnez	s3,802011a6 <memoryInit+0x2f8>
    80201180:	02091713          	slli	a4,s2,0x20
    80201184:	9301                	srli	a4,a4,0x20
    80201186:	00171793          	slli	a5,a4,0x1
    8020118a:	97ba                	add	a5,a5,a4
    8020118c:	078e                	slli	a5,a5,0x3
    8020118e:	00097717          	auipc	a4,0x97
    80201192:	29270713          	addi	a4,a4,658 # 80298420 <pages>
    80201196:	97ba                	add	a5,a5,a4
    80201198:	6721                	lui	a4,0x8
        pages[i].ref = 0;
    8020119a:	0007a823          	sw	zero,16(a5) # 8010 <_start-0x801f7ff0>
    for (; i < n; i++) {
    8020119e:	2905                	addiw	s2,s2,1
    802011a0:	07e1                	addi	a5,a5,24
    802011a2:	fee96ce3          	bltu	s2,a4,8020119a <memoryInit+0x2ec>
    initFreePages();
    virtualMemory();
    resetRef();
    startPage();
    802011a6:	00000097          	auipc	ra,0x0
    802011aa:	ce4080e7          	jalr	-796(ra) # 80200e8a <startPage>
    printf("Memory init finish!\n");
    802011ae:	00008517          	auipc	a0,0x8
    802011b2:	09a50513          	addi	a0,a0,154 # 80209248 <digits+0x1a8>
    802011b6:	fffff097          	auipc	ra,0xfffff
    802011ba:	300080e7          	jalr	768(ra) # 802004b6 <printf>
    printf("Test memory start...\n");
    802011be:	00008517          	auipc	a0,0x8
    802011c2:	0a250513          	addi	a0,a0,162 # 80209260 <digits+0x1c0>
    802011c6:	fffff097          	auipc	ra,0xfffff
    802011ca:	2f0080e7          	jalr	752(ra) # 802004b6 <printf>
    pageAlloc(&p);
    802011ce:	fa840513          	addi	a0,s0,-88
    802011d2:	00000097          	auipc	ra,0x0
    802011d6:	390080e7          	jalr	912(ra) # 80201562 <pageAlloc>
    int hartId;
} PhysicalPage;

inline u32 page2PPN(PhysicalPage *page) {
    extern PhysicalPage pages[];
    return page - pages;
    802011da:	00097997          	auipc	s3,0x97
    802011de:	24698993          	addi	s3,s3,582 # 80298420 <pages>
    802011e2:	fa843583          	ld	a1,-88(s0)
    802011e6:	413585b3          	sub	a1,a1,s3
    802011ea:	858d                	srai	a1,a1,0x3
    802011ec:	00009917          	auipc	s2,0x9
    802011f0:	acc93903          	ld	s2,-1332(s2) # 80209cb8 <__func__.0+0x8>
    802011f4:	032585b3          	mul	a1,a1,s2
    return pages + ppn;
}


inline u64 page2pa(PhysicalPage *page) {
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802011f8:	00c5959b          	slliw	a1,a1,0xc
    802011fc:	1582                	slli	a1,a1,0x20
    802011fe:	9181                	srli	a1,a1,0x20
    80201200:	4a05                	li	s4,1
    80201202:	01fa1493          	slli	s1,s4,0x1f
    printf("alloced page1:  %lx\n", page2pa(p));
    80201206:	95a6                	add	a1,a1,s1
    80201208:	00008517          	auipc	a0,0x8
    8020120c:	07050513          	addi	a0,a0,112 # 80209278 <digits+0x1d8>
    80201210:	fffff097          	auipc	ra,0xfffff
    80201214:	2a6080e7          	jalr	678(ra) # 802004b6 <printf>
    return page - pages;
    80201218:	fa843603          	ld	a2,-88(s0)
    8020121c:	41360633          	sub	a2,a2,s3
    80201220:	860d                	srai	a2,a2,0x3
    80201222:	03260633          	mul	a2,a2,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201226:	00c6161b          	slliw	a2,a2,0xc
    8020122a:	1602                	slli	a2,a2,0x20
    8020122c:	9201                	srli	a2,a2,0x20
    pageInsert(kernelPageDirectory, 1ll << 35, page2pa(p), PTE_READ | PTE_WRITE);
    8020122e:	4699                	li	a3,6
    80201230:	9626                	add	a2,a2,s1
    80201232:	023a1593          	slli	a1,s4,0x23
    80201236:	001ef517          	auipc	a0,0x1ef
    8020123a:	dca50513          	addi	a0,a0,-566 # 803f0000 <_pgdir>
    8020123e:	00000097          	auipc	ra,0x0
    80201242:	69e080e7          	jalr	1694(ra) # 802018dc <pageInsert>
    return page - pages;
    80201246:	fa843783          	ld	a5,-88(s0)
    8020124a:	413787b3          	sub	a5,a5,s3
    8020124e:	878d                	srai	a5,a5,0x3
    80201250:	032787b3          	mul	a5,a5,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201254:	00c7979b          	slliw	a5,a5,0xc
    80201258:	1782                	slli	a5,a5,0x20
    8020125a:	9381                	srli	a5,a5,0x20
    *((u32*)page2pa(p)) = 147893;
    8020125c:	97a6                	add	a5,a5,s1
    8020125e:	00024737          	lui	a4,0x24
    80201262:	1b570713          	addi	a4,a4,437 # 241b5 <_start-0x801dbe4b>
    80201266:	c398                	sw	a4,0(a5)
    printf("value1 of %lx:  %d\n", 1ll << 35, *((u32*)(1ll<<35)));
    80201268:	1a0e                	slli	s4,s4,0x23
    8020126a:	000a2603          	lw	a2,0(s4)
    8020126e:	85d2                	mv	a1,s4
    80201270:	00008517          	auipc	a0,0x8
    80201274:	02050513          	addi	a0,a0,32 # 80209290 <digits+0x1f0>
    80201278:	fffff097          	auipc	ra,0xfffff
    8020127c:	23e080e7          	jalr	574(ra) # 802004b6 <printf>
    pageAlloc(&p);
    80201280:	fa840513          	addi	a0,s0,-88
    80201284:	00000097          	auipc	ra,0x0
    80201288:	2de080e7          	jalr	734(ra) # 80201562 <pageAlloc>
    return page - pages;
    8020128c:	fa843583          	ld	a1,-88(s0)
    80201290:	413585b3          	sub	a1,a1,s3
    80201294:	858d                	srai	a1,a1,0x3
    80201296:	032585b3          	mul	a1,a1,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020129a:	00c5959b          	slliw	a1,a1,0xc
    8020129e:	1582                	slli	a1,a1,0x20
    802012a0:	9181                	srli	a1,a1,0x20
    printf("alloced page2:  %lx\n", page2pa(p));
    802012a2:	95a6                	add	a1,a1,s1
    802012a4:	00008517          	auipc	a0,0x8
    802012a8:	00450513          	addi	a0,a0,4 # 802092a8 <digits+0x208>
    802012ac:	fffff097          	auipc	ra,0xfffff
    802012b0:	20a080e7          	jalr	522(ra) # 802004b6 <printf>
    return page - pages;
    802012b4:	fa843603          	ld	a2,-88(s0)
    802012b8:	41360633          	sub	a2,a2,s3
    802012bc:	860d                	srai	a2,a2,0x3
    802012be:	03260633          	mul	a2,a2,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802012c2:	00c6161b          	slliw	a2,a2,0xc
    802012c6:	1602                	slli	a2,a2,0x20
    802012c8:	9201                	srli	a2,a2,0x20
    pageInsert(kernelPageDirectory, 1ll << 35, page2pa(p), PTE_READ | PTE_WRITE);
    802012ca:	4699                	li	a3,6
    802012cc:	9626                	add	a2,a2,s1
    802012ce:	85d2                	mv	a1,s4
    802012d0:	001ef517          	auipc	a0,0x1ef
    802012d4:	d3050513          	addi	a0,a0,-720 # 803f0000 <_pgdir>
    802012d8:	00000097          	auipc	ra,0x0
    802012dc:	604080e7          	jalr	1540(ra) # 802018dc <pageInsert>
    return page - pages;
    802012e0:	fa843783          	ld	a5,-88(s0)
    802012e4:	413787b3          	sub	a5,a5,s3
    802012e8:	878d                	srai	a5,a5,0x3
    802012ea:	032787b3          	mul	a5,a5,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802012ee:	00c7979b          	slliw	a5,a5,0xc
    802012f2:	1782                	slli	a5,a5,0x20
    802012f4:	9381                	srli	a5,a5,0x20
    *((u32*)page2pa(p)) = 65536;
    802012f6:	94be                	add	s1,s1,a5
    802012f8:	67c1                	lui	a5,0x10
    802012fa:	c09c                	sw	a5,0(s1)
    printf("value1 of %lx:  %d\n", 1ll << 35, *((u32*)(1ll<<35)));
    802012fc:	000a2603          	lw	a2,0(s4)
    80201300:	85d2                	mv	a1,s4
    80201302:	00008517          	auipc	a0,0x8
    80201306:	f8e50513          	addi	a0,a0,-114 # 80209290 <digits+0x1f0>
    8020130a:	fffff097          	auipc	ra,0xfffff
    8020130e:	1ac080e7          	jalr	428(ra) # 802004b6 <printf>
    testMemory();
    printf("Test memory finish!\n");
    80201312:	00008517          	auipc	a0,0x8
    80201316:	fae50513          	addi	a0,a0,-82 # 802092c0 <digits+0x220>
    8020131a:	fffff097          	auipc	ra,0xfffff
    8020131e:	19c080e7          	jalr	412(ra) # 802004b6 <printf>
}
    80201322:	60e6                	ld	ra,88(sp)
    80201324:	6446                	ld	s0,80(sp)
    80201326:	64a6                	ld	s1,72(sp)
    80201328:	6906                	ld	s2,64(sp)
    8020132a:	79e2                	ld	s3,56(sp)
    8020132c:	7a42                	ld	s4,48(sp)
    8020132e:	7aa2                	ld	s5,40(sp)
    80201330:	7b02                	ld	s6,32(sp)
    80201332:	6be2                	ld	s7,24(sp)
    80201334:	6125                	addi	sp,sp,96
    80201336:	8082                	ret
    LIST_INIT(&freePages);
    80201338:	00157797          	auipc	a5,0x157
    8020133c:	0e07b423          	sd	zero,232(a5) # 80358420 <freePages>
    for (i = 0; i < n; i++) {
    80201340:	834a                	mv	t1,s2
    80201342:	b6ed                	j	80200f2c <memoryInit+0x7e>

0000000080201344 <bcopy>:

void bcopy(void *src, void *dst, u32 len) {
    80201344:	1141                	addi	sp,sp,-16
    80201346:	e422                	sd	s0,8(sp)
    80201348:	0800                	addi	s0,sp,16
    void *finish = src + len;
    8020134a:	02061693          	slli	a3,a2,0x20
    8020134e:	9281                	srli	a3,a3,0x20
    80201350:	96aa                	add	a3,a3,a0

    if (len <= 7) {
    80201352:	479d                	li	a5,7
    80201354:	06c7f063          	bgeu	a5,a2,802013b4 <bcopy+0x70>
            src++;
            dst++;
        }
        return;
    }
    while (((u64)src) & 7) {
    80201358:	00757793          	andi	a5,a0,7
    8020135c:	cb91                	beqz	a5,80201370 <bcopy+0x2c>
        *(u8*)dst = *(u8*)src;
    8020135e:	00054783          	lbu	a5,0(a0)
    80201362:	00f58023          	sb	a5,0(a1) # 4000000 <_start-0x7c200000>
        src++;
    80201366:	0505                	addi	a0,a0,1
        dst++;
    80201368:	0585                	addi	a1,a1,1
    while (((u64)src) & 7) {
    8020136a:	00757793          	andi	a5,a0,7
    8020136e:	fbe5                	bnez	a5,8020135e <bcopy+0x1a>
    }
    while (src + 7 < finish) {
    80201370:	00750793          	addi	a5,a0,7
    80201374:	04d7fb63          	bgeu	a5,a3,802013ca <bcopy+0x86>
    80201378:	ff868813          	addi	a6,a3,-8
    8020137c:	40a80833          	sub	a6,a6,a0
    80201380:	ff887813          	andi	a6,a6,-8
    80201384:	0821                	addi	a6,a6,8
    80201386:	010507b3          	add	a5,a0,a6
    8020138a:	872e                	mv	a4,a1
        *(u64*)dst = *(u64*)src;
    8020138c:	6110                	ld	a2,0(a0)
    8020138e:	e310                	sd	a2,0(a4)
        src += 8;
    80201390:	0521                	addi	a0,a0,8
        dst += 8;
    80201392:	0721                	addi	a4,a4,8
    while (src + 7 < finish) {
    80201394:	fef51ce3          	bne	a0,a5,8020138c <bcopy+0x48>
        dst += 8;
    80201398:	95c2                	add	a1,a1,a6
    }
    while (src < finish){
    8020139a:	00d7fa63          	bgeu	a5,a3,802013ae <bcopy+0x6a>
        *(u8*)dst = *(u8*)src;
    8020139e:	0007c703          	lbu	a4,0(a5)
    802013a2:	00e58023          	sb	a4,0(a1)
        src++;
    802013a6:	0785                	addi	a5,a5,1
        dst++;
    802013a8:	0585                	addi	a1,a1,1
    while (src < finish){
    802013aa:	fef69ae3          	bne	a3,a5,8020139e <bcopy+0x5a>
        
    }
}
    802013ae:	6422                	ld	s0,8(sp)
    802013b0:	0141                	addi	sp,sp,16
    802013b2:	8082                	ret
        while (src < finish) {
    802013b4:	fed57de3          	bgeu	a0,a3,802013ae <bcopy+0x6a>
            *(u8*)dst = *(u8*)src;
    802013b8:	00054783          	lbu	a5,0(a0)
    802013bc:	00f58023          	sb	a5,0(a1)
            src++;
    802013c0:	0505                	addi	a0,a0,1
            dst++;
    802013c2:	0585                	addi	a1,a1,1
        while (src < finish) {
    802013c4:	fea69ae3          	bne	a3,a0,802013b8 <bcopy+0x74>
    802013c8:	b7dd                	j	802013ae <bcopy+0x6a>
    while (src + 7 < finish) {
    802013ca:	87aa                	mv	a5,a0
    802013cc:	b7f9                	j	8020139a <bcopy+0x56>

00000000802013ce <bzero>:

void bzero(void *start, u32 len) {
    802013ce:	1141                	addi	sp,sp,-16
    802013d0:	e422                	sd	s0,8(sp)
    802013d2:	0800                	addi	s0,sp,16
    void *finish = start + len;
    802013d4:	02059713          	slli	a4,a1,0x20
    802013d8:	9301                	srli	a4,a4,0x20
    802013da:	972a                	add	a4,a4,a0

    if (len <= 7) {
    802013dc:	479d                	li	a5,7
    802013de:	04b7f463          	bgeu	a5,a1,80201426 <bzero+0x58>
        while (start < finish) {
            *(u8*)start++ = 0;
        }
        return;
    }
    while (((u64) start) & 7) {
    802013e2:	00757793          	andi	a5,a0,7
    802013e6:	c799                	beqz	a5,802013f4 <bzero+0x26>
        *(u8*)start++ = 0;
    802013e8:	0505                	addi	a0,a0,1
    802013ea:	fe050fa3          	sb	zero,-1(a0)
    while (((u64) start) & 7) {
    802013ee:	00757793          	andi	a5,a0,7
    802013f2:	fbfd                	bnez	a5,802013e8 <bzero+0x1a>
    }
    while (start + 7 < finish) {
    802013f4:	00750793          	addi	a5,a0,7
    802013f8:	02e7ff63          	bgeu	a5,a4,80201436 <bzero+0x68>
    802013fc:	ff870793          	addi	a5,a4,-8
    80201400:	8f89                	sub	a5,a5,a0
    80201402:	9be1                	andi	a5,a5,-8
    80201404:	07a1                	addi	a5,a5,8
    80201406:	97aa                	add	a5,a5,a0
        *(u64*)start = 0;
    80201408:	00053023          	sd	zero,0(a0)
        start += 8;
    8020140c:	0521                	addi	a0,a0,8
    while (start + 7 < finish) {
    8020140e:	fef51de3          	bne	a0,a5,80201408 <bzero+0x3a>
    }
    while (start < finish) {
    80201412:	00e7f763          	bgeu	a5,a4,80201420 <bzero+0x52>
        *(u8*)start++ = 0;
    80201416:	0785                	addi	a5,a5,1
    80201418:	fe078fa3          	sb	zero,-1(a5)
    while (start < finish) {
    8020141c:	fef71de3          	bne	a4,a5,80201416 <bzero+0x48>
    }
    80201420:	6422                	ld	s0,8(sp)
    80201422:	0141                	addi	sp,sp,16
    80201424:	8082                	ret
        while (start < finish) {
    80201426:	fee57de3          	bgeu	a0,a4,80201420 <bzero+0x52>
            *(u8*)start++ = 0;
    8020142a:	0505                	addi	a0,a0,1
    8020142c:	fe050fa3          	sb	zero,-1(a0)
        while (start < finish) {
    80201430:	fea71de3          	bne	a4,a0,8020142a <bzero+0x5c>
    80201434:	b7f5                	j	80201420 <bzero+0x52>
    while (start + 7 < finish) {
    80201436:	87aa                	mv	a5,a0
    80201438:	bfe9                	j	80201412 <bzero+0x44>

000000008020143a <paDecreaseRef>:
        LIST_INSERT_HEAD(&freePages, page, link);
        releaseLock(&pageListLock);
    }
}

static void paDecreaseRef(u64 pa) {
    8020143a:	1101                	addi	sp,sp,-32
    8020143c:	ec06                	sd	ra,24(sp)
    8020143e:	e822                	sd	s0,16(sp)
    80201440:	e426                	sd	s1,8(sp)
    80201442:	1000                	addi	s0,sp,32
}

inline PhysicalPage* pa2page(u64 pa) {
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80201444:	800007b7          	lui	a5,0x80000
    80201448:	953e                	add	a0,a0,a5
    8020144a:	8131                	srli	a0,a0,0xc
    return pages + ppn;
    8020144c:	1502                	slli	a0,a0,0x20
    8020144e:	9101                	srli	a0,a0,0x20
    80201450:	00151493          	slli	s1,a0,0x1
    80201454:	94aa                	add	s1,s1,a0
    80201456:	048e                	slli	s1,s1,0x3
    80201458:	00097797          	auipc	a5,0x97
    8020145c:	fc878793          	addi	a5,a5,-56 # 80298420 <pages>
    80201460:	94be                	add	s1,s1,a5
    PhysicalPage *page = pa2page(pa);
    page->ref--;
    80201462:	489c                	lw	a5,16(s1)
    80201464:	37fd                	addiw	a5,a5,-1
    80201466:	0007869b          	sext.w	a3,a5
    8020146a:	c89c                	sw	a5,16(s1)
    assert(page->ref==0);
    8020146c:	0016b693          	seqz	a3,a3
    80201470:	00008617          	auipc	a2,0x8
    80201474:	f4060613          	addi	a2,a2,-192 # 802093b0 <__func__.3>
    80201478:	06b00593          	li	a1,107
    8020147c:	00008517          	auipc	a0,0x8
    80201480:	e5c50513          	addi	a0,a0,-420 # 802092d8 <digits+0x238>
    80201484:	fffff097          	auipc	ra,0xfffff
    80201488:	132080e7          	jalr	306(ra) # 802005b6 <_assert_>
    if (page->ref == 0) {
    8020148c:	489c                	lw	a5,16(s1)
    8020148e:	c791                	beqz	a5,8020149a <paDecreaseRef+0x60>
        acquireLock(&pageListLock);
        LIST_INSERT_HEAD(&freePages, page, link);
        releaseLock(&pageListLock);
    }
}
    80201490:	60e2                	ld	ra,24(sp)
    80201492:	6442                	ld	s0,16(sp)
    80201494:	64a2                	ld	s1,8(sp)
    80201496:	6105                	addi	sp,sp,32
    80201498:	8082                	ret
        acquireLock(&pageListLock);
    8020149a:	00157517          	auipc	a0,0x157
    8020149e:	f8e50513          	addi	a0,a0,-114 # 80358428 <pageListLock>
    802014a2:	00002097          	auipc	ra,0x2
    802014a6:	410080e7          	jalr	1040(ra) # 802038b2 <acquireLock>
        LIST_INSERT_HEAD(&freePages, page, link);
    802014aa:	00157797          	auipc	a5,0x157
    802014ae:	f767b783          	ld	a5,-138(a5) # 80358420 <freePages>
    802014b2:	e09c                	sd	a5,0(s1)
    802014b4:	c391                	beqz	a5,802014b8 <paDecreaseRef+0x7e>
    802014b6:	e784                	sd	s1,8(a5)
    802014b8:	00157797          	auipc	a5,0x157
    802014bc:	f6878793          	addi	a5,a5,-152 # 80358420 <freePages>
    802014c0:	e384                	sd	s1,0(a5)
    802014c2:	e49c                	sd	a5,8(s1)
        releaseLock(&pageListLock);
    802014c4:	00157517          	auipc	a0,0x157
    802014c8:	f6450513          	addi	a0,a0,-156 # 80358428 <pageListLock>
    802014cc:	00002097          	auipc	ra,0x2
    802014d0:	44a080e7          	jalr	1098(ra) # 80203916 <releaseLock>
}
    802014d4:	bf75                	j	80201490 <paDecreaseRef+0x56>

00000000802014d6 <pageLockInit>:
inline void pageLockInit(void) {
    802014d6:	1141                	addi	sp,sp,-16
    802014d8:	e406                	sd	ra,8(sp)
    802014da:	e022                	sd	s0,0(sp)
    802014dc:	0800                	addi	s0,sp,16
    initLock(&pageListLock, "pageListLock");
    802014de:	00008597          	auipc	a1,0x8
    802014e2:	e0258593          	addi	a1,a1,-510 # 802092e0 <digits+0x240>
    802014e6:	00157517          	auipc	a0,0x157
    802014ea:	f4250513          	addi	a0,a0,-190 # 80358428 <pageListLock>
    802014ee:	00002097          	auipc	ra,0x2
    802014f2:	37a080e7          	jalr	890(ra) # 80203868 <initLock>
    initLock(&cowBufferLock, "cowBufferLock");
    802014f6:	00008597          	auipc	a1,0x8
    802014fa:	dfa58593          	addi	a1,a1,-518 # 802092f0 <digits+0x250>
    802014fe:	00157517          	auipc	a0,0x157
    80201502:	f4250513          	addi	a0,a0,-190 # 80358440 <cowBufferLock>
    80201506:	00002097          	auipc	ra,0x2
    8020150a:	362080e7          	jalr	866(ra) # 80203868 <initLock>
}
    8020150e:	60a2                	ld	ra,8(sp)
    80201510:	6402                	ld	s0,0(sp)
    80201512:	0141                	addi	sp,sp,16
    80201514:	8082                	ret

0000000080201516 <countFreePages>:
int countFreePages() {
    80201516:	1101                	addi	sp,sp,-32
    80201518:	ec06                	sd	ra,24(sp)
    8020151a:	e822                	sd	s0,16(sp)
    8020151c:	e426                	sd	s1,8(sp)
    8020151e:	1000                	addi	s0,sp,32
    acquireLock(&pageListLock);
    80201520:	00157517          	auipc	a0,0x157
    80201524:	f0850513          	addi	a0,a0,-248 # 80358428 <pageListLock>
    80201528:	00002097          	auipc	ra,0x2
    8020152c:	38a080e7          	jalr	906(ra) # 802038b2 <acquireLock>
    LIST_FOREACH(page, &freePages, link)
    80201530:	00157797          	auipc	a5,0x157
    80201534:	ef07b783          	ld	a5,-272(a5) # 80358420 <freePages>
    80201538:	c39d                	beqz	a5,8020155e <countFreePages+0x48>
    int count = 0;
    8020153a:	4481                	li	s1,0
        count++;
    8020153c:	2485                	addiw	s1,s1,1
    LIST_FOREACH(page, &freePages, link)
    8020153e:	639c                	ld	a5,0(a5)
    80201540:	fff5                	bnez	a5,8020153c <countFreePages+0x26>
    releaseLock(&pageListLock);
    80201542:	00157517          	auipc	a0,0x157
    80201546:	ee650513          	addi	a0,a0,-282 # 80358428 <pageListLock>
    8020154a:	00002097          	auipc	ra,0x2
    8020154e:	3cc080e7          	jalr	972(ra) # 80203916 <releaseLock>
}
    80201552:	8526                	mv	a0,s1
    80201554:	60e2                	ld	ra,24(sp)
    80201556:	6442                	ld	s0,16(sp)
    80201558:	64a2                	ld	s1,8(sp)
    8020155a:	6105                	addi	sp,sp,32
    8020155c:	8082                	ret
    int count = 0;
    8020155e:	4481                	li	s1,0
    80201560:	b7cd                	j	80201542 <countFreePages+0x2c>

0000000080201562 <pageAlloc>:
int pageAlloc(PhysicalPage **pp) {
    80201562:	1101                	addi	sp,sp,-32
    80201564:	ec06                	sd	ra,24(sp)
    80201566:	e822                	sd	s0,16(sp)
    80201568:	e426                	sd	s1,8(sp)
    8020156a:	e04a                	sd	s2,0(sp)
    8020156c:	1000                	addi	s0,sp,32
    8020156e:	892a                	mv	s2,a0
    acquireLock(&pageListLock);
    80201570:	00157517          	auipc	a0,0x157
    80201574:	eb850513          	addi	a0,a0,-328 # 80358428 <pageListLock>
    80201578:	00002097          	auipc	ra,0x2
    8020157c:	33a080e7          	jalr	826(ra) # 802038b2 <acquireLock>
    if ((page = LIST_FIRST(&freePages)) != NULL) {
    80201580:	00157497          	auipc	s1,0x157
    80201584:	ea04b483          	ld	s1,-352(s1) # 80358420 <freePages>
    80201588:	c4a5                	beqz	s1,802015f0 <pageAlloc+0x8e>
        *pp = page;
    8020158a:	00993023          	sd	s1,0(s2)
    asm volatile("mv %0, tp" : "=r" (x) );
    8020158e:	8792                	mv	a5,tp
        page->hartId = r_hartid();
    80201590:	c8dc                	sw	a5,20(s1)
        LIST_REMOVE(page, link);
    80201592:	609c                	ld	a5,0(s1)
    80201594:	c399                	beqz	a5,8020159a <pageAlloc+0x38>
    80201596:	6498                	ld	a4,8(s1)
    80201598:	e798                	sd	a4,8(a5)
    8020159a:	649c                	ld	a5,8(s1)
    8020159c:	6098                	ld	a4,0(s1)
    8020159e:	e398                	sd	a4,0(a5)
        releaseLock(&pageListLock);
    802015a0:	00157517          	auipc	a0,0x157
    802015a4:	e8850513          	addi	a0,a0,-376 # 80358428 <pageListLock>
    802015a8:	00002097          	auipc	ra,0x2
    802015ac:	36e080e7          	jalr	878(ra) # 80203916 <releaseLock>
    return page - pages;
    802015b0:	00097797          	auipc	a5,0x97
    802015b4:	e7078793          	addi	a5,a5,-400 # 80298420 <pages>
    802015b8:	40f487b3          	sub	a5,s1,a5
    802015bc:	878d                	srai	a5,a5,0x3
    802015be:	00008717          	auipc	a4,0x8
    802015c2:	6fa73703          	ld	a4,1786(a4) # 80209cb8 <__func__.0+0x8>
    802015c6:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802015ca:	00c7979b          	slliw	a5,a5,0xc
    802015ce:	1782                	slli	a5,a5,0x20
    802015d0:	9381                	srli	a5,a5,0x20
        bzero((void*)page2pa(page), PAGE_SIZE);
    802015d2:	6585                	lui	a1,0x1
    802015d4:	4505                	li	a0,1
    802015d6:	057e                	slli	a0,a0,0x1f
    802015d8:	953e                	add	a0,a0,a5
    802015da:	00000097          	auipc	ra,0x0
    802015de:	df4080e7          	jalr	-524(ra) # 802013ce <bzero>
        return 0;
    802015e2:	4501                	li	a0,0
}
    802015e4:	60e2                	ld	ra,24(sp)
    802015e6:	6442                	ld	s0,16(sp)
    802015e8:	64a2                	ld	s1,8(sp)
    802015ea:	6902                	ld	s2,0(sp)
    802015ec:	6105                	addi	sp,sp,32
    802015ee:	8082                	ret
    releaseLock(&pageListLock);
    802015f0:	00157517          	auipc	a0,0x157
    802015f4:	e3850513          	addi	a0,a0,-456 # 80358428 <pageListLock>
    802015f8:	00002097          	auipc	ra,0x2
    802015fc:	31e080e7          	jalr	798(ra) # 80203916 <releaseLock>
    printf("there's no physical page left!\n");
    80201600:	00008517          	auipc	a0,0x8
    80201604:	d0050513          	addi	a0,a0,-768 # 80209300 <digits+0x260>
    80201608:	fffff097          	auipc	ra,0xfffff
    8020160c:	eae080e7          	jalr	-338(ra) # 802004b6 <printf>
    *pp = NULL;
    80201610:	00093023          	sd	zero,0(s2)
    return -NO_FREE_MEMORY;
    80201614:	5571                	li	a0,-4
    80201616:	b7f9                	j	802015e4 <pageAlloc+0x82>

0000000080201618 <pageWalk>:
static int pageWalk(u64 *pgdir, u64 va, bool create, u64 **pte) {
    80201618:	7159                	addi	sp,sp,-112
    8020161a:	f486                	sd	ra,104(sp)
    8020161c:	f0a2                	sd	s0,96(sp)
    8020161e:	eca6                	sd	s1,88(sp)
    80201620:	e8ca                	sd	s2,80(sp)
    80201622:	e4ce                	sd	s3,72(sp)
    80201624:	e0d2                	sd	s4,64(sp)
    80201626:	fc56                	sd	s5,56(sp)
    80201628:	f85a                	sd	s6,48(sp)
    8020162a:	f45e                	sd	s7,40(sp)
    8020162c:	f062                	sd	s8,32(sp)
    8020162e:	ec66                	sd	s9,24(sp)
    80201630:	e86a                	sd	s10,16(sp)
    80201632:	1880                	addi	s0,sp,112
    80201634:	892e                	mv	s2,a1
    80201636:	8b32                	mv	s6,a2
    80201638:	8ab6                	mv	s5,a3
    8020163a:	49f9                	li	s3,30
    return page - pages;
    8020163c:	00097d17          	auipc	s10,0x97
    80201640:	de4d0d13          	addi	s10,s10,-540 # 80298420 <pages>
    80201644:	00008c97          	auipc	s9,0x8
    80201648:	674c8c93          	addi	s9,s9,1652 # 80209cb8 <__func__.0+0x8>
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020164c:	4b85                	li	s7,1
    8020164e:	0bfe                	slli	s7,s7,0x1f
        addr = (u64*)PTE2PA(*addr);
    80201650:	fff00a37          	lui	s4,0xfff00
    80201654:	008a5a13          	srli	s4,s4,0x8
    for (level = 2; level > 0; level--) {
    80201658:	4c31                	li	s8,12
    8020165a:	a821                	j	80201672 <pageWalk+0x5a>
                *pte = NULL;
    8020165c:	000ab023          	sd	zero,0(s5) # 1000 <_start-0x801ff000>
                return 0;
    80201660:	4501                	li	a0,0
    80201662:	a895                	j	802016d6 <pageWalk+0xbe>
        addr = (u64*)PTE2PA(*addr);
    80201664:	6088                	ld	a0,0(s1)
    80201666:	050a                	slli	a0,a0,0x2
    80201668:	01457533          	and	a0,a0,s4
    for (level = 2; level > 0; level--) {
    8020166c:	39dd                	addiw	s3,s3,-9
    8020166e:	05898b63          	beq	s3,s8,802016c4 <pageWalk+0xac>
        addr += GET_PAGE_TABLE_INDEX(va, level);
    80201672:	013957b3          	srl	a5,s2,s3
    80201676:	1ff7f793          	andi	a5,a5,511
    8020167a:	078e                	slli	a5,a5,0x3
    8020167c:	00f504b3          	add	s1,a0,a5
        if (!(*addr) & PTE_VALID) {
    80201680:	609c                	ld	a5,0(s1)
    80201682:	f3ed                	bnez	a5,80201664 <pageWalk+0x4c>
            if (!create) {
    80201684:	fc0b0ce3          	beqz	s6,8020165c <pageWalk+0x44>
            int ret = pageAlloc(&pp);
    80201688:	f9840513          	addi	a0,s0,-104
    8020168c:	00000097          	auipc	ra,0x0
    80201690:	ed6080e7          	jalr	-298(ra) # 80201562 <pageAlloc>
            if (ret < 0) {
    80201694:	04054163          	bltz	a0,802016d6 <pageWalk+0xbe>
            (*addr) = page2pte(pp) | PTE_VALID;
    80201698:	f9843703          	ld	a4,-104(s0)
    return page - pages;
    8020169c:	41a707b3          	sub	a5,a4,s10
    802016a0:	878d                	srai	a5,a5,0x3
    802016a2:	000cb683          	ld	a3,0(s9)
    802016a6:	02d787b3          	mul	a5,a5,a3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802016aa:	00c7979b          	slliw	a5,a5,0xc
    802016ae:	1782                	slli	a5,a5,0x20
    802016b0:	9381                	srli	a5,a5,0x20
    802016b2:	97de                	add	a5,a5,s7
#define PTE2PERM(pte) (((u64)(pte)) & ~((1ull << 54) - (1ull << 10)))
#define PTE2PA(pte) (((((u64)(pte)) & ((1ull << 54) - (1ull << 10))) >> PERM_WIDTH) << PAGE_SHIFT)
#define PA2PTE(pa) ((((u64)(pa)) >> PAGE_SHIFT) << PERM_WIDTH)

inline u64 page2pte(PhysicalPage *page) {
    return (page2pa(page) >> PAGE_SHIFT) << PERM_WIDTH;
    802016b4:	8389                	srli	a5,a5,0x2
    802016b6:	0017e793          	ori	a5,a5,1
    802016ba:	e09c                	sd	a5,0(s1)
            pp->ref++;
    802016bc:	4b1c                	lw	a5,16(a4)
    802016be:	2785                	addiw	a5,a5,1
    802016c0:	cb1c                	sw	a5,16(a4)
    802016c2:	b74d                	j	80201664 <pageWalk+0x4c>
    *pte = addr + GET_PAGE_TABLE_INDEX(va, 0);
    802016c4:	00c95913          	srli	s2,s2,0xc
    802016c8:	1ff97913          	andi	s2,s2,511
    802016cc:	090e                	slli	s2,s2,0x3
    802016ce:	954a                	add	a0,a0,s2
    802016d0:	00aab023          	sd	a0,0(s5)
    return 0;
    802016d4:	4501                	li	a0,0
}
    802016d6:	70a6                	ld	ra,104(sp)
    802016d8:	7406                	ld	s0,96(sp)
    802016da:	64e6                	ld	s1,88(sp)
    802016dc:	6946                	ld	s2,80(sp)
    802016de:	69a6                	ld	s3,72(sp)
    802016e0:	6a06                	ld	s4,64(sp)
    802016e2:	7ae2                	ld	s5,56(sp)
    802016e4:	7b42                	ld	s6,48(sp)
    802016e6:	7ba2                	ld	s7,40(sp)
    802016e8:	7c02                	ld	s8,32(sp)
    802016ea:	6ce2                	ld	s9,24(sp)
    802016ec:	6d42                	ld	s10,16(sp)
    802016ee:	6165                	addi	sp,sp,112
    802016f0:	8082                	ret

00000000802016f2 <pageLookup>:
u64 pageLookup(u64 *pgdir, u64 va, u64 **pte) {
    802016f2:	7179                	addi	sp,sp,-48
    802016f4:	f406                	sd	ra,40(sp)
    802016f6:	f022                	sd	s0,32(sp)
    802016f8:	ec26                	sd	s1,24(sp)
    802016fa:	1800                	addi	s0,sp,48
    802016fc:	84b2                	mv	s1,a2
    pageWalk(pgdir, va, false, &entry);
    802016fe:	fd840693          	addi	a3,s0,-40
    80201702:	4601                	li	a2,0
    80201704:	00000097          	auipc	ra,0x0
    80201708:	f14080e7          	jalr	-236(ra) # 80201618 <pageWalk>
    if (entry == NULL || !(*entry & PTE_VALID)) {
    8020170c:	fd843783          	ld	a5,-40(s0)
    80201710:	c38d                	beqz	a5,80201732 <pageLookup+0x40>
    80201712:	6388                	ld	a0,0(a5)
    80201714:	8905                	andi	a0,a0,1
    80201716:	c909                	beqz	a0,80201728 <pageLookup+0x36>
    if (pte) {
    80201718:	c091                	beqz	s1,8020171c <pageLookup+0x2a>
        *pte = entry;
    8020171a:	e09c                	sd	a5,0(s1)
    return PTE2PA(*entry);
    8020171c:	6388                	ld	a0,0(a5)
    8020171e:	050a                	slli	a0,a0,0x2
    80201720:	fff007b7          	lui	a5,0xfff00
    80201724:	83a1                	srli	a5,a5,0x8
    80201726:	8d7d                	and	a0,a0,a5
}
    80201728:	70a2                	ld	ra,40(sp)
    8020172a:	7402                	ld	s0,32(sp)
    8020172c:	64e2                	ld	s1,24(sp)
    8020172e:	6145                	addi	sp,sp,48
    80201730:	8082                	ret
        return 0;
    80201732:	4501                	li	a0,0
    80201734:	bfd5                	j	80201728 <pageLookup+0x36>

0000000080201736 <pageFree>:
    if (page->ref > 0) {
    80201736:	491c                	lw	a5,16(a0)
    80201738:	c391                	beqz	a5,8020173c <pageFree+0x6>
    8020173a:	8082                	ret
void pageFree(PhysicalPage *page) {
    8020173c:	1101                	addi	sp,sp,-32
    8020173e:	ec06                	sd	ra,24(sp)
    80201740:	e822                	sd	s0,16(sp)
    80201742:	e426                	sd	s1,8(sp)
    80201744:	1000                	addi	s0,sp,32
    80201746:	84aa                	mv	s1,a0
        acquireLock(&pageListLock);
    80201748:	00157517          	auipc	a0,0x157
    8020174c:	ce050513          	addi	a0,a0,-800 # 80358428 <pageListLock>
    80201750:	00002097          	auipc	ra,0x2
    80201754:	162080e7          	jalr	354(ra) # 802038b2 <acquireLock>
        LIST_INSERT_HEAD(&freePages, page, link);
    80201758:	00157797          	auipc	a5,0x157
    8020175c:	cc87b783          	ld	a5,-824(a5) # 80358420 <freePages>
    80201760:	e09c                	sd	a5,0(s1)
    80201762:	c391                	beqz	a5,80201766 <pageFree+0x30>
    80201764:	e784                	sd	s1,8(a5)
    80201766:	00157797          	auipc	a5,0x157
    8020176a:	cba78793          	addi	a5,a5,-838 # 80358420 <freePages>
    8020176e:	e384                	sd	s1,0(a5)
    80201770:	e49c                	sd	a5,8(s1)
        releaseLock(&pageListLock);
    80201772:	00157517          	auipc	a0,0x157
    80201776:	cb650513          	addi	a0,a0,-842 # 80358428 <pageListLock>
    8020177a:	00002097          	auipc	ra,0x2
    8020177e:	19c080e7          	jalr	412(ra) # 80203916 <releaseLock>
}
    80201782:	60e2                	ld	ra,24(sp)
    80201784:	6442                	ld	s0,16(sp)
    80201786:	64a2                	ld	s1,8(sp)
    80201788:	6105                	addi	sp,sp,32
    8020178a:	8082                	ret

000000008020178c <pageRemove>:
static void pageRemove(u64 *pgdir, u64 va) {
    8020178c:	1101                	addi	sp,sp,-32
    8020178e:	ec06                	sd	ra,24(sp)
    80201790:	e822                	sd	s0,16(sp)
    80201792:	1000                	addi	s0,sp,32
    u64 pa = pageLookup(pgdir, va, &pte);
    80201794:	fe840613          	addi	a2,s0,-24
    80201798:	00000097          	auipc	ra,0x0
    8020179c:	f5a080e7          	jalr	-166(ra) # 802016f2 <pageLookup>
    if (pa < PHYSICAL_ADDRESS_BASE || pa >= PHYSICAL_MEMORY_TOP) {
    802017a0:	800007b7          	lui	a5,0x80000
    802017a4:	953e                	add	a0,a0,a5
    802017a6:	080007b7          	lui	a5,0x8000
    802017aa:	00f56663          	bltu	a0,a5,802017b6 <pageRemove+0x2a>
}
    802017ae:	60e2                	ld	ra,24(sp)
    802017b0:	6442                	ld	s0,16(sp)
    802017b2:	6105                	addi	sp,sp,32
    802017b4:	8082                	ret
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    802017b6:	8131                	srli	a0,a0,0xc
    return pages + ppn;
    802017b8:	00151793          	slli	a5,a0,0x1
    802017bc:	953e                	add	a0,a0,a5
    802017be:	050e                	slli	a0,a0,0x3
    802017c0:	00097797          	auipc	a5,0x97
    802017c4:	c6078793          	addi	a5,a5,-928 # 80298420 <pages>
    802017c8:	953e                	add	a0,a0,a5
    page->ref--;
    802017ca:	491c                	lw	a5,16(a0)
    802017cc:	37fd                	addiw	a5,a5,-1
    802017ce:	c91c                	sw	a5,16(a0)
    pageFree(page);
    802017d0:	00000097          	auipc	ra,0x0
    802017d4:	f66080e7          	jalr	-154(ra) # 80201736 <pageFree>
    *pte = 0;
    802017d8:	fe843783          	ld	a5,-24(s0)
    802017dc:	0007b023          	sd	zero,0(a5)
    802017e0:	b7f9                	j	802017ae <pageRemove+0x22>

00000000802017e2 <pgdirFree>:

void pgdirFree(u64* pgdir) {
    802017e2:	7119                	addi	sp,sp,-128
    802017e4:	fc86                	sd	ra,120(sp)
    802017e6:	f8a2                	sd	s0,112(sp)
    802017e8:	f4a6                	sd	s1,104(sp)
    802017ea:	f0ca                	sd	s2,96(sp)
    802017ec:	ecce                	sd	s3,88(sp)
    802017ee:	e8d2                	sd	s4,80(sp)
    802017f0:	e4d6                	sd	s5,72(sp)
    802017f2:	e0da                	sd	s6,64(sp)
    802017f4:	fc5e                	sd	s7,56(sp)
    802017f6:	f862                	sd	s8,48(sp)
    802017f8:	f466                	sd	s9,40(sp)
    802017fa:	f06a                	sd	s10,32(sp)
    802017fc:	ec6e                	sd	s11,24(sp)
    802017fe:	0100                	addi	s0,sp,128
    80201800:	8b2a                	mv	s6,a0
    u64 i, j, k;
    u64* pageTable;
    for (i = 0; i < PTE2PT; i++) {
    80201802:	6785                	lui	a5,0x1
    80201804:	97aa                	add	a5,a5,a0
    80201806:	f8f43023          	sd	a5,-128(s0)
void pgdirFree(u64* pgdir) {
    8020180a:	f8a43423          	sd	a0,-120(s0)
    8020180e:	4d81                	li	s11,0
        if (!(pgdir[i] & PTE_VALID))
            continue;
        pageTable = pgdir + i;
        u64* pa = (u64*) PTE2PA(*pageTable);
    80201810:	fff00d37          	lui	s10,0xfff00
    80201814:	008d5d13          	srli	s10,s10,0x8
        for (j = 0; j < PTE2PT; j++) {
            if (!(pa[j] & PTE_VALID)) 
                continue;
            pageTable = (u64*) pa + j;
            u64* pa2 = (u64*) PTE2PA(*pageTable);
            for (k = 0; k < PTE2PT; k++) {
    80201818:	6985                	lui	s3,0x1
    8020181a:	00200a37          	lui	s4,0x200
    8020181e:	a041                	j	8020189e <pgdirFree+0xbc>
    80201820:	0921                	addi	s2,s2,8
    80201822:	94ce                	add	s1,s1,s3
    80201824:	01448e63          	beq	s1,s4,80201840 <pgdirFree+0x5e>
                if (!(pa2[k] & PTE_VALID)) 
    80201828:	00093783          	ld	a5,0(s2)
    8020182c:	8b85                	andi	a5,a5,1
    8020182e:	dbed                	beqz	a5,80201820 <pgdirFree+0x3e>
                    continue;
                u64 addr = (i << 30) | (j << 21) | (k << 12);
                pageRemove(pgdir, addr);
    80201830:	009ae5b3          	or	a1,s5,s1
    80201834:	855a                	mv	a0,s6
    80201836:	00000097          	auipc	ra,0x0
    8020183a:	f56080e7          	jalr	-170(ra) # 8020178c <pageRemove>
    8020183e:	b7cd                	j	80201820 <pgdirFree+0x3e>
            }
            pa2[j] = 0;
    80201840:	018b87b3          	add	a5,s7,s8
    80201844:	0007b023          	sd	zero,0(a5) # 1000 <_start-0x801ff000>
            paDecreaseRef((u64) pa2);
    80201848:	855e                	mv	a0,s7
    8020184a:	00000097          	auipc	ra,0x0
    8020184e:	bf0080e7          	jalr	-1040(ra) # 8020143a <paDecreaseRef>
        for (j = 0; j < PTE2PT; j++) {
    80201852:	0c21                	addi	s8,s8,8
    80201854:	033c0263          	beq	s8,s3,80201878 <pgdirFree+0x96>
            if (!(pa[j] & PTE_VALID)) 
    80201858:	018c87b3          	add	a5,s9,s8
    8020185c:	639c                	ld	a5,0(a5)
    8020185e:	0017f713          	andi	a4,a5,1
    80201862:	db65                	beqz	a4,80201852 <pgdirFree+0x70>
            u64* pa2 = (u64*) PTE2PA(*pageTable);
    80201864:	078a                	slli	a5,a5,0x2
    80201866:	01a7fbb3          	and	s7,a5,s10
                u64 addr = (i << 30) | (j << 21) | (k << 12);
    8020186a:	012c1a93          	slli	s5,s8,0x12
    8020186e:	01baeab3          	or	s5,s5,s11
    80201872:	895e                	mv	s2,s7
    80201874:	4481                	li	s1,0
    80201876:	bf4d                	j	80201828 <pgdirFree+0x46>
        }
        paDecreaseRef((u64) pa);
    80201878:	8566                	mv	a0,s9
    8020187a:	00000097          	auipc	ra,0x0
    8020187e:	bc0080e7          	jalr	-1088(ra) # 8020143a <paDecreaseRef>
    for (i = 0; i < PTE2PT; i++) {
    80201882:	f8843783          	ld	a5,-120(s0)
    80201886:	07a1                	addi	a5,a5,8
    80201888:	873e                	mv	a4,a5
    8020188a:	f8f43423          	sd	a5,-120(s0)
    8020188e:	400007b7          	lui	a5,0x40000
    80201892:	9dbe                	add	s11,s11,a5
    80201894:	87ba                	mv	a5,a4
    80201896:	f8043703          	ld	a4,-128(s0)
    8020189a:	00e78d63          	beq	a5,a4,802018b4 <pgdirFree+0xd2>
        if (!(pgdir[i] & PTE_VALID))
    8020189e:	f8843783          	ld	a5,-120(s0)
    802018a2:	639c                	ld	a5,0(a5)
    802018a4:	0017f713          	andi	a4,a5,1
    802018a8:	df69                	beqz	a4,80201882 <pgdirFree+0xa0>
        u64* pa = (u64*) PTE2PA(*pageTable);
    802018aa:	078a                	slli	a5,a5,0x2
    802018ac:	01a7fcb3          	and	s9,a5,s10
    802018b0:	4c01                	li	s8,0
    802018b2:	b75d                	j	80201858 <pgdirFree+0x76>
    }
    paDecreaseRef((u64) pgdir);
    802018b4:	855a                	mv	a0,s6
    802018b6:	00000097          	auipc	ra,0x0
    802018ba:	b84080e7          	jalr	-1148(ra) # 8020143a <paDecreaseRef>
}
    802018be:	70e6                	ld	ra,120(sp)
    802018c0:	7446                	ld	s0,112(sp)
    802018c2:	74a6                	ld	s1,104(sp)
    802018c4:	7906                	ld	s2,96(sp)
    802018c6:	69e6                	ld	s3,88(sp)
    802018c8:	6a46                	ld	s4,80(sp)
    802018ca:	6aa6                	ld	s5,72(sp)
    802018cc:	6b06                	ld	s6,64(sp)
    802018ce:	7be2                	ld	s7,56(sp)
    802018d0:	7c42                	ld	s8,48(sp)
    802018d2:	7ca2                	ld	s9,40(sp)
    802018d4:	7d02                	ld	s10,32(sp)
    802018d6:	6de2                	ld	s11,24(sp)
    802018d8:	6109                	addi	sp,sp,128
    802018da:	8082                	ret

00000000802018dc <pageInsert>:

int pageInsert(u64 *pgdir, u64 va, u64 pa, u64 perm) {
    802018dc:	7139                	addi	sp,sp,-64
    802018de:	fc06                	sd	ra,56(sp)
    802018e0:	f822                	sd	s0,48(sp)
    802018e2:	f426                	sd	s1,40(sp)
    802018e4:	f04a                	sd	s2,32(sp)
    802018e6:	ec4e                	sd	s3,24(sp)
    802018e8:	e852                	sd	s4,16(sp)
    802018ea:	0080                	addi	s0,sp,64
    802018ec:	89aa                	mv	s3,a0
    802018ee:	84b2                	mv	s1,a2
    802018f0:	8a36                	mv	s4,a3
    u64 *pte;
    va = DOWN_ALIGN(va, PAGE_SIZE);
    802018f2:	77fd                	lui	a5,0xfffff
    802018f4:	00f5f933          	and	s2,a1,a5
    pa = DOWN_ALIGN(pa, PAGE_SIZE);
    perm |= PTE_ACCESSED | PTE_DIRTY;
    int ret = pageWalk(pgdir, va, false, &pte);
    802018f8:	fc840693          	addi	a3,s0,-56
    802018fc:	4601                	li	a2,0
    802018fe:	85ca                	mv	a1,s2
    80201900:	00000097          	auipc	ra,0x0
    80201904:	d18080e7          	jalr	-744(ra) # 80201618 <pageWalk>
    if (ret < 0) {
    80201908:	06054663          	bltz	a0,80201974 <pageInsert+0x98>
        return ret;
    }
    if (pte != NULL && (*pte & PTE_VALID)) {
    8020190c:	fc843783          	ld	a5,-56(s0)
    80201910:	c781                	beqz	a5,80201918 <pageInsert+0x3c>
    80201912:	639c                	ld	a5,0(a5)
    80201914:	8b85                	andi	a5,a5,1
    80201916:	e7bd                	bnez	a5,80201984 <pageInsert+0xa8>
        pageRemove(pgdir, va);
    }
    ret = pageWalk(pgdir, va, true, &pte);
    80201918:	fc840693          	addi	a3,s0,-56
    8020191c:	4605                	li	a2,1
    8020191e:	85ca                	mv	a1,s2
    80201920:	854e                	mv	a0,s3
    80201922:	00000097          	auipc	ra,0x0
    80201926:	cf6080e7          	jalr	-778(ra) # 80201618 <pageWalk>
    if (ret < 0) {
    8020192a:	04054563          	bltz	a0,80201974 <pageInsert+0x98>
    pa = DOWN_ALIGN(pa, PAGE_SIZE);
    8020192e:	77fd                	lui	a5,0xfffff
    80201930:	00f4f633          	and	a2,s1,a5
        return ret;
    }
    *pte = PA2PTE(pa) | perm | PTE_VALID;
    80201934:	00265793          	srli	a5,a2,0x2
    80201938:	0147e7b3          	or	a5,a5,s4
    8020193c:	0c17e793          	ori	a5,a5,193
    80201940:	fc843703          	ld	a4,-56(s0)
    80201944:	e31c                	sd	a5,0(a4)
    if (pa >= PHYSICAL_ADDRESS_BASE && pa < PHYSICAL_MEMORY_TOP)
    80201946:	800007b7          	lui	a5,0x80000
    8020194a:	963e                	add	a2,a2,a5
    8020194c:	080007b7          	lui	a5,0x8000
    80201950:	00f67f63          	bgeu	a2,a5,8020196e <pageInsert+0x92>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80201954:	00c65793          	srli	a5,a2,0xc
    return pages + ppn;
    80201958:	822d                	srli	a2,a2,0xb
    8020195a:	963e                	add	a2,a2,a5
    8020195c:	060e                	slli	a2,a2,0x3
    8020195e:	00097797          	auipc	a5,0x97
    80201962:	ac278793          	addi	a5,a5,-1342 # 80298420 <pages>
    80201966:	963e                	add	a2,a2,a5
        pa2page(pa)->ref++;
    80201968:	4a1c                	lw	a5,16(a2)
    8020196a:	2785                	addiw	a5,a5,1
    8020196c:	ca1c                	sw	a5,16(a2)
	asm volatile("sfence.vma");
    8020196e:	12000073          	sfence.vma
    sfence_vma();
    return 0;
    80201972:	4501                	li	a0,0
}
    80201974:	70e2                	ld	ra,56(sp)
    80201976:	7442                	ld	s0,48(sp)
    80201978:	74a2                	ld	s1,40(sp)
    8020197a:	7902                	ld	s2,32(sp)
    8020197c:	69e2                	ld	s3,24(sp)
    8020197e:	6a42                	ld	s4,16(sp)
    80201980:	6121                	addi	sp,sp,64
    80201982:	8082                	ret
        pageRemove(pgdir, va);
    80201984:	85ca                	mv	a1,s2
    80201986:	854e                	mv	a0,s3
    80201988:	00000097          	auipc	ra,0x0
    8020198c:	e04080e7          	jalr	-508(ra) # 8020178c <pageRemove>
    80201990:	b761                	j	80201918 <pageInsert+0x3c>

0000000080201992 <allocPgdir>:

int allocPgdir(PhysicalPage **page) {
    80201992:	1101                	addi	sp,sp,-32
    80201994:	ec06                	sd	ra,24(sp)
    80201996:	e822                	sd	s0,16(sp)
    80201998:	e426                	sd	s1,8(sp)
    8020199a:	1000                	addi	s0,sp,32
    8020199c:	84aa                	mv	s1,a0
    int r;
    if ((r = pageAlloc(page)) < 0) {
    8020199e:	00000097          	auipc	ra,0x0
    802019a2:	bc4080e7          	jalr	-1084(ra) # 80201562 <pageAlloc>
    802019a6:	00054763          	bltz	a0,802019b4 <allocPgdir+0x22>
        return r;
    }
    (*page)->ref++;
    802019aa:	6098                	ld	a4,0(s1)
    802019ac:	4b1c                	lw	a5,16(a4)
    802019ae:	2785                	addiw	a5,a5,1
    802019b0:	cb1c                	sw	a5,16(a4)
    return 0;
    802019b2:	4501                	li	a0,0
}
    802019b4:	60e2                	ld	ra,24(sp)
    802019b6:	6442                	ld	s0,16(sp)
    802019b8:	64a2                	ld	s1,8(sp)
    802019ba:	6105                	addi	sp,sp,32
    802019bc:	8082                	ret

00000000802019be <pageout>:

void pageout(u64 *pgdir, u64 badAddr) {
    802019be:	7179                	addi	sp,sp,-48
    802019c0:	f406                	sd	ra,40(sp)
    802019c2:	f022                	sd	s0,32(sp)
    802019c4:	ec26                	sd	s1,24(sp)
    802019c6:	e84a                	sd	s2,16(sp)
    802019c8:	1800                	addi	s0,sp,48
    if (badAddr <= PAGE_SIZE) {
    802019ca:	6785                	lui	a5,0x1
    802019cc:	06b7f863          	bgeu	a5,a1,80201a3c <pageout+0x7e>
    802019d0:	892a                	mv	s2,a0
    802019d2:	84ae                	mv	s1,a1
        panic("^^^^^^^^^^TOO LOW^^^^^^^^^^^\n");
    }
    printf("[Page out]pageout at %lx\n", badAddr);
    802019d4:	00008517          	auipc	a0,0x8
    802019d8:	96c50513          	addi	a0,a0,-1684 # 80209340 <digits+0x2a0>
    802019dc:	fffff097          	auipc	ra,0xfffff
    802019e0:	ada080e7          	jalr	-1318(ra) # 802004b6 <printf>
    PhysicalPage *page;
    if (pageAlloc(&page) < 0) {
    802019e4:	fd840513          	addi	a0,s0,-40
    802019e8:	00000097          	auipc	ra,0x0
    802019ec:	b7a080e7          	jalr	-1158(ra) # 80201562 <pageAlloc>
    802019f0:	06054863          	bltz	a0,80201a60 <pageout+0xa2>
    return page - pages;
    802019f4:	fd843783          	ld	a5,-40(s0)
    802019f8:	00097717          	auipc	a4,0x97
    802019fc:	a2870713          	addi	a4,a4,-1496 # 80298420 <pages>
    80201a00:	8f99                	sub	a5,a5,a4
    80201a02:	878d                	srai	a5,a5,0x3
    80201a04:	00008717          	auipc	a4,0x8
    80201a08:	2b473703          	ld	a4,692(a4) # 80209cb8 <__func__.0+0x8>
    80201a0c:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201a10:	00c7979b          	slliw	a5,a5,0xc
    80201a14:	1782                	slli	a5,a5,0x20
    80201a16:	9381                	srli	a5,a5,0x20
        panic("");
    }
    if (pageInsert(pgdir, badAddr, page2pa(page), 
    80201a18:	46d9                	li	a3,22
    80201a1a:	4605                	li	a2,1
    80201a1c:	067e                	slli	a2,a2,0x1f
    80201a1e:	963e                	add	a2,a2,a5
    80201a20:	85a6                	mv	a1,s1
    80201a22:	854a                	mv	a0,s2
    80201a24:	00000097          	auipc	ra,0x0
    80201a28:	eb8080e7          	jalr	-328(ra) # 802018dc <pageInsert>
    80201a2c:	04054c63          	bltz	a0,80201a84 <pageout+0xc6>
        PTE_USER | PTE_READ | PTE_WRITE) < 0) {
        panic("");
    }
}
    80201a30:	70a2                	ld	ra,40(sp)
    80201a32:	7402                	ld	s0,32(sp)
    80201a34:	64e2                	ld	s1,24(sp)
    80201a36:	6942                	ld	s2,16(sp)
    80201a38:	6145                	addi	sp,sp,48
    80201a3a:	8082                	ret
        panic("^^^^^^^^^^TOO LOW^^^^^^^^^^^\n");
    80201a3c:	00008697          	auipc	a3,0x8
    80201a40:	8e468693          	addi	a3,a3,-1820 # 80209320 <digits+0x280>
    80201a44:	00008617          	auipc	a2,0x8
    80201a48:	1f460613          	addi	a2,a2,500 # 80209c38 <__func__.2>
    80201a4c:	0b000593          	li	a1,176
    80201a50:	00008517          	auipc	a0,0x8
    80201a54:	88850513          	addi	a0,a0,-1912 # 802092d8 <digits+0x238>
    80201a58:	fffff097          	auipc	ra,0xfffff
    80201a5c:	aea080e7          	jalr	-1302(ra) # 80200542 <_panic_>
        panic("");
    80201a60:	00007697          	auipc	a3,0x7
    80201a64:	66868693          	addi	a3,a3,1640 # 802090c8 <digits+0x28>
    80201a68:	00008617          	auipc	a2,0x8
    80201a6c:	1d060613          	addi	a2,a2,464 # 80209c38 <__func__.2>
    80201a70:	0b500593          	li	a1,181
    80201a74:	00008517          	auipc	a0,0x8
    80201a78:	86450513          	addi	a0,a0,-1948 # 802092d8 <digits+0x238>
    80201a7c:	fffff097          	auipc	ra,0xfffff
    80201a80:	ac6080e7          	jalr	-1338(ra) # 80200542 <_panic_>
        panic("");
    80201a84:	00007697          	auipc	a3,0x7
    80201a88:	64468693          	addi	a3,a3,1604 # 802090c8 <digits+0x28>
    80201a8c:	00008617          	auipc	a2,0x8
    80201a90:	1ac60613          	addi	a2,a2,428 # 80209c38 <__func__.2>
    80201a94:	0b900593          	li	a1,185
    80201a98:	00008517          	auipc	a0,0x8
    80201a9c:	84050513          	addi	a0,a0,-1984 # 802092d8 <digits+0x238>
    80201aa0:	fffff097          	auipc	ra,0xfffff
    80201aa4:	aa2080e7          	jalr	-1374(ra) # 80200542 <_panic_>

0000000080201aa8 <cowHandler>:

u8 cowBuffer[PAGE_SIZE];
void cowHandler(u64 *pgdir, u64 badAddr) {
    80201aa8:	7139                	addi	sp,sp,-64
    80201aaa:	fc06                	sd	ra,56(sp)
    80201aac:	f822                	sd	s0,48(sp)
    80201aae:	f426                	sd	s1,40(sp)
    80201ab0:	f04a                	sd	s2,32(sp)
    80201ab2:	ec4e                	sd	s3,24(sp)
    80201ab4:	e852                	sd	s4,16(sp)
    80201ab6:	0080                	addi	s0,sp,64
    80201ab8:	892a                	mv	s2,a0
    80201aba:	89ae                	mv	s3,a1
    u64 *pte;
    u64 pa = pageLookup(pgdir, badAddr, &pte);
    80201abc:	fc840613          	addi	a2,s0,-56
    80201ac0:	00000097          	auipc	ra,0x0
    80201ac4:	c32080e7          	jalr	-974(ra) # 802016f2 <pageLookup>
    // printf("[COW]to cow %lx %lx\n", badAddr, pa);
    if (!(*pte & PTE_COW)) {
    80201ac8:	fc843783          	ld	a5,-56(s0)
    80201acc:	639c                	ld	a5,0(a5)
    80201ace:	1007f793          	andi	a5,a5,256
    80201ad2:	c3e1                	beqz	a5,80201b92 <cowHandler+0xea>
        printf("access denied");
        return;
    }
    PhysicalPage *page;
    int r = pageAlloc(&page);
    80201ad4:	fc040513          	addi	a0,s0,-64
    80201ad8:	00000097          	auipc	ra,0x0
    80201adc:	a8a080e7          	jalr	-1398(ra) # 80201562 <pageAlloc>
    if (r < 0) {
    80201ae0:	0c054263          	bltz	a0,80201ba4 <cowHandler+0xfc>
        panic("cow handler error");
        return;
    }
    acquireLock(&cowBufferLock);
    80201ae4:	00157a17          	auipc	s4,0x157
    80201ae8:	95ca0a13          	addi	s4,s4,-1700 # 80358440 <cowBufferLock>
    80201aec:	8552                	mv	a0,s4
    80201aee:	00002097          	auipc	ra,0x2
    80201af2:	dc4080e7          	jalr	-572(ra) # 802038b2 <acquireLock>
    pa = pageLookup(pgdir, badAddr, &pte);
    80201af6:	fc840613          	addi	a2,s0,-56
    80201afa:	85ce                	mv	a1,s3
    80201afc:	854a                	mv	a0,s2
    80201afe:	00000097          	auipc	ra,0x0
    80201b02:	bf4080e7          	jalr	-1036(ra) # 802016f2 <pageLookup>
    bcopy((void *)pa, (void*)cowBuffer, PAGE_SIZE);
    80201b06:	6605                	lui	a2,0x1
    80201b08:	00157597          	auipc	a1,0x157
    80201b0c:	95058593          	addi	a1,a1,-1712 # 80358458 <cowBuffer>
    80201b10:	00000097          	auipc	ra,0x0
    80201b14:	834080e7          	jalr	-1996(ra) # 80201344 <bcopy>
    return page - pages;
    80201b18:	fc043483          	ld	s1,-64(s0)
    80201b1c:	00097797          	auipc	a5,0x97
    80201b20:	90478793          	addi	a5,a5,-1788 # 80298420 <pages>
    80201b24:	8c9d                	sub	s1,s1,a5
    80201b26:	848d                	srai	s1,s1,0x3
    80201b28:	00008797          	auipc	a5,0x8
    80201b2c:	1907b783          	ld	a5,400(a5) # 80209cb8 <__func__.0+0x8>
    80201b30:	02f484b3          	mul	s1,s1,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201b34:	00c4949b          	slliw	s1,s1,0xc
    80201b38:	1482                	slli	s1,s1,0x20
    80201b3a:	9081                	srli	s1,s1,0x20
    80201b3c:	4785                	li	a5,1
    80201b3e:	07fe                	slli	a5,a5,0x1f
    80201b40:	94be                	add	s1,s1,a5
    pageInsert(pgdir, badAddr, page2pa(page), (PTE2PERM(*pte) | PTE_WRITE) & ~PTE_COW);
    80201b42:	fc843783          	ld	a5,-56(s0)
    80201b46:	6394                	ld	a3,0(a5)
    80201b48:	57fd                	li	a5,-1
    80201b4a:	17da                	slli	a5,a5,0x36
    80201b4c:	2fb78793          	addi	a5,a5,763
    80201b50:	8efd                	and	a3,a3,a5
    80201b52:	0046e693          	ori	a3,a3,4
    80201b56:	8626                	mv	a2,s1
    80201b58:	85ce                	mv	a1,s3
    80201b5a:	854a                	mv	a0,s2
    80201b5c:	00000097          	auipc	ra,0x0
    80201b60:	d80080e7          	jalr	-640(ra) # 802018dc <pageInsert>
    bcopy((void*) cowBuffer, (void*) page2pa(page), PAGE_SIZE);
    80201b64:	6605                	lui	a2,0x1
    80201b66:	85a6                	mv	a1,s1
    80201b68:	00157517          	auipc	a0,0x157
    80201b6c:	8f050513          	addi	a0,a0,-1808 # 80358458 <cowBuffer>
    80201b70:	fffff097          	auipc	ra,0xfffff
    80201b74:	7d4080e7          	jalr	2004(ra) # 80201344 <bcopy>
    releaseLock(&cowBufferLock);
    80201b78:	8552                	mv	a0,s4
    80201b7a:	00002097          	auipc	ra,0x2
    80201b7e:	d9c080e7          	jalr	-612(ra) # 80203916 <releaseLock>
    // pa = pageLookup(currentProcess[hartId]->pgdir, USER_STACK_TOP - PAGE_SIZE, &pte);
}
    80201b82:	70e2                	ld	ra,56(sp)
    80201b84:	7442                	ld	s0,48(sp)
    80201b86:	74a2                	ld	s1,40(sp)
    80201b88:	7902                	ld	s2,32(sp)
    80201b8a:	69e2                	ld	s3,24(sp)
    80201b8c:	6a42                	ld	s4,16(sp)
    80201b8e:	6121                	addi	sp,sp,64
    80201b90:	8082                	ret
        printf("access denied");
    80201b92:	00007517          	auipc	a0,0x7
    80201b96:	7ce50513          	addi	a0,a0,1998 # 80209360 <digits+0x2c0>
    80201b9a:	fffff097          	auipc	ra,0xfffff
    80201b9e:	91c080e7          	jalr	-1764(ra) # 802004b6 <printf>
        return;
    80201ba2:	b7c5                	j	80201b82 <cowHandler+0xda>
        panic("cow handler error");
    80201ba4:	00007697          	auipc	a3,0x7
    80201ba8:	7cc68693          	addi	a3,a3,1996 # 80209370 <digits+0x2d0>
    80201bac:	00008617          	auipc	a2,0x8
    80201bb0:	81460613          	addi	a2,a2,-2028 # 802093c0 <__func__.1>
    80201bb4:	0c900593          	li	a1,201
    80201bb8:	00007517          	auipc	a0,0x7
    80201bbc:	72050513          	addi	a0,a0,1824 # 802092d8 <digits+0x238>
    80201bc0:	fffff097          	auipc	ra,0xfffff
    80201bc4:	982080e7          	jalr	-1662(ra) # 80200542 <_panic_>

0000000080201bc8 <vir2phy>:
// Can only be used to look up user pages.
u64 vir2phy(u64* pagetable, u64 va) {
    u64* pte;
    u64 pa;

    if (va >= MAXVA)
    80201bc8:	57fd                	li	a5,-1
    80201bca:	83e9                	srli	a5,a5,0x1a
    80201bcc:	00b7f463          	bgeu	a5,a1,80201bd4 <vir2phy+0xc>
        return NULL;
    80201bd0:	4501                	li	a0,0
        return NULL;
    if ((*pte & PTE_USER) == 0)
        return NULL;
    pa = PTE2PA(*pte) + (va&0xfff);
    return pa;
}
    80201bd2:	8082                	ret
u64 vir2phy(u64* pagetable, u64 va) {
    80201bd4:	7179                	addi	sp,sp,-48
    80201bd6:	f406                	sd	ra,40(sp)
    80201bd8:	f022                	sd	s0,32(sp)
    80201bda:	ec26                	sd	s1,24(sp)
    80201bdc:	1800                	addi	s0,sp,48
    80201bde:	84ae                	mv	s1,a1
    int ret = pageWalk(pagetable, va, 0, &pte);
    80201be0:	fd840693          	addi	a3,s0,-40
    80201be4:	4601                	li	a2,0
    80201be6:	00000097          	auipc	ra,0x0
    80201bea:	a32080e7          	jalr	-1486(ra) # 80201618 <pageWalk>
    if (ret < 0) {
    80201bee:	02054163          	bltz	a0,80201c10 <vir2phy+0x48>
    if (pte == 0)
    80201bf2:	fd843783          	ld	a5,-40(s0)
    80201bf6:	cba9                	beqz	a5,80201c48 <vir2phy+0x80>
    if ((*pte & PTE_VALID) == 0)
    80201bf8:	639c                	ld	a5,0(a5)
    if ((*pte & PTE_USER) == 0)
    80201bfa:	0117f693          	andi	a3,a5,17
    80201bfe:	4745                	li	a4,17
        return NULL;
    80201c00:	4501                	li	a0,0
    if ((*pte & PTE_USER) == 0)
    80201c02:	02e68963          	beq	a3,a4,80201c34 <vir2phy+0x6c>
}
    80201c06:	70a2                	ld	ra,40(sp)
    80201c08:	7402                	ld	s0,32(sp)
    80201c0a:	64e2                	ld	s1,24(sp)
    80201c0c:	6145                	addi	sp,sp,48
    80201c0e:	8082                	ret
        panic("pageWalk error in vir2phy function!");
    80201c10:	00007697          	auipc	a3,0x7
    80201c14:	77868693          	addi	a3,a3,1912 # 80209388 <digits+0x2e8>
    80201c18:	00008617          	auipc	a2,0x8
    80201c1c:	01860613          	addi	a2,a2,24 # 80209c30 <__func__.0>
    80201c20:	0e100593          	li	a1,225
    80201c24:	00007517          	auipc	a0,0x7
    80201c28:	6b450513          	addi	a0,a0,1716 # 802092d8 <digits+0x238>
    80201c2c:	fffff097          	auipc	ra,0xfffff
    80201c30:	916080e7          	jalr	-1770(ra) # 80200542 <_panic_>
    pa = PTE2PA(*pte) + (va&0xfff);
    80201c34:	078a                	slli	a5,a5,0x2
    80201c36:	fff00737          	lui	a4,0xfff00
    80201c3a:	8321                	srli	a4,a4,0x8
    80201c3c:	8ff9                	and	a5,a5,a4
    80201c3e:	14d2                	slli	s1,s1,0x34
    80201c40:	90d1                	srli	s1,s1,0x34
    80201c42:	0097e533          	or	a0,a5,s1
    return pa;
    80201c46:	b7c1                	j	80201c06 <vir2phy+0x3e>
        return NULL;
    80201c48:	4501                	li	a0,0
    80201c4a:	bf75                	j	80201c06 <vir2phy+0x3e>

0000000080201c4c <copyin>:
// Copy len bytes to dst from virtual address srcva in a given page table.
// Return 0 on success, -1 on error.
int copyin(u64* pagetable, char* dst, u64 srcva, u64 len) {
    u64 n, va0, pa0;

    while (len > 0) {
    80201c4c:	caa5                	beqz	a3,80201cbc <copyin+0x70>
int copyin(u64* pagetable, char* dst, u64 srcva, u64 len) {
    80201c4e:	715d                	addi	sp,sp,-80
    80201c50:	e486                	sd	ra,72(sp)
    80201c52:	e0a2                	sd	s0,64(sp)
    80201c54:	fc26                	sd	s1,56(sp)
    80201c56:	f84a                	sd	s2,48(sp)
    80201c58:	f44e                	sd	s3,40(sp)
    80201c5a:	f052                	sd	s4,32(sp)
    80201c5c:	ec56                	sd	s5,24(sp)
    80201c5e:	e85a                	sd	s6,16(sp)
    80201c60:	e45e                	sd	s7,8(sp)
    80201c62:	e062                	sd	s8,0(sp)
    80201c64:	0880                	addi	s0,sp,80
    80201c66:	8b2a                	mv	s6,a0
    80201c68:	8a2e                	mv	s4,a1
    80201c6a:	8c32                	mv	s8,a2
    80201c6c:	89b6                	mv	s3,a3
        va0 = DOWN_ALIGN(srcva, PGSIZE);
    80201c6e:	7bfd                	lui	s7,0xfffff
        pa0 = vir2phy(pagetable, va0);
        if (pa0 == NULL)
            return -1;
        n = PGSIZE - (srcva - va0);
    80201c70:	6a85                	lui	s5,0x1
    80201c72:	a01d                	j	80201c98 <copyin+0x4c>
        if (n > len)
            n = len;
        memmove(dst, (void*)(pa0 + (srcva - va0)), n);
    80201c74:	018505b3          	add	a1,a0,s8
    80201c78:	0004861b          	sext.w	a2,s1
    80201c7c:	412585b3          	sub	a1,a1,s2
    80201c80:	8552                	mv	a0,s4
    80201c82:	00002097          	auipc	ra,0x2
    80201c86:	d8e080e7          	jalr	-626(ra) # 80203a10 <memmove>

        len -= n;
    80201c8a:	409989b3          	sub	s3,s3,s1
        dst += n;
    80201c8e:	9a26                	add	s4,s4,s1
        srcva = va0 + PGSIZE;
    80201c90:	01590c33          	add	s8,s2,s5
    while (len > 0) {
    80201c94:	02098263          	beqz	s3,80201cb8 <copyin+0x6c>
        va0 = DOWN_ALIGN(srcva, PGSIZE);
    80201c98:	017c7933          	and	s2,s8,s7
        pa0 = vir2phy(pagetable, va0);
    80201c9c:	85ca                	mv	a1,s2
    80201c9e:	855a                	mv	a0,s6
    80201ca0:	00000097          	auipc	ra,0x0
    80201ca4:	f28080e7          	jalr	-216(ra) # 80201bc8 <vir2phy>
        if (pa0 == NULL)
    80201ca8:	cd01                	beqz	a0,80201cc0 <copyin+0x74>
        n = PGSIZE - (srcva - va0);
    80201caa:	418904b3          	sub	s1,s2,s8
    80201cae:	94d6                	add	s1,s1,s5
    80201cb0:	fc99f2e3          	bgeu	s3,s1,80201c74 <copyin+0x28>
    80201cb4:	84ce                	mv	s1,s3
    80201cb6:	bf7d                	j	80201c74 <copyin+0x28>
    }
    return 0;
    80201cb8:	4501                	li	a0,0
    80201cba:	a021                	j	80201cc2 <copyin+0x76>
    80201cbc:	4501                	li	a0,0
}
    80201cbe:	8082                	ret
            return -1;
    80201cc0:	557d                	li	a0,-1
}
    80201cc2:	60a6                	ld	ra,72(sp)
    80201cc4:	6406                	ld	s0,64(sp)
    80201cc6:	74e2                	ld	s1,56(sp)
    80201cc8:	7942                	ld	s2,48(sp)
    80201cca:	79a2                	ld	s3,40(sp)
    80201ccc:	7a02                	ld	s4,32(sp)
    80201cce:	6ae2                	ld	s5,24(sp)
    80201cd0:	6b42                	ld	s6,16(sp)
    80201cd2:	6ba2                	ld	s7,8(sp)
    80201cd4:	6c02                	ld	s8,0(sp)
    80201cd6:	6161                	addi	sp,sp,80
    80201cd8:	8082                	ret

0000000080201cda <copyout>:
// Copy len bytes from src to virtual address dstva in a given page table.
// Return 0 on success, -1 on error.
int copyout(u64* pagetable, u64 dstva, char* src, u64 len) {
    u64 n, va0, pa0;

    while (len > 0) {
    80201cda:	c6bd                	beqz	a3,80201d48 <copyout+0x6e>
int copyout(u64* pagetable, u64 dstva, char* src, u64 len) {
    80201cdc:	715d                	addi	sp,sp,-80
    80201cde:	e486                	sd	ra,72(sp)
    80201ce0:	e0a2                	sd	s0,64(sp)
    80201ce2:	fc26                	sd	s1,56(sp)
    80201ce4:	f84a                	sd	s2,48(sp)
    80201ce6:	f44e                	sd	s3,40(sp)
    80201ce8:	f052                	sd	s4,32(sp)
    80201cea:	ec56                	sd	s5,24(sp)
    80201cec:	e85a                	sd	s6,16(sp)
    80201cee:	e45e                	sd	s7,8(sp)
    80201cf0:	e062                	sd	s8,0(sp)
    80201cf2:	0880                	addi	s0,sp,80
    80201cf4:	8b2a                	mv	s6,a0
    80201cf6:	8c2e                	mv	s8,a1
    80201cf8:	8a32                	mv	s4,a2
    80201cfa:	89b6                	mv	s3,a3
        va0 = DOWN_ALIGN(dstva, PGSIZE);
    80201cfc:	7bfd                	lui	s7,0xfffff
        pa0 = vir2phy(pagetable, va0);
        if (pa0 == NULL)
            return -1;
        n = PGSIZE - (dstva - va0);
    80201cfe:	6a85                	lui	s5,0x1
    80201d00:	a015                	j	80201d24 <copyout+0x4a>
        if (n > len)
            n = len;
        memmove((void*)(pa0 + (dstva - va0)), src, n);
    80201d02:	9562                	add	a0,a0,s8
    80201d04:	0004861b          	sext.w	a2,s1
    80201d08:	85d2                	mv	a1,s4
    80201d0a:	41250533          	sub	a0,a0,s2
    80201d0e:	00002097          	auipc	ra,0x2
    80201d12:	d02080e7          	jalr	-766(ra) # 80203a10 <memmove>

        len -= n;
    80201d16:	409989b3          	sub	s3,s3,s1
        src += n;
    80201d1a:	9a26                	add	s4,s4,s1
        dstva = va0 + PGSIZE;
    80201d1c:	01590c33          	add	s8,s2,s5
    while (len > 0) {
    80201d20:	02098263          	beqz	s3,80201d44 <copyout+0x6a>
        va0 = DOWN_ALIGN(dstva, PGSIZE);
    80201d24:	017c7933          	and	s2,s8,s7
        pa0 = vir2phy(pagetable, va0);
    80201d28:	85ca                	mv	a1,s2
    80201d2a:	855a                	mv	a0,s6
    80201d2c:	00000097          	auipc	ra,0x0
    80201d30:	e9c080e7          	jalr	-356(ra) # 80201bc8 <vir2phy>
        if (pa0 == NULL)
    80201d34:	cd01                	beqz	a0,80201d4c <copyout+0x72>
        n = PGSIZE - (dstva - va0);
    80201d36:	418904b3          	sub	s1,s2,s8
    80201d3a:	94d6                	add	s1,s1,s5
    80201d3c:	fc99f3e3          	bgeu	s3,s1,80201d02 <copyout+0x28>
    80201d40:	84ce                	mv	s1,s3
    80201d42:	b7c1                	j	80201d02 <copyout+0x28>
    }
    return 0;
    80201d44:	4501                	li	a0,0
    80201d46:	a021                	j	80201d4e <copyout+0x74>
    80201d48:	4501                	li	a0,0
}
    80201d4a:	8082                	ret
            return -1;
    80201d4c:	557d                	li	a0,-1
}
    80201d4e:	60a6                	ld	ra,72(sp)
    80201d50:	6406                	ld	s0,64(sp)
    80201d52:	74e2                	ld	s1,56(sp)
    80201d54:	7942                	ld	s2,48(sp)
    80201d56:	79a2                	ld	s3,40(sp)
    80201d58:	7a02                	ld	s4,32(sp)
    80201d5a:	6ae2                	ld	s5,24(sp)
    80201d5c:	6b42                	ld	s6,16(sp)
    80201d5e:	6ba2                	ld	s7,8(sp)
    80201d60:	6c02                	ld	s8,0(sp)
    80201d62:	6161                	addi	sp,sp,80
    80201d64:	8082                	ret

0000000080201d66 <loadElf>:
    u8 *ph_table = 0;
    u16 entry_cnt;
    u16 entry_size;
    int r;

    if (size < 4 || !is_elf_format(binary)) {
    80201d66:	478d                	li	a5,3
    80201d68:	0cb7d863          	bge	a5,a1,80201e38 <loadElf+0xd2>
    int (*map)(u64 va, u32 segmentSize, u8 *bin, u32 binSize, void *userData)) {
    80201d6c:	711d                	addi	sp,sp,-96
    80201d6e:	ec86                	sd	ra,88(sp)
    80201d70:	e8a2                	sd	s0,80(sp)
    80201d72:	e4a6                	sd	s1,72(sp)
    80201d74:	e0ca                	sd	s2,64(sp)
    80201d76:	fc4e                	sd	s3,56(sp)
    80201d78:	f852                	sd	s4,48(sp)
    80201d7a:	f456                	sd	s5,40(sp)
    80201d7c:	f05a                	sd	s6,32(sp)
    80201d7e:	ec5e                	sd	s7,24(sp)
    80201d80:	e862                	sd	s8,16(sp)
    80201d82:	e466                	sd	s9,8(sp)
    80201d84:	1080                	addi	s0,sp,96
    80201d86:	8b2a                	mv	s6,a0
    80201d88:	8cb2                	mv	s9,a2
    80201d8a:	8bb6                	mv	s7,a3
    80201d8c:	8c3a                	mv	s8,a4
    if (magic[0] == ELF_MAGIC0 &&
    80201d8e:	00054703          	lbu	a4,0(a0)
    80201d92:	07f00793          	li	a5,127
        return -NOT_ELF_FILE;
    80201d96:	5569                	li	a0,-6
    if (magic[0] == ELF_MAGIC0 &&
    80201d98:	08f71363          	bne	a4,a5,80201e1e <loadElf+0xb8>
    80201d9c:	001b4703          	lbu	a4,1(s6)
    80201da0:	04500793          	li	a5,69
    80201da4:	06f71d63          	bne	a4,a5,80201e1e <loadElf+0xb8>
        magic[1] == ELF_MAGIC1 &&
    80201da8:	002b4703          	lbu	a4,2(s6)
    80201dac:	04c00793          	li	a5,76
    80201db0:	06f71763          	bne	a4,a5,80201e1e <loadElf+0xb8>
    if (size < 4 || !is_elf_format(binary)) {
    80201db4:	003b4703          	lbu	a4,3(s6)
    80201db8:	04600793          	li	a5,70
    80201dbc:	08f71063          	bne	a4,a5,80201e3c <loadElf+0xd6>
    }

    ph_table = binary + ehdr->phoff;
    80201dc0:	020b3903          	ld	s2,32(s6)
    80201dc4:	995a                	add	s2,s2,s6
    entry_cnt = ehdr->phnum;
    80201dc6:	038b5783          	lhu	a5,56(s6)
    entry_size = ehdr->phentsize;
    80201dca:	036b5a83          	lhu	s5,54(s6)

    while (entry_cnt--) {
    80201dce:	fff7849b          	addiw	s1,a5,-1
    80201dd2:	14c2                	slli	s1,s1,0x30
    80201dd4:	90c1                	srli	s1,s1,0x30
    80201dd6:	cf9d                	beqz	a5,80201e14 <loadElf+0xae>
        phdr = (Phdr*)ph_table;
        if (phdr->type == PT_LOAD) {
    80201dd8:	4a05                	li	s4,1
    while (entry_cnt--) {
    80201dda:	69c1                	lui	s3,0x10
    80201ddc:	19fd                	addi	s3,s3,-1
    80201dde:	a809                	j	80201df0 <loadElf+0x8a>
            r = map(phdr->vaddr, phdr->memsz, binary + phdr->offset, phdr->filesz, userData);
            if (r < 0) {
                return r;
            }
        }
        ph_table += entry_size;
    80201de0:	9956                	add	s2,s2,s5
    while (entry_cnt--) {
    80201de2:	34fd                	addiw	s1,s1,-1
    80201de4:	14c2                	slli	s1,s1,0x30
    80201de6:	90c1                	srli	s1,s1,0x30
    80201de8:	0004879b          	sext.w	a5,s1
    80201dec:	03378463          	beq	a5,s3,80201e14 <loadElf+0xae>
        if (phdr->type == PT_LOAD) {
    80201df0:	00092783          	lw	a5,0(s2)
    80201df4:	ff4796e3          	bne	a5,s4,80201de0 <loadElf+0x7a>
            r = map(phdr->vaddr, phdr->memsz, binary + phdr->offset, phdr->filesz, userData);
    80201df8:	00893603          	ld	a2,8(s2)
    80201dfc:	875e                	mv	a4,s7
    80201dfe:	02092683          	lw	a3,32(s2)
    80201e02:	965a                	add	a2,a2,s6
    80201e04:	02892583          	lw	a1,40(s2)
    80201e08:	01093503          	ld	a0,16(s2)
    80201e0c:	9c02                	jalr	s8
            if (r < 0) {
    80201e0e:	fc0559e3          	bgez	a0,80201de0 <loadElf+0x7a>
    80201e12:	a031                	j	80201e1e <loadElf+0xb8>
    }
    
    *entry = ehdr->entry;
    80201e14:	018b3783          	ld	a5,24(s6)
    80201e18:	00fcb023          	sd	a5,0(s9)
    return 0;
    80201e1c:	4501                	li	a0,0
    80201e1e:	60e6                	ld	ra,88(sp)
    80201e20:	6446                	ld	s0,80(sp)
    80201e22:	64a6                	ld	s1,72(sp)
    80201e24:	6906                	ld	s2,64(sp)
    80201e26:	79e2                	ld	s3,56(sp)
    80201e28:	7a42                	ld	s4,48(sp)
    80201e2a:	7aa2                	ld	s5,40(sp)
    80201e2c:	7b02                	ld	s6,32(sp)
    80201e2e:	6be2                	ld	s7,24(sp)
    80201e30:	6c42                	ld	s8,16(sp)
    80201e32:	6ca2                	ld	s9,8(sp)
    80201e34:	6125                	addi	sp,sp,96
    80201e36:	8082                	ret
        return -NOT_ELF_FILE;
    80201e38:	5569                	li	a0,-6
    80201e3a:	8082                	ret
        return -NOT_ELF_FILE;
    80201e3c:	5569                	li	a0,-6
    80201e3e:	b7c5                	j	80201e1e <loadElf+0xb8>

0000000080201e40 <kernelVector>:
.globl kernelTrap
.section .text
.globl kernelVector
.align 2
kernelVector:
    addi sp, sp, -256
    80201e40:	7111                	addi	sp,sp,-256

    sd ra, 0(sp)
    80201e42:	e006                	sd	ra,0(sp)
    sd sp, 8(sp)
    80201e44:	e40a                	sd	sp,8(sp)
    sd gp, 16(sp)
    80201e46:	e80e                	sd	gp,16(sp)
    sd tp, 24(sp)
    80201e48:	ec12                	sd	tp,24(sp)
    sd t0, 32(sp)
    80201e4a:	f016                	sd	t0,32(sp)
    sd t1, 40(sp)
    80201e4c:	f41a                	sd	t1,40(sp)
    sd t2, 48(sp)
    80201e4e:	f81e                	sd	t2,48(sp)
    sd s0, 56(sp)
    80201e50:	fc22                	sd	s0,56(sp)
    sd s1, 64(sp)
    80201e52:	e0a6                	sd	s1,64(sp)
    sd a0, 72(sp)
    80201e54:	e4aa                	sd	a0,72(sp)
    sd a1, 80(sp)
    80201e56:	e8ae                	sd	a1,80(sp)
    sd a2, 88(sp)
    80201e58:	ecb2                	sd	a2,88(sp)
    sd a3, 96(sp)
    80201e5a:	f0b6                	sd	a3,96(sp)
    sd a4, 104(sp)
    80201e5c:	f4ba                	sd	a4,104(sp)
    sd a5, 112(sp)
    80201e5e:	f8be                	sd	a5,112(sp)
    sd a6, 120(sp)
    80201e60:	fcc2                	sd	a6,120(sp)
    sd a7, 128(sp)
    80201e62:	e146                	sd	a7,128(sp)
    sd s2, 136(sp)
    80201e64:	e54a                	sd	s2,136(sp)
    sd s3, 144(sp)
    80201e66:	e94e                	sd	s3,144(sp)
    sd s4, 152(sp)
    80201e68:	ed52                	sd	s4,152(sp)
    sd s5, 160(sp)
    80201e6a:	f156                	sd	s5,160(sp)
    sd s6, 168(sp)
    80201e6c:	f55a                	sd	s6,168(sp)
    sd s7, 176(sp)
    80201e6e:	f95e                	sd	s7,176(sp)
    sd s8, 184(sp)
    80201e70:	fd62                	sd	s8,184(sp)
    sd s9, 192(sp)
    80201e72:	e1e6                	sd	s9,192(sp)
    sd s10, 200(sp)
    80201e74:	e5ea                	sd	s10,200(sp)
    sd s11, 208(sp)
    80201e76:	e9ee                	sd	s11,208(sp)
    sd t3, 216(sp)
    80201e78:	edf2                	sd	t3,216(sp)
    sd t4, 224(sp)
    80201e7a:	f1f6                	sd	t4,224(sp)
    sd t5, 232(sp)
    80201e7c:	f5fa                	sd	t5,232(sp)
    sd t6, 240(sp)
    80201e7e:	f9fe                	sd	t6,240(sp)

	// call the C trap handler in trap.c
    call kernelTrap
    80201e80:	4de010ef          	jal	ra,8020335e <kernelTrap>
    ld ra, 0(sp)
    80201e84:	6082                	ld	ra,0(sp)
    ld sp, 8(sp)
    80201e86:	6122                	ld	sp,8(sp)
    ld gp, 16(sp)
    80201e88:	61c2                	ld	gp,16(sp)
    // not this, in case we moved CPUs: ld tp, 24(sp)
    ld t0, 32(sp)
    80201e8a:	7282                	ld	t0,32(sp)
    ld t1, 40(sp)
    80201e8c:	7322                	ld	t1,40(sp)
    ld t2, 48(sp)
    80201e8e:	73c2                	ld	t2,48(sp)
    ld s0, 56(sp)
    80201e90:	7462                	ld	s0,56(sp)
    ld s1, 64(sp)
    80201e92:	6486                	ld	s1,64(sp)
    ld a0, 72(sp)
    80201e94:	6526                	ld	a0,72(sp)
    ld a1, 80(sp)
    80201e96:	65c6                	ld	a1,80(sp)
    ld a2, 88(sp)
    80201e98:	6666                	ld	a2,88(sp)
    ld a3, 96(sp)
    80201e9a:	7686                	ld	a3,96(sp)
    ld a4, 104(sp)
    80201e9c:	7726                	ld	a4,104(sp)
    ld a5, 112(sp)
    80201e9e:	77c6                	ld	a5,112(sp)
    ld a6, 120(sp)
    80201ea0:	7866                	ld	a6,120(sp)
    ld a7, 128(sp)
    80201ea2:	688a                	ld	a7,128(sp)
    ld s2, 136(sp)
    80201ea4:	692a                	ld	s2,136(sp)
    ld s3, 144(sp)
    80201ea6:	69ca                	ld	s3,144(sp)
    ld s4, 152(sp)
    80201ea8:	6a6a                	ld	s4,152(sp)
    ld s5, 160(sp)
    80201eaa:	7a8a                	ld	s5,160(sp)
    ld s6, 168(sp)
    80201eac:	7b2a                	ld	s6,168(sp)
    ld s7, 176(sp)
    80201eae:	7bca                	ld	s7,176(sp)
    ld s8, 184(sp)
    80201eb0:	7c6a                	ld	s8,184(sp)
    ld s9, 192(sp)
    80201eb2:	6c8e                	ld	s9,192(sp)
    ld s10, 200(sp)
    80201eb4:	6d2e                	ld	s10,200(sp)
    ld s11, 208(sp)
    80201eb6:	6dce                	ld	s11,208(sp)
    ld t3, 216(sp)
    80201eb8:	6e6e                	ld	t3,216(sp)
    ld t4, 224(sp)
    80201eba:	7e8e                	ld	t4,224(sp)
    ld t5, 232(sp)
    80201ebc:	7f2e                	ld	t5,232(sp)
    ld t6, 240(sp)
    80201ebe:	7fce                	ld	t6,240(sp)

    addi sp, sp, 256
    80201ec0:	6111                	addi	sp,sp,256
    sret
    80201ec2:	10200073          	sret

0000000080201ec6 <codeMapper>:

    *new = p;
    return 0;
}

int codeMapper(u64 va, u32 segmentSize, u8 *binary, u32 binSize, void *userData) {
    80201ec6:	7119                	addi	sp,sp,-128
    80201ec8:	fc86                	sd	ra,120(sp)
    80201eca:	f8a2                	sd	s0,112(sp)
    80201ecc:	f4a6                	sd	s1,104(sp)
    80201ece:	f0ca                	sd	s2,96(sp)
    80201ed0:	ecce                	sd	s3,88(sp)
    80201ed2:	e8d2                	sd	s4,80(sp)
    80201ed4:	e4d6                	sd	s5,72(sp)
    80201ed6:	e0da                	sd	s6,64(sp)
    80201ed8:	fc5e                	sd	s7,56(sp)
    80201eda:	f862                	sd	s8,48(sp)
    80201edc:	f466                	sd	s9,40(sp)
    80201ede:	f06a                	sd	s10,32(sp)
    80201ee0:	ec6e                	sd	s11,24(sp)
    80201ee2:	0100                	addi	s0,sp,128
    80201ee4:	8baa                	mv	s7,a0
    80201ee6:	8d2e                	mv	s10,a1
    80201ee8:	8db2                	mv	s11,a2
    80201eea:	89b6                	mv	s3,a3
    80201eec:	8c3a                	mv	s8,a4
    Process *process = (Process*)userData;
    PhysicalPage *p = NULL;
    80201eee:	f8043423          	sd	zero,-120(s0)
    u64 i;
    int r = 0;
    u64 offset = va - DOWN_ALIGN(va, PAGE_SIZE);
    80201ef2:	03451793          	slli	a5,a0,0x34
    80201ef6:	0347d913          	srli	s2,a5,0x34
    u64* j;

    if (offset > 0) {
    80201efa:	e39d                	bnez	a5,80201f20 <codeMapper+0x5a>
                PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        }
        r = MIN(binSize, PAGE_SIZE - offset);
        bcopy(binary, (void*) page2pa(p) + offset, r);
    }
    for (i = r; i < binSize; i += r) {
    80201efc:	02069993          	slli	s3,a3,0x20
    80201f00:	0209d993          	srli	s3,s3,0x20
    80201f04:	26098063          	beqz	s3,80202164 <codeMapper+0x29e>
    int hartId;
} PhysicalPage;

inline u32 page2PPN(PhysicalPage *page) {
    extern PhysicalPage pages[];
    return page - pages;
    80201f08:	00096b17          	auipc	s6,0x96
    80201f0c:	518b0b13          	addi	s6,s6,1304 # 80298420 <pages>
    80201f10:	00008a97          	auipc	s5,0x8
    80201f14:	da8a8a93          	addi	s5,s5,-600 # 80209cb8 <__func__.0+0x8>
    return pages + ppn;
}


inline u64 page2pa(PhysicalPage *page) {
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201f18:	4a05                	li	s4,1
    80201f1a:	0a7e                	slli	s4,s4,0x1f
        if (pageAlloc(&p) != 0) {
            return -1;
        }
        pageInsert(process->pgdir, va + i, page2pa(p), 
            PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        r = MIN(PAGE_SIZE, binSize - i);
    80201f1c:	6c85                	lui	s9,0x1
    80201f1e:	a0c5                	j	80201ffe <codeMapper+0x138>
        p = pa2page(pageLookup(process->pgdir, va, &j));
    80201f20:	f8040613          	addi	a2,s0,-128
    80201f24:	85aa                	mv	a1,a0
    80201f26:	13073503          	ld	a0,304(a4) # fffffffffff00130 <bssEnd+0xffffffff7fb0f130>
    80201f2a:	fffff097          	auipc	ra,0xfffff
    80201f2e:	7c8080e7          	jalr	1992(ra) # 802016f2 <pageLookup>
}

inline PhysicalPage* pa2page(u64 pa) {
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80201f32:	800007b7          	lui	a5,0x80000
    80201f36:	00f50733          	add	a4,a0,a5
    80201f3a:	8331                	srli	a4,a4,0xc
    return pages + ppn;
    80201f3c:	1702                	slli	a4,a4,0x20
    80201f3e:	9301                	srli	a4,a4,0x20
    80201f40:	00171793          	slli	a5,a4,0x1
    80201f44:	97ba                	add	a5,a5,a4
    80201f46:	078e                	slli	a5,a5,0x3
    80201f48:	00096717          	auipc	a4,0x96
    80201f4c:	4d870713          	addi	a4,a4,1240 # 80298420 <pages>
    80201f50:	973e                	add	a4,a4,a5
    80201f52:	f8e43423          	sd	a4,-120(s0)
        r = MIN(binSize, PAGE_SIZE - offset);
    80201f56:	1982                	slli	s3,s3,0x20
    80201f58:	0209d993          	srli	s3,s3,0x20
    80201f5c:	6485                	lui	s1,0x1
    80201f5e:	412484b3          	sub	s1,s1,s2
    80201f62:	0099f363          	bgeu	s3,s1,80201f68 <codeMapper+0xa2>
    80201f66:	84ce                	mv	s1,s3
    80201f68:	2481                	sext.w	s1,s1
    return page - pages;
    80201f6a:	878d                	srai	a5,a5,0x3
    80201f6c:	00008717          	auipc	a4,0x8
    80201f70:	d4c73703          	ld	a4,-692(a4) # 80209cb8 <__func__.0+0x8>
    80201f74:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201f78:	00c7979b          	slliw	a5,a5,0xc
    80201f7c:	1782                	slli	a5,a5,0x20
    80201f7e:	9381                	srli	a5,a5,0x20
        bcopy(binary, (void*) page2pa(p) + offset, r);
    80201f80:	4585                	li	a1,1
    80201f82:	05fe                	slli	a1,a1,0x1f
    80201f84:	95ca                	add	a1,a1,s2
    80201f86:	8626                	mv	a2,s1
    80201f88:	95be                	add	a1,a1,a5
    80201f8a:	856e                	mv	a0,s11
    80201f8c:	fffff097          	auipc	ra,0xfffff
    80201f90:	3b8080e7          	jalr	952(ra) # 80201344 <bcopy>
    for (i = r; i < binSize; i += r) {
    80201f94:	8926                	mv	s2,s1
    80201f96:	f734e9e3          	bltu	s1,s3,80201f08 <codeMapper+0x42>
        bcopy(binary + i, (void*) page2pa(p), r);
    }

    offset = va + i - DOWN_ALIGN(va + i, PAGE_SIZE);
    80201f9a:	012b85b3          	add	a1,s7,s2
    80201f9e:	03459793          	slli	a5,a1,0x34
    80201fa2:	0347d993          	srli	s3,a5,0x34
    if (offset > 0) {
    80201fa6:	e3cd                	bnez	a5,80202048 <codeMapper+0x182>
                PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        }
        r = MIN(segmentSize - i, PAGE_SIZE - offset);
        bzero((void*) page2pa(p) + offset, r);
    }
    for (i += r; i < segmentSize; i += r) {
    80201fa8:	94ca                	add	s1,s1,s2
    80201faa:	1d02                	slli	s10,s10,0x20
    80201fac:	020d5d13          	srli	s10,s10,0x20
    80201fb0:	1ba4f663          	bgeu	s1,s10,8020215c <codeMapper+0x296>
    return page - pages;
    80201fb4:	00096b17          	auipc	s6,0x96
    80201fb8:	46cb0b13          	addi	s6,s6,1132 # 80298420 <pages>
    80201fbc:	00008a97          	auipc	s5,0x8
    80201fc0:	cfca8a93          	addi	s5,s5,-772 # 80209cb8 <__func__.0+0x8>
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201fc4:	4a05                	li	s4,1
    80201fc6:	0a7e                	slli	s4,s4,0x1f
        if (pageAlloc(&p) != 0) {
            return -1;
        }
        pageInsert(process->pgdir, va + i, page2pa(p), 
            PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        r = MIN(PAGE_SIZE, segmentSize - i);
    80201fc8:	6c85                	lui	s9,0x1
    80201fca:	a21d                	j	802020f0 <codeMapper+0x22a>
        r = MIN(PAGE_SIZE, binSize - i);
    80201fcc:	2481                	sext.w	s1,s1
    return page - pages;
    80201fce:	f8843583          	ld	a1,-120(s0)
    80201fd2:	416585b3          	sub	a1,a1,s6
    80201fd6:	858d                	srai	a1,a1,0x3
    80201fd8:	000ab783          	ld	a5,0(s5)
    80201fdc:	02f585b3          	mul	a1,a1,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201fe0:	00c5959b          	slliw	a1,a1,0xc
    80201fe4:	1582                	slli	a1,a1,0x20
    80201fe6:	9181                	srli	a1,a1,0x20
        bcopy(binary + i, (void*) page2pa(p), r);
    80201fe8:	8626                	mv	a2,s1
    80201fea:	95d2                	add	a1,a1,s4
    80201fec:	012d8533          	add	a0,s11,s2
    80201ff0:	fffff097          	auipc	ra,0xfffff
    80201ff4:	354080e7          	jalr	852(ra) # 80201344 <bcopy>
    for (i = r; i < binSize; i += r) {
    80201ff8:	9926                	add	s2,s2,s1
    80201ffa:	fb3970e3          	bgeu	s2,s3,80201f9a <codeMapper+0xd4>
        if (pageAlloc(&p) != 0) {
    80201ffe:	f8840513          	addi	a0,s0,-120
    80202002:	fffff097          	auipc	ra,0xfffff
    80202006:	560080e7          	jalr	1376(ra) # 80201562 <pageAlloc>
    8020200a:	12051863          	bnez	a0,8020213a <codeMapper+0x274>
    return page - pages;
    8020200e:	f8843603          	ld	a2,-120(s0)
    80202012:	41660633          	sub	a2,a2,s6
    80202016:	860d                	srai	a2,a2,0x3
    80202018:	000ab783          	ld	a5,0(s5)
    8020201c:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202020:	00c6161b          	slliw	a2,a2,0xc
    80202024:	1602                	slli	a2,a2,0x20
    80202026:	9201                	srli	a2,a2,0x20
        pageInsert(process->pgdir, va + i, page2pa(p), 
    80202028:	46f9                	li	a3,30
    8020202a:	9652                	add	a2,a2,s4
    8020202c:	012b85b3          	add	a1,s7,s2
    80202030:	130c3503          	ld	a0,304(s8)
    80202034:	00000097          	auipc	ra,0x0
    80202038:	8a8080e7          	jalr	-1880(ra) # 802018dc <pageInsert>
        r = MIN(PAGE_SIZE, binSize - i);
    8020203c:	412984b3          	sub	s1,s3,s2
    80202040:	f89cf6e3          	bgeu	s9,s1,80201fcc <codeMapper+0x106>
    80202044:	84e6                	mv	s1,s9
    80202046:	b759                	j	80201fcc <codeMapper+0x106>
        p = pa2page(pageLookup(process->pgdir, va + i, &j));
    80202048:	f8040613          	addi	a2,s0,-128
    8020204c:	130c3503          	ld	a0,304(s8)
    80202050:	fffff097          	auipc	ra,0xfffff
    80202054:	6a2080e7          	jalr	1698(ra) # 802016f2 <pageLookup>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80202058:	800007b7          	lui	a5,0x80000
    8020205c:	00f50733          	add	a4,a0,a5
    80202060:	8331                	srli	a4,a4,0xc
    return pages + ppn;
    80202062:	1702                	slli	a4,a4,0x20
    80202064:	9301                	srli	a4,a4,0x20
    80202066:	00171793          	slli	a5,a4,0x1
    8020206a:	97ba                	add	a5,a5,a4
    8020206c:	078e                	slli	a5,a5,0x3
    8020206e:	00096717          	auipc	a4,0x96
    80202072:	3b270713          	addi	a4,a4,946 # 80298420 <pages>
    80202076:	973e                	add	a4,a4,a5
    80202078:	f8e43423          	sd	a4,-120(s0)
        r = MIN(segmentSize - i, PAGE_SIZE - offset);
    8020207c:	020d1493          	slli	s1,s10,0x20
    80202080:	9081                	srli	s1,s1,0x20
    80202082:	6705                	lui	a4,0x1
    80202084:	41370733          	sub	a4,a4,s3
    80202088:	412484b3          	sub	s1,s1,s2
    8020208c:	00977363          	bgeu	a4,s1,80202092 <codeMapper+0x1cc>
    80202090:	84ba                	mv	s1,a4
    80202092:	2481                	sext.w	s1,s1
    return page - pages;
    80202094:	878d                	srai	a5,a5,0x3
    80202096:	00008717          	auipc	a4,0x8
    8020209a:	c2273703          	ld	a4,-990(a4) # 80209cb8 <__func__.0+0x8>
    8020209e:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802020a2:	00c7979b          	slliw	a5,a5,0xc
    802020a6:	1782                	slli	a5,a5,0x20
    802020a8:	9381                	srli	a5,a5,0x20
        bzero((void*) page2pa(p) + offset, r);
    802020aa:	4705                	li	a4,1
    802020ac:	077e                	slli	a4,a4,0x1f
    802020ae:	00e98533          	add	a0,s3,a4
    802020b2:	85a6                	mv	a1,s1
    802020b4:	953e                	add	a0,a0,a5
    802020b6:	fffff097          	auipc	ra,0xfffff
    802020ba:	318080e7          	jalr	792(ra) # 802013ce <bzero>
    802020be:	b5ed                	j	80201fa8 <codeMapper+0xe2>
        bzero((void*) page2pa(p), r);
    802020c0:	2901                	sext.w	s2,s2
    return page - pages;
    802020c2:	f8843783          	ld	a5,-120(s0)
    802020c6:	416787b3          	sub	a5,a5,s6
    802020ca:	878d                	srai	a5,a5,0x3
    802020cc:	000ab703          	ld	a4,0(s5)
    802020d0:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802020d4:	00c7979b          	slliw	a5,a5,0xc
    802020d8:	1782                	slli	a5,a5,0x20
    802020da:	9381                	srli	a5,a5,0x20
    802020dc:	85ca                	mv	a1,s2
    802020de:	01478533          	add	a0,a5,s4
    802020e2:	fffff097          	auipc	ra,0xfffff
    802020e6:	2ec080e7          	jalr	748(ra) # 802013ce <bzero>
    for (i += r; i < segmentSize; i += r) {
    802020ea:	94ca                	add	s1,s1,s2
    802020ec:	05a4f863          	bgeu	s1,s10,8020213c <codeMapper+0x276>
        if (pageAlloc(&p) != 0) {
    802020f0:	f8840513          	addi	a0,s0,-120
    802020f4:	fffff097          	auipc	ra,0xfffff
    802020f8:	46e080e7          	jalr	1134(ra) # 80201562 <pageAlloc>
    802020fc:	89aa                	mv	s3,a0
    802020fe:	e12d                	bnez	a0,80202160 <codeMapper+0x29a>
    return page - pages;
    80202100:	f8843603          	ld	a2,-120(s0)
    80202104:	41660633          	sub	a2,a2,s6
    80202108:	860d                	srai	a2,a2,0x3
    8020210a:	000ab783          	ld	a5,0(s5)
    8020210e:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202112:	00c6161b          	slliw	a2,a2,0xc
    80202116:	1602                	slli	a2,a2,0x20
    80202118:	9201                	srli	a2,a2,0x20
        pageInsert(process->pgdir, va + i, page2pa(p), 
    8020211a:	46f9                	li	a3,30
    8020211c:	9652                	add	a2,a2,s4
    8020211e:	009b85b3          	add	a1,s7,s1
    80202122:	130c3503          	ld	a0,304(s8)
    80202126:	fffff097          	auipc	ra,0xfffff
    8020212a:	7b6080e7          	jalr	1974(ra) # 802018dc <pageInsert>
        r = MIN(PAGE_SIZE, segmentSize - i);
    8020212e:	409d0933          	sub	s2,s10,s1
    80202132:	f92cf7e3          	bgeu	s9,s2,802020c0 <codeMapper+0x1fa>
    80202136:	8966                	mv	s2,s9
    80202138:	b761                	j	802020c0 <codeMapper+0x1fa>
            return -1;
    8020213a:	59fd                	li	s3,-1
    }
    return 0;
}
    8020213c:	854e                	mv	a0,s3
    8020213e:	70e6                	ld	ra,120(sp)
    80202140:	7446                	ld	s0,112(sp)
    80202142:	74a6                	ld	s1,104(sp)
    80202144:	7906                	ld	s2,96(sp)
    80202146:	69e6                	ld	s3,88(sp)
    80202148:	6a46                	ld	s4,80(sp)
    8020214a:	6aa6                	ld	s5,72(sp)
    8020214c:	6b06                	ld	s6,64(sp)
    8020214e:	7be2                	ld	s7,56(sp)
    80202150:	7c42                	ld	s8,48(sp)
    80202152:	7ca2                	ld	s9,40(sp)
    80202154:	7d02                	ld	s10,32(sp)
    80202156:	6de2                	ld	s11,24(sp)
    80202158:	6109                	addi	sp,sp,128
    8020215a:	8082                	ret
    return 0;
    8020215c:	4981                	li	s3,0
    8020215e:	bff9                	j	8020213c <codeMapper+0x276>
            return -1;
    80202160:	59fd                	li	s3,-1
    80202162:	bfe9                	j	8020213c <codeMapper+0x276>
    for (i = r; i < binSize; i += r) {
    80202164:	894e                	mv	s2,s3
    int r = 0;
    80202166:	4481                	li	s1,0
    80202168:	b581                	j	80201fa8 <codeMapper+0xe2>

000000008020216a <myproc>:
Process* myproc() {
    8020216a:	1101                	addi	sp,sp,-32
    8020216c:	ec06                	sd	ra,24(sp)
    8020216e:	e822                	sd	s0,16(sp)
    80202170:	e426                	sd	s1,8(sp)
    80202172:	1000                	addi	s0,sp,32
    interruptPush();
    80202174:	00001097          	auipc	ra,0x1
    80202178:	50a080e7          	jalr	1290(ra) # 8020367e <interruptPush>
#define HART_TOTAL_NUMBER 5

// which hart (core) is this?
static inline u64 r_hartid() {
    u64 x;
    asm volatile("mv %0, tp" : "=r" (x) );
    8020217c:	8792                	mv	a5,tp
    if (currentProcess[hartId] == NULL)
    8020217e:	2781                	sext.w	a5,a5
    80202180:	078e                	slli	a5,a5,0x3
    80202182:	00157717          	auipc	a4,0x157
    80202186:	2d670713          	addi	a4,a4,726 # 80359458 <currentProcess>
    8020218a:	97ba                	add	a5,a5,a4
    8020218c:	6384                	ld	s1,0(a5)
    8020218e:	c899                	beqz	s1,802021a4 <myproc+0x3a>
    interruptPop();
    80202190:	00001097          	auipc	ra,0x1
    80202194:	526080e7          	jalr	1318(ra) # 802036b6 <interruptPop>
}
    80202198:	8526                	mv	a0,s1
    8020219a:	60e2                	ld	ra,24(sp)
    8020219c:	6442                	ld	s0,16(sp)
    8020219e:	64a2                	ld	s1,8(sp)
    802021a0:	6105                	addi	sp,sp,32
    802021a2:	8082                	ret
        panic("get current process error");
    802021a4:	00007697          	auipc	a3,0x7
    802021a8:	22c68693          	addi	a3,a3,556 # 802093d0 <__func__.1+0x10>
    802021ac:	00008617          	auipc	a2,0x8
    802021b0:	a9c60613          	addi	a2,a2,-1380 # 80209c48 <__func__.5>
    802021b4:	45d1                	li	a1,20
    802021b6:	00007517          	auipc	a0,0x7
    802021ba:	23a50513          	addi	a0,a0,570 # 802093f0 <__func__.1+0x30>
    802021be:	ffffe097          	auipc	ra,0xffffe
    802021c2:	384080e7          	jalr	900(ra) # 80200542 <_panic_>

00000000802021c6 <processInit>:
void processInit() {
    802021c6:	1101                	addi	sp,sp,-32
    802021c8:	ec06                	sd	ra,24(sp)
    802021ca:	e822                	sd	s0,16(sp)
    802021cc:	e426                	sd	s1,8(sp)
    802021ce:	1000                	addi	s0,sp,32
    printf("Process init start...\n");
    802021d0:	00007517          	auipc	a0,0x7
    802021d4:	23050513          	addi	a0,a0,560 # 80209400 <__func__.1+0x40>
    802021d8:	ffffe097          	auipc	ra,0xffffe
    802021dc:	2de080e7          	jalr	734(ra) # 802004b6 <printf>
    initLock(&freeProcessesLock, "freeProcess");
    802021e0:	00157497          	auipc	s1,0x157
    802021e4:	27848493          	addi	s1,s1,632 # 80359458 <currentProcess>
    802021e8:	00007597          	auipc	a1,0x7
    802021ec:	23058593          	addi	a1,a1,560 # 80209418 <__func__.1+0x58>
    802021f0:	00157517          	auipc	a0,0x157
    802021f4:	29050513          	addi	a0,a0,656 # 80359480 <freeProcessesLock>
    802021f8:	00001097          	auipc	ra,0x1
    802021fc:	670080e7          	jalr	1648(ra) # 80203868 <initLock>
    initLock(&scheduleListLock, "scheduleList");
    80202200:	00007597          	auipc	a1,0x7
    80202204:	22858593          	addi	a1,a1,552 # 80209428 <__func__.1+0x68>
    80202208:	00157517          	auipc	a0,0x157
    8020220c:	29050513          	addi	a0,a0,656 # 80359498 <scheduleListLock>
    80202210:	00001097          	auipc	ra,0x1
    80202214:	658080e7          	jalr	1624(ra) # 80203868 <initLock>
    initLock(&processIdLock, "processId");
    80202218:	00007597          	auipc	a1,0x7
    8020221c:	22058593          	addi	a1,a1,544 # 80209438 <__func__.1+0x78>
    80202220:	00157517          	auipc	a0,0x157
    80202224:	29050513          	addi	a0,a0,656 # 803594b0 <processIdLock>
    80202228:	00001097          	auipc	ra,0x1
    8020222c:	640080e7          	jalr	1600(ra) # 80203868 <initLock>
    LIST_INIT(&scheduleList[0]);
    80202230:	0604b823          	sd	zero,112(s1)
    LIST_INIT(&scheduleList[1]);
    80202234:	0604bc23          	sd	zero,120(s1)
        processes[i].trapframe.kernelSatp = MAKE_SATP(kernelPageDirectory);
    80202238:	001ee597          	auipc	a1,0x1ee
    8020223c:	dc858593          	addi	a1,a1,-568 # 803f0000 <_pgdir>
    80202240:	81b1                	srli	a1,a1,0xc
    80202242:	57fd                	li	a5,-1
    80202244:	17fe                	slli	a5,a5,0x3f
    80202246:	8ddd                	or	a1,a1,a5
    80202248:	001d5797          	auipc	a5,0x1d5
    8020224c:	0c878793          	addi	a5,a5,200 # 803d7310 <processes+0x7de08>
    80202250:	00157817          	auipc	a6,0x157
    80202254:	2b880813          	addi	a6,a6,696 # 80359508 <processes>
    80202258:	4681                	li	a3,0
        LIST_INSERT_HEAD(&freeProcesses, &processes[i], link);
    8020225a:	001d5517          	auipc	a0,0x1d5
    8020225e:	2b650513          	addi	a0,a0,694 # 803d7510 <freeProcesses>
    80202262:	a801                	j	80202272 <processInit+0xac>
    80202264:	12a6b423          	sd	a0,296(a3)
    for (i = PROCESS_TOTAL_NUMBER - 1; i >= 0; i--) {
    80202268:	e0878713          	addi	a4,a5,-504
    8020226c:	03078063          	beq	a5,a6,8020228c <processInit+0xc6>
    80202270:	87ba                	mv	a5,a4
        processes[i].state = UNUSED;
    80202272:	8736                	mv	a4,a3
    80202274:	86be                	mv	a3,a5
    80202276:	1407aa23          	sw	zero,340(a5)
        processes[i].trapframe.kernelSatp = MAKE_SATP(kernelPageDirectory);
    8020227a:	e38c                	sd	a1,0(a5)
        LIST_INSERT_HEAD(&freeProcesses, &processes[i], link);
    8020227c:	12e7b023          	sd	a4,288(a5)
    80202280:	d375                	beqz	a4,80202264 <processInit+0x9e>
    80202282:	12078613          	addi	a2,a5,288
    80202286:	12c73423          	sd	a2,296(a4)
    8020228a:	bfe9                	j	80202264 <processInit+0x9e>
    8020228c:	001d5717          	auipc	a4,0x1d5
    80202290:	28470713          	addi	a4,a4,644 # 803d7510 <freeProcesses>
    80202294:	00157797          	auipc	a5,0x157
    80202298:	27478793          	addi	a5,a5,628 # 80359508 <processes>
    8020229c:	e31c                	sd	a5,0(a4)
    8020229e:	12e7b423          	sd	a4,296(a5)
    w_sscratch((u64)getHartTrapFrame());
    802022a2:	00001097          	auipc	ra,0x1
    802022a6:	6d6080e7          	jalr	1750(ra) # 80203978 <getHartTrapFrame>
	return x;
}

// Supervisor Scratch register, for early trap handler in trampoline.S.
static inline void w_sscratch(u64 x) {
	asm volatile("csrw sscratch, %0" : : "r" (x));
    802022aa:	14051073          	csrw	sscratch,a0
    printf("Process init finish!\n");
    802022ae:	00007517          	auipc	a0,0x7
    802022b2:	19a50513          	addi	a0,a0,410 # 80209448 <__func__.1+0x88>
    802022b6:	ffffe097          	auipc	ra,0xffffe
    802022ba:	200080e7          	jalr	512(ra) # 802004b6 <printf>
}
    802022be:	60e2                	ld	ra,24(sp)
    802022c0:	6442                	ld	s0,16(sp)
    802022c2:	64a2                	ld	s1,8(sp)
    802022c4:	6105                	addi	sp,sp,32
    802022c6:	8082                	ret

00000000802022c8 <generateProcessId>:
u32 generateProcessId(Process *p) {
    802022c8:	1101                	addi	sp,sp,-32
    802022ca:	ec06                	sd	ra,24(sp)
    802022cc:	e822                	sd	s0,16(sp)
    802022ce:	e426                	sd	s1,8(sp)
    802022d0:	e04a                	sd	s2,0(sp)
    802022d2:	1000                	addi	s0,sp,32
    802022d4:	84aa                	mv	s1,a0
    acquireLock(&processIdLock);
    802022d6:	00157917          	auipc	s2,0x157
    802022da:	1da90913          	addi	s2,s2,474 # 803594b0 <processIdLock>
    802022de:	854a                	mv	a0,s2
    802022e0:	00001097          	auipc	ra,0x1
    802022e4:	5d2080e7          	jalr	1490(ra) # 802038b2 <acquireLock>
    u32 processId = (++nextId << (1 + LOG_PROCESS_NUM)) | (u32)(p - processes);
    802022e8:	001d5717          	auipc	a4,0x1d5
    802022ec:	22470713          	addi	a4,a4,548 # 803d750c <nextId.4>
    802022f0:	431c                	lw	a5,0(a4)
    802022f2:	2785                	addiw	a5,a5,1
    802022f4:	c31c                	sw	a5,0(a4)
    802022f6:	00157717          	auipc	a4,0x157
    802022fa:	21270713          	addi	a4,a4,530 # 80359508 <processes>
    802022fe:	8c99                	sub	s1,s1,a4
    80202300:	848d                	srai	s1,s1,0x3
    80202302:	00008717          	auipc	a4,0x8
    80202306:	9be73703          	ld	a4,-1602(a4) # 80209cc0 <__func__.0+0x10>
    8020230a:	02e484b3          	mul	s1,s1,a4
    8020230e:	00b7979b          	slliw	a5,a5,0xb
    80202312:	8cdd                	or	s1,s1,a5
    80202314:	2481                	sext.w	s1,s1
    releaseLock(&processIdLock);
    80202316:	854a                	mv	a0,s2
    80202318:	00001097          	auipc	ra,0x1
    8020231c:	5fe080e7          	jalr	1534(ra) # 80203916 <releaseLock>
}
    80202320:	8526                	mv	a0,s1
    80202322:	60e2                	ld	ra,24(sp)
    80202324:	6442                	ld	s0,16(sp)
    80202326:	64a2                	ld	s1,8(sp)
    80202328:	6902                	ld	s2,0(sp)
    8020232a:	6105                	addi	sp,sp,32
    8020232c:	8082                	ret

000000008020232e <processFree>:
void processFree(Process *p) {
    8020232e:	1101                	addi	sp,sp,-32
    80202330:	ec06                	sd	ra,24(sp)
    80202332:	e822                	sd	s0,16(sp)
    80202334:	e426                	sd	s1,8(sp)
    80202336:	1000                	addi	s0,sp,32
    80202338:	84aa                	mv	s1,a0
    asm volatile("mv %0, tp" : "=r" (x) );
    8020233a:	8712                	mv	a4,tp
    printf("[%lx] free env %lx\n", currentProcess[r_hartid()] ? currentProcess[r_hartid()]->id : 0, p->id);
    8020233c:	070e                	slli	a4,a4,0x3
    8020233e:	00157797          	auipc	a5,0x157
    80202342:	11a78793          	addi	a5,a5,282 # 80359458 <currentProcess>
    80202346:	97ba                	add	a5,a5,a4
    80202348:	639c                	ld	a5,0(a5)
    8020234a:	4581                	li	a1,0
    8020234c:	cb99                	beqz	a5,80202362 <processFree+0x34>
    8020234e:	8712                	mv	a4,tp
    80202350:	070e                	slli	a4,a4,0x3
    80202352:	00157797          	auipc	a5,0x157
    80202356:	10678793          	addi	a5,a5,262 # 80359458 <currentProcess>
    8020235a:	97ba                	add	a5,a5,a4
    8020235c:	639c                	ld	a5,0(a5)
    8020235e:	1387a583          	lw	a1,312(a5)
    80202362:	1384a603          	lw	a2,312(s1)
    80202366:	00007517          	auipc	a0,0x7
    8020236a:	0fa50513          	addi	a0,a0,250 # 80209460 <__func__.1+0xa0>
    8020236e:	ffffe097          	auipc	ra,0xffffe
    80202372:	148080e7          	jalr	328(ra) # 802004b6 <printf>
    pgdirFree(p->pgdir);
    80202376:	1304b503          	ld	a0,304(s1)
    8020237a:	fffff097          	auipc	ra,0xfffff
    8020237e:	468080e7          	jalr	1128(ra) # 802017e2 <pgdirFree>
    acquireLock(&freeProcessesLock);
    80202382:	00157517          	auipc	a0,0x157
    80202386:	0fe50513          	addi	a0,a0,254 # 80359480 <freeProcessesLock>
    8020238a:	00001097          	auipc	ra,0x1
    8020238e:	528080e7          	jalr	1320(ra) # 802038b2 <acquireLock>
    LIST_INSERT_HEAD(&freeProcesses, p, link);
    80202392:	001d5797          	auipc	a5,0x1d5
    80202396:	17e7b783          	ld	a5,382(a5) # 803d7510 <freeProcesses>
    8020239a:	12f4b023          	sd	a5,288(s1)
    8020239e:	c789                	beqz	a5,802023a8 <processFree+0x7a>
    802023a0:	12048713          	addi	a4,s1,288
    802023a4:	12e7b423          	sd	a4,296(a5)
    802023a8:	001d5797          	auipc	a5,0x1d5
    802023ac:	16878793          	addi	a5,a5,360 # 803d7510 <freeProcesses>
    802023b0:	e384                	sd	s1,0(a5)
    802023b2:	12f4b423          	sd	a5,296(s1)
    releaseLock(&freeProcessesLock);
    802023b6:	00157517          	auipc	a0,0x157
    802023ba:	0ca50513          	addi	a0,a0,202 # 80359480 <freeProcessesLock>
    802023be:	00001097          	auipc	ra,0x1
    802023c2:	558080e7          	jalr	1368(ra) # 80203916 <releaseLock>
}
    802023c6:	60e2                	ld	ra,24(sp)
    802023c8:	6442                	ld	s0,16(sp)
    802023ca:	64a2                	ld	s1,8(sp)
    802023cc:	6105                	addi	sp,sp,32
    802023ce:	8082                	ret

00000000802023d0 <pid2Process>:
int pid2Process(u32 processId, struct Process **process, int checkPerm) {
    802023d0:	1141                	addi	sp,sp,-16
    802023d2:	e422                	sd	s0,8(sp)
    802023d4:	0800                	addi	s0,sp,16
    802023d6:	8792                	mv	a5,tp
    int hartId = r_hartid();
    802023d8:	0007871b          	sext.w	a4,a5
    if (processId == 0) {
    802023dc:	c921                	beqz	a0,8020242c <pid2Process+0x5c>
    p = processes + PROCESS_OFFSET(processId);
    802023de:	3ff57693          	andi	a3,a0,1023
    802023e2:	00669793          	slli	a5,a3,0x6
    802023e6:	8f95                	sub	a5,a5,a3
    802023e8:	078e                	slli	a5,a5,0x3
    802023ea:	00157697          	auipc	a3,0x157
    802023ee:	11e68693          	addi	a3,a3,286 # 80359508 <processes>
    802023f2:	97b6                	add	a5,a5,a3
    if (p->state == UNUSED || p->id != processId) {
    802023f4:	1547a683          	lw	a3,340(a5)
    802023f8:	c6b1                	beqz	a3,80202444 <pid2Process+0x74>
    802023fa:	1387a683          	lw	a3,312(a5)
    802023fe:	04a69663          	bne	a3,a0,8020244a <pid2Process+0x7a>
    return 0;
    80202402:	8532                	mv	a0,a2
    if (checkPerm) {
    80202404:	ce05                	beqz	a2,8020243c <pid2Process+0x6c>
        if (p != currentProcess[hartId] && p->parentId != currentProcess[hartId]->id) {
    80202406:	070e                	slli	a4,a4,0x3
    80202408:	00157697          	auipc	a3,0x157
    8020240c:	05068693          	addi	a3,a3,80 # 80359458 <currentProcess>
    80202410:	9736                	add	a4,a4,a3
    80202412:	6318                	ld	a4,0(a4)
    return 0;
    80202414:	4501                	li	a0,0
        if (p != currentProcess[hartId] && p->parentId != currentProcess[hartId]->id) {
    80202416:	02f70363          	beq	a4,a5,8020243c <pid2Process+0x6c>
    8020241a:	13c7a683          	lw	a3,316(a5)
    8020241e:	13872703          	lw	a4,312(a4)
    80202422:	00e68d63          	beq	a3,a4,8020243c <pid2Process+0x6c>
    80202426:	4781                	li	a5,0
            return INVALID_PERM;
    80202428:	4521                	li	a0,8
    8020242a:	a809                	j	8020243c <pid2Process+0x6c>
        *process = currentProcess[hartId];
    8020242c:	00371793          	slli	a5,a4,0x3
    80202430:	00157717          	auipc	a4,0x157
    80202434:	02870713          	addi	a4,a4,40 # 80359458 <currentProcess>
    80202438:	97ba                	add	a5,a5,a4
    8020243a:	639c                	ld	a5,0(a5)
    8020243c:	e19c                	sd	a5,0(a1)
}
    8020243e:	6422                	ld	s0,8(sp)
    80202440:	0141                	addi	sp,sp,16
    80202442:	8082                	ret
    80202444:	4781                	li	a5,0
        return INVALID_PROCESS_STATUS;
    80202446:	451d                	li	a0,7
    80202448:	bfd5                	j	8020243c <pid2Process+0x6c>
    8020244a:	4781                	li	a5,0
    8020244c:	451d                	li	a0,7
    8020244e:	b7fd                	j	8020243c <pid2Process+0x6c>

0000000080202450 <processAlloc>:
int processAlloc(Process **new, u64 parentId) {
    80202450:	7139                	addi	sp,sp,-64
    80202452:	fc06                	sd	ra,56(sp)
    80202454:	f822                	sd	s0,48(sp)
    80202456:	f426                	sd	s1,40(sp)
    80202458:	f04a                	sd	s2,32(sp)
    8020245a:	ec4e                	sd	s3,24(sp)
    8020245c:	e852                	sd	s4,16(sp)
    8020245e:	0080                	addi	s0,sp,64
    80202460:	89aa                	mv	s3,a0
    80202462:	8a2e                	mv	s4,a1
    acquireLock(&freeProcessesLock);
    80202464:	00157517          	auipc	a0,0x157
    80202468:	01c50513          	addi	a0,a0,28 # 80359480 <freeProcessesLock>
    8020246c:	00001097          	auipc	ra,0x1
    80202470:	446080e7          	jalr	1094(ra) # 802038b2 <acquireLock>
    if (LIST_EMPTY(&freeProcesses)) {
    80202474:	001d5497          	auipc	s1,0x1d5
    80202478:	09c4b483          	ld	s1,156(s1) # 803d7510 <freeProcesses>
    8020247c:	c0ed                	beqz	s1,8020255e <processAlloc+0x10e>
    LIST_REMOVE(p, link);
    8020247e:	1204b783          	ld	a5,288(s1)
    80202482:	c789                	beqz	a5,8020248c <processAlloc+0x3c>
    80202484:	1284b703          	ld	a4,296(s1)
    80202488:	12e7b423          	sd	a4,296(a5)
    8020248c:	1284b783          	ld	a5,296(s1)
    80202490:	1204b703          	ld	a4,288(s1)
    80202494:	e398                	sd	a4,0(a5)
    releaseLock(&freeProcessesLock);
    80202496:	00157517          	auipc	a0,0x157
    8020249a:	fea50513          	addi	a0,a0,-22 # 80359480 <freeProcessesLock>
    8020249e:	00001097          	auipc	ra,0x1
    802024a2:	478080e7          	jalr	1144(ra) # 80203916 <releaseLock>
    r = allocPgdir(&page);
    802024a6:	fc840513          	addi	a0,s0,-56
    802024aa:	fffff097          	auipc	ra,0xfffff
    802024ae:	4e8080e7          	jalr	1256(ra) # 80201992 <allocPgdir>
    if (r < 0) {
    802024b2:	0c054063          	bltz	a0,80202572 <processAlloc+0x122>
    return page - pages;
    802024b6:	fc843783          	ld	a5,-56(s0)
    802024ba:	00096717          	auipc	a4,0x96
    802024be:	f6670713          	addi	a4,a4,-154 # 80298420 <pages>
    802024c2:	8f99                	sub	a5,a5,a4
    802024c4:	878d                	srai	a5,a5,0x3
    802024c6:	00007717          	auipc	a4,0x7
    802024ca:	7f273703          	ld	a4,2034(a4) # 80209cb8 <__func__.0+0x8>
    802024ce:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802024d2:	00c7979b          	slliw	a5,a5,0xc
    802024d6:	1782                	slli	a5,a5,0x20
    802024d8:	9381                	srli	a5,a5,0x20
    802024da:	4705                	li	a4,1
    802024dc:	077e                	slli	a4,a4,0x1f
    802024de:	00e78533          	add	a0,a5,a4
    p->pgdir = (u64*) page2pa(page);
    802024e2:	12a4b823          	sd	a0,304(s1)
    pageInsert(p->pgdir, TRAMPOLINE_BASE, (u64)trampoline, 
    802024e6:	46b9                	li	a3,14
    802024e8:	00005617          	auipc	a2,0x5
    802024ec:	b1860613          	addi	a2,a2,-1256 # 80207000 <_trampoline>
    802024f0:	02000937          	lui	s2,0x2000
    802024f4:	197d                	addi	s2,s2,-1
    802024f6:	00d91593          	slli	a1,s2,0xd
    802024fa:	fffff097          	auipc	ra,0xfffff
    802024fe:	3e2080e7          	jalr	994(ra) # 802018dc <pageInsert>
    pageInsert(p->pgdir, TRAMPOLINE_BASE + PAGE_SIZE, ((u64)trampoline) + PAGE_SIZE, 
    80202502:	46b9                	li	a3,14
    80202504:	00006617          	auipc	a2,0x6
    80202508:	afc60613          	addi	a2,a2,-1284 # 80208000 <trapframe>
    8020250c:	040005b7          	lui	a1,0x4000
    80202510:	15fd                	addi	a1,a1,-1
    80202512:	05b2                	slli	a1,a1,0xc
    80202514:	1304b503          	ld	a0,304(s1)
    80202518:	fffff097          	auipc	ra,0xfffff
    8020251c:	3c4080e7          	jalr	964(ra) # 802018dc <pageInsert>
    p->id = generateProcessId(p);
    80202520:	8526                	mv	a0,s1
    80202522:	00000097          	auipc	ra,0x0
    80202526:	da6080e7          	jalr	-602(ra) # 802022c8 <generateProcessId>
    8020252a:	12a4ac23          	sw	a0,312(s1)
    p->state = RUNNABLE;
    8020252e:	4789                	li	a5,2
    80202530:	14f4aa23          	sw	a5,340(s1)
    p->parentId = parentId;
    80202534:	1344ae23          	sw	s4,316(s1)
    p->trapframe.kernelSp = getHartKernelTopSp();
    80202538:	00001097          	auipc	ra,0x1
    8020253c:	460080e7          	jalr	1120(ra) # 80203998 <getHartKernelTopSp>
    80202540:	e488                	sd	a0,8(s1)
    p->trapframe.sp = USER_STACK_TOP;
    80202542:	0936                	slli	s2,s2,0xd
    80202544:	0324b823          	sd	s2,48(s1)
    return 0;
    80202548:	4501                	li	a0,0
        *new = NULL;
    8020254a:	0099b023          	sd	s1,0(s3) # 10000 <_start-0x801f0000>
}
    8020254e:	70e2                	ld	ra,56(sp)
    80202550:	7442                	ld	s0,48(sp)
    80202552:	74a2                	ld	s1,40(sp)
    80202554:	7902                	ld	s2,32(sp)
    80202556:	69e2                	ld	s3,24(sp)
    80202558:	6a42                	ld	s4,16(sp)
    8020255a:	6121                	addi	sp,sp,64
    8020255c:	8082                	ret
        releaseLock(&freeProcessesLock);
    8020255e:	00157517          	auipc	a0,0x157
    80202562:	f2250513          	addi	a0,a0,-222 # 80359480 <freeProcessesLock>
    80202566:	00001097          	auipc	ra,0x1
    8020256a:	3b0080e7          	jalr	944(ra) # 80203916 <releaseLock>
        return -NO_FREE_PROCESS;
    8020256e:	556d                	li	a0,-5
    80202570:	bfe9                	j	8020254a <processAlloc+0xfa>
        panic("setup page alloc error\n");
    80202572:	00007697          	auipc	a3,0x7
    80202576:	f0668693          	addi	a3,a3,-250 # 80209478 <__func__.1+0xb8>
    8020257a:	00007617          	auipc	a2,0x7
    8020257e:	6c660613          	addi	a2,a2,1734 # 80209c40 <__func__.3>
    80202582:	06f00593          	li	a1,111
    80202586:	00007517          	auipc	a0,0x7
    8020258a:	e6a50513          	addi	a0,a0,-406 # 802093f0 <__func__.1+0x30>
    8020258e:	ffffe097          	auipc	ra,0xffffe
    80202592:	fb4080e7          	jalr	-76(ra) # 80200542 <_panic_>

0000000080202596 <processCreatePriority>:

void processCreatePriority(u8 *binary, u32 size, u32 priority) {
    80202596:	7139                	addi	sp,sp,-64
    80202598:	fc06                	sd	ra,56(sp)
    8020259a:	f822                	sd	s0,48(sp)
    8020259c:	f426                	sd	s1,40(sp)
    8020259e:	f04a                	sd	s2,32(sp)
    802025a0:	ec4e                	sd	s3,24(sp)
    802025a2:	e852                	sd	s4,16(sp)
    802025a4:	0080                	addi	s0,sp,64
    802025a6:	892a                	mv	s2,a0
    802025a8:	89ae                	mv	s3,a1
    802025aa:	8a32                	mv	s4,a2
    Process *p;
    int r = processAlloc(&p, 0);
    802025ac:	4581                	li	a1,0
    802025ae:	fc840513          	addi	a0,s0,-56
    802025b2:	00000097          	auipc	ra,0x0
    802025b6:	e9e080e7          	jalr	-354(ra) # 80202450 <processAlloc>
    if (r < 0) {
    802025ba:	08054263          	bltz	a0,8020263e <processCreatePriority+0xa8>
        return;
    }
    p->priority = priority;
    802025be:	fc843483          	ld	s1,-56(s0)
    802025c2:	1544a823          	sw	s4,336(s1)
    u64 entryPoint;
    if (loadElf(binary, size, &entryPoint, p, codeMapper) < 0) {
    802025c6:	00000717          	auipc	a4,0x0
    802025ca:	90070713          	addi	a4,a4,-1792 # 80201ec6 <codeMapper>
    802025ce:	86a6                	mv	a3,s1
    802025d0:	fc040613          	addi	a2,s0,-64
    802025d4:	85ce                	mv	a1,s3
    802025d6:	854a                	mv	a0,s2
    802025d8:	fffff097          	auipc	ra,0xfffff
    802025dc:	78e080e7          	jalr	1934(ra) # 80201d66 <loadElf>
    802025e0:	06054763          	bltz	a0,8020264e <processCreatePriority+0xb8>
        panic("process create error\n");
    }
    p->trapframe.epc = entryPoint;
    802025e4:	fc043783          	ld	a5,-64(s0)
    802025e8:	ec9c                	sd	a5,24(s1)

    acquireLock(&scheduleListLock);
    802025ea:	00157517          	auipc	a0,0x157
    802025ee:	eae50513          	addi	a0,a0,-338 # 80359498 <scheduleListLock>
    802025f2:	00001097          	auipc	ra,0x1
    802025f6:	2c0080e7          	jalr	704(ra) # 802038b2 <acquireLock>
    LIST_INSERT_TAIL(&scheduleList[0], p, scheduleLink);
    802025fa:	00157717          	auipc	a4,0x157
    802025fe:	ece73703          	ld	a4,-306(a4) # 803594c8 <scheduleList>
    80202602:	cb25                	beqz	a4,80202672 <processCreatePriority+0xdc>
    80202604:	14e4b023          	sd	a4,320(s1)
    80202608:	14073783          	ld	a5,320(a4)
    8020260c:	c799                	beqz	a5,8020261a <processCreatePriority+0x84>
    8020260e:	14f4b023          	sd	a5,320(s1)
    80202612:	873e                	mv	a4,a5
    80202614:	1407b783          	ld	a5,320(a5)
    80202618:	fbfd                	bnez	a5,8020260e <processCreatePriority+0x78>
    8020261a:	14973023          	sd	s1,320(a4)
    8020261e:	1404b783          	ld	a5,320(s1)
    80202622:	14078793          	addi	a5,a5,320
    80202626:	14f4b423          	sd	a5,328(s1)
    8020262a:	1404b023          	sd	zero,320(s1)
    releaseLock(&scheduleListLock);
    8020262e:	00157517          	auipc	a0,0x157
    80202632:	e6a50513          	addi	a0,a0,-406 # 80359498 <scheduleListLock>
    80202636:	00001097          	auipc	ra,0x1
    8020263a:	2e0080e7          	jalr	736(ra) # 80203916 <releaseLock>
}
    8020263e:	70e2                	ld	ra,56(sp)
    80202640:	7442                	ld	s0,48(sp)
    80202642:	74a2                	ld	s1,40(sp)
    80202644:	7902                	ld	s2,32(sp)
    80202646:	69e2                	ld	s3,24(sp)
    80202648:	6a42                	ld	s4,16(sp)
    8020264a:	6121                	addi	sp,sp,64
    8020264c:	8082                	ret
        panic("process create error\n");
    8020264e:	00007697          	auipc	a3,0x7
    80202652:	e4268693          	addi	a3,a3,-446 # 80209490 <__func__.1+0xd0>
    80202656:	00007617          	auipc	a2,0x7
    8020265a:	e8a60613          	addi	a2,a2,-374 # 802094e0 <__func__.2>
    8020265e:	0d700593          	li	a1,215
    80202662:	00007517          	auipc	a0,0x7
    80202666:	d8e50513          	addi	a0,a0,-626 # 802093f0 <__func__.1+0x30>
    8020266a:	ffffe097          	auipc	ra,0xffffe
    8020266e:	ed8080e7          	jalr	-296(ra) # 80200542 <_panic_>
    LIST_INSERT_TAIL(&scheduleList[0], p, scheduleLink);
    80202672:	1404b023          	sd	zero,320(s1)
    80202676:	00157797          	auipc	a5,0x157
    8020267a:	e497b923          	sd	s1,-430(a5) # 803594c8 <scheduleList>
    8020267e:	00157797          	auipc	a5,0x157
    80202682:	e4a78793          	addi	a5,a5,-438 # 803594c8 <scheduleList>
    80202686:	14f4b423          	sd	a5,328(s1)
    8020268a:	b755                	j	8020262e <processCreatePriority+0x98>

000000008020268c <processRun>:

void processRun(Process* p) {
    8020268c:	7179                	addi	sp,sp,-48
    8020268e:	f406                	sd	ra,40(sp)
    80202690:	f022                	sd	s0,32(sp)
    80202692:	ec26                	sd	s1,24(sp)
    80202694:	e84a                	sd	s2,16(sp)
    80202696:	e44e                	sd	s3,8(sp)
    80202698:	1800                	addi	s0,sp,48
    8020269a:	892a                	mv	s2,a0
    8020269c:	8492                	mv	s1,tp
    static volatile int first = 0;
    int hartId = r_hartid();
    8020269e:	2481                	sext.w	s1,s1
    Trapframe* trapframe = getHartTrapFrame();
    802026a0:	00001097          	auipc	ra,0x1
    802026a4:	2d8080e7          	jalr	728(ra) # 80203978 <getHartTrapFrame>
    802026a8:	89aa                	mv	s3,a0
    if (currentProcess[hartId]) {
    802026aa:	00349713          	slli	a4,s1,0x3
    802026ae:	00157797          	auipc	a5,0x157
    802026b2:	daa78793          	addi	a5,a5,-598 # 80359458 <currentProcess>
    802026b6:	97ba                	add	a5,a5,a4
    802026b8:	638c                	ld	a1,0(a5)
    802026ba:	c599                	beqz	a1,802026c8 <processRun+0x3c>
        bcopy(trapframe, &(currentProcess[hartId]->trapframe),
    802026bc:	12000613          	li	a2,288
    802026c0:	fffff097          	auipc	ra,0xfffff
    802026c4:	c84080e7          	jalr	-892(ra) # 80201344 <bcopy>
              sizeof(Trapframe));
    }
    currentProcess[hartId] = p;
    802026c8:	00349713          	slli	a4,s1,0x3
    802026cc:	00157797          	auipc	a5,0x157
    802026d0:	d8c78793          	addi	a5,a5,-628 # 80359458 <currentProcess>
    802026d4:	97ba                	add	a5,a5,a4
    802026d6:	0127b023          	sd	s2,0(a5)

    if (first == 0) {
    802026da:	001d5797          	auipc	a5,0x1d5
    802026de:	e2e7a783          	lw	a5,-466(a5) # 803d7508 <first.1>
    802026e2:	cf8d                	beqz	a5,8020271c <processRun+0x90>
        fat32_init();
        void testfat();
        testfat();
    }

    p->state = RUNNING;
    802026e4:	478d                	li	a5,3
    802026e6:	14f92a23          	sw	a5,340(s2) # 2000154 <_start-0x7e1ffeac>
    bcopy(&(currentProcess[hartId]->trapframe), trapframe, sizeof(Trapframe));
    802026ea:	048e                	slli	s1,s1,0x3
    802026ec:	00157797          	auipc	a5,0x157
    802026f0:	d6c78793          	addi	a5,a5,-660 # 80359458 <currentProcess>
    802026f4:	97a6                	add	a5,a5,s1
    802026f6:	12000613          	li	a2,288
    802026fa:	85ce                	mv	a1,s3
    802026fc:	6388                	ld	a0,0(a5)
    802026fe:	fffff097          	auipc	ra,0xfffff
    80202702:	c46080e7          	jalr	-954(ra) # 80201344 <bcopy>
    userTrapReturn();
    80202706:	00001097          	auipc	ra,0x1
    8020270a:	aec080e7          	jalr	-1300(ra) # 802031f2 <userTrapReturn>
}
    8020270e:	70a2                	ld	ra,40(sp)
    80202710:	7402                	ld	s0,32(sp)
    80202712:	64e2                	ld	s1,24(sp)
    80202714:	6942                	ld	s2,16(sp)
    80202716:	69a2                	ld	s3,8(sp)
    80202718:	6145                	addi	sp,sp,48
    8020271a:	8082                	ret
        first = 1;
    8020271c:	4785                	li	a5,1
    8020271e:	001d5717          	auipc	a4,0x1d5
    80202722:	def72523          	sw	a5,-534(a4) # 803d7508 <first.1>
        fat32_init();
    80202726:	00002097          	auipc	ra,0x2
    8020272a:	e8c080e7          	jalr	-372(ra) # 802045b2 <fat32_init>
        testfat();
    8020272e:	00004097          	auipc	ra,0x4
    80202732:	012080e7          	jalr	18(ra) # 80206740 <testfat>
    80202736:	b77d                	j	802026e4 <processRun+0x58>

0000000080202738 <sleep>:

//因为与xv6的调度架构不同，所以目前不保证这个实现是正确且无死锁的
// Atomically release lock and sleep on chan.
// Reacquires lock when awakened.
void sleep(void* chan, struct Spinlock* lk) {
    80202738:	1101                	addi	sp,sp,-32
    8020273a:	ec06                	sd	ra,24(sp)
    8020273c:	e822                	sd	s0,16(sp)
    8020273e:	e426                	sd	s1,8(sp)
    80202740:	1000                	addi	s0,sp,32
    80202742:	84ae                	mv	s1,a1
    // guaranteed that we won't miss any wakeup
    // (wakeup locks p->lock),
    // so it's okay to release lk.

    // acquireLock(&p->lock);  // DOC: sleeplock1
    releaseLock(lk);
    80202744:	852e                	mv	a0,a1
    80202746:	00001097          	auipc	ra,0x1
    8020274a:	1d0080e7          	jalr	464(ra) # 80203916 <releaseLock>
    // Tidy up.
    // p->chan = 0;

    // Reacquire original lock.
    // releaseLock(&p->lock);
    acquireLock(lk);
    8020274e:	8526                	mv	a0,s1
    80202750:	00001097          	auipc	ra,0x1
    80202754:	162080e7          	jalr	354(ra) # 802038b2 <acquireLock>
}
    80202758:	60e2                	ld	ra,24(sp)
    8020275a:	6442                	ld	s0,16(sp)
    8020275c:	64a2                	ld	s1,8(sp)
    8020275e:	6105                	addi	sp,sp,32
    80202760:	8082                	ret

0000000080202762 <wakeup>:

void wakeup(void *channel) {
    80202762:	1141                	addi	sp,sp,-16
    80202764:	e422                	sd	s0,8(sp)
    80202766:	0800                	addi	s0,sp,16
    // todo
}
    80202768:	6422                	ld	s0,8(sp)
    8020276a:	0141                	addi	sp,sp,16
    8020276c:	8082                	ret

000000008020276e <either_copyout>:
static int processTimeCount[HART_TOTAL_NUMBER] = {0, 0, 0, 0, 0};
static int processBelongList[HART_TOTAL_NUMBER] = {0, 0, 0, 0, 0};
// Copy to either a user address, or kernel address,
// depending on usr_dst.
// Returns 0 on success, -1 on error.
int either_copyout(int user_dst, u64 dst, void* src, u64 len) {
    8020276e:	7179                	addi	sp,sp,-48
    80202770:	f406                	sd	ra,40(sp)
    80202772:	f022                	sd	s0,32(sp)
    80202774:	ec26                	sd	s1,24(sp)
    80202776:	e84a                	sd	s2,16(sp)
    80202778:	e44e                	sd	s3,8(sp)
    8020277a:	e052                	sd	s4,0(sp)
    8020277c:	1800                	addi	s0,sp,48
    8020277e:	892e                	mv	s2,a1
    80202780:	89b2                	mv	s3,a2
    80202782:	8a36                	mv	s4,a3
    if (user_dst) {
    80202784:	c515                	beqz	a0,802027b0 <either_copyout+0x42>
        struct Process* p = myproc();//because only this branch uses p->pgdir, so it need call myproc
    80202786:	00000097          	auipc	ra,0x0
    8020278a:	9e4080e7          	jalr	-1564(ra) # 8020216a <myproc>
        return copyout(p->pgdir, dst, src, len);
    8020278e:	86d2                	mv	a3,s4
    80202790:	864e                	mv	a2,s3
    80202792:	85ca                	mv	a1,s2
    80202794:	13053503          	ld	a0,304(a0)
    80202798:	fffff097          	auipc	ra,0xfffff
    8020279c:	542080e7          	jalr	1346(ra) # 80201cda <copyout>
    } else {
        memmove((char*)dst, src, len);
        return 0;
    }
}
    802027a0:	70a2                	ld	ra,40(sp)
    802027a2:	7402                	ld	s0,32(sp)
    802027a4:	64e2                	ld	s1,24(sp)
    802027a6:	6942                	ld	s2,16(sp)
    802027a8:	69a2                	ld	s3,8(sp)
    802027aa:	6a02                	ld	s4,0(sp)
    802027ac:	6145                	addi	sp,sp,48
    802027ae:	8082                	ret
    802027b0:	84aa                	mv	s1,a0
        memmove((char*)dst, src, len);
    802027b2:	0006861b          	sext.w	a2,a3
    802027b6:	85ce                	mv	a1,s3
    802027b8:	854a                	mv	a0,s2
    802027ba:	00001097          	auipc	ra,0x1
    802027be:	256080e7          	jalr	598(ra) # 80203a10 <memmove>
        return 0;
    802027c2:	8526                	mv	a0,s1
    802027c4:	bff1                	j	802027a0 <either_copyout+0x32>

00000000802027c6 <either_copyin>:

// Copy from either a user address, or kernel address,
// depending on usr_src.
// Returns 0 on success, -1 on error.
int either_copyin(void* dst, int user_src, u64 src, u64 len) {
    802027c6:	7179                	addi	sp,sp,-48
    802027c8:	f406                	sd	ra,40(sp)
    802027ca:	f022                	sd	s0,32(sp)
    802027cc:	ec26                	sd	s1,24(sp)
    802027ce:	e84a                	sd	s2,16(sp)
    802027d0:	e44e                	sd	s3,8(sp)
    802027d2:	e052                	sd	s4,0(sp)
    802027d4:	1800                	addi	s0,sp,48
    802027d6:	892a                	mv	s2,a0
    802027d8:	89b2                	mv	s3,a2
    802027da:	8a36                	mv	s4,a3
    if (user_src) {
    802027dc:	c595                	beqz	a1,80202808 <either_copyin+0x42>
        struct Process* p = myproc();//because only this branch uses p->pgdir, so it need call myproc
    802027de:	00000097          	auipc	ra,0x0
    802027e2:	98c080e7          	jalr	-1652(ra) # 8020216a <myproc>
        return copyin(p->pgdir, dst, src, len);
    802027e6:	86d2                	mv	a3,s4
    802027e8:	864e                	mv	a2,s3
    802027ea:	85ca                	mv	a1,s2
    802027ec:	13053503          	ld	a0,304(a0)
    802027f0:	fffff097          	auipc	ra,0xfffff
    802027f4:	45c080e7          	jalr	1116(ra) # 80201c4c <copyin>
    } else {
        memmove(dst, (char*)src, len);
        return 0;
    }
}
    802027f8:	70a2                	ld	ra,40(sp)
    802027fa:	7402                	ld	s0,32(sp)
    802027fc:	64e2                	ld	s1,24(sp)
    802027fe:	6942                	ld	s2,16(sp)
    80202800:	69a2                	ld	s3,8(sp)
    80202802:	6a02                	ld	s4,0(sp)
    80202804:	6145                	addi	sp,sp,48
    80202806:	8082                	ret
    80202808:	84ae                	mv	s1,a1
        memmove(dst, (char*)src, len);
    8020280a:	0006861b          	sext.w	a2,a3
    8020280e:	85ce                	mv	a1,s3
    80202810:	00001097          	auipc	ra,0x1
    80202814:	200080e7          	jalr	512(ra) # 80203a10 <memmove>
        return 0;
    80202818:	8526                	mv	a0,s1
    8020281a:	bff9                	j	802027f8 <either_copyin+0x32>

000000008020281c <yield>:

void yield() {
    8020281c:	715d                	addi	sp,sp,-80
    8020281e:	e486                	sd	ra,72(sp)
    80202820:	e0a2                	sd	s0,64(sp)
    80202822:	fc26                	sd	s1,56(sp)
    80202824:	f84a                	sd	s2,48(sp)
    80202826:	f44e                	sd	s3,40(sp)
    80202828:	f052                	sd	s4,32(sp)
    8020282a:	ec56                	sd	s5,24(sp)
    8020282c:	e85a                	sd	s6,16(sp)
    8020282e:	e45e                	sd	s7,8(sp)
    80202830:	e062                	sd	s8,0(sp)
    80202832:	0880                	addi	s0,sp,80
    80202834:	8b92                	mv	s7,tp
    int hartId = r_hartid();
    80202836:	2b81                	sext.w	s7,s7
    int count = processTimeCount[hartId];
    80202838:	00157497          	auipc	s1,0x157
    8020283c:	c2048493          	addi	s1,s1,-992 # 80359458 <currentProcess>
    80202840:	002b9793          	slli	a5,s7,0x2
    80202844:	97a6                	add	a5,a5,s1
    80202846:	0807ac03          	lw	s8,128(a5)
    int point = processBelongList[hartId];
    8020284a:	0987a903          	lw	s2,152(a5)
    acquireLock(&scheduleListLock);
    8020284e:	00157517          	auipc	a0,0x157
    80202852:	c4a50513          	addi	a0,a0,-950 # 80359498 <scheduleListLock>
    80202856:	00001097          	auipc	ra,0x1
    8020285a:	05c080e7          	jalr	92(ra) # 802038b2 <acquireLock>
    Process* process = currentProcess[hartId];
    8020285e:	003b9793          	slli	a5,s7,0x3
    80202862:	94be                	add	s1,s1,a5
    80202864:	6084                	ld	s1,0(s1)
    if (process && process->state == RUNNING) {
    80202866:	c491                	beqz	s1,80202872 <yield+0x56>
    80202868:	1544a703          	lw	a4,340(s1)
    8020286c:	478d                	li	a5,3
    8020286e:	02f70063          	beq	a4,a5,8020288e <yield+0x72>
        process->state = RUNNABLE;
    }
    while ((count == 0) || (process == NULL) || (process->state != RUNNABLE)) {
    80202872:	4a89                	li	s5,2
        if (process != NULL)
            LIST_INSERT_TAIL(&scheduleList[point ^ 1], process, scheduleLink);
        if (LIST_EMPTY(&scheduleList[point]))
    80202874:	00157997          	auipc	s3,0x157
    80202878:	be498993          	addi	s3,s3,-1052 # 80359458 <currentProcess>
            point ^= 1;
        if (LIST_EMPTY(&scheduleList[point])) {
            releaseLock(&scheduleListLock);
    8020287c:	00157b17          	auipc	s6,0x157
    80202880:	c1cb0b13          	addi	s6,s6,-996 # 80359498 <scheduleListLock>
            LIST_INSERT_TAIL(&scheduleList[point ^ 1], process, scheduleLink);
    80202884:	00157a17          	auipc	s4,0x157
    80202888:	c44a0a13          	addi	s4,s4,-956 # 803594c8 <scheduleList>
    8020288c:	a889                	j	802028de <yield+0xc2>
        process->state = RUNNABLE;
    8020288e:	4789                	li	a5,2
    80202890:	14f4aa23          	sw	a5,340(s1)
    80202894:	bff9                	j	80202872 <yield+0x56>
        if (process != NULL)
    80202896:	c0ed                	beqz	s1,80202978 <yield+0x15c>
            LIST_INSERT_TAIL(&scheduleList[point ^ 1], process, scheduleLink);
    80202898:	00194793          	xori	a5,s2,1
    8020289c:	00379713          	slli	a4,a5,0x3
    802028a0:	974e                	add	a4,a4,s3
    802028a2:	7b38                	ld	a4,112(a4)
    802028a4:	e745                	bnez	a4,8020294c <yield+0x130>
    802028a6:	1404b023          	sd	zero,320(s1)
    802028aa:	078e                	slli	a5,a5,0x3
    802028ac:	00f98733          	add	a4,s3,a5
    802028b0:	fb24                	sd	s1,112(a4)
    802028b2:	97d2                	add	a5,a5,s4
    802028b4:	14f4b423          	sd	a5,328(s1)
        if (LIST_EMPTY(&scheduleList[point]))
    802028b8:	00391793          	slli	a5,s2,0x3
    802028bc:	97ce                	add	a5,a5,s3
    802028be:	7ba4                	ld	s1,112(a5)
    802028c0:	c4fd                	beqz	s1,802029ae <yield+0x192>
            acquireLock(&scheduleListLock);
        } else {
            process = LIST_FIRST(&scheduleList[point]);
            LIST_REMOVE(process, scheduleLink);
    802028c2:	1404b783          	ld	a5,320(s1)
    802028c6:	c789                	beqz	a5,802028d0 <yield+0xb4>
    802028c8:	1484b703          	ld	a4,328(s1)
    802028cc:	14e7b423          	sd	a4,328(a5)
    802028d0:	1484b783          	ld	a5,328(s1)
    802028d4:	1404b703          	ld	a4,320(s1)
    802028d8:	e398                	sd	a4,0(a5)
            count = process->priority;
    802028da:	1504ac03          	lw	s8,336(s1)
    while ((count == 0) || (process == NULL) || (process->state != RUNNABLE)) {
    802028de:	fa0c0ce3          	beqz	s8,80202896 <yield+0x7a>
    802028e2:	c8d9                	beqz	s1,80202978 <yield+0x15c>
    802028e4:	1544a783          	lw	a5,340(s1)
    802028e8:	fb5798e3          	bne	a5,s5,80202898 <yield+0x7c>
        }
    }
    releaseLock(&scheduleListLock);
    802028ec:	00157517          	auipc	a0,0x157
    802028f0:	bac50513          	addi	a0,a0,-1108 # 80359498 <scheduleListLock>
    802028f4:	00001097          	auipc	ra,0x1
    802028f8:	022080e7          	jalr	34(ra) # 80203916 <releaseLock>
    count--;
    processTimeCount[hartId] = count;
    802028fc:	002b9713          	slli	a4,s7,0x2
    80202900:	00157797          	auipc	a5,0x157
    80202904:	b5878793          	addi	a5,a5,-1192 # 80359458 <currentProcess>
    80202908:	97ba                	add	a5,a5,a4
    count--;
    8020290a:	3c7d                	addiw	s8,s8,-1
    processTimeCount[hartId] = count;
    8020290c:	0987a023          	sw	s8,128(a5)
    processBelongList[hartId] = point;
    80202910:	0927ac23          	sw	s2,152(a5)
    printf("hartID %d yield process %lx\n", hartId, process->id);
    80202914:	1384a603          	lw	a2,312(s1)
    80202918:	85de                	mv	a1,s7
    8020291a:	00007517          	auipc	a0,0x7
    8020291e:	b8e50513          	addi	a0,a0,-1138 # 802094a8 <__func__.1+0xe8>
    80202922:	ffffe097          	auipc	ra,0xffffe
    80202926:	b94080e7          	jalr	-1132(ra) # 802004b6 <printf>
    processRun(process);
    8020292a:	8526                	mv	a0,s1
    8020292c:	00000097          	auipc	ra,0x0
    80202930:	d60080e7          	jalr	-672(ra) # 8020268c <processRun>
}
    80202934:	60a6                	ld	ra,72(sp)
    80202936:	6406                	ld	s0,64(sp)
    80202938:	74e2                	ld	s1,56(sp)
    8020293a:	7942                	ld	s2,48(sp)
    8020293c:	79a2                	ld	s3,40(sp)
    8020293e:	7a02                	ld	s4,32(sp)
    80202940:	6ae2                	ld	s5,24(sp)
    80202942:	6b42                	ld	s6,16(sp)
    80202944:	6ba2                	ld	s7,8(sp)
    80202946:	6c02                	ld	s8,0(sp)
    80202948:	6161                	addi	sp,sp,80
    8020294a:	8082                	ret
            LIST_INSERT_TAIL(&scheduleList[point ^ 1], process, scheduleLink);
    8020294c:	14e4b023          	sd	a4,320(s1)
    80202950:	14073783          	ld	a5,320(a4)
    80202954:	c799                	beqz	a5,80202962 <yield+0x146>
    80202956:	14f4b023          	sd	a5,320(s1)
    8020295a:	873e                	mv	a4,a5
    8020295c:	1407b783          	ld	a5,320(a5)
    80202960:	fbfd                	bnez	a5,80202956 <yield+0x13a>
    80202962:	14973023          	sd	s1,320(a4)
    80202966:	1404b783          	ld	a5,320(s1)
    8020296a:	14078793          	addi	a5,a5,320
    8020296e:	14f4b423          	sd	a5,328(s1)
    80202972:	1404b023          	sd	zero,320(s1)
    80202976:	b789                	j	802028b8 <yield+0x9c>
        if (LIST_EMPTY(&scheduleList[point]))
    80202978:	00391793          	slli	a5,s2,0x3
    8020297c:	97ce                	add	a5,a5,s3
    8020297e:	7bbc                	ld	a5,112(a5)
    80202980:	e78d                	bnez	a5,802029aa <yield+0x18e>
            point ^= 1;
    80202982:	00194913          	xori	s2,s2,1
        if (LIST_EMPTY(&scheduleList[point])) {
    80202986:	00391793          	slli	a5,s2,0x3
    8020298a:	97ce                	add	a5,a5,s3
    8020298c:	7bbc                	ld	a5,112(a5)
    8020298e:	ef81                	bnez	a5,802029a6 <yield+0x18a>
            releaseLock(&scheduleListLock);
    80202990:	855a                	mv	a0,s6
    80202992:	00001097          	auipc	ra,0x1
    80202996:	f84080e7          	jalr	-124(ra) # 80203916 <releaseLock>
            acquireLock(&scheduleListLock);
    8020299a:	855a                	mv	a0,s6
    8020299c:	00001097          	auipc	ra,0x1
    802029a0:	f16080e7          	jalr	-234(ra) # 802038b2 <acquireLock>
    802029a4:	bf2d                	j	802028de <yield+0xc2>
        if (LIST_EMPTY(&scheduleList[point])) {
    802029a6:	84be                	mv	s1,a5
    802029a8:	bf29                	j	802028c2 <yield+0xa6>
        if (LIST_EMPTY(&scheduleList[point]))
    802029aa:	84be                	mv	s1,a5
        if (LIST_EMPTY(&scheduleList[point])) {
    802029ac:	bf19                	j	802028c2 <yield+0xa6>
            point ^= 1;
    802029ae:	00194913          	xori	s2,s2,1
        if (LIST_EMPTY(&scheduleList[point])) {
    802029b2:	00391793          	slli	a5,s2,0x3
    802029b6:	97ce                	add	a5,a5,s3
    802029b8:	7ba4                	ld	s1,112(a5)
    802029ba:	b721                	j	802028c2 <yield+0xa6>

00000000802029bc <processDestory>:
void processDestory(Process *p) {
    802029bc:	1101                	addi	sp,sp,-32
    802029be:	ec06                	sd	ra,24(sp)
    802029c0:	e822                	sd	s0,16(sp)
    802029c2:	e426                	sd	s1,8(sp)
    802029c4:	1000                	addi	s0,sp,32
    802029c6:	84aa                	mv	s1,a0
    processFree(p);
    802029c8:	00000097          	auipc	ra,0x0
    802029cc:	966080e7          	jalr	-1690(ra) # 8020232e <processFree>
    802029d0:	8792                	mv	a5,tp
    int hartId = r_hartid();
    802029d2:	2781                	sext.w	a5,a5
    if (currentProcess[hartId] == p) {
    802029d4:	00379693          	slli	a3,a5,0x3
    802029d8:	00157717          	auipc	a4,0x157
    802029dc:	a8070713          	addi	a4,a4,-1408 # 80359458 <currentProcess>
    802029e0:	9736                	add	a4,a4,a3
    802029e2:	6318                	ld	a4,0(a4)
    802029e4:	00970763          	beq	a4,s1,802029f2 <processDestory+0x36>
}
    802029e8:	60e2                	ld	ra,24(sp)
    802029ea:	6442                	ld	s0,16(sp)
    802029ec:	64a2                	ld	s1,8(sp)
    802029ee:	6105                	addi	sp,sp,32
    802029f0:	8082                	ret
        currentProcess[hartId] = NULL;
    802029f2:	00157717          	auipc	a4,0x157
    802029f6:	a6670713          	addi	a4,a4,-1434 # 80359458 <currentProcess>
    802029fa:	00d707b3          	add	a5,a4,a3
    802029fe:	0007b023          	sd	zero,0(a5)
        yield();
    80202a02:	00000097          	auipc	ra,0x0
    80202a06:	e1a080e7          	jalr	-486(ra) # 8020281c <yield>
}
    80202a0a:	bff9                	j	802029e8 <processDestory+0x2c>

0000000080202a0c <processFork>:

void processFork() {
    80202a0c:	7119                	addi	sp,sp,-128
    80202a0e:	fc86                	sd	ra,120(sp)
    80202a10:	f8a2                	sd	s0,112(sp)
    80202a12:	f4a6                	sd	s1,104(sp)
    80202a14:	f0ca                	sd	s2,96(sp)
    80202a16:	ecce                	sd	s3,88(sp)
    80202a18:	e8d2                	sd	s4,80(sp)
    80202a1a:	e4d6                	sd	s5,72(sp)
    80202a1c:	e0da                	sd	s6,64(sp)
    80202a1e:	fc5e                	sd	s7,56(sp)
    80202a20:	f862                	sd	s8,48(sp)
    80202a22:	f466                	sd	s9,40(sp)
    80202a24:	f06a                	sd	s10,32(sp)
    80202a26:	ec6e                	sd	s11,24(sp)
    80202a28:	0100                	addi	s0,sp,128
    80202a2a:	8492                	mv	s1,tp
    Process *process;
    int hartId = r_hartid();
    80202a2c:	2481                	sext.w	s1,s1
    int r = processAlloc(&process, currentProcess[hartId]->id);
    80202a2e:	00349713          	slli	a4,s1,0x3
    80202a32:	00157797          	auipc	a5,0x157
    80202a36:	a2678793          	addi	a5,a5,-1498 # 80359458 <currentProcess>
    80202a3a:	97ba                	add	a5,a5,a4
    80202a3c:	639c                	ld	a5,0(a5)
    80202a3e:	1387e583          	lwu	a1,312(a5)
    80202a42:	f8840513          	addi	a0,s0,-120
    80202a46:	00000097          	auipc	ra,0x0
    80202a4a:	a0a080e7          	jalr	-1526(ra) # 80202450 <processAlloc>
    if (r < 0) {
    80202a4e:	06054363          	bltz	a0,80202ab4 <processFork+0xa8>
        currentProcess[hartId]->trapframe.a0 = r;
        panic("");
        return;
    }
    process->priority = currentProcess[hartId]->priority;
    80202a52:	00349713          	slli	a4,s1,0x3
    80202a56:	00157797          	auipc	a5,0x157
    80202a5a:	a0278793          	addi	a5,a5,-1534 # 80359458 <currentProcess>
    80202a5e:	97ba                	add	a5,a5,a4
    80202a60:	639c                	ld	a5,0(a5)
    80202a62:	1507a703          	lw	a4,336(a5)
    80202a66:	f8843783          	ld	a5,-120(s0)
    80202a6a:	14e7a823          	sw	a4,336(a5)
    Trapframe* trapframe = getHartTrapFrame();
    80202a6e:	00001097          	auipc	ra,0x1
    80202a72:	f0a080e7          	jalr	-246(ra) # 80203978 <getHartTrapFrame>
    80202a76:	892a                	mv	s2,a0
    bcopy(trapframe, &process->trapframe, sizeof(Trapframe));
    80202a78:	12000613          	li	a2,288
    80202a7c:	f8843583          	ld	a1,-120(s0)
    80202a80:	fffff097          	auipc	ra,0xfffff
    80202a84:	8c4080e7          	jalr	-1852(ra) # 80201344 <bcopy>
    process->trapframe.a0 = 0;
    80202a88:	f8843783          	ld	a5,-120(s0)
    80202a8c:	0607b823          	sd	zero,112(a5)
    
    trapframe->a0 = process->id;
    80202a90:	1387e783          	lwu	a5,312(a5)
    80202a94:	06f93823          	sd	a5,112(s2)
    80202a98:	00200db7          	lui	s11,0x200
    80202a9c:	4c81                	li	s9,0
    u64 i, j, k;
    for (i = 0; i < 512; i++) {
        if (!(currentProcess[hartId]->pgdir[i] & PTE_VALID)) {
    80202a9e:	048e                	slli	s1,s1,0x3
    80202aa0:	00157d17          	auipc	s10,0x157
    80202aa4:	9b8d0d13          	addi	s10,s10,-1608 # 80359458 <currentProcess>
    80202aa8:	9d26                	add	s10,s10,s1
            for (k = 0; k < 512; k++) {
                if (!(pa2[k] & PTE_VALID)) {
                    continue;
                }
                u64 va = (i << 30) + (j << 21) + (k << 12);
                if (va == TRAMPOLINE_BASE || va == TRAMPOLINE_BASE + PAGE_SIZE) {
    80202aaa:	02000ab7          	lui	s5,0x2000
    80202aae:	1afd                	addi	s5,s5,-1
    80202ab0:	0ab6                	slli	s5,s5,0xd
    80202ab2:	a291                	j	80202bf6 <processFork+0x1ea>
        currentProcess[hartId]->trapframe.a0 = r;
    80202ab4:	048e                	slli	s1,s1,0x3
    80202ab6:	00157717          	auipc	a4,0x157
    80202aba:	9a270713          	addi	a4,a4,-1630 # 80359458 <currentProcess>
    80202abe:	9726                	add	a4,a4,s1
    80202ac0:	6318                	ld	a4,0(a4)
    80202ac2:	fb28                	sd	a0,112(a4)
        panic("");
    80202ac4:	00006697          	auipc	a3,0x6
    80202ac8:	60468693          	addi	a3,a3,1540 # 802090c8 <digits+0x28>
    80202acc:	00007617          	auipc	a2,0x7
    80202ad0:	a2c60613          	addi	a2,a2,-1492 # 802094f8 <__func__.0>
    80202ad4:	15d00593          	li	a1,349
    80202ad8:	00007517          	auipc	a0,0x7
    80202adc:	91850513          	addi	a0,a0,-1768 # 802093f0 <__func__.1+0x30>
    80202ae0:	ffffe097          	auipc	ra,0xffffe
    80202ae4:	a62080e7          	jalr	-1438(ra) # 80200542 <_panic_>
                    continue;
                }
                if (va == USER_BUFFER_BASE) {
                    PhysicalPage *p;
                    if (pageAlloc(&p) < 0) {
    80202ae8:	f8040513          	addi	a0,s0,-128
    80202aec:	fffff097          	auipc	ra,0xfffff
    80202af0:	a76080e7          	jalr	-1418(ra) # 80201562 <pageAlloc>
    80202af4:	04054363          	bltz	a0,80202b3a <processFork+0x12e>
    return page - pages;
    80202af8:	f8043783          	ld	a5,-128(s0)
    80202afc:	00096717          	auipc	a4,0x96
    80202b00:	92470713          	addi	a4,a4,-1756 # 80298420 <pages>
    80202b04:	8f99                	sub	a5,a5,a4
    80202b06:	878d                	srai	a5,a5,0x3
    80202b08:	00007717          	auipc	a4,0x7
    80202b0c:	1b073703          	ld	a4,432(a4) # 80209cb8 <__func__.0+0x8>
    80202b10:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202b14:	00c7979b          	slliw	a5,a5,0xc
    80202b18:	1782                	slli	a5,a5,0x20
    80202b1a:	9381                	srli	a5,a5,0x20
                        panic("Fork alloc page error!\n");
                    }
                    pageInsert(process->pgdir, va, page2pa(p), PTE_USER | PTE_READ | PTE_WRITE | PTE_EXECUTE);
    80202b1c:	46f9                	li	a3,30
    80202b1e:	4605                	li	a2,1
    80202b20:	067e                	slli	a2,a2,0x1f
    80202b22:	963e                	add	a2,a2,a5
    80202b24:	010005b7          	lui	a1,0x1000
    80202b28:	f8843783          	ld	a5,-120(s0)
    80202b2c:	1307b503          	ld	a0,304(a5)
    80202b30:	fffff097          	auipc	ra,0xfffff
    80202b34:	dac080e7          	jalr	-596(ra) # 802018dc <pageInsert>
    80202b38:	a0a9                	j	80202b82 <processFork+0x176>
                        panic("Fork alloc page error!\n");
    80202b3a:	00007697          	auipc	a3,0x7
    80202b3e:	98e68693          	addi	a3,a3,-1650 # 802094c8 <__func__.1+0x108>
    80202b42:	00007617          	auipc	a2,0x7
    80202b46:	9b660613          	addi	a2,a2,-1610 # 802094f8 <__func__.0>
    80202b4a:	17c00593          	li	a1,380
    80202b4e:	00007517          	auipc	a0,0x7
    80202b52:	8a250513          	addi	a0,a0,-1886 # 802093f0 <__func__.1+0x30>
    80202b56:	ffffe097          	auipc	ra,0xffffe
    80202b5a:	9ec080e7          	jalr	-1556(ra) # 80200542 <_panic_>
                } else {
                    if (pa2[k] & PTE_WRITE) {
                        pa2[k] |= PTE_COW;
                        pa2[k] &= ~PTE_WRITE;
                    } 
                    pageInsert(process->pgdir, va, PTE2PA(pa2[k]), PTE2PERM(pa2[k]));
    80202b5e:	6294                	ld	a3,0(a3)
    80202b60:	00269613          	slli	a2,a3,0x2
    80202b64:	0166f6b3          	and	a3,a3,s6
    80202b68:	fff007b7          	lui	a5,0xfff00
    80202b6c:	83a1                	srli	a5,a5,0x8
    80202b6e:	8e7d                	and	a2,a2,a5
    80202b70:	85a6                	mv	a1,s1
    80202b72:	f8843783          	ld	a5,-120(s0)
    80202b76:	1307b503          	ld	a0,304(a5) # fffffffffff00130 <bssEnd+0xffffffff7fb0f130>
    80202b7a:	fffff097          	auipc	ra,0xfffff
    80202b7e:	d62080e7          	jalr	-670(ra) # 802018dc <pageInsert>
            for (k = 0; k < 512; k++) {
    80202b82:	0921                	addi	s2,s2,8
    80202b84:	6785                	lui	a5,0x1
    80202b86:	94be                	add	s1,s1,a5
    80202b88:	03348963          	beq	s1,s3,80202bba <processFork+0x1ae>
                if (!(pa2[k] & PTE_VALID)) {
    80202b8c:	86ca                	mv	a3,s2
    80202b8e:	00093783          	ld	a5,0(s2)
    80202b92:	0017f713          	andi	a4,a5,1
    80202b96:	d775                	beqz	a4,80202b82 <processFork+0x176>
                if (va == TRAMPOLINE_BASE || va == TRAMPOLINE_BASE + PAGE_SIZE) {
    80202b98:	0144f733          	and	a4,s1,s4
    80202b9c:	ff5703e3          	beq	a4,s5,80202b82 <processFork+0x176>
                if (va == USER_BUFFER_BASE) {
    80202ba0:	01000737          	lui	a4,0x1000
    80202ba4:	f4e482e3          	beq	s1,a4,80202ae8 <processFork+0xdc>
                    if (pa2[k] & PTE_WRITE) {
    80202ba8:	0047f713          	andi	a4,a5,4
    80202bac:	db4d                	beqz	a4,80202b5e <processFork+0x152>
                        pa2[k] &= ~PTE_WRITE;
    80202bae:	9bed                	andi	a5,a5,-5
    80202bb0:	1007e793          	ori	a5,a5,256
    80202bb4:	00f93023          	sd	a5,0(s2)
    80202bb8:	b75d                	j	80202b5e <processFork+0x152>
        for (j = 0; j < 512; j++) {
    80202bba:	0ba1                	addi	s7,s7,8
    80202bbc:	002007b7          	lui	a5,0x200
    80202bc0:	99be                	add	s3,s3,a5
    80202bc2:	03898363          	beq	s3,s8,80202be8 <processFork+0x1dc>
            if (!(pa[j] & PTE_VALID)) {
    80202bc6:	000bb783          	ld	a5,0(s7) # fffffffffffff000 <bssEnd+0xffffffff7fc0e000>
    80202bca:	0017f713          	andi	a4,a5,1
    80202bce:	d775                	beqz	a4,80202bba <processFork+0x1ae>
            u64 *pa2 = (u64*) PTE2PA(pa[j]);
    80202bd0:	078a                	slli	a5,a5,0x2
    80202bd2:	fff00737          	lui	a4,0xfff00
    80202bd6:	8321                	srli	a4,a4,0x8
    80202bd8:	00e7f933          	and	s2,a5,a4
                u64 va = (i << 30) + (j << 21) + (k << 12);
    80202bdc:	ffe004b7          	lui	s1,0xffe00
    80202be0:	94ce                	add	s1,s1,s3
                if (va == TRAMPOLINE_BASE || va == TRAMPOLINE_BASE + PAGE_SIZE) {
    80202be2:	7a7d                	lui	s4,0xfffff
    80202be4:	1a7d                	addi	s4,s4,-1
    80202be6:	b75d                	j	80202b8c <processFork+0x180>
    for (i = 0; i < 512; i++) {
    80202be8:	0ca1                	addi	s9,s9,8
    80202bea:	400007b7          	lui	a5,0x40000
    80202bee:	9dbe                	add	s11,s11,a5
    80202bf0:	6785                	lui	a5,0x1
    80202bf2:	02fc8c63          	beq	s9,a5,80202c2a <processFork+0x21e>
        if (!(currentProcess[hartId]->pgdir[i] & PTE_VALID)) {
    80202bf6:	000d3783          	ld	a5,0(s10)
    80202bfa:	1307b783          	ld	a5,304(a5) # 1130 <_start-0x801feed0>
    80202bfe:	97e6                	add	a5,a5,s9
    80202c00:	639c                	ld	a5,0(a5)
    80202c02:	0017f713          	andi	a4,a5,1
    80202c06:	d36d                	beqz	a4,80202be8 <processFork+0x1dc>
        u64 *pa = (u64*) PTE2PA(currentProcess[hartId]->pgdir[i]);
    80202c08:	078a                	slli	a5,a5,0x2
    80202c0a:	fff00737          	lui	a4,0xfff00
    80202c0e:	8321                	srli	a4,a4,0x8
    80202c10:	00e7fbb3          	and	s7,a5,a4
        for (j = 0; j < 512; j++) {
    80202c14:	01bc9c13          	slli	s8,s9,0x1b
    80202c18:	402007b7          	lui	a5,0x40200
    80202c1c:	9c3e                	add	s8,s8,a5
        u64 *pa = (u64*) PTE2PA(currentProcess[hartId]->pgdir[i]);
    80202c1e:	89ee                	mv	s3,s11
                    pageInsert(process->pgdir, va, PTE2PA(pa2[k]), PTE2PERM(pa2[k]));
    80202c20:	5b7d                	li	s6,-1
    80202c22:	1b5a                	slli	s6,s6,0x36
    80202c24:	3ffb0b13          	addi	s6,s6,1023
    80202c28:	bf79                	j	80202bc6 <processFork+0x1ba>

// flush the TLB.
static inline void sfence_vma() {
	// the zero, zero means flush all TLB entries.
	// asm volatile("sfence.vma zero, zero");
	asm volatile("sfence.vma");
    80202c2a:	12000073          	sfence.vma
        }
    }

    sfence_vma();

    acquireLock(&scheduleListLock);
    80202c2e:	00157517          	auipc	a0,0x157
    80202c32:	86a50513          	addi	a0,a0,-1942 # 80359498 <scheduleListLock>
    80202c36:	00001097          	auipc	ra,0x1
    80202c3a:	c7c080e7          	jalr	-900(ra) # 802038b2 <acquireLock>
    LIST_INSERT_TAIL(&scheduleList[0], process, scheduleLink);
    80202c3e:	00157697          	auipc	a3,0x157
    80202c42:	88a6b683          	ld	a3,-1910(a3) # 803594c8 <scheduleList>
    80202c46:	c2ad                	beqz	a3,80202ca8 <processFork+0x29c>
    80202c48:	f8843783          	ld	a5,-120(s0)
    80202c4c:	14d7b023          	sd	a3,320(a5) # 40200140 <_start-0x3ffffec0>
    80202c50:	1406b703          	ld	a4,320(a3)
    80202c54:	c719                	beqz	a4,80202c62 <processFork+0x256>
    80202c56:	14e7b023          	sd	a4,320(a5)
    80202c5a:	86ba                	mv	a3,a4
    80202c5c:	14073703          	ld	a4,320(a4) # fffffffffff00140 <bssEnd+0xffffffff7fb0f140>
    80202c60:	fb7d                	bnez	a4,80202c56 <processFork+0x24a>
    80202c62:	14f6b023          	sd	a5,320(a3)
    80202c66:	1407b703          	ld	a4,320(a5)
    80202c6a:	14070713          	addi	a4,a4,320
    80202c6e:	14e7b423          	sd	a4,328(a5)
    80202c72:	1407b023          	sd	zero,320(a5)
    releaseLock(&scheduleListLock);
    80202c76:	00157517          	auipc	a0,0x157
    80202c7a:	82250513          	addi	a0,a0,-2014 # 80359498 <scheduleListLock>
    80202c7e:	00001097          	auipc	ra,0x1
    80202c82:	c98080e7          	jalr	-872(ra) # 80203916 <releaseLock>
    80202c86:	12000073          	sfence.vma

    sfence_vma();
    return;
    80202c8a:	70e6                	ld	ra,120(sp)
    80202c8c:	7446                	ld	s0,112(sp)
    80202c8e:	74a6                	ld	s1,104(sp)
    80202c90:	7906                	ld	s2,96(sp)
    80202c92:	69e6                	ld	s3,88(sp)
    80202c94:	6a46                	ld	s4,80(sp)
    80202c96:	6aa6                	ld	s5,72(sp)
    80202c98:	6b06                	ld	s6,64(sp)
    80202c9a:	7be2                	ld	s7,56(sp)
    80202c9c:	7c42                	ld	s8,48(sp)
    80202c9e:	7ca2                	ld	s9,40(sp)
    80202ca0:	7d02                	ld	s10,32(sp)
    80202ca2:	6de2                	ld	s11,24(sp)
    80202ca4:	6109                	addi	sp,sp,128
    80202ca6:	8082                	ret
    LIST_INSERT_TAIL(&scheduleList[0], process, scheduleLink);
    80202ca8:	f8843783          	ld	a5,-120(s0)
    80202cac:	1407b023          	sd	zero,320(a5)
    80202cb0:	00157717          	auipc	a4,0x157
    80202cb4:	80f73c23          	sd	a5,-2024(a4) # 803594c8 <scheduleList>
    80202cb8:	00157717          	auipc	a4,0x157
    80202cbc:	81070713          	addi	a4,a4,-2032 # 803594c8 <scheduleList>
    80202cc0:	14e7b423          	sd	a4,328(a5)
    80202cc4:	bf4d                	j	80202c76 <processFork+0x26a>

0000000080202cc6 <argraw>:
        return err;
    return strlen(buf);
}


static u64 argraw(int n) {
    80202cc6:	1101                	addi	sp,sp,-32
    80202cc8:	ec06                	sd	ra,24(sp)
    80202cca:	e822                	sd	s0,16(sp)
    80202ccc:	e426                	sd	s1,8(sp)
    80202cce:	1000                	addi	s0,sp,32
    80202cd0:	84aa                	mv	s1,a0
    Trapframe *trapframe = getHartTrapFrame();
    80202cd2:	00001097          	auipc	ra,0x1
    80202cd6:	ca6080e7          	jalr	-858(ra) # 80203978 <getHartTrapFrame>
    switch (n) {
    80202cda:	4795                	li	a5,5
    80202cdc:	0297eb63          	bltu	a5,s1,80202d12 <argraw+0x4c>
    80202ce0:	048a                	slli	s1,s1,0x2
    80202ce2:	00007717          	auipc	a4,0x7
    80202ce6:	85270713          	addi	a4,a4,-1966 # 80209534 <__func__.0+0x3c>
    80202cea:	94ba                	add	s1,s1,a4
    80202cec:	409c                	lw	a5,0(s1)
    80202cee:	97ba                	add	a5,a5,a4
    80202cf0:	8782                	jr	a5
        case 0:
            return trapframe->a0;
    80202cf2:	7928                	ld	a0,112(a0)
        case 5:
            return trapframe->a5;
    }
    panic("argraw");
    return -1;
}
    80202cf4:	60e2                	ld	ra,24(sp)
    80202cf6:	6442                	ld	s0,16(sp)
    80202cf8:	64a2                	ld	s1,8(sp)
    80202cfa:	6105                	addi	sp,sp,32
    80202cfc:	8082                	ret
            return trapframe->a1;
    80202cfe:	7d28                	ld	a0,120(a0)
    80202d00:	bfd5                	j	80202cf4 <argraw+0x2e>
            return trapframe->a2;
    80202d02:	6148                	ld	a0,128(a0)
    80202d04:	bfc5                	j	80202cf4 <argraw+0x2e>
            return trapframe->a3;
    80202d06:	6548                	ld	a0,136(a0)
    80202d08:	b7f5                	j	80202cf4 <argraw+0x2e>
            return trapframe->a4;
    80202d0a:	6948                	ld	a0,144(a0)
    80202d0c:	b7e5                	j	80202cf4 <argraw+0x2e>
            return trapframe->a5;
    80202d0e:	6d48                	ld	a0,152(a0)
    80202d10:	b7d5                	j	80202cf4 <argraw+0x2e>
    panic("argraw");
    80202d12:	00006697          	auipc	a3,0x6
    80202d16:	7f668693          	addi	a3,a3,2038 # 80209508 <__func__.0+0x10>
    80202d1a:	00007617          	auipc	a2,0x7
    80202d1e:	f3660613          	addi	a2,a2,-202 # 80209c50 <__func__.0>
    80202d22:	02400593          	li	a1,36
    80202d26:	00006517          	auipc	a0,0x6
    80202d2a:	7ea50513          	addi	a0,a0,2026 # 80209510 <__func__.0+0x18>
    80202d2e:	ffffe097          	auipc	ra,0xffffe
    80202d32:	814080e7          	jalr	-2028(ra) # 80200542 <_panic_>

0000000080202d36 <argint>:

// Fetch the nth 32-bit system call argument.
int argint(int n, int* ip) {
    80202d36:	1101                	addi	sp,sp,-32
    80202d38:	ec06                	sd	ra,24(sp)
    80202d3a:	e822                	sd	s0,16(sp)
    80202d3c:	e426                	sd	s1,8(sp)
    80202d3e:	1000                	addi	s0,sp,32
    80202d40:	84ae                	mv	s1,a1
    *ip = argraw(n);
    80202d42:	00000097          	auipc	ra,0x0
    80202d46:	f84080e7          	jalr	-124(ra) # 80202cc6 <argraw>
    80202d4a:	c088                	sw	a0,0(s1)
    return 0;
}
    80202d4c:	4501                	li	a0,0
    80202d4e:	60e2                	ld	ra,24(sp)
    80202d50:	6442                	ld	s0,16(sp)
    80202d52:	64a2                	ld	s1,8(sp)
    80202d54:	6105                	addi	sp,sp,32
    80202d56:	8082                	ret

0000000080202d58 <argaddr>:

// Retrieve an argument as a pointer.
// Doesn't check for legality, since
// copyin/copyout will do that.
int argaddr(int n, u64* ip) {
    80202d58:	1101                	addi	sp,sp,-32
    80202d5a:	ec06                	sd	ra,24(sp)
    80202d5c:	e822                	sd	s0,16(sp)
    80202d5e:	e426                	sd	s1,8(sp)
    80202d60:	1000                	addi	s0,sp,32
    80202d62:	84ae                	mv	s1,a1
    *ip = argraw(n);
    80202d64:	00000097          	auipc	ra,0x0
    80202d68:	f62080e7          	jalr	-158(ra) # 80202cc6 <argraw>
    80202d6c:	e088                	sd	a0,0(s1)
    return 0;
}
    80202d6e:	4501                	li	a0,0
    80202d70:	60e2                	ld	ra,24(sp)
    80202d72:	6442                	ld	s0,16(sp)
    80202d74:	64a2                	ld	s1,8(sp)
    80202d76:	6105                	addi	sp,sp,32
    80202d78:	8082                	ret

0000000080202d7a <copyinstr>:

// Copy a null-terminated string from user to kernel.
// Copy bytes to dst from virtual address srcva in a given page table,
// until a '\0', or max.
// Return 0 on success, -1 on error.
int copyinstr(u64* pagetable, char* dst, u64 srcva, u64 max) {
    80202d7a:	715d                	addi	sp,sp,-80
    80202d7c:	e486                	sd	ra,72(sp)
    80202d7e:	e0a2                	sd	s0,64(sp)
    80202d80:	fc26                	sd	s1,56(sp)
    80202d82:	f84a                	sd	s2,48(sp)
    80202d84:	f44e                	sd	s3,40(sp)
    80202d86:	f052                	sd	s4,32(sp)
    80202d88:	ec56                	sd	s5,24(sp)
    80202d8a:	e85a                	sd	s6,16(sp)
    80202d8c:	e45e                	sd	s7,8(sp)
    80202d8e:	0880                	addi	s0,sp,80
    u64 n, va0, pa0;
    int got_null = 0;

    while (got_null == 0 && max > 0) {
    80202d90:	cad9                	beqz	a3,80202e26 <copyinstr+0xac>
    80202d92:	8a2a                	mv	s4,a0
    80202d94:	8b2e                	mv	s6,a1
    80202d96:	8bb2                	mv	s7,a2
    80202d98:	84b6                	mv	s1,a3
        va0 = DOWN_ALIGN(srcva, PGSIZE);
    80202d9a:	7afd                	lui	s5,0xfffff
        pa0 = vir2phy(pagetable, va0);
        if (pa0 == 0){
            printf("pa0=0!");
            return -1;
        }
        n = PGSIZE - (srcva - va0);
    80202d9c:	6985                	lui	s3,0x1
    80202d9e:	a825                	j	80202dd6 <copyinstr+0x5c>
            printf("pa0=0!");
    80202da0:	00006517          	auipc	a0,0x6
    80202da4:	78050513          	addi	a0,a0,1920 # 80209520 <__func__.0+0x28>
    80202da8:	ffffd097          	auipc	ra,0xffffd
    80202dac:	70e080e7          	jalr	1806(ra) # 802004b6 <printf>
            return -1;
    80202db0:	557d                	li	a0,-1
    80202db2:	a021                	j	80202dba <copyinstr+0x40>
            n = max;

        char* p = (char*)(pa0 + (srcva - va0));
        while (n > 0) {
            if (*p == '\0') {
                *dst = '\0';
    80202db4:	00078023          	sb	zero,0(a5)
        }

        srcva = va0 + PGSIZE;
    }
    if (got_null) {
        return 0;
    80202db8:	4501                	li	a0,0
    } else {
        printf("ungot null\n");
        return -1;
    }
}
    80202dba:	60a6                	ld	ra,72(sp)
    80202dbc:	6406                	ld	s0,64(sp)
    80202dbe:	74e2                	ld	s1,56(sp)
    80202dc0:	7942                	ld	s2,48(sp)
    80202dc2:	79a2                	ld	s3,40(sp)
    80202dc4:	7a02                	ld	s4,32(sp)
    80202dc6:	6ae2                	ld	s5,24(sp)
    80202dc8:	6b42                	ld	s6,16(sp)
    80202dca:	6ba2                	ld	s7,8(sp)
    80202dcc:	6161                	addi	sp,sp,80
    80202dce:	8082                	ret
        srcva = va0 + PGSIZE;
    80202dd0:	01390bb3          	add	s7,s2,s3
    while (got_null == 0 && max > 0) {
    80202dd4:	c8a9                	beqz	s1,80202e26 <copyinstr+0xac>
        va0 = DOWN_ALIGN(srcva, PGSIZE);
    80202dd6:	015bf933          	and	s2,s7,s5
        pa0 = vir2phy(pagetable, va0);
    80202dda:	85ca                	mv	a1,s2
    80202ddc:	8552                	mv	a0,s4
    80202dde:	fffff097          	auipc	ra,0xfffff
    80202de2:	dea080e7          	jalr	-534(ra) # 80201bc8 <vir2phy>
        if (pa0 == 0){
    80202de6:	dd4d                	beqz	a0,80202da0 <copyinstr+0x26>
        n = PGSIZE - (srcva - va0);
    80202de8:	417906b3          	sub	a3,s2,s7
    80202dec:	96ce                	add	a3,a3,s3
    80202dee:	00d4f363          	bgeu	s1,a3,80202df4 <copyinstr+0x7a>
    80202df2:	86a6                	mv	a3,s1
        char* p = (char*)(pa0 + (srcva - va0));
    80202df4:	955e                	add	a0,a0,s7
    80202df6:	41250533          	sub	a0,a0,s2
        while (n > 0) {
    80202dfa:	daf9                	beqz	a3,80202dd0 <copyinstr+0x56>
    80202dfc:	87da                	mv	a5,s6
            if (*p == '\0') {
    80202dfe:	41650633          	sub	a2,a0,s6
    80202e02:	fff48593          	addi	a1,s1,-1 # ffffffffffdfffff <bssEnd+0xffffffff7fa0efff>
    80202e06:	95da                	add	a1,a1,s6
        while (n > 0) {
    80202e08:	96da                	add	a3,a3,s6
            if (*p == '\0') {
    80202e0a:	00f60733          	add	a4,a2,a5
    80202e0e:	00074703          	lbu	a4,0(a4)
    80202e12:	d34d                	beqz	a4,80202db4 <copyinstr+0x3a>
                *dst = *p;
    80202e14:	00e78023          	sb	a4,0(a5)
            --max;
    80202e18:	40f584b3          	sub	s1,a1,a5
            dst++;
    80202e1c:	0785                	addi	a5,a5,1
        while (n > 0) {
    80202e1e:	fed796e3          	bne	a5,a3,80202e0a <copyinstr+0x90>
            dst++;
    80202e22:	8b3e                	mv	s6,a5
    80202e24:	b775                	j	80202dd0 <copyinstr+0x56>
        printf("ungot null\n");
    80202e26:	00006517          	auipc	a0,0x6
    80202e2a:	70250513          	addi	a0,a0,1794 # 80209528 <__func__.0+0x30>
    80202e2e:	ffffd097          	auipc	ra,0xffffd
    80202e32:	688080e7          	jalr	1672(ra) # 802004b6 <printf>
        return -1;
    80202e36:	557d                	li	a0,-1
    80202e38:	b749                	j	80202dba <copyinstr+0x40>

0000000080202e3a <fetchstr>:
int fetchstr(u64 addr, char* buf, int max) {
    80202e3a:	7179                	addi	sp,sp,-48
    80202e3c:	f406                	sd	ra,40(sp)
    80202e3e:	f022                	sd	s0,32(sp)
    80202e40:	ec26                	sd	s1,24(sp)
    80202e42:	e84a                	sd	s2,16(sp)
    80202e44:	e44e                	sd	s3,8(sp)
    80202e46:	1800                	addi	s0,sp,48
    80202e48:	892a                	mv	s2,a0
    80202e4a:	84ae                	mv	s1,a1
    80202e4c:	89b2                	mv	s3,a2
    struct Process* p = myproc();
    80202e4e:	fffff097          	auipc	ra,0xfffff
    80202e52:	31c080e7          	jalr	796(ra) # 8020216a <myproc>
    int err = copyinstr(p->pgdir, buf, addr, max);
    80202e56:	86ce                	mv	a3,s3
    80202e58:	864a                	mv	a2,s2
    80202e5a:	85a6                	mv	a1,s1
    80202e5c:	13053503          	ld	a0,304(a0)
    80202e60:	00000097          	auipc	ra,0x0
    80202e64:	f1a080e7          	jalr	-230(ra) # 80202d7a <copyinstr>
    if (err < 0)
    80202e68:	00054763          	bltz	a0,80202e76 <fetchstr+0x3c>
    return strlen(buf);
    80202e6c:	8526                	mv	a0,s1
    80202e6e:	00001097          	auipc	ra,0x1
    80202e72:	cc2080e7          	jalr	-830(ra) # 80203b30 <strlen>
}
    80202e76:	70a2                	ld	ra,40(sp)
    80202e78:	7402                	ld	s0,32(sp)
    80202e7a:	64e2                	ld	s1,24(sp)
    80202e7c:	6942                	ld	s2,16(sp)
    80202e7e:	69a2                	ld	s3,8(sp)
    80202e80:	6145                	addi	sp,sp,48
    80202e82:	8082                	ret

0000000080202e84 <argstr>:
int argstr(int n, char* buf, int max) {
    80202e84:	1101                	addi	sp,sp,-32
    80202e86:	ec06                	sd	ra,24(sp)
    80202e88:	e822                	sd	s0,16(sp)
    80202e8a:	e426                	sd	s1,8(sp)
    80202e8c:	e04a                	sd	s2,0(sp)
    80202e8e:	1000                	addi	s0,sp,32
    80202e90:	84ae                	mv	s1,a1
    80202e92:	8932                	mv	s2,a2
    *ip = argraw(n);
    80202e94:	00000097          	auipc	ra,0x0
    80202e98:	e32080e7          	jalr	-462(ra) # 80202cc6 <argraw>
    return fetchstr(addr, buf, max);
    80202e9c:	864a                	mv	a2,s2
    80202e9e:	85a6                	mv	a1,s1
    80202ea0:	00000097          	auipc	ra,0x0
    80202ea4:	f9a080e7          	jalr	-102(ra) # 80202e3a <fetchstr>
}
    80202ea8:	60e2                	ld	ra,24(sp)
    80202eaa:	6442                	ld	s0,16(sp)
    80202eac:	64a2                	ld	s1,8(sp)
    80202eae:	6902                	ld	s2,0(sp)
    80202eb0:	6105                	addi	sp,sp,32
    80202eb2:	8082                	ret

0000000080202eb4 <syscallGetProcessId>:
    acquireLock(&printLock);
    putchar(trapframe->a0);
    releaseLock(&printLock);
}

void syscallGetProcessId() {
    80202eb4:	1141                	addi	sp,sp,-16
    80202eb6:	e406                	sd	ra,8(sp)
    80202eb8:	e022                	sd	s0,0(sp)
    80202eba:	0800                	addi	s0,sp,16
    Trapframe* trapframe = getHartTrapFrame();
    80202ebc:	00001097          	auipc	ra,0x1
    80202ec0:	abc080e7          	jalr	-1348(ra) # 80203978 <getHartTrapFrame>
    asm volatile("mv %0, tp" : "=r" (x) );
    80202ec4:	8712                	mv	a4,tp
    trapframe->a0 = currentProcess[r_hartid()]->id;
    80202ec6:	070e                	slli	a4,a4,0x3
    80202ec8:	00156797          	auipc	a5,0x156
    80202ecc:	59078793          	addi	a5,a5,1424 # 80359458 <currentProcess>
    80202ed0:	97ba                	add	a5,a5,a4
    80202ed2:	639c                	ld	a5,0(a5)
    80202ed4:	1387e783          	lwu	a5,312(a5)
    80202ed8:	f93c                	sd	a5,112(a0)
}
    80202eda:	60a2                	ld	ra,8(sp)
    80202edc:	6402                	ld	s0,0(sp)
    80202ede:	0141                	addi	sp,sp,16
    80202ee0:	8082                	ret

0000000080202ee2 <syscallGetParentProcessId>:

void syscallGetParentProcessId() {
    80202ee2:	1141                	addi	sp,sp,-16
    80202ee4:	e406                	sd	ra,8(sp)
    80202ee6:	e022                	sd	s0,0(sp)
    80202ee8:	0800                	addi	s0,sp,16
    Trapframe* trapframe = getHartTrapFrame();
    80202eea:	00001097          	auipc	ra,0x1
    80202eee:	a8e080e7          	jalr	-1394(ra) # 80203978 <getHartTrapFrame>
    80202ef2:	8712                	mv	a4,tp
    trapframe->a0 = currentProcess[r_hartid()]->parentId;
    80202ef4:	070e                	slli	a4,a4,0x3
    80202ef6:	00156797          	auipc	a5,0x156
    80202efa:	56278793          	addi	a5,a5,1378 # 80359458 <currentProcess>
    80202efe:	97ba                	add	a5,a5,a4
    80202f00:	639c                	ld	a5,0(a5)
    80202f02:	13c7e783          	lwu	a5,316(a5)
    80202f06:	f93c                	sd	a5,112(a0)
}
    80202f08:	60a2                	ld	ra,8(sp)
    80202f0a:	6402                	ld	s0,0(sp)
    80202f0c:	0141                	addi	sp,sp,16
    80202f0e:	8082                	ret

0000000080202f10 <syscallPutchar>:
void syscallPutchar() {
    80202f10:	1101                	addi	sp,sp,-32
    80202f12:	ec06                	sd	ra,24(sp)
    80202f14:	e822                	sd	s0,16(sp)
    80202f16:	e426                	sd	s1,8(sp)
    80202f18:	1000                	addi	s0,sp,32
    Trapframe* trapframe = getHartTrapFrame();
    80202f1a:	00001097          	auipc	ra,0x1
    80202f1e:	a5e080e7          	jalr	-1442(ra) # 80203978 <getHartTrapFrame>
    80202f22:	84aa                	mv	s1,a0
    acquireLock(&printLock);
    80202f24:	00095517          	auipc	a0,0x95
    80202f28:	0e450513          	addi	a0,a0,228 # 80298008 <printLock>
    80202f2c:	00001097          	auipc	ra,0x1
    80202f30:	986080e7          	jalr	-1658(ra) # 802038b2 <acquireLock>
#define SBI_REMOTE_SFENCE_VMA 6
#define SBI_REMOTE_SFENCE_VMA_ASID 7
#define SBI_SHUTDOWN 8

inline void putchar(char c) {
    register u64 a0 asm ("a0") = (u64) c;
    80202f34:	0704c503          	lbu	a0,112(s1)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    80202f38:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80202f3a:	00000073          	ecall
    releaseLock(&printLock);
    80202f3e:	00095517          	auipc	a0,0x95
    80202f42:	0ca50513          	addi	a0,a0,202 # 80298008 <printLock>
    80202f46:	00001097          	auipc	ra,0x1
    80202f4a:	9d0080e7          	jalr	-1584(ra) # 80203916 <releaseLock>
}
    80202f4e:	60e2                	ld	ra,24(sp)
    80202f50:	6442                	ld	s0,16(sp)
    80202f52:	64a2                	ld	s1,8(sp)
    80202f54:	6105                	addi	sp,sp,32
    80202f56:	8082                	ret

0000000080202f58 <syscallProcessDestory>:

void syscallProcessDestory() {
    80202f58:	7179                	addi	sp,sp,-48
    80202f5a:	f406                	sd	ra,40(sp)
    80202f5c:	f022                	sd	s0,32(sp)
    80202f5e:	ec26                	sd	s1,24(sp)
    80202f60:	1800                	addi	s0,sp,48
    Trapframe* trapframe = getHartTrapFrame();
    80202f62:	00001097          	auipc	ra,0x1
    80202f66:	a16080e7          	jalr	-1514(ra) # 80203978 <getHartTrapFrame>
    80202f6a:	84aa                	mv	s1,a0
    u32 processId = trapframe->a0;
    struct Process* process;
    int ret;

    if ((ret = pid2Process(processId, &process, 1)) < 0) {
    80202f6c:	4605                	li	a2,1
    80202f6e:	fd840593          	addi	a1,s0,-40
    80202f72:	5928                	lw	a0,112(a0)
    80202f74:	fffff097          	auipc	ra,0xfffff
    80202f78:	45c080e7          	jalr	1116(ra) # 802023d0 <pid2Process>
    80202f7c:	00054963          	bltz	a0,80202f8e <syscallProcessDestory+0x36>
        trapframe->a0 = ret;
        return;
    }    

    processDestory(process);
    80202f80:	fd843503          	ld	a0,-40(s0)
    80202f84:	00000097          	auipc	ra,0x0
    80202f88:	a38080e7          	jalr	-1480(ra) # 802029bc <processDestory>
    trapframe->a0 = 0;
    return;
    80202f8c:	4501                	li	a0,0
        trapframe->a0 = ret;
    80202f8e:	f8a8                	sd	a0,112(s1)
}
    80202f90:	70a2                	ld	ra,40(sp)
    80202f92:	7402                	ld	s0,32(sp)
    80202f94:	64e2                	ld	s1,24(sp)
    80202f96:	6145                	addi	sp,sp,48
    80202f98:	8082                	ret

0000000080202f9a <syscallYield>:

void syscallYield() {
    80202f9a:	1141                	addi	sp,sp,-16
    80202f9c:	e406                	sd	ra,8(sp)
    80202f9e:	e022                	sd	s0,0(sp)
    80202fa0:	0800                	addi	s0,sp,16
	yield();
    80202fa2:	00000097          	auipc	ra,0x0
    80202fa6:	87a080e7          	jalr	-1926(ra) # 8020281c <yield>
}
    80202faa:	60a2                	ld	ra,8(sp)
    80202fac:	6402                	ld	s0,0(sp)
    80202fae:	0141                	addi	sp,sp,16
    80202fb0:	8082                	ret

0000000080202fb2 <syscallFork>:

void syscallFork() {
    80202fb2:	1141                	addi	sp,sp,-16
    80202fb4:	e406                	sd	ra,8(sp)
    80202fb6:	e022                	sd	s0,0(sp)
    80202fb8:	0800                	addi	s0,sp,16
    processFork();
    80202fba:	00000097          	auipc	ra,0x0
    80202fbe:	a52080e7          	jalr	-1454(ra) # 80202a0c <processFork>
}
    80202fc2:	60a2                	ld	ra,8(sp)
    80202fc4:	6402                	ld	s0,0(sp)
    80202fc6:	0141                	addi	sp,sp,16
    80202fc8:	8082                	ret

0000000080202fca <syscallPutString>:

void syscallPutString() {
    80202fca:	7139                	addi	sp,sp,-64
    80202fcc:	fc06                	sd	ra,56(sp)
    80202fce:	f822                	sd	s0,48(sp)
    80202fd0:	f426                	sd	s1,40(sp)
    80202fd2:	f04a                	sd	s2,32(sp)
    80202fd4:	ec4e                	sd	s3,24(sp)
    80202fd6:	e852                	sd	s4,16(sp)
    80202fd8:	0080                	addi	s0,sp,64
    Trapframe* trapframe = getHartTrapFrame();
    80202fda:	00001097          	auipc	ra,0x1
    80202fde:	99e080e7          	jalr	-1634(ra) # 80203978 <getHartTrapFrame>
    80202fe2:	8792                	mv	a5,tp
    int hartId = r_hartid();
    //printf("hart %d, env %lx printf string:\n", hartId, currentProcess[hartId]->id);
    u64 va = trapframe->a0;
    80202fe4:	7924                	ld	s1,112(a0)
    int len = trapframe->a1;
    80202fe6:	07853903          	ld	s2,120(a0)
    80202fea:	00090a1b          	sext.w	s4,s2
    extern Process *currentProcess[HART_TOTAL_NUMBER];
    u64* pte;
    u64 pa = pageLookup(currentProcess[hartId]->pgdir, va, &pte) + (va & 0xfff);
    80202fee:	2781                	sext.w	a5,a5
    80202ff0:	078e                	slli	a5,a5,0x3
    80202ff2:	00156717          	auipc	a4,0x156
    80202ff6:	46670713          	addi	a4,a4,1126 # 80359458 <currentProcess>
    80202ffa:	97ba                	add	a5,a5,a4
    80202ffc:	639c                	ld	a5,0(a5)
    80202ffe:	fc840613          	addi	a2,s0,-56
    80203002:	85a6                	mv	a1,s1
    80203004:	1307b503          	ld	a0,304(a5)
    80203008:	ffffe097          	auipc	ra,0xffffe
    8020300c:	6ea080e7          	jalr	1770(ra) # 802016f2 <pageLookup>
    80203010:	03449993          	slli	s3,s1,0x34
    80203014:	0349d993          	srli	s3,s3,0x34
    80203018:	99aa                	add	s3,s3,a0
    if (pa == 0) {
    8020301a:	04098b63          	beqz	s3,80203070 <syscallPutString+0xa6>
        panic("Syscall put string address error!\nThe virtual address is %x, the length is %x\n", va, len);
    }
    char* start = (char*) pa;
    8020301e:	84ce                	mv	s1,s3
    acquireLock(&printLock);
    80203020:	00095517          	auipc	a0,0x95
    80203024:	fe850513          	addi	a0,a0,-24 # 80298008 <printLock>
    80203028:	00001097          	auipc	ra,0x1
    8020302c:	88a080e7          	jalr	-1910(ra) # 802038b2 <acquireLock>
    while (len--) {
    80203030:	020a0063          	beqz	s4,80203050 <syscallPutString+0x86>
    80203034:	fff9079b          	addiw	a5,s2,-1
    80203038:	1782                	slli	a5,a5,0x20
    8020303a:	9381                	srli	a5,a5,0x20
    8020303c:	0985                	addi	s3,s3,1
    8020303e:	97ce                	add	a5,a5,s3
    register u64 a0 asm ("a0") = (u64) c;
    80203040:	0004c503          	lbu	a0,0(s1)
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_PUTCHAR;
    80203044:	4885                	li	a7,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    80203046:	00000073          	ecall
        putchar(*start);
        start++;
    8020304a:	0485                	addi	s1,s1,1
    while (len--) {
    8020304c:	fef49ae3          	bne	s1,a5,80203040 <syscallPutString+0x76>
    }
    releaseLock(&printLock);
    80203050:	00095517          	auipc	a0,0x95
    80203054:	fb850513          	addi	a0,a0,-72 # 80298008 <printLock>
    80203058:	00001097          	auipc	ra,0x1
    8020305c:	8be080e7          	jalr	-1858(ra) # 80203916 <releaseLock>
    80203060:	70e2                	ld	ra,56(sp)
    80203062:	7442                	ld	s0,48(sp)
    80203064:	74a2                	ld	s1,40(sp)
    80203066:	7902                	ld	s2,32(sp)
    80203068:	69e2                	ld	s3,24(sp)
    8020306a:	6a42                	ld	s4,16(sp)
    8020306c:	6121                	addi	sp,sp,64
    8020306e:	8082                	ret
        panic("Syscall put string address error!\nThe virtual address is %x, the length is %x\n", va, len);
    80203070:	87d2                	mv	a5,s4
    80203072:	8726                	mv	a4,s1
    80203074:	00006697          	auipc	a3,0x6
    80203078:	4dc68693          	addi	a3,a3,1244 # 80209550 <__func__.0+0x58>
    8020307c:	00006617          	auipc	a2,0x6
    80203080:	53460613          	addi	a2,a2,1332 # 802095b0 <__func__.0>
    80203084:	04e00593          	li	a1,78
    80203088:	00006517          	auipc	a0,0x6
    8020308c:	51850513          	addi	a0,a0,1304 # 802095a0 <__func__.0+0xa8>
    80203090:	ffffd097          	auipc	ra,0xffffd
    80203094:	4b2080e7          	jalr	1202(ra) # 80200542 <_panic_>

0000000080203098 <setNextTimeout>:
#include <Process.h>
#include <Riscv.h>

static u32 ticks;

void setNextTimeout() {
    80203098:	1141                	addi	sp,sp,-16
    8020309a:	e422                	sd	s0,8(sp)
    8020309c:	0800                	addi	s0,sp,16
	asm volatile("rdtime %0" : "=r" (x) );
    8020309e:	c0102573          	rdtime	a0
    SBI_CALL_1(SBI_SET_TIMER, r_time() + INTERVAL);
    802030a2:	000317b7          	lui	a5,0x31
    802030a6:	d4078793          	addi	a5,a5,-704 # 30d40 <_start-0x801cf2c0>
    802030aa:	953e                	add	a0,a0,a5
    802030ac:	4581                	li	a1,0
    802030ae:	4601                	li	a2,0
    802030b0:	4681                	li	a3,0
    802030b2:	4881                	li	a7,0
    802030b4:	00000073          	ecall
}
    802030b8:	6422                	ld	s0,8(sp)
    802030ba:	0141                	addi	sp,sp,16
    802030bc:	8082                	ret

00000000802030be <timerTick>:

void timerTick() {
    802030be:	1141                	addi	sp,sp,-16
    802030c0:	e406                	sd	ra,8(sp)
    802030c2:	e022                	sd	s0,0(sp)
    802030c4:	0800                	addi	s0,sp,16
    ticks++;
    802030c6:	001d4717          	auipc	a4,0x1d4
    802030ca:	45270713          	addi	a4,a4,1106 # 803d7518 <ticks>
    802030ce:	431c                	lw	a5,0(a4)
    802030d0:	2785                	addiw	a5,a5,1
    802030d2:	c31c                	sw	a5,0(a4)
    setNextTimeout();
    802030d4:	00000097          	auipc	ra,0x0
    802030d8:	fc4080e7          	jalr	-60(ra) # 80203098 <setNextTimeout>
    802030dc:	60a2                	ld	ra,8(sp)
    802030de:	6402                	ld	s0,0(sp)
    802030e0:	0141                	addi	sp,sp,16
    802030e2:	8082                	ret

00000000802030e4 <trapInit>:
#include <Hart.h>
#include <sysfile.h>
#include <debug.h>
#include <defs.h>

void trapInit() {
    802030e4:	1141                	addi	sp,sp,-16
    802030e6:	e406                	sd	ra,8(sp)
    802030e8:	e022                	sd	s0,0(sp)
    802030ea:	0800                	addi	s0,sp,16
    printf("Trap init start...\n");
    802030ec:	00006517          	auipc	a0,0x6
    802030f0:	4dc50513          	addi	a0,a0,1244 # 802095c8 <__func__.0+0x18>
    802030f4:	ffffd097          	auipc	ra,0xffffd
    802030f8:	3c2080e7          	jalr	962(ra) # 802004b6 <printf>
	asm volatile("csrw stvec, %0" : : "r" (x));
    802030fc:	fffff797          	auipc	a5,0xfffff
    80203100:	d4478793          	addi	a5,a5,-700 # 80201e40 <kernelVector>
    80203104:	10579073          	csrw	stvec,a5
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80203108:	100027f3          	csrr	a5,sstatus
    w_stvec((u64)kernelVector);
    w_sstatus(r_sstatus() | SSTATUS_SIE | SSTATUS_SPIE);
    8020310c:	0227e793          	ori	a5,a5,34
    asm volatile("csrw sstatus, %0" : : "r" (x));
    80203110:	10079073          	csrw	sstatus,a5
    asm volatile("csrw sip, %0" : : "r" (x));
    80203114:	4781                	li	a5,0
    80203116:	14479073          	csrw	sip,a5
    asm volatile("csrr %0, sie" : "=r" (x) );
    8020311a:	104027f3          	csrr	a5,sie
    //setNextTimeout();
    w_sip(0); //todo
    w_sie(r_sie() | SIE_SEIE | SIE_SSIE | SIE_STIE);
    8020311e:	2227e793          	ori	a5,a5,546
	asm volatile("csrw sie, %0" : : "r" (x));
    80203122:	10479073          	csrw	sie,a5
    printf("Trap init finish!\n");
    80203126:	00006517          	auipc	a0,0x6
    8020312a:	4ba50513          	addi	a0,a0,1210 # 802095e0 <__func__.0+0x30>
    8020312e:	ffffd097          	auipc	ra,0xffffd
    80203132:	388080e7          	jalr	904(ra) # 802004b6 <printf>
}
    80203136:	60a2                	ld	ra,8(sp)
    80203138:	6402                	ld	s0,0(sp)
    8020313a:	0141                	addi	sp,sp,16
    8020313c:	8082                	ret

000000008020313e <trapDevice>:
	asm volatile("csrr %0, scause" : "=r" (x) );
    8020313e:	142027f3          	csrr	a5,scause
    #ifdef QEMU
    if ((scause & SCAUSE_INTERRUPT) && 
    ((scause & SCAUSE_EXCEPTION_CODE) == SCAUSE_SUPERVISOR_EXTERNAL)) {
    #else
    // todo
    if ((scause & SCAUSE_INTERRUPT) && 
    80203142:	0007c463          	bltz	a5,8020314a <trapDevice+0xc>
    if ((scause & SCAUSE_INTERRUPT) &&
    ((scause & SCAUSE_EXCEPTION_CODE) == SCAUSE_SUPERVISOR_TIMER)) {
        timerTick();
        return TIMER_INTERRUPT;
    }
    return UNKNOWN_DEVICE;
    80203146:	4501                	li	a0,0
}
    80203148:	8082                	ret
int trapDevice() {
    8020314a:	1101                	addi	sp,sp,-32
    8020314c:	ec06                	sd	ra,24(sp)
    8020314e:	e822                	sd	s0,16(sp)
    80203150:	e426                	sd	s1,8(sp)
    80203152:	1000                	addi	s0,sp,32
    ((scause & SCAUSE_EXCEPTION_CODE) == SCAUSE_SUPERVISOR_EXTERNAL)) {
    80203154:	0786                	slli	a5,a5,0x1
    80203156:	8385                	srli	a5,a5,0x1
    if ((scause & SCAUSE_INTERRUPT) && 
    80203158:	4725                	li	a4,9
    8020315a:	00e78b63          	beq	a5,a4,80203170 <trapDevice+0x32>
    if ((scause & SCAUSE_INTERRUPT) &&
    8020315e:	4715                	li	a4,5
    return UNKNOWN_DEVICE;
    80203160:	4501                	li	a0,0
    if ((scause & SCAUSE_INTERRUPT) &&
    80203162:	08e78263          	beq	a5,a4,802031e6 <trapDevice+0xa8>
}
    80203166:	60e2                	ld	ra,24(sp)
    80203168:	6442                	ld	s0,16(sp)
    8020316a:	64a2                	ld	s1,8(sp)
    8020316c:	6105                	addi	sp,sp,32
    8020316e:	8082                	ret
	asm volatile("mv %0, tp" : "=r" (x) );
    80203170:	8712                	mv	a4,tp
void trapframeDump(Trapframe*);

inline static u32 interruptServed() {
    int hart = r_tp();
    #ifndef QEMU
    return *(u32*)PLIC_MCLAIM(hart);
    80203172:	00d7171b          	slliw	a4,a4,0xd
    80203176:	1f8617b7          	lui	a5,0x1f861
    8020317a:	07a6                	slli	a5,a5,0x9
    8020317c:	97ba                	add	a5,a5,a4
    8020317e:	43c4                	lw	s1,4(a5)
        int irq = interruptServed();
    80203180:	0004871b          	sext.w	a4,s1
        if (irq == UART_IRQ) {
    80203184:	02100793          	li	a5,33
    80203188:	02f70963          	beq	a4,a5,802031ba <trapDevice+0x7c>
        } else if (irq == DISK_IRQ) {
    8020318c:	47ed                	li	a5,27
    8020318e:	02f70d63          	beq	a4,a5,802031c8 <trapDevice+0x8a>
        return SOFTWARE_TRAP;
    80203192:	4505                	li	a0,1
        } else if (irq) {
    80203194:	db69                	beqz	a4,80203166 <trapDevice+0x28>
            panic("unexpected interrupt irq = %d\n", irq);
    80203196:	00006697          	auipc	a3,0x6
    8020319a:	46268693          	addi	a3,a3,1122 # 802095f8 <__func__.0+0x48>
    8020319e:	00006617          	auipc	a2,0x6
    802031a2:	6a260613          	addi	a2,a2,1698 # 80209840 <__func__.2>
    802031a6:	02a00593          	li	a1,42
    802031aa:	00006517          	auipc	a0,0x6
    802031ae:	46e50513          	addi	a0,a0,1134 # 80209618 <__func__.0+0x68>
    802031b2:	ffffd097          	auipc	ra,0xffffd
    802031b6:	390080e7          	jalr	912(ra) # 80200542 <_panic_>
};

inline int getchar() {
    register u64 a7 asm ("a7") = (u64) SBI_CONSOLE_GETCHAR;
    802031ba:	4889                	li	a7,2
    register u64 a0 asm ("a0");
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    802031bc:	00000073          	ecall
    return a0;
    802031c0:	2501                	sext.w	a0,a0
            if (c != -1) {
    802031c2:	57fd                	li	a5,-1
    802031c4:	00f51c63          	bne	a0,a5,802031dc <trapDevice+0x9e>
    802031c8:	8712                	mv	a4,tp
}

inline static void interruptCompleted(int irq) {
    int hart = r_tp();
    #ifndef QEMU
    *(u32*)PLIC_MCLAIM(hart) = irq;
    802031ca:	00d7171b          	slliw	a4,a4,0xd
    802031ce:	1f8617b7          	lui	a5,0x1f861
    802031d2:	07a6                	slli	a5,a5,0x9
    802031d4:	97ba                	add	a5,a5,a4
    802031d6:	c3c4                	sw	s1,4(a5)
        return SOFTWARE_TRAP;
    802031d8:	4505                	li	a0,1
    #else
    *(u32*)PLIC_SCLAIM(hart) = irq;
    #endif
}
    802031da:	b771                	j	80203166 <trapDevice+0x28>
                consoleInterrupt(c);
    802031dc:	ffffd097          	auipc	ra,0xffffd
    802031e0:	fc2080e7          	jalr	-62(ra) # 8020019e <consoleInterrupt>
    802031e4:	b7d5                	j	802031c8 <trapDevice+0x8a>
        timerTick();
    802031e6:	00000097          	auipc	ra,0x0
    802031ea:	ed8080e7          	jalr	-296(ra) # 802030be <timerTick>
        return TIMER_INTERRUPT;
    802031ee:	4509                	li	a0,2
    802031f0:	bf9d                	j	80203166 <trapDevice+0x28>

00000000802031f2 <userTrapReturn>:
        }
    }
    userTrapReturn();
}

void userTrapReturn() {
    802031f2:	7139                	addi	sp,sp,-64
    802031f4:	fc06                	sd	ra,56(sp)
    802031f6:	f822                	sd	s0,48(sp)
    802031f8:	f426                	sd	s1,40(sp)
    802031fa:	f04a                	sd	s2,32(sp)
    802031fc:	ec4e                	sd	s3,24(sp)
    802031fe:	e852                	sd	s4,16(sp)
    80203200:	0080                	addi	s0,sp,64
    extern char trampoline[];
    w_stvec(TRAMPOLINE_BASE + ((u64)userVector - (u64)trampoline));
    80203202:	00004a17          	auipc	s4,0x4
    80203206:	dfea0a13          	addi	s4,s4,-514 # 80207000 <_trampoline>
    8020320a:	02000937          	lui	s2,0x2000
    8020320e:	197d                	addi	s2,s2,-1
    80203210:	0936                	slli	s2,s2,0xd
    80203212:	00004797          	auipc	a5,0x4
    80203216:	dee78793          	addi	a5,a5,-530 # 80207000 <_trampoline>
    8020321a:	97ca                	add	a5,a5,s2
    8020321c:	414787b3          	sub	a5,a5,s4
	asm volatile("csrw stvec, %0" : : "r" (x));
    80203220:	10579073          	csrw	stvec,a5
    asm volatile("mv %0, tp" : "=r" (x) );
    80203224:	8992                	mv	s3,tp
    int hartId = r_hartid();

    extern Process *currentProcess[HART_TOTAL_NUMBER];
    Trapframe* trapframe = getHartTrapFrame();
    80203226:	00000097          	auipc	ra,0x0
    8020322a:	752080e7          	jalr	1874(ra) # 80203978 <getHartTrapFrame>
    8020322e:	84aa                	mv	s1,a0

    trapframe->kernelSp = getHartKernelTopSp();
    80203230:	00000097          	auipc	ra,0x0
    80203234:	768080e7          	jalr	1896(ra) # 80203998 <getHartKernelTopSp>
    80203238:	e488                	sd	a0,8(s1)
    trapframe->trapHandler = (u64)userTrap;
    8020323a:	00000797          	auipc	a5,0x0
    8020323e:	22a78793          	addi	a5,a5,554 # 80203464 <userTrap>
    80203242:	e89c                	sd	a5,16(s1)
	asm volatile("mv %0, tp" : "=r" (x) );
    80203244:	8792                	mv	a5,tp
    trapframe->kernelHartId = r_tp();
    80203246:	f09c                	sd	a5,32(s1)
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80203248:	100027f3          	csrr	a5,sstatus

    //bcopy(&(currentProcess->trapframe), trapframe, sizeof(Trapframe));

    u64 sstatus = r_sstatus();
    sstatus &= ~SSTATUS_SPP;
    8020324c:	eff7f793          	andi	a5,a5,-257
    sstatus |= SSTATUS_SPIE;
    80203250:	0207e793          	ori	a5,a5,32
    asm volatile("csrw sstatus, %0" : : "r" (x));
    80203254:	10079073          	csrw	sstatus,a5
    w_sstatus(sstatus);
    u64 satp = MAKE_SATP(currentProcess[hartId]->pgdir);
    80203258:	2981                	sext.w	s3,s3
    8020325a:	098e                	slli	s3,s3,0x3
    8020325c:	00156797          	auipc	a5,0x156
    80203260:	1fc78793          	addi	a5,a5,508 # 80359458 <currentProcess>
    80203264:	97ce                	add	a5,a5,s3
    80203266:	639c                	ld	a5,0(a5)
    80203268:	1307b983          	ld	s3,304(a5)
    u64 fn = TRAMPOLINE_BASE + ((u64)userReturn - (u64)trampoline);
    8020326c:	00004797          	auipc	a5,0x4
    80203270:	e2c78793          	addi	a5,a5,-468 # 80207098 <userReturn>
    80203274:	993e                	add	s2,s2,a5
    80203276:	41490933          	sub	s2,s2,s4
    u64* pte;
    u64 pa = pageLookup(currentProcess[hartId]->pgdir, USER_STACK_TOP - PAGE_SIZE, &pte);
    8020327a:	fc840613          	addi	a2,s0,-56
    8020327e:	040005b7          	lui	a1,0x4000
    80203282:	15f5                	addi	a1,a1,-3
    80203284:	05b2                	slli	a1,a1,0xc
    80203286:	854e                	mv	a0,s3
    80203288:	ffffe097          	auipc	ra,0xffffe
    8020328c:	46a080e7          	jalr	1130(ra) # 802016f2 <pageLookup>
    u64 satp = MAKE_SATP(currentProcess[hartId]->pgdir);
    80203290:	00c9d993          	srli	s3,s3,0xc
#else
        //We must use 'tem', otherwise we will get compile error.
        use(tem);
#endif
    }
    ((void(*)(u64, u64))fn)((u64)trapframe, satp);
    80203294:	55fd                	li	a1,-1
    80203296:	15fe                	slli	a1,a1,0x3f
    80203298:	00b9e5b3          	or	a1,s3,a1
    8020329c:	8526                	mv	a0,s1
    8020329e:	9902                	jalr	s2
}
    802032a0:	70e2                	ld	ra,56(sp)
    802032a2:	7442                	ld	s0,48(sp)
    802032a4:	74a2                	ld	s1,40(sp)
    802032a6:	7902                	ld	s2,32(sp)
    802032a8:	69e2                	ld	s3,24(sp)
    802032aa:	6a42                	ld	s4,16(sp)
    802032ac:	6121                	addi	sp,sp,64
    802032ae:	8082                	ret

00000000802032b0 <trapframeDump>:

void trapframeDump(Trapframe *tf)
{
    802032b0:	7111                	addi	sp,sp,-256
    802032b2:	fd86                	sd	ra,248(sp)
    802032b4:	f9a2                	sd	s0,240(sp)
    802032b6:	0200                	addi	s0,sp,256
    printf(" a0: %lx\n \
    802032b8:	711c                	ld	a5,32(a0)
    802032ba:	f1be                	sd	a5,224(sp)
    802032bc:	691c                	ld	a5,16(a0)
    802032be:	edbe                	sd	a5,216(sp)
    802032c0:	611c                	ld	a5,0(a0)
    802032c2:	e9be                	sd	a5,208(sp)
    802032c4:	651c                	ld	a5,8(a0)
    802032c6:	e5be                	sd	a5,200(sp)
    802032c8:	6d1c                	ld	a5,24(a0)
    802032ca:	e1be                	sd	a5,192(sp)
    802032cc:	613c                	ld	a5,64(a0)
    802032ce:	fd3e                	sd	a5,184(sp)
    802032d0:	7d1c                	ld	a5,56(a0)
    802032d2:	f93e                	sd	a5,176(sp)
    802032d4:	791c                	ld	a5,48(a0)
    802032d6:	f53e                	sd	a5,168(sp)
    802032d8:	751c                	ld	a5,40(a0)
    802032da:	f13e                	sd	a5,160(sp)
    802032dc:	7d7c                	ld	a5,248(a0)
    802032de:	ed3e                	sd	a5,152(sp)
    802032e0:	797c                	ld	a5,240(a0)
    802032e2:	e93e                	sd	a5,144(sp)
    802032e4:	757c                	ld	a5,232(a0)
    802032e6:	e53e                	sd	a5,136(sp)
    802032e8:	717c                	ld	a5,224(a0)
    802032ea:	e13e                	sd	a5,128(sp)
    802032ec:	6d7c                	ld	a5,216(a0)
    802032ee:	fcbe                	sd	a5,120(sp)
    802032f0:	697c                	ld	a5,208(a0)
    802032f2:	f8be                	sd	a5,112(sp)
    802032f4:	657c                	ld	a5,200(a0)
    802032f6:	f4be                	sd	a5,104(sp)
    802032f8:	617c                	ld	a5,192(a0)
    802032fa:	f0be                	sd	a5,96(sp)
    802032fc:	7d5c                	ld	a5,184(a0)
    802032fe:	ecbe                	sd	a5,88(sp)
    80203300:	795c                	ld	a5,176(a0)
    80203302:	e8be                	sd	a5,80(sp)
    80203304:	753c                	ld	a5,104(a0)
    80203306:	e4be                	sd	a5,72(sp)
    80203308:	713c                	ld	a5,96(a0)
    8020330a:	e0be                	sd	a5,64(sp)
    8020330c:	11853783          	ld	a5,280(a0)
    80203310:	fc3e                	sd	a5,56(sp)
    80203312:	11053783          	ld	a5,272(a0)
    80203316:	f83e                	sd	a5,48(sp)
    80203318:	10853783          	ld	a5,264(a0)
    8020331c:	f43e                	sd	a5,40(sp)
    8020331e:	10053783          	ld	a5,256(a0)
    80203322:	f03e                	sd	a5,32(sp)
    80203324:	6d3c                	ld	a5,88(a0)
    80203326:	ec3e                	sd	a5,24(sp)
    80203328:	693c                	ld	a5,80(a0)
    8020332a:	e83e                	sd	a5,16(sp)
    8020332c:	653c                	ld	a5,72(a0)
    8020332e:	e43e                	sd	a5,8(sp)
    80203330:	755c                	ld	a5,168(a0)
    80203332:	e03e                	sd	a5,0(sp)
    80203334:	0a053883          	ld	a7,160(a0)
    80203338:	09853803          	ld	a6,152(a0)
    8020333c:	695c                	ld	a5,144(a0)
    8020333e:	6558                	ld	a4,136(a0)
    80203340:	6154                	ld	a3,128(a0)
    80203342:	7d30                	ld	a2,120(a0)
    80203344:	792c                	ld	a1,112(a0)
    80203346:	00006517          	auipc	a0,0x6
    8020334a:	2da50513          	addi	a0,a0,730 # 80209620 <__func__.0+0x70>
    8020334e:	ffffd097          	auipc	ra,0xffffd
    80203352:	168080e7          	jalr	360(ra) # 802004b6 <printf>
            tf->s0, tf->s1, tf->s2, tf->s3, tf->s4,
            tf->s5, tf->s6, tf->s7, tf->s8, tf->s9,
            tf->s10, tf->s11, tf->ra, tf->sp, tf->gp,
            tf->tp, tf->epc, tf->kernelSp, tf->kernelSatp,
            tf->trapHandler, tf->kernelHartId);
}
    80203356:	70ee                	ld	ra,248(sp)
    80203358:	744e                	ld	s0,240(sp)
    8020335a:	6111                	addi	sp,sp,256
    8020335c:	8082                	ret

000000008020335e <kernelTrap>:
void kernelTrap() {
    8020335e:	7139                	addi	sp,sp,-64
    80203360:	fc06                	sd	ra,56(sp)
    80203362:	f822                	sd	s0,48(sp)
    80203364:	f426                	sd	s1,40(sp)
    80203366:	f04a                	sd	s2,32(sp)
    80203368:	ec4e                	sd	s3,24(sp)
    8020336a:	e852                	sd	s4,16(sp)
    8020336c:	0080                	addi	s0,sp,64
    asm volatile("csrr %0, sepc" : "=r" (x) );
    8020336e:	14102973          	csrr	s2,sepc
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80203372:	100024f3          	csrr	s1,sstatus
	asm volatile("csrr %0, scause" : "=r" (x) );
    80203376:	14202a73          	csrr	s4,scause
    asm volatile("mv %0, tp" : "=r" (x) );
    8020337a:	8992                	mv	s3,tp
    Trapframe* trapframe = getHartTrapFrame();
    8020337c:	00000097          	auipc	ra,0x0
    80203380:	5fc080e7          	jalr	1532(ra) # 80203978 <getHartTrapFrame>
    trapframeDump(trapframe);
    80203384:	00000097          	auipc	ra,0x0
    80203388:	f2c080e7          	jalr	-212(ra) # 802032b0 <trapframeDump>
    if (!(sstatus & SSTATUS_SPP)) {
    8020338c:	1004f793          	andi	a5,s1,256
    80203390:	cb8d                	beqz	a5,802033c2 <kernelTrap+0x64>
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80203392:	100027f3          	csrr	a5,sstatus
	return (x & SSTATUS_SIE) != 0;
    80203396:	8b89                	andi	a5,a5,2
    if (intr_get()) {
    80203398:	e7b9                	bnez	a5,802033e6 <kernelTrap+0x88>
    int device = trapDevice();
    8020339a:	00000097          	auipc	ra,0x0
    8020339e:	da4080e7          	jalr	-604(ra) # 8020313e <trapDevice>
    if (device == UNKNOWN_DEVICE) {
    802033a2:	c525                	beqz	a0,8020340a <kernelTrap+0xac>
    if (device == TIMER_INTERRUPT) {
    802033a4:	4789                	li	a5,2
    802033a6:	0af50a63          	beq	a0,a5,8020345a <kernelTrap+0xfc>
  	asm volatile("csrw sepc, %0" : : "r" (x));
    802033aa:	14191073          	csrw	sepc,s2
    asm volatile("csrw sstatus, %0" : : "r" (x));
    802033ae:	10049073          	csrw	sstatus,s1
}
    802033b2:	70e2                	ld	ra,56(sp)
    802033b4:	7442                	ld	s0,48(sp)
    802033b6:	74a2                	ld	s1,40(sp)
    802033b8:	7902                	ld	s2,32(sp)
    802033ba:	69e2                	ld	s3,24(sp)
    802033bc:	6a42                	ld	s4,16(sp)
    802033be:	6121                	addi	sp,sp,64
    802033c0:	8082                	ret
        panic("kernel trap not from supervisor mode");
    802033c2:	00006697          	auipc	a3,0x6
    802033c6:	3ce68693          	addi	a3,a3,974 # 80209790 <__func__.0+0x1e0>
    802033ca:	00006617          	auipc	a2,0x6
    802033ce:	48660613          	addi	a2,a2,1158 # 80209850 <__func__.1>
    802033d2:	04b00593          	li	a1,75
    802033d6:	00006517          	auipc	a0,0x6
    802033da:	24250513          	addi	a0,a0,578 # 80209618 <__func__.0+0x68>
    802033de:	ffffd097          	auipc	ra,0xffffd
    802033e2:	164080e7          	jalr	356(ra) # 80200542 <_panic_>
        panic("kernel trap while interrupts enbled");
    802033e6:	00006697          	auipc	a3,0x6
    802033ea:	3d268693          	addi	a3,a3,978 # 802097b8 <__func__.0+0x208>
    802033ee:	00006617          	auipc	a2,0x6
    802033f2:	46260613          	addi	a2,a2,1122 # 80209850 <__func__.1>
    802033f6:	04e00593          	li	a1,78
    802033fa:	00006517          	auipc	a0,0x6
    802033fe:	21e50513          	addi	a0,a0,542 # 80209618 <__func__.0+0x68>
    80203402:	ffffd097          	auipc	ra,0xffffd
    80203406:	140080e7          	jalr	320(ra) # 80200542 <_panic_>
	asm volatile("csrr %0, stval" : "=r" (x) );
    8020340a:	143025f3          	csrr	a1,stval
        int pa = pageLookup(currentProcess[hartId]->pgdir, r_stval(), &pte);
    8020340e:	098e                	slli	s3,s3,0x3
    80203410:	00156797          	auipc	a5,0x156
    80203414:	04878793          	addi	a5,a5,72 # 80359458 <currentProcess>
    80203418:	97ce                	add	a5,a5,s3
    8020341a:	639c                	ld	a5,0(a5)
    8020341c:	fc840613          	addi	a2,s0,-56
    80203420:	1307b503          	ld	a0,304(a5)
    80203424:	ffffe097          	auipc	ra,0xffffe
    80203428:	2ce080e7          	jalr	718(ra) # 802016f2 <pageLookup>
    8020342c:	143027f3          	csrr	a5,stval
        panic("unhandled error %d,  %lx, %lx\n", scause, r_stval(), pa);
    80203430:	0005081b          	sext.w	a6,a0
    80203434:	8752                	mv	a4,s4
    80203436:	00006697          	auipc	a3,0x6
    8020343a:	3aa68693          	addi	a3,a3,938 # 802097e0 <__func__.0+0x230>
    8020343e:	00006617          	auipc	a2,0x6
    80203442:	41260613          	addi	a2,a2,1042 # 80209850 <__func__.1>
    80203446:	05500593          	li	a1,85
    8020344a:	00006517          	auipc	a0,0x6
    8020344e:	1ce50513          	addi	a0,a0,462 # 80209618 <__func__.0+0x68>
    80203452:	ffffd097          	auipc	ra,0xffffd
    80203456:	0f0080e7          	jalr	240(ra) # 80200542 <_panic_>
        yield();
    8020345a:	fffff097          	auipc	ra,0xfffff
    8020345e:	3c2080e7          	jalr	962(ra) # 8020281c <yield>
    80203462:	b7a1                	j	802033aa <kernelTrap+0x4c>

0000000080203464 <userTrap>:
void userTrap() {
    80203464:	7139                	addi	sp,sp,-64
    80203466:	fc06                	sd	ra,56(sp)
    80203468:	f822                	sd	s0,48(sp)
    8020346a:	f426                	sd	s1,40(sp)
    8020346c:	f04a                	sd	s2,32(sp)
    8020346e:	ec4e                	sd	s3,24(sp)
    80203470:	0080                	addi	s0,sp,64
    asm volatile("csrr %0, sepc" : "=r" (x) );
    80203472:	141027f3          	csrr	a5,sepc
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80203476:	100027f3          	csrr	a5,sstatus
	asm volatile("csrr %0, scause" : "=r" (x) );
    8020347a:	14202973          	csrr	s2,scause
    asm volatile("mv %0, tp" : "=r" (x) );
    8020347e:	8992                	mv	s3,tp
    if (sstatus & SSTATUS_SPP) {
    80203480:	1007f793          	andi	a5,a5,256
    80203484:	e3b5                	bnez	a5,802034e8 <userTrap+0x84>
	asm volatile("csrw stvec, %0" : : "r" (x));
    80203486:	fffff797          	auipc	a5,0xfffff
    8020348a:	9ba78793          	addi	a5,a5,-1606 # 80201e40 <kernelVector>
    8020348e:	10579073          	csrw	stvec,a5
    Trapframe* trapframe = getHartTrapFrame();
    80203492:	00000097          	auipc	ra,0x0
    80203496:	4e6080e7          	jalr	1254(ra) # 80203978 <getHartTrapFrame>
    8020349a:	84aa                	mv	s1,a0
    if (scause & SCAUSE_INTERRUPT) {
    8020349c:	06094863          	bltz	s2,8020350c <userTrap+0xa8>
        u64 *pte = NULL;
    802034a0:	fc043423          	sd	zero,-56(s0)
        switch (scause & SCAUSE_EXCEPTION_CODE)
    802034a4:	00191713          	slli	a4,s2,0x1
    802034a8:	8305                	srli	a4,a4,0x1
    802034aa:	57ed                	li	a5,-5
    802034ac:	8385                	srli	a5,a5,0x1
    802034ae:	00f977b3          	and	a5,s2,a5
    802034b2:	46b5                	li	a3,13
    802034b4:	0cd78c63          	beq	a5,a3,8020358c <userTrap+0x128>
    802034b8:	47a1                	li	a5,8
    802034ba:	16f71463          	bne	a4,a5,80203622 <userTrap+0x1be>
            trapframe->epc += 4;
    802034be:	6d1c                	ld	a5,24(a0)
    802034c0:	0791                	addi	a5,a5,4
    802034c2:	ed1c                	sd	a5,24(a0)
            if(trapframe->a7==SYSCALL_OPEN)
    802034c4:	7558                	ld	a4,168(a0)
    802034c6:	4799                	li	a5,6
    802034c8:	06f70563          	beq	a4,a5,80203532 <userTrap+0xce>
            else if(trapframe->a7==SYSCALL_READ)
    802034cc:	ff970793          	addi	a5,a4,-7
    802034d0:	4691                	li	a3,4
    802034d2:	0af6e463          	bltu	a3,a5,8020357a <userTrap+0x116>
    802034d6:	078a                	slli	a5,a5,0x2
    802034d8:	00006717          	auipc	a4,0x6
    802034dc:	35070713          	addi	a4,a4,848 # 80209828 <__func__.0+0x278>
    802034e0:	97ba                	add	a5,a5,a4
    802034e2:	439c                	lw	a5,0(a5)
    802034e4:	97ba                	add	a5,a5,a4
    802034e6:	8782                	jr	a5
        panic("usertrap: not from user mode\n");
    802034e8:	00006697          	auipc	a3,0x6
    802034ec:	31868693          	addi	a3,a3,792 # 80209800 <__func__.0+0x250>
    802034f0:	00006617          	auipc	a2,0x6
    802034f4:	37060613          	addi	a2,a2,880 # 80209860 <__func__.0>
    802034f8:	06b00593          	li	a1,107
    802034fc:	00006517          	auipc	a0,0x6
    80203500:	11c50513          	addi	a0,a0,284 # 80209618 <__func__.0+0x68>
    80203504:	ffffd097          	auipc	ra,0xffffd
    80203508:	03e080e7          	jalr	62(ra) # 80200542 <_panic_>
        trapDevice();
    8020350c:	00000097          	auipc	ra,0x0
    80203510:	c32080e7          	jalr	-974(ra) # 8020313e <trapDevice>
        yield();
    80203514:	fffff097          	auipc	ra,0xfffff
    80203518:	308080e7          	jalr	776(ra) # 8020281c <yield>
    userTrapReturn();
    8020351c:	00000097          	auipc	ra,0x0
    80203520:	cd6080e7          	jalr	-810(ra) # 802031f2 <userTrapReturn>
}
    80203524:	70e2                	ld	ra,56(sp)
    80203526:	7442                	ld	s0,48(sp)
    80203528:	74a2                	ld	s1,40(sp)
    8020352a:	7902                	ld	s2,32(sp)
    8020352c:	69e2                	ld	s3,24(sp)
    8020352e:	6121                	addi	sp,sp,64
    80203530:	8082                	ret
                trapframe->a0 = sys_open();
    80203532:	00003097          	auipc	ra,0x3
    80203536:	c28080e7          	jalr	-984(ra) # 8020615a <sys_open>
    8020353a:	f8a8                	sd	a0,112(s1)
    8020353c:	b7c5                	j	8020351c <userTrap+0xb8>
                trapframe->a0 = sys_read();
    8020353e:	00003097          	auipc	ra,0x3
    80203542:	ab2080e7          	jalr	-1358(ra) # 80205ff0 <sys_read>
    80203546:	f8a8                	sd	a0,112(s1)
    80203548:	bfd1                	j	8020351c <userTrap+0xb8>
                trapframe->a0 = sys_write();
    8020354a:	00003097          	auipc	ra,0x3
    8020354e:	b0c080e7          	jalr	-1268(ra) # 80206056 <sys_write>
    80203552:	f8a8                	sd	a0,112(s1)
    80203554:	b7e1                	j	8020351c <userTrap+0xb8>
                trapframe->a0 = sys_close();
    80203556:	00003097          	auipc	ra,0x3
    8020355a:	b66080e7          	jalr	-1178(ra) # 802060bc <sys_close>
    8020355e:	f8a8                	sd	a0,112(s1)
    80203560:	bf75                	j	8020351c <userTrap+0xb8>
                trapframe->a0 = sys_readdir();
    80203562:	00003097          	auipc	ra,0x3
    80203566:	e3a080e7          	jalr	-454(ra) # 8020639c <sys_readdir>
    8020356a:	f8a8                	sd	a0,112(s1)
    8020356c:	bf45                	j	8020351c <userTrap+0xb8>
                trapframe->a0 = sys_fstat();
    8020356e:	00003097          	auipc	ra,0x3
    80203572:	b9e080e7          	jalr	-1122(ra) # 8020610c <sys_fstat>
    80203576:	f8a8                	sd	a0,112(s1)
    80203578:	b755                	j	8020351c <userTrap+0xb8>
                syscallVector[trapframe->a7]();
    8020357a:	070e                	slli	a4,a4,0x3
    8020357c:	00007797          	auipc	a5,0x7
    80203580:	a8478793          	addi	a5,a5,-1404 # 8020a000 <syscallVector>
    80203584:	97ba                	add	a5,a5,a4
    80203586:	639c                	ld	a5,0(a5)
    80203588:	9782                	jalr	a5
    8020358a:	bf49                	j	8020351c <userTrap+0xb8>
	asm volatile("csrr %0, stval" : "=r" (x) );
    8020358c:	143025f3          	csrr	a1,stval
            pa = pageLookup(currentProcess[hartId]->pgdir, r_stval(), &pte);
    80203590:	00399713          	slli	a4,s3,0x3
    80203594:	00156797          	auipc	a5,0x156
    80203598:	ec478793          	addi	a5,a5,-316 # 80359458 <currentProcess>
    8020359c:	97ba                	add	a5,a5,a4
    8020359e:	639c                	ld	a5,0(a5)
    802035a0:	fc840613          	addi	a2,s0,-56
    802035a4:	1307b503          	ld	a0,304(a5)
    802035a8:	ffffe097          	auipc	ra,0xffffe
    802035ac:	14a080e7          	jalr	330(ra) # 802016f2 <pageLookup>
            if (pa == 0) {
    802035b0:	c51d                	beqz	a0,802035de <userTrap+0x17a>
            } else if (*pte & PTE_COW) {
    802035b2:	fc843783          	ld	a5,-56(s0)
    802035b6:	639c                	ld	a5,0(a5)
    802035b8:	1007f793          	andi	a5,a5,256
    802035bc:	c3a9                	beqz	a5,802035fe <userTrap+0x19a>
    802035be:	143025f3          	csrr	a1,stval
                cowHandler(currentProcess[hartId]->pgdir, r_stval());
    802035c2:	098e                	slli	s3,s3,0x3
    802035c4:	00156797          	auipc	a5,0x156
    802035c8:	e9478793          	addi	a5,a5,-364 # 80359458 <currentProcess>
    802035cc:	97ce                	add	a5,a5,s3
    802035ce:	639c                	ld	a5,0(a5)
    802035d0:	1307b503          	ld	a0,304(a5)
    802035d4:	ffffe097          	auipc	ra,0xffffe
    802035d8:	4d4080e7          	jalr	1236(ra) # 80201aa8 <cowHandler>
    802035dc:	b781                	j	8020351c <userTrap+0xb8>
    802035de:	143025f3          	csrr	a1,stval
                pageout(currentProcess[hartId]->pgdir, r_stval());
    802035e2:	098e                	slli	s3,s3,0x3
    802035e4:	00156797          	auipc	a5,0x156
    802035e8:	e7478793          	addi	a5,a5,-396 # 80359458 <currentProcess>
    802035ec:	97ce                	add	a5,a5,s3
    802035ee:	639c                	ld	a5,0(a5)
    802035f0:	1307b503          	ld	a0,304(a5)
    802035f4:	ffffe097          	auipc	ra,0xffffe
    802035f8:	3ca080e7          	jalr	970(ra) # 802019be <pageout>
    802035fc:	b705                	j	8020351c <userTrap+0xb8>
                panic("unknown");
    802035fe:	00006697          	auipc	a3,0x6
    80203602:	22268693          	addi	a3,a3,546 # 80209820 <__func__.0+0x270>
    80203606:	00006617          	auipc	a2,0x6
    8020360a:	25a60613          	addi	a2,a2,602 # 80209860 <__func__.0>
    8020360e:	09500593          	li	a1,149
    80203612:	00006517          	auipc	a0,0x6
    80203616:	00650513          	addi	a0,a0,6 # 80209618 <__func__.0+0x68>
    8020361a:	ffffd097          	auipc	ra,0xffffd
    8020361e:	f28080e7          	jalr	-216(ra) # 80200542 <_panic_>
            trapframeDump(trapframe);
    80203622:	00000097          	auipc	ra,0x0
    80203626:	c8e080e7          	jalr	-882(ra) # 802032b0 <trapframeDump>
    8020362a:	143025f3          	csrr	a1,stval
            pageLookup(currentProcess[hartId]->pgdir, r_stval(), &pte);
    8020362e:	098e                	slli	s3,s3,0x3
    80203630:	00156797          	auipc	a5,0x156
    80203634:	e2878793          	addi	a5,a5,-472 # 80359458 <currentProcess>
    80203638:	97ce                	add	a5,a5,s3
    8020363a:	639c                	ld	a5,0(a5)
    8020363c:	fc840613          	addi	a2,s0,-56
    80203640:	1307b503          	ld	a0,304(a5)
    80203644:	ffffe097          	auipc	ra,0xffffe
    80203648:	0ae080e7          	jalr	174(ra) # 802016f2 <pageLookup>
    8020364c:	143027f3          	csrr	a5,stval
            panic("unhandled error %d,  %lx, %lx\n", scause, r_stval(), *pte);
    80203650:	fc843703          	ld	a4,-56(s0)
    80203654:	00073803          	ld	a6,0(a4)
    80203658:	874a                	mv	a4,s2
    8020365a:	00006697          	auipc	a3,0x6
    8020365e:	18668693          	addi	a3,a3,390 # 802097e0 <__func__.0+0x230>
    80203662:	00006617          	auipc	a2,0x6
    80203666:	1fe60613          	addi	a2,a2,510 # 80209860 <__func__.0>
    8020366a:	09b00593          	li	a1,155
    8020366e:	00006517          	auipc	a0,0x6
    80203672:	faa50513          	addi	a0,a0,-86 # 80209618 <__func__.0+0x68>
    80203676:	ffffd097          	auipc	ra,0xffffd
    8020367a:	ecc080e7          	jalr	-308(ra) # 80200542 <_panic_>

000000008020367e <interruptPush>:
#include "Interrupt.h"
#include "Riscv.h"
#include "Hart.h"
#include "Driver.h"

void interruptPush(void) {
    8020367e:	1101                	addi	sp,sp,-32
    80203680:	ec06                	sd	ra,24(sp)
    80203682:	e822                	sd	s0,16(sp)
    80203684:	e426                	sd	s1,8(sp)
    80203686:	1000                	addi	s0,sp,32
#define SSTATUS_SIE (1L << 1)  // Supervisor Interrupt Enable
#define SSTATUS_UIE (1L << 0)  // User Interrupt Enable

static inline u64 r_sstatus() {
    u64 x;
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80203688:	100024f3          	csrr	s1,sstatus
    8020368c:	100027f3          	csrr	a5,sstatus
	w_sstatus(r_sstatus() | SSTATUS_SIE);
}

// disable device interrupts
static inline void intr_off() {
	w_sstatus(r_sstatus() & ~SSTATUS_SIE);
    80203690:	9bf5                	andi	a5,a5,-3
    asm volatile("csrw sstatus, %0" : : "r" (x));
    80203692:	10079073          	csrw	sstatus,a5
    int oldInterruptEnable = intr_get();
    intr_off();

    struct Hart* hart = myHart();
    80203696:	00000097          	auipc	ra,0x0
    8020369a:	2c6080e7          	jalr	710(ra) # 8020395c <myHart>
    if (hart->interruptLayer == 0)
    8020369e:	411c                	lw	a5,0(a0)
    802036a0:	e781                	bnez	a5,802036a8 <interruptPush+0x2a>
}

// are device interrupts enabled?
static inline bool intr_get() {
	u64 x = r_sstatus();
	return (x & SSTATUS_SIE) != 0;
    802036a2:	8085                	srli	s1,s1,0x1
    802036a4:	8885                	andi	s1,s1,1
        hart->lastInterruptEnable = oldInterruptEnable;
    802036a6:	c144                	sw	s1,4(a0)
    hart->interruptLayer++;
    802036a8:	2785                	addiw	a5,a5,1
    802036aa:	c11c                	sw	a5,0(a0)
}
    802036ac:	60e2                	ld	ra,24(sp)
    802036ae:	6442                	ld	s0,16(sp)
    802036b0:	64a2                	ld	s1,8(sp)
    802036b2:	6105                	addi	sp,sp,32
    802036b4:	8082                	ret

00000000802036b6 <interruptPop>:

void interruptPop(void) {
    802036b6:	1141                	addi	sp,sp,-16
    802036b8:	e406                	sd	ra,8(sp)
    802036ba:	e022                	sd	s0,0(sp)
    802036bc:	0800                	addi	s0,sp,16
    struct Hart* hart = myHart();
    802036be:	00000097          	auipc	ra,0x0
    802036c2:	29e080e7          	jalr	670(ra) # 8020395c <myHart>
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    802036c6:	100027f3          	csrr	a5,sstatus
	return (x & SSTATUS_SIE) != 0;
    802036ca:	8b89                	andi	a5,a5,2
    if (intr_get()) {
    802036cc:	e78d                	bnez	a5,802036f6 <interruptPop+0x40>
        panic("Interrupt bit still have!\n");
    }

    if (hart->interruptLayer < 0) {
    802036ce:	411c                	lw	a5,0(a0)
    802036d0:	0407c463          	bltz	a5,80203718 <interruptPop+0x62>
        panic("Interrupt close error! Not match!\n");
    }

    hart->interruptLayer--;
    802036d4:	37fd                	addiw	a5,a5,-1
    802036d6:	0007871b          	sext.w	a4,a5
    802036da:	c11c                	sw	a5,0(a0)
    if (hart->interruptLayer == 0 && hart->lastInterruptEnable)
    802036dc:	eb09                	bnez	a4,802036ee <interruptPop+0x38>
    802036de:	415c                	lw	a5,4(a0)
    802036e0:	c799                	beqz	a5,802036ee <interruptPop+0x38>
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    802036e2:	100027f3          	csrr	a5,sstatus
	w_sstatus(r_sstatus() | SSTATUS_SIE);
    802036e6:	0027e793          	ori	a5,a5,2
    asm volatile("csrw sstatus, %0" : : "r" (x));
    802036ea:	10079073          	csrw	sstatus,a5
        intr_on();
    802036ee:	60a2                	ld	ra,8(sp)
    802036f0:	6402                	ld	s0,0(sp)
    802036f2:	0141                	addi	sp,sp,16
    802036f4:	8082                	ret
        panic("Interrupt bit still have!\n");
    802036f6:	00006697          	auipc	a3,0x6
    802036fa:	17a68693          	addi	a3,a3,378 # 80209870 <__func__.0+0x10>
    802036fe:	00006617          	auipc	a2,0x6
    80203702:	1ca60613          	addi	a2,a2,458 # 802098c8 <__func__.0>
    80203706:	45cd                	li	a1,19
    80203708:	00006517          	auipc	a0,0x6
    8020370c:	18850513          	addi	a0,a0,392 # 80209890 <__func__.0+0x30>
    80203710:	ffffd097          	auipc	ra,0xffffd
    80203714:	e32080e7          	jalr	-462(ra) # 80200542 <_panic_>
        panic("Interrupt close error! Not match!\n");
    80203718:	00006697          	auipc	a3,0x6
    8020371c:	18868693          	addi	a3,a3,392 # 802098a0 <__func__.0+0x40>
    80203720:	00006617          	auipc	a2,0x6
    80203724:	1a860613          	addi	a2,a2,424 # 802098c8 <__func__.0>
    80203728:	45dd                	li	a1,23
    8020372a:	00006517          	auipc	a0,0x6
    8020372e:	16650513          	addi	a0,a0,358 # 80209890 <__func__.0+0x30>
    80203732:	ffffd097          	auipc	ra,0xffffd
    80203736:	e10080e7          	jalr	-496(ra) # 80200542 <_panic_>

000000008020373a <initsleeplock>:
int holdingsleep(struct Sleeplock* lk) {
    return 1;
}
#else

void initsleeplock(struct Sleeplock* lk, char* name) {
    8020373a:	1101                	addi	sp,sp,-32
    8020373c:	ec06                	sd	ra,24(sp)
    8020373e:	e822                	sd	s0,16(sp)
    80203740:	e426                	sd	s1,8(sp)
    80203742:	e04a                	sd	s2,0(sp)
    80203744:	1000                	addi	s0,sp,32
    80203746:	84aa                	mv	s1,a0
    80203748:	892e                	mv	s2,a1
    initLock(&lk->lk, "sleep lock");
    8020374a:	00006597          	auipc	a1,0x6
    8020374e:	18e58593          	addi	a1,a1,398 # 802098d8 <__func__.0+0x10>
    80203752:	0521                	addi	a0,a0,8
    80203754:	00000097          	auipc	ra,0x0
    80203758:	114080e7          	jalr	276(ra) # 80203868 <initLock>
    lk->name = name;
    8020375c:	0324b023          	sd	s2,32(s1)
    lk->locked = 0;
    80203760:	0004a023          	sw	zero,0(s1)
    lk->pid = 0;
    80203764:	0204a423          	sw	zero,40(s1)
}
    80203768:	60e2                	ld	ra,24(sp)
    8020376a:	6442                	ld	s0,16(sp)
    8020376c:	64a2                	ld	s1,8(sp)
    8020376e:	6902                	ld	s2,0(sp)
    80203770:	6105                	addi	sp,sp,32
    80203772:	8082                	ret

0000000080203774 <acquiresleep>:

void acquiresleep(struct Sleeplock* lk) {
    80203774:	1101                	addi	sp,sp,-32
    80203776:	ec06                	sd	ra,24(sp)
    80203778:	e822                	sd	s0,16(sp)
    8020377a:	e426                	sd	s1,8(sp)
    8020377c:	e04a                	sd	s2,0(sp)
    8020377e:	1000                	addi	s0,sp,32
    80203780:	84aa                	mv	s1,a0
    acquireLock(&lk->lk);
    80203782:	00850913          	addi	s2,a0,8
    80203786:	854a                	mv	a0,s2
    80203788:	00000097          	auipc	ra,0x0
    8020378c:	12a080e7          	jalr	298(ra) # 802038b2 <acquireLock>
    while (lk->locked) {
    80203790:	409c                	lw	a5,0(s1)
    80203792:	cb89                	beqz	a5,802037a4 <acquiresleep+0x30>
        // MSG_PRINT("in while");
        sleep(lk, &lk->lk);
    80203794:	85ca                	mv	a1,s2
    80203796:	8526                	mv	a0,s1
    80203798:	fffff097          	auipc	ra,0xfffff
    8020379c:	fa0080e7          	jalr	-96(ra) # 80202738 <sleep>
    while (lk->locked) {
    802037a0:	409c                	lw	a5,0(s1)
    802037a2:	fbed                	bnez	a5,80203794 <acquiresleep+0x20>
    }
    lk->locked = 1;
    802037a4:	4785                	li	a5,1
    802037a6:	c09c                	sw	a5,0(s1)
    lk->pid = myproc()->id;
    802037a8:	fffff097          	auipc	ra,0xfffff
    802037ac:	9c2080e7          	jalr	-1598(ra) # 8020216a <myproc>
    802037b0:	13852783          	lw	a5,312(a0)
    802037b4:	d49c                	sw	a5,40(s1)
    releaseLock(&lk->lk);
    802037b6:	854a                	mv	a0,s2
    802037b8:	00000097          	auipc	ra,0x0
    802037bc:	15e080e7          	jalr	350(ra) # 80203916 <releaseLock>
}
    802037c0:	60e2                	ld	ra,24(sp)
    802037c2:	6442                	ld	s0,16(sp)
    802037c4:	64a2                	ld	s1,8(sp)
    802037c6:	6902                	ld	s2,0(sp)
    802037c8:	6105                	addi	sp,sp,32
    802037ca:	8082                	ret

00000000802037cc <releasesleep>:

void releasesleep(struct Sleeplock* lk) {
    802037cc:	1101                	addi	sp,sp,-32
    802037ce:	ec06                	sd	ra,24(sp)
    802037d0:	e822                	sd	s0,16(sp)
    802037d2:	e426                	sd	s1,8(sp)
    802037d4:	e04a                	sd	s2,0(sp)
    802037d6:	1000                	addi	s0,sp,32
    802037d8:	84aa                	mv	s1,a0
    acquireLock(&lk->lk);
    802037da:	00850913          	addi	s2,a0,8
    802037de:	854a                	mv	a0,s2
    802037e0:	00000097          	auipc	ra,0x0
    802037e4:	0d2080e7          	jalr	210(ra) # 802038b2 <acquireLock>
    lk->locked = 0;
    802037e8:	0004a023          	sw	zero,0(s1)
    lk->pid = 0;
    802037ec:	0204a423          	sw	zero,40(s1)
    wakeup(lk);
    802037f0:	8526                	mv	a0,s1
    802037f2:	fffff097          	auipc	ra,0xfffff
    802037f6:	f70080e7          	jalr	-144(ra) # 80202762 <wakeup>
    releaseLock(&lk->lk);
    802037fa:	854a                	mv	a0,s2
    802037fc:	00000097          	auipc	ra,0x0
    80203800:	11a080e7          	jalr	282(ra) # 80203916 <releaseLock>
}
    80203804:	60e2                	ld	ra,24(sp)
    80203806:	6442                	ld	s0,16(sp)
    80203808:	64a2                	ld	s1,8(sp)
    8020380a:	6902                	ld	s2,0(sp)
    8020380c:	6105                	addi	sp,sp,32
    8020380e:	8082                	ret

0000000080203810 <holdingsleep>:

int holdingsleep(struct Sleeplock* lk) {
    80203810:	7179                	addi	sp,sp,-48
    80203812:	f406                	sd	ra,40(sp)
    80203814:	f022                	sd	s0,32(sp)
    80203816:	ec26                	sd	s1,24(sp)
    80203818:	e84a                	sd	s2,16(sp)
    8020381a:	e44e                	sd	s3,8(sp)
    8020381c:	1800                	addi	s0,sp,48
    8020381e:	84aa                	mv	s1,a0
    int r;

    acquireLock(&lk->lk);
    80203820:	00850913          	addi	s2,a0,8
    80203824:	854a                	mv	a0,s2
    80203826:	00000097          	auipc	ra,0x0
    8020382a:	08c080e7          	jalr	140(ra) # 802038b2 <acquireLock>
    r = lk->locked && (lk->pid == myproc()->id);
    8020382e:	409c                	lw	a5,0(s1)
    80203830:	ef99                	bnez	a5,8020384e <holdingsleep+0x3e>
    80203832:	4481                	li	s1,0
    releaseLock(&lk->lk);
    80203834:	854a                	mv	a0,s2
    80203836:	00000097          	auipc	ra,0x0
    8020383a:	0e0080e7          	jalr	224(ra) # 80203916 <releaseLock>
    return r;
}
    8020383e:	8526                	mv	a0,s1
    80203840:	70a2                	ld	ra,40(sp)
    80203842:	7402                	ld	s0,32(sp)
    80203844:	64e2                	ld	s1,24(sp)
    80203846:	6942                	ld	s2,16(sp)
    80203848:	69a2                	ld	s3,8(sp)
    8020384a:	6145                	addi	sp,sp,48
    8020384c:	8082                	ret
    r = lk->locked && (lk->pid == myproc()->id);
    8020384e:	0284a983          	lw	s3,40(s1)
    80203852:	fffff097          	auipc	ra,0xfffff
    80203856:	918080e7          	jalr	-1768(ra) # 8020216a <myproc>
    8020385a:	13852483          	lw	s1,312(a0)
    8020385e:	413484b3          	sub	s1,s1,s3
    80203862:	0014b493          	seqz	s1,s1
    80203866:	b7f9                	j	80203834 <holdingsleep+0x24>

0000000080203868 <initLock>:
#include "Spinlock.h"
#include "Hart.h"
#include "Interrupt.h"
#include "Driver.h"

void initLock(struct Spinlock* lock, char* name) {
    80203868:	1141                	addi	sp,sp,-16
    8020386a:	e422                	sd	s0,8(sp)
    8020386c:	0800                	addi	s0,sp,16
    lock->name = name;
    8020386e:	e50c                	sd	a1,8(a0)
    lock->locked = 0;
    80203870:	00050023          	sb	zero,0(a0)
    lock->hart = 0;
    80203874:	00053823          	sd	zero,16(a0)
    lock->times = 0;
    80203878:	00052223          	sw	zero,4(a0)
}
    8020387c:	6422                	ld	s0,8(sp)
    8020387e:	0141                	addi	sp,sp,16
    80203880:	8082                	ret

0000000080203882 <holding>:
    interruptPop();
}

int holding(struct Spinlock* lock) {
    int r;
    r = (lock->locked && lock->hart == myHart());
    80203882:	00054783          	lbu	a5,0(a0)
    80203886:	e399                	bnez	a5,8020388c <holding+0xa>
    80203888:	4501                	li	a0,0
    return r;
    8020388a:	8082                	ret
int holding(struct Spinlock* lock) {
    8020388c:	1101                	addi	sp,sp,-32
    8020388e:	ec06                	sd	ra,24(sp)
    80203890:	e822                	sd	s0,16(sp)
    80203892:	e426                	sd	s1,8(sp)
    80203894:	1000                	addi	s0,sp,32
    r = (lock->locked && lock->hart == myHart());
    80203896:	6904                	ld	s1,16(a0)
    80203898:	00000097          	auipc	ra,0x0
    8020389c:	0c4080e7          	jalr	196(ra) # 8020395c <myHart>
    802038a0:	40a48533          	sub	a0,s1,a0
    802038a4:	00153513          	seqz	a0,a0
    802038a8:	60e2                	ld	ra,24(sp)
    802038aa:	6442                	ld	s0,16(sp)
    802038ac:	64a2                	ld	s1,8(sp)
    802038ae:	6105                	addi	sp,sp,32
    802038b0:	8082                	ret

00000000802038b2 <acquireLock>:
void acquireLock(struct Spinlock* lock) {
    802038b2:	1101                	addi	sp,sp,-32
    802038b4:	ec06                	sd	ra,24(sp)
    802038b6:	e822                	sd	s0,16(sp)
    802038b8:	e426                	sd	s1,8(sp)
    802038ba:	1000                	addi	s0,sp,32
    802038bc:	84aa                	mv	s1,a0
    interruptPush();
    802038be:	00000097          	auipc	ra,0x0
    802038c2:	dc0080e7          	jalr	-576(ra) # 8020367e <interruptPush>
    if (holding(lock)) {
    802038c6:	8526                	mv	a0,s1
    802038c8:	00000097          	auipc	ra,0x0
    802038cc:	fba080e7          	jalr	-70(ra) # 80203882 <holding>
    802038d0:	e121                	bnez	a0,80203910 <acquireLock+0x5e>
    while(__sync_lock_test_and_set(&lock->locked, 1) != 0);
    802038d2:	ffc4f713          	andi	a4,s1,-4
    802038d6:	0034f693          	andi	a3,s1,3
    802038da:	0036969b          	slliw	a3,a3,0x3
    802038de:	4605                	li	a2,1
    802038e0:	00d6163b          	sllw	a2,a2,a3
    802038e4:	44c727af          	amoor.w.aq	a5,a2,(a4)
    802038e8:	00d7d7bb          	srlw	a5,a5,a3
    802038ec:	0ff7f793          	zext.b	a5,a5
    802038f0:	fbf5                	bnez	a5,802038e4 <acquireLock+0x32>
    __sync_synchronize();
    802038f2:	0ff0000f          	fence
    lock->hart = myHart();
    802038f6:	00000097          	auipc	ra,0x0
    802038fa:	066080e7          	jalr	102(ra) # 8020395c <myHart>
    802038fe:	e888                	sd	a0,16(s1)
    lock->times++;
    80203900:	40dc                	lw	a5,4(s1)
    80203902:	2785                	addiw	a5,a5,1
        lock->times++;
    80203904:	c0dc                	sw	a5,4(s1)
}
    80203906:	60e2                	ld	ra,24(sp)
    80203908:	6442                	ld	s0,16(sp)
    8020390a:	64a2                	ld	s1,8(sp)
    8020390c:	6105                	addi	sp,sp,32
    8020390e:	8082                	ret
        lock->times++;
    80203910:	40dc                	lw	a5,4(s1)
    80203912:	2785                	addiw	a5,a5,1
        return;
    80203914:	bfc5                	j	80203904 <acquireLock+0x52>

0000000080203916 <releaseLock>:
void releaseLock(struct Spinlock* lock) {
    80203916:	1101                	addi	sp,sp,-32
    80203918:	ec06                	sd	ra,24(sp)
    8020391a:	e822                	sd	s0,16(sp)
    8020391c:	e426                	sd	s1,8(sp)
    8020391e:	1000                	addi	s0,sp,32
    80203920:	84aa                	mv	s1,a0
    if (!holding(lock)) {
    80203922:	00000097          	auipc	ra,0x0
    80203926:	f60080e7          	jalr	-160(ra) # 80203882 <holding>
    lock->times--;
    8020392a:	40dc                	lw	a5,4(s1)
    8020392c:	37fd                	addiw	a5,a5,-1
    8020392e:	0007871b          	sext.w	a4,a5
    80203932:	c0dc                	sw	a5,4(s1)
    if (lock->times > 0)
    80203934:	00e05763          	blez	a4,80203942 <releaseLock+0x2c>
}
    80203938:	60e2                	ld	ra,24(sp)
    8020393a:	6442                	ld	s0,16(sp)
    8020393c:	64a2                	ld	s1,8(sp)
    8020393e:	6105                	addi	sp,sp,32
    80203940:	8082                	ret
    lock->hart = 0;
    80203942:	0004b823          	sd	zero,16(s1)
    __sync_synchronize();
    80203946:	0ff0000f          	fence
    __sync_lock_release(&lock->locked);
    8020394a:	0ff0000f          	fence
    8020394e:	00048023          	sb	zero,0(s1)
    interruptPop();
    80203952:	00000097          	auipc	ra,0x0
    80203956:	d64080e7          	jalr	-668(ra) # 802036b6 <interruptPop>
    8020395a:	bff9                	j	80203938 <releaseLock+0x22>

000000008020395c <myHart>:
#include "Process.h"
#include "MemoryConfig.h"

struct Hart harts[HART_TOTAL_NUMBER];

inline struct Hart* myHart() {
    8020395c:	1141                	addi	sp,sp,-16
    8020395e:	e422                	sd	s0,8(sp)
    80203960:	0800                	addi	s0,sp,16
#define HART_TOTAL_NUMBER 5

// which hart (core) is this?
static inline u64 r_hartid() {
    u64 x;
    asm volatile("mv %0, tp" : "=r" (x) );
    80203962:	8792                	mv	a5,tp
    int r = r_hartid();
    return &harts[r];
    80203964:	2781                	sext.w	a5,a5
    80203966:	078e                	slli	a5,a5,0x3
}
    80203968:	001d4517          	auipc	a0,0x1d4
    8020396c:	bb850513          	addi	a0,a0,-1096 # 803d7520 <harts>
    80203970:	953e                	add	a0,a0,a5
    80203972:	6422                	ld	s0,8(sp)
    80203974:	0141                	addi	sp,sp,16
    80203976:	8082                	ret

0000000080203978 <getHartTrapFrame>:

Trapframe* getHartTrapFrame() {
    80203978:	1141                	addi	sp,sp,-16
    8020397a:	e422                	sd	s0,8(sp)
    8020397c:	0800                	addi	s0,sp,16
    8020397e:	8792                	mv	a5,tp
    return (Trapframe*)(TRAMPOLINE_BASE + PAGE_SIZE + r_hartid() * sizeof(Trapframe)); 
    80203980:	00379513          	slli	a0,a5,0x3
    80203984:	953e                	add	a0,a0,a5
    80203986:	0516                	slli	a0,a0,0x5
    80203988:	040007b7          	lui	a5,0x4000
}
    8020398c:	17fd                	addi	a5,a5,-1
    8020398e:	07b2                	slli	a5,a5,0xc
    80203990:	953e                	add	a0,a0,a5
    80203992:	6422                	ld	s0,8(sp)
    80203994:	0141                	addi	sp,sp,16
    80203996:	8082                	ret

0000000080203998 <getHartKernelTopSp>:

u64 getHartKernelTopSp() {
    80203998:	1141                	addi	sp,sp,-16
    8020399a:	e422                	sd	s0,8(sp)
    8020399c:	0800                	addi	s0,sp,16
    8020399e:	8792                	mv	a5,tp
    extern char kernelStack[];
    return (u64)kernelStack + KERNEL_STACK_SIZE * (r_hartid() + 1);
    802039a0:	0785                	addi	a5,a5,1
    802039a2:	07c2                	slli	a5,a5,0x10
    802039a4:	00043517          	auipc	a0,0x43
    802039a8:	65c50513          	addi	a0,a0,1628 # 80247000 <_stack>
    802039ac:	953e                	add	a0,a0,a5
    802039ae:	6422                	ld	s0,8(sp)
    802039b0:	0141                	addi	sp,sp,16
    802039b2:	8082                	ret

00000000802039b4 <memset>:
#include "Type.h"

void* memset(void* dst, int c, uint n) {
    802039b4:	1141                	addi	sp,sp,-16
    802039b6:	e422                	sd	s0,8(sp)
    802039b8:	0800                	addi	s0,sp,16
    char* cdst = (char*)dst;
    int i;
    for (i = 0; i < n; i++) {
    802039ba:	ca19                	beqz	a2,802039d0 <memset+0x1c>
    802039bc:	87aa                	mv	a5,a0
    802039be:	1602                	slli	a2,a2,0x20
    802039c0:	9201                	srli	a2,a2,0x20
    802039c2:	00a60733          	add	a4,a2,a0
        cdst[i] = c;
    802039c6:	00b78023          	sb	a1,0(a5) # 4000000 <_start-0x7c200000>
    for (i = 0; i < n; i++) {
    802039ca:	0785                	addi	a5,a5,1
    802039cc:	fee79de3          	bne	a5,a4,802039c6 <memset+0x12>
    }
    return dst;
}
    802039d0:	6422                	ld	s0,8(sp)
    802039d2:	0141                	addi	sp,sp,16
    802039d4:	8082                	ret

00000000802039d6 <memcmp>:

int memcmp(const void* v1, const void* v2, uint n) {
    802039d6:	1141                	addi	sp,sp,-16
    802039d8:	e422                	sd	s0,8(sp)
    802039da:	0800                	addi	s0,sp,16
    const uchar *s1, *s2;

    s1 = v1;
    s2 = v2;
    while (n-- > 0) {
    802039dc:	ca05                	beqz	a2,80203a0c <memcmp+0x36>
    802039de:	fff6069b          	addiw	a3,a2,-1
    802039e2:	1682                	slli	a3,a3,0x20
    802039e4:	9281                	srli	a3,a3,0x20
    802039e6:	0685                	addi	a3,a3,1
    802039e8:	96aa                	add	a3,a3,a0
        if (*s1 != *s2)
    802039ea:	00054783          	lbu	a5,0(a0)
    802039ee:	0005c703          	lbu	a4,0(a1)
    802039f2:	00e79863          	bne	a5,a4,80203a02 <memcmp+0x2c>
            return *s1 - *s2;
        s1++, s2++;
    802039f6:	0505                	addi	a0,a0,1
    802039f8:	0585                	addi	a1,a1,1
    while (n-- > 0) {
    802039fa:	fed518e3          	bne	a0,a3,802039ea <memcmp+0x14>
    }

    return 0;
    802039fe:	4501                	li	a0,0
    80203a00:	a019                	j	80203a06 <memcmp+0x30>
            return *s1 - *s2;
    80203a02:	40e7853b          	subw	a0,a5,a4
}
    80203a06:	6422                	ld	s0,8(sp)
    80203a08:	0141                	addi	sp,sp,16
    80203a0a:	8082                	ret
    return 0;
    80203a0c:	4501                	li	a0,0
    80203a0e:	bfe5                	j	80203a06 <memcmp+0x30>

0000000080203a10 <memmove>:

void* memmove(void* dst, const void* src, uint n) {
    80203a10:	1141                	addi	sp,sp,-16
    80203a12:	e422                	sd	s0,8(sp)
    80203a14:	0800                	addi	s0,sp,16
    const char* s;
    char* d;

    if (n == 0)
    80203a16:	c205                	beqz	a2,80203a36 <memmove+0x26>
        return dst;

    s = src;
    d = dst;
    if (s < d && s + n > d) {
    80203a18:	02a5e263          	bltu	a1,a0,80203a3c <memmove+0x2c>
        s += n;
        d += n;
        while (n-- > 0)
            *--d = *--s;
    } else
        while (n-- > 0)
    80203a1c:	1602                	slli	a2,a2,0x20
    80203a1e:	9201                	srli	a2,a2,0x20
    80203a20:	00c587b3          	add	a5,a1,a2
void* memmove(void* dst, const void* src, uint n) {
    80203a24:	872a                	mv	a4,a0
            *d++ = *s++;
    80203a26:	0585                	addi	a1,a1,1
    80203a28:	0705                	addi	a4,a4,1
    80203a2a:	fff5c683          	lbu	a3,-1(a1)
    80203a2e:	fed70fa3          	sb	a3,-1(a4)
        while (n-- > 0)
    80203a32:	fef59ae3          	bne	a1,a5,80203a26 <memmove+0x16>

    return dst;
}
    80203a36:	6422                	ld	s0,8(sp)
    80203a38:	0141                	addi	sp,sp,16
    80203a3a:	8082                	ret
    if (s < d && s + n > d) {
    80203a3c:	02061693          	slli	a3,a2,0x20
    80203a40:	9281                	srli	a3,a3,0x20
    80203a42:	00d58733          	add	a4,a1,a3
    80203a46:	fce57be3          	bgeu	a0,a4,80203a1c <memmove+0xc>
        d += n;
    80203a4a:	96aa                	add	a3,a3,a0
        while (n-- > 0)
    80203a4c:	fff6079b          	addiw	a5,a2,-1
    80203a50:	1782                	slli	a5,a5,0x20
    80203a52:	9381                	srli	a5,a5,0x20
    80203a54:	fff7c793          	not	a5,a5
    80203a58:	97ba                	add	a5,a5,a4
            *--d = *--s;
    80203a5a:	177d                	addi	a4,a4,-1
    80203a5c:	16fd                	addi	a3,a3,-1
    80203a5e:	00074603          	lbu	a2,0(a4)
    80203a62:	00c68023          	sb	a2,0(a3)
        while (n-- > 0)
    80203a66:	fee79ae3          	bne	a5,a4,80203a5a <memmove+0x4a>
    80203a6a:	b7f1                	j	80203a36 <memmove+0x26>

0000000080203a6c <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void* memcpy(void* dst, const void* src, uint n) {
    80203a6c:	1141                	addi	sp,sp,-16
    80203a6e:	e406                	sd	ra,8(sp)
    80203a70:	e022                	sd	s0,0(sp)
    80203a72:	0800                	addi	s0,sp,16
    return memmove(dst, src, n);
    80203a74:	00000097          	auipc	ra,0x0
    80203a78:	f9c080e7          	jalr	-100(ra) # 80203a10 <memmove>
}
    80203a7c:	60a2                	ld	ra,8(sp)
    80203a7e:	6402                	ld	s0,0(sp)
    80203a80:	0141                	addi	sp,sp,16
    80203a82:	8082                	ret

0000000080203a84 <strncmp>:

int strncmp(const char* p, const char* q, uint n) {
    80203a84:	1141                	addi	sp,sp,-16
    80203a86:	e422                	sd	s0,8(sp)
    80203a88:	0800                	addi	s0,sp,16
    while (n > 0 && *p && *p == *q)
    80203a8a:	ce11                	beqz	a2,80203aa6 <strncmp+0x22>
    80203a8c:	00054783          	lbu	a5,0(a0)
    80203a90:	cf89                	beqz	a5,80203aaa <strncmp+0x26>
    80203a92:	0005c703          	lbu	a4,0(a1)
    80203a96:	00f71a63          	bne	a4,a5,80203aaa <strncmp+0x26>
        n--, p++, q++;
    80203a9a:	367d                	addiw	a2,a2,-1
    80203a9c:	0505                	addi	a0,a0,1
    80203a9e:	0585                	addi	a1,a1,1
    while (n > 0 && *p && *p == *q)
    80203aa0:	f675                	bnez	a2,80203a8c <strncmp+0x8>
    if (n == 0)
        return 0;
    80203aa2:	4501                	li	a0,0
    80203aa4:	a809                	j	80203ab6 <strncmp+0x32>
    80203aa6:	4501                	li	a0,0
    80203aa8:	a039                	j	80203ab6 <strncmp+0x32>
    if (n == 0)
    80203aaa:	ca09                	beqz	a2,80203abc <strncmp+0x38>
    return (uchar)*p - (uchar)*q;
    80203aac:	00054503          	lbu	a0,0(a0)
    80203ab0:	0005c783          	lbu	a5,0(a1)
    80203ab4:	9d1d                	subw	a0,a0,a5
}
    80203ab6:	6422                	ld	s0,8(sp)
    80203ab8:	0141                	addi	sp,sp,16
    80203aba:	8082                	ret
        return 0;
    80203abc:	4501                	li	a0,0
    80203abe:	bfe5                	j	80203ab6 <strncmp+0x32>

0000000080203ac0 <strncpy>:

char* strncpy(char* s, const char* t, int n) {
    80203ac0:	1141                	addi	sp,sp,-16
    80203ac2:	e422                	sd	s0,8(sp)
    80203ac4:	0800                	addi	s0,sp,16
    char* os;

    os = s;
    while (n-- > 0 && (*s++ = *t++) != 0)
    80203ac6:	872a                	mv	a4,a0
    80203ac8:	8832                	mv	a6,a2
    80203aca:	367d                	addiw	a2,a2,-1
    80203acc:	01005963          	blez	a6,80203ade <strncpy+0x1e>
    80203ad0:	0705                	addi	a4,a4,1
    80203ad2:	0005c783          	lbu	a5,0(a1)
    80203ad6:	fef70fa3          	sb	a5,-1(a4)
    80203ada:	0585                	addi	a1,a1,1
    80203adc:	f7f5                	bnez	a5,80203ac8 <strncpy+0x8>
        ;
    while (n-- > 0)
    80203ade:	86ba                	mv	a3,a4
    80203ae0:	00c05c63          	blez	a2,80203af8 <strncpy+0x38>
        *s++ = 0;
    80203ae4:	0685                	addi	a3,a3,1
    80203ae6:	fe068fa3          	sb	zero,-1(a3)
    while (n-- > 0)
    80203aea:	40d707bb          	subw	a5,a4,a3
    80203aee:	37fd                	addiw	a5,a5,-1
    80203af0:	010787bb          	addw	a5,a5,a6
    80203af4:	fef048e3          	bgtz	a5,80203ae4 <strncpy+0x24>
    return os;
}
    80203af8:	6422                	ld	s0,8(sp)
    80203afa:	0141                	addi	sp,sp,16
    80203afc:	8082                	ret

0000000080203afe <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char* safestrcpy(char* s, const char* t, int n) {
    80203afe:	1141                	addi	sp,sp,-16
    80203b00:	e422                	sd	s0,8(sp)
    80203b02:	0800                	addi	s0,sp,16
    char* os;

    os = s;
    if (n <= 0)
    80203b04:	02c05363          	blez	a2,80203b2a <safestrcpy+0x2c>
    80203b08:	fff6069b          	addiw	a3,a2,-1
    80203b0c:	1682                	slli	a3,a3,0x20
    80203b0e:	9281                	srli	a3,a3,0x20
    80203b10:	96ae                	add	a3,a3,a1
    80203b12:	87aa                	mv	a5,a0
        return os;
    while (--n > 0 && (*s++ = *t++) != 0)
    80203b14:	00d58963          	beq	a1,a3,80203b26 <safestrcpy+0x28>
    80203b18:	0585                	addi	a1,a1,1
    80203b1a:	0785                	addi	a5,a5,1
    80203b1c:	fff5c703          	lbu	a4,-1(a1)
    80203b20:	fee78fa3          	sb	a4,-1(a5)
    80203b24:	fb65                	bnez	a4,80203b14 <safestrcpy+0x16>
        ;
    *s = 0;
    80203b26:	00078023          	sb	zero,0(a5)
    return os;
}
    80203b2a:	6422                	ld	s0,8(sp)
    80203b2c:	0141                	addi	sp,sp,16
    80203b2e:	8082                	ret

0000000080203b30 <strlen>:

int strlen(const char* s) {
    80203b30:	1141                	addi	sp,sp,-16
    80203b32:	e422                	sd	s0,8(sp)
    80203b34:	0800                	addi	s0,sp,16
    int n;

    for (n = 0; s[n]; n++)
    80203b36:	00054783          	lbu	a5,0(a0)
    80203b3a:	cf91                	beqz	a5,80203b56 <strlen+0x26>
    80203b3c:	0505                	addi	a0,a0,1
    80203b3e:	87aa                	mv	a5,a0
    80203b40:	4685                	li	a3,1
    80203b42:	9e89                	subw	a3,a3,a0
    80203b44:	00f6853b          	addw	a0,a3,a5
    80203b48:	0785                	addi	a5,a5,1
    80203b4a:	fff7c703          	lbu	a4,-1(a5)
    80203b4e:	fb7d                	bnez	a4,80203b44 <strlen+0x14>
        ;
    return n;
}
    80203b50:	6422                	ld	s0,8(sp)
    80203b52:	0141                	addi	sp,sp,16
    80203b54:	8082                	ret
    for (n = 0; s[n]; n++)
    80203b56:	4501                	li	a0,0
    80203b58:	bfe5                	j	80203b50 <strlen+0x20>

0000000080203b5a <strchr>:

char* strchr(const char* s, char c) {
    80203b5a:	1141                	addi	sp,sp,-16
    80203b5c:	e422                	sd	s0,8(sp)
    80203b5e:	0800                	addi	s0,sp,16
    for (; *s; s++)
    80203b60:	00054783          	lbu	a5,0(a0)
    80203b64:	cb99                	beqz	a5,80203b7a <strchr+0x20>
        if (*s == c)
    80203b66:	00f58763          	beq	a1,a5,80203b74 <strchr+0x1a>
    for (; *s; s++)
    80203b6a:	0505                	addi	a0,a0,1
    80203b6c:	00054783          	lbu	a5,0(a0)
    80203b70:	fbfd                	bnez	a5,80203b66 <strchr+0xc>
            return (char*)s;
    return 0;
    80203b72:	4501                	li	a0,0
}
    80203b74:	6422                	ld	s0,8(sp)
    80203b76:	0141                	addi	sp,sp,16
    80203b78:	8082                	ret
    return 0;
    80203b7a:	4501                	li	a0,0
    80203b7c:	bfe5                	j	80203b74 <strchr+0x1a>

0000000080203b7e <snstr>:

// convert wide char string into uchar string
void snstr(char* dst, wchar const* src, int len) {
    80203b7e:	1141                	addi	sp,sp,-16
    80203b80:	e422                	sd	s0,8(sp)
    80203b82:	0800                	addi	s0,sp,16
    while (len-- && *src) {
    80203b84:	fff6071b          	addiw	a4,a2,-1
    80203b88:	02061693          	slli	a3,a2,0x20
    80203b8c:	9281                	srli	a3,a3,0x20
    80203b8e:	96aa                	add	a3,a3,a0
    80203b90:	c61d                	beqz	a2,80203bbe <snstr+0x40>
    80203b92:	0005d783          	lhu	a5,0(a1)
    80203b96:	cb89                	beqz	a5,80203ba8 <snstr+0x2a>
        *dst++ = (uchar)(*src & 0xff);
    80203b98:	0505                	addi	a0,a0,1
    80203b9a:	fef50fa3          	sb	a5,-1(a0)
        src++;
    80203b9e:	0589                	addi	a1,a1,2
    while (len-- && *src) {
    80203ba0:	377d                	addiw	a4,a4,-1
    80203ba2:	fed518e3          	bne	a0,a3,80203b92 <snstr+0x14>
        *dst++ = (uchar)(*src & 0xff);
    80203ba6:	8536                	mv	a0,a3
    }
    while (len-- > 0)
    80203ba8:	02071793          	slli	a5,a4,0x20
    80203bac:	9381                	srli	a5,a5,0x20
    80203bae:	97aa                	add	a5,a5,a0
    80203bb0:	00e05763          	blez	a4,80203bbe <snstr+0x40>
        *dst++ = 0;
    80203bb4:	0505                	addi	a0,a0,1
    80203bb6:	fe050fa3          	sb	zero,-1(a0)
    while (len-- > 0)
    80203bba:	fea79de3          	bne	a5,a0,80203bb4 <snstr+0x36>
    80203bbe:	6422                	ld	s0,8(sp)
    80203bc0:	0141                	addi	sp,sp,16
    80203bc2:	8082                	ret

0000000080203bc4 <binit>:
    // Sorted by how recently the buffer was used.
    // head.next is most recent, head.prev is least.
    struct buf head;
} bcache;

void binit(void) {
    80203bc4:	7179                	addi	sp,sp,-48
    80203bc6:	f406                	sd	ra,40(sp)
    80203bc8:	f022                	sd	s0,32(sp)
    80203bca:	ec26                	sd	s1,24(sp)
    80203bcc:	e84a                	sd	s2,16(sp)
    80203bce:	e44e                	sd	s3,8(sp)
    80203bd0:	e052                	sd	s4,0(sp)
    80203bd2:	1800                	addi	s0,sp,48
    struct buf* b;

    initLock(&bcache.lock, "bcache");
    80203bd4:	00006597          	auipc	a1,0x6
    80203bd8:	d1458593          	addi	a1,a1,-748 # 802098e8 <__func__.0+0x20>
    80203bdc:	001d4517          	auipc	a0,0x1d4
    80203be0:	96c50513          	addi	a0,a0,-1684 # 803d7548 <bcache>
    80203be4:	00000097          	auipc	ra,0x0
    80203be8:	c84080e7          	jalr	-892(ra) # 80203868 <initLock>

    // Create linked list of buffers
    bcache.head.prev = &bcache.head;
    80203bec:	001e7797          	auipc	a5,0x1e7
    80203bf0:	95c78793          	addi	a5,a5,-1700 # 803ea548 <ecache>
    80203bf4:	001e6717          	auipc	a4,0x1e6
    80203bf8:	56c70713          	addi	a4,a4,1388 # 803ea160 <bcache+0x12c18>
    80203bfc:	c6e7b023          	sd	a4,-928(a5)
    bcache.head.next = &bcache.head;
    80203c00:	c6e7b423          	sd	a4,-920(a5)
    for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
    80203c04:	001d4497          	auipc	s1,0x1d4
    80203c08:	95c48493          	addi	s1,s1,-1700 # 803d7560 <bcache+0x18>
        b->next = bcache.head.next;
    80203c0c:	893e                	mv	s2,a5
        b->prev = &bcache.head;
    80203c0e:	89ba                	mv	s3,a4
        initsleeplock(&b->lock, "buffer");
    80203c10:	00006a17          	auipc	s4,0x6
    80203c14:	ce0a0a13          	addi	s4,s4,-800 # 802098f0 <__func__.0+0x28>
        b->next = bcache.head.next;
    80203c18:	c6893783          	ld	a5,-920(s2) # 1fffc68 <_start-0x7e200398>
    80203c1c:	e8bc                	sd	a5,80(s1)
        b->prev = &bcache.head;
    80203c1e:	0534b423          	sd	s3,72(s1)
        initsleeplock(&b->lock, "buffer");
    80203c22:	85d2                	mv	a1,s4
    80203c24:	01048513          	addi	a0,s1,16
    80203c28:	00000097          	auipc	ra,0x0
    80203c2c:	b12080e7          	jalr	-1262(ra) # 8020373a <initsleeplock>
        bcache.head.next->prev = b;
    80203c30:	c6893783          	ld	a5,-920(s2)
    80203c34:	e7a4                	sd	s1,72(a5)
        bcache.head.next = b;
    80203c36:	c6993423          	sd	s1,-920(s2)
    for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
    80203c3a:	25848493          	addi	s1,s1,600
    80203c3e:	fd349de3          	bne	s1,s3,80203c18 <binit+0x54>
    }
}
    80203c42:	70a2                	ld	ra,40(sp)
    80203c44:	7402                	ld	s0,32(sp)
    80203c46:	64e2                	ld	s1,24(sp)
    80203c48:	6942                	ld	s2,16(sp)
    80203c4a:	69a2                	ld	s3,8(sp)
    80203c4c:	6a02                	ld	s4,0(sp)
    80203c4e:	6145                	addi	sp,sp,48
    80203c50:	8082                	ret

0000000080203c52 <bread>:
    }
    panic("bget: no buffers");
}

// Return a locked buf with the contents of the indicated block.
struct buf* bread(uint dev, uint blockno) {
    80203c52:	7179                	addi	sp,sp,-48
    80203c54:	f406                	sd	ra,40(sp)
    80203c56:	f022                	sd	s0,32(sp)
    80203c58:	ec26                	sd	s1,24(sp)
    80203c5a:	e84a                	sd	s2,16(sp)
    80203c5c:	e44e                	sd	s3,8(sp)
    80203c5e:	1800                	addi	s0,sp,48
    80203c60:	892a                	mv	s2,a0
    80203c62:	89ae                	mv	s3,a1
    acquireLock(&bcache.lock);
    80203c64:	001d4517          	auipc	a0,0x1d4
    80203c68:	8e450513          	addi	a0,a0,-1820 # 803d7548 <bcache>
    80203c6c:	00000097          	auipc	ra,0x0
    80203c70:	c46080e7          	jalr	-954(ra) # 802038b2 <acquireLock>
    for (b = bcache.head.next; b != &bcache.head; b = b->next) {
    80203c74:	001e6497          	auipc	s1,0x1e6
    80203c78:	53c4b483          	ld	s1,1340(s1) # 803ea1b0 <bcache+0x12c68>
    80203c7c:	001e6797          	auipc	a5,0x1e6
    80203c80:	4e478793          	addi	a5,a5,1252 # 803ea160 <bcache+0x12c18>
    80203c84:	02f48f63          	beq	s1,a5,80203cc2 <bread+0x70>
    80203c88:	873e                	mv	a4,a5
    80203c8a:	a021                	j	80203c92 <bread+0x40>
    80203c8c:	68a4                	ld	s1,80(s1)
    80203c8e:	02e48a63          	beq	s1,a4,80203cc2 <bread+0x70>
        if (b->dev == dev && b->blockno == blockno) {
    80203c92:	449c                	lw	a5,8(s1)
    80203c94:	ff279ce3          	bne	a5,s2,80203c8c <bread+0x3a>
    80203c98:	44dc                	lw	a5,12(s1)
    80203c9a:	ff3799e3          	bne	a5,s3,80203c8c <bread+0x3a>
            b->refcnt++;
    80203c9e:	40bc                	lw	a5,64(s1)
    80203ca0:	2785                	addiw	a5,a5,1
    80203ca2:	c0bc                	sw	a5,64(s1)
            releaseLock(&bcache.lock);
    80203ca4:	001d4517          	auipc	a0,0x1d4
    80203ca8:	8a450513          	addi	a0,a0,-1884 # 803d7548 <bcache>
    80203cac:	00000097          	auipc	ra,0x0
    80203cb0:	c6a080e7          	jalr	-918(ra) # 80203916 <releaseLock>
            acquiresleep(&b->lock);
    80203cb4:	01048513          	addi	a0,s1,16
    80203cb8:	00000097          	auipc	ra,0x0
    80203cbc:	abc080e7          	jalr	-1348(ra) # 80203774 <acquiresleep>
            return b;
    80203cc0:	a88d                	j	80203d32 <bread+0xe0>
    for (b = bcache.head.prev; b != &bcache.head; b = b->prev) {
    80203cc2:	001e6497          	auipc	s1,0x1e6
    80203cc6:	4e64b483          	ld	s1,1254(s1) # 803ea1a8 <bcache+0x12c60>
    80203cca:	001e6797          	auipc	a5,0x1e6
    80203cce:	49678793          	addi	a5,a5,1174 # 803ea160 <bcache+0x12c18>
    80203cd2:	00f48863          	beq	s1,a5,80203ce2 <bread+0x90>
    80203cd6:	873e                	mv	a4,a5
        if (b->refcnt == 0) {
    80203cd8:	40bc                	lw	a5,64(s1)
    80203cda:	c795                	beqz	a5,80203d06 <bread+0xb4>
    for (b = bcache.head.prev; b != &bcache.head; b = b->prev) {
    80203cdc:	64a4                	ld	s1,72(s1)
    80203cde:	fee49de3          	bne	s1,a4,80203cd8 <bread+0x86>
    panic("bget: no buffers");
    80203ce2:	00006697          	auipc	a3,0x6
    80203ce6:	c1668693          	addi	a3,a3,-1002 # 802098f8 <__func__.0+0x30>
    80203cea:	00006617          	auipc	a2,0x6
    80203cee:	f7e60613          	addi	a2,a2,-130 # 80209c68 <__func__.2>
    80203cf2:	05500593          	li	a1,85
    80203cf6:	00006517          	auipc	a0,0x6
    80203cfa:	c1a50513          	addi	a0,a0,-998 # 80209910 <__func__.0+0x48>
    80203cfe:	ffffd097          	auipc	ra,0xffffd
    80203d02:	844080e7          	jalr	-1980(ra) # 80200542 <_panic_>
            b->dev = dev;
    80203d06:	0124a423          	sw	s2,8(s1)
            b->blockno = blockno;
    80203d0a:	0134a623          	sw	s3,12(s1)
            b->valid = 0;
    80203d0e:	0004a023          	sw	zero,0(s1)
            b->refcnt = 1;
    80203d12:	4785                	li	a5,1
    80203d14:	c0bc                	sw	a5,64(s1)
            releaseLock(&bcache.lock);
    80203d16:	001d4517          	auipc	a0,0x1d4
    80203d1a:	83250513          	addi	a0,a0,-1998 # 803d7548 <bcache>
    80203d1e:	00000097          	auipc	ra,0x0
    80203d22:	bf8080e7          	jalr	-1032(ra) # 80203916 <releaseLock>
            acquiresleep(&b->lock);
    80203d26:	01048513          	addi	a0,s1,16
    80203d2a:	00000097          	auipc	ra,0x0
    80203d2e:	a4a080e7          	jalr	-1462(ra) # 80203774 <acquiresleep>
    struct buf* b;
    b = bget(dev, blockno);
    if (!b->valid) {
    80203d32:	409c                	lw	a5,0(s1)
    80203d34:	cb89                	beqz	a5,80203d46 <bread+0xf4>
        sdRead(b->data, b->blockno, 1);
        b->valid = 1;
    }
    return b;
}
    80203d36:	8526                	mv	a0,s1
    80203d38:	70a2                	ld	ra,40(sp)
    80203d3a:	7402                	ld	s0,32(sp)
    80203d3c:	64e2                	ld	s1,24(sp)
    80203d3e:	6942                	ld	s2,16(sp)
    80203d40:	69a2                	ld	s3,8(sp)
    80203d42:	6145                	addi	sp,sp,48
    80203d44:	8082                	ret
        sdRead(b->data, b->blockno, 1);
    80203d46:	4605                	li	a2,1
    80203d48:	00c4e583          	lwu	a1,12(s1)
    80203d4c:	05848513          	addi	a0,s1,88
    80203d50:	ffffd097          	auipc	ra,0xffffd
    80203d54:	9a2080e7          	jalr	-1630(ra) # 802006f2 <sdRead>
        b->valid = 1;
    80203d58:	4785                	li	a5,1
    80203d5a:	c09c                	sw	a5,0(s1)
    return b;
    80203d5c:	bfe9                	j	80203d36 <bread+0xe4>

0000000080203d5e <bwrite>:

// Write b's contents to disk.  Must be locked.
void bwrite(struct buf* b) {
    80203d5e:	1101                	addi	sp,sp,-32
    80203d60:	ec06                	sd	ra,24(sp)
    80203d62:	e822                	sd	s0,16(sp)
    80203d64:	e426                	sd	s1,8(sp)
    80203d66:	1000                	addi	s0,sp,32
    80203d68:	84aa                	mv	s1,a0
    if (!holdingsleep(&b->lock))
    80203d6a:	0541                	addi	a0,a0,16
    80203d6c:	00000097          	auipc	ra,0x0
    80203d70:	aa4080e7          	jalr	-1372(ra) # 80203810 <holdingsleep>
    80203d74:	cd19                	beqz	a0,80203d92 <bwrite+0x34>
        panic("bwrite");
    sdWrite(b->data, b->blockno, 1);
    80203d76:	4605                	li	a2,1
    80203d78:	00c4e583          	lwu	a1,12(s1)
    80203d7c:	05848513          	addi	a0,s1,88
    80203d80:	ffffd097          	auipc	ra,0xffffd
    80203d84:	bb4080e7          	jalr	-1100(ra) # 80200934 <sdWrite>
}
    80203d88:	60e2                	ld	ra,24(sp)
    80203d8a:	6442                	ld	s0,16(sp)
    80203d8c:	64a2                	ld	s1,8(sp)
    80203d8e:	6105                	addi	sp,sp,32
    80203d90:	8082                	ret
        panic("bwrite");
    80203d92:	00006697          	auipc	a3,0x6
    80203d96:	b8668693          	addi	a3,a3,-1146 # 80209918 <__func__.0+0x50>
    80203d9a:	00006617          	auipc	a2,0x6
    80203d9e:	ec660613          	addi	a2,a2,-314 # 80209c60 <__func__.1>
    80203da2:	06600593          	li	a1,102
    80203da6:	00006517          	auipc	a0,0x6
    80203daa:	b6a50513          	addi	a0,a0,-1174 # 80209910 <__func__.0+0x48>
    80203dae:	ffffc097          	auipc	ra,0xffffc
    80203db2:	794080e7          	jalr	1940(ra) # 80200542 <_panic_>

0000000080203db6 <brelse>:

// Release a locked buffer.
// Move to the head of the most-recently-used list.
void brelse(struct buf* b) {
    80203db6:	1101                	addi	sp,sp,-32
    80203db8:	ec06                	sd	ra,24(sp)
    80203dba:	e822                	sd	s0,16(sp)
    80203dbc:	e426                	sd	s1,8(sp)
    80203dbe:	e04a                	sd	s2,0(sp)
    80203dc0:	1000                	addi	s0,sp,32
    80203dc2:	84aa                	mv	s1,a0
    if (!holdingsleep(&b->lock))
    80203dc4:	01050913          	addi	s2,a0,16
    80203dc8:	854a                	mv	a0,s2
    80203dca:	00000097          	auipc	ra,0x0
    80203dce:	a46080e7          	jalr	-1466(ra) # 80203810 <holdingsleep>
    80203dd2:	c92d                	beqz	a0,80203e44 <brelse+0x8e>
        panic("brelse");

    releasesleep(&b->lock);
    80203dd4:	854a                	mv	a0,s2
    80203dd6:	00000097          	auipc	ra,0x0
    80203dda:	9f6080e7          	jalr	-1546(ra) # 802037cc <releasesleep>

    acquireLock(&bcache.lock);
    80203dde:	001d3517          	auipc	a0,0x1d3
    80203de2:	76a50513          	addi	a0,a0,1898 # 803d7548 <bcache>
    80203de6:	00000097          	auipc	ra,0x0
    80203dea:	acc080e7          	jalr	-1332(ra) # 802038b2 <acquireLock>
    b->refcnt--;
    80203dee:	40bc                	lw	a5,64(s1)
    80203df0:	37fd                	addiw	a5,a5,-1
    80203df2:	0007871b          	sext.w	a4,a5
    80203df6:	c0bc                	sw	a5,64(s1)
    if (b->refcnt == 0) {
    80203df8:	eb05                	bnez	a4,80203e28 <brelse+0x72>
        // no one is waiting for it.
        b->next->prev = b->prev;
    80203dfa:	68bc                	ld	a5,80(s1)
    80203dfc:	64b8                	ld	a4,72(s1)
    80203dfe:	e7b8                	sd	a4,72(a5)
        b->prev->next = b->next;
    80203e00:	64bc                	ld	a5,72(s1)
    80203e02:	68b8                	ld	a4,80(s1)
    80203e04:	ebb8                	sd	a4,80(a5)
        b->next = bcache.head.next;
    80203e06:	001e6797          	auipc	a5,0x1e6
    80203e0a:	74278793          	addi	a5,a5,1858 # 803ea548 <ecache>
    80203e0e:	c687b703          	ld	a4,-920(a5)
    80203e12:	e8b8                	sd	a4,80(s1)
        b->prev = &bcache.head;
    80203e14:	001e6717          	auipc	a4,0x1e6
    80203e18:	34c70713          	addi	a4,a4,844 # 803ea160 <bcache+0x12c18>
    80203e1c:	e4b8                	sd	a4,72(s1)
        bcache.head.next->prev = b;
    80203e1e:	c687b703          	ld	a4,-920(a5)
    80203e22:	e724                	sd	s1,72(a4)
        bcache.head.next = b;
    80203e24:	c697b423          	sd	s1,-920(a5)
    }

    releaseLock(&bcache.lock);
    80203e28:	001d3517          	auipc	a0,0x1d3
    80203e2c:	72050513          	addi	a0,a0,1824 # 803d7548 <bcache>
    80203e30:	00000097          	auipc	ra,0x0
    80203e34:	ae6080e7          	jalr	-1306(ra) # 80203916 <releaseLock>
}
    80203e38:	60e2                	ld	ra,24(sp)
    80203e3a:	6442                	ld	s0,16(sp)
    80203e3c:	64a2                	ld	s1,8(sp)
    80203e3e:	6902                	ld	s2,0(sp)
    80203e40:	6105                	addi	sp,sp,32
    80203e42:	8082                	ret
        panic("brelse");
    80203e44:	00006697          	auipc	a3,0x6
    80203e48:	adc68693          	addi	a3,a3,-1316 # 80209920 <__func__.0+0x58>
    80203e4c:	00006617          	auipc	a2,0x6
    80203e50:	e0c60613          	addi	a2,a2,-500 # 80209c58 <__func__.0>
    80203e54:	06e00593          	li	a1,110
    80203e58:	00006517          	auipc	a0,0x6
    80203e5c:	ab850513          	addi	a0,a0,-1352 # 80209910 <__func__.0+0x48>
    80203e60:	ffffc097          	auipc	ra,0xffffc
    80203e64:	6e2080e7          	jalr	1762(ra) # 80200542 <_panic_>

0000000080203e68 <bpin>:

void bpin(struct buf* b) {
    80203e68:	1101                	addi	sp,sp,-32
    80203e6a:	ec06                	sd	ra,24(sp)
    80203e6c:	e822                	sd	s0,16(sp)
    80203e6e:	e426                	sd	s1,8(sp)
    80203e70:	1000                	addi	s0,sp,32
    80203e72:	84aa                	mv	s1,a0
    acquireLock(&bcache.lock);
    80203e74:	001d3517          	auipc	a0,0x1d3
    80203e78:	6d450513          	addi	a0,a0,1748 # 803d7548 <bcache>
    80203e7c:	00000097          	auipc	ra,0x0
    80203e80:	a36080e7          	jalr	-1482(ra) # 802038b2 <acquireLock>
    b->refcnt++;
    80203e84:	40bc                	lw	a5,64(s1)
    80203e86:	2785                	addiw	a5,a5,1
    80203e88:	c0bc                	sw	a5,64(s1)
    releaseLock(&bcache.lock);
    80203e8a:	001d3517          	auipc	a0,0x1d3
    80203e8e:	6be50513          	addi	a0,a0,1726 # 803d7548 <bcache>
    80203e92:	00000097          	auipc	ra,0x0
    80203e96:	a84080e7          	jalr	-1404(ra) # 80203916 <releaseLock>
}
    80203e9a:	60e2                	ld	ra,24(sp)
    80203e9c:	6442                	ld	s0,16(sp)
    80203e9e:	64a2                	ld	s1,8(sp)
    80203ea0:	6105                	addi	sp,sp,32
    80203ea2:	8082                	ret

0000000080203ea4 <bunpin>:

void bunpin(struct buf* b) {
    80203ea4:	1101                	addi	sp,sp,-32
    80203ea6:	ec06                	sd	ra,24(sp)
    80203ea8:	e822                	sd	s0,16(sp)
    80203eaa:	e426                	sd	s1,8(sp)
    80203eac:	1000                	addi	s0,sp,32
    80203eae:	84aa                	mv	s1,a0
    acquireLock(&bcache.lock);
    80203eb0:	001d3517          	auipc	a0,0x1d3
    80203eb4:	69850513          	addi	a0,a0,1688 # 803d7548 <bcache>
    80203eb8:	00000097          	auipc	ra,0x0
    80203ebc:	9fa080e7          	jalr	-1542(ra) # 802038b2 <acquireLock>
    b->refcnt--;
    80203ec0:	40bc                	lw	a5,64(s1)
    80203ec2:	37fd                	addiw	a5,a5,-1
    80203ec4:	c0bc                	sw	a5,64(s1)
    releaseLock(&bcache.lock);
    80203ec6:	001d3517          	auipc	a0,0x1d3
    80203eca:	68250513          	addi	a0,a0,1666 # 803d7548 <bcache>
    80203ece:	00000097          	auipc	ra,0x0
    80203ed2:	a48080e7          	jalr	-1464(ra) # 80203916 <releaseLock>
}
    80203ed6:	60e2                	ld	ra,24(sp)
    80203ed8:	6442                	ld	s0,16(sp)
    80203eda:	64a2                	ld	s1,8(sp)
    80203edc:	6105                	addi	sp,sp,32
    80203ede:	8082                	ret

0000000080203ee0 <read_fat>:
/**
 * Read the FAT table content corresponded to the given cluster number.
 * @param   cluster     the number of cluster which you want to read its content
 * in FAT table
 */
static uint32 read_fat(uint32 cluster) {
    80203ee0:	1101                	addi	sp,sp,-32
    80203ee2:	ec06                	sd	ra,24(sp)
    80203ee4:	e822                	sd	s0,16(sp)
    80203ee6:	e426                	sd	s1,8(sp)
    80203ee8:	e04a                	sd	s2,0(sp)
    80203eea:	1000                	addi	s0,sp,32
    if (cluster >= FAT32_EOC) {
    80203eec:	100007b7          	lui	a5,0x10000
    80203ef0:	17dd                	addi	a5,a5,-9
        return cluster;
    80203ef2:	84aa                	mv	s1,a0
    if (cluster >= FAT32_EOC) {
    80203ef4:	00a7ea63          	bltu	a5,a0,80203f08 <read_fat+0x28>
    }
    if (cluster >
        fat.data_clus_cnt + 1) {  // because cluster number starts at 2, not 0
    80203ef8:	001e6797          	auipc	a5,0x1e6
    80203efc:	4c87a783          	lw	a5,1224(a5) # 803ea3c0 <fat+0x8>
    if (cluster >
    80203f00:	2785                	addiw	a5,a5,1
        return 0;
    80203f02:	4481                	li	s1,0
    if (cluster >
    80203f04:	00a7f963          	bgeu	a5,a0,80203f16 <read_fat+0x36>
    // here should be a cache layer for FAT table, but not implemented yet.
    struct buf* b = bread(0, fat_sec);
    uint32 next_clus = *(uint32*)(b->data + fat_offset_of_clus(cluster));
    brelse(b);
    return next_clus;
}
    80203f08:	8526                	mv	a0,s1
    80203f0a:	60e2                	ld	ra,24(sp)
    80203f0c:	6442                	ld	s0,16(sp)
    80203f0e:	64a2                	ld	s1,8(sp)
    80203f10:	6902                	ld	s2,0(sp)
    80203f12:	6105                	addi	sp,sp,32
    80203f14:	8082                	ret
    return fat.bpb.rsvd_sec_cnt + (cluster << 2) / fat.bpb.byts_per_sec +
    80203f16:	0025149b          	slliw	s1,a0,0x2
    80203f1a:	001e6917          	auipc	s2,0x1e6
    80203f1e:	49e90913          	addi	s2,s2,1182 # 803ea3b8 <fat>
    80203f22:	01095783          	lhu	a5,16(s2)
    80203f26:	02f4d7bb          	divuw	a5,s1,a5
    80203f2a:	01495583          	lhu	a1,20(s2)
    struct buf* b = bread(0, fat_sec);
    80203f2e:	9dbd                	addw	a1,a1,a5
    80203f30:	4501                	li	a0,0
    80203f32:	00000097          	auipc	ra,0x0
    80203f36:	d20080e7          	jalr	-736(ra) # 80203c52 <bread>
    return (cluster << 2) % fat.bpb.byts_per_sec;
    80203f3a:	01095783          	lhu	a5,16(s2)
    80203f3e:	02f4f4bb          	remuw	s1,s1,a5
    uint32 next_clus = *(uint32*)(b->data + fat_offset_of_clus(cluster));
    80203f42:	1482                	slli	s1,s1,0x20
    80203f44:	9081                	srli	s1,s1,0x20
    80203f46:	009507b3          	add	a5,a0,s1
    80203f4a:	4fa4                	lw	s1,88(a5)
    brelse(b);
    80203f4c:	00000097          	auipc	ra,0x0
    80203f50:	e6a080e7          	jalr	-406(ra) # 80203db6 <brelse>
    return next_clus;
    80203f54:	bf55                	j	80203f08 <read_fat+0x28>

0000000080203f56 <alloc_clus>:
        bwrite(b);
        brelse(b);
    }
}

static uint32 alloc_clus(uint8 dev) {
    80203f56:	711d                	addi	sp,sp,-96
    80203f58:	ec86                	sd	ra,88(sp)
    80203f5a:	e8a2                	sd	s0,80(sp)
    80203f5c:	e4a6                	sd	s1,72(sp)
    80203f5e:	e0ca                	sd	s2,64(sp)
    80203f60:	fc4e                	sd	s3,56(sp)
    80203f62:	f852                	sd	s4,48(sp)
    80203f64:	f456                	sd	s5,40(sp)
    80203f66:	f05a                	sd	s6,32(sp)
    80203f68:	ec5e                	sd	s7,24(sp)
    80203f6a:	e862                	sd	s8,16(sp)
    80203f6c:	e466                	sd	s9,8(sp)
    80203f6e:	1080                	addi	s0,sp,96
    // should we keep a free cluster list? instead of searching fat every time.
    struct buf* b;
    uint32 sec = fat.bpb.rsvd_sec_cnt;
    80203f70:	001e6797          	auipc	a5,0x1e6
    80203f74:	44878793          	addi	a5,a5,1096 # 803ea3b8 <fat>
    80203f78:	0147db83          	lhu	s7,20(a5)
    uint32 const ent_per_sec = fat.bpb.byts_per_sec / sizeof(uint32);
    80203f7c:	0107d903          	lhu	s2,16(a5)
    for (uint32 i = 0; i < fat.bpb.fat_sz; i++, sec++) {
    80203f80:	539c                	lw	a5,32(a5)
    80203f82:	10078363          	beqz	a5,80204088 <alloc_clus+0x132>
    80203f86:	0029591b          	srliw	s2,s2,0x2
    80203f8a:	0009099b          	sext.w	s3,s2
    80203f8e:	4b01                	li	s6,0
        b = bread(dev, sec);
    80203f90:	00050a9b          	sext.w	s5,a0
        for (uint32 j = 0; j < ent_per_sec; j++) {
    80203f94:	4c01                	li	s8,0
    for (uint32 i = 0; i < fat.bpb.fat_sz; i++, sec++) {
    80203f96:	001e6c97          	auipc	s9,0x1e6
    80203f9a:	422c8c93          	addi	s9,s9,1058 # 803ea3b8 <fat>
    80203f9e:	a0c9                	j	80204060 <alloc_clus+0x10a>
            if (((uint32*)(b->data))[j] == 0) {
                ((uint32*)(b->data))[j] = FAT32_EOC + 7;
    80203fa0:	100007b7          	lui	a5,0x10000
    80203fa4:	17fd                	addi	a5,a5,-1
    80203fa6:	c29c                	sw	a5,0(a3)
                bwrite(b);
    80203fa8:	8552                	mv	a0,s4
    80203faa:	00000097          	auipc	ra,0x0
    80203fae:	db4080e7          	jalr	-588(ra) # 80203d5e <bwrite>
                brelse(b);
    80203fb2:	8552                	mv	a0,s4
    80203fb4:	00000097          	auipc	ra,0x0
    80203fb8:	e02080e7          	jalr	-510(ra) # 80203db6 <brelse>
                uint32 clus = i * ent_per_sec + j;
    80203fbc:	0369093b          	mulw	s2,s2,s6
    80203fc0:	0099093b          	addw	s2,s2,s1
    80203fc4:	00090a9b          	sext.w	s5,s2
    return ((cluster - 2) * fat.bpb.sec_per_clus) + fat.first_data_sec;
    80203fc8:	001e6717          	auipc	a4,0x1e6
    80203fcc:	3f070713          	addi	a4,a4,1008 # 803ea3b8 <fat>
    80203fd0:	01274783          	lbu	a5,18(a4)
    80203fd4:	ffe9099b          	addiw	s3,s2,-2
    80203fd8:	02f989bb          	mulw	s3,s3,a5
    80203fdc:	4318                	lw	a4,0(a4)
    80203fde:	00e989bb          	addw	s3,s3,a4
    for (int i = 0; i < fat.bpb.sec_per_clus; i++) {
    80203fe2:	c7b1                	beqz	a5,8020402e <alloc_clus+0xd8>
    80203fe4:	4901                	li	s2,0
    80203fe6:	001e6a17          	auipc	s4,0x1e6
    80203fea:	3d2a0a13          	addi	s4,s4,978 # 803ea3b8 <fat>
        b = bread(0, sec++);
    80203fee:	013905bb          	addw	a1,s2,s3
    80203ff2:	4501                	li	a0,0
    80203ff4:	00000097          	auipc	ra,0x0
    80203ff8:	c5e080e7          	jalr	-930(ra) # 80203c52 <bread>
    80203ffc:	84aa                	mv	s1,a0
        memset(b->data, 0, BSIZE);
    80203ffe:	20000613          	li	a2,512
    80204002:	4581                	li	a1,0
    80204004:	05850513          	addi	a0,a0,88
    80204008:	00000097          	auipc	ra,0x0
    8020400c:	9ac080e7          	jalr	-1620(ra) # 802039b4 <memset>
        bwrite(b);
    80204010:	8526                	mv	a0,s1
    80204012:	00000097          	auipc	ra,0x0
    80204016:	d4c080e7          	jalr	-692(ra) # 80203d5e <bwrite>
        brelse(b);
    8020401a:	8526                	mv	a0,s1
    8020401c:	00000097          	auipc	ra,0x0
    80204020:	d9a080e7          	jalr	-614(ra) # 80203db6 <brelse>
    for (int i = 0; i < fat.bpb.sec_per_clus; i++) {
    80204024:	2905                	addiw	s2,s2,1
    80204026:	012a4783          	lbu	a5,18(s4)
    8020402a:	fcf942e3          	blt	s2,a5,80203fee <alloc_clus+0x98>
            }
        }
        brelse(b);
    }
    panic("no clusters");
}
    8020402e:	8556                	mv	a0,s5
    80204030:	60e6                	ld	ra,88(sp)
    80204032:	6446                	ld	s0,80(sp)
    80204034:	64a6                	ld	s1,72(sp)
    80204036:	6906                	ld	s2,64(sp)
    80204038:	79e2                	ld	s3,56(sp)
    8020403a:	7a42                	ld	s4,48(sp)
    8020403c:	7aa2                	ld	s5,40(sp)
    8020403e:	7b02                	ld	s6,32(sp)
    80204040:	6be2                	ld	s7,24(sp)
    80204042:	6c42                	ld	s8,16(sp)
    80204044:	6ca2                	ld	s9,8(sp)
    80204046:	6125                	addi	sp,sp,96
    80204048:	8082                	ret
        brelse(b);
    8020404a:	8552                	mv	a0,s4
    8020404c:	00000097          	auipc	ra,0x0
    80204050:	d6a080e7          	jalr	-662(ra) # 80203db6 <brelse>
    for (uint32 i = 0; i < fat.bpb.fat_sz; i++, sec++) {
    80204054:	2b05                	addiw	s6,s6,1
    80204056:	2b85                	addiw	s7,s7,1
    80204058:	020ca783          	lw	a5,32(s9)
    8020405c:	02fb7663          	bgeu	s6,a5,80204088 <alloc_clus+0x132>
        b = bread(dev, sec);
    80204060:	85de                	mv	a1,s7
    80204062:	8556                	mv	a0,s5
    80204064:	00000097          	auipc	ra,0x0
    80204068:	bee080e7          	jalr	-1042(ra) # 80203c52 <bread>
    8020406c:	8a2a                	mv	s4,a0
        for (uint32 j = 0; j < ent_per_sec; j++) {
    8020406e:	fc098ee3          	beqz	s3,8020404a <alloc_clus+0xf4>
    80204072:	05850793          	addi	a5,a0,88
    80204076:	84e2                	mv	s1,s8
            if (((uint32*)(b->data))[j] == 0) {
    80204078:	86be                	mv	a3,a5
    8020407a:	4398                	lw	a4,0(a5)
    8020407c:	d315                	beqz	a4,80203fa0 <alloc_clus+0x4a>
        for (uint32 j = 0; j < ent_per_sec; j++) {
    8020407e:	2485                	addiw	s1,s1,1
    80204080:	0791                	addi	a5,a5,4
    80204082:	fe999be3          	bne	s3,s1,80204078 <alloc_clus+0x122>
    80204086:	b7d1                	j	8020404a <alloc_clus+0xf4>
    panic("no clusters");
    80204088:	00006697          	auipc	a3,0x6
    8020408c:	8a068693          	addi	a3,a3,-1888 # 80209928 <__func__.0+0x60>
    80204090:	00006617          	auipc	a2,0x6
    80204094:	a0060613          	addi	a2,a2,-1536 # 80209a90 <__func__.10>
    80204098:	0dc00593          	li	a1,220
    8020409c:	00006517          	auipc	a0,0x6
    802040a0:	89c50513          	addi	a0,a0,-1892 # 80209938 <__func__.0+0x70>
    802040a4:	ffffc097          	auipc	ra,0xffffc
    802040a8:	49e080e7          	jalr	1182(ra) # 80200542 <_panic_>

00000000802040ac <write_fat>:
    if (cluster > fat.data_clus_cnt + 1) {
    802040ac:	001e6797          	auipc	a5,0x1e6
    802040b0:	3147a783          	lw	a5,788(a5) # 803ea3c0 <fat+0x8>
    802040b4:	2785                	addiw	a5,a5,1
    802040b6:	06a7e963          	bltu	a5,a0,80204128 <write_fat+0x7c>
static int write_fat(uint32 cluster, uint32 content) {
    802040ba:	7179                	addi	sp,sp,-48
    802040bc:	f406                	sd	ra,40(sp)
    802040be:	f022                	sd	s0,32(sp)
    802040c0:	ec26                	sd	s1,24(sp)
    802040c2:	e84a                	sd	s2,16(sp)
    802040c4:	e44e                	sd	s3,8(sp)
    802040c6:	e052                	sd	s4,0(sp)
    802040c8:	1800                	addi	s0,sp,48
    802040ca:	89ae                	mv	s3,a1
    return fat.bpb.rsvd_sec_cnt + (cluster << 2) / fat.bpb.byts_per_sec +
    802040cc:	0025149b          	slliw	s1,a0,0x2
    802040d0:	001e6a17          	auipc	s4,0x1e6
    802040d4:	2e8a0a13          	addi	s4,s4,744 # 803ea3b8 <fat>
    802040d8:	010a5783          	lhu	a5,16(s4)
    802040dc:	02f4d7bb          	divuw	a5,s1,a5
    802040e0:	014a5583          	lhu	a1,20(s4)
    struct buf* b = bread(0, fat_sec);
    802040e4:	9dbd                	addw	a1,a1,a5
    802040e6:	4501                	li	a0,0
    802040e8:	00000097          	auipc	ra,0x0
    802040ec:	b6a080e7          	jalr	-1174(ra) # 80203c52 <bread>
    802040f0:	892a                	mv	s2,a0
    return (cluster << 2) % fat.bpb.byts_per_sec;
    802040f2:	010a5783          	lhu	a5,16(s4)
    802040f6:	02f4f4bb          	remuw	s1,s1,a5
    *(uint32*)(b->data + off) = content;
    802040fa:	1482                	slli	s1,s1,0x20
    802040fc:	9081                	srli	s1,s1,0x20
    802040fe:	94aa                	add	s1,s1,a0
    80204100:	0534ac23          	sw	s3,88(s1)
    bwrite(b);
    80204104:	00000097          	auipc	ra,0x0
    80204108:	c5a080e7          	jalr	-934(ra) # 80203d5e <bwrite>
    brelse(b);
    8020410c:	854a                	mv	a0,s2
    8020410e:	00000097          	auipc	ra,0x0
    80204112:	ca8080e7          	jalr	-856(ra) # 80203db6 <brelse>
    return 0;
    80204116:	4501                	li	a0,0
}
    80204118:	70a2                	ld	ra,40(sp)
    8020411a:	7402                	ld	s0,32(sp)
    8020411c:	64e2                	ld	s1,24(sp)
    8020411e:	6942                	ld	s2,16(sp)
    80204120:	69a2                	ld	s3,8(sp)
    80204122:	6a02                	ld	s4,0(sp)
    80204124:	6145                	addi	sp,sp,48
    80204126:	8082                	ret
        return -1;
    80204128:	557d                	li	a0,-1
}
    8020412a:	8082                	ret

000000008020412c <reloc_clus>:
 * @param   entry       modify its cur_clus field
 * @param   off         the offset from the beginning of the relative file
 * @param   alloc       whether alloc new cluster when meeting end of FAT chains
 * @return              the offset from the new cur_clus
 */
static int reloc_clus(struct dirent* entry, uint off, int alloc) {
    8020412c:	715d                	addi	sp,sp,-80
    8020412e:	e486                	sd	ra,72(sp)
    80204130:	e0a2                	sd	s0,64(sp)
    80204132:	fc26                	sd	s1,56(sp)
    80204134:	f84a                	sd	s2,48(sp)
    80204136:	f44e                	sd	s3,40(sp)
    80204138:	f052                	sd	s4,32(sp)
    8020413a:	ec56                	sd	s5,24(sp)
    8020413c:	e85a                	sd	s6,16(sp)
    8020413e:	e45e                	sd	s7,8(sp)
    80204140:	0880                	addi	s0,sp,80
    80204142:	84aa                	mv	s1,a0
    80204144:	8a2e                	mv	s4,a1
    int clus_num = off / fat.byts_per_clus;
    80204146:	001e6b97          	auipc	s7,0x1e6
    8020414a:	27ebab83          	lw	s7,638(s7) # 803ea3c4 <fat+0xc>
    8020414e:	0375d9bb          	divuw	s3,a1,s7
    while (clus_num > entry->clus_cnt) {
    80204152:	11052703          	lw	a4,272(a0)
    80204156:	07377563          	bgeu	a4,s3,802041c0 <reloc_clus+0x94>
    8020415a:	8b32                	mv	s6,a2
        int clus = read_fat(entry->cur_clus);
        if (clus >= FAT32_EOC) {
    8020415c:	10000ab7          	lui	s5,0x10000
    80204160:	1add                	addi	s5,s5,-9
    80204162:	a81d                	j	80204198 <reloc_clus+0x6c>
            if (alloc) {
                clus = alloc_clus(entry->dev);
    80204164:	1144c503          	lbu	a0,276(s1)
    80204168:	00000097          	auipc	ra,0x0
    8020416c:	dee080e7          	jalr	-530(ra) # 80203f56 <alloc_clus>
    80204170:	0005091b          	sext.w	s2,a0
                write_fat(entry->cur_clus, clus);
    80204174:	85ca                	mv	a1,s2
    80204176:	10c4a503          	lw	a0,268(s1)
    8020417a:	00000097          	auipc	ra,0x0
    8020417e:	f32080e7          	jalr	-206(ra) # 802040ac <write_fat>
                entry->cur_clus = entry->first_clus;
                entry->clus_cnt = 0;
                return -1;
            }
        }
        entry->cur_clus = clus;
    80204182:	1124a623          	sw	s2,268(s1)
        entry->clus_cnt++;
    80204186:	1104a783          	lw	a5,272(s1)
    8020418a:	2785                	addiw	a5,a5,1
    8020418c:	0007871b          	sext.w	a4,a5
    80204190:	10f4a823          	sw	a5,272(s1)
    while (clus_num > entry->clus_cnt) {
    80204194:	03377663          	bgeu	a4,s3,802041c0 <reloc_clus+0x94>
        int clus = read_fat(entry->cur_clus);
    80204198:	10c4a503          	lw	a0,268(s1)
    8020419c:	00000097          	auipc	ra,0x0
    802041a0:	d44080e7          	jalr	-700(ra) # 80203ee0 <read_fat>
    802041a4:	0005091b          	sext.w	s2,a0
        if (clus >= FAT32_EOC) {
    802041a8:	fd2adde3          	bge	s5,s2,80204182 <reloc_clus+0x56>
            if (alloc) {
    802041ac:	fa0b1ce3          	bnez	s6,80204164 <reloc_clus+0x38>
                entry->cur_clus = entry->first_clus;
    802041b0:	1044a783          	lw	a5,260(s1)
    802041b4:	10f4a623          	sw	a5,268(s1)
                entry->clus_cnt = 0;
    802041b8:	1004a823          	sw	zero,272(s1)
                return -1;
    802041bc:	557d                	li	a0,-1
    802041be:	a881                	j	8020420e <reloc_clus+0xe2>
    }
    if (clus_num < entry->clus_cnt) {
    802041c0:	04e9f163          	bgeu	s3,a4,80204202 <reloc_clus+0xd6>
        entry->cur_clus = entry->first_clus;
    802041c4:	1044a783          	lw	a5,260(s1)
    802041c8:	10f4a623          	sw	a5,268(s1)
        entry->clus_cnt = 0;
    802041cc:	1004a823          	sw	zero,272(s1)
        while (entry->clus_cnt < clus_num) {
    802041d0:	037a6963          	bltu	s4,s7,80204202 <reloc_clus+0xd6>
            entry->cur_clus = read_fat(entry->cur_clus);
            if (entry->cur_clus >= FAT32_EOC) {
    802041d4:	10000937          	lui	s2,0x10000
    802041d8:	195d                	addi	s2,s2,-9
            entry->cur_clus = read_fat(entry->cur_clus);
    802041da:	10c4a503          	lw	a0,268(s1)
    802041de:	00000097          	auipc	ra,0x0
    802041e2:	d02080e7          	jalr	-766(ra) # 80203ee0 <read_fat>
    802041e6:	2501                	sext.w	a0,a0
    802041e8:	10a4a623          	sw	a0,268(s1)
            if (entry->cur_clus >= FAT32_EOC) {
    802041ec:	02a96c63          	bltu	s2,a0,80204224 <reloc_clus+0xf8>
                panic("reloc_clus");
            }
            entry->clus_cnt++;
    802041f0:	1104a783          	lw	a5,272(s1)
    802041f4:	2785                	addiw	a5,a5,1
    802041f6:	0007871b          	sext.w	a4,a5
    802041fa:	10f4a823          	sw	a5,272(s1)
        while (entry->clus_cnt < clus_num) {
    802041fe:	fd376ee3          	bltu	a4,s3,802041da <reloc_clus+0xae>
        }
    }
    return off % fat.byts_per_clus;
    80204202:	001e6797          	auipc	a5,0x1e6
    80204206:	1c27a783          	lw	a5,450(a5) # 803ea3c4 <fat+0xc>
    8020420a:	02fa753b          	remuw	a0,s4,a5
}
    8020420e:	60a6                	ld	ra,72(sp)
    80204210:	6406                	ld	s0,64(sp)
    80204212:	74e2                	ld	s1,56(sp)
    80204214:	7942                	ld	s2,48(sp)
    80204216:	79a2                	ld	s3,40(sp)
    80204218:	7a02                	ld	s4,32(sp)
    8020421a:	6ae2                	ld	s5,24(sp)
    8020421c:	6b42                	ld	s6,16(sp)
    8020421e:	6ba2                	ld	s7,8(sp)
    80204220:	6161                	addi	sp,sp,80
    80204222:	8082                	ret
                panic("reloc_clus");
    80204224:	00005697          	auipc	a3,0x5
    80204228:	71c68693          	addi	a3,a3,1820 # 80209940 <__func__.0+0x78>
    8020422c:	00006617          	auipc	a2,0x6
    80204230:	87460613          	addi	a2,a2,-1932 # 80209aa0 <__func__.11>
    80204234:	14a00593          	li	a1,330
    80204238:	00005517          	auipc	a0,0x5
    8020423c:	70050513          	addi	a0,a0,1792 # 80209938 <__func__.0+0x70>
    80204240:	ffffc097          	auipc	ra,0xffffc
    80204244:	302080e7          	jalr	770(ra) # 80200542 <_panic_>

0000000080204248 <rw_clus>:
                    uint n) {
    80204248:	7119                	addi	sp,sp,-128
    8020424a:	fc86                	sd	ra,120(sp)
    8020424c:	f8a2                	sd	s0,112(sp)
    8020424e:	f4a6                	sd	s1,104(sp)
    80204250:	f0ca                	sd	s2,96(sp)
    80204252:	ecce                	sd	s3,88(sp)
    80204254:	e8d2                	sd	s4,80(sp)
    80204256:	e4d6                	sd	s5,72(sp)
    80204258:	e0da                	sd	s6,64(sp)
    8020425a:	fc5e                	sd	s7,56(sp)
    8020425c:	f862                	sd	s8,48(sp)
    8020425e:	f466                	sd	s9,40(sp)
    80204260:	f06a                	sd	s10,32(sp)
    80204262:	ec6e                	sd	s11,24(sp)
    80204264:	0100                	addi	s0,sp,128
    80204266:	f8c43423          	sd	a2,-120(s0)
    8020426a:	8b36                	mv	s6,a3
    8020426c:	8c3e                	mv	s8,a5
    if (off + n > fat.byts_per_clus)
    8020426e:	00f706bb          	addw	a3,a4,a5
    80204272:	001e6797          	auipc	a5,0x1e6
    80204276:	1527a783          	lw	a5,338(a5) # 803ea3c4 <fat+0xc>
    8020427a:	02d7ef63          	bltu	a5,a3,802042b8 <rw_clus+0x70>
    8020427e:	8cae                	mv	s9,a1
    uint sec = first_sec_of_clus(cluster) + off / fat.bpb.byts_per_sec;
    80204280:	001e6797          	auipc	a5,0x1e6
    80204284:	13878793          	addi	a5,a5,312 # 803ea3b8 <fat>
    80204288:	0107d683          	lhu	a3,16(a5)
    return ((cluster - 2) * fat.bpb.sec_per_clus) + fat.first_data_sec;
    8020428c:	ffe5099b          	addiw	s3,a0,-2
    80204290:	0127c603          	lbu	a2,18(a5)
    80204294:	02c989bb          	mulw	s3,s3,a2
    80204298:	439c                	lw	a5,0(a5)
    8020429a:	00f989bb          	addw	s3,s3,a5
    uint sec = first_sec_of_clus(cluster) + off / fat.bpb.byts_per_sec;
    8020429e:	02d757bb          	divuw	a5,a4,a3
    802042a2:	00f989bb          	addw	s3,s3,a5
    off = off % fat.bpb.byts_per_sec;
    802042a6:	02d77abb          	remuw	s5,a4,a3
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    802042aa:	0e0c0d63          	beqz	s8,802043a4 <rw_clus+0x15c>
    802042ae:	4a01                	li	s4,0
        m = BSIZE - off % BSIZE;
    802042b0:	20000d93          	li	s11,512
        if (bad == -1) {
    802042b4:	5d7d                	li	s10,-1
    802042b6:	a8a5                	j	8020432e <rw_clus+0xe6>
        panic("offset out of range");
    802042b8:	00005697          	auipc	a3,0x5
    802042bc:	69868693          	addi	a3,a3,1688 # 80209950 <__func__.0+0x88>
    802042c0:	00006617          	auipc	a2,0x6
    802042c4:	9e060613          	addi	a2,a2,-1568 # 80209ca0 <__func__.9>
    802042c8:	10f00593          	li	a1,271
    802042cc:	00005517          	auipc	a0,0x5
    802042d0:	66c50513          	addi	a0,a0,1644 # 80209938 <__func__.0+0x70>
    802042d4:	ffffc097          	auipc	ra,0xffffc
    802042d8:	26e080e7          	jalr	622(ra) # 80200542 <_panic_>
                bwrite(bp);
    802042dc:	854a                	mv	a0,s2
    802042de:	00000097          	auipc	ra,0x0
    802042e2:	a80080e7          	jalr	-1408(ra) # 80203d5e <bwrite>
        brelse(bp);
    802042e6:	854a                	mv	a0,s2
    802042e8:	00000097          	auipc	ra,0x0
    802042ec:	ace080e7          	jalr	-1330(ra) # 80203db6 <brelse>
        if (bad == -1) {
    802042f0:	a02d                	j	8020431a <rw_clus+0xd2>
            bad = either_copyout(user, data, bp->data + (off % BSIZE), m);
    802042f2:	05890613          	addi	a2,s2,88 # 10000058 <_start-0x701fffa8>
    802042f6:	1682                	slli	a3,a3,0x20
    802042f8:	9281                	srli	a3,a3,0x20
    802042fa:	963a                	add	a2,a2,a4
    802042fc:	85da                	mv	a1,s6
    802042fe:	f8843503          	ld	a0,-120(s0)
    80204302:	ffffe097          	auipc	ra,0xffffe
    80204306:	46c080e7          	jalr	1132(ra) # 8020276e <either_copyout>
    8020430a:	8baa                	mv	s7,a0
        brelse(bp);
    8020430c:	854a                	mv	a0,s2
    8020430e:	00000097          	auipc	ra,0x0
    80204312:	aa8080e7          	jalr	-1368(ra) # 80203db6 <brelse>
        if (bad == -1) {
    80204316:	07ab8763          	beq	s7,s10,80204384 <rw_clus+0x13c>
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    8020431a:	01448a3b          	addw	s4,s1,s4
    8020431e:	01548abb          	addw	s5,s1,s5
    80204322:	1482                	slli	s1,s1,0x20
    80204324:	9081                	srli	s1,s1,0x20
    80204326:	9b26                	add	s6,s6,s1
    80204328:	2985                	addiw	s3,s3,1
    8020432a:	058a7d63          	bgeu	s4,s8,80204384 <rw_clus+0x13c>
        bp = bread(0, sec);
    8020432e:	85ce                	mv	a1,s3
    80204330:	4501                	li	a0,0
    80204332:	00000097          	auipc	ra,0x0
    80204336:	920080e7          	jalr	-1760(ra) # 80203c52 <bread>
    8020433a:	892a                	mv	s2,a0
        m = BSIZE - off % BSIZE;
    8020433c:	1ffaf713          	andi	a4,s5,511
        if (n - tot < m) {
    80204340:	414c07bb          	subw	a5,s8,s4
        m = BSIZE - off % BSIZE;
    80204344:	40ed863b          	subw	a2,s11,a4
    80204348:	86be                	mv	a3,a5
    8020434a:	2781                	sext.w	a5,a5
    8020434c:	0006059b          	sext.w	a1,a2
    80204350:	00f5f363          	bgeu	a1,a5,80204356 <rw_clus+0x10e>
    80204354:	86b2                	mv	a3,a2
    80204356:	0006849b          	sext.w	s1,a3
        if (write) {
    8020435a:	f80c8ce3          	beqz	s9,802042f2 <rw_clus+0xaa>
            if ((bad = either_copyin(bp->data + (off % BSIZE), user, data,
    8020435e:	05890513          	addi	a0,s2,88
    80204362:	1682                	slli	a3,a3,0x20
    80204364:	9281                	srli	a3,a3,0x20
    80204366:	865a                	mv	a2,s6
    80204368:	f8843583          	ld	a1,-120(s0)
    8020436c:	953a                	add	a0,a0,a4
    8020436e:	ffffe097          	auipc	ra,0xffffe
    80204372:	458080e7          	jalr	1112(ra) # 802027c6 <either_copyin>
    80204376:	f7a513e3          	bne	a0,s10,802042dc <rw_clus+0x94>
        brelse(bp);
    8020437a:	854a                	mv	a0,s2
    8020437c:	00000097          	auipc	ra,0x0
    80204380:	a3a080e7          	jalr	-1478(ra) # 80203db6 <brelse>
}
    80204384:	8552                	mv	a0,s4
    80204386:	70e6                	ld	ra,120(sp)
    80204388:	7446                	ld	s0,112(sp)
    8020438a:	74a6                	ld	s1,104(sp)
    8020438c:	7906                	ld	s2,96(sp)
    8020438e:	69e6                	ld	s3,88(sp)
    80204390:	6a46                	ld	s4,80(sp)
    80204392:	6aa6                	ld	s5,72(sp)
    80204394:	6b06                	ld	s6,64(sp)
    80204396:	7be2                	ld	s7,56(sp)
    80204398:	7c42                	ld	s8,48(sp)
    8020439a:	7ca2                	ld	s9,40(sp)
    8020439c:	7d02                	ld	s10,32(sp)
    8020439e:	6de2                	ld	s11,24(sp)
    802043a0:	6109                	addi	sp,sp,128
    802043a2:	8082                	ret
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    802043a4:	8a62                	mv	s4,s8
    802043a6:	bff9                	j	80204384 <rw_clus+0x13c>

00000000802043a8 <eget>:
// cache entries by their whole path. But when parsing a path, we open all the
// directories through it, which forms a linked list from the final file to the
// root. Thus, we use the "parent" pointer to recognize whether an entry with
// the "name" as given is really the file we want in the right path. Should
// never get root by eget, it's easy to understand.
static struct dirent* eget(struct dirent* parent, char* name) {
    802043a8:	7139                	addi	sp,sp,-64
    802043aa:	fc06                	sd	ra,56(sp)
    802043ac:	f822                	sd	s0,48(sp)
    802043ae:	f426                	sd	s1,40(sp)
    802043b0:	f04a                	sd	s2,32(sp)
    802043b2:	ec4e                	sd	s3,24(sp)
    802043b4:	e852                	sd	s4,16(sp)
    802043b6:	e456                	sd	s5,8(sp)
    802043b8:	0080                	addi	s0,sp,64
    802043ba:	8a2a                	mv	s4,a0
    802043bc:	8aae                	mv	s5,a1
    struct dirent* ep;
    acquireLock(&ecache.lock);
    802043be:	001e6517          	auipc	a0,0x1e6
    802043c2:	18a50513          	addi	a0,a0,394 # 803ea548 <ecache>
    802043c6:	fffff097          	auipc	ra,0xfffff
    802043ca:	4ec080e7          	jalr	1260(ra) # 802038b2 <acquireLock>
    if (name) {
    802043ce:	060a8b63          	beqz	s5,80204444 <eget+0x9c>
        for (ep = root.next; ep != &root; ep = ep->next) {  // LRU algo
    802043d2:	001e6497          	auipc	s1,0x1e6
    802043d6:	1364b483          	ld	s1,310(s1) # 803ea508 <root+0x128>
    802043da:	001e6797          	auipc	a5,0x1e6
    802043de:	00678793          	addi	a5,a5,6 # 803ea3e0 <root>
    802043e2:	06f48163          	beq	s1,a5,80204444 <eget+0x9c>
            if (ep->valid == 1 && ep->parent == parent &&
    802043e6:	4905                	li	s2,1
        for (ep = root.next; ep != &root; ep = ep->next) {  // LRU algo
    802043e8:	89be                	mv	s3,a5
    802043ea:	a029                	j	802043f4 <eget+0x4c>
    802043ec:	1284b483          	ld	s1,296(s1)
    802043f0:	05348a63          	beq	s1,s3,80204444 <eget+0x9c>
            if (ep->valid == 1 && ep->parent == parent &&
    802043f4:	11649783          	lh	a5,278(s1)
    802043f8:	ff279ae3          	bne	a5,s2,802043ec <eget+0x44>
    802043fc:	1204b783          	ld	a5,288(s1)
    80204400:	ff4796e3          	bne	a5,s4,802043ec <eget+0x44>
                strncmp(ep->filename, name, FAT32_MAX_FILENAME) == 0) {
    80204404:	0ff00613          	li	a2,255
    80204408:	85d6                	mv	a1,s5
    8020440a:	8526                	mv	a0,s1
    8020440c:	fffff097          	auipc	ra,0xfffff
    80204410:	678080e7          	jalr	1656(ra) # 80203a84 <strncmp>
            if (ep->valid == 1 && ep->parent == parent &&
    80204414:	fd61                	bnez	a0,802043ec <eget+0x44>
                if (ep->ref++ == 0) {
    80204416:	1184a783          	lw	a5,280(s1)
    8020441a:	0017871b          	addiw	a4,a5,1
    8020441e:	10e4ac23          	sw	a4,280(s1)
    80204422:	eb81                	bnez	a5,80204432 <eget+0x8a>
                    ep->parent->ref++;
    80204424:	1204b703          	ld	a4,288(s1)
    80204428:	11872783          	lw	a5,280(a4)
    8020442c:	2785                	addiw	a5,a5,1
    8020442e:	10f72c23          	sw	a5,280(a4)
                }
                releaseLock(&ecache.lock);
    80204432:	001e6517          	auipc	a0,0x1e6
    80204436:	11650513          	addi	a0,a0,278 # 803ea548 <ecache>
    8020443a:	fffff097          	auipc	ra,0xfffff
    8020443e:	4dc080e7          	jalr	1244(ra) # 80203916 <releaseLock>
                // edup(ep->parent);
                return ep;
    80204442:	a895                	j	802044b6 <eget+0x10e>
            }
        }
    }
    for (ep = root.prev; ep != &root; ep = ep->prev) {  // LRU algo
    80204444:	001e6497          	auipc	s1,0x1e6
    80204448:	0cc4b483          	ld	s1,204(s1) # 803ea510 <root+0x130>
    8020444c:	001e6797          	auipc	a5,0x1e6
    80204450:	f9478793          	addi	a5,a5,-108 # 803ea3e0 <root>
    80204454:	00f48a63          	beq	s1,a5,80204468 <eget+0xc0>
    80204458:	873e                	mv	a4,a5
        if (ep->ref == 0) {
    8020445a:	1184a783          	lw	a5,280(s1)
    8020445e:	c79d                	beqz	a5,8020448c <eget+0xe4>
    for (ep = root.prev; ep != &root; ep = ep->prev) {  // LRU algo
    80204460:	1304b483          	ld	s1,304(s1)
    80204464:	fee49be3          	bne	s1,a4,8020445a <eget+0xb2>
            ep->dirty = 0;
            releaseLock(&ecache.lock);
            return ep;
        }
    }
    panic("eget: insufficient ecache");
    80204468:	00005697          	auipc	a3,0x5
    8020446c:	50068693          	addi	a3,a3,1280 # 80209968 <__func__.0+0xa0>
    80204470:	00006617          	auipc	a2,0x6
    80204474:	81860613          	addi	a2,a2,-2024 # 80209c88 <__func__.4>
    80204478:	1af00593          	li	a1,431
    8020447c:	00005517          	auipc	a0,0x5
    80204480:	4bc50513          	addi	a0,a0,1212 # 80209938 <__func__.0+0x70>
    80204484:	ffffc097          	auipc	ra,0xffffc
    80204488:	0be080e7          	jalr	190(ra) # 80200542 <_panic_>
            ep->ref = 1;
    8020448c:	4785                	li	a5,1
    8020448e:	10f4ac23          	sw	a5,280(s1)
            ep->dev = parent->dev;
    80204492:	114a4783          	lbu	a5,276(s4)
    80204496:	10f48a23          	sb	a5,276(s1)
            ep->off = 0;
    8020449a:	1004ae23          	sw	zero,284(s1)
            ep->valid = 0;
    8020449e:	10049b23          	sh	zero,278(s1)
            ep->dirty = 0;
    802044a2:	10048aa3          	sb	zero,277(s1)
            releaseLock(&ecache.lock);
    802044a6:	001e6517          	auipc	a0,0x1e6
    802044aa:	0a250513          	addi	a0,a0,162 # 803ea548 <ecache>
    802044ae:	fffff097          	auipc	ra,0xfffff
    802044b2:	468080e7          	jalr	1128(ra) # 80203916 <releaseLock>
    return 0;
}
    802044b6:	8526                	mv	a0,s1
    802044b8:	70e2                	ld	ra,56(sp)
    802044ba:	7442                	ld	s0,48(sp)
    802044bc:	74a2                	ld	s1,40(sp)
    802044be:	7902                	ld	s2,32(sp)
    802044c0:	69e2                	ld	s3,24(sp)
    802044c2:	6a42                	ld	s4,16(sp)
    802044c4:	6aa2                	ld	s5,8(sp)
    802044c6:	6121                	addi	sp,sp,64
    802044c8:	8082                	ret

00000000802044ca <read_entry_name>:
 * Read filename from directory entry.
 * @param   buffer      pointer to the array that stores the name
 * @param   raw_entry   pointer to the entry in a sector buffer
 * @param   islong      if non-zero, read as l-n-e, otherwise s-n-e.
 */
static void read_entry_name(char* buffer, union dentry* d) {
    802044ca:	7179                	addi	sp,sp,-48
    802044cc:	f406                	sd	ra,40(sp)
    802044ce:	f022                	sd	s0,32(sp)
    802044d0:	ec26                	sd	s1,24(sp)
    802044d2:	e84a                	sd	s2,16(sp)
    802044d4:	1800                	addi	s0,sp,48
    802044d6:	84aa                	mv	s1,a0
    802044d8:	892e                	mv	s2,a1
    if (d->lne.attr == ATTR_LONG_NAME) {  // long entry branch
    802044da:	00b5c703          	lbu	a4,11(a1)
    802044de:	47bd                	li	a5,15
    802044e0:	08f70463          	beq	a4,a5,80204568 <read_entry_name+0x9e>
        snstr(buffer, d->lne.name2, NELEM(d->lne.name2));
        buffer += NELEM(d->lne.name2);
        snstr(buffer, d->lne.name3, NELEM(d->lne.name3));
    } else {
        // assert: only "." and ".." will enter this branch
        memset(buffer, 0, CHAR_SHORT_NAME + 2);  // plus '.' and '\0'
    802044e4:	4635                	li	a2,13
    802044e6:	4581                	li	a1,0
    802044e8:	fffff097          	auipc	ra,0xfffff
    802044ec:	4cc080e7          	jalr	1228(ra) # 802039b4 <memset>
        int i;
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    802044f0:	00094703          	lbu	a4,0(s2)
    802044f4:	02000793          	li	a5,32
    802044f8:	0af70b63          	beq	a4,a5,802045ae <read_entry_name+0xe4>
    802044fc:	4785                	li	a5,1
    802044fe:	02000613          	li	a2,32
    80204502:	45a5                	li	a1,9
            buffer[i] = d->sne.name[i];
    80204504:	00f486b3          	add	a3,s1,a5
    80204508:	fee68fa3          	sb	a4,-1(a3)
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    8020450c:	0007869b          	sext.w	a3,a5
    80204510:	00f90733          	add	a4,s2,a5
    80204514:	00074703          	lbu	a4,0(a4)
    80204518:	00c70563          	beq	a4,a2,80204522 <read_entry_name+0x58>
    8020451c:	0785                	addi	a5,a5,1
    8020451e:	feb793e3          	bne	a5,a1,80204504 <read_entry_name+0x3a>
        }
        if (d->sne.name[8] != ' ') {
    80204522:	00894703          	lbu	a4,8(s2)
    80204526:	02000793          	li	a5,32
    8020452a:	00f70963          	beq	a4,a5,8020453c <read_entry_name+0x72>
            buffer[i++] = '.';
    8020452e:	00d487b3          	add	a5,s1,a3
    80204532:	02e00713          	li	a4,46
    80204536:	00e78023          	sb	a4,0(a5)
    8020453a:	2685                	addiw	a3,a3,1
        }
        for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
    8020453c:	00890793          	addi	a5,s2,8
    80204540:	94b6                	add	s1,s1,a3
    80204542:	092d                	addi	s2,s2,11
            if (d->sne.name[j] == ' ') {
    80204544:	02000693          	li	a3,32
    80204548:	0007c703          	lbu	a4,0(a5)
    8020454c:	00d70863          	beq	a4,a3,8020455c <read_entry_name+0x92>
                break;
            }
            buffer[i] = d->sne.name[j];
    80204550:	00e48023          	sb	a4,0(s1)
        for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
    80204554:	0785                	addi	a5,a5,1
    80204556:	0485                	addi	s1,s1,1
    80204558:	ff2798e3          	bne	a5,s2,80204548 <read_entry_name+0x7e>
        }
    }
}
    8020455c:	70a2                	ld	ra,40(sp)
    8020455e:	7402                	ld	s0,32(sp)
    80204560:	64e2                	ld	s1,24(sp)
    80204562:	6942                	ld	s2,16(sp)
    80204564:	6145                	addi	sp,sp,48
    80204566:	8082                	ret
        memmove(temp, d->lne.name1, sizeof(temp));
    80204568:	4629                	li	a2,10
    8020456a:	0585                	addi	a1,a1,1
    8020456c:	fd040513          	addi	a0,s0,-48
    80204570:	fffff097          	auipc	ra,0xfffff
    80204574:	4a0080e7          	jalr	1184(ra) # 80203a10 <memmove>
        snstr(buffer, temp, NELEM(d->lne.name1));
    80204578:	4615                	li	a2,5
    8020457a:	fd040593          	addi	a1,s0,-48
    8020457e:	8526                	mv	a0,s1
    80204580:	fffff097          	auipc	ra,0xfffff
    80204584:	5fe080e7          	jalr	1534(ra) # 80203b7e <snstr>
        snstr(buffer, d->lne.name2, NELEM(d->lne.name2));
    80204588:	4619                	li	a2,6
    8020458a:	00e90593          	addi	a1,s2,14
    8020458e:	00548513          	addi	a0,s1,5
    80204592:	fffff097          	auipc	ra,0xfffff
    80204596:	5ec080e7          	jalr	1516(ra) # 80203b7e <snstr>
        snstr(buffer, d->lne.name3, NELEM(d->lne.name3));
    8020459a:	4609                	li	a2,2
    8020459c:	01c90593          	addi	a1,s2,28
    802045a0:	00b48513          	addi	a0,s1,11
    802045a4:	fffff097          	auipc	ra,0xfffff
    802045a8:	5da080e7          	jalr	1498(ra) # 80203b7e <snstr>
    802045ac:	bf45                	j	8020455c <read_entry_name+0x92>
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    802045ae:	4681                	li	a3,0
    802045b0:	bf8d                	j	80204522 <read_entry_name+0x58>

00000000802045b2 <fat32_init>:
int fat32_init() {
    802045b2:	7139                	addi	sp,sp,-64
    802045b4:	fc06                	sd	ra,56(sp)
    802045b6:	f822                	sd	s0,48(sp)
    802045b8:	f426                	sd	s1,40(sp)
    802045ba:	f04a                	sd	s2,32(sp)
    802045bc:	ec4e                	sd	s3,24(sp)
    802045be:	e852                	sd	s4,16(sp)
    802045c0:	e456                	sd	s5,8(sp)
    802045c2:	0080                	addi	s0,sp,64
    struct buf* b = bread(0, 0);
    802045c4:	4581                	li	a1,0
    802045c6:	4501                	li	a0,0
    802045c8:	fffff097          	auipc	ra,0xfffff
    802045cc:	68a080e7          	jalr	1674(ra) # 80203c52 <bread>
    802045d0:	892a                	mv	s2,a0
    if (strncmp((char const*)(b->data + 82), "FAT32", 5))
    802045d2:	4615                	li	a2,5
    802045d4:	00005597          	auipc	a1,0x5
    802045d8:	3b458593          	addi	a1,a1,948 # 80209988 <__func__.0+0xc0>
    802045dc:	0aa50513          	addi	a0,a0,170
    802045e0:	fffff097          	auipc	ra,0xfffff
    802045e4:	4a4080e7          	jalr	1188(ra) # 80203a84 <strncmp>
    802045e8:	16051863          	bnez	a0,80204758 <fat32_init+0x1a6>
    memmove(&fat.bpb.byts_per_sec, b->data + 11,
    802045ec:	001e6497          	auipc	s1,0x1e6
    802045f0:	dcc48493          	addi	s1,s1,-564 # 803ea3b8 <fat>
    802045f4:	4609                	li	a2,2
    802045f6:	06390593          	addi	a1,s2,99
    802045fa:	001e6517          	auipc	a0,0x1e6
    802045fe:	dce50513          	addi	a0,a0,-562 # 803ea3c8 <fat+0x10>
    80204602:	fffff097          	auipc	ra,0xfffff
    80204606:	40e080e7          	jalr	1038(ra) # 80203a10 <memmove>
    fat.bpb.sec_per_clus = *(b->data + 13);
    8020460a:	06594683          	lbu	a3,101(s2)
    8020460e:	00d48923          	sb	a3,18(s1)
    fat.bpb.rsvd_sec_cnt = *(uint16*)(b->data + 14);
    80204612:	06695603          	lhu	a2,102(s2)
    80204616:	00c49a23          	sh	a2,20(s1)
    fat.bpb.fat_cnt = *(b->data + 16);
    8020461a:	06894703          	lbu	a4,104(s2)
    8020461e:	00e48b23          	sb	a4,22(s1)
    fat.bpb.hidd_sec = *(uint32*)(b->data + 28);
    80204622:	07492783          	lw	a5,116(s2)
    80204626:	cc9c                	sw	a5,24(s1)
    fat.bpb.tot_sec = *(uint32*)(b->data + 32);
    80204628:	07892783          	lw	a5,120(s2)
    8020462c:	ccdc                	sw	a5,28(s1)
    fat.bpb.fat_sz = *(uint32*)(b->data + 36);
    8020462e:	07c92583          	lw	a1,124(s2)
    80204632:	d08c                	sw	a1,32(s1)
    fat.bpb.root_clus = *(uint32*)(b->data + 44);
    80204634:	08492503          	lw	a0,132(s2)
    80204638:	d0c8                	sw	a0,36(s1)
        fat.bpb.rsvd_sec_cnt + fat.bpb.fat_cnt * fat.bpb.fat_sz;
    8020463a:	02b7073b          	mulw	a4,a4,a1
    8020463e:	9f31                	addw	a4,a4,a2
    fat.first_data_sec =
    80204640:	c098                	sw	a4,0(s1)
    fat.data_sec_cnt = fat.bpb.tot_sec - fat.first_data_sec;
    80204642:	9f99                	subw	a5,a5,a4
    80204644:	c0dc                	sw	a5,4(s1)
    fat.data_clus_cnt = fat.data_sec_cnt / fat.bpb.sec_per_clus;
    80204646:	02d7d7bb          	divuw	a5,a5,a3
    8020464a:	c49c                	sw	a5,8(s1)
    fat.byts_per_clus = fat.bpb.sec_per_clus * fat.bpb.byts_per_sec;
    8020464c:	0104d783          	lhu	a5,16(s1)
    80204650:	02d787bb          	mulw	a5,a5,a3
    80204654:	c4dc                	sw	a5,12(s1)
    brelse(b);
    80204656:	854a                	mv	a0,s2
    80204658:	fffff097          	auipc	ra,0xfffff
    8020465c:	75e080e7          	jalr	1886(ra) # 80203db6 <brelse>
    if (BSIZE != fat.bpb.byts_per_sec)
    80204660:	0104d703          	lhu	a4,16(s1)
    80204664:	20000793          	li	a5,512
    80204668:	10f71a63          	bne	a4,a5,8020477c <fat32_init+0x1ca>
    initLock(&ecache.lock, "ecache");
    8020466c:	00005597          	auipc	a1,0x5
    80204670:	35458593          	addi	a1,a1,852 # 802099c0 <__func__.0+0xf8>
    80204674:	001e6517          	auipc	a0,0x1e6
    80204678:	ed450513          	addi	a0,a0,-300 # 803ea548 <ecache>
    8020467c:	fffff097          	auipc	ra,0xfffff
    80204680:	1ec080e7          	jalr	492(ra) # 80203868 <initLock>
    memset(&root, 0, sizeof(root));
    80204684:	001e6497          	auipc	s1,0x1e6
    80204688:	d3448493          	addi	s1,s1,-716 # 803ea3b8 <fat>
    8020468c:	001e6917          	auipc	s2,0x1e6
    80204690:	d5490913          	addi	s2,s2,-684 # 803ea3e0 <root>
    80204694:	16800613          	li	a2,360
    80204698:	4581                	li	a1,0
    8020469a:	854a                	mv	a0,s2
    8020469c:	fffff097          	auipc	ra,0xfffff
    802046a0:	318080e7          	jalr	792(ra) # 802039b4 <memset>
    initsleeplock(&root.lock, "entry");
    802046a4:	00005597          	auipc	a1,0x5
    802046a8:	32458593          	addi	a1,a1,804 # 802099c8 <__func__.0+0x100>
    802046ac:	001e6517          	auipc	a0,0x1e6
    802046b0:	e6c50513          	addi	a0,a0,-404 # 803ea518 <root+0x138>
    802046b4:	fffff097          	auipc	ra,0xfffff
    802046b8:	086080e7          	jalr	134(ra) # 8020373a <initsleeplock>
    root.attribute = (ATTR_DIRECTORY | ATTR_SYSTEM);
    802046bc:	47d1                	li	a5,20
    802046be:	12f48423          	sb	a5,296(s1)
    root.first_clus = root.cur_clus = fat.bpb.root_clus;
    802046c2:	50dc                	lw	a5,36(s1)
    802046c4:	12f4aa23          	sw	a5,308(s1)
    802046c8:	12f4a623          	sw	a5,300(s1)
    root.valid = 1;
    802046cc:	4785                	li	a5,1
    802046ce:	12f49f23          	sh	a5,318(s1)
    root.prev = &root;
    802046d2:	1524bc23          	sd	s2,344(s1)
    root.next = &root;
    802046d6:	1524b823          	sd	s2,336(s1)
    for (struct dirent* de = ecache.entries;
    802046da:	001e6497          	auipc	s1,0x1e6
    802046de:	e8648493          	addi	s1,s1,-378 # 803ea560 <ecache+0x18>
        de->next = root.next;
    802046e2:	001e6917          	auipc	s2,0x1e6
    802046e6:	cd690913          	addi	s2,s2,-810 # 803ea3b8 <fat>
        de->prev = &root;
    802046ea:	001e6a97          	auipc	s5,0x1e6
    802046ee:	cf6a8a93          	addi	s5,s5,-778 # 803ea3e0 <root>
        initsleeplock(&de->lock, "entry");
    802046f2:	00005a17          	auipc	s4,0x5
    802046f6:	2d6a0a13          	addi	s4,s4,726 # 802099c8 <__func__.0+0x100>
         de < ecache.entries + ENTRY_CACHE_NUM; de++) {
    802046fa:	001ea997          	auipc	s3,0x1ea
    802046fe:	4b698993          	addi	s3,s3,1206 # 803eebb0 <devsw>
        de->dev = 0;
    80204702:	10048a23          	sb	zero,276(s1)
        de->valid = 0;
    80204706:	10049b23          	sh	zero,278(s1)
        de->ref = 0;
    8020470a:	1004ac23          	sw	zero,280(s1)
        de->dirty = 0;
    8020470e:	10048aa3          	sb	zero,277(s1)
        de->parent = 0;
    80204712:	1204b023          	sd	zero,288(s1)
        de->next = root.next;
    80204716:	15093783          	ld	a5,336(s2)
    8020471a:	12f4b423          	sd	a5,296(s1)
        de->prev = &root;
    8020471e:	1354b823          	sd	s5,304(s1)
        initsleeplock(&de->lock, "entry");
    80204722:	85d2                	mv	a1,s4
    80204724:	13848513          	addi	a0,s1,312
    80204728:	fffff097          	auipc	ra,0xfffff
    8020472c:	012080e7          	jalr	18(ra) # 8020373a <initsleeplock>
        root.next->prev = de;
    80204730:	15093783          	ld	a5,336(s2)
    80204734:	1297b823          	sd	s1,304(a5)
        root.next = de;
    80204738:	14993823          	sd	s1,336(s2)
         de < ecache.entries + ENTRY_CACHE_NUM; de++) {
    8020473c:	16848493          	addi	s1,s1,360
    80204740:	fd3491e3          	bne	s1,s3,80204702 <fat32_init+0x150>
}
    80204744:	4501                	li	a0,0
    80204746:	70e2                	ld	ra,56(sp)
    80204748:	7442                	ld	s0,48(sp)
    8020474a:	74a2                	ld	s1,40(sp)
    8020474c:	7902                	ld	s2,32(sp)
    8020474e:	69e2                	ld	s3,24(sp)
    80204750:	6a42                	ld	s4,16(sp)
    80204752:	6aa2                	ld	s5,8(sp)
    80204754:	6121                	addi	sp,sp,64
    80204756:	8082                	ret
        panic("not FAT32 volume");
    80204758:	00005697          	auipc	a3,0x5
    8020475c:	23868693          	addi	a3,a3,568 # 80209990 <__func__.0+0xc8>
    80204760:	00005617          	auipc	a2,0x5
    80204764:	35060613          	addi	a2,a2,848 # 80209ab0 <__func__.12>
    80204768:	04400593          	li	a1,68
    8020476c:	00005517          	auipc	a0,0x5
    80204770:	1cc50513          	addi	a0,a0,460 # 80209938 <__func__.0+0x70>
    80204774:	ffffc097          	auipc	ra,0xffffc
    80204778:	dce080e7          	jalr	-562(ra) # 80200542 <_panic_>
        panic("byts_per_sec != BSIZE");
    8020477c:	00005697          	auipc	a3,0x5
    80204780:	22c68693          	addi	a3,a3,556 # 802099a8 <__func__.0+0xe0>
    80204784:	00005617          	auipc	a2,0x5
    80204788:	32c60613          	addi	a2,a2,812 # 80209ab0 <__func__.12>
    8020478c:	06100593          	li	a1,97
    80204790:	00005517          	auipc	a0,0x5
    80204794:	1a850513          	addi	a0,a0,424 # 80209938 <__func__.0+0x70>
    80204798:	ffffc097          	auipc	ra,0xffffc
    8020479c:	daa080e7          	jalr	-598(ra) # 80200542 <_panic_>

00000000802047a0 <eread>:
    if (off > entry->file_size || off + n < off ||
    802047a0:	10852783          	lw	a5,264(a0)
    802047a4:	0ed7e863          	bltu	a5,a3,80204894 <eread+0xf4>
int eread(struct dirent* entry, int user_dst, u64 dst, uint off, uint n) {
    802047a8:	711d                	addi	sp,sp,-96
    802047aa:	ec86                	sd	ra,88(sp)
    802047ac:	e8a2                	sd	s0,80(sp)
    802047ae:	e4a6                	sd	s1,72(sp)
    802047b0:	e0ca                	sd	s2,64(sp)
    802047b2:	fc4e                	sd	s3,56(sp)
    802047b4:	f852                	sd	s4,48(sp)
    802047b6:	f456                	sd	s5,40(sp)
    802047b8:	f05a                	sd	s6,32(sp)
    802047ba:	ec5e                	sd	s7,24(sp)
    802047bc:	e862                	sd	s8,16(sp)
    802047be:	e466                	sd	s9,8(sp)
    802047c0:	e06a                	sd	s10,0(sp)
    802047c2:	1080                	addi	s0,sp,96
    802047c4:	8a2a                	mv	s4,a0
    802047c6:	8bae                	mv	s7,a1
    802047c8:	8ab2                	mv	s5,a2
    802047ca:	8936                	mv	s2,a3
    802047cc:	8b3a                	mv	s6,a4
    if (off > entry->file_size || off + n < off ||
    802047ce:	9eb9                	addw	a3,a3,a4
        return 0;
    802047d0:	4501                	li	a0,0
    if (off > entry->file_size || off + n < off ||
    802047d2:	0b26e163          	bltu	a3,s2,80204874 <eread+0xd4>
    802047d6:	100a4703          	lbu	a4,256(s4)
    802047da:	8b41                	andi	a4,a4,16
    802047dc:	ef41                	bnez	a4,80204874 <eread+0xd4>
    if (off + n > entry->file_size) {
    802047de:	00d7f463          	bgeu	a5,a3,802047e6 <eread+0x46>
        n = entry->file_size - off;
    802047e2:	41278b3b          	subw	s6,a5,s2
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
    802047e6:	10ca2703          	lw	a4,268(s4)
    802047ea:	100007b7          	lui	a5,0x10000
    802047ee:	17dd                	addi	a5,a5,-9
    802047f0:	06e7ef63          	bltu	a5,a4,8020486e <eread+0xce>
    802047f4:	080b0e63          	beqz	s6,80204890 <eread+0xf0>
    802047f8:	4981                	li	s3,0
        m = fat.byts_per_clus - off % fat.byts_per_clus;
    802047fa:	001e6c97          	auipc	s9,0x1e6
    802047fe:	bbec8c93          	addi	s9,s9,-1090 # 803ea3b8 <fat>
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
    80204802:	8c3e                	mv	s8,a5
    80204804:	a82d                	j	8020483e <eread+0x9e>
    80204806:	00048d1b          	sext.w	s10,s1
        if (rw_clus(entry->cur_clus, 0, user_dst, dst, off % fat.byts_per_clus,
    8020480a:	87ea                	mv	a5,s10
    8020480c:	86d6                	mv	a3,s5
    8020480e:	865e                	mv	a2,s7
    80204810:	4581                	li	a1,0
    80204812:	10ca2503          	lw	a0,268(s4)
    80204816:	00000097          	auipc	ra,0x0
    8020481a:	a32080e7          	jalr	-1486(ra) # 80204248 <rw_clus>
    8020481e:	2501                	sext.w	a0,a0
    80204820:	04ad1863          	bne	s10,a0,80204870 <eread+0xd0>
         tot += m, off += m, dst += m) {
    80204824:	013489bb          	addw	s3,s1,s3
    80204828:	0124893b          	addw	s2,s1,s2
    8020482c:	1482                	slli	s1,s1,0x20
    8020482e:	9081                	srli	s1,s1,0x20
    80204830:	9aa6                	add	s5,s5,s1
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
    80204832:	10ca2783          	lw	a5,268(s4)
    80204836:	02fc6d63          	bltu	s8,a5,80204870 <eread+0xd0>
    8020483a:	0369fb63          	bgeu	s3,s6,80204870 <eread+0xd0>
        reloc_clus(entry, off, 0);
    8020483e:	4601                	li	a2,0
    80204840:	85ca                	mv	a1,s2
    80204842:	8552                	mv	a0,s4
    80204844:	00000097          	auipc	ra,0x0
    80204848:	8e8080e7          	jalr	-1816(ra) # 8020412c <reloc_clus>
        m = fat.byts_per_clus - off % fat.byts_per_clus;
    8020484c:	00cca683          	lw	a3,12(s9)
    80204850:	02d9763b          	remuw	a2,s2,a3
    80204854:	0006071b          	sext.w	a4,a2
        if (n - tot < m) {
    80204858:	413b07bb          	subw	a5,s6,s3
        m = fat.byts_per_clus - off % fat.byts_per_clus;
    8020485c:	9e91                	subw	a3,a3,a2
    8020485e:	84be                	mv	s1,a5
    80204860:	2781                	sext.w	a5,a5
    80204862:	0006861b          	sext.w	a2,a3
    80204866:	faf670e3          	bgeu	a2,a5,80204806 <eread+0x66>
    8020486a:	84b6                	mv	s1,a3
    8020486c:	bf69                	j	80204806 <eread+0x66>
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
    8020486e:	4981                	li	s3,0
    return tot;
    80204870:	0009851b          	sext.w	a0,s3
}
    80204874:	60e6                	ld	ra,88(sp)
    80204876:	6446                	ld	s0,80(sp)
    80204878:	64a6                	ld	s1,72(sp)
    8020487a:	6906                	ld	s2,64(sp)
    8020487c:	79e2                	ld	s3,56(sp)
    8020487e:	7a42                	ld	s4,48(sp)
    80204880:	7aa2                	ld	s5,40(sp)
    80204882:	7b02                	ld	s6,32(sp)
    80204884:	6be2                	ld	s7,24(sp)
    80204886:	6c42                	ld	s8,16(sp)
    80204888:	6ca2                	ld	s9,8(sp)
    8020488a:	6d02                	ld	s10,0(sp)
    8020488c:	6125                	addi	sp,sp,96
    8020488e:	8082                	ret
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
    80204890:	89da                	mv	s3,s6
    80204892:	bff9                	j	80204870 <eread+0xd0>
        return 0;
    80204894:	4501                	li	a0,0
}
    80204896:	8082                	ret

0000000080204898 <ewrite>:
    if (off > entry->file_size || off + n < off ||
    80204898:	10852783          	lw	a5,264(a0)
    8020489c:	0ed7e463          	bltu	a5,a3,80204984 <ewrite+0xec>
int ewrite(struct dirent* entry, int user_src, u64 src, uint off, uint n) {
    802048a0:	711d                	addi	sp,sp,-96
    802048a2:	ec86                	sd	ra,88(sp)
    802048a4:	e8a2                	sd	s0,80(sp)
    802048a6:	e4a6                	sd	s1,72(sp)
    802048a8:	e0ca                	sd	s2,64(sp)
    802048aa:	fc4e                	sd	s3,56(sp)
    802048ac:	f852                	sd	s4,48(sp)
    802048ae:	f456                	sd	s5,40(sp)
    802048b0:	f05a                	sd	s6,32(sp)
    802048b2:	ec5e                	sd	s7,24(sp)
    802048b4:	e862                	sd	s8,16(sp)
    802048b6:	e466                	sd	s9,8(sp)
    802048b8:	1080                	addi	s0,sp,96
    802048ba:	8aaa                	mv	s5,a0
    802048bc:	8bae                	mv	s7,a1
    802048be:	8a32                	mv	s4,a2
    802048c0:	8936                	mv	s2,a3
    802048c2:	8b3a                	mv	s6,a4
    if (off > entry->file_size || off + n < off ||
    802048c4:	00e687bb          	addw	a5,a3,a4
    802048c8:	0cd7e063          	bltu	a5,a3,80204988 <ewrite+0xf0>
        (u64)off + n > 0xffffffff || (entry->attribute & ATTR_READ_ONLY)) {
    802048cc:	02069793          	slli	a5,a3,0x20
    802048d0:	9381                	srli	a5,a5,0x20
    802048d2:	1702                	slli	a4,a4,0x20
    802048d4:	9301                	srli	a4,a4,0x20
    802048d6:	97ba                	add	a5,a5,a4
    if (off > entry->file_size || off + n < off ||
    802048d8:	577d                	li	a4,-1
    802048da:	9301                	srli	a4,a4,0x20
    802048dc:	0af76863          	bltu	a4,a5,8020498c <ewrite+0xf4>
        (u64)off + n > 0xffffffff || (entry->attribute & ATTR_READ_ONLY)) {
    802048e0:	10054783          	lbu	a5,256(a0)
    802048e4:	8b85                	andi	a5,a5,1
    802048e6:	e7cd                	bnez	a5,80204990 <ewrite+0xf8>
    if (entry->first_clus ==
    802048e8:	10452783          	lw	a5,260(a0)
    802048ec:	cb89                	beqz	a5,802048fe <ewrite+0x66>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    802048ee:	080b0963          	beqz	s6,80204980 <ewrite+0xe8>
    802048f2:	4981                	li	s3,0
        m = fat.byts_per_clus - off % fat.byts_per_clus;
    802048f4:	001e6c17          	auipc	s8,0x1e6
    802048f8:	ac4c0c13          	addi	s8,s8,-1340 # 803ea3b8 <fat>
    802048fc:	a891                	j	80204950 <ewrite+0xb8>
        entry->cur_clus = entry->first_clus = alloc_clus(entry->dev);
    802048fe:	11454503          	lbu	a0,276(a0)
    80204902:	fffff097          	auipc	ra,0xfffff
    80204906:	654080e7          	jalr	1620(ra) # 80203f56 <alloc_clus>
    8020490a:	2501                	sext.w	a0,a0
    8020490c:	10aaa223          	sw	a0,260(s5)
    80204910:	10aaa623          	sw	a0,268(s5)
        entry->clus_cnt = 0;
    80204914:	100aa823          	sw	zero,272(s5)
        entry->dirty = 1;
    80204918:	4785                	li	a5,1
    8020491a:	10fa8aa3          	sb	a5,277(s5)
    8020491e:	bfc1                	j	802048ee <ewrite+0x56>
    80204920:	00048c9b          	sext.w	s9,s1
        if (rw_clus(entry->cur_clus, 1, user_src, src, off % fat.byts_per_clus,
    80204924:	87e6                	mv	a5,s9
    80204926:	86d2                	mv	a3,s4
    80204928:	865e                	mv	a2,s7
    8020492a:	4585                	li	a1,1
    8020492c:	10caa503          	lw	a0,268(s5)
    80204930:	00000097          	auipc	ra,0x0
    80204934:	918080e7          	jalr	-1768(ra) # 80204248 <rw_clus>
    80204938:	2501                	sext.w	a0,a0
    8020493a:	04ac9d63          	bne	s9,a0,80204994 <ewrite+0xfc>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    8020493e:	013489bb          	addw	s3,s1,s3
    80204942:	0124893b          	addw	s2,s1,s2
    80204946:	1482                	slli	s1,s1,0x20
    80204948:	9081                	srli	s1,s1,0x20
    8020494a:	9a26                	add	s4,s4,s1
    8020494c:	0569f463          	bgeu	s3,s6,80204994 <ewrite+0xfc>
        reloc_clus(entry, off, 1);
    80204950:	4605                	li	a2,1
    80204952:	85ca                	mv	a1,s2
    80204954:	8556                	mv	a0,s5
    80204956:	fffff097          	auipc	ra,0xfffff
    8020495a:	7d6080e7          	jalr	2006(ra) # 8020412c <reloc_clus>
        m = fat.byts_per_clus - off % fat.byts_per_clus;
    8020495e:	00cc2683          	lw	a3,12(s8)
    80204962:	02d9763b          	remuw	a2,s2,a3
    80204966:	0006071b          	sext.w	a4,a2
        if (n - tot < m) {
    8020496a:	413b07bb          	subw	a5,s6,s3
        m = fat.byts_per_clus - off % fat.byts_per_clus;
    8020496e:	9e91                	subw	a3,a3,a2
    80204970:	84be                	mv	s1,a5
    80204972:	2781                	sext.w	a5,a5
    80204974:	0006861b          	sext.w	a2,a3
    80204978:	faf674e3          	bgeu	a2,a5,80204920 <ewrite+0x88>
    8020497c:	84b6                	mv	s1,a3
    8020497e:	b74d                	j	80204920 <ewrite+0x88>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    80204980:	89da                	mv	s3,s6
    80204982:	a015                	j	802049a6 <ewrite+0x10e>
        return -1;
    80204984:	557d                	li	a0,-1
}
    80204986:	8082                	ret
        return -1;
    80204988:	557d                	li	a0,-1
    8020498a:	a005                	j	802049aa <ewrite+0x112>
    8020498c:	557d                	li	a0,-1
    8020498e:	a831                	j	802049aa <ewrite+0x112>
    80204990:	557d                	li	a0,-1
    80204992:	a821                	j	802049aa <ewrite+0x112>
        if (off > entry->file_size) {
    80204994:	108aa783          	lw	a5,264(s5)
    80204998:	0127f763          	bgeu	a5,s2,802049a6 <ewrite+0x10e>
            entry->file_size = off;
    8020499c:	112aa423          	sw	s2,264(s5)
            entry->dirty = 1;
    802049a0:	4785                	li	a5,1
    802049a2:	10fa8aa3          	sb	a5,277(s5)
    return tot;
    802049a6:	0009851b          	sext.w	a0,s3
}
    802049aa:	60e6                	ld	ra,88(sp)
    802049ac:	6446                	ld	s0,80(sp)
    802049ae:	64a6                	ld	s1,72(sp)
    802049b0:	6906                	ld	s2,64(sp)
    802049b2:	79e2                	ld	s3,56(sp)
    802049b4:	7a42                	ld	s4,48(sp)
    802049b6:	7aa2                	ld	s5,40(sp)
    802049b8:	7b02                	ld	s6,32(sp)
    802049ba:	6be2                	ld	s7,24(sp)
    802049bc:	6c42                	ld	s8,16(sp)
    802049be:	6ca2                	ld	s9,8(sp)
    802049c0:	6125                	addi	sp,sp,96
    802049c2:	8082                	ret

00000000802049c4 <formatname>:
char* formatname(char* name) {
    802049c4:	7179                	addi	sp,sp,-48
    802049c6:	f406                	sd	ra,40(sp)
    802049c8:	f022                	sd	s0,32(sp)
    802049ca:	ec26                	sd	s1,24(sp)
    802049cc:	e84a                	sd	s2,16(sp)
    802049ce:	e44e                	sd	s3,8(sp)
    802049d0:	e052                	sd	s4,0(sp)
    802049d2:	1800                	addi	s0,sp,48
    802049d4:	84aa                	mv	s1,a0
    while (*name == ' ' || *name == '.') {
    802049d6:	02000793          	li	a5,32
    802049da:	02e00713          	li	a4,46
    802049de:	a011                	j	802049e2 <formatname+0x1e>
        name++;
    802049e0:	0485                	addi	s1,s1,1
    while (*name == ' ' || *name == '.') {
    802049e2:	0004c583          	lbu	a1,0(s1)
    802049e6:	fef58de3          	beq	a1,a5,802049e0 <formatname+0x1c>
    802049ea:	fee58be3          	beq	a1,a4,802049e0 <formatname+0x1c>
    for (p = name; *p; p++) {
    802049ee:	c1b9                	beqz	a1,80204a34 <formatname+0x70>
    802049f0:	8926                	mv	s2,s1
        if (c < 0x20 || strchr(illegal, c)) {
    802049f2:	49fd                	li	s3,31
    802049f4:	00006a17          	auipc	s4,0x6
    802049f8:	b7ca0a13          	addi	s4,s4,-1156 # 8020a570 <illegal.8>
    802049fc:	02b9fe63          	bgeu	s3,a1,80204a38 <formatname+0x74>
    80204a00:	8552                	mv	a0,s4
    80204a02:	fffff097          	auipc	ra,0xfffff
    80204a06:	158080e7          	jalr	344(ra) # 80203b5a <strchr>
    80204a0a:	e121                	bnez	a0,80204a4a <formatname+0x86>
    for (p = name; *p; p++) {
    80204a0c:	0905                	addi	s2,s2,1
    80204a0e:	00094583          	lbu	a1,0(s2)
    80204a12:	f5ed                	bnez	a1,802049fc <formatname+0x38>
        if (*p != ' ') {
    80204a14:	02000693          	li	a3,32
    80204a18:	874a                	mv	a4,s2
    while (p-- > name) {
    80204a1a:	0124fb63          	bgeu	s1,s2,80204a30 <formatname+0x6c>
        if (*p != ' ') {
    80204a1e:	197d                	addi	s2,s2,-1
    80204a20:	00094783          	lbu	a5,0(s2)
    80204a24:	fed78ae3          	beq	a5,a3,80204a18 <formatname+0x54>
            p[1] = '\0';
    80204a28:	00070023          	sb	zero,0(a4)
            break;
    80204a2c:	8526                	mv	a0,s1
    80204a2e:	a031                	j	80204a3a <formatname+0x76>
    80204a30:	8526                	mv	a0,s1
    80204a32:	a021                	j	80204a3a <formatname+0x76>
    for (p = name; *p; p++) {
    80204a34:	8526                	mv	a0,s1
    80204a36:	a011                	j	80204a3a <formatname+0x76>
            return 0;
    80204a38:	4501                	li	a0,0
}
    80204a3a:	70a2                	ld	ra,40(sp)
    80204a3c:	7402                	ld	s0,32(sp)
    80204a3e:	64e2                	ld	s1,24(sp)
    80204a40:	6942                	ld	s2,16(sp)
    80204a42:	69a2                	ld	s3,8(sp)
    80204a44:	6a02                	ld	s4,0(sp)
    80204a46:	6145                	addi	sp,sp,48
    80204a48:	8082                	ret
            return 0;
    80204a4a:	4501                	li	a0,0
    80204a4c:	b7fd                	j	80204a3a <formatname+0x76>

0000000080204a4e <cal_checksum>:
uint8 cal_checksum(uchar* shortname) {
    80204a4e:	1141                	addi	sp,sp,-16
    80204a50:	e422                	sd	s0,8(sp)
    80204a52:	0800                	addi	s0,sp,16
    80204a54:	87aa                	mv	a5,a0
    for (int i = CHAR_SHORT_NAME; i != 0; i--) {
    80204a56:	00b50613          	addi	a2,a0,11
    uint8 sum = 0;
    80204a5a:	4501                	li	a0,0
        sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1) + *shortname++;
    80204a5c:	0075171b          	slliw	a4,a0,0x7
    80204a60:	0785                	addi	a5,a5,1
    80204a62:	0015551b          	srliw	a0,a0,0x1
    80204a66:	fff7c683          	lbu	a3,-1(a5) # fffffff <_start-0x70200001>
    80204a6a:	9d35                	addw	a0,a0,a3
    80204a6c:	953a                	add	a0,a0,a4
    80204a6e:	0ff57513          	zext.b	a0,a0
    for (int i = CHAR_SHORT_NAME; i != 0; i--) {
    80204a72:	fef615e3          	bne	a2,a5,80204a5c <cal_checksum+0xe>
}
    80204a76:	6422                	ld	s0,8(sp)
    80204a78:	0141                	addi	sp,sp,16
    80204a7a:	8082                	ret

0000000080204a7c <emake>:
void emake(struct dirent* dp, struct dirent* ep, uint off) {
    80204a7c:	7171                	addi	sp,sp,-176
    80204a7e:	f506                	sd	ra,168(sp)
    80204a80:	f122                	sd	s0,160(sp)
    80204a82:	ed26                	sd	s1,152(sp)
    80204a84:	e94a                	sd	s2,144(sp)
    80204a86:	e54e                	sd	s3,136(sp)
    80204a88:	e152                	sd	s4,128(sp)
    80204a8a:	fcd6                	sd	s5,120(sp)
    80204a8c:	f8da                	sd	s6,112(sp)
    80204a8e:	f4de                	sd	s7,104(sp)
    80204a90:	f0e2                	sd	s8,96(sp)
    80204a92:	ece6                	sd	s9,88(sp)
    80204a94:	e8ea                	sd	s10,80(sp)
    80204a96:	e4ee                	sd	s11,72(sp)
    80204a98:	1900                	addi	s0,sp,176
    if (!(dp->attribute & ATTR_DIRECTORY))
    80204a9a:	10054783          	lbu	a5,256(a0)
    80204a9e:	8bc1                	andi	a5,a5,16
    80204aa0:	c3d5                	beqz	a5,80204b44 <emake+0xc8>
    80204aa2:	8aaa                	mv	s5,a0
    80204aa4:	8cae                	mv	s9,a1
    80204aa6:	8c32                	mv	s8,a2
    if (off % sizeof(union dentry))
    80204aa8:	01f67793          	andi	a5,a2,31
    80204aac:	efd5                	bnez	a5,80204b68 <emake+0xec>
    memset(&de, 0, sizeof(de));
    80204aae:	02000613          	li	a2,32
    80204ab2:	4581                	li	a1,0
    80204ab4:	f7040513          	addi	a0,s0,-144
    80204ab8:	fffff097          	auipc	ra,0xfffff
    80204abc:	efc080e7          	jalr	-260(ra) # 802039b4 <memset>
    if (off <= 32) {
    80204ac0:	02000793          	li	a5,32
    80204ac4:	0f87e063          	bltu	a5,s8,80204ba4 <emake+0x128>
        if (off == 0) {
    80204ac8:	0c0c1263          	bnez	s8,80204b8c <emake+0x110>
            strncpy(de.sne.name, ".          ", sizeof(de.sne.name));
    80204acc:	462d                	li	a2,11
    80204ace:	00005597          	auipc	a1,0x5
    80204ad2:	f2a58593          	addi	a1,a1,-214 # 802099f8 <__func__.0+0x130>
    80204ad6:	f7040513          	addi	a0,s0,-144
    80204ada:	fffff097          	auipc	ra,0xfffff
    80204ade:	fe6080e7          	jalr	-26(ra) # 80203ac0 <strncpy>
        de.sne.attr = ATTR_DIRECTORY;
    80204ae2:	47c1                	li	a5,16
    80204ae4:	f6f40da3          	sb	a5,-133(s0)
            (uint16)(ep->first_clus >> 16);  // first clus high 16 bits
    80204ae8:	104ca783          	lw	a5,260(s9)
    80204aec:	0107d71b          	srliw	a4,a5,0x10
    80204af0:	f8e41223          	sh	a4,-124(s0)
        de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff);  // low 16 bits
    80204af4:	f8f41523          	sh	a5,-118(s0)
        de.sne.file_size = 0;  // filesize is updated in eupdate()
    80204af8:	f8042623          	sw	zero,-116(s0)
        off = reloc_clus(dp, off, 1);
    80204afc:	4605                	li	a2,1
    80204afe:	85e2                	mv	a1,s8
    80204b00:	8556                	mv	a0,s5
    80204b02:	fffff097          	auipc	ra,0xfffff
    80204b06:	62a080e7          	jalr	1578(ra) # 8020412c <reloc_clus>
        rw_clus(dp->cur_clus, 1, 0, (u64)&de, off, sizeof(de));
    80204b0a:	02000793          	li	a5,32
    80204b0e:	0005071b          	sext.w	a4,a0
    80204b12:	f7040693          	addi	a3,s0,-144
    80204b16:	4601                	li	a2,0
    80204b18:	4585                	li	a1,1
    80204b1a:	10caa503          	lw	a0,268(s5)
    80204b1e:	fffff097          	auipc	ra,0xfffff
    80204b22:	72a080e7          	jalr	1834(ra) # 80204248 <rw_clus>
}
    80204b26:	70aa                	ld	ra,168(sp)
    80204b28:	740a                	ld	s0,160(sp)
    80204b2a:	64ea                	ld	s1,152(sp)
    80204b2c:	694a                	ld	s2,144(sp)
    80204b2e:	69aa                	ld	s3,136(sp)
    80204b30:	6a0a                	ld	s4,128(sp)
    80204b32:	7ae6                	ld	s5,120(sp)
    80204b34:	7b46                	ld	s6,112(sp)
    80204b36:	7ba6                	ld	s7,104(sp)
    80204b38:	7c06                	ld	s8,96(sp)
    80204b3a:	6ce6                	ld	s9,88(sp)
    80204b3c:	6d46                	ld	s10,80(sp)
    80204b3e:	6da6                	ld	s11,72(sp)
    80204b40:	614d                	addi	sp,sp,176
    80204b42:	8082                	ret
        panic("emake: not dir");
    80204b44:	00005697          	auipc	a3,0x5
    80204b48:	e8c68693          	addi	a3,a3,-372 # 802099d0 <__func__.0+0x108>
    80204b4c:	00005617          	auipc	a2,0x5
    80204b50:	14c60613          	addi	a2,a2,332 # 80209c98 <__func__.7>
    80204b54:	20900593          	li	a1,521
    80204b58:	00005517          	auipc	a0,0x5
    80204b5c:	de050513          	addi	a0,a0,-544 # 80209938 <__func__.0+0x70>
    80204b60:	ffffc097          	auipc	ra,0xffffc
    80204b64:	9e2080e7          	jalr	-1566(ra) # 80200542 <_panic_>
        panic("emake: not aligned");
    80204b68:	00005697          	auipc	a3,0x5
    80204b6c:	e7868693          	addi	a3,a3,-392 # 802099e0 <__func__.0+0x118>
    80204b70:	00005617          	auipc	a2,0x5
    80204b74:	12860613          	addi	a2,a2,296 # 80209c98 <__func__.7>
    80204b78:	20b00593          	li	a1,523
    80204b7c:	00005517          	auipc	a0,0x5
    80204b80:	dbc50513          	addi	a0,a0,-580 # 80209938 <__func__.0+0x70>
    80204b84:	ffffc097          	auipc	ra,0xffffc
    80204b88:	9be080e7          	jalr	-1602(ra) # 80200542 <_panic_>
            strncpy(de.sne.name, "..         ", sizeof(de.sne.name));
    80204b8c:	462d                	li	a2,11
    80204b8e:	00005597          	auipc	a1,0x5
    80204b92:	e7a58593          	addi	a1,a1,-390 # 80209a08 <__func__.0+0x140>
    80204b96:	f7040513          	addi	a0,s0,-144
    80204b9a:	fffff097          	auipc	ra,0xfffff
    80204b9e:	f26080e7          	jalr	-218(ra) # 80203ac0 <strncpy>
    80204ba2:	b781                	j	80204ae2 <emake+0x66>
        int entcnt = (strlen(ep->filename) + CHAR_LONG_NAME - 1) /
    80204ba4:	8966                	mv	s2,s9
    80204ba6:	8566                	mv	a0,s9
    80204ba8:	fffff097          	auipc	ra,0xfffff
    80204bac:	f88080e7          	jalr	-120(ra) # 80203b30 <strlen>
    80204bb0:	f4a43c23          	sd	a0,-168(s0)
    80204bb4:	00c5071b          	addiw	a4,a0,12
    80204bb8:	47b5                	li	a5,13
    80204bba:	02f747bb          	divw	a5,a4,a5
    80204bbe:	f4f42a23          	sw	a5,-172(s0)
    80204bc2:	00078d1b          	sext.w	s10,a5
        memset(shortname, 0, sizeof(shortname));
    80204bc6:	4631                	li	a2,12
    80204bc8:	4581                	li	a1,0
    80204bca:	f6040513          	addi	a0,s0,-160
    80204bce:	fffff097          	auipc	ra,0xfffff
    80204bd2:	de6080e7          	jalr	-538(ra) # 802039b4 <memset>
    for (int j = strlen(name) - 1; j >= 0; j--) {
    80204bd6:	8566                	mv	a0,s9
    80204bd8:	fffff097          	auipc	ra,0xfffff
    80204bdc:	f58080e7          	jalr	-168(ra) # 80203b30 <strlen>
    80204be0:	fff5079b          	addiw	a5,a0,-1
    80204be4:	0207cb63          	bltz	a5,80204c1a <emake+0x19e>
    80204be8:	97e6                	add	a5,a5,s9
    80204bea:	ffec8693          	addi	a3,s9,-2
    80204bee:	96aa                	add	a3,a3,a0
    80204bf0:	fff5071b          	addiw	a4,a0,-1
    80204bf4:	1702                	slli	a4,a4,0x20
    80204bf6:	9301                	srli	a4,a4,0x20
    80204bf8:	8e99                	sub	a3,a3,a4
        if (name[j] == '.') {
    80204bfa:	02e00613          	li	a2,46
    80204bfe:	89be                	mv	s3,a5
    80204c00:	0007c703          	lbu	a4,0(a5)
    80204c04:	00c70663          	beq	a4,a2,80204c10 <emake+0x194>
    for (int j = strlen(name) - 1; j >= 0; j--) {
    80204c08:	17fd                	addi	a5,a5,-1
    80204c0a:	fed79ae3          	bne	a5,a3,80204bfe <emake+0x182>
    char c, *p = name;
    80204c0e:	89e6                	mv	s3,s9
        shortname[i++] = c;
    80204c10:	4481                	li	s1,0
        if (i == 8 && p) {
    80204c12:	4b21                	li	s6,8
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    80204c14:	4ba9                	li	s7,10
        if (c >= 'a' && c <= 'z') {
    80204c16:	4de5                	li	s11,25
    80204c18:	a0c1                	j	80204cd8 <emake+0x25c>
    char c, *p = name;
    80204c1a:	89e6                	mv	s3,s9
    80204c1c:	bfd5                	j	80204c10 <emake+0x194>
        if (i == 8 && p) {
    80204c1e:	22098063          	beqz	s3,80204e3e <emake+0x3c2>
            if (p + 1 < name) {
    80204c22:	0985                	addi	s3,s3,1
    80204c24:	0949f163          	bgeu	s3,s4,80204ca6 <emake+0x22a>
    80204c28:	f6040793          	addi	a5,s0,-160
    80204c2c:	97a6                	add	a5,a5,s1
        shortname[i++] = ' ';
    80204c2e:	02000693          	li	a3,32
    while (i < CHAR_SHORT_NAME) {
    80204c32:	4729                	li	a4,10
        shortname[i++] = ' ';
    80204c34:	2485                	addiw	s1,s1,1
    80204c36:	00d78023          	sb	a3,0(a5)
    while (i < CHAR_SHORT_NAME) {
    80204c3a:	0785                	addi	a5,a5,1
    80204c3c:	fe975ce3          	bge	a4,s1,80204c34 <emake+0x1b8>
        de.lne.checksum = cal_checksum((uchar*)shortname);
    80204c40:	f6040513          	addi	a0,s0,-160
    80204c44:	00000097          	auipc	ra,0x0
    80204c48:	e0a080e7          	jalr	-502(ra) # 80204a4e <cal_checksum>
    80204c4c:	f6a40ea3          	sb	a0,-131(s0)
        de.lne.attr = ATTR_LONG_NAME;
    80204c50:	47bd                	li	a5,15
    80204c52:	f6f40da3          	sb	a5,-133(s0)
        for (int i = entcnt; i > 0; i--) {
    80204c56:	f5843783          	ld	a5,-168(s0)
    80204c5a:	12f05f63          	blez	a5,80204d98 <emake+0x31c>
    80204c5e:	f5442783          	lw	a5,-172(s0)
    80204c62:	fff78d9b          	addiw	s11,a5,-1
    80204c66:	001d9b1b          	slliw	s6,s11,0x1
    80204c6a:	01bb0b3b          	addw	s6,s6,s11
    80204c6e:	002b1b1b          	slliw	s6,s6,0x2
    80204c72:	01bb0b3b          	addw	s6,s6,s11
    80204c76:	9b66                	add	s6,s6,s9
    80204c78:	8a6a                	mv	s4,s10
    80204c7a:	8be2                	mv	s7,s8
            int end = 0;
    80204c7c:	4981                	li	s3,0
    80204c7e:	0ff00913          	li	s2,255
                switch (j) {
    80204c82:	44ad                	li	s1,11
    80204c84:	a0c5                	j	80204d64 <emake+0x2e8>
            if (name > p) {  // last '.'
    80204c86:	0549f663          	bgeu	s3,s4,80204cd2 <emake+0x256>
                memset(shortname + i, ' ', 8 - i);
    80204c8a:	47a1                	li	a5,8
    80204c8c:	4097863b          	subw	a2,a5,s1
    80204c90:	02000593          	li	a1,32
    80204c94:	f6040793          	addi	a5,s0,-160
    80204c98:	00978533          	add	a0,a5,s1
    80204c9c:	fffff097          	auipc	ra,0xfffff
    80204ca0:	d18080e7          	jalr	-744(ra) # 802039b4 <memset>
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    80204ca4:	89d2                	mv	s3,s4
        shortname[i++] = c;
    80204ca6:	8a4e                	mv	s4,s3
    80204ca8:	84da                	mv	s1,s6
    80204caa:	4981                	li	s3,0
    80204cac:	a02d                	j	80204cd6 <emake+0x25a>
            if (strchr(illegal, c) != NULL) {
    80204cae:	85ca                	mv	a1,s2
    80204cb0:	00092517          	auipc	a0,0x92
    80204cb4:	35850513          	addi	a0,a0,856 # 80297008 <illegal.6>
    80204cb8:	fffff097          	auipc	ra,0xfffff
    80204cbc:	ea2080e7          	jalr	-350(ra) # 80203b5a <strchr>
    80204cc0:	c119                	beqz	a0,80204cc6 <emake+0x24a>
                c = '_';
    80204cc2:	05f00913          	li	s2,95
        shortname[i++] = c;
    80204cc6:	f9048793          	addi	a5,s1,-112
    80204cca:	97a2                	add	a5,a5,s0
    80204ccc:	fd278823          	sb	s2,-48(a5)
    80204cd0:	2485                	addiw	s1,s1,1
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    80204cd2:	f69bc7e3          	blt	s7,s1,80204c40 <emake+0x1c4>
        shortname[i++] = c;
    80204cd6:	8952                	mv	s2,s4
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    80204cd8:	00190a13          	addi	s4,s2,1
    80204cdc:	00094903          	lbu	s2,0(s2)
    80204ce0:	02090663          	beqz	s2,80204d0c <emake+0x290>
        if (i == 8 && p) {
    80204ce4:	f3648de3          	beq	s1,s6,80204c1e <emake+0x1a2>
        if (c == ' ') {
    80204ce8:	02000793          	li	a5,32
    80204cec:	fef903e3          	beq	s2,a5,80204cd2 <emake+0x256>
        if (c == '.') {
    80204cf0:	02e00793          	li	a5,46
    80204cf4:	f8f909e3          	beq	s2,a5,80204c86 <emake+0x20a>
        if (c >= 'a' && c <= 'z') {
    80204cf8:	f9f9079b          	addiw	a5,s2,-97
    80204cfc:	0ff7f793          	zext.b	a5,a5
    80204d00:	fafde7e3          	bltu	s11,a5,80204cae <emake+0x232>
            c += 'A' - 'a';
    80204d04:	3901                	addiw	s2,s2,-32
    80204d06:	0ff97913          	zext.b	s2,s2
    80204d0a:	bf75                	j	80204cc6 <emake+0x24a>
    while (i < CHAR_SHORT_NAME) {
    80204d0c:	47a9                	li	a5,10
    80204d0e:	f097dde3          	bge	a5,s1,80204c28 <emake+0x1ac>
    80204d12:	b73d                	j	80204c40 <emake+0x1c4>
                de.lne.order |= LAST_LONG_ENTRY;
    80204d14:	0407e793          	ori	a5,a5,64
    80204d18:	f6f40823          	sb	a5,-144(s0)
    80204d1c:	a891                	j	80204d70 <emake+0x2f4>
                    if ((*w++ = *p++) == 0) {
    80204d1e:	00084603          	lbu	a2,0(a6)
                        end = 1;
    80204d22:	00163513          	seqz	a0,a2
                    *w++ = 0;
    80204d26:	00278893          	addi	a7,a5,2
                    if ((*w++ = *p++) == 0) {
    80204d2a:	0805                	addi	a6,a6,1
                    *w++ = 0;
    80204d2c:	85ce                	mv	a1,s3
    80204d2e:	a8d5                	j	80204e22 <emake+0x3a6>
            uint off2 = reloc_clus(dp, off, 1);
    80204d30:	4605                	li	a2,1
    80204d32:	85de                	mv	a1,s7
    80204d34:	8556                	mv	a0,s5
    80204d36:	fffff097          	auipc	ra,0xfffff
    80204d3a:	3f6080e7          	jalr	1014(ra) # 8020412c <reloc_clus>
            rw_clus(dp->cur_clus, 1, 0, (u64)&de, off2, sizeof(de));
    80204d3e:	02000793          	li	a5,32
    80204d42:	0005071b          	sext.w	a4,a0
    80204d46:	f7040693          	addi	a3,s0,-144
    80204d4a:	864e                	mv	a2,s3
    80204d4c:	4585                	li	a1,1
    80204d4e:	10caa503          	lw	a0,268(s5)
    80204d52:	fffff097          	auipc	ra,0xfffff
    80204d56:	4f6080e7          	jalr	1270(ra) # 80204248 <rw_clus>
            off += sizeof(de);
    80204d5a:	020b8b9b          	addiw	s7,s7,32
        for (int i = entcnt; i > 0; i--) {
    80204d5e:	1b4d                	addi	s6,s6,-13
    80204d60:	03405163          	blez	s4,80204d82 <emake+0x306>
            if ((de.lne.order = i) == entcnt) {
    80204d64:	0ffa7793          	zext.b	a5,s4
    80204d68:	fafd06e3          	beq	s10,a5,80204d14 <emake+0x298>
    80204d6c:	f6f40823          	sb	a5,-144(s0)
            char* p = ep->filename + (i - 1) * CHAR_LONG_NAME;
    80204d70:	3a7d                	addiw	s4,s4,-1
    80204d72:	885a                	mv	a6,s6
    80204d74:	4709                	li	a4,2
            int end = 0;
    80204d76:	854e                	mv	a0,s3
            uint8* w = (uint8*)de.lne.name1;
    80204d78:	f7140793          	addi	a5,s0,-143
                switch (j) {
    80204d7c:	4315                	li	t1,5
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    80204d7e:	4e35                	li	t3,13
    80204d80:	a851                	j	80204e14 <emake+0x398>
    80204d82:	020c0c1b          	addiw	s8,s8,32
            off += sizeof(de);
    80204d86:	4781                	li	a5,0
    80204d88:	f5843703          	ld	a4,-168(s0)
    80204d8c:	00e05463          	blez	a4,80204d94 <emake+0x318>
    80204d90:	005d979b          	slliw	a5,s11,0x5
    80204d94:	01878c3b          	addw	s8,a5,s8
        memset(&de, 0, sizeof(de));
    80204d98:	02000613          	li	a2,32
    80204d9c:	4581                	li	a1,0
    80204d9e:	f7040513          	addi	a0,s0,-144
    80204da2:	fffff097          	auipc	ra,0xfffff
    80204da6:	c12080e7          	jalr	-1006(ra) # 802039b4 <memset>
        strncpy(de.sne.name, shortname, sizeof(de.sne.name));
    80204daa:	462d                	li	a2,11
    80204dac:	f6040593          	addi	a1,s0,-160
    80204db0:	f7040513          	addi	a0,s0,-144
    80204db4:	fffff097          	auipc	ra,0xfffff
    80204db8:	d0c080e7          	jalr	-756(ra) # 80203ac0 <strncpy>
        de.sne.attr = ep->attribute;
    80204dbc:	100cc783          	lbu	a5,256(s9)
    80204dc0:	f6f40da3          	sb	a5,-133(s0)
            (uint16)(ep->first_clus >> 16);  // first clus high 16 bits
    80204dc4:	104ca783          	lw	a5,260(s9)
    80204dc8:	0107d71b          	srliw	a4,a5,0x10
    80204dcc:	f8e41223          	sh	a4,-124(s0)
        de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff);  // low 16 bits
    80204dd0:	f8f41523          	sh	a5,-118(s0)
        de.sne.file_size = ep->file_size;  // filesize is updated in eupdate()
    80204dd4:	108ca783          	lw	a5,264(s9)
    80204dd8:	f8f42623          	sw	a5,-116(s0)
        off = reloc_clus(dp, off, 1);
    80204ddc:	4605                	li	a2,1
    80204dde:	85e2                	mv	a1,s8
    80204de0:	8556                	mv	a0,s5
    80204de2:	fffff097          	auipc	ra,0xfffff
    80204de6:	34a080e7          	jalr	842(ra) # 8020412c <reloc_clus>
        rw_clus(dp->cur_clus, 1, 0, (u64)&de, off, sizeof(de));
    80204dea:	02000793          	li	a5,32
    80204dee:	0005071b          	sext.w	a4,a0
    80204df2:	f7040693          	addi	a3,s0,-144
    80204df6:	4601                	li	a2,0
    80204df8:	4585                	li	a1,1
    80204dfa:	10caa503          	lw	a0,268(s5)
    80204dfe:	fffff097          	auipc	ra,0xfffff
    80204e02:	44a080e7          	jalr	1098(ra) # 80204248 <rw_clus>
}
    80204e06:	b305                	j	80204b26 <emake+0xaa>
                        w = (uint8*)de.lne.name2;
    80204e08:	f7e40793          	addi	a5,s0,-130
    80204e0c:	a019                	j	80204e12 <emake+0x396>
                switch (j) {
    80204e0e:	f8c40793          	addi	a5,s0,-116
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    80204e12:	2705                	addiw	a4,a4,1
    80204e14:	fff7069b          	addiw	a3,a4,-1
                if (end) {
    80204e18:	d119                	beqz	a0,80204d1e <emake+0x2a2>
                    *w++ = 0xff;
    80204e1a:	00278893          	addi	a7,a5,2
    80204e1e:	864a                	mv	a2,s2
    80204e20:	85ca                	mv	a1,s2
                    *w++ = 0xff;  // on k210, unaligned reading is illegal
    80204e22:	00c78023          	sb	a2,0(a5)
                    *w++ = 0xff;
    80204e26:	00b780a3          	sb	a1,1(a5)
                switch (j) {
    80204e2a:	fc668fe3          	beq	a3,t1,80204e08 <emake+0x38c>
    80204e2e:	fe9680e3          	beq	a3,s1,80204e0e <emake+0x392>
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    80204e32:	0007079b          	sext.w	a5,a4
    80204e36:	eefe4de3          	blt	t3,a5,80204d30 <emake+0x2b4>
    80204e3a:	87c6                	mv	a5,a7
    80204e3c:	bfd9                	j	80204e12 <emake+0x396>
        if (c == ' ') {
    80204e3e:	02000793          	li	a5,32
    80204e42:	e8f90ae3          	beq	s2,a5,80204cd6 <emake+0x25a>
        if (c == '.') {
    80204e46:	02e00793          	li	a5,46
    80204e4a:	eaf917e3          	bne	s2,a5,80204cf8 <emake+0x27c>
    80204e4e:	bd35                	j	80204c8a <emake+0x20e>

0000000080204e50 <edup>:
struct dirent* edup(struct dirent* entry) {
    80204e50:	1101                	addi	sp,sp,-32
    80204e52:	ec06                	sd	ra,24(sp)
    80204e54:	e822                	sd	s0,16(sp)
    80204e56:	e426                	sd	s1,8(sp)
    80204e58:	1000                	addi	s0,sp,32
    80204e5a:	84aa                	mv	s1,a0
    if (entry != 0) {
    80204e5c:	c515                	beqz	a0,80204e88 <edup+0x38>
        acquireLock(&ecache.lock);
    80204e5e:	001e5517          	auipc	a0,0x1e5
    80204e62:	6ea50513          	addi	a0,a0,1770 # 803ea548 <ecache>
    80204e66:	fffff097          	auipc	ra,0xfffff
    80204e6a:	a4c080e7          	jalr	-1460(ra) # 802038b2 <acquireLock>
        entry->ref++;
    80204e6e:	1184a783          	lw	a5,280(s1)
    80204e72:	2785                	addiw	a5,a5,1
    80204e74:	10f4ac23          	sw	a5,280(s1)
        releaseLock(&ecache.lock);
    80204e78:	001e5517          	auipc	a0,0x1e5
    80204e7c:	6d050513          	addi	a0,a0,1744 # 803ea548 <ecache>
    80204e80:	fffff097          	auipc	ra,0xfffff
    80204e84:	a96080e7          	jalr	-1386(ra) # 80203916 <releaseLock>
}
    80204e88:	8526                	mv	a0,s1
    80204e8a:	60e2                	ld	ra,24(sp)
    80204e8c:	6442                	ld	s0,16(sp)
    80204e8e:	64a2                	ld	s1,8(sp)
    80204e90:	6105                	addi	sp,sp,32
    80204e92:	8082                	ret

0000000080204e94 <eupdate>:
    if (!entry->dirty || entry->valid != 1) {
    80204e94:	11554783          	lbu	a5,277(a0)
    80204e98:	cff1                	beqz	a5,80204f74 <eupdate+0xe0>
void eupdate(struct dirent* entry) {
    80204e9a:	715d                	addi	sp,sp,-80
    80204e9c:	e486                	sd	ra,72(sp)
    80204e9e:	e0a2                	sd	s0,64(sp)
    80204ea0:	fc26                	sd	s1,56(sp)
    80204ea2:	f84a                	sd	s2,48(sp)
    80204ea4:	0880                	addi	s0,sp,80
    80204ea6:	84aa                	mv	s1,a0
    if (!entry->dirty || entry->valid != 1) {
    80204ea8:	11651703          	lh	a4,278(a0)
    80204eac:	4785                	li	a5,1
    80204eae:	00f70863          	beq	a4,a5,80204ebe <eupdate+0x2a>
}
    80204eb2:	60a6                	ld	ra,72(sp)
    80204eb4:	6406                	ld	s0,64(sp)
    80204eb6:	74e2                	ld	s1,56(sp)
    80204eb8:	7942                	ld	s2,48(sp)
    80204eba:	6161                	addi	sp,sp,80
    80204ebc:	8082                	ret
    uint entcnt = 0;
    80204ebe:	fc042e23          	sw	zero,-36(s0)
    uint32 off = reloc_clus(entry->parent, entry->off, 0);
    80204ec2:	4601                	li	a2,0
    80204ec4:	11c52583          	lw	a1,284(a0)
    80204ec8:	12053503          	ld	a0,288(a0)
    80204ecc:	fffff097          	auipc	ra,0xfffff
    80204ed0:	260080e7          	jalr	608(ra) # 8020412c <reloc_clus>
    rw_clus(entry->parent->cur_clus, 0, 0, (u64)&entcnt, off, 1);
    80204ed4:	1204b803          	ld	a6,288(s1)
    80204ed8:	4785                	li	a5,1
    80204eda:	0005071b          	sext.w	a4,a0
    80204ede:	fdc40693          	addi	a3,s0,-36
    80204ee2:	4601                	li	a2,0
    80204ee4:	4581                	li	a1,0
    80204ee6:	10c82503          	lw	a0,268(a6)
    80204eea:	fffff097          	auipc	ra,0xfffff
    80204eee:	35e080e7          	jalr	862(ra) # 80204248 <rw_clus>
    entcnt &= ~LAST_LONG_ENTRY;
    80204ef2:	fdc42583          	lw	a1,-36(s0)
    80204ef6:	fbf5f593          	andi	a1,a1,-65
    80204efa:	fcb42e23          	sw	a1,-36(s0)
    off = reloc_clus(entry->parent, entry->off + (entcnt << 5), 0);
    80204efe:	0055959b          	slliw	a1,a1,0x5
    80204f02:	11c4a783          	lw	a5,284(s1)
    80204f06:	4601                	li	a2,0
    80204f08:	9dbd                	addw	a1,a1,a5
    80204f0a:	1204b503          	ld	a0,288(s1)
    80204f0e:	fffff097          	auipc	ra,0xfffff
    80204f12:	21e080e7          	jalr	542(ra) # 8020412c <reloc_clus>
    80204f16:	0005091b          	sext.w	s2,a0
    rw_clus(entry->parent->cur_clus, 0, 0, (u64)&de, off, sizeof(de));
    80204f1a:	1204b503          	ld	a0,288(s1)
    80204f1e:	02000793          	li	a5,32
    80204f22:	874a                	mv	a4,s2
    80204f24:	fb840693          	addi	a3,s0,-72
    80204f28:	4601                	li	a2,0
    80204f2a:	4581                	li	a1,0
    80204f2c:	10c52503          	lw	a0,268(a0)
    80204f30:	fffff097          	auipc	ra,0xfffff
    80204f34:	318080e7          	jalr	792(ra) # 80204248 <rw_clus>
    de.sne.fst_clus_hi = (uint16)(entry->first_clus >> 16);
    80204f38:	1044a783          	lw	a5,260(s1)
    80204f3c:	0107d71b          	srliw	a4,a5,0x10
    80204f40:	fce41623          	sh	a4,-52(s0)
    de.sne.fst_clus_lo = (uint16)(entry->first_clus & 0xffff);
    80204f44:	fcf41923          	sh	a5,-46(s0)
    de.sne.file_size = entry->file_size;
    80204f48:	1084a783          	lw	a5,264(s1)
    80204f4c:	fcf42a23          	sw	a5,-44(s0)
    rw_clus(entry->parent->cur_clus, 1, 0, (u64)&de, off, sizeof(de));
    80204f50:	1204b503          	ld	a0,288(s1)
    80204f54:	02000793          	li	a5,32
    80204f58:	874a                	mv	a4,s2
    80204f5a:	fb840693          	addi	a3,s0,-72
    80204f5e:	4601                	li	a2,0
    80204f60:	4585                	li	a1,1
    80204f62:	10c52503          	lw	a0,268(a0)
    80204f66:	fffff097          	auipc	ra,0xfffff
    80204f6a:	2e2080e7          	jalr	738(ra) # 80204248 <rw_clus>
    entry->dirty = 0;
    80204f6e:	10048aa3          	sb	zero,277(s1)
    80204f72:	b781                	j	80204eb2 <eupdate+0x1e>
    80204f74:	8082                	ret

0000000080204f76 <eremove>:
    if (entry->valid != 1) {
    80204f76:	11651703          	lh	a4,278(a0)
    80204f7a:	4785                	li	a5,1
    80204f7c:	00f70363          	beq	a4,a5,80204f82 <eremove+0xc>
    80204f80:	8082                	ret
void eremove(struct dirent* entry) {
    80204f82:	7139                	addi	sp,sp,-64
    80204f84:	fc06                	sd	ra,56(sp)
    80204f86:	f822                	sd	s0,48(sp)
    80204f88:	f426                	sd	s1,40(sp)
    80204f8a:	f04a                	sd	s2,32(sp)
    80204f8c:	ec4e                	sd	s3,24(sp)
    80204f8e:	e852                	sd	s4,16(sp)
    80204f90:	0080                	addi	s0,sp,64
    80204f92:	89aa                	mv	s3,a0
    uint entcnt = 0;
    80204f94:	fc042623          	sw	zero,-52(s0)
    uint32 off = entry->off;
    80204f98:	11c52a03          	lw	s4,284(a0)
    uint32 off2 = reloc_clus(entry->parent, off, 0);
    80204f9c:	4601                	li	a2,0
    80204f9e:	85d2                	mv	a1,s4
    80204fa0:	12053503          	ld	a0,288(a0)
    80204fa4:	fffff097          	auipc	ra,0xfffff
    80204fa8:	188080e7          	jalr	392(ra) # 8020412c <reloc_clus>
    80204fac:	0005049b          	sext.w	s1,a0
    rw_clus(entry->parent->cur_clus, 0, 0, (u64)&entcnt, off2, 1);
    80204fb0:	1209b503          	ld	a0,288(s3)
    80204fb4:	4785                	li	a5,1
    80204fb6:	8726                	mv	a4,s1
    80204fb8:	fcc40693          	addi	a3,s0,-52
    80204fbc:	4601                	li	a2,0
    80204fbe:	4581                	li	a1,0
    80204fc0:	10c52503          	lw	a0,268(a0)
    80204fc4:	fffff097          	auipc	ra,0xfffff
    80204fc8:	284080e7          	jalr	644(ra) # 80204248 <rw_clus>
    entcnt &= ~LAST_LONG_ENTRY;
    80204fcc:	fcc42783          	lw	a5,-52(s0)
    80204fd0:	fbf7f793          	andi	a5,a5,-65
    80204fd4:	fcf42623          	sw	a5,-52(s0)
    uint8 flag = EMPTY_ENTRY;
    80204fd8:	5795                	li	a5,-27
    80204fda:	fcf405a3          	sb	a5,-53(s0)
    for (int i = 0; i <= entcnt; i++) {
    80204fde:	4901                	li	s2,0
        rw_clus(entry->parent->cur_clus, 1, 0, (u64)&flag, off2, 1);
    80204fe0:	1209b503          	ld	a0,288(s3)
    80204fe4:	4785                	li	a5,1
    80204fe6:	8726                	mv	a4,s1
    80204fe8:	fcb40693          	addi	a3,s0,-53
    80204fec:	4601                	li	a2,0
    80204fee:	4585                	li	a1,1
    80204ff0:	10c52503          	lw	a0,268(a0)
    80204ff4:	fffff097          	auipc	ra,0xfffff
    80204ff8:	254080e7          	jalr	596(ra) # 80204248 <rw_clus>
        off += 32;
    80204ffc:	020a0a1b          	addiw	s4,s4,32
        off2 = reloc_clus(entry->parent, off, 0);
    80205000:	4601                	li	a2,0
    80205002:	85d2                	mv	a1,s4
    80205004:	1209b503          	ld	a0,288(s3)
    80205008:	fffff097          	auipc	ra,0xfffff
    8020500c:	124080e7          	jalr	292(ra) # 8020412c <reloc_clus>
    80205010:	0005049b          	sext.w	s1,a0
    for (int i = 0; i <= entcnt; i++) {
    80205014:	0019079b          	addiw	a5,s2,1
    80205018:	0007891b          	sext.w	s2,a5
    8020501c:	fcc42703          	lw	a4,-52(s0)
    80205020:	fd2770e3          	bgeu	a4,s2,80204fe0 <eremove+0x6a>
    entry->valid = -1;
    80205024:	57fd                	li	a5,-1
    80205026:	10f99b23          	sh	a5,278(s3)
}
    8020502a:	70e2                	ld	ra,56(sp)
    8020502c:	7442                	ld	s0,48(sp)
    8020502e:	74a2                	ld	s1,40(sp)
    80205030:	7902                	ld	s2,32(sp)
    80205032:	69e2                	ld	s3,24(sp)
    80205034:	6a42                	ld	s4,16(sp)
    80205036:	6121                	addi	sp,sp,64
    80205038:	8082                	ret

000000008020503a <etrunc>:
void etrunc(struct dirent* entry) {
    8020503a:	7179                	addi	sp,sp,-48
    8020503c:	f406                	sd	ra,40(sp)
    8020503e:	f022                	sd	s0,32(sp)
    80205040:	ec26                	sd	s1,24(sp)
    80205042:	e84a                	sd	s2,16(sp)
    80205044:	e44e                	sd	s3,8(sp)
    80205046:	e052                	sd	s4,0(sp)
    80205048:	1800                	addi	s0,sp,48
    8020504a:	8a2a                	mv	s4,a0
    for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC;) {
    8020504c:	10452483          	lw	s1,260(a0)
    80205050:	ffe4871b          	addiw	a4,s1,-2
    80205054:	100007b7          	lui	a5,0x10000
    80205058:	17d5                	addi	a5,a5,-11
    8020505a:	02e7e663          	bltu	a5,a4,80205086 <etrunc+0x4c>
    8020505e:	89be                	mv	s3,a5
        uint32 next = read_fat(clus);
    80205060:	0004891b          	sext.w	s2,s1
    80205064:	8526                	mv	a0,s1
    80205066:	fffff097          	auipc	ra,0xfffff
    8020506a:	e7a080e7          	jalr	-390(ra) # 80203ee0 <read_fat>
    8020506e:	0005049b          	sext.w	s1,a0
    write_fat(cluster, 0);
    80205072:	4581                	li	a1,0
    80205074:	854a                	mv	a0,s2
    80205076:	fffff097          	auipc	ra,0xfffff
    8020507a:	036080e7          	jalr	54(ra) # 802040ac <write_fat>
    for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC;) {
    8020507e:	ffe4879b          	addiw	a5,s1,-2
    80205082:	fcf9ffe3          	bgeu	s3,a5,80205060 <etrunc+0x26>
    entry->file_size = 0;
    80205086:	100a2423          	sw	zero,264(s4)
    entry->first_clus = 0;
    8020508a:	100a2223          	sw	zero,260(s4)
    entry->dirty = 1;
    8020508e:	4785                	li	a5,1
    80205090:	10fa0aa3          	sb	a5,277(s4)
}
    80205094:	70a2                	ld	ra,40(sp)
    80205096:	7402                	ld	s0,32(sp)
    80205098:	64e2                	ld	s1,24(sp)
    8020509a:	6942                	ld	s2,16(sp)
    8020509c:	69a2                	ld	s3,8(sp)
    8020509e:	6a02                	ld	s4,0(sp)
    802050a0:	6145                	addi	sp,sp,48
    802050a2:	8082                	ret

00000000802050a4 <elock>:
void elock(struct dirent* entry) {
    802050a4:	1141                	addi	sp,sp,-16
    802050a6:	e406                	sd	ra,8(sp)
    802050a8:	e022                	sd	s0,0(sp)
    802050aa:	0800                	addi	s0,sp,16
    if (entry == 0 || entry->ref < 1)
    802050ac:	cd19                	beqz	a0,802050ca <elock+0x26>
    802050ae:	11852783          	lw	a5,280(a0)
    802050b2:	00f05c63          	blez	a5,802050ca <elock+0x26>
    acquiresleep(&entry->lock);
    802050b6:	13850513          	addi	a0,a0,312
    802050ba:	ffffe097          	auipc	ra,0xffffe
    802050be:	6ba080e7          	jalr	1722(ra) # 80203774 <acquiresleep>
}
    802050c2:	60a2                	ld	ra,8(sp)
    802050c4:	6402                	ld	s0,0(sp)
    802050c6:	0141                	addi	sp,sp,16
    802050c8:	8082                	ret
        panic("elock");
    802050ca:	00005697          	auipc	a3,0x5
    802050ce:	94e68693          	addi	a3,a3,-1714 # 80209a18 <__func__.0+0x150>
    802050d2:	00005617          	auipc	a2,0x5
    802050d6:	bae60613          	addi	a2,a2,-1106 # 80209c80 <__func__.3>
    802050da:	2bb00593          	li	a1,699
    802050de:	00005517          	auipc	a0,0x5
    802050e2:	85a50513          	addi	a0,a0,-1958 # 80209938 <__func__.0+0x70>
    802050e6:	ffffb097          	auipc	ra,0xffffb
    802050ea:	45c080e7          	jalr	1116(ra) # 80200542 <_panic_>

00000000802050ee <eunlock>:
void eunlock(struct dirent* entry) {
    802050ee:	1101                	addi	sp,sp,-32
    802050f0:	ec06                	sd	ra,24(sp)
    802050f2:	e822                	sd	s0,16(sp)
    802050f4:	e426                	sd	s1,8(sp)
    802050f6:	e04a                	sd	s2,0(sp)
    802050f8:	1000                	addi	s0,sp,32
    if (entry == 0 || !holdingsleep(&entry->lock) || entry->ref < 1)
    802050fa:	c90d                	beqz	a0,8020512c <eunlock+0x3e>
    802050fc:	84aa                	mv	s1,a0
    802050fe:	13850913          	addi	s2,a0,312
    80205102:	854a                	mv	a0,s2
    80205104:	ffffe097          	auipc	ra,0xffffe
    80205108:	70c080e7          	jalr	1804(ra) # 80203810 <holdingsleep>
    8020510c:	c105                	beqz	a0,8020512c <eunlock+0x3e>
    8020510e:	1184a783          	lw	a5,280(s1)
    80205112:	00f05d63          	blez	a5,8020512c <eunlock+0x3e>
    releasesleep(&entry->lock);
    80205116:	854a                	mv	a0,s2
    80205118:	ffffe097          	auipc	ra,0xffffe
    8020511c:	6b4080e7          	jalr	1716(ra) # 802037cc <releasesleep>
}
    80205120:	60e2                	ld	ra,24(sp)
    80205122:	6442                	ld	s0,16(sp)
    80205124:	64a2                	ld	s1,8(sp)
    80205126:	6902                	ld	s2,0(sp)
    80205128:	6105                	addi	sp,sp,32
    8020512a:	8082                	ret
        panic("eunlock");
    8020512c:	00005697          	auipc	a3,0x5
    80205130:	8f468693          	addi	a3,a3,-1804 # 80209a20 <__func__.0+0x158>
    80205134:	00005617          	auipc	a2,0x5
    80205138:	b4460613          	addi	a2,a2,-1212 # 80209c78 <__func__.2>
    8020513c:	2c100593          	li	a1,705
    80205140:	00004517          	auipc	a0,0x4
    80205144:	7f850513          	addi	a0,a0,2040 # 80209938 <__func__.0+0x70>
    80205148:	ffffb097          	auipc	ra,0xffffb
    8020514c:	3fa080e7          	jalr	1018(ra) # 80200542 <_panic_>

0000000080205150 <eput>:
void eput(struct dirent* entry) {
    80205150:	1101                	addi	sp,sp,-32
    80205152:	ec06                	sd	ra,24(sp)
    80205154:	e822                	sd	s0,16(sp)
    80205156:	e426                	sd	s1,8(sp)
    80205158:	e04a                	sd	s2,0(sp)
    8020515a:	1000                	addi	s0,sp,32
    8020515c:	84aa                	mv	s1,a0
    acquireLock(&ecache.lock);
    8020515e:	001e5517          	auipc	a0,0x1e5
    80205162:	3ea50513          	addi	a0,a0,1002 # 803ea548 <ecache>
    80205166:	ffffe097          	auipc	ra,0xffffe
    8020516a:	74c080e7          	jalr	1868(ra) # 802038b2 <acquireLock>
    if (entry != &root && entry->valid != 0 && entry->ref == 1) {
    8020516e:	001e5797          	auipc	a5,0x1e5
    80205172:	27278793          	addi	a5,a5,626 # 803ea3e0 <root>
    80205176:	00f48a63          	beq	s1,a5,8020518a <eput+0x3a>
    8020517a:	11649783          	lh	a5,278(s1)
    8020517e:	c791                	beqz	a5,8020518a <eput+0x3a>
    80205180:	1184a703          	lw	a4,280(s1)
    80205184:	4785                	li	a5,1
    80205186:	02f70563          	beq	a4,a5,802051b0 <eput+0x60>
    entry->ref--;
    8020518a:	1184a783          	lw	a5,280(s1)
    8020518e:	37fd                	addiw	a5,a5,-1
    80205190:	10f4ac23          	sw	a5,280(s1)
    releaseLock(&ecache.lock);
    80205194:	001e5517          	auipc	a0,0x1e5
    80205198:	3b450513          	addi	a0,a0,948 # 803ea548 <ecache>
    8020519c:	ffffe097          	auipc	ra,0xffffe
    802051a0:	77a080e7          	jalr	1914(ra) # 80203916 <releaseLock>
}
    802051a4:	60e2                	ld	ra,24(sp)
    802051a6:	6442                	ld	s0,16(sp)
    802051a8:	64a2                	ld	s1,8(sp)
    802051aa:	6902                	ld	s2,0(sp)
    802051ac:	6105                	addi	sp,sp,32
    802051ae:	8082                	ret
        acquiresleep(&entry->lock);
    802051b0:	13848913          	addi	s2,s1,312
    802051b4:	854a                	mv	a0,s2
    802051b6:	ffffe097          	auipc	ra,0xffffe
    802051ba:	5be080e7          	jalr	1470(ra) # 80203774 <acquiresleep>
        entry->next->prev = entry->prev;
    802051be:	1284b703          	ld	a4,296(s1)
    802051c2:	1304b783          	ld	a5,304(s1)
    802051c6:	12f73823          	sd	a5,304(a4)
        entry->prev->next = entry->next;
    802051ca:	1284b703          	ld	a4,296(s1)
    802051ce:	12e7b423          	sd	a4,296(a5)
        entry->next = root.next;
    802051d2:	001e5797          	auipc	a5,0x1e5
    802051d6:	1e678793          	addi	a5,a5,486 # 803ea3b8 <fat>
    802051da:	1507b703          	ld	a4,336(a5)
    802051de:	12e4b423          	sd	a4,296(s1)
        entry->prev = &root;
    802051e2:	001e5697          	auipc	a3,0x1e5
    802051e6:	1fe68693          	addi	a3,a3,510 # 803ea3e0 <root>
    802051ea:	12d4b823          	sd	a3,304(s1)
        root.next->prev = entry;
    802051ee:	12973823          	sd	s1,304(a4)
        root.next = entry;
    802051f2:	1497b823          	sd	s1,336(a5)
        releaseLock(&ecache.lock);
    802051f6:	001e5517          	auipc	a0,0x1e5
    802051fa:	35250513          	addi	a0,a0,850 # 803ea548 <ecache>
    802051fe:	ffffe097          	auipc	ra,0xffffe
    80205202:	718080e7          	jalr	1816(ra) # 80203916 <releaseLock>
        if (entry->valid == -1) {  // this means some one has called eremove()
    80205206:	11649703          	lh	a4,278(s1)
    8020520a:	57fd                	li	a5,-1
    8020520c:	06f70863          	beq	a4,a5,8020527c <eput+0x12c>
            elock(entry->parent);
    80205210:	1204b503          	ld	a0,288(s1)
    80205214:	00000097          	auipc	ra,0x0
    80205218:	e90080e7          	jalr	-368(ra) # 802050a4 <elock>
            eupdate(entry);
    8020521c:	8526                	mv	a0,s1
    8020521e:	00000097          	auipc	ra,0x0
    80205222:	c76080e7          	jalr	-906(ra) # 80204e94 <eupdate>
            eunlock(entry->parent);
    80205226:	1204b503          	ld	a0,288(s1)
    8020522a:	00000097          	auipc	ra,0x0
    8020522e:	ec4080e7          	jalr	-316(ra) # 802050ee <eunlock>
        releasesleep(&entry->lock);
    80205232:	854a                	mv	a0,s2
    80205234:	ffffe097          	auipc	ra,0xffffe
    80205238:	598080e7          	jalr	1432(ra) # 802037cc <releasesleep>
        struct dirent* eparent = entry->parent;
    8020523c:	1204b903          	ld	s2,288(s1)
        acquireLock(&ecache.lock);
    80205240:	001e5517          	auipc	a0,0x1e5
    80205244:	30850513          	addi	a0,a0,776 # 803ea548 <ecache>
    80205248:	ffffe097          	auipc	ra,0xffffe
    8020524c:	66a080e7          	jalr	1642(ra) # 802038b2 <acquireLock>
        entry->ref--;
    80205250:	1184a783          	lw	a5,280(s1)
    80205254:	37fd                	addiw	a5,a5,-1
    80205256:	10f4ac23          	sw	a5,280(s1)
        releaseLock(&ecache.lock);
    8020525a:	001e5517          	auipc	a0,0x1e5
    8020525e:	2ee50513          	addi	a0,a0,750 # 803ea548 <ecache>
    80205262:	ffffe097          	auipc	ra,0xffffe
    80205266:	6b4080e7          	jalr	1716(ra) # 80203916 <releaseLock>
        if (entry->ref == 0) {
    8020526a:	1184a783          	lw	a5,280(s1)
    8020526e:	fb9d                	bnez	a5,802051a4 <eput+0x54>
            eput(eparent);
    80205270:	854a                	mv	a0,s2
    80205272:	00000097          	auipc	ra,0x0
    80205276:	ede080e7          	jalr	-290(ra) # 80205150 <eput>
    8020527a:	b72d                	j	802051a4 <eput+0x54>
            etrunc(entry);
    8020527c:	8526                	mv	a0,s1
    8020527e:	00000097          	auipc	ra,0x0
    80205282:	dbc080e7          	jalr	-580(ra) # 8020503a <etrunc>
    80205286:	b775                	j	80205232 <eput+0xe2>

0000000080205288 <estat>:
void estat(struct dirent* de, struct stat* st) {
    80205288:	1101                	addi	sp,sp,-32
    8020528a:	ec06                	sd	ra,24(sp)
    8020528c:	e822                	sd	s0,16(sp)
    8020528e:	e426                	sd	s1,8(sp)
    80205290:	e04a                	sd	s2,0(sp)
    80205292:	1000                	addi	s0,sp,32
    80205294:	892a                	mv	s2,a0
    80205296:	84ae                	mv	s1,a1
    strncpy(st->name, de->filename, STAT_MAX_NAME);
    80205298:	02000613          	li	a2,32
    8020529c:	85aa                	mv	a1,a0
    8020529e:	8526                	mv	a0,s1
    802052a0:	fffff097          	auipc	ra,0xfffff
    802052a4:	820080e7          	jalr	-2016(ra) # 80203ac0 <strncpy>
    st->type = (de->attribute & ATTR_DIRECTORY) ? T_DIR : T_FILE;
    802052a8:	10094783          	lbu	a5,256(s2)
    802052ac:	8bc1                	andi	a5,a5,16
    802052ae:	0017b793          	seqz	a5,a5
    802052b2:	0785                	addi	a5,a5,1
    802052b4:	02f49423          	sh	a5,40(s1)
    st->dev = de->dev;
    802052b8:	11494783          	lbu	a5,276(s2)
    802052bc:	d0dc                	sw	a5,36(s1)
    st->size = de->file_size;
    802052be:	10896783          	lwu	a5,264(s2)
    802052c2:	f89c                	sd	a5,48(s1)
}
    802052c4:	60e2                	ld	ra,24(sp)
    802052c6:	6442                	ld	s0,16(sp)
    802052c8:	64a2                	ld	s1,8(sp)
    802052ca:	6902                	ld	s2,0(sp)
    802052cc:	6105                	addi	sp,sp,32
    802052ce:	8082                	ret

00000000802052d0 <enext>:
 * @param   count   to write the count of entries
 * @return  -1      meet the end of dir
 *          0       find empty slots
 *          1       find a file with all its entries
 */
int enext(struct dirent* dp, struct dirent* ep, uint off, int* count) {
    802052d0:	7159                	addi	sp,sp,-112
    802052d2:	f486                	sd	ra,104(sp)
    802052d4:	f0a2                	sd	s0,96(sp)
    802052d6:	eca6                	sd	s1,88(sp)
    802052d8:	e8ca                	sd	s2,80(sp)
    802052da:	e4ce                	sd	s3,72(sp)
    802052dc:	e0d2                	sd	s4,64(sp)
    802052de:	fc56                	sd	s5,56(sp)
    802052e0:	f85a                	sd	s6,48(sp)
    802052e2:	f45e                	sd	s7,40(sp)
    802052e4:	f062                	sd	s8,32(sp)
    802052e6:	1880                	addi	s0,sp,112
    if (!(dp->attribute & ATTR_DIRECTORY))
    802052e8:	10054783          	lbu	a5,256(a0)
    802052ec:	8bc1                	andi	a5,a5,16
    802052ee:	cf8d                	beqz	a5,80205328 <enext+0x58>
    802052f0:	892a                	mv	s2,a0
    802052f2:	89ae                	mv	s3,a1
    802052f4:	84b2                	mv	s1,a2
    802052f6:	8a36                	mv	s4,a3
        panic("enext not dir");
    if (ep->valid)
    802052f8:	11659783          	lh	a5,278(a1)
    802052fc:	eba1                	bnez	a5,8020534c <enext+0x7c>
        panic("enext ep valid");
    if (off % 32)
    802052fe:	01f67793          	andi	a5,a2,31
    80205302:	e7bd                	bnez	a5,80205370 <enext+0xa0>
        panic("enext not align");
    if (dp->valid != 1) {
    80205304:	11651703          	lh	a4,278(a0)
    80205308:	4785                	li	a5,1
        return -1;
    8020530a:	557d                	li	a0,-1
    if (dp->valid != 1) {
    8020530c:	08f70463          	beq	a4,a5,80205394 <enext+0xc4>
            read_entry_info(ep, &de);
            return 1;
        }
    }
    return -1;
}
    80205310:	70a6                	ld	ra,104(sp)
    80205312:	7406                	ld	s0,96(sp)
    80205314:	64e6                	ld	s1,88(sp)
    80205316:	6946                	ld	s2,80(sp)
    80205318:	69a6                	ld	s3,72(sp)
    8020531a:	6a06                	ld	s4,64(sp)
    8020531c:	7ae2                	ld	s5,56(sp)
    8020531e:	7b42                	ld	s6,48(sp)
    80205320:	7ba2                	ld	s7,40(sp)
    80205322:	7c02                	ld	s8,32(sp)
    80205324:	6165                	addi	sp,sp,112
    80205326:	8082                	ret
        panic("enext not dir");
    80205328:	00004697          	auipc	a3,0x4
    8020532c:	70068693          	addi	a3,a3,1792 # 80209a28 <__func__.0+0x160>
    80205330:	00005617          	auipc	a2,0x5
    80205334:	94060613          	addi	a2,a2,-1728 # 80209c70 <__func__.1>
    80205338:	33100593          	li	a1,817
    8020533c:	00004517          	auipc	a0,0x4
    80205340:	5fc50513          	addi	a0,a0,1532 # 80209938 <__func__.0+0x70>
    80205344:	ffffb097          	auipc	ra,0xffffb
    80205348:	1fe080e7          	jalr	510(ra) # 80200542 <_panic_>
        panic("enext ep valid");
    8020534c:	00004697          	auipc	a3,0x4
    80205350:	6ec68693          	addi	a3,a3,1772 # 80209a38 <__func__.0+0x170>
    80205354:	00005617          	auipc	a2,0x5
    80205358:	91c60613          	addi	a2,a2,-1764 # 80209c70 <__func__.1>
    8020535c:	33300593          	li	a1,819
    80205360:	00004517          	auipc	a0,0x4
    80205364:	5d850513          	addi	a0,a0,1496 # 80209938 <__func__.0+0x70>
    80205368:	ffffb097          	auipc	ra,0xffffb
    8020536c:	1da080e7          	jalr	474(ra) # 80200542 <_panic_>
        panic("enext not align");
    80205370:	00004697          	auipc	a3,0x4
    80205374:	6d868693          	addi	a3,a3,1752 # 80209a48 <__func__.0+0x180>
    80205378:	00005617          	auipc	a2,0x5
    8020537c:	8f860613          	addi	a2,a2,-1800 # 80209c70 <__func__.1>
    80205380:	33500593          	li	a1,821
    80205384:	00004517          	auipc	a0,0x4
    80205388:	5b450513          	addi	a0,a0,1460 # 80209938 <__func__.0+0x70>
    8020538c:	ffffb097          	auipc	ra,0xffffb
    80205390:	1b6080e7          	jalr	438(ra) # 80200542 <_panic_>
    memset(ep->filename, 0, FAT32_MAX_FILENAME + 1);
    80205394:	10000613          	li	a2,256
    80205398:	4581                	li	a1,0
    8020539a:	854e                	mv	a0,s3
    8020539c:	ffffe097          	auipc	ra,0xffffe
    802053a0:	618080e7          	jalr	1560(ra) # 802039b4 <memset>
    int cnt = 0;
    802053a4:	4a81                	li	s5,0
    for (int off2; (off2 = reloc_clus(dp, off, 0)) != -1; off += 32) {
    802053a6:	5b7d                	li	s6,-1
        if (de.lne.order == EMPTY_ENTRY) {
    802053a8:	0e500b93          	li	s7,229
        if (de.lne.attr == ATTR_LONG_NAME) {
    802053ac:	4c3d                	li	s8,15
    for (int off2; (off2 = reloc_clus(dp, off, 0)) != -1; off += 32) {
    802053ae:	a805                	j	802053de <enext+0x10e>
            cnt++;
    802053b0:	2a85                	addiw	s5,s5,1
            continue;
    802053b2:	a025                	j	802053da <enext+0x10a>
            *count = cnt;
    802053b4:	015a2023          	sw	s5,0(s4)
            return 0;
    802053b8:	4501                	li	a0,0
    802053ba:	bf99                	j	80205310 <enext+0x40>
            read_entry_name(ep->filename + (lcnt - 1) * CHAR_LONG_NAME, &de);
    802053bc:	fff7079b          	addiw	a5,a4,-1
    802053c0:	0017951b          	slliw	a0,a5,0x1
    802053c4:	9d3d                	addw	a0,a0,a5
    802053c6:	0025151b          	slliw	a0,a0,0x2
    802053ca:	9d3d                	addw	a0,a0,a5
    802053cc:	f9040593          	addi	a1,s0,-112
    802053d0:	954e                	add	a0,a0,s3
    802053d2:	fffff097          	auipc	ra,0xfffff
    802053d6:	0f8080e7          	jalr	248(ra) # 802044ca <read_entry_name>
    for (int off2; (off2 = reloc_clus(dp, off, 0)) != -1; off += 32) {
    802053da:	0204849b          	addiw	s1,s1,32
    802053de:	4601                	li	a2,0
    802053e0:	85a6                	mv	a1,s1
    802053e2:	854a                	mv	a0,s2
    802053e4:	fffff097          	auipc	ra,0xfffff
    802053e8:	d48080e7          	jalr	-696(ra) # 8020412c <reloc_clus>
    802053ec:	f36502e3          	beq	a0,s6,80205310 <enext+0x40>
        if (rw_clus(dp->cur_clus, 0, 0, (u64)&de, off2, 32) != 32 ||
    802053f0:	02000793          	li	a5,32
    802053f4:	0005071b          	sext.w	a4,a0
    802053f8:	f9040693          	addi	a3,s0,-112
    802053fc:	4601                	li	a2,0
    802053fe:	4581                	li	a1,0
    80205400:	10c92503          	lw	a0,268(s2)
    80205404:	fffff097          	auipc	ra,0xfffff
    80205408:	e44080e7          	jalr	-444(ra) # 80204248 <rw_clus>
    8020540c:	2501                	sext.w	a0,a0
    8020540e:	02000793          	li	a5,32
    80205412:	06f51c63          	bne	a0,a5,8020548a <enext+0x1ba>
            de.lne.order == END_OF_ENTRY) {
    80205416:	f9044783          	lbu	a5,-112(s0)
        if (rw_clus(dp->cur_clus, 0, 0, (u64)&de, off2, 32) != 32 ||
    8020541a:	cbb5                	beqz	a5,8020548e <enext+0x1be>
        if (de.lne.order == EMPTY_ENTRY) {
    8020541c:	f9778ae3          	beq	a5,s7,802053b0 <enext+0xe0>
        } else if (cnt) {
    80205420:	f80a9ae3          	bnez	s5,802053b4 <enext+0xe4>
        if (de.lne.attr == ATTR_LONG_NAME) {
    80205424:	f9b44703          	lbu	a4,-101(s0)
    80205428:	01871d63          	bne	a4,s8,80205442 <enext+0x172>
            int lcnt = de.lne.order & ~LAST_LONG_ENTRY;
    8020542c:	0bf7f713          	andi	a4,a5,191
            if (de.lne.order & LAST_LONG_ENTRY) {
    80205430:	0407f793          	andi	a5,a5,64
    80205434:	d7c1                	beqz	a5,802053bc <enext+0xec>
                *count = lcnt + 1;  // plus the s-n-e;
    80205436:	0017079b          	addiw	a5,a4,1
    8020543a:	00fa2023          	sw	a5,0(s4)
                count = 0;
    8020543e:	4a01                	li	s4,0
    80205440:	bfb5                	j	802053bc <enext+0xec>
            if (count) {
    80205442:	000a0c63          	beqz	s4,8020545a <enext+0x18a>
                *count = 1;
    80205446:	4785                	li	a5,1
    80205448:	00fa2023          	sw	a5,0(s4)
                read_entry_name(ep->filename, &de);
    8020544c:	f9040593          	addi	a1,s0,-112
    80205450:	854e                	mv	a0,s3
    80205452:	fffff097          	auipc	ra,0xfffff
    80205456:	078080e7          	jalr	120(ra) # 802044ca <read_entry_name>
    entry->attribute = d->sne.attr;
    8020545a:	f9b44783          	lbu	a5,-101(s0)
    8020545e:	10f98023          	sb	a5,256(s3)
    entry->first_clus = ((uint32)d->sne.fst_clus_hi << 16) | d->sne.fst_clus_lo;
    80205462:	fa445783          	lhu	a5,-92(s0)
    80205466:	0107979b          	slliw	a5,a5,0x10
    8020546a:	faa45703          	lhu	a4,-86(s0)
    8020546e:	8fd9                	or	a5,a5,a4
    80205470:	2781                	sext.w	a5,a5
    80205472:	10f9a223          	sw	a5,260(s3)
    entry->file_size = d->sne.file_size;
    80205476:	fac42703          	lw	a4,-84(s0)
    8020547a:	10e9a423          	sw	a4,264(s3)
    entry->cur_clus = entry->first_clus;
    8020547e:	10f9a623          	sw	a5,268(s3)
    entry->clus_cnt = 0;
    80205482:	1009a823          	sw	zero,272(s3)
            return 1;
    80205486:	4505                	li	a0,1
}
    80205488:	b561                	j	80205310 <enext+0x40>
            return -1;
    8020548a:	557d                	li	a0,-1
    8020548c:	b551                	j	80205310 <enext+0x40>
    8020548e:	557d                	li	a0,-1
    80205490:	b541                	j	80205310 <enext+0x40>

0000000080205492 <dirlookup>:
 * @param   dp          entry of a directory file
 * @param   filename    target filename
 * @param   poff        offset of proper empty entry slots from the beginning of
 * the dir
 */
struct dirent* dirlookup(struct dirent* dp, char* filename, uint* poff) {
    80205492:	715d                	addi	sp,sp,-80
    80205494:	e486                	sd	ra,72(sp)
    80205496:	e0a2                	sd	s0,64(sp)
    80205498:	fc26                	sd	s1,56(sp)
    8020549a:	f84a                	sd	s2,48(sp)
    8020549c:	f44e                	sd	s3,40(sp)
    8020549e:	f052                	sd	s4,32(sp)
    802054a0:	ec56                	sd	s5,24(sp)
    802054a2:	e85a                	sd	s6,16(sp)
    802054a4:	0880                	addi	s0,sp,80
    if (!(dp->attribute & ATTR_DIRECTORY))
    802054a6:	10054783          	lbu	a5,256(a0)
    802054aa:	8bc1                	andi	a5,a5,16
    802054ac:	cbb1                	beqz	a5,80205500 <dirlookup+0x6e>
    802054ae:	84aa                	mv	s1,a0
    802054b0:	89ae                	mv	s3,a1
    802054b2:	8ab2                	mv	s5,a2
        panic("dirlookup not DIR");
    if (strncmp(filename, ".", FAT32_MAX_FILENAME) == 0) {
    802054b4:	0ff00613          	li	a2,255
    802054b8:	00004597          	auipc	a1,0x4
    802054bc:	5b858593          	addi	a1,a1,1464 # 80209a70 <__func__.0+0x1a8>
    802054c0:	854e                	mv	a0,s3
    802054c2:	ffffe097          	auipc	ra,0xffffe
    802054c6:	5c2080e7          	jalr	1474(ra) # 80203a84 <strncmp>
    802054ca:	cd29                	beqz	a0,80205524 <dirlookup+0x92>
        return edup(dp);
    } else if (strncmp(filename, "..", FAT32_MAX_FILENAME) == 0) {
    802054cc:	0ff00613          	li	a2,255
    802054d0:	00004597          	auipc	a1,0x4
    802054d4:	5a858593          	addi	a1,a1,1448 # 80209a78 <__func__.0+0x1b0>
    802054d8:	854e                	mv	a0,s3
    802054da:	ffffe097          	auipc	ra,0xffffe
    802054de:	5aa080e7          	jalr	1450(ra) # 80203a84 <strncmp>
    802054e2:	e92d                	bnez	a0,80205554 <dirlookup+0xc2>
        if (dp == &root) {
    802054e4:	001e5797          	auipc	a5,0x1e5
    802054e8:	efc78793          	addi	a5,a5,-260 # 803ea3e0 <root>
    802054ec:	04f48d63          	beq	s1,a5,80205546 <dirlookup+0xb4>
            return edup(&root);
        }
        return edup(dp->parent);
    802054f0:	1204b503          	ld	a0,288(s1)
    802054f4:	00000097          	auipc	ra,0x0
    802054f8:	95c080e7          	jalr	-1700(ra) # 80204e50 <edup>
    802054fc:	892a                	mv	s2,a0
    802054fe:	a80d                	j	80205530 <dirlookup+0x9e>
        panic("dirlookup not DIR");
    80205500:	00004697          	auipc	a3,0x4
    80205504:	55868693          	addi	a3,a3,1368 # 80209a58 <__func__.0+0x190>
    80205508:	00004617          	auipc	a2,0x4
    8020550c:	5b860613          	addi	a2,a2,1464 # 80209ac0 <__func__.0>
    80205510:	36700593          	li	a1,871
    80205514:	00004517          	auipc	a0,0x4
    80205518:	42450513          	addi	a0,a0,1060 # 80209938 <__func__.0+0x70>
    8020551c:	ffffb097          	auipc	ra,0xffffb
    80205520:	026080e7          	jalr	38(ra) # 80200542 <_panic_>
        return edup(dp);
    80205524:	8526                	mv	a0,s1
    80205526:	00000097          	auipc	ra,0x0
    8020552a:	92a080e7          	jalr	-1750(ra) # 80204e50 <edup>
    8020552e:	892a                	mv	s2,a0
    if (poff) {
        *poff = off;
    }
    eput(ep);
    return NULL;
}
    80205530:	854a                	mv	a0,s2
    80205532:	60a6                	ld	ra,72(sp)
    80205534:	6406                	ld	s0,64(sp)
    80205536:	74e2                	ld	s1,56(sp)
    80205538:	7942                	ld	s2,48(sp)
    8020553a:	79a2                	ld	s3,40(sp)
    8020553c:	7a02                	ld	s4,32(sp)
    8020553e:	6ae2                	ld	s5,24(sp)
    80205540:	6b42                	ld	s6,16(sp)
    80205542:	6161                	addi	sp,sp,80
    80205544:	8082                	ret
            return edup(&root);
    80205546:	853e                	mv	a0,a5
    80205548:	00000097          	auipc	ra,0x0
    8020554c:	908080e7          	jalr	-1784(ra) # 80204e50 <edup>
    80205550:	892a                	mv	s2,a0
    80205552:	bff9                	j	80205530 <dirlookup+0x9e>
    if (dp->valid != 1) {
    80205554:	11649703          	lh	a4,278(s1)
    80205558:	4785                	li	a5,1
        return NULL;
    8020555a:	4901                	li	s2,0
    if (dp->valid != 1) {
    8020555c:	fcf71ae3          	bne	a4,a5,80205530 <dirlookup+0x9e>
    struct dirent* ep = eget(dp, filename);
    80205560:	85ce                	mv	a1,s3
    80205562:	8526                	mv	a0,s1
    80205564:	fffff097          	auipc	ra,0xfffff
    80205568:	e44080e7          	jalr	-444(ra) # 802043a8 <eget>
    8020556c:	892a                	mv	s2,a0
    if (ep->valid == 1) {
    8020556e:	11651703          	lh	a4,278(a0)
    80205572:	4785                	li	a5,1
    80205574:	faf70ee3          	beq	a4,a5,80205530 <dirlookup+0x9e>
    int len = strlen(filename);
    80205578:	854e                	mv	a0,s3
    8020557a:	ffffe097          	auipc	ra,0xffffe
    8020557e:	5b6080e7          	jalr	1462(ra) # 80203b30 <strlen>
    int count = 0;
    80205582:	fa042e23          	sw	zero,-68(s0)
    reloc_clus(dp, 0, 0);
    80205586:	4601                	li	a2,0
    80205588:	4581                	li	a1,0
    8020558a:	8526                	mv	a0,s1
    8020558c:	fffff097          	auipc	ra,0xfffff
    80205590:	ba0080e7          	jalr	-1120(ra) # 8020412c <reloc_clus>
    uint off = 0;
    80205594:	4a01                	li	s4,0
    while ((type = enext(dp, ep, off, &count) != -1)) {
    80205596:	5b7d                	li	s6,-1
    80205598:	fbc40693          	addi	a3,s0,-68
    8020559c:	8652                	mv	a2,s4
    8020559e:	85ca                	mv	a1,s2
    802055a0:	8526                	mv	a0,s1
    802055a2:	00000097          	auipc	ra,0x0
    802055a6:	d2e080e7          	jalr	-722(ra) # 802052d0 <enext>
    802055aa:	03650f63          	beq	a0,s6,802055e8 <dirlookup+0x156>
        } else if (strncmp(filename, ep->filename, FAT32_MAX_FILENAME) == 0) {
    802055ae:	0ff00613          	li	a2,255
    802055b2:	85ca                	mv	a1,s2
    802055b4:	854e                	mv	a0,s3
    802055b6:	ffffe097          	auipc	ra,0xffffe
    802055ba:	4ce080e7          	jalr	1230(ra) # 80203a84 <strncmp>
    802055be:	c901                	beqz	a0,802055ce <dirlookup+0x13c>
        off += count << 5;
    802055c0:	fbc42783          	lw	a5,-68(s0)
    802055c4:	0057979b          	slliw	a5,a5,0x5
    802055c8:	01478a3b          	addw	s4,a5,s4
    802055cc:	b7f1                	j	80205598 <dirlookup+0x106>
            ep->parent = edup(dp);
    802055ce:	8526                	mv	a0,s1
    802055d0:	00000097          	auipc	ra,0x0
    802055d4:	880080e7          	jalr	-1920(ra) # 80204e50 <edup>
    802055d8:	12a93023          	sd	a0,288(s2)
            ep->off = off;
    802055dc:	11492e23          	sw	s4,284(s2)
            ep->valid = 1;
    802055e0:	4785                	li	a5,1
    802055e2:	10f91b23          	sh	a5,278(s2)
            return ep;
    802055e6:	b7a9                	j	80205530 <dirlookup+0x9e>
    if (poff) {
    802055e8:	000a8463          	beqz	s5,802055f0 <dirlookup+0x15e>
        *poff = off;
    802055ec:	014aa023          	sw	s4,0(s5)
    eput(ep);
    802055f0:	854a                	mv	a0,s2
    802055f2:	00000097          	auipc	ra,0x0
    802055f6:	b5e080e7          	jalr	-1186(ra) # 80205150 <eput>
    return NULL;
    802055fa:	4901                	li	s2,0
    802055fc:	bf15                	j	80205530 <dirlookup+0x9e>

00000000802055fe <ealloc>:
struct dirent* ealloc(struct dirent* dp, char* name, int attr) {
    802055fe:	715d                	addi	sp,sp,-80
    80205600:	e486                	sd	ra,72(sp)
    80205602:	e0a2                	sd	s0,64(sp)
    80205604:	fc26                	sd	s1,56(sp)
    80205606:	f84a                	sd	s2,48(sp)
    80205608:	f44e                	sd	s3,40(sp)
    8020560a:	f052                	sd	s4,32(sp)
    8020560c:	ec56                	sd	s5,24(sp)
    8020560e:	0880                	addi	s0,sp,80
    80205610:	892a                	mv	s2,a0
    if (!(dp->attribute & ATTR_DIRECTORY)) {
    80205612:	10054783          	lbu	a5,256(a0)
    80205616:	8bc1                	andi	a5,a5,16
    80205618:	c7b1                	beqz	a5,80205664 <ealloc+0x66>
    8020561a:	852e                	mv	a0,a1
    8020561c:	8a32                	mv	s4,a2
    if (dp->valid != 1 ||
    8020561e:	11691703          	lh	a4,278(s2)
    80205622:	4785                	li	a5,1
        return NULL;
    80205624:	4481                	li	s1,0
    if (dp->valid != 1 ||
    80205626:	02f71563          	bne	a4,a5,80205650 <ealloc+0x52>
        !(name = formatname(name))) {  // detect illegal character
    8020562a:	fffff097          	auipc	ra,0xfffff
    8020562e:	39a080e7          	jalr	922(ra) # 802049c4 <formatname>
    80205632:	89aa                	mv	s3,a0
    if (dp->valid != 1 ||
    80205634:	12050063          	beqz	a0,80205754 <ealloc+0x156>
    uint off = 0;
    80205638:	fa042e23          	sw	zero,-68(s0)
    if ((ep = dirlookup(dp, name, &off)) != 0) {  // entry exists
    8020563c:	fbc40613          	addi	a2,s0,-68
    80205640:	85aa                	mv	a1,a0
    80205642:	854a                	mv	a0,s2
    80205644:	00000097          	auipc	ra,0x0
    80205648:	e4e080e7          	jalr	-434(ra) # 80205492 <dirlookup>
    8020564c:	84aa                	mv	s1,a0
    8020564e:	cd0d                	beqz	a0,80205688 <ealloc+0x8a>
}
    80205650:	8526                	mv	a0,s1
    80205652:	60a6                	ld	ra,72(sp)
    80205654:	6406                	ld	s0,64(sp)
    80205656:	74e2                	ld	s1,56(sp)
    80205658:	7942                	ld	s2,48(sp)
    8020565a:	79a2                	ld	s3,40(sp)
    8020565c:	7a02                	ld	s4,32(sp)
    8020565e:	6ae2                	ld	s5,24(sp)
    80205660:	6161                	addi	sp,sp,80
    80205662:	8082                	ret
        panic("ealloc not dir");
    80205664:	00004697          	auipc	a3,0x4
    80205668:	41c68693          	addi	a3,a3,1052 # 80209a80 <__func__.0+0x1b8>
    8020566c:	00004617          	auipc	a2,0x4
    80205670:	62460613          	addi	a2,a2,1572 # 80209c90 <__func__.5>
    80205674:	25300593          	li	a1,595
    80205678:	00004517          	auipc	a0,0x4
    8020567c:	2c050513          	addi	a0,a0,704 # 80209938 <__func__.0+0x70>
    80205680:	ffffb097          	auipc	ra,0xffffb
    80205684:	ec2080e7          	jalr	-318(ra) # 80200542 <_panic_>
    ep = eget(dp, name);
    80205688:	85ce                	mv	a1,s3
    8020568a:	854a                	mv	a0,s2
    8020568c:	fffff097          	auipc	ra,0xfffff
    80205690:	d1c080e7          	jalr	-740(ra) # 802043a8 <eget>
    80205694:	84aa                	mv	s1,a0
    elock(ep);
    80205696:	00000097          	auipc	ra,0x0
    8020569a:	a0e080e7          	jalr	-1522(ra) # 802050a4 <elock>
    ep->attribute = attr;
    8020569e:	11448023          	sb	s4,256(s1)
    ep->file_size = 0;
    802056a2:	1004a423          	sw	zero,264(s1)
    ep->first_clus = 0;
    802056a6:	1004a223          	sw	zero,260(s1)
    ep->parent = edup(dp);
    802056aa:	854a                	mv	a0,s2
    802056ac:	fffff097          	auipc	ra,0xfffff
    802056b0:	7a4080e7          	jalr	1956(ra) # 80204e50 <edup>
    802056b4:	12a4b023          	sd	a0,288(s1)
    ep->off = off;
    802056b8:	fbc42a83          	lw	s5,-68(s0)
    802056bc:	1154ae23          	sw	s5,284(s1)
    ep->clus_cnt = 0;
    802056c0:	1004a823          	sw	zero,272(s1)
    ep->cur_clus = 0;
    802056c4:	1004a623          	sw	zero,268(s1)
    ep->dirty = 0;
    802056c8:	10048aa3          	sb	zero,277(s1)
    strncpy(ep->filename, name, FAT32_MAX_FILENAME);
    802056cc:	0ff00613          	li	a2,255
    802056d0:	85ce                	mv	a1,s3
    802056d2:	8526                	mv	a0,s1
    802056d4:	ffffe097          	auipc	ra,0xffffe
    802056d8:	3ec080e7          	jalr	1004(ra) # 80203ac0 <strncpy>
    ep->filename[FAT32_MAX_FILENAME] = '\0';
    802056dc:	0e048fa3          	sb	zero,255(s1)
    if (attr == ATTR_DIRECTORY) {  // generate "." and ".." for ep
    802056e0:	47c1                	li	a5,16
    802056e2:	02fa0863          	beq	s4,a5,80205712 <ealloc+0x114>
        ep->attribute |= ATTR_ARCHIVE;
    802056e6:	1004c783          	lbu	a5,256(s1)
    802056ea:	0207e793          	ori	a5,a5,32
    802056ee:	10f48023          	sb	a5,256(s1)
    emake(dp, ep, off);
    802056f2:	8656                	mv	a2,s5
    802056f4:	85a6                	mv	a1,s1
    802056f6:	854a                	mv	a0,s2
    802056f8:	fffff097          	auipc	ra,0xfffff
    802056fc:	384080e7          	jalr	900(ra) # 80204a7c <emake>
    ep->valid = 1;
    80205700:	4785                	li	a5,1
    80205702:	10f49b23          	sh	a5,278(s1)
    eunlock(ep);
    80205706:	8526                	mv	a0,s1
    80205708:	00000097          	auipc	ra,0x0
    8020570c:	9e6080e7          	jalr	-1562(ra) # 802050ee <eunlock>
    return ep;
    80205710:	b781                	j	80205650 <ealloc+0x52>
        ep->attribute |= ATTR_DIRECTORY;
    80205712:	1004c783          	lbu	a5,256(s1)
    80205716:	0107e793          	ori	a5,a5,16
    8020571a:	10f48023          	sb	a5,256(s1)
        ep->cur_clus = ep->first_clus = alloc_clus(dp->dev);
    8020571e:	11494503          	lbu	a0,276(s2)
    80205722:	fffff097          	auipc	ra,0xfffff
    80205726:	834080e7          	jalr	-1996(ra) # 80203f56 <alloc_clus>
    8020572a:	2501                	sext.w	a0,a0
    8020572c:	10a4a223          	sw	a0,260(s1)
    80205730:	10a4a623          	sw	a0,268(s1)
        emake(ep, ep, 0);
    80205734:	4601                	li	a2,0
    80205736:	85a6                	mv	a1,s1
    80205738:	8526                	mv	a0,s1
    8020573a:	fffff097          	auipc	ra,0xfffff
    8020573e:	342080e7          	jalr	834(ra) # 80204a7c <emake>
        emake(ep, dp, 32);
    80205742:	02000613          	li	a2,32
    80205746:	85ca                	mv	a1,s2
    80205748:	8526                	mv	a0,s1
    8020574a:	fffff097          	auipc	ra,0xfffff
    8020574e:	332080e7          	jalr	818(ra) # 80204a7c <emake>
    80205752:	b745                	j	802056f2 <ealloc+0xf4>
        return NULL;
    80205754:	84aa                	mv	s1,a0
    80205756:	bded                	j	80205650 <ealloc+0x52>

0000000080205758 <lookup_path>:
    }
    return path;
}

// FAT32 version of namex in xv6's original file system.
static struct dirent* lookup_path(char* path, int parent, char* name) {
    80205758:	715d                	addi	sp,sp,-80
    8020575a:	e486                	sd	ra,72(sp)
    8020575c:	e0a2                	sd	s0,64(sp)
    8020575e:	fc26                	sd	s1,56(sp)
    80205760:	f84a                	sd	s2,48(sp)
    80205762:	f44e                	sd	s3,40(sp)
    80205764:	f052                	sd	s4,32(sp)
    80205766:	ec56                	sd	s5,24(sp)
    80205768:	e85a                	sd	s6,16(sp)
    8020576a:	e45e                	sd	s7,8(sp)
    8020576c:	e062                	sd	s8,0(sp)
    8020576e:	0880                	addi	s0,sp,80
    80205770:	892a                	mv	s2,a0
    80205772:	8b2e                	mv	s6,a1
    80205774:	8ab2                	mv	s5,a2
    struct dirent *entry, *next;
    if (*path == '/') {
    80205776:	00054783          	lbu	a5,0(a0)
    8020577a:	02f00713          	li	a4,47
    8020577e:	02e78663          	beq	a5,a4,802057aa <lookup_path+0x52>
        entry = edup(&root);
    } else if (*path != '\0') {
        entry = edup(myproc()->cwd);
    } else {
        return NULL;
    80205782:	4a01                	li	s4,0
    } else if (*path != '\0') {
    80205784:	cba1                	beqz	a5,802057d4 <lookup_path+0x7c>
        entry = edup(myproc()->cwd);
    80205786:	ffffd097          	auipc	ra,0xffffd
    8020578a:	9e4080e7          	jalr	-1564(ra) # 8020216a <myproc>
    8020578e:	17053503          	ld	a0,368(a0)
    80205792:	fffff097          	auipc	ra,0xfffff
    80205796:	6be080e7          	jalr	1726(ra) # 80204e50 <edup>
    8020579a:	8a2a                	mv	s4,a0
    while (*path == '/') {
    8020579c:	02f00993          	li	s3,47
    802057a0:	0ff00b93          	li	s7,255
    802057a4:	0ff00c13          	li	s8,255
    802057a8:	a0e5                	j	80205890 <lookup_path+0x138>
        entry = edup(&root);
    802057aa:	001e5517          	auipc	a0,0x1e5
    802057ae:	c3650513          	addi	a0,a0,-970 # 803ea3e0 <root>
    802057b2:	fffff097          	auipc	ra,0xfffff
    802057b6:	69e080e7          	jalr	1694(ra) # 80204e50 <edup>
    802057ba:	8a2a                	mv	s4,a0
    802057bc:	b7c5                	j	8020579c <lookup_path+0x44>
    }
    while ((path = skipelem(path, name)) != 0) {
        elock(entry);
        if (!(entry->attribute & ATTR_DIRECTORY)) {
            eunlock(entry);
    802057be:	8552                	mv	a0,s4
    802057c0:	00000097          	auipc	ra,0x0
    802057c4:	92e080e7          	jalr	-1746(ra) # 802050ee <eunlock>
            eput(entry);
    802057c8:	8552                	mv	a0,s4
    802057ca:	00000097          	auipc	ra,0x0
    802057ce:	986080e7          	jalr	-1658(ra) # 80205150 <eput>
            return NULL;
    802057d2:	4a01                	li	s4,0
    if (parent) {
        eput(entry);
        return NULL;
    }
    return entry;
}
    802057d4:	8552                	mv	a0,s4
    802057d6:	60a6                	ld	ra,72(sp)
    802057d8:	6406                	ld	s0,64(sp)
    802057da:	74e2                	ld	s1,56(sp)
    802057dc:	7942                	ld	s2,48(sp)
    802057de:	79a2                	ld	s3,40(sp)
    802057e0:	7a02                	ld	s4,32(sp)
    802057e2:	6ae2                	ld	s5,24(sp)
    802057e4:	6b42                	ld	s6,16(sp)
    802057e6:	6ba2                	ld	s7,8(sp)
    802057e8:	6c02                	ld	s8,0(sp)
    802057ea:	6161                	addi	sp,sp,80
    802057ec:	8082                	ret
            eunlock(entry);
    802057ee:	8552                	mv	a0,s4
    802057f0:	00000097          	auipc	ra,0x0
    802057f4:	8fe080e7          	jalr	-1794(ra) # 802050ee <eunlock>
            return entry;
    802057f8:	bff1                	j	802057d4 <lookup_path+0x7c>
            eunlock(entry);
    802057fa:	8552                	mv	a0,s4
    802057fc:	00000097          	auipc	ra,0x0
    80205800:	8f2080e7          	jalr	-1806(ra) # 802050ee <eunlock>
            eput(entry);
    80205804:	8552                	mv	a0,s4
    80205806:	00000097          	auipc	ra,0x0
    8020580a:	94a080e7          	jalr	-1718(ra) # 80205150 <eput>
            return NULL;
    8020580e:	8a4a                	mv	s4,s2
    80205810:	b7d1                	j	802057d4 <lookup_path+0x7c>
    int len = path - s;
    80205812:	412487b3          	sub	a5,s1,s2
    80205816:	863e                	mv	a2,a5
    80205818:	2781                	sext.w	a5,a5
    8020581a:	00fbd363          	bge	s7,a5,80205820 <lookup_path+0xc8>
    8020581e:	8662                	mv	a2,s8
    80205820:	0006079b          	sext.w	a5,a2
    name[len] = 0;
    80205824:	97d6                	add	a5,a5,s5
    80205826:	00078023          	sb	zero,0(a5)
    memmove(name, s, len);
    8020582a:	2601                	sext.w	a2,a2
    8020582c:	85ca                	mv	a1,s2
    8020582e:	8556                	mv	a0,s5
    80205830:	ffffe097          	auipc	ra,0xffffe
    80205834:	1e0080e7          	jalr	480(ra) # 80203a10 <memmove>
    while (*path == '/') {
    80205838:	0004c783          	lbu	a5,0(s1)
    8020583c:	01379763          	bne	a5,s3,8020584a <lookup_path+0xf2>
        path++;
    80205840:	0485                	addi	s1,s1,1
    while (*path == '/') {
    80205842:	0004c783          	lbu	a5,0(s1)
    80205846:	ff378de3          	beq	a5,s3,80205840 <lookup_path+0xe8>
        elock(entry);
    8020584a:	8552                	mv	a0,s4
    8020584c:	00000097          	auipc	ra,0x0
    80205850:	858080e7          	jalr	-1960(ra) # 802050a4 <elock>
        if (!(entry->attribute & ATTR_DIRECTORY)) {
    80205854:	100a4783          	lbu	a5,256(s4)
    80205858:	8bc1                	andi	a5,a5,16
    8020585a:	d3b5                	beqz	a5,802057be <lookup_path+0x66>
        if (parent && *path == '\0') {
    8020585c:	000b0563          	beqz	s6,80205866 <lookup_path+0x10e>
    80205860:	0004c783          	lbu	a5,0(s1)
    80205864:	d7c9                	beqz	a5,802057ee <lookup_path+0x96>
        if ((next = dirlookup(entry, name, 0)) == 0) {
    80205866:	4601                	li	a2,0
    80205868:	85d6                	mv	a1,s5
    8020586a:	8552                	mv	a0,s4
    8020586c:	00000097          	auipc	ra,0x0
    80205870:	c26080e7          	jalr	-986(ra) # 80205492 <dirlookup>
    80205874:	892a                	mv	s2,a0
    80205876:	d151                	beqz	a0,802057fa <lookup_path+0xa2>
        eunlock(entry);
    80205878:	8552                	mv	a0,s4
    8020587a:	00000097          	auipc	ra,0x0
    8020587e:	874080e7          	jalr	-1932(ra) # 802050ee <eunlock>
        eput(entry);
    80205882:	8552                	mv	a0,s4
    80205884:	00000097          	auipc	ra,0x0
    80205888:	8cc080e7          	jalr	-1844(ra) # 80205150 <eput>
        entry = next;
    8020588c:	8a4a                	mv	s4,s2
        eput(entry);
    8020588e:	8926                	mv	s2,s1
    while (*path == '/') {
    80205890:	00094783          	lbu	a5,0(s2)
    80205894:	03379363          	bne	a5,s3,802058ba <lookup_path+0x162>
        path++;
    80205898:	0905                	addi	s2,s2,1
    while (*path == '/') {
    8020589a:	00094783          	lbu	a5,0(s2)
    8020589e:	ff378de3          	beq	a5,s3,80205898 <lookup_path+0x140>
    if (*path == 0) {
    802058a2:	cf89                	beqz	a5,802058bc <lookup_path+0x164>
        path++;
    802058a4:	84ca                	mv	s1,s2
    while (*path != '/' && *path != 0) {
    802058a6:	f73786e3          	beq	a5,s3,80205812 <lookup_path+0xba>
        eput(entry);
    802058aa:	84ca                	mv	s1,s2
    while (*path != '/' && *path != 0) {
    802058ac:	d3bd                	beqz	a5,80205812 <lookup_path+0xba>
        path++;
    802058ae:	0485                	addi	s1,s1,1
    while (*path != '/' && *path != 0) {
    802058b0:	0004c783          	lbu	a5,0(s1)
    802058b4:	ff379ce3          	bne	a5,s3,802058ac <lookup_path+0x154>
    802058b8:	bfa9                	j	80205812 <lookup_path+0xba>
    if (*path == 0) {
    802058ba:	fbe5                	bnez	a5,802058aa <lookup_path+0x152>
    if (parent) {
    802058bc:	f00b0ce3          	beqz	s6,802057d4 <lookup_path+0x7c>
        eput(entry);
    802058c0:	8552                	mv	a0,s4
    802058c2:	00000097          	auipc	ra,0x0
    802058c6:	88e080e7          	jalr	-1906(ra) # 80205150 <eput>
        return NULL;
    802058ca:	4a01                	li	s4,0
    802058cc:	b721                	j	802057d4 <lookup_path+0x7c>

00000000802058ce <ename>:

struct dirent* ename(char* path) {
    802058ce:	716d                	addi	sp,sp,-272
    802058d0:	e606                	sd	ra,264(sp)
    802058d2:	e222                	sd	s0,256(sp)
    802058d4:	0a00                	addi	s0,sp,272
    char name[FAT32_MAX_FILENAME + 1];
    return lookup_path(path, 0, name);
    802058d6:	ef040613          	addi	a2,s0,-272
    802058da:	4581                	li	a1,0
    802058dc:	00000097          	auipc	ra,0x0
    802058e0:	e7c080e7          	jalr	-388(ra) # 80205758 <lookup_path>
}
    802058e4:	60b2                	ld	ra,264(sp)
    802058e6:	6412                	ld	s0,256(sp)
    802058e8:	6151                	addi	sp,sp,272
    802058ea:	8082                	ret

00000000802058ec <enameparent>:

struct dirent* enameparent(char* path, char* name) {
    802058ec:	1141                	addi	sp,sp,-16
    802058ee:	e406                	sd	ra,8(sp)
    802058f0:	e022                	sd	s0,0(sp)
    802058f2:	0800                	addi	s0,sp,16
    802058f4:	862e                	mv	a2,a1
    return lookup_path(path, 1, name);
    802058f6:	4585                	li	a1,1
    802058f8:	00000097          	auipc	ra,0x0
    802058fc:	e60080e7          	jalr	-416(ra) # 80205758 <lookup_path>
}
    80205900:	60a2                	ld	ra,8(sp)
    80205902:	6402                	ld	s0,0(sp)
    80205904:	0141                	addi	sp,sp,16
    80205906:	8082                	ret

0000000080205908 <create>:
struct dirent* create(char* path, short type, int mode) {
    80205908:	7169                	addi	sp,sp,-304
    8020590a:	f606                	sd	ra,296(sp)
    8020590c:	f222                	sd	s0,288(sp)
    8020590e:	ee26                	sd	s1,280(sp)
    80205910:	ea4a                	sd	s2,272(sp)
    80205912:	e64e                	sd	s3,264(sp)
    80205914:	1a00                	addi	s0,sp,304
    80205916:	892e                	mv	s2,a1
    if ((dp = enameparent(path, name)) == NULL)
    80205918:	ed040593          	addi	a1,s0,-304
    8020591c:	00000097          	auipc	ra,0x0
    80205920:	fd0080e7          	jalr	-48(ra) # 802058ec <enameparent>
    80205924:	84aa                	mv	s1,a0
    80205926:	c945                	beqz	a0,802059d6 <create+0xce>
    elock(dp);
    80205928:	fffff097          	auipc	ra,0xfffff
    8020592c:	77c080e7          	jalr	1916(ra) # 802050a4 <elock>
    if (type == T_DIR) {
    80205930:	fff90613          	addi	a2,s2,-1
    80205934:	00163613          	seqz	a2,a2
    if ((ep = ealloc(dp, name, mode)) == NULL) {
    80205938:	0046161b          	slliw	a2,a2,0x4
    8020593c:	ed040593          	addi	a1,s0,-304
    80205940:	8526                	mv	a0,s1
    80205942:	00000097          	auipc	ra,0x0
    80205946:	cbc080e7          	jalr	-836(ra) # 802055fe <ealloc>
    8020594a:	89aa                	mv	s3,a0
    8020594c:	c529                	beqz	a0,80205996 <create+0x8e>
    if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
    8020594e:	0009079b          	sext.w	a5,s2
    80205952:	4705                	li	a4,1
    80205954:	04e78c63          	beq	a5,a4,802059ac <create+0xa4>
    80205958:	2901                	sext.w	s2,s2
    8020595a:	4789                	li	a5,2
    8020595c:	00f91663          	bne	s2,a5,80205968 <create+0x60>
        (type == T_FILE && (ep->attribute & ATTR_DIRECTORY))) {
    80205960:	10054783          	lbu	a5,256(a0)
    80205964:	8bc1                	andi	a5,a5,16
    80205966:	e7b9                	bnez	a5,802059b4 <create+0xac>
    eunlock(dp);
    80205968:	8526                	mv	a0,s1
    8020596a:	fffff097          	auipc	ra,0xfffff
    8020596e:	784080e7          	jalr	1924(ra) # 802050ee <eunlock>
    eput(dp);
    80205972:	8526                	mv	a0,s1
    80205974:	fffff097          	auipc	ra,0xfffff
    80205978:	7dc080e7          	jalr	2012(ra) # 80205150 <eput>
    elock(ep);
    8020597c:	854e                	mv	a0,s3
    8020597e:	fffff097          	auipc	ra,0xfffff
    80205982:	726080e7          	jalr	1830(ra) # 802050a4 <elock>
}
    80205986:	854e                	mv	a0,s3
    80205988:	70b2                	ld	ra,296(sp)
    8020598a:	7412                	ld	s0,288(sp)
    8020598c:	64f2                	ld	s1,280(sp)
    8020598e:	6952                	ld	s2,272(sp)
    80205990:	69b2                	ld	s3,264(sp)
    80205992:	6155                	addi	sp,sp,304
    80205994:	8082                	ret
        eunlock(dp);
    80205996:	8526                	mv	a0,s1
    80205998:	fffff097          	auipc	ra,0xfffff
    8020599c:	756080e7          	jalr	1878(ra) # 802050ee <eunlock>
        eput(dp);
    802059a0:	8526                	mv	a0,s1
    802059a2:	fffff097          	auipc	ra,0xfffff
    802059a6:	7ae080e7          	jalr	1966(ra) # 80205150 <eput>
        return NULL;
    802059aa:	bff1                	j	80205986 <create+0x7e>
    if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
    802059ac:	10054783          	lbu	a5,256(a0)
    802059b0:	8bc1                	andi	a5,a5,16
    802059b2:	fbdd                	bnez	a5,80205968 <create+0x60>
        eunlock(dp);
    802059b4:	8526                	mv	a0,s1
    802059b6:	fffff097          	auipc	ra,0xfffff
    802059ba:	738080e7          	jalr	1848(ra) # 802050ee <eunlock>
        eput(ep);
    802059be:	854e                	mv	a0,s3
    802059c0:	fffff097          	auipc	ra,0xfffff
    802059c4:	790080e7          	jalr	1936(ra) # 80205150 <eput>
        eput(dp);
    802059c8:	8526                	mv	a0,s1
    802059ca:	fffff097          	auipc	ra,0xfffff
    802059ce:	786080e7          	jalr	1926(ra) # 80205150 <eput>
        return NULL;
    802059d2:	4981                	li	s3,0
    802059d4:	bf4d                	j	80205986 <create+0x7e>
        return NULL;
    802059d6:	89aa                	mv	s3,a0
    802059d8:	b77d                	j	80205986 <create+0x7e>

00000000802059da <fileinit>:
struct {
    struct Spinlock lock;
    struct file file[NFILE];
} ftable;

void fileinit(void) {
    802059da:	1101                	addi	sp,sp,-32
    802059dc:	ec06                	sd	ra,24(sp)
    802059de:	e822                	sd	s0,16(sp)
    802059e0:	e426                	sd	s1,8(sp)
    802059e2:	e04a                	sd	s2,0(sp)
    802059e4:	1000                	addi	s0,sp,32
    initLock(&ftable.lock, "ftable");
    802059e6:	00004597          	auipc	a1,0x4
    802059ea:	0ea58593          	addi	a1,a1,234 # 80209ad0 <__func__.0+0x10>
    802059ee:	001e9517          	auipc	a0,0x1e9
    802059f2:	20250513          	addi	a0,a0,514 # 803eebf0 <ftable>
    802059f6:	ffffe097          	auipc	ra,0xffffe
    802059fa:	e72080e7          	jalr	-398(ra) # 80203868 <initLock>
    struct file* f;
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
    802059fe:	001e9497          	auipc	s1,0x1e9
    80205a02:	20a48493          	addi	s1,s1,522 # 803eec08 <ftable+0x18>
    80205a06:	001ea917          	auipc	s2,0x1ea
    80205a0a:	c0290913          	addi	s2,s2,-1022 # 803ef608 <test_content_to_read>
        memset(f, 0, sizeof(struct file));
    80205a0e:	02800613          	li	a2,40
    80205a12:	4581                	li	a1,0
    80205a14:	8526                	mv	a0,s1
    80205a16:	ffffe097          	auipc	ra,0xffffe
    80205a1a:	f9e080e7          	jalr	-98(ra) # 802039b4 <memset>
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
    80205a1e:	02848493          	addi	s1,s1,40
    80205a22:	ff2496e3          	bne	s1,s2,80205a0e <fileinit+0x34>
    }
#ifdef ZZY_DEBUG
    printf("fileinit\n");
#endif
}
    80205a26:	60e2                	ld	ra,24(sp)
    80205a28:	6442                	ld	s0,16(sp)
    80205a2a:	64a2                	ld	s1,8(sp)
    80205a2c:	6902                	ld	s2,0(sp)
    80205a2e:	6105                	addi	sp,sp,32
    80205a30:	8082                	ret

0000000080205a32 <filealloc>:

// Allocate a file structure.
struct file* filealloc(void) {
    80205a32:	1101                	addi	sp,sp,-32
    80205a34:	ec06                	sd	ra,24(sp)
    80205a36:	e822                	sd	s0,16(sp)
    80205a38:	e426                	sd	s1,8(sp)
    80205a3a:	1000                	addi	s0,sp,32
    struct file* f;

    acquireLock(&ftable.lock);
    80205a3c:	001e9517          	auipc	a0,0x1e9
    80205a40:	1b450513          	addi	a0,a0,436 # 803eebf0 <ftable>
    80205a44:	ffffe097          	auipc	ra,0xffffe
    80205a48:	e6e080e7          	jalr	-402(ra) # 802038b2 <acquireLock>
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
    80205a4c:	001e9497          	auipc	s1,0x1e9
    80205a50:	1bc48493          	addi	s1,s1,444 # 803eec08 <ftable+0x18>
    80205a54:	001ea717          	auipc	a4,0x1ea
    80205a58:	bb470713          	addi	a4,a4,-1100 # 803ef608 <test_content_to_read>
        if (f->ref == 0) {
    80205a5c:	40dc                	lw	a5,4(s1)
    80205a5e:	cf99                	beqz	a5,80205a7c <filealloc+0x4a>
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
    80205a60:	02848493          	addi	s1,s1,40
    80205a64:	fee49ce3          	bne	s1,a4,80205a5c <filealloc+0x2a>
            f->ref = 1;
            releaseLock(&ftable.lock);
            return f;
        }
    }
    releaseLock(&ftable.lock);
    80205a68:	001e9517          	auipc	a0,0x1e9
    80205a6c:	18850513          	addi	a0,a0,392 # 803eebf0 <ftable>
    80205a70:	ffffe097          	auipc	ra,0xffffe
    80205a74:	ea6080e7          	jalr	-346(ra) # 80203916 <releaseLock>
    return NULL;
    80205a78:	4481                	li	s1,0
    80205a7a:	a819                	j	80205a90 <filealloc+0x5e>
            f->ref = 1;
    80205a7c:	4785                	li	a5,1
    80205a7e:	c0dc                	sw	a5,4(s1)
            releaseLock(&ftable.lock);
    80205a80:	001e9517          	auipc	a0,0x1e9
    80205a84:	17050513          	addi	a0,a0,368 # 803eebf0 <ftable>
    80205a88:	ffffe097          	auipc	ra,0xffffe
    80205a8c:	e8e080e7          	jalr	-370(ra) # 80203916 <releaseLock>
}
    80205a90:	8526                	mv	a0,s1
    80205a92:	60e2                	ld	ra,24(sp)
    80205a94:	6442                	ld	s0,16(sp)
    80205a96:	64a2                	ld	s1,8(sp)
    80205a98:	6105                	addi	sp,sp,32
    80205a9a:	8082                	ret

0000000080205a9c <filedup>:

// Increment ref count for file f.
struct file* filedup(struct file* f) {
    80205a9c:	1101                	addi	sp,sp,-32
    80205a9e:	ec06                	sd	ra,24(sp)
    80205aa0:	e822                	sd	s0,16(sp)
    80205aa2:	e426                	sd	s1,8(sp)
    80205aa4:	1000                	addi	s0,sp,32
    80205aa6:	84aa                	mv	s1,a0
    acquireLock(&ftable.lock);
    80205aa8:	001e9517          	auipc	a0,0x1e9
    80205aac:	14850513          	addi	a0,a0,328 # 803eebf0 <ftable>
    80205ab0:	ffffe097          	auipc	ra,0xffffe
    80205ab4:	e02080e7          	jalr	-510(ra) # 802038b2 <acquireLock>
    if (f->ref < 1)
    80205ab8:	40dc                	lw	a5,4(s1)
    80205aba:	02f05263          	blez	a5,80205ade <filedup+0x42>
        panic("filedup");
    f->ref++;
    80205abe:	2785                	addiw	a5,a5,1
    80205ac0:	c0dc                	sw	a5,4(s1)
    releaseLock(&ftable.lock);
    80205ac2:	001e9517          	auipc	a0,0x1e9
    80205ac6:	12e50513          	addi	a0,a0,302 # 803eebf0 <ftable>
    80205aca:	ffffe097          	auipc	ra,0xffffe
    80205ace:	e4c080e7          	jalr	-436(ra) # 80203916 <releaseLock>
    return f;
}
    80205ad2:	8526                	mv	a0,s1
    80205ad4:	60e2                	ld	ra,24(sp)
    80205ad6:	6442                	ld	s0,16(sp)
    80205ad8:	64a2                	ld	s1,8(sp)
    80205ada:	6105                	addi	sp,sp,32
    80205adc:	8082                	ret
        panic("filedup");
    80205ade:	00004697          	auipc	a3,0x4
    80205ae2:	ffa68693          	addi	a3,a3,-6 # 80209ad8 <__func__.0+0x18>
    80205ae6:	00004617          	auipc	a2,0x4
    80205aea:	1c260613          	addi	a2,a2,450 # 80209ca8 <__func__.3>
    80205aee:	03100593          	li	a1,49
    80205af2:	00004517          	auipc	a0,0x4
    80205af6:	fee50513          	addi	a0,a0,-18 # 80209ae0 <__func__.0+0x20>
    80205afa:	ffffb097          	auipc	ra,0xffffb
    80205afe:	a48080e7          	jalr	-1464(ra) # 80200542 <_panic_>

0000000080205b02 <fileclose>:

// Close file f.  (Decrement ref count, close when reaches 0.)
void fileclose(struct file* f) {
    80205b02:	7179                	addi	sp,sp,-48
    80205b04:	f406                	sd	ra,40(sp)
    80205b06:	f022                	sd	s0,32(sp)
    80205b08:	ec26                	sd	s1,24(sp)
    80205b0a:	e84a                	sd	s2,16(sp)
    80205b0c:	e44e                	sd	s3,8(sp)
    80205b0e:	1800                	addi	s0,sp,48
    80205b10:	84aa                	mv	s1,a0
    struct file ff;

    acquireLock(&ftable.lock);
    80205b12:	001e9517          	auipc	a0,0x1e9
    80205b16:	0de50513          	addi	a0,a0,222 # 803eebf0 <ftable>
    80205b1a:	ffffe097          	auipc	ra,0xffffe
    80205b1e:	d98080e7          	jalr	-616(ra) # 802038b2 <acquireLock>
    if (f->ref < 1)
    80205b22:	40dc                	lw	a5,4(s1)
    80205b24:	04f05563          	blez	a5,80205b6e <fileclose+0x6c>
        panic("fileclose");
    if (--f->ref > 0) {
    80205b28:	37fd                	addiw	a5,a5,-1
    80205b2a:	0007871b          	sext.w	a4,a5
    80205b2e:	c0dc                	sw	a5,4(s1)
    80205b30:	06e04163          	bgtz	a4,80205b92 <fileclose+0x90>
        releaseLock(&ftable.lock);
        return;
    }
    ff = *f;
    80205b34:	0004a903          	lw	s2,0(s1)
    80205b38:	0184b983          	ld	s3,24(s1)
    f->ref = 0;
    80205b3c:	0004a223          	sw	zero,4(s1)
    f->type = FD_NONE;
    80205b40:	0004a023          	sw	zero,0(s1)
    releaseLock(&ftable.lock);
    80205b44:	001e9517          	auipc	a0,0x1e9
    80205b48:	0ac50513          	addi	a0,a0,172 # 803eebf0 <ftable>
    80205b4c:	ffffe097          	auipc	ra,0xffffe
    80205b50:	dca080e7          	jalr	-566(ra) # 80203916 <releaseLock>

    if (ff.type == FD_PIPE) {
    80205b54:	4785                	li	a5,1
    80205b56:	04f90763          	beq	s2,a5,80205ba4 <fileclose+0xa2>
        panic("pipe unimplemented");
    } else if (ff.type == FD_ENTRY) {
    80205b5a:	4789                	li	a5,2
    80205b5c:	06f90663          	beq	s2,a5,80205bc8 <fileclose+0xc6>
        eput(ff.ep);
    } else if (ff.type == FD_DEVICE) {
    }
}
    80205b60:	70a2                	ld	ra,40(sp)
    80205b62:	7402                	ld	s0,32(sp)
    80205b64:	64e2                	ld	s1,24(sp)
    80205b66:	6942                	ld	s2,16(sp)
    80205b68:	69a2                	ld	s3,8(sp)
    80205b6a:	6145                	addi	sp,sp,48
    80205b6c:	8082                	ret
        panic("fileclose");
    80205b6e:	00004697          	auipc	a3,0x4
    80205b72:	f7a68693          	addi	a3,a3,-134 # 80209ae8 <__func__.0+0x28>
    80205b76:	00004617          	auipc	a2,0x4
    80205b7a:	fba60613          	addi	a2,a2,-70 # 80209b30 <__func__.2>
    80205b7e:	03d00593          	li	a1,61
    80205b82:	00004517          	auipc	a0,0x4
    80205b86:	f5e50513          	addi	a0,a0,-162 # 80209ae0 <__func__.0+0x20>
    80205b8a:	ffffb097          	auipc	ra,0xffffb
    80205b8e:	9b8080e7          	jalr	-1608(ra) # 80200542 <_panic_>
        releaseLock(&ftable.lock);
    80205b92:	001e9517          	auipc	a0,0x1e9
    80205b96:	05e50513          	addi	a0,a0,94 # 803eebf0 <ftable>
    80205b9a:	ffffe097          	auipc	ra,0xffffe
    80205b9e:	d7c080e7          	jalr	-644(ra) # 80203916 <releaseLock>
        return;
    80205ba2:	bf7d                	j	80205b60 <fileclose+0x5e>
        panic("pipe unimplemented");
    80205ba4:	00004697          	auipc	a3,0x4
    80205ba8:	f5468693          	addi	a3,a3,-172 # 80209af8 <__func__.0+0x38>
    80205bac:	00004617          	auipc	a2,0x4
    80205bb0:	f8460613          	addi	a2,a2,-124 # 80209b30 <__func__.2>
    80205bb4:	04800593          	li	a1,72
    80205bb8:	00004517          	auipc	a0,0x4
    80205bbc:	f2850513          	addi	a0,a0,-216 # 80209ae0 <__func__.0+0x20>
    80205bc0:	ffffb097          	auipc	ra,0xffffb
    80205bc4:	982080e7          	jalr	-1662(ra) # 80200542 <_panic_>
        eput(ff.ep);
    80205bc8:	854e                	mv	a0,s3
    80205bca:	fffff097          	auipc	ra,0xfffff
    80205bce:	586080e7          	jalr	1414(ra) # 80205150 <eput>
    80205bd2:	b779                	j	80205b60 <fileclose+0x5e>

0000000080205bd4 <filestat>:

// Get metadata about file f.
// addr is a user virtual address, pointing to a struct stat.
int filestat(struct file* f, u64 addr) {
    80205bd4:	7159                	addi	sp,sp,-112
    80205bd6:	f486                	sd	ra,104(sp)
    80205bd8:	f0a2                	sd	s0,96(sp)
    80205bda:	eca6                	sd	s1,88(sp)
    80205bdc:	e8ca                	sd	s2,80(sp)
    80205bde:	e4ce                	sd	s3,72(sp)
    80205be0:	1880                	addi	s0,sp,112
    80205be2:	84aa                	mv	s1,a0
    80205be4:	89ae                	mv	s3,a1
    struct Process *p = myproc();
    80205be6:	ffffc097          	auipc	ra,0xffffc
    80205bea:	584080e7          	jalr	1412(ra) # 8020216a <myproc>
    struct stat st;

    if (f->type == FD_ENTRY) {
    80205bee:	4098                	lw	a4,0(s1)
    80205bf0:	4789                	li	a5,2
    80205bf2:	04f71863          	bne	a4,a5,80205c42 <filestat+0x6e>
    80205bf6:	892a                	mv	s2,a0
        elock(f->ep);
    80205bf8:	6c88                	ld	a0,24(s1)
    80205bfa:	fffff097          	auipc	ra,0xfffff
    80205bfe:	4aa080e7          	jalr	1194(ra) # 802050a4 <elock>
        estat(f->ep, &st);
    80205c02:	f9840593          	addi	a1,s0,-104
    80205c06:	6c88                	ld	a0,24(s1)
    80205c08:	fffff097          	auipc	ra,0xfffff
    80205c0c:	680080e7          	jalr	1664(ra) # 80205288 <estat>
        eunlock(f->ep);
    80205c10:	6c88                	ld	a0,24(s1)
    80205c12:	fffff097          	auipc	ra,0xfffff
    80205c16:	4dc080e7          	jalr	1244(ra) # 802050ee <eunlock>
        if(copyout(p->pgdir, addr, (char *)&st, sizeof(st)) < 0)
    80205c1a:	03800693          	li	a3,56
    80205c1e:	f9840613          	addi	a2,s0,-104
    80205c22:	85ce                	mv	a1,s3
    80205c24:	13093503          	ld	a0,304(s2)
    80205c28:	ffffc097          	auipc	ra,0xffffc
    80205c2c:	0b2080e7          	jalr	178(ra) # 80201cda <copyout>
    80205c30:	41f5551b          	sraiw	a0,a0,0x1f
            return -1;
        return 0;
    }
    return -1;
}
    80205c34:	70a6                	ld	ra,104(sp)
    80205c36:	7406                	ld	s0,96(sp)
    80205c38:	64e6                	ld	s1,88(sp)
    80205c3a:	6946                	ld	s2,80(sp)
    80205c3c:	69a6                	ld	s3,72(sp)
    80205c3e:	6165                	addi	sp,sp,112
    80205c40:	8082                	ret
    return -1;
    80205c42:	557d                	li	a0,-1
    80205c44:	bfc5                	j	80205c34 <filestat+0x60>

0000000080205c46 <fileread>:

// Read from file f.
// addr is a user virtual address.
int fileread(struct file* f, u64 addr, int n) {
    80205c46:	7179                	addi	sp,sp,-48
    80205c48:	f406                	sd	ra,40(sp)
    80205c4a:	f022                	sd	s0,32(sp)
    80205c4c:	ec26                	sd	s1,24(sp)
    80205c4e:	e84a                	sd	s2,16(sp)
    80205c50:	e44e                	sd	s3,8(sp)
    80205c52:	1800                	addi	s0,sp,48
    int r = 0;

    if (f->readable == 0)
    80205c54:	00854783          	lbu	a5,8(a0)
    80205c58:	c7f9                	beqz	a5,80205d26 <fileread+0xe0>
    80205c5a:	84aa                	mv	s1,a0
    80205c5c:	892e                	mv	s2,a1
    80205c5e:	89b2                	mv	s3,a2
        return -1;

    switch (f->type) {
    80205c60:	411c                	lw	a5,0(a0)
    80205c62:	4709                	li	a4,2
    80205c64:	08e78063          	beq	a5,a4,80205ce4 <fileread+0x9e>
    80205c68:	470d                	li	a4,3
    80205c6a:	02e79663          	bne	a5,a4,80205c96 <fileread+0x50>
        case FD_PIPE:
            panic("pipe unimplemented");      
            break;
        case FD_DEVICE:
            if (f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
    80205c6e:	02451783          	lh	a5,36(a0)
    80205c72:	03079693          	slli	a3,a5,0x30
    80205c76:	92c1                	srli	a3,a3,0x30
    80205c78:	470d                	li	a4,3
    80205c7a:	0ad76863          	bltu	a4,a3,80205d2a <fileread+0xe4>
    80205c7e:	0792                	slli	a5,a5,0x4
    80205c80:	001e9717          	auipc	a4,0x1e9
    80205c84:	f3070713          	addi	a4,a4,-208 # 803eebb0 <devsw>
    80205c88:	97ba                	add	a5,a5,a4
    80205c8a:	639c                	ld	a5,0(a5)
    80205c8c:	c3cd                	beqz	a5,80205d2e <fileread+0xe8>
                return -1;
            r = devsw[f->major].read(1, addr, n);
    80205c8e:	4505                	li	a0,1
    80205c90:	9782                	jalr	a5
    80205c92:	892a                	mv	s2,a0
            break;
    80205c94:	a049                	j	80205d16 <fileread+0xd0>
    switch (f->type) {
    80205c96:	4705                	li	a4,1
    80205c98:	02e78463          	beq	a5,a4,80205cc0 <fileread+0x7a>
            if ((r = eread(f->ep, 1, addr, f->off, n)) > 0)
                f->off += r;
            eunlock(f->ep);
            break;
        default:
            panic("fileread");
    80205c9c:	00004697          	auipc	a3,0x4
    80205ca0:	e7468693          	addi	a3,a3,-396 # 80209b10 <__func__.0+0x50>
    80205ca4:	00004617          	auipc	a2,0x4
    80205ca8:	e9c60613          	addi	a2,a2,-356 # 80209b40 <__func__.1>
    80205cac:	07800593          	li	a1,120
    80205cb0:	00004517          	auipc	a0,0x4
    80205cb4:	e3050513          	addi	a0,a0,-464 # 80209ae0 <__func__.0+0x20>
    80205cb8:	ffffb097          	auipc	ra,0xffffb
    80205cbc:	88a080e7          	jalr	-1910(ra) # 80200542 <_panic_>
            panic("pipe unimplemented");      
    80205cc0:	00004697          	auipc	a3,0x4
    80205cc4:	e3868693          	addi	a3,a3,-456 # 80209af8 <__func__.0+0x38>
    80205cc8:	00004617          	auipc	a2,0x4
    80205ccc:	e7860613          	addi	a2,a2,-392 # 80209b40 <__func__.1>
    80205cd0:	06a00593          	li	a1,106
    80205cd4:	00004517          	auipc	a0,0x4
    80205cd8:	e0c50513          	addi	a0,a0,-500 # 80209ae0 <__func__.0+0x20>
    80205cdc:	ffffb097          	auipc	ra,0xffffb
    80205ce0:	866080e7          	jalr	-1946(ra) # 80200542 <_panic_>
            elock(f->ep);
    80205ce4:	6d08                	ld	a0,24(a0)
    80205ce6:	fffff097          	auipc	ra,0xfffff
    80205cea:	3be080e7          	jalr	958(ra) # 802050a4 <elock>
            if ((r = eread(f->ep, 1, addr, f->off, n)) > 0)
    80205cee:	874e                	mv	a4,s3
    80205cf0:	5094                	lw	a3,32(s1)
    80205cf2:	864a                	mv	a2,s2
    80205cf4:	4585                	li	a1,1
    80205cf6:	6c88                	ld	a0,24(s1)
    80205cf8:	fffff097          	auipc	ra,0xfffff
    80205cfc:	aa8080e7          	jalr	-1368(ra) # 802047a0 <eread>
    80205d00:	892a                	mv	s2,a0
    80205d02:	00a05563          	blez	a0,80205d0c <fileread+0xc6>
                f->off += r;
    80205d06:	509c                	lw	a5,32(s1)
    80205d08:	9fa9                	addw	a5,a5,a0
    80205d0a:	d09c                	sw	a5,32(s1)
            eunlock(f->ep);
    80205d0c:	6c88                	ld	a0,24(s1)
    80205d0e:	fffff097          	auipc	ra,0xfffff
    80205d12:	3e0080e7          	jalr	992(ra) # 802050ee <eunlock>
    }

    return r;
}
    80205d16:	854a                	mv	a0,s2
    80205d18:	70a2                	ld	ra,40(sp)
    80205d1a:	7402                	ld	s0,32(sp)
    80205d1c:	64e2                	ld	s1,24(sp)
    80205d1e:	6942                	ld	s2,16(sp)
    80205d20:	69a2                	ld	s3,8(sp)
    80205d22:	6145                	addi	sp,sp,48
    80205d24:	8082                	ret
        return -1;
    80205d26:	597d                	li	s2,-1
    80205d28:	b7fd                	j	80205d16 <fileread+0xd0>
                return -1;
    80205d2a:	597d                	li	s2,-1
    80205d2c:	b7ed                	j	80205d16 <fileread+0xd0>
    80205d2e:	597d                	li	s2,-1
    80205d30:	b7dd                	j	80205d16 <fileread+0xd0>

0000000080205d32 <filewrite>:

// Write to file f.
// addr is a user virtual address.
int filewrite(struct file* f, u64 addr, int n) {
    80205d32:	7179                	addi	sp,sp,-48
    80205d34:	f406                	sd	ra,40(sp)
    80205d36:	f022                	sd	s0,32(sp)
    80205d38:	ec26                	sd	s1,24(sp)
    80205d3a:	e84a                	sd	s2,16(sp)
    80205d3c:	e44e                	sd	s3,8(sp)
    80205d3e:	e052                	sd	s4,0(sp)
    80205d40:	1800                	addi	s0,sp,48
    int ret = 0;

    if (f->writable == 0)
    80205d42:	00954783          	lbu	a5,9(a0)
    80205d46:	cfe1                	beqz	a5,80205e1e <filewrite+0xec>
    80205d48:	84aa                	mv	s1,a0
    80205d4a:	892e                	mv	s2,a1
    80205d4c:	89b2                	mv	s3,a2
        return -1;

    if (f->type == FD_PIPE) {
    80205d4e:	411c                	lw	a5,0(a0)
    80205d50:	4705                	li	a4,1
    80205d52:	04e78963          	beq	a5,a4,80205da4 <filewrite+0x72>
        panic("pipe unimplemented");
    } else if (f->type == FD_DEVICE) {
    80205d56:	470d                	li	a4,3
    80205d58:	06e78863          	beq	a5,a4,80205dc8 <filewrite+0x96>
        if (f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
            return -1;
        ret = devsw[f->major].write(1, addr, n);
    } else if (f->type == FD_ENTRY) {
    80205d5c:	4709                	li	a4,2
    80205d5e:	08e79e63          	bne	a5,a4,80205dfa <filewrite+0xc8>
        elock(f->ep);
    80205d62:	6d08                	ld	a0,24(a0)
    80205d64:	fffff097          	auipc	ra,0xfffff
    80205d68:	340080e7          	jalr	832(ra) # 802050a4 <elock>
        if (ewrite(f->ep, 1, addr, f->off, n) == n) {
    80205d6c:	00098a1b          	sext.w	s4,s3
    80205d70:	8752                	mv	a4,s4
    80205d72:	5094                	lw	a3,32(s1)
    80205d74:	864a                	mv	a2,s2
    80205d76:	4585                	li	a1,1
    80205d78:	6c88                	ld	a0,24(s1)
    80205d7a:	fffff097          	auipc	ra,0xfffff
    80205d7e:	b1e080e7          	jalr	-1250(ra) # 80204898 <ewrite>
            ret = n;
            f->off += n;
        } else {
            ret = -1;
    80205d82:	597d                	li	s2,-1
        if (ewrite(f->ep, 1, addr, f->off, n) == n) {
    80205d84:	07350563          	beq	a0,s3,80205dee <filewrite+0xbc>
        }
        eunlock(f->ep);
    80205d88:	6c88                	ld	a0,24(s1)
    80205d8a:	fffff097          	auipc	ra,0xfffff
    80205d8e:	364080e7          	jalr	868(ra) # 802050ee <eunlock>
    } else {
        panic("filewrite");
    }

    return ret;
}
    80205d92:	854a                	mv	a0,s2
    80205d94:	70a2                	ld	ra,40(sp)
    80205d96:	7402                	ld	s0,32(sp)
    80205d98:	64e2                	ld	s1,24(sp)
    80205d9a:	6942                	ld	s2,16(sp)
    80205d9c:	69a2                	ld	s3,8(sp)
    80205d9e:	6a02                	ld	s4,0(sp)
    80205da0:	6145                	addi	sp,sp,48
    80205da2:	8082                	ret
        panic("pipe unimplemented");
    80205da4:	00004697          	auipc	a3,0x4
    80205da8:	d5468693          	addi	a3,a3,-684 # 80209af8 <__func__.0+0x38>
    80205dac:	00004617          	auipc	a2,0x4
    80205db0:	da460613          	addi	a2,a2,-604 # 80209b50 <__func__.0>
    80205db4:	08700593          	li	a1,135
    80205db8:	00004517          	auipc	a0,0x4
    80205dbc:	d2850513          	addi	a0,a0,-728 # 80209ae0 <__func__.0+0x20>
    80205dc0:	ffffa097          	auipc	ra,0xffffa
    80205dc4:	782080e7          	jalr	1922(ra) # 80200542 <_panic_>
        if (f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
    80205dc8:	02451783          	lh	a5,36(a0)
    80205dcc:	03079693          	slli	a3,a5,0x30
    80205dd0:	92c1                	srli	a3,a3,0x30
    80205dd2:	04d76863          	bltu	a4,a3,80205e22 <filewrite+0xf0>
    80205dd6:	0792                	slli	a5,a5,0x4
    80205dd8:	001e9717          	auipc	a4,0x1e9
    80205ddc:	dd870713          	addi	a4,a4,-552 # 803eebb0 <devsw>
    80205de0:	97ba                	add	a5,a5,a4
    80205de2:	679c                	ld	a5,8(a5)
    80205de4:	c3a9                	beqz	a5,80205e26 <filewrite+0xf4>
        ret = devsw[f->major].write(1, addr, n);
    80205de6:	4505                	li	a0,1
    80205de8:	9782                	jalr	a5
    80205dea:	892a                	mv	s2,a0
    80205dec:	b75d                	j	80205d92 <filewrite+0x60>
            f->off += n;
    80205dee:	509c                	lw	a5,32(s1)
    80205df0:	014787bb          	addw	a5,a5,s4
    80205df4:	d09c                	sw	a5,32(s1)
            ret = n;
    80205df6:	894e                	mv	s2,s3
    80205df8:	bf41                	j	80205d88 <filewrite+0x56>
        panic("filewrite");
    80205dfa:	00004697          	auipc	a3,0x4
    80205dfe:	d2668693          	addi	a3,a3,-730 # 80209b20 <__func__.0+0x60>
    80205e02:	00004617          	auipc	a2,0x4
    80205e06:	d4e60613          	addi	a2,a2,-690 # 80209b50 <__func__.0>
    80205e0a:	09600593          	li	a1,150
    80205e0e:	00004517          	auipc	a0,0x4
    80205e12:	cd250513          	addi	a0,a0,-814 # 80209ae0 <__func__.0+0x20>
    80205e16:	ffffa097          	auipc	ra,0xffffa
    80205e1a:	72c080e7          	jalr	1836(ra) # 80200542 <_panic_>
        return -1;
    80205e1e:	597d                	li	s2,-1
    80205e20:	bf8d                	j	80205d92 <filewrite+0x60>
            return -1;
    80205e22:	597d                	li	s2,-1
    80205e24:	b7bd                	j	80205d92 <filewrite+0x60>
    80205e26:	597d                	li	s2,-1
    80205e28:	b7ad                	j	80205d92 <filewrite+0x60>

0000000080205e2a <dirnext>:

// Read from dir f.
// addr is a user virtual address.
int dirnext(struct file* f, u64 addr) {
    80205e2a:	7105                	addi	sp,sp,-480
    80205e2c:	ef86                	sd	ra,472(sp)
    80205e2e:	eba2                	sd	s0,464(sp)
    80205e30:	e7a6                	sd	s1,456(sp)
    80205e32:	e3ca                	sd	s2,448(sp)
    80205e34:	ff4e                	sd	s3,440(sp)
    80205e36:	fb52                	sd	s4,432(sp)
    80205e38:	1380                	addi	s0,sp,480
    80205e3a:	84aa                	mv	s1,a0
    80205e3c:	8a2e                	mv	s4,a1
    struct Process* p = myproc();
    80205e3e:	ffffc097          	auipc	ra,0xffffc
    80205e42:	32c080e7          	jalr	812(ra) # 8020216a <myproc>

    if (f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    80205e46:	0084c783          	lbu	a5,8(s1)
    80205e4a:	cfc1                	beqz	a5,80205ee2 <dirnext+0xb8>
    80205e4c:	89aa                	mv	s3,a0
    80205e4e:	6c98                	ld	a4,24(s1)
    80205e50:	10074783          	lbu	a5,256(a4)
    80205e54:	8bc1                	andi	a5,a5,16
        return -1;
    80205e56:	557d                	li	a0,-1
    if (f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    80205e58:	c7d1                	beqz	a5,80205ee4 <dirnext+0xba>

    struct dirent de;
    struct stat st;
    int count = 0;
    80205e5a:	e2042623          	sw	zero,-468(s0)
    int ret;
    elock(f->ep);
    80205e5e:	853a                	mv	a0,a4
    80205e60:	fffff097          	auipc	ra,0xfffff
    80205e64:	244080e7          	jalr	580(ra) # 802050a4 <elock>
    while ((ret = enext(f->ep, &de, f->off, &count)) ==
    80205e68:	a801                	j	80205e78 <dirnext+0x4e>
           0) {  // skip empty entry
        f->off += count * 32;
    80205e6a:	e2c42783          	lw	a5,-468(s0)
    80205e6e:	0057979b          	slliw	a5,a5,0x5
    80205e72:	5098                	lw	a4,32(s1)
    80205e74:	9fb9                	addw	a5,a5,a4
    80205e76:	d09c                	sw	a5,32(s1)
    while ((ret = enext(f->ep, &de, f->off, &count)) ==
    80205e78:	e2c40693          	addi	a3,s0,-468
    80205e7c:	5090                	lw	a2,32(s1)
    80205e7e:	e6840593          	addi	a1,s0,-408
    80205e82:	6c88                	ld	a0,24(s1)
    80205e84:	fffff097          	auipc	ra,0xfffff
    80205e88:	44c080e7          	jalr	1100(ra) # 802052d0 <enext>
    80205e8c:	892a                	mv	s2,a0
    80205e8e:	dd71                	beqz	a0,80205e6a <dirnext+0x40>
    }
    eunlock(f->ep);
    80205e90:	6c88                	ld	a0,24(s1)
    80205e92:	fffff097          	auipc	ra,0xfffff
    80205e96:	25c080e7          	jalr	604(ra) # 802050ee <eunlock>
    if (ret == -1)
    80205e9a:	57fd                	li	a5,-1
        return 0;
    80205e9c:	4501                	li	a0,0
    if (ret == -1)
    80205e9e:	04f90363          	beq	s2,a5,80205ee4 <dirnext+0xba>

    f->off += count * 32;
    80205ea2:	e2c42783          	lw	a5,-468(s0)
    80205ea6:	0057979b          	slliw	a5,a5,0x5
    80205eaa:	5098                	lw	a4,32(s1)
    80205eac:	9fb9                	addw	a5,a5,a4
    80205eae:	d09c                	sw	a5,32(s1)
    estat(&de, &st);
    80205eb0:	e3040593          	addi	a1,s0,-464
    80205eb4:	e6840513          	addi	a0,s0,-408
    80205eb8:	fffff097          	auipc	ra,0xfffff
    80205ebc:	3d0080e7          	jalr	976(ra) # 80205288 <estat>
    if (copyout(p->pgdir, addr, (char*)&st, sizeof(st)) < 0)
    80205ec0:	03800693          	li	a3,56
    80205ec4:	e3040613          	addi	a2,s0,-464
    80205ec8:	85d2                	mv	a1,s4
    80205eca:	1309b503          	ld	a0,304(s3)
    80205ece:	ffffc097          	auipc	ra,0xffffc
    80205ed2:	e0c080e7          	jalr	-500(ra) # 80201cda <copyout>
        return -1;
    80205ed6:	fff54513          	not	a0,a0
    80205eda:	957d                	srai	a0,a0,0x3f
    80205edc:	8909                	andi	a0,a0,2
    80205ede:	157d                	addi	a0,a0,-1
    80205ee0:	a011                	j	80205ee4 <dirnext+0xba>
        return -1;
    80205ee2:	557d                	li	a0,-1

    return 1;
    80205ee4:	60fe                	ld	ra,472(sp)
    80205ee6:	645e                	ld	s0,464(sp)
    80205ee8:	64be                	ld	s1,456(sp)
    80205eea:	691e                	ld	s2,448(sp)
    80205eec:	79fa                	ld	s3,440(sp)
    80205eee:	7a5a                	ld	s4,432(sp)
    80205ef0:	613d                	addi	sp,sp,480
    80205ef2:	8082                	ret

0000000080205ef4 <argfd>:
#include <file.h>
#include <debug.h>

// Fetch the nth word-sized system call argument as a file descriptor
// and return both the descriptor and the corresponding struct file.
int argfd(int n, int* pfd, struct file** pf) {
    80205ef4:	7179                	addi	sp,sp,-48
    80205ef6:	f406                	sd	ra,40(sp)
    80205ef8:	f022                	sd	s0,32(sp)
    80205efa:	ec26                	sd	s1,24(sp)
    80205efc:	e84a                	sd	s2,16(sp)
    80205efe:	1800                	addi	s0,sp,48
    80205f00:	892e                	mv	s2,a1
    80205f02:	84b2                	mv	s1,a2
    int fd;
    struct file* f;

    if (argint(n, &fd) < 0)
    80205f04:	fdc40593          	addi	a1,s0,-36
    80205f08:	ffffd097          	auipc	ra,0xffffd
    80205f0c:	e2e080e7          	jalr	-466(ra) # 80202d36 <argint>
    80205f10:	04054063          	bltz	a0,80205f50 <argfd+0x5c>
        return -1;
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL)
    80205f14:	fdc42703          	lw	a4,-36(s0)
    80205f18:	47bd                	li	a5,15
    80205f1a:	02e7ed63          	bltu	a5,a4,80205f54 <argfd+0x60>
    80205f1e:	ffffc097          	auipc	ra,0xffffc
    80205f22:	24c080e7          	jalr	588(ra) # 8020216a <myproc>
    80205f26:	fdc42703          	lw	a4,-36(s0)
    80205f2a:	02e70793          	addi	a5,a4,46
    80205f2e:	078e                	slli	a5,a5,0x3
    80205f30:	953e                	add	a0,a0,a5
    80205f32:	651c                	ld	a5,8(a0)
    80205f34:	c395                	beqz	a5,80205f58 <argfd+0x64>
        return -1;
    if (pfd)
    80205f36:	00090463          	beqz	s2,80205f3e <argfd+0x4a>
        *pfd = fd;
    80205f3a:	00e92023          	sw	a4,0(s2)
    if (pf)
        *pf = f;
    return 0;
    80205f3e:	4501                	li	a0,0
    if (pf)
    80205f40:	c091                	beqz	s1,80205f44 <argfd+0x50>
        *pf = f;
    80205f42:	e09c                	sd	a5,0(s1)
}
    80205f44:	70a2                	ld	ra,40(sp)
    80205f46:	7402                	ld	s0,32(sp)
    80205f48:	64e2                	ld	s1,24(sp)
    80205f4a:	6942                	ld	s2,16(sp)
    80205f4c:	6145                	addi	sp,sp,48
    80205f4e:	8082                	ret
        return -1;
    80205f50:	557d                	li	a0,-1
    80205f52:	bfcd                	j	80205f44 <argfd+0x50>
        return -1;
    80205f54:	557d                	li	a0,-1
    80205f56:	b7fd                	j	80205f44 <argfd+0x50>
    80205f58:	557d                	li	a0,-1
    80205f5a:	b7ed                	j	80205f44 <argfd+0x50>

0000000080205f5c <fdalloc>:

// Allocate a file descriptor for the given file.
// Takes over file reference from caller on success.
int fdalloc(struct file* f) {
    80205f5c:	1101                	addi	sp,sp,-32
    80205f5e:	ec06                	sd	ra,24(sp)
    80205f60:	e822                	sd	s0,16(sp)
    80205f62:	e426                	sd	s1,8(sp)
    80205f64:	1000                	addi	s0,sp,32
    80205f66:	84aa                	mv	s1,a0
    int fd;
    struct Process* p = myproc();
    80205f68:	ffffc097          	auipc	ra,0xffffc
    80205f6c:	202080e7          	jalr	514(ra) # 8020216a <myproc>
    80205f70:	862a                	mv	a2,a0

    for (fd = 0; fd < NOFILE; fd++) {
    80205f72:	17850793          	addi	a5,a0,376
    80205f76:	4501                	li	a0,0
    80205f78:	46c1                	li	a3,16
        if (p->ofile[fd] == 0) {
    80205f7a:	6398                	ld	a4,0(a5)
    80205f7c:	cb19                	beqz	a4,80205f92 <fdalloc+0x36>
    for (fd = 0; fd < NOFILE; fd++) {
    80205f7e:	2505                	addiw	a0,a0,1
    80205f80:	07a1                	addi	a5,a5,8
    80205f82:	fed51ce3          	bne	a0,a3,80205f7a <fdalloc+0x1e>
            p->ofile[fd] = f;
            return fd;
        }
    }
    return -1;
    80205f86:	557d                	li	a0,-1
}
    80205f88:	60e2                	ld	ra,24(sp)
    80205f8a:	6442                	ld	s0,16(sp)
    80205f8c:	64a2                	ld	s1,8(sp)
    80205f8e:	6105                	addi	sp,sp,32
    80205f90:	8082                	ret
            p->ofile[fd] = f;
    80205f92:	02e50793          	addi	a5,a0,46
    80205f96:	078e                	slli	a5,a5,0x3
    80205f98:	963e                	add	a2,a2,a5
    80205f9a:	e604                	sd	s1,8(a2)
            return fd;
    80205f9c:	b7f5                	j	80205f88 <fdalloc+0x2c>

0000000080205f9e <sys_dup>:

u64 sys_dup(void) {
    80205f9e:	7179                	addi	sp,sp,-48
    80205fa0:	f406                	sd	ra,40(sp)
    80205fa2:	f022                	sd	s0,32(sp)
    80205fa4:	ec26                	sd	s1,24(sp)
    80205fa6:	e84a                	sd	s2,16(sp)
    80205fa8:	1800                	addi	s0,sp,48
    struct file* f;
    int fd;

    if (argfd(0, 0, &f) < 0)
    80205faa:	fd840613          	addi	a2,s0,-40
    80205fae:	4581                	li	a1,0
    80205fb0:	4501                	li	a0,0
    80205fb2:	00000097          	auipc	ra,0x0
    80205fb6:	f42080e7          	jalr	-190(ra) # 80205ef4 <argfd>
        return -1;
    80205fba:	57fd                	li	a5,-1
    if (argfd(0, 0, &f) < 0)
    80205fbc:	02054363          	bltz	a0,80205fe2 <sys_dup+0x44>
    if ((fd = fdalloc(f)) < 0)
    80205fc0:	fd843903          	ld	s2,-40(s0)
    80205fc4:	854a                	mv	a0,s2
    80205fc6:	00000097          	auipc	ra,0x0
    80205fca:	f96080e7          	jalr	-106(ra) # 80205f5c <fdalloc>
    80205fce:	84aa                	mv	s1,a0
        return -1;
    80205fd0:	57fd                	li	a5,-1
    if ((fd = fdalloc(f)) < 0)
    80205fd2:	00054863          	bltz	a0,80205fe2 <sys_dup+0x44>
    filedup(f);
    80205fd6:	854a                	mv	a0,s2
    80205fd8:	00000097          	auipc	ra,0x0
    80205fdc:	ac4080e7          	jalr	-1340(ra) # 80205a9c <filedup>
    return fd;
    80205fe0:	87a6                	mv	a5,s1
}
    80205fe2:	853e                	mv	a0,a5
    80205fe4:	70a2                	ld	ra,40(sp)
    80205fe6:	7402                	ld	s0,32(sp)
    80205fe8:	64e2                	ld	s1,24(sp)
    80205fea:	6942                	ld	s2,16(sp)
    80205fec:	6145                	addi	sp,sp,48
    80205fee:	8082                	ret

0000000080205ff0 <sys_read>:

u64 sys_read(void) {
    80205ff0:	7179                	addi	sp,sp,-48
    80205ff2:	f406                	sd	ra,40(sp)
    80205ff4:	f022                	sd	s0,32(sp)
    80205ff6:	1800                	addi	s0,sp,48
    struct file* f;
    int n;
    u64 p;

    if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    80205ff8:	fe840613          	addi	a2,s0,-24
    80205ffc:	4581                	li	a1,0
    80205ffe:	4501                	li	a0,0
    80206000:	00000097          	auipc	ra,0x0
    80206004:	ef4080e7          	jalr	-268(ra) # 80205ef4 <argfd>
        return -1;
    80206008:	57fd                	li	a5,-1
    if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020600a:	04054163          	bltz	a0,8020604c <sys_read+0x5c>
    8020600e:	fe440593          	addi	a1,s0,-28
    80206012:	4509                	li	a0,2
    80206014:	ffffd097          	auipc	ra,0xffffd
    80206018:	d22080e7          	jalr	-734(ra) # 80202d36 <argint>
        return -1;
    8020601c:	57fd                	li	a5,-1
    if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020601e:	02054763          	bltz	a0,8020604c <sys_read+0x5c>
    80206022:	fd840593          	addi	a1,s0,-40
    80206026:	4505                	li	a0,1
    80206028:	ffffd097          	auipc	ra,0xffffd
    8020602c:	d30080e7          	jalr	-720(ra) # 80202d58 <argaddr>
        return -1;
    80206030:	57fd                	li	a5,-1
    if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    80206032:	00054d63          	bltz	a0,8020604c <sys_read+0x5c>
    return fileread(f, p, n);
    80206036:	fe442603          	lw	a2,-28(s0)
    8020603a:	fd843583          	ld	a1,-40(s0)
    8020603e:	fe843503          	ld	a0,-24(s0)
    80206042:	00000097          	auipc	ra,0x0
    80206046:	c04080e7          	jalr	-1020(ra) # 80205c46 <fileread>
    8020604a:	87aa                	mv	a5,a0
}
    8020604c:	853e                	mv	a0,a5
    8020604e:	70a2                	ld	ra,40(sp)
    80206050:	7402                	ld	s0,32(sp)
    80206052:	6145                	addi	sp,sp,48
    80206054:	8082                	ret

0000000080206056 <sys_write>:

u64 sys_write(void) {
    80206056:	7179                	addi	sp,sp,-48
    80206058:	f406                	sd	ra,40(sp)
    8020605a:	f022                	sd	s0,32(sp)
    8020605c:	1800                	addi	s0,sp,48
    struct file* f;
    int n;
    u64 p;

    if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    8020605e:	fe840613          	addi	a2,s0,-24
    80206062:	4581                	li	a1,0
    80206064:	4501                	li	a0,0
    80206066:	00000097          	auipc	ra,0x0
    8020606a:	e8e080e7          	jalr	-370(ra) # 80205ef4 <argfd>
        return -1;
    8020606e:	57fd                	li	a5,-1
    if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    80206070:	04054163          	bltz	a0,802060b2 <sys_write+0x5c>
    80206074:	fe440593          	addi	a1,s0,-28
    80206078:	4509                	li	a0,2
    8020607a:	ffffd097          	auipc	ra,0xffffd
    8020607e:	cbc080e7          	jalr	-836(ra) # 80202d36 <argint>
        return -1;
    80206082:	57fd                	li	a5,-1
    if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    80206084:	02054763          	bltz	a0,802060b2 <sys_write+0x5c>
    80206088:	fd840593          	addi	a1,s0,-40
    8020608c:	4505                	li	a0,1
    8020608e:	ffffd097          	auipc	ra,0xffffd
    80206092:	cca080e7          	jalr	-822(ra) # 80202d58 <argaddr>
        return -1;
    80206096:	57fd                	li	a5,-1
    if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    80206098:	00054d63          	bltz	a0,802060b2 <sys_write+0x5c>

    return filewrite(f, p, n);
    8020609c:	fe442603          	lw	a2,-28(s0)
    802060a0:	fd843583          	ld	a1,-40(s0)
    802060a4:	fe843503          	ld	a0,-24(s0)
    802060a8:	00000097          	auipc	ra,0x0
    802060ac:	c8a080e7          	jalr	-886(ra) # 80205d32 <filewrite>
    802060b0:	87aa                	mv	a5,a0
}
    802060b2:	853e                	mv	a0,a5
    802060b4:	70a2                	ld	ra,40(sp)
    802060b6:	7402                	ld	s0,32(sp)
    802060b8:	6145                	addi	sp,sp,48
    802060ba:	8082                	ret

00000000802060bc <sys_close>:

u64 sys_close(void) {
    802060bc:	1101                	addi	sp,sp,-32
    802060be:	ec06                	sd	ra,24(sp)
    802060c0:	e822                	sd	s0,16(sp)
    802060c2:	1000                	addi	s0,sp,32
    int fd;
    struct file* f;

    if (argfd(0, &fd, &f) < 0)
    802060c4:	fe040613          	addi	a2,s0,-32
    802060c8:	fec40593          	addi	a1,s0,-20
    802060cc:	4501                	li	a0,0
    802060ce:	00000097          	auipc	ra,0x0
    802060d2:	e26080e7          	jalr	-474(ra) # 80205ef4 <argfd>
        return -1;
    802060d6:	57fd                	li	a5,-1
    if (argfd(0, &fd, &f) < 0)
    802060d8:	02054563          	bltz	a0,80206102 <sys_close+0x46>
    myproc()->ofile[fd] = 0;
    802060dc:	ffffc097          	auipc	ra,0xffffc
    802060e0:	08e080e7          	jalr	142(ra) # 8020216a <myproc>
    802060e4:	fec42783          	lw	a5,-20(s0)
    802060e8:	02e78793          	addi	a5,a5,46
    802060ec:	078e                	slli	a5,a5,0x3
    802060ee:	953e                	add	a0,a0,a5
    802060f0:	00053423          	sd	zero,8(a0)
    fileclose(f);
    802060f4:	fe043503          	ld	a0,-32(s0)
    802060f8:	00000097          	auipc	ra,0x0
    802060fc:	a0a080e7          	jalr	-1526(ra) # 80205b02 <fileclose>
    return 0;
    80206100:	4781                	li	a5,0
}
    80206102:	853e                	mv	a0,a5
    80206104:	60e2                	ld	ra,24(sp)
    80206106:	6442                	ld	s0,16(sp)
    80206108:	6105                	addi	sp,sp,32
    8020610a:	8082                	ret

000000008020610c <sys_fstat>:

u64 sys_fstat(void) {
    8020610c:	1101                	addi	sp,sp,-32
    8020610e:	ec06                	sd	ra,24(sp)
    80206110:	e822                	sd	s0,16(sp)
    80206112:	1000                	addi	s0,sp,32
    struct file* f;
    u64 st;  // user pointer to struct stat

    if (argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
    80206114:	fe840613          	addi	a2,s0,-24
    80206118:	4581                	li	a1,0
    8020611a:	4501                	li	a0,0
    8020611c:	00000097          	auipc	ra,0x0
    80206120:	dd8080e7          	jalr	-552(ra) # 80205ef4 <argfd>
        return -1;
    80206124:	57fd                	li	a5,-1
    if (argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
    80206126:	02054563          	bltz	a0,80206150 <sys_fstat+0x44>
    8020612a:	fe040593          	addi	a1,s0,-32
    8020612e:	4505                	li	a0,1
    80206130:	ffffd097          	auipc	ra,0xffffd
    80206134:	c28080e7          	jalr	-984(ra) # 80202d58 <argaddr>
        return -1;
    80206138:	57fd                	li	a5,-1
    if (argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
    8020613a:	00054b63          	bltz	a0,80206150 <sys_fstat+0x44>
    return filestat(f, st);
    8020613e:	fe043583          	ld	a1,-32(s0)
    80206142:	fe843503          	ld	a0,-24(s0)
    80206146:	00000097          	auipc	ra,0x0
    8020614a:	a8e080e7          	jalr	-1394(ra) # 80205bd4 <filestat>
    8020614e:	87aa                	mv	a5,a0
}
    80206150:	853e                	mv	a0,a5
    80206152:	60e2                	ld	ra,24(sp)
    80206154:	6442                	ld	s0,16(sp)
    80206156:	6105                	addi	sp,sp,32
    80206158:	8082                	ret

000000008020615a <sys_open>:


u64 sys_open(void) {
    8020615a:	7129                	addi	sp,sp,-320
    8020615c:	fe06                	sd	ra,312(sp)
    8020615e:	fa22                	sd	s0,304(sp)
    80206160:	f626                	sd	s1,296(sp)
    80206162:	f24a                	sd	s2,288(sp)
    80206164:	ee4e                	sd	s3,280(sp)
    80206166:	0280                	addi	s0,sp,320
    char path[FAT32_MAX_PATH];
    int fd, omode;
    struct file* f;
    struct dirent* ep;

    if (argstr(0, path, FAT32_MAX_PATH) < 0 || argint(1, &omode) < 0)
    80206168:	10400613          	li	a2,260
    8020616c:	ec840593          	addi	a1,s0,-312
    80206170:	4501                	li	a0,0
    80206172:	ffffd097          	auipc	ra,0xffffd
    80206176:	d12080e7          	jalr	-750(ra) # 80202e84 <argstr>
    8020617a:	87aa                	mv	a5,a0
        return -1;
    8020617c:	557d                	li	a0,-1
    if (argstr(0, path, FAT32_MAX_PATH) < 0 || argint(1, &omode) < 0)
    8020617e:	0807ce63          	bltz	a5,8020621a <sys_open+0xc0>
    80206182:	ec440593          	addi	a1,s0,-316
    80206186:	4505                	li	a0,1
    80206188:	ffffd097          	auipc	ra,0xffffd
    8020618c:	bae080e7          	jalr	-1106(ra) # 80202d36 <argint>
    80206190:	0e054163          	bltz	a0,80206272 <sys_open+0x118>
    

    if (omode & O_CREATE) {
    80206194:	ec442603          	lw	a2,-316(s0)
    80206198:	20067793          	andi	a5,a2,512
    8020619c:	c7d1                	beqz	a5,80206228 <sys_open+0xce>
        ep = create(path, T_FILE, omode);
    8020619e:	4589                	li	a1,2
    802061a0:	ec840513          	addi	a0,s0,-312
    802061a4:	fffff097          	auipc	ra,0xfffff
    802061a8:	764080e7          	jalr	1892(ra) # 80205908 <create>
    802061ac:	892a                	mv	s2,a0
        if (ep == NULL) {
    802061ae:	c561                	beqz	a0,80206276 <sys_open+0x11c>
            eput(ep);
            return -1;
        }
    }

    if ((f = filealloc()) == NULL || (fd = fdalloc(f)) < 0) {
    802061b0:	00000097          	auipc	ra,0x0
    802061b4:	882080e7          	jalr	-1918(ra) # 80205a32 <filealloc>
    802061b8:	89aa                	mv	s3,a0
    802061ba:	c579                	beqz	a0,80206288 <sys_open+0x12e>
    802061bc:	00000097          	auipc	ra,0x0
    802061c0:	da0080e7          	jalr	-608(ra) # 80205f5c <fdalloc>
    802061c4:	84aa                	mv	s1,a0
    802061c6:	0a054c63          	bltz	a0,8020627e <sys_open+0x124>
        eunlock(ep);
        eput(ep);
        return -1;
    }

    if (!(ep->attribute & ATTR_DIRECTORY) && (omode & O_TRUNC)) {
    802061ca:	10094783          	lbu	a5,256(s2)
    802061ce:	8bc1                	andi	a5,a5,16
    802061d0:	e791                	bnez	a5,802061dc <sys_open+0x82>
    802061d2:	ec442783          	lw	a5,-316(s0)
    802061d6:	4007f793          	andi	a5,a5,1024
    802061da:	e7d1                	bnez	a5,80206266 <sys_open+0x10c>
        etrunc(ep);
    }

    f->type = FD_ENTRY;
    802061dc:	4789                	li	a5,2
    802061de:	00f9a023          	sw	a5,0(s3)
    f->off = (omode & O_APPEND) ? ep->file_size : 0;
    802061e2:	ec442783          	lw	a5,-316(s0)
    802061e6:	0047f693          	andi	a3,a5,4
    802061ea:	4701                	li	a4,0
    802061ec:	c299                	beqz	a3,802061f2 <sys_open+0x98>
    802061ee:	10892703          	lw	a4,264(s2)
    802061f2:	02e9a023          	sw	a4,32(s3)
    f->ep = ep;
    802061f6:	0129bc23          	sd	s2,24(s3)
    f->readable = !(omode & O_WRONLY);
    802061fa:	0017c713          	xori	a4,a5,1
    802061fe:	8b05                	andi	a4,a4,1
    80206200:	00e98423          	sb	a4,8(s3)
    f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
    80206204:	8b8d                	andi	a5,a5,3
    80206206:	00f037b3          	snez	a5,a5
    8020620a:	00f984a3          	sb	a5,9(s3)

    eunlock(ep);
    8020620e:	854a                	mv	a0,s2
    80206210:	fffff097          	auipc	ra,0xfffff
    80206214:	ede080e7          	jalr	-290(ra) # 802050ee <eunlock>

    DEC_PRINT(fd);
    return fd;
    80206218:	8526                	mv	a0,s1
}
    8020621a:	70f2                	ld	ra,312(sp)
    8020621c:	7452                	ld	s0,304(sp)
    8020621e:	74b2                	ld	s1,296(sp)
    80206220:	7912                	ld	s2,288(sp)
    80206222:	69f2                	ld	s3,280(sp)
    80206224:	6131                	addi	sp,sp,320
    80206226:	8082                	ret
        if ((ep = ename(path)) == NULL) {
    80206228:	ec840513          	addi	a0,s0,-312
    8020622c:	fffff097          	auipc	ra,0xfffff
    80206230:	6a2080e7          	jalr	1698(ra) # 802058ce <ename>
    80206234:	892a                	mv	s2,a0
    80206236:	c131                	beqz	a0,8020627a <sys_open+0x120>
        elock(ep);
    80206238:	fffff097          	auipc	ra,0xfffff
    8020623c:	e6c080e7          	jalr	-404(ra) # 802050a4 <elock>
        if ((ep->attribute & ATTR_DIRECTORY) && omode != O_RDONLY) {
    80206240:	10094783          	lbu	a5,256(s2)
    80206244:	8bc1                	andi	a5,a5,16
    80206246:	d7ad                	beqz	a5,802061b0 <sys_open+0x56>
    80206248:	ec442783          	lw	a5,-316(s0)
    8020624c:	d3b5                	beqz	a5,802061b0 <sys_open+0x56>
            eunlock(ep);
    8020624e:	854a                	mv	a0,s2
    80206250:	fffff097          	auipc	ra,0xfffff
    80206254:	e9e080e7          	jalr	-354(ra) # 802050ee <eunlock>
            eput(ep);
    80206258:	854a                	mv	a0,s2
    8020625a:	fffff097          	auipc	ra,0xfffff
    8020625e:	ef6080e7          	jalr	-266(ra) # 80205150 <eput>
            return -1;
    80206262:	557d                	li	a0,-1
    80206264:	bf5d                	j	8020621a <sys_open+0xc0>
        etrunc(ep);
    80206266:	854a                	mv	a0,s2
    80206268:	fffff097          	auipc	ra,0xfffff
    8020626c:	dd2080e7          	jalr	-558(ra) # 8020503a <etrunc>
    80206270:	b7b5                	j	802061dc <sys_open+0x82>
        return -1;
    80206272:	557d                	li	a0,-1
    80206274:	b75d                	j	8020621a <sys_open+0xc0>
            return -1;
    80206276:	557d                	li	a0,-1
    80206278:	b74d                	j	8020621a <sys_open+0xc0>
            return -1;
    8020627a:	557d                	li	a0,-1
    8020627c:	bf79                	j	8020621a <sys_open+0xc0>
            fileclose(f);
    8020627e:	854e                	mv	a0,s3
    80206280:	00000097          	auipc	ra,0x0
    80206284:	882080e7          	jalr	-1918(ra) # 80205b02 <fileclose>
        eunlock(ep);
    80206288:	854a                	mv	a0,s2
    8020628a:	fffff097          	auipc	ra,0xfffff
    8020628e:	e64080e7          	jalr	-412(ra) # 802050ee <eunlock>
        eput(ep);
    80206292:	854a                	mv	a0,s2
    80206294:	fffff097          	auipc	ra,0xfffff
    80206298:	ebc080e7          	jalr	-324(ra) # 80205150 <eput>
        return -1;
    8020629c:	557d                	li	a0,-1
    8020629e:	bfb5                	j	8020621a <sys_open+0xc0>

00000000802062a0 <sys_mkdir>:

u64 sys_mkdir(void) {
    802062a0:	7169                	addi	sp,sp,-304
    802062a2:	f606                	sd	ra,296(sp)
    802062a4:	f222                	sd	s0,288(sp)
    802062a6:	ee26                	sd	s1,280(sp)
    802062a8:	1a00                	addi	s0,sp,304
    char path[FAT32_MAX_PATH];
    struct dirent* ep;

    if (argstr(0, path, FAT32_MAX_PATH) < 0 ||
    802062aa:	10400613          	li	a2,260
    802062ae:	ed840593          	addi	a1,s0,-296
    802062b2:	4501                	li	a0,0
    802062b4:	ffffd097          	auipc	ra,0xffffd
    802062b8:	bd0080e7          	jalr	-1072(ra) # 80202e84 <argstr>
        (ep = create(path, T_DIR, 0)) == 0) {
        return -1;
    802062bc:	57fd                	li	a5,-1
    if (argstr(0, path, FAT32_MAX_PATH) < 0 ||
    802062be:	02054663          	bltz	a0,802062ea <sys_mkdir+0x4a>
        (ep = create(path, T_DIR, 0)) == 0) {
    802062c2:	4601                	li	a2,0
    802062c4:	4585                	li	a1,1
    802062c6:	ed840513          	addi	a0,s0,-296
    802062ca:	fffff097          	auipc	ra,0xfffff
    802062ce:	63e080e7          	jalr	1598(ra) # 80205908 <create>
    802062d2:	84aa                	mv	s1,a0
    if (argstr(0, path, FAT32_MAX_PATH) < 0 ||
    802062d4:	c10d                	beqz	a0,802062f6 <sys_mkdir+0x56>
    }
    eunlock(ep);
    802062d6:	fffff097          	auipc	ra,0xfffff
    802062da:	e18080e7          	jalr	-488(ra) # 802050ee <eunlock>
    eput(ep);
    802062de:	8526                	mv	a0,s1
    802062e0:	fffff097          	auipc	ra,0xfffff
    802062e4:	e70080e7          	jalr	-400(ra) # 80205150 <eput>
    return 0;
    802062e8:	4781                	li	a5,0
}
    802062ea:	853e                	mv	a0,a5
    802062ec:	70b2                	ld	ra,296(sp)
    802062ee:	7412                	ld	s0,288(sp)
    802062f0:	64f2                	ld	s1,280(sp)
    802062f2:	6155                	addi	sp,sp,304
    802062f4:	8082                	ret
        return -1;
    802062f6:	57fd                	li	a5,-1
    802062f8:	bfcd                	j	802062ea <sys_mkdir+0x4a>

00000000802062fa <sys_chdir>:

u64 sys_chdir(void) {
    802062fa:	7169                	addi	sp,sp,-304
    802062fc:	f606                	sd	ra,296(sp)
    802062fe:	f222                	sd	s0,288(sp)
    80206300:	ee26                	sd	s1,280(sp)
    80206302:	ea4a                	sd	s2,272(sp)
    80206304:	1a00                	addi	s0,sp,304
    char path[FAT32_MAX_PATH];
    struct dirent* ep;
    struct Process* p = myproc();
    80206306:	ffffc097          	auipc	ra,0xffffc
    8020630a:	e64080e7          	jalr	-412(ra) # 8020216a <myproc>
    8020630e:	892a                	mv	s2,a0

    if (argstr(0, path, FAT32_MAX_PATH) < 0 || (ep = ename(path)) == NULL) {
    80206310:	10400613          	li	a2,260
    80206314:	ed840593          	addi	a1,s0,-296
    80206318:	4501                	li	a0,0
    8020631a:	ffffd097          	auipc	ra,0xffffd
    8020631e:	b6a080e7          	jalr	-1174(ra) # 80202e84 <argstr>
        return -1;
    80206322:	57fd                	li	a5,-1
    if (argstr(0, path, FAT32_MAX_PATH) < 0 || (ep = ename(path)) == NULL) {
    80206324:	04054063          	bltz	a0,80206364 <sys_chdir+0x6a>
    80206328:	ed840513          	addi	a0,s0,-296
    8020632c:	fffff097          	auipc	ra,0xfffff
    80206330:	5a2080e7          	jalr	1442(ra) # 802058ce <ename>
    80206334:	84aa                	mv	s1,a0
    80206336:	c931                	beqz	a0,8020638a <sys_chdir+0x90>
    }
    elock(ep);
    80206338:	fffff097          	auipc	ra,0xfffff
    8020633c:	d6c080e7          	jalr	-660(ra) # 802050a4 <elock>
    if (!(ep->attribute & ATTR_DIRECTORY)) {
    80206340:	1004c783          	lbu	a5,256(s1)
    80206344:	8bc1                	andi	a5,a5,16
    80206346:	c795                	beqz	a5,80206372 <sys_chdir+0x78>
        eunlock(ep);
        eput(ep);
        return -1;
    }
    eunlock(ep);
    80206348:	8526                	mv	a0,s1
    8020634a:	fffff097          	auipc	ra,0xfffff
    8020634e:	da4080e7          	jalr	-604(ra) # 802050ee <eunlock>
    eput(p->cwd);
    80206352:	17093503          	ld	a0,368(s2)
    80206356:	fffff097          	auipc	ra,0xfffff
    8020635a:	dfa080e7          	jalr	-518(ra) # 80205150 <eput>
    p->cwd = ep;
    8020635e:	16993823          	sd	s1,368(s2)
    return 0;
    80206362:	4781                	li	a5,0
}
    80206364:	853e                	mv	a0,a5
    80206366:	70b2                	ld	ra,296(sp)
    80206368:	7412                	ld	s0,288(sp)
    8020636a:	64f2                	ld	s1,280(sp)
    8020636c:	6952                	ld	s2,272(sp)
    8020636e:	6155                	addi	sp,sp,304
    80206370:	8082                	ret
        eunlock(ep);
    80206372:	8526                	mv	a0,s1
    80206374:	fffff097          	auipc	ra,0xfffff
    80206378:	d7a080e7          	jalr	-646(ra) # 802050ee <eunlock>
        eput(ep);
    8020637c:	8526                	mv	a0,s1
    8020637e:	fffff097          	auipc	ra,0xfffff
    80206382:	dd2080e7          	jalr	-558(ra) # 80205150 <eput>
        return -1;
    80206386:	57fd                	li	a5,-1
    80206388:	bff1                	j	80206364 <sys_chdir+0x6a>
        return -1;
    8020638a:	57fd                	li	a5,-1
    8020638c:	bfe1                	j	80206364 <sys_chdir+0x6a>

000000008020638e <sys_pipe>:


u64 sys_pipe(void) {
    8020638e:	1141                	addi	sp,sp,-16
    80206390:	e422                	sd	s0,8(sp)
    80206392:	0800                	addi	s0,sp,16
        fileclose(wf);
        return -1;
    }
*/
    return 0;
}
    80206394:	4501                	li	a0,0
    80206396:	6422                	ld	s0,8(sp)
    80206398:	0141                	addi	sp,sp,16
    8020639a:	8082                	ret

000000008020639c <sys_readdir>:

//     return fd;
// }

// To support ls command
u64 sys_readdir(void) {
    8020639c:	1101                	addi	sp,sp,-32
    8020639e:	ec06                	sd	ra,24(sp)
    802063a0:	e822                	sd	s0,16(sp)
    802063a2:	1000                	addi	s0,sp,32
    struct file* f;
    u64 p;

    if (argfd(0, 0, &f) < 0 || argaddr(1, &p) < 0)
    802063a4:	fe840613          	addi	a2,s0,-24
    802063a8:	4581                	li	a1,0
    802063aa:	4501                	li	a0,0
    802063ac:	00000097          	auipc	ra,0x0
    802063b0:	b48080e7          	jalr	-1208(ra) # 80205ef4 <argfd>
        return -1;
    802063b4:	57fd                	li	a5,-1
    if (argfd(0, 0, &f) < 0 || argaddr(1, &p) < 0)
    802063b6:	02054563          	bltz	a0,802063e0 <sys_readdir+0x44>
    802063ba:	fe040593          	addi	a1,s0,-32
    802063be:	4505                	li	a0,1
    802063c0:	ffffd097          	auipc	ra,0xffffd
    802063c4:	998080e7          	jalr	-1640(ra) # 80202d58 <argaddr>
        return -1;
    802063c8:	57fd                	li	a5,-1
    if (argfd(0, 0, &f) < 0 || argaddr(1, &p) < 0)
    802063ca:	00054b63          	bltz	a0,802063e0 <sys_readdir+0x44>
    return dirnext(f, p);
    802063ce:	fe043583          	ld	a1,-32(s0)
    802063d2:	fe843503          	ld	a0,-24(s0)
    802063d6:	00000097          	auipc	ra,0x0
    802063da:	a54080e7          	jalr	-1452(ra) # 80205e2a <dirnext>
    802063de:	87aa                	mv	a5,a0
}
    802063e0:	853e                	mv	a0,a5
    802063e2:	60e2                	ld	ra,24(sp)
    802063e4:	6442                	ld	s0,16(sp)
    802063e6:	6105                	addi	sp,sp,32
    802063e8:	8082                	ret

00000000802063ea <sys_remove>:
    ep.valid = 0;
    ret = enext(dp, &ep, 2 * 32, &count);  // skip the "." and ".."
    return ret == -1;
}

u64 sys_remove(void) {
    802063ea:	d6010113          	addi	sp,sp,-672
    802063ee:	28113c23          	sd	ra,664(sp)
    802063f2:	28813823          	sd	s0,656(sp)
    802063f6:	28913423          	sd	s1,648(sp)
    802063fa:	1500                	addi	s0,sp,672
    char path[FAT32_MAX_PATH];
    struct dirent* ep;
    int len;
    if ((len = argstr(0, path, FAT32_MAX_PATH)) <= 0)
    802063fc:	10400613          	li	a2,260
    80206400:	ed840593          	addi	a1,s0,-296
    80206404:	4501                	li	a0,0
    80206406:	ffffd097          	auipc	ra,0xffffd
    8020640a:	a7e080e7          	jalr	-1410(ra) # 80202e84 <argstr>
    8020640e:	0ea05a63          	blez	a0,80206502 <sys_remove+0x118>
        return -1;

    char* s = path + len - 1;
    80206412:	ed840713          	addi	a4,s0,-296
    80206416:	157d                	addi	a0,a0,-1
    80206418:	00a707b3          	add	a5,a4,a0
    while (s >= path && *s == '/') {
    8020641c:	02f00693          	li	a3,47
    80206420:	863a                	mv	a2,a4
    80206422:	00e7e963          	bltu	a5,a4,80206434 <sys_remove+0x4a>
    80206426:	0007c703          	lbu	a4,0(a5)
    8020642a:	08d71a63          	bne	a4,a3,802064be <sys_remove+0xd4>
        s--;
    8020642e:	17fd                	addi	a5,a5,-1
    while (s >= path && *s == '/') {
    80206430:	fec7fbe3          	bgeu	a5,a2,80206426 <sys_remove+0x3c>
    }
    if (s >= path && *s == '.' && (s == path || *--s == '/')) {
        return -1;
    }

    if ((ep = ename(path)) == NULL) {
    80206434:	ed840513          	addi	a0,s0,-296
    80206438:	fffff097          	auipc	ra,0xfffff
    8020643c:	496080e7          	jalr	1174(ra) # 802058ce <ename>
    80206440:	84aa                	mv	s1,a0
    80206442:	c561                	beqz	a0,8020650a <sys_remove+0x120>
        return -1;
    }
    elock(ep);
    80206444:	fffff097          	auipc	ra,0xfffff
    80206448:	c60080e7          	jalr	-928(ra) # 802050a4 <elock>
    if ((ep->attribute & ATTR_DIRECTORY) && !isdirempty(ep)) {
    8020644c:	1004c783          	lbu	a5,256(s1)
    80206450:	8bc1                	andi	a5,a5,16
    80206452:	c38d                	beqz	a5,80206474 <sys_remove+0x8a>
    ep.valid = 0;
    80206454:	e8041323          	sh	zero,-378(s0)
    ret = enext(dp, &ep, 2 * 32, &count);  // skip the "." and ".."
    80206458:	d6c40693          	addi	a3,s0,-660
    8020645c:	04000613          	li	a2,64
    80206460:	d7040593          	addi	a1,s0,-656
    80206464:	8526                	mv	a0,s1
    80206466:	fffff097          	auipc	ra,0xfffff
    8020646a:	e6a080e7          	jalr	-406(ra) # 802052d0 <enext>
    if ((ep->attribute & ATTR_DIRECTORY) && !isdirempty(ep)) {
    8020646e:	57fd                	li	a5,-1
    80206470:	06f51d63          	bne	a0,a5,802064ea <sys_remove+0x100>
        eunlock(ep);
        eput(ep);
        return -1;
    }
    elock(ep->parent);  // Will this lead to deadlock?
    80206474:	1204b503          	ld	a0,288(s1)
    80206478:	fffff097          	auipc	ra,0xfffff
    8020647c:	c2c080e7          	jalr	-980(ra) # 802050a4 <elock>
    eremove(ep);
    80206480:	8526                	mv	a0,s1
    80206482:	fffff097          	auipc	ra,0xfffff
    80206486:	af4080e7          	jalr	-1292(ra) # 80204f76 <eremove>
    eunlock(ep->parent);
    8020648a:	1204b503          	ld	a0,288(s1)
    8020648e:	fffff097          	auipc	ra,0xfffff
    80206492:	c60080e7          	jalr	-928(ra) # 802050ee <eunlock>
    eunlock(ep);
    80206496:	8526                	mv	a0,s1
    80206498:	fffff097          	auipc	ra,0xfffff
    8020649c:	c56080e7          	jalr	-938(ra) # 802050ee <eunlock>
    eput(ep);
    802064a0:	8526                	mv	a0,s1
    802064a2:	fffff097          	auipc	ra,0xfffff
    802064a6:	cae080e7          	jalr	-850(ra) # 80205150 <eput>

    return 0;
    802064aa:	4501                	li	a0,0
}
    802064ac:	29813083          	ld	ra,664(sp)
    802064b0:	29013403          	ld	s0,656(sp)
    802064b4:	28813483          	ld	s1,648(sp)
    802064b8:	2a010113          	addi	sp,sp,672
    802064bc:	8082                	ret
    if (s >= path && *s == '.' && (s == path || *--s == '/')) {
    802064be:	ed840713          	addi	a4,s0,-296
    802064c2:	f6e7e9e3          	bltu	a5,a4,80206434 <sys_remove+0x4a>
    802064c6:	0007c683          	lbu	a3,0(a5)
    802064ca:	02e00713          	li	a4,46
    802064ce:	f6e693e3          	bne	a3,a4,80206434 <sys_remove+0x4a>
    802064d2:	ed840713          	addi	a4,s0,-296
    802064d6:	02e78863          	beq	a5,a4,80206506 <sys_remove+0x11c>
    802064da:	fff7c703          	lbu	a4,-1(a5)
    802064de:	02f00793          	li	a5,47
    802064e2:	f4f719e3          	bne	a4,a5,80206434 <sys_remove+0x4a>
        return -1;
    802064e6:	557d                	li	a0,-1
    802064e8:	b7d1                	j	802064ac <sys_remove+0xc2>
        eunlock(ep);
    802064ea:	8526                	mv	a0,s1
    802064ec:	fffff097          	auipc	ra,0xfffff
    802064f0:	c02080e7          	jalr	-1022(ra) # 802050ee <eunlock>
        eput(ep);
    802064f4:	8526                	mv	a0,s1
    802064f6:	fffff097          	auipc	ra,0xfffff
    802064fa:	c5a080e7          	jalr	-934(ra) # 80205150 <eput>
        return -1;
    802064fe:	557d                	li	a0,-1
    80206500:	b775                	j	802064ac <sys_remove+0xc2>
        return -1;
    80206502:	557d                	li	a0,-1
    80206504:	b765                	j	802064ac <sys_remove+0xc2>
        return -1;
    80206506:	557d                	li	a0,-1
    80206508:	b755                	j	802064ac <sys_remove+0xc2>
        return -1;
    8020650a:	557d                	li	a0,-1
    8020650c:	b745                	j	802064ac <sys_remove+0xc2>

000000008020650e <sys_rename>:

// Must hold too many locks at a time! It's possible to raise a deadlock.
// Because this op takes some steps, we can't promise
u64 sys_rename(void) {
    8020650e:	c4010113          	addi	sp,sp,-960
    80206512:	3a113c23          	sd	ra,952(sp)
    80206516:	3a813823          	sd	s0,944(sp)
    8020651a:	3a913423          	sd	s1,936(sp)
    8020651e:	3b213023          	sd	s2,928(sp)
    80206522:	39313c23          	sd	s3,920(sp)
    80206526:	39413823          	sd	s4,912(sp)
    8020652a:	0780                	addi	s0,sp,960
    char old[FAT32_MAX_PATH], new[FAT32_MAX_PATH];
    if (argstr(0, old, FAT32_MAX_PATH) < 0 ||
    8020652c:	10400613          	li	a2,260
    80206530:	ec840593          	addi	a1,s0,-312
    80206534:	4501                	li	a0,0
    80206536:	ffffd097          	auipc	ra,0xffffd
    8020653a:	94e080e7          	jalr	-1714(ra) # 80202e84 <argstr>
        argstr(1, new, FAT32_MAX_PATH) < 0) {
        return -1;
    8020653e:	57fd                	li	a5,-1
    if (argstr(0, old, FAT32_MAX_PATH) < 0 ||
    80206540:	0c054d63          	bltz	a0,8020661a <sys_rename+0x10c>
        argstr(1, new, FAT32_MAX_PATH) < 0) {
    80206544:	10400613          	li	a2,260
    80206548:	dc040593          	addi	a1,s0,-576
    8020654c:	4505                	li	a0,1
    8020654e:	ffffd097          	auipc	ra,0xffffd
    80206552:	936080e7          	jalr	-1738(ra) # 80202e84 <argstr>
        return -1;
    80206556:	57fd                	li	a5,-1
    if (argstr(0, old, FAT32_MAX_PATH) < 0 ||
    80206558:	0c054163          	bltz	a0,8020661a <sys_rename+0x10c>
    }

    struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
    int srclock = 0;
    char* name;
    if ((src = ename(old)) == NULL || (pdst = enameparent(new, old)) == NULL ||
    8020655c:	ec840513          	addi	a0,s0,-312
    80206560:	fffff097          	auipc	ra,0xfffff
    80206564:	36e080e7          	jalr	878(ra) # 802058ce <ename>
    80206568:	84aa                	mv	s1,a0
    8020656a:	1c050963          	beqz	a0,8020673c <sys_rename+0x22e>
    8020656e:	ec840593          	addi	a1,s0,-312
    80206572:	dc040513          	addi	a0,s0,-576
    80206576:	fffff097          	auipc	ra,0xfffff
    8020657a:	376080e7          	jalr	886(ra) # 802058ec <enameparent>
    8020657e:	892a                	mv	s2,a0
    80206580:	cd35                	beqz	a0,802065fc <sys_rename+0xee>
        (name = formatname(old)) == NULL) {
    80206582:	ec840513          	addi	a0,s0,-312
    80206586:	ffffe097          	auipc	ra,0xffffe
    8020658a:	43e080e7          	jalr	1086(ra) # 802049c4 <formatname>
    8020658e:	89aa                	mv	s3,a0
    if ((src = ename(old)) == NULL || (pdst = enameparent(new, old)) == NULL ||
    80206590:	c535                	beqz	a0,802065fc <sys_rename+0xee>
        goto fail;  // src doesn't exist || dst parent doesn't exist || illegal
                    // new name
    }
    for (struct dirent* ep = pdst; ep != NULL; ep = ep->parent) {
        if (ep ==
    80206592:	07248563          	beq	s1,s2,802065fc <sys_rename+0xee>
    for (struct dirent* ep = pdst; ep != NULL; ep = ep->parent) {
    80206596:	87ca                	mv	a5,s2
    80206598:	1207b783          	ld	a5,288(a5)
    8020659c:	c781                	beqz	a5,802065a4 <sys_rename+0x96>
        if (ep ==
    8020659e:	fef49de3          	bne	s1,a5,80206598 <sys_rename+0x8a>
    802065a2:	a8a9                	j	802065fc <sys_rename+0xee>
            goto fail;
        }
    }

    uint off;
    elock(src);  // must hold child's lock before acquiring parent's, because we
    802065a4:	8526                	mv	a0,s1
    802065a6:	fffff097          	auipc	ra,0xfffff
    802065aa:	afe080e7          	jalr	-1282(ra) # 802050a4 <elock>
                 // do so in other similar cases
    srclock = 1;
    elock(pdst);
    802065ae:	854a                	mv	a0,s2
    802065b0:	fffff097          	auipc	ra,0xfffff
    802065b4:	af4080e7          	jalr	-1292(ra) # 802050a4 <elock>
    dst = dirlookup(pdst, name, &off);
    802065b8:	dbc40613          	addi	a2,s0,-580
    802065bc:	85ce                	mv	a1,s3
    802065be:	854a                	mv	a0,s2
    802065c0:	fffff097          	auipc	ra,0xfffff
    802065c4:	ed2080e7          	jalr	-302(ra) # 80205492 <dirlookup>
    802065c8:	8a2a                	mv	s4,a0
    if (dst != NULL) {
    802065ca:	cd45                	beqz	a0,80206682 <sys_rename+0x174>
        eunlock(pdst);
    802065cc:	854a                	mv	a0,s2
    802065ce:	fffff097          	auipc	ra,0xfffff
    802065d2:	b20080e7          	jalr	-1248(ra) # 802050ee <eunlock>
        if (src == dst) {
    802065d6:	01448963          	beq	s1,s4,802065e8 <sys_rename+0xda>
            goto fail;
        } else if (src->attribute & dst->attribute & ATTR_DIRECTORY) {
    802065da:	1004c783          	lbu	a5,256(s1)
    802065de:	100a4703          	lbu	a4,256(s4)
    802065e2:	8ff9                	and	a5,a5,a4
    802065e4:	8bc1                	andi	a5,a5,16
    802065e6:	ebb1                	bnez	a5,8020663a <sys_rename+0x12c>

    return 0;

fail:
    if (srclock)
        eunlock(src);
    802065e8:	8526                	mv	a0,s1
    802065ea:	fffff097          	auipc	ra,0xfffff
    802065ee:	b04080e7          	jalr	-1276(ra) # 802050ee <eunlock>
    if (dst)
        eput(dst);
    802065f2:	8552                	mv	a0,s4
    802065f4:	fffff097          	auipc	ra,0xfffff
    802065f8:	b5c080e7          	jalr	-1188(ra) # 80205150 <eput>
    if (pdst)
    802065fc:	00090763          	beqz	s2,8020660a <sys_rename+0xfc>
        eput(pdst);
    80206600:	854a                	mv	a0,s2
    80206602:	fffff097          	auipc	ra,0xfffff
    80206606:	b4e080e7          	jalr	-1202(ra) # 80205150 <eput>
    if (src)
        eput(src);
    return -1;
    8020660a:	57fd                	li	a5,-1
    if (src)
    8020660c:	c499                	beqz	s1,8020661a <sys_rename+0x10c>
        eput(src);
    8020660e:	8526                	mv	a0,s1
    80206610:	fffff097          	auipc	ra,0xfffff
    80206614:	b40080e7          	jalr	-1216(ra) # 80205150 <eput>
    return -1;
    80206618:	57fd                	li	a5,-1
    8020661a:	853e                	mv	a0,a5
    8020661c:	3b813083          	ld	ra,952(sp)
    80206620:	3b013403          	ld	s0,944(sp)
    80206624:	3a813483          	ld	s1,936(sp)
    80206628:	3a013903          	ld	s2,928(sp)
    8020662c:	39813983          	ld	s3,920(sp)
    80206630:	39013a03          	ld	s4,912(sp)
    80206634:	3c010113          	addi	sp,sp,960
    80206638:	8082                	ret
            elock(dst);
    8020663a:	8552                	mv	a0,s4
    8020663c:	fffff097          	auipc	ra,0xfffff
    80206640:	a68080e7          	jalr	-1432(ra) # 802050a4 <elock>
    ep.valid = 0;
    80206644:	d6041323          	sh	zero,-666(s0)
    ret = enext(dp, &ep, 2 * 32, &count);  // skip the "." and ".."
    80206648:	c4c40693          	addi	a3,s0,-948
    8020664c:	04000613          	li	a2,64
    80206650:	c5040593          	addi	a1,s0,-944
    80206654:	8552                	mv	a0,s4
    80206656:	fffff097          	auipc	ra,0xfffff
    8020665a:	c7a080e7          	jalr	-902(ra) # 802052d0 <enext>
            if (!isdirempty(dst)) {  // it's ok to overwrite an empty dir
    8020665e:	57fd                	li	a5,-1
    80206660:	0cf51863          	bne	a0,a5,80206730 <sys_rename+0x222>
            elock(pdst);
    80206664:	854a                	mv	a0,s2
    80206666:	fffff097          	auipc	ra,0xfffff
    8020666a:	a3e080e7          	jalr	-1474(ra) # 802050a4 <elock>
        eremove(dst);
    8020666e:	8552                	mv	a0,s4
    80206670:	fffff097          	auipc	ra,0xfffff
    80206674:	906080e7          	jalr	-1786(ra) # 80204f76 <eremove>
        eunlock(dst);
    80206678:	8552                	mv	a0,s4
    8020667a:	fffff097          	auipc	ra,0xfffff
    8020667e:	a74080e7          	jalr	-1420(ra) # 802050ee <eunlock>
    memmove(src->filename, name, FAT32_MAX_FILENAME);
    80206682:	0ff00613          	li	a2,255
    80206686:	85ce                	mv	a1,s3
    80206688:	8526                	mv	a0,s1
    8020668a:	ffffd097          	auipc	ra,0xffffd
    8020668e:	386080e7          	jalr	902(ra) # 80203a10 <memmove>
    emake(pdst, src, off);
    80206692:	dbc42603          	lw	a2,-580(s0)
    80206696:	85a6                	mv	a1,s1
    80206698:	854a                	mv	a0,s2
    8020669a:	ffffe097          	auipc	ra,0xffffe
    8020669e:	3e2080e7          	jalr	994(ra) # 80204a7c <emake>
    if (src->parent != pdst) {
    802066a2:	1204b783          	ld	a5,288(s1)
    802066a6:	01278d63          	beq	a5,s2,802066c0 <sys_rename+0x1b2>
        eunlock(pdst);
    802066aa:	854a                	mv	a0,s2
    802066ac:	fffff097          	auipc	ra,0xfffff
    802066b0:	a42080e7          	jalr	-1470(ra) # 802050ee <eunlock>
        elock(src->parent);
    802066b4:	1204b503          	ld	a0,288(s1)
    802066b8:	fffff097          	auipc	ra,0xfffff
    802066bc:	9ec080e7          	jalr	-1556(ra) # 802050a4 <elock>
    eremove(src);
    802066c0:	8526                	mv	a0,s1
    802066c2:	fffff097          	auipc	ra,0xfffff
    802066c6:	8b4080e7          	jalr	-1868(ra) # 80204f76 <eremove>
    eunlock(src->parent);
    802066ca:	1204b503          	ld	a0,288(s1)
    802066ce:	fffff097          	auipc	ra,0xfffff
    802066d2:	a20080e7          	jalr	-1504(ra) # 802050ee <eunlock>
    struct dirent* psrc = src->parent;  // src must not be root, or it won't
    802066d6:	1204b983          	ld	s3,288(s1)
    src->parent = edup(pdst);
    802066da:	854a                	mv	a0,s2
    802066dc:	ffffe097          	auipc	ra,0xffffe
    802066e0:	774080e7          	jalr	1908(ra) # 80204e50 <edup>
    802066e4:	12a4b023          	sd	a0,288(s1)
    src->off = off;
    802066e8:	dbc42783          	lw	a5,-580(s0)
    802066ec:	10f4ae23          	sw	a5,284(s1)
    src->valid = 1;
    802066f0:	4785                	li	a5,1
    802066f2:	10f49b23          	sh	a5,278(s1)
    eunlock(src);
    802066f6:	8526                	mv	a0,s1
    802066f8:	fffff097          	auipc	ra,0xfffff
    802066fc:	9f6080e7          	jalr	-1546(ra) # 802050ee <eunlock>
    eput(psrc);
    80206700:	854e                	mv	a0,s3
    80206702:	fffff097          	auipc	ra,0xfffff
    80206706:	a4e080e7          	jalr	-1458(ra) # 80205150 <eput>
    if (dst) {
    8020670a:	000a0763          	beqz	s4,80206718 <sys_rename+0x20a>
        eput(dst);
    8020670e:	8552                	mv	a0,s4
    80206710:	fffff097          	auipc	ra,0xfffff
    80206714:	a40080e7          	jalr	-1472(ra) # 80205150 <eput>
    eput(pdst);
    80206718:	854a                	mv	a0,s2
    8020671a:	fffff097          	auipc	ra,0xfffff
    8020671e:	a36080e7          	jalr	-1482(ra) # 80205150 <eput>
    eput(src);
    80206722:	8526                	mv	a0,s1
    80206724:	fffff097          	auipc	ra,0xfffff
    80206728:	a2c080e7          	jalr	-1492(ra) # 80205150 <eput>
    return 0;
    8020672c:	4781                	li	a5,0
    8020672e:	b5f5                	j	8020661a <sys_rename+0x10c>
                eunlock(dst);
    80206730:	8552                	mv	a0,s4
    80206732:	fffff097          	auipc	ra,0xfffff
    80206736:	9bc080e7          	jalr	-1604(ra) # 802050ee <eunlock>
                goto fail;
    8020673a:	b57d                	j	802065e8 <sys_rename+0xda>
    struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
    8020673c:	892a                	mv	s2,a0
    if (dst)
    8020673e:	bd7d                	j	802065fc <sys_rename+0xee>

0000000080206740 <testfat>:
#include <debug.h>

char test_content_to_write[10] = "abcdefghi";
char test_content_to_read[10] = {0};

void testfat() {
    80206740:	1101                	addi	sp,sp,-32
    80206742:	ec06                	sd	ra,24(sp)
    80206744:	e822                	sd	s0,16(sp)
    80206746:	e426                	sd	s1,8(sp)
    80206748:	e04a                	sd	s2,0(sp)
    8020674a:	1000                	addi	s0,sp,32
#ifdef ZZY_DEBUG
    printf("[testfat] testing fat.......\n");
#endif
    struct dirent* testfile = create("/testfile", T_FILE, O_CREATE | O_RDWR);
    8020674c:	20200613          	li	a2,514
    80206750:	4589                	li	a1,2
    80206752:	00003517          	auipc	a0,0x3
    80206756:	40e50513          	addi	a0,a0,1038 # 80209b60 <__func__.0+0x10>
    8020675a:	fffff097          	auipc	ra,0xfffff
    8020675e:	1ae080e7          	jalr	430(ra) # 80205908 <create>
    if (testfile == NULL) {
    80206762:	cd41                	beqz	a0,802067fa <testfat+0xba>
    80206764:	84aa                	mv	s1,a0
        panic("[testfat] create file error\n");
    }
    MSG_PRINT("create file finish");
    int ret = ewrite(testfile, 0, (u64)test_content_to_write, 0, 9);
    80206766:	4725                	li	a4,9
    80206768:	4681                	li	a3,0
    8020676a:	00004617          	auipc	a2,0x4
    8020676e:	e1660613          	addi	a2,a2,-490 # 8020a580 <test_content_to_write>
    80206772:	4581                	li	a1,0
    80206774:	ffffe097          	auipc	ra,0xffffe
    80206778:	124080e7          	jalr	292(ra) # 80204898 <ewrite>
    if (ret != 9) {
    8020677c:	47a5                	li	a5,9
    8020677e:	08f51f63          	bne	a0,a5,8020681c <testfat+0xdc>
        panic("[testfat] write file error\n");
    }

    MSG_PRINT("write file finish");
    eunlock(testfile);
    80206782:	8526                	mv	a0,s1
    80206784:	fffff097          	auipc	ra,0xfffff
    80206788:	96a080e7          	jalr	-1686(ra) # 802050ee <eunlock>
    eput(testfile);
    8020678c:	8526                	mv	a0,s1
    8020678e:	fffff097          	auipc	ra,0xfffff
    80206792:	9c2080e7          	jalr	-1598(ra) # 80205150 <eput>
    MSG_PRINT("eput file finish");
    testfile = ename("/testfile");
    80206796:	00003517          	auipc	a0,0x3
    8020679a:	3ca50513          	addi	a0,a0,970 # 80209b60 <__func__.0+0x10>
    8020679e:	fffff097          	auipc	ra,0xfffff
    802067a2:	130080e7          	jalr	304(ra) # 802058ce <ename>
    802067a6:	84aa                	mv	s1,a0
    if (testfile == NULL) {
    802067a8:	c959                	beqz	a0,8020683e <testfat+0xfe>
        printf("[testfat] open file error\n");
    }
    DEC_PRINT(testfile->ref);
    eread(testfile, 0, (u64)test_content_to_read, 0, 9);
    802067aa:	001e9917          	auipc	s2,0x1e9
    802067ae:	e5e90913          	addi	s2,s2,-418 # 803ef608 <test_content_to_read>
    802067b2:	4725                	li	a4,9
    802067b4:	4681                	li	a3,0
    802067b6:	864a                	mv	a2,s2
    802067b8:	4581                	li	a1,0
    802067ba:	8526                	mv	a0,s1
    802067bc:	ffffe097          	auipc	ra,0xffffe
    802067c0:	fe4080e7          	jalr	-28(ra) # 802047a0 <eread>
    if (strncmp(test_content_to_write, test_content_to_read, 114514)==0) {
    802067c4:	6671                	lui	a2,0x1c
    802067c6:	f5260613          	addi	a2,a2,-174 # 1bf52 <_start-0x801e40ae>
    802067ca:	85ca                	mv	a1,s2
    802067cc:	00004517          	auipc	a0,0x4
    802067d0:	db450513          	addi	a0,a0,-588 # 8020a580 <test_content_to_write>
    802067d4:	ffffd097          	auipc	ra,0xffffd
    802067d8:	2b0080e7          	jalr	688(ra) # 80203a84 <strncmp>
    802067dc:	e935                	bnez	a0,80206850 <testfat+0x110>
        printf("[testfat]  testfat passed\n");
    802067de:	00003517          	auipc	a0,0x3
    802067e2:	40250513          	addi	a0,a0,1026 # 80209be0 <__func__.0+0x90>
    802067e6:	ffffa097          	auipc	ra,0xffffa
    802067ea:	cd0080e7          	jalr	-816(ra) # 802004b6 <printf>
    } else {
        printf("[testfat]  testfat failed\n");
    }
    802067ee:	60e2                	ld	ra,24(sp)
    802067f0:	6442                	ld	s0,16(sp)
    802067f2:	64a2                	ld	s1,8(sp)
    802067f4:	6902                	ld	s2,0(sp)
    802067f6:	6105                	addi	sp,sp,32
    802067f8:	8082                	ret
        panic("[testfat] create file error\n");
    802067fa:	00003697          	auipc	a3,0x3
    802067fe:	37668693          	addi	a3,a3,886 # 80209b70 <__func__.0+0x20>
    80206802:	00003617          	auipc	a2,0x3
    80206806:	4ae60613          	addi	a2,a2,1198 # 80209cb0 <__func__.0>
    8020680a:	45bd                	li	a1,15
    8020680c:	00003517          	auipc	a0,0x3
    80206810:	38450513          	addi	a0,a0,900 # 80209b90 <__func__.0+0x40>
    80206814:	ffffa097          	auipc	ra,0xffffa
    80206818:	d2e080e7          	jalr	-722(ra) # 80200542 <_panic_>
        panic("[testfat] write file error\n");
    8020681c:	00003697          	auipc	a3,0x3
    80206820:	38468693          	addi	a3,a3,900 # 80209ba0 <__func__.0+0x50>
    80206824:	00003617          	auipc	a2,0x3
    80206828:	48c60613          	addi	a2,a2,1164 # 80209cb0 <__func__.0>
    8020682c:	45d1                	li	a1,20
    8020682e:	00003517          	auipc	a0,0x3
    80206832:	36250513          	addi	a0,a0,866 # 80209b90 <__func__.0+0x40>
    80206836:	ffffa097          	auipc	ra,0xffffa
    8020683a:	d0c080e7          	jalr	-756(ra) # 80200542 <_panic_>
        printf("[testfat] open file error\n");
    8020683e:	00003517          	auipc	a0,0x3
    80206842:	38250513          	addi	a0,a0,898 # 80209bc0 <__func__.0+0x70>
    80206846:	ffffa097          	auipc	ra,0xffffa
    8020684a:	c70080e7          	jalr	-912(ra) # 802004b6 <printf>
    8020684e:	bfb1                	j	802067aa <testfat+0x6a>
        printf("[testfat]  testfat failed\n");
    80206850:	00003517          	auipc	a0,0x3
    80206854:	3b050513          	addi	a0,a0,944 # 80209c00 <__func__.0+0xb0>
    80206858:	ffffa097          	auipc	ra,0xffffa
    8020685c:	c5e080e7          	jalr	-930(ra) # 802004b6 <printf>
    80206860:	b779                	j	802067ee <testfat+0xae>
	...

0000000080207000 <_trampoline>:
    80207000:	14051573          	csrrw	a0,sscratch,a0
    80207004:	02153423          	sd	ra,40(a0)
    80207008:	02253823          	sd	sp,48(a0)
    8020700c:	02353c23          	sd	gp,56(a0)
    80207010:	04453023          	sd	tp,64(a0)
    80207014:	04553423          	sd	t0,72(a0)
    80207018:	04653823          	sd	t1,80(a0)
    8020701c:	04753c23          	sd	t2,88(a0)
    80207020:	f120                	sd	s0,96(a0)
    80207022:	f524                	sd	s1,104(a0)
    80207024:	fd2c                	sd	a1,120(a0)
    80207026:	e150                	sd	a2,128(a0)
    80207028:	e554                	sd	a3,136(a0)
    8020702a:	e958                	sd	a4,144(a0)
    8020702c:	ed5c                	sd	a5,152(a0)
    8020702e:	0b053023          	sd	a6,160(a0)
    80207032:	0b153423          	sd	a7,168(a0)
    80207036:	0b253823          	sd	s2,176(a0)
    8020703a:	0b353c23          	sd	s3,184(a0)
    8020703e:	0d453023          	sd	s4,192(a0)
    80207042:	0d553423          	sd	s5,200(a0)
    80207046:	0d653823          	sd	s6,208(a0)
    8020704a:	0d753c23          	sd	s7,216(a0)
    8020704e:	0f853023          	sd	s8,224(a0)
    80207052:	0f953423          	sd	s9,232(a0)
    80207056:	0fa53823          	sd	s10,240(a0)
    8020705a:	0fb53c23          	sd	s11,248(a0)
    8020705e:	11c53023          	sd	t3,256(a0)
    80207062:	11d53423          	sd	t4,264(a0)
    80207066:	11e53823          	sd	t5,272(a0)
    8020706a:	11f53c23          	sd	t6,280(a0)
    8020706e:	140022f3          	csrr	t0,sscratch
    80207072:	06553823          	sd	t0,112(a0)
    80207076:	00853103          	ld	sp,8(a0)
    8020707a:	02053203          	ld	tp,32(a0)
    8020707e:	01053283          	ld	t0,16(a0)
    80207082:	14102373          	csrr	t1,sepc
    80207086:	00653c23          	sd	t1,24(a0)
    8020708a:	00053303          	ld	t1,0(a0)
    8020708e:	18031073          	csrw	satp,t1
    80207092:	12000073          	sfence.vma
    80207096:	8282                	jr	t0

0000000080207098 <userReturn>:
    80207098:	18059073          	csrw	satp,a1
    8020709c:	12000073          	sfence.vma
    802070a0:	07053283          	ld	t0,112(a0)
    802070a4:	14029073          	csrw	sscratch,t0
    802070a8:	01853303          	ld	t1,24(a0)
    802070ac:	14131073          	csrw	sepc,t1
    802070b0:	02853083          	ld	ra,40(a0)
    802070b4:	03053103          	ld	sp,48(a0)
    802070b8:	03853183          	ld	gp,56(a0)
    802070bc:	04053203          	ld	tp,64(a0)
    802070c0:	04853283          	ld	t0,72(a0)
    802070c4:	05053303          	ld	t1,80(a0)
    802070c8:	05853383          	ld	t2,88(a0)
    802070cc:	7120                	ld	s0,96(a0)
    802070ce:	7524                	ld	s1,104(a0)
    802070d0:	7d2c                	ld	a1,120(a0)
    802070d2:	6150                	ld	a2,128(a0)
    802070d4:	6554                	ld	a3,136(a0)
    802070d6:	6958                	ld	a4,144(a0)
    802070d8:	6d5c                	ld	a5,152(a0)
    802070da:	0a053803          	ld	a6,160(a0)
    802070de:	0a853883          	ld	a7,168(a0)
    802070e2:	0b053903          	ld	s2,176(a0)
    802070e6:	0b853983          	ld	s3,184(a0)
    802070ea:	0c053a03          	ld	s4,192(a0)
    802070ee:	0c853a83          	ld	s5,200(a0)
    802070f2:	0d053b03          	ld	s6,208(a0)
    802070f6:	0d853b83          	ld	s7,216(a0)
    802070fa:	0e053c03          	ld	s8,224(a0)
    802070fe:	0e853c83          	ld	s9,232(a0)
    80207102:	0f053d03          	ld	s10,240(a0)
    80207106:	0f853d83          	ld	s11,248(a0)
    8020710a:	10053e03          	ld	t3,256(a0)
    8020710e:	10853e83          	ld	t4,264(a0)
    80207112:	11053f03          	ld	t5,272(a0)
    80207116:	11853f83          	ld	t6,280(a0)
    8020711a:	14051573          	csrrw	a0,sscratch,a0
    8020711e:	10200073          	sret
	...

0000000080208000 <trapframe>:
	...
