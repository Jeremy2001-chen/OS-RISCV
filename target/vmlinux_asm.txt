
target/vmlinux.img:     file format elf64-littleriscv


Disassembly of section .text:

0000000080200000 <_start>:
#include <MemoryConfig.h>

    .section .boot
    .globl _start
_start:
    mv t0, a0
    80200000:	82aa                	mv	t0,a0
    add t0, t0, 1
    80200002:	0285                	addi	t0,t0,1
    slli t0, t0, 16
    80200004:	02c2                	slli	t0,t0,0x10
    la sp, kernelStack
    80200006:	00191117          	auipc	sp,0x191
    8020000a:	ffa10113          	addi	sp,sp,-6 # 80391000 <_stack>
    add sp, sp, t0
    8020000e:	9116                	add	sp,sp,t0
    call main
    80200010:	006000ef          	jal	ra,80200016 <main>

0000000080200014 <loop>:
    80200014:	a001                	j	80200014 <loop>

0000000080200016 <main>:
    80200016:	7179                	addi	sp,sp,-48

loop:
    j loop
    80200018:	f406                	sd	ra,40(sp)
    asm volatile("mv tp, %0" : : "r" (hartId & 0x7));
}

extern struct superblock *fat;

void main(u64 hartId) {
    8020001a:	f022                	sd	s0,32(sp)
    8020001c:	ec26                	sd	s1,24(sp)
    8020001e:	1800                	addi	s0,sp,48
    80200020:	84aa                	mv	s1,a0
    asm volatile("mv tp, %0" : : "r" (hartId & 0x7));
    80200022:	00757793          	andi	a5,a0,7
    80200026:	823e                	mv	tp,a5
    initHartId(hartId);

    if (mainCount == 1000) {
    80200028:	001e1697          	auipc	a3,0x1e1
    8020002c:	fd86a683          	lw	a3,-40(a3) # 803e1000 <mainCount>
    80200030:	3e800793          	li	a5,1000
        PROCESS_CREATE_PRIORITY(SyscallTest, 1);
        // PROCESS_CREATE_PRIORITY(MountTest, 1);
        // PROCESS_CREATE_PRIORITY(WaitTest, 1);

    } else {
        while (initFinish == 0);
    80200034:	001e2717          	auipc	a4,0x1e2
    80200038:	fcc70713          	addi	a4,a4,-52 # 803e2000 <initFinish>
    if (mainCount == 1000) {
    8020003c:	04f68163          	beq	a3,a5,8020007e <main+0x68>
        while (initFinish == 0);
    80200040:	431c                	lw	a5,0(a4)
    80200042:	2781                	sext.w	a5,a5
    80200044:	dff5                	beqz	a5,80200040 <main+0x2a>
        __sync_synchronize();
    80200046:	0ff0000f          	fence

        printf("Hello, risc-v!\nCurrent hartId: %ld \n\n", hartId);
    8020004a:	85a6                	mv	a1,s1
    8020004c:	0000d517          	auipc	a0,0xd
    80200050:	fdc50513          	addi	a0,a0,-36 # 8020d028 <textEnd+0x28>
    80200054:	00001097          	auipc	ra,0x1
    80200058:	a76080e7          	jalr	-1418(ra) # 80200aca <printf>

        startPage();
    8020005c:	00001097          	auipc	ra,0x1
    80200060:	5e2080e7          	jalr	1506(ra) # 8020163e <startPage>
        trapInit();
    80200064:	00004097          	auipc	ra,0x4
    80200068:	7c2080e7          	jalr	1986(ra) # 80204826 <trapInit>
        //PROCESS_CREATE_PRIORITY(ForkTest, 1);
        //PROCESS_CREATE_PRIORITY(ProcessB, 3);
        //printf("Reach this place\n");
    }

    yield();
    8020006c:	00003097          	auipc	ra,0x3
    80200070:	316080e7          	jalr	790(ra) # 80203382 <yield>
    80200074:	70a2                	ld	ra,40(sp)
    80200076:	7402                	ld	s0,32(sp)
    80200078:	64e2                	ld	s1,24(sp)
    8020007a:	6145                	addi	sp,sp,48
    8020007c:	8082                	ret
        for (u64 *i = bssStart; i < bssEnd; i++) {
    8020007e:	001e2717          	auipc	a4,0x1e2
    80200082:	f8270713          	addi	a4,a4,-126 # 803e2000 <initFinish>
    80200086:	0043b797          	auipc	a5,0x43b
    8020008a:	f7a78793          	addi	a5,a5,-134 # 8063b000 <bssEnd>
    8020008e:	02f77063          	bgeu	a4,a5,802000ae <main+0x98>
    80200092:	87ba                	mv	a5,a4
    80200094:	0043b717          	auipc	a4,0x43b
    80200098:	f6b70713          	addi	a4,a4,-149 # 8063afff <_pgdir+0xfff>
    8020009c:	8f1d                	sub	a4,a4,a5
    8020009e:	9b61                	andi	a4,a4,-8
    802000a0:	0721                	addi	a4,a4,8
    802000a2:	973e                	add	a4,a4,a5
            *i = 0;
    802000a4:	0007b023          	sd	zero,0(a5)
        for (u64 *i = bssStart; i < bssEnd; i++) {
    802000a8:	07a1                	addi	a5,a5,8
    802000aa:	fee79de3          	bne	a5,a4,802000a4 <main+0x8e>
        mainCount = mainCount + 1;
    802000ae:	001e1797          	auipc	a5,0x1e1
    802000b2:	f527a783          	lw	a5,-174(a5) # 803e1000 <mainCount>
    802000b6:	2785                	addiw	a5,a5,1
    802000b8:	001e1717          	auipc	a4,0x1e1
    802000bc:	f4f72423          	sw	a5,-184(a4) # 803e1000 <mainCount>
        consoleInit();
    802000c0:	00000097          	auipc	ra,0x0
    802000c4:	2d6080e7          	jalr	726(ra) # 80200396 <consoleInit>
        printLockInit();
    802000c8:	00000097          	auipc	ra,0x0
    802000cc:	312080e7          	jalr	786(ra) # 802003da <printLockInit>
        pageLockInit();
    802000d0:	00002097          	auipc	ra,0x2
    802000d4:	b22080e7          	jalr	-1246(ra) # 80201bf2 <pageLockInit>
        printf("Hello, risc-v!\nBoot hartId: %ld \n\n", hartId);
    802000d8:	85a6                	mv	a1,s1
    802000da:	0000d517          	auipc	a0,0xd
    802000de:	f2650513          	addi	a0,a0,-218 # 8020d000 <textEnd>
    802000e2:	00001097          	auipc	ra,0x1
    802000e6:	9e8080e7          	jalr	-1560(ra) # 80200aca <printf>
        memoryInit();
    802000ea:	00001097          	auipc	ra,0x1
    802000ee:	578080e7          	jalr	1400(ra) # 80201662 <memoryInit>
        processInit();
    802000f2:	00003097          	auipc	ra,0x3
    802000f6:	a16080e7          	jalr	-1514(ra) # 80202b08 <processInit>
        sdInit();
    802000fa:	00001097          	auipc	ra,0x1
    802000fe:	208080e7          	jalr	520(ra) # 80201302 <sdInit>
        binit();
    80200102:	00008097          	auipc	ra,0x8
    80200106:	aa6080e7          	jalr	-1370(ra) # 80207ba8 <binit>
        fileinit();
    8020010a:	0000a097          	auipc	ra,0xa
    8020010e:	9f8080e7          	jalr	-1544(ra) # 80209b02 <fileinit>
    80200112:	4785                	li	a5,1
                unsigned long mask = 1 << i;
    80200114:	4f85                	li	t6,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    return a0;
}

inline void setMode(int hartId) {
	register u64 a7 asm ("a7") = 0x48534D;
    80200116:	00485eb7          	lui	t4,0x485
    8020011a:	34de8e93          	addi	t4,t4,845 # 48534d <_start-0x7fd7acb3>
	register u64 a0 asm ("a0") = hartId;
	register u64 a1 asm ("a1") = 0x80200000;
    8020011e:	40100e13          	li	t3,1025
    80200122:	0e56                	slli	t3,t3,0x15
	register u64 a2 asm ("a2") = 19260817; // priv
    80200124:	0125e337          	lui	t1,0x125e
    80200128:	59130313          	addi	t1,t1,1425 # 125e591 <_start-0x7efa1a6f>
        for (int i = 1; i < 5; ++ i) {
    8020012c:	4f15                	li	t5,5
    8020012e:	a021                	j	80200136 <main+0x120>
    80200130:	0785                	addi	a5,a5,1
    80200132:	03e78a63          	beq	a5,t5,80200166 <main+0x150>
    80200136:	0007871b          	sext.w	a4,a5
            if (i != hartId) {
    8020013a:	fe978be3          	beq	a5,s1,80200130 <main+0x11a>
                unsigned long mask = 1 << i;
    8020013e:	00ef973b          	sllw	a4,t6,a4
    80200142:	fce43c23          	sd	a4,-40(s0)
	register u64 a7 asm ("a7") = 0x48534D;
    80200146:	88f6                	mv	a7,t4
	register u64 a0 asm ("a0") = hartId;
    80200148:	853e                	mv	a0,a5
	register u64 a1 asm ("a1") = 0x80200000;
    8020014a:	85f2                	mv	a1,t3
	register u64 a2 asm ("a2") = 19260817; // priv
    8020014c:	861a                	mv	a2,t1
	register u64 a6 asm ("a6") = 0; // funcid
    8020014e:	4801                	li	a6,0
	asm volatile ("ecall" : "+r" (a0) : "r"(a0), "r"(a1), "r"(a2), "r"(a6), "r" (a7) : "memory");
    80200150:	00000073          	ecall
		SBI_CALL(which, arg0, arg1, arg2, 0)
#define SBI_CALL_4(which, arg0, arg1, arg2, arg3) \
		SBI_CALL(which, arg0, arg1, arg2, arg3)

static inline void sbi_send_ipi(const unsigned long* hart_mask) {
    SBI_CALL_1(SBI_SEND_IPI, hart_mask);
    80200154:	fd840513          	addi	a0,s0,-40
    80200158:	4581                	li	a1,0
    8020015a:	4601                	li	a2,0
    8020015c:	4681                	li	a3,0
    8020015e:	4891                	li	a7,4
    80200160:	00000073          	ecall
    80200164:	b7f1                	j	80200130 <main+0x11a>
        trapInit();
    80200166:	00004097          	auipc	ra,0x4
    8020016a:	6c0080e7          	jalr	1728(ra) # 80204826 <trapInit>
        __sync_synchronize();     
    8020016e:	0ff0000f          	fence
        initFinish = 0;
    80200172:	001e2797          	auipc	a5,0x1e2
    80200176:	e807a723          	sw	zero,-370(a5) # 803e2000 <initFinish>
        PROCESS_CREATE_PRIORITY(SyscallTest, 1);
    8020017a:	4605                	li	a2,1
    8020017c:	001e1597          	auipc	a1,0x1e1
    80200180:	ebc5a583          	lw	a1,-324(a1) # 803e1038 <binarySyscallTestSize>
    80200184:	000c4517          	auipc	a0,0xc4
    80200188:	58450513          	addi	a0,a0,1412 # 802c4708 <binarySyscallTestStart>
    8020018c:	00003097          	auipc	ra,0x3
    80200190:	e00080e7          	jalr	-512(ra) # 80202f8c <processCreatePriority>
    80200194:	bde1                	j	8020006c <main+0x56>

0000000080200196 <consoleWrite>:
    if ((ret & UART_RXFIFO_DATA) == '\r')
        return '\n';
    return ret & UART_RXFIFO_DATA;
}

int consoleWrite(int user_src, u64 src, u64 start, u64 n) {
    80200196:	711d                	addi	sp,sp,-96
    80200198:	ec86                	sd	ra,88(sp)
    8020019a:	e8a2                	sd	s0,80(sp)
    8020019c:	e4a6                	sd	s1,72(sp)
    8020019e:	e0ca                	sd	s2,64(sp)
    802001a0:	fc4e                	sd	s3,56(sp)
    802001a2:	f852                	sd	s4,48(sp)
    802001a4:	f456                	sd	s5,40(sp)
    802001a6:	f05a                	sd	s6,32(sp)
    802001a8:	ec5e                	sd	s7,24(sp)
    802001aa:	e862                	sd	s8,16(sp)
    802001ac:	1080                	addi	s0,sp,96
    int i;
    for (i = 0; i < n; i++) {
    802001ae:	c6bd                	beqz	a3,8020021c <consoleWrite+0x86>
    802001b0:	8aaa                	mv	s5,a0
    802001b2:	892e                	mv	s2,a1
    802001b4:	00b68a33          	add	s4,a3,a1
    802001b8:	4981                	li	s3,0
        char c;
        if(either_copyin(&c, user_src, src+i, 1) == -1)
    802001ba:	5b7d                	li	s6,-1
            break;
        if (c == '\n')
    802001bc:	4ba9                	li	s7,10
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    802001be:	100104b7          	lui	s1,0x10010
	asm volatile("sw %0, 0(%1)" : : "r"(val), "r"(addr));
    802001c2:	4c35                	li	s8,13
    802001c4:	a00d                	j	802001e6 <consoleWrite+0x50>
            putchar('\r');
        putchar(c);
    802001c6:	faf44703          	lbu	a4,-81(s0)
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    802001ca:	409c                	lw	a5,0(s1)
	while (readl(uartRegTXFIFO) & UART_TXFIFO_FULL);
    802001cc:	0820000f          	fence	i,r
    802001d0:	02079693          	slli	a3,a5,0x20
    802001d4:	fe06cbe3          	bltz	a3,802001ca <consoleWrite+0x34>
    writel(ch, uartRegTXFIFO);
    802001d8:	0140000f          	fence	w,o
	asm volatile("sw %0, 0(%1)" : : "r"(val), "r"(addr));
    802001dc:	c098                	sw	a4,0(s1)
    for (i = 0; i < n; i++) {
    802001de:	2985                	addiw	s3,s3,1
    802001e0:	0905                	addi	s2,s2,1
    802001e2:	03490e63          	beq	s2,s4,8020021e <consoleWrite+0x88>
        if(either_copyin(&c, user_src, src+i, 1) == -1)
    802001e6:	4685                	li	a3,1
    802001e8:	864a                	mv	a2,s2
    802001ea:	85d6                	mv	a1,s5
    802001ec:	faf40513          	addi	a0,s0,-81
    802001f0:	00003097          	auipc	ra,0x3
    802001f4:	13c080e7          	jalr	316(ra) # 8020332c <either_copyin>
    802001f8:	03650363          	beq	a0,s6,8020021e <consoleWrite+0x88>
        if (c == '\n')
    802001fc:	faf44783          	lbu	a5,-81(s0)
    80200200:	fd7793e3          	bne	a5,s7,802001c6 <consoleWrite+0x30>
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    80200204:	409c                	lw	a5,0(s1)
	while (readl(uartRegTXFIFO) & UART_TXFIFO_FULL);
    80200206:	0820000f          	fence	i,r
    8020020a:	02079713          	slli	a4,a5,0x20
    8020020e:	fe074be3          	bltz	a4,80200204 <consoleWrite+0x6e>
    writel(ch, uartRegTXFIFO);
    80200212:	0140000f          	fence	w,o
	asm volatile("sw %0, 0(%1)" : : "r"(val), "r"(addr));
    80200216:	0184a023          	sw	s8,0(s1) # 10010000 <_start-0x701f0000>
}
    8020021a:	b775                	j	802001c6 <consoleWrite+0x30>
    for (i = 0; i < n; i++) {
    8020021c:	4981                	li	s3,0
    }
    return i;
}
    8020021e:	854e                	mv	a0,s3
    80200220:	60e6                	ld	ra,88(sp)
    80200222:	6446                	ld	s0,80(sp)
    80200224:	64a6                	ld	s1,72(sp)
    80200226:	6906                	ld	s2,64(sp)
    80200228:	79e2                	ld	s3,56(sp)
    8020022a:	7a42                	ld	s4,48(sp)
    8020022c:	7aa2                	ld	s5,40(sp)
    8020022e:	7b02                	ld	s6,32(sp)
    80200230:	6be2                	ld	s7,24(sp)
    80200232:	6c42                	ld	s8,16(sp)
    80200234:	6125                	addi	sp,sp,96
    80200236:	8082                	ret

0000000080200238 <consoleRead>:

//TODO, 未考虑多进程
//没有回显
#define GET_BUF_LEN 64
char buf[GET_BUF_LEN];
int consoleRead(int isUser, u64 dst, u64 start, u64 n) {
    80200238:	7119                	addi	sp,sp,-128
    8020023a:	fc86                	sd	ra,120(sp)
    8020023c:	f8a2                	sd	s0,112(sp)
    8020023e:	f4a6                	sd	s1,104(sp)
    80200240:	f0ca                	sd	s2,96(sp)
    80200242:	ecce                	sd	s3,88(sp)
    80200244:	e8d2                	sd	s4,80(sp)
    80200246:	e4d6                	sd	s5,72(sp)
    80200248:	e0da                	sd	s6,64(sp)
    8020024a:	fc5e                	sd	s7,56(sp)
    8020024c:	f862                	sd	s8,48(sp)
    8020024e:	f466                	sd	s9,40(sp)
    80200250:	f06a                	sd	s10,32(sp)
    80200252:	ec6e                	sd	s11,24(sp)
    80200254:	0100                	addi	s0,sp,128
    int i;
    for (i = 0; i < n; i++) {
    80200256:	c285                	beqz	a3,80200276 <consoleRead+0x3e>
    80200258:	8b2a                	mv	s6,a0
    8020025a:	892e                	mv	s2,a1
    8020025c:	00b68ab3          	add	s5,a3,a1
    80200260:	4981                	li	s3,0
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    80200262:	10010a37          	lui	s4,0x10010
    80200266:	004a0493          	addi	s1,s4,4 # 10010004 <_start-0x701efffc>
    if ((ret & UART_RXFIFO_DATA) == '\r')
    8020026a:	4c35                	li	s8,13
        char c = getchar();
    8020026c:	4da9                	li	s11,10
	asm volatile("sw %0, 0(%1)" : : "r"(val), "r"(addr));
    8020026e:	4d35                	li	s10,13
        if (c == '\n')
    80200270:	4ca9                	li	s9,10
            putchar('\r');
        if (either_copyout(isUser, dst + i, &c, 1) == -1)
    80200272:	5bfd                	li	s7,-1
    80200274:	a8b9                	j	802002d2 <consoleRead+0x9a>
    for (i = 0; i < n; i++) {
    80200276:	4981                	li	s3,0
            break;
    }
    return i;
}
    80200278:	854e                	mv	a0,s3
    8020027a:	70e6                	ld	ra,120(sp)
    8020027c:	7446                	ld	s0,112(sp)
    8020027e:	74a6                	ld	s1,104(sp)
    80200280:	7906                	ld	s2,96(sp)
    80200282:	69e6                	ld	s3,88(sp)
    80200284:	6a46                	ld	s4,80(sp)
    80200286:	6aa6                	ld	s5,72(sp)
    80200288:	6b06                	ld	s6,64(sp)
    8020028a:	7be2                	ld	s7,56(sp)
    8020028c:	7c42                	ld	s8,48(sp)
    8020028e:	7ca2                	ld	s9,40(sp)
    80200290:	7d02                	ld	s10,32(sp)
    80200292:	6de2                	ld	s11,24(sp)
    80200294:	6109                	addi	sp,sp,128
    80200296:	8082                	ret
        char c = getchar();
    80200298:	f9b407a3          	sb	s11,-113(s0)
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    8020029c:	000a2783          	lw	a5,0(s4)
	while (readl(uartRegTXFIFO) & UART_TXFIFO_FULL);
    802002a0:	0820000f          	fence	i,r
    802002a4:	02079713          	slli	a4,a5,0x20
    802002a8:	fe074ae3          	bltz	a4,8020029c <consoleRead+0x64>
    writel(ch, uartRegTXFIFO);
    802002ac:	0140000f          	fence	w,o
	asm volatile("sw %0, 0(%1)" : : "r"(val), "r"(addr));
    802002b0:	01aa2023          	sw	s10,0(s4)
        if (either_copyout(isUser, dst + i, &c, 1) == -1)
    802002b4:	4685                	li	a3,1
    802002b6:	f8f40613          	addi	a2,s0,-113
    802002ba:	85ca                	mv	a1,s2
    802002bc:	855a                	mv	a0,s6
    802002be:	00003097          	auipc	ra,0x3
    802002c2:	016080e7          	jalr	22(ra) # 802032d4 <either_copyout>
    802002c6:	fb7509e3          	beq	a0,s7,80200278 <consoleRead+0x40>
    for (i = 0; i < n; i++) {
    802002ca:	2985                	addiw	s3,s3,1
    802002cc:	0905                	addi	s2,s2,1
    802002ce:	fb2a85e3          	beq	s5,s2,80200278 <consoleRead+0x40>
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    802002d2:	409c                	lw	a5,0(s1)
    802002d4:	0007869b          	sext.w	a3,a5
	u32 ret = readl(uartRegRXFIFO);
    802002d8:	0820000f          	fence	i,r
    while (ret & UART_RXFIFO_EMPTY) {
    802002dc:	8736                	mv	a4,a3
    802002de:	02079613          	slli	a2,a5,0x20
    802002e2:	00065c63          	bgez	a2,802002fa <consoleRead+0xc2>
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    802002e6:	409c                	lw	a5,0(s1)
    802002e8:	0007869b          	sext.w	a3,a5
        ret = readl(uartRegRXFIFO);
    802002ec:	0820000f          	fence	i,r
    while (ret & UART_RXFIFO_EMPTY) {
    802002f0:	8736                	mv	a4,a3
    802002f2:	02079613          	slli	a2,a5,0x20
    802002f6:	fe0648e3          	bltz	a2,802002e6 <consoleRead+0xae>
    if ((ret & UART_RXFIFO_DATA) == '\r')
    802002fa:	0ff6f693          	andi	a3,a3,255
    802002fe:	f9868de3          	beq	a3,s8,80200298 <consoleRead+0x60>
        char c = getchar();
    80200302:	0ff77713          	andi	a4,a4,255
    80200306:	f8e407a3          	sb	a4,-113(s0)
        if (c == '\n')
    8020030a:	fb9715e3          	bne	a4,s9,802002b4 <consoleRead+0x7c>
    8020030e:	b779                	j	8020029c <consoleRead+0x64>

0000000080200310 <consoleInterrupt>:
void consoleInterrupt(int c) {
    80200310:	1141                	addi	sp,sp,-16
    80200312:	e422                	sd	s0,8(sp)
    80200314:	0800                	addi	s0,sp,16
}
    80200316:	6422                	ld	s0,8(sp)
    80200318:	0141                	addi	sp,sp,16
    8020031a:	8082                	ret

000000008020031c <putchar>:
{
    8020031c:	1141                	addi	sp,sp,-16
    8020031e:	e422                	sd	s0,8(sp)
    80200320:	0800                	addi	s0,sp,16
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    80200322:	10010737          	lui	a4,0x10010
    80200326:	431c                	lw	a5,0(a4)
	while (readl(uartRegTXFIFO) & UART_TXFIFO_FULL);
    80200328:	0820000f          	fence	i,r
    8020032c:	02079693          	slli	a3,a5,0x20
    80200330:	fe06cbe3          	bltz	a3,80200326 <putchar+0xa>
    writel(ch, uartRegTXFIFO);
    80200334:	0140000f          	fence	w,o
	asm volatile("sw %0, 0(%1)" : : "r"(val), "r"(addr));
    80200338:	100107b7          	lui	a5,0x10010
    8020033c:	c388                	sw	a0,0(a5)
}
    8020033e:	6422                	ld	s0,8(sp)
    80200340:	0141                	addi	sp,sp,16
    80200342:	8082                	ret

0000000080200344 <getchar>:
{
    80200344:	1141                	addi	sp,sp,-16
    80200346:	e422                	sd	s0,8(sp)
    80200348:	0800                	addi	s0,sp,16
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    8020034a:	100107b7          	lui	a5,0x10010
    8020034e:	0791                	addi	a5,a5,4
    80200350:	439c                	lw	a5,0(a5)
    80200352:	0007871b          	sext.w	a4,a5
	u32 ret = readl(uartRegRXFIFO);
    80200356:	0820000f          	fence	i,r
    while (ret & UART_RXFIFO_EMPTY) {
    8020035a:	853a                	mv	a0,a4
    8020035c:	02079693          	slli	a3,a5,0x20
    80200360:	0006df63          	bgez	a3,8020037e <getchar+0x3a>
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    80200364:	100106b7          	lui	a3,0x10010
    80200368:	0691                	addi	a3,a3,4
    8020036a:	429c                	lw	a5,0(a3)
    8020036c:	0007871b          	sext.w	a4,a5
        ret = readl(uartRegRXFIFO);
    80200370:	0820000f          	fence	i,r
    while (ret & UART_RXFIFO_EMPTY) {
    80200374:	853a                	mv	a0,a4
    80200376:	02079613          	slli	a2,a5,0x20
    8020037a:	fe0648e3          	bltz	a2,8020036a <getchar+0x26>
    if ((ret & UART_RXFIFO_DATA) == '\r')
    8020037e:	0ff77713          	andi	a4,a4,255
    80200382:	47b5                	li	a5,13
    80200384:	00f70763          	beq	a4,a5,80200392 <getchar+0x4e>
    return ret & UART_RXFIFO_DATA;
    80200388:	0ff57513          	andi	a0,a0,255
}
    8020038c:	6422                	ld	s0,8(sp)
    8020038e:	0141                	addi	sp,sp,16
    80200390:	8082                	ret
        return '\n';
    80200392:	4529                	li	a0,10
    80200394:	bfe5                	j	8020038c <getchar+0x48>

0000000080200396 <consoleInit>:

void consoleInit() {
    80200396:	1141                	addi	sp,sp,-16
    80200398:	e406                	sd	ra,8(sp)
    8020039a:	e022                	sd	s0,0(sp)
    8020039c:	0800                	addi	s0,sp,16
    initLock(&consoleLock, "console");
    8020039e:	0000d597          	auipc	a1,0xd
    802003a2:	cb258593          	addi	a1,a1,-846 # 8020d050 <textEnd+0x50>
    802003a6:	001e2517          	auipc	a0,0x1e2
    802003aa:	c6250513          	addi	a0,a0,-926 # 803e2008 <consoleLock>
    802003ae:	00006097          	auipc	ra,0x6
    802003b2:	d6c080e7          	jalr	-660(ra) # 8020611a <initLock>

    devsw[DEV_CONSOLE].read = consoleRead;
    802003b6:	00439797          	auipc	a5,0x439
    802003ba:	c8278793          	addi	a5,a5,-894 # 80639038 <devsw>
    802003be:	00000717          	auipc	a4,0x0
    802003c2:	e7a70713          	addi	a4,a4,-390 # 80200238 <consoleRead>
    802003c6:	eb98                	sd	a4,16(a5)
    devsw[DEV_CONSOLE].write = consoleWrite;
    802003c8:	00000717          	auipc	a4,0x0
    802003cc:	dce70713          	addi	a4,a4,-562 # 80200196 <consoleWrite>
    802003d0:	ef98                	sd	a4,24(a5)
    802003d2:	60a2                	ld	ra,8(sp)
    802003d4:	6402                	ld	s0,0(sp)
    802003d6:	0141                	addi	sp,sp,16
    802003d8:	8082                	ret

00000000802003da <printLockInit>:

struct Spinlock printLock;

#define IsDigit(x)  (((x) >= '0') && ((x) <= '9'))

inline void printLockInit(void) {
    802003da:	1141                	addi	sp,sp,-16
    802003dc:	e406                	sd	ra,8(sp)
    802003de:	e022                	sd	s0,0(sp)
    802003e0:	0800                	addi	s0,sp,16
    initLock(&printLock, "printLock");
    802003e2:	0000d597          	auipc	a1,0xd
    802003e6:	c7658593          	addi	a1,a1,-906 # 8020d058 <textEnd+0x58>
    802003ea:	001e2517          	auipc	a0,0x1e2
    802003ee:	c7650513          	addi	a0,a0,-906 # 803e2060 <printLock>
    802003f2:	00006097          	auipc	ra,0x6
    802003f6:	d28080e7          	jalr	-728(ra) # 8020611a <initLock>
}
    802003fa:	60a2                	ld	ra,8(sp)
    802003fc:	6402                	ld	s0,0(sp)
    802003fe:	0141                	addi	sp,sp,16
    80200400:	8082                	ret

0000000080200402 <printChar>:
    print(fmt, ap);
    va_end(ap);
    releaseLock(&printLock);
}

void printChar(char *buf, char c, int length, int ladjust) {
    80200402:	1141                	addi	sp,sp,-16
    80200404:	e422                	sd	s0,8(sp)
    80200406:	0800                	addi	s0,sp,16
    int i;

    if (length < 1)
    80200408:	8732                	mv	a4,a2
    8020040a:	04c05063          	blez	a2,8020044a <printChar+0x48>
    8020040e:	2701                	sext.w	a4,a4
        length = 1;
    if (ladjust)
    80200410:	ee9d                	bnez	a3,8020044e <printChar+0x4c>
        for (i = 1; i < length; i++)
            buf[i] = ' ';
    }
    else
    {
        for (i = 0; i < length - 1; i++)
    80200412:	4785                	li	a5,1
    80200414:	02c7d163          	bge	a5,a2,80200436 <printChar+0x34>
    80200418:	87aa                	mv	a5,a0
    8020041a:	00150693          	addi	a3,a0,1
    8020041e:	ffe7061b          	addiw	a2,a4,-2
    80200422:	1602                	slli	a2,a2,0x20
    80200424:	9201                	srli	a2,a2,0x20
    80200426:	96b2                	add	a3,a3,a2
            buf[i] = ' ';
    80200428:	02000613          	li	a2,32
    8020042c:	00c78023          	sb	a2,0(a5)
        for (i = 0; i < length - 1; i++)
    80200430:	0785                	addi	a5,a5,1
    80200432:	fed79de3          	bne	a5,a3,8020042c <printChar+0x2a>
        buf[length - 1] = c;
    80200436:	00e507b3          	add	a5,a0,a4
    8020043a:	feb78fa3          	sb	a1,-1(a5)
    }
    buf[length] = '\0';
    8020043e:	953a                	add	a0,a0,a4
    80200440:	00050023          	sb	zero,0(a0)
}
    80200444:	6422                	ld	s0,8(sp)
    80200446:	0141                	addi	sp,sp,16
    80200448:	8082                	ret
    8020044a:	4705                	li	a4,1
    8020044c:	b7c9                	j	8020040e <printChar+0xc>
        *buf = c;
    8020044e:	00b50023          	sb	a1,0(a0)
        for (i = 1; i < length; i++)
    80200452:	4785                	li	a5,1
    80200454:	fec7d5e3          	bge	a5,a2,8020043e <printChar+0x3c>
            buf[i] = ' ';
    80200458:	02000613          	li	a2,32
    8020045c:	00f506b3          	add	a3,a0,a5
    80200460:	00c68023          	sb	a2,0(a3) # 10010000 <_start-0x701f0000>
        for (i = 1; i < length; i++)
    80200464:	0785                	addi	a5,a5,1
    80200466:	0007869b          	sext.w	a3,a5
    8020046a:	fee6c9e3          	blt	a3,a4,8020045c <printChar+0x5a>
    8020046e:	bfc1                	j	8020043e <printChar+0x3c>

0000000080200470 <printString>:

void printString(char * buf, char* s, int length, int ladjust) {
    80200470:	1141                	addi	sp,sp,-16
    80200472:	e422                	sd	s0,8(sp)
    80200474:	0800                	addi	s0,sp,16
    int i;
    int len = 0;
    char *s1 = s;
    while (*s1++)
    80200476:	0005c783          	lbu	a5,0(a1)
    8020047a:	c7e1                	beqz	a5,80200542 <printString+0xd2>
    8020047c:	00158713          	addi	a4,a1,1
    int len = 0;
    80200480:	4781                	li	a5,0
        len++;
    80200482:	88be                	mv	a7,a5
    80200484:	2785                	addiw	a5,a5,1
    while (*s1++)
    80200486:	0705                	addi	a4,a4,1
    80200488:	fff74803          	lbu	a6,-1(a4)
    8020048c:	fe081be3          	bnez	a6,80200482 <printString+0x12>
    if (length < len)
    80200490:	8732                	mv	a4,a2
    80200492:	00f65363          	bge	a2,a5,80200498 <printString+0x28>
    80200496:	873e                	mv	a4,a5
    80200498:	0007081b          	sext.w	a6,a4
        length = len;

    if (ladjust)
    8020049c:	cab9                	beqz	a3,802004f2 <printString+0x82>
    {
        for (i = 0; i < len; i++)
    8020049e:	02f05063          	blez	a5,802004be <printString+0x4e>
    802004a2:	86aa                	mv	a3,a0
    802004a4:	872e                	mv	a4,a1
    802004a6:	fff5c593          	not	a1,a1
            buf[i] = s[i];
    802004aa:	00074603          	lbu	a2,0(a4)
    802004ae:	00c68023          	sb	a2,0(a3)
        for (i = 0; i < len; i++)
    802004b2:	0705                	addi	a4,a4,1
    802004b4:	0685                	addi	a3,a3,1
    802004b6:	00e5863b          	addw	a2,a1,a4
    802004ba:	ff1648e3          	blt	a2,a7,802004aa <printString+0x3a>
        for (i = len; i < length; i++)
    802004be:	0307d463          	bge	a5,a6,802004e6 <printString+0x76>
    802004c2:	00f50733          	add	a4,a0,a5
    802004c6:	fff8069b          	addiw	a3,a6,-1
    802004ca:	9e9d                	subw	a3,a3,a5
    802004cc:	1682                	slli	a3,a3,0x20
    802004ce:	9281                	srli	a3,a3,0x20
    802004d0:	00150613          	addi	a2,a0,1
    802004d4:	97b2                	add	a5,a5,a2
    802004d6:	97b6                	add	a5,a5,a3
            buf[i] = ' ';
    802004d8:	02000693          	li	a3,32
    802004dc:	00d70023          	sb	a3,0(a4)
        for (i = len; i < length; i++)
    802004e0:	0705                	addi	a4,a4,1
    802004e2:	fef71de3          	bne	a4,a5,802004dc <printString+0x6c>
        for (i = 0; i < length - len; i++)
            buf[i] = ' ';
        for (i = length - len; i < length; i++)
            buf[i] = s[i - length + len];
    }
    buf[length] = '\0';
    802004e6:	9542                	add	a0,a0,a6
    802004e8:	00050023          	sb	zero,0(a0)
}
    802004ec:	6422                	ld	s0,8(sp)
    802004ee:	0141                	addi	sp,sp,16
    802004f0:	8082                	ret
        for (i = 0; i < length - len; i++)
    802004f2:	9f1d                	subw	a4,a4,a5
    802004f4:	02e05263          	blez	a4,80200518 <printString+0xa8>
    802004f8:	86aa                	mv	a3,a0
    802004fa:	00150613          	addi	a2,a0,1
    802004fe:	fff7089b          	addiw	a7,a4,-1
    80200502:	1882                	slli	a7,a7,0x20
    80200504:	0208d893          	srli	a7,a7,0x20
    80200508:	9646                	add	a2,a2,a7
            buf[i] = ' ';
    8020050a:	02000893          	li	a7,32
    8020050e:	01168023          	sb	a7,0(a3)
        for (i = 0; i < length - len; i++)
    80200512:	0685                	addi	a3,a3,1
    80200514:	fec69de3          	bne	a3,a2,8020050e <printString+0x9e>
        for (i = length - len; i < length; i++)
    80200518:	fd0757e3          	bge	a4,a6,802004e6 <printString+0x76>
            buf[i] = s[i - length + len];
    8020051c:	410787b3          	sub	a5,a5,a6
    80200520:	00e786b3          	add	a3,a5,a4
    80200524:	96ae                	add	a3,a3,a1
    80200526:	0006c603          	lbu	a2,0(a3)
    8020052a:	00e506b3          	add	a3,a0,a4
    8020052e:	00c68023          	sb	a2,0(a3)
        for (i = length - len; i < length; i++)
    80200532:	0705                	addi	a4,a4,1
    80200534:	0007069b          	sext.w	a3,a4
    80200538:	ff06c4e3          	blt	a3,a6,80200520 <printString+0xb0>
    8020053c:	b76d                	j	802004e6 <printString+0x76>
    int len = 0;
    8020053e:	4781                	li	a5,0
    80200540:	bfbd                	j	802004be <printString+0x4e>
    if (length < len)
    80200542:	fff64813          	not	a6,a2
    80200546:	43f85813          	srai	a6,a6,0x3f
    8020054a:	01067833          	and	a6,a2,a6
    8020054e:	2801                	sext.w	a6,a6
    if (ladjust)
    80200550:	f6fd                	bnez	a3,8020053e <printString+0xce>
        for (i = 0; i < length - len; i++)
    80200552:	8742                	mv	a4,a6
    int len = 0;
    80200554:	87b6                	mv	a5,a3
        for (i = 0; i < length - len; i++)
    80200556:	fac041e3          	bgtz	a2,802004f8 <printString+0x88>
    8020055a:	b771                	j	802004e6 <printString+0x76>

000000008020055c <printNum>:

void printNum(char * buf, unsigned long u, int base, int negFlag, 
	 int length, int ladjust, char padc, int upcase)
{
    8020055c:	1141                	addi	sp,sp,-16
    8020055e:	e422                	sd	s0,8(sp)
    80200560:	0800                	addi	s0,sp,16
    int actualLength = 0;
    char *p = buf;
    80200562:	00150e13          	addi	t3,a0,1
    int i;

    do
    {
        int tmp = u % base;
    80200566:	8fb2                	mv	t6,a2
        if (tmp <= 9)
    80200568:	4f25                	li	t5,9
    8020056a:	a831                	j	80200586 <printNum+0x2a>
        {
            *p++ = '0' + tmp;
        }
        else if (upcase)
    8020056c:	02088963          	beqz	a7,8020059e <printNum+0x42>
        {
            *p++ = 'A' + tmp - 10;
    80200570:	8ef2                	mv	t4,t3
    80200572:	0373031b          	addiw	t1,t1,55
    80200576:	fe6e0fa3          	sb	t1,-1(t3)
        }
        else
        {
            *p++ = 'a' + tmp - 10;
        }
        u /= base;
    8020057a:	02c5d333          	divu	t1,a1,a2
    } while (u != 0);
    8020057e:	0e05                	addi	t3,t3,1
    80200580:	03f5e563          	bltu	a1,t6,802005aa <printNum+0x4e>
        u /= base;
    80200584:	859a                	mv	a1,t1
        int tmp = u % base;
    80200586:	02c5f333          	remu	t1,a1,a2
        if (tmp <= 9)
    8020058a:	00030e9b          	sext.w	t4,t1
    8020058e:	fddf4fe3          	blt	t5,t4,8020056c <printNum+0x10>
            *p++ = '0' + tmp;
    80200592:	8ef2                	mv	t4,t3
    80200594:	0303031b          	addiw	t1,t1,48
    80200598:	fe6e0fa3          	sb	t1,-1(t3)
    8020059c:	bff9                	j	8020057a <printNum+0x1e>
            *p++ = 'a' + tmp - 10;
    8020059e:	8ef2                	mv	t4,t3
    802005a0:	0573031b          	addiw	t1,t1,87
    802005a4:	fe6e0fa3          	sb	t1,-1(t3)
    802005a8:	bfc9                	j	8020057a <printNum+0x1e>

    if (negFlag)
    802005aa:	c685                	beqz	a3,802005d2 <printNum+0x76>
    {
        *p++ = '-';
    802005ac:	02d00613          	li	a2,45
    802005b0:	00ce8023          	sb	a2,0(t4)
    802005b4:	0e85                	addi	t4,t4,1
    }

    /* figure out actual length and adjust the maximum length */
    actualLength = p - buf;
    802005b6:	40ae8eb3          	sub	t4,t4,a0
    802005ba:	000e859b          	sext.w	a1,t4
    if (length < actualLength)
    802005be:	88ae                	mv	a7,a1
    802005c0:	00e5d363          	bge	a1,a4,802005c6 <printNum+0x6a>
    802005c4:	88ba                	mv	a7,a4
    802005c6:	2881                	sext.w	a7,a7
        length = actualLength;

    /* add padding */
    if (ladjust)
    802005c8:	e78d                	bnez	a5,802005f2 <printNum+0x96>
    {
        padc = ' ';
    }
    if (negFlag && !ladjust && (padc == '0'))
    802005ca:	e2d1                	bnez	a3,8020064e <printNum+0xf2>
            buf[i] = padc;
        buf[length - 1] = '-';
    }
    else
    {
        for (i = actualLength; i < length; i++)
    802005cc:	0315c763          	blt	a1,a7,802005fa <printNum+0x9e>
    802005d0:	a0c1                	j	80200690 <printNum+0x134>
    actualLength = p - buf;
    802005d2:	40ae8eb3          	sub	t4,t4,a0
    802005d6:	000e859b          	sext.w	a1,t4
    if (length < actualLength)
    802005da:	88ae                	mv	a7,a1
    802005dc:	00e5d363          	bge	a1,a4,802005e2 <printNum+0x86>
    802005e0:	88ba                	mv	a7,a4
    802005e2:	2881                	sext.w	a7,a7
    if (ladjust)
    802005e4:	d3fd                	beqz	a5,802005ca <printNum+0x6e>
    if (negFlag && !ladjust && (padc == '0'))
    802005e6:	e691                	bnez	a3,802005f2 <printNum+0x96>
        padc = ' ';
    802005e8:	02000813          	li	a6,32
        for (i = actualLength; i < length; i++)
    802005ec:	0115c763          	blt	a1,a7,802005fa <printNum+0x9e>
    802005f0:	a005                	j	80200610 <printNum+0xb4>
        padc = ' ';
    802005f2:	02000813          	li	a6,32
        for (i = actualLength; i < length; i++)
    802005f6:	0115dd63          	bge	a1,a7,80200610 <printNum+0xb4>
    802005fa:	872e                	mv	a4,a1
            buf[i] = padc;
    802005fc:	00e506b3          	add	a3,a0,a4
    80200600:	01068023          	sb	a6,0(a3)
        for (i = actualLength; i < length; i++)
    80200604:	0705                	addi	a4,a4,1
    80200606:	0007069b          	sext.w	a3,a4
    8020060a:	ff16c9e3          	blt	a3,a7,802005fc <printNum+0xa0>

    /* prepare to reverse the string */
    {
        int begin = 0;
        int end;
        if (ladjust)
    8020060e:	c3c9                	beqz	a5,80200690 <printNum+0x134>
        {
            end = actualLength - 1;
    80200610:	35fd                	addiw	a1,a1,-1
        else
        {
            end = length - 1;
        }

        while (end > begin)
    80200612:	86aa                	mv	a3,a0
    80200614:	00b50733          	add	a4,a0,a1
    80200618:	4601                	li	a2,0
    8020061a:	02b05463          	blez	a1,80200642 <printNum+0xe6>
        {
            char tmp = buf[begin];
    8020061e:	0006c783          	lbu	a5,0(a3)
            buf[begin] = buf[end];
    80200622:	00074803          	lbu	a6,0(a4)
    80200626:	01068023          	sb	a6,0(a3)
            buf[end] = tmp;
    8020062a:	00f70023          	sb	a5,0(a4)
            begin++;
    8020062e:	0016079b          	addiw	a5,a2,1
    80200632:	0007861b          	sext.w	a2,a5
        while (end > begin)
    80200636:	0685                	addi	a3,a3,1
    80200638:	177d                	addi	a4,a4,-1
    8020063a:	40f587bb          	subw	a5,a1,a5
    8020063e:	fef640e3          	blt	a2,a5,8020061e <printNum+0xc2>
            end--;
        }
    }

    /* adjust the string pointer */
    buf[length] = '\0';
    80200642:	9546                	add	a0,a0,a7
    80200644:	00050023          	sb	zero,0(a0)
}
    80200648:	6422                	ld	s0,8(sp)
    8020064a:	0141                	addi	sp,sp,16
    8020064c:	8082                	ret
    if (negFlag && !ladjust && (padc == '0'))
    8020064e:	03000713          	li	a4,48
    80200652:	00e80563          	beq	a6,a4,8020065c <printNum+0x100>
        for (i = actualLength; i < length; i++)
    80200656:	fb15c2e3          	blt	a1,a7,802005fa <printNum+0x9e>
    8020065a:	a81d                	j	80200690 <printNum+0x134>
        for (i = actualLength - 1; i < length - 1; i++)
    8020065c:	fff5871b          	addiw	a4,a1,-1
    80200660:	0315d263          	bge	a1,a7,80200684 <printNum+0x128>
    80200664:	972a                	add	a4,a4,a0
    80200666:	fffec793          	not	a5,t4
    8020066a:	011787bb          	addw	a5,a5,a7
    8020066e:	1782                	slli	a5,a5,0x20
    80200670:	9381                	srli	a5,a5,0x20
    80200672:	95aa                	add	a1,a1,a0
    80200674:	95be                	add	a1,a1,a5
            buf[i] = padc;
    80200676:	03000793          	li	a5,48
    8020067a:	00f70023          	sb	a5,0(a4)
        for (i = actualLength - 1; i < length - 1; i++)
    8020067e:	0705                	addi	a4,a4,1
    80200680:	feb71de3          	bne	a4,a1,8020067a <printNum+0x11e>
        buf[length - 1] = '-';
    80200684:	011507b3          	add	a5,a0,a7
    80200688:	02d00713          	li	a4,45
    8020068c:	fee78fa3          	sb	a4,-1(a5)
            end = length - 1;
    80200690:	fff8859b          	addiw	a1,a7,-1
    80200694:	bfbd                	j	80200612 <printNum+0xb6>

0000000080200696 <print>:
    for (i = 0; fmt[i]; i++) {
    80200696:	00054783          	lbu	a5,0(a0)
    8020069a:	42078763          	beqz	a5,80200ac8 <print+0x432>
static void print(const char *fmt, va_list ap) {
    8020069e:	7151                	addi	sp,sp,-240
    802006a0:	f586                	sd	ra,232(sp)
    802006a2:	f1a2                	sd	s0,224(sp)
    802006a4:	eda6                	sd	s1,216(sp)
    802006a6:	e9ca                	sd	s2,208(sp)
    802006a8:	e5ce                	sd	s3,200(sp)
    802006aa:	e1d2                	sd	s4,192(sp)
    802006ac:	fd56                	sd	s5,184(sp)
    802006ae:	f95a                	sd	s6,176(sp)
    802006b0:	f55e                	sd	s7,168(sp)
    802006b2:	f162                	sd	s8,160(sp)
    802006b4:	ed66                	sd	s9,152(sp)
    802006b6:	e96a                	sd	s10,144(sp)
    802006b8:	e56e                	sd	s11,136(sp)
    802006ba:	1980                	addi	s0,sp,240
    802006bc:	8aaa                	mv	s5,a0
    802006be:	8c2e                	mv	s8,a1
    for (i = 0; fmt[i]; i++) {
    802006c0:	8baa                	mv	s7,a0
    802006c2:	4901                	li	s2,0
        if (fmt[i] != '%'){
    802006c4:	02500b13          	li	s6,37
        if (c == '-') {
    802006c8:	02d00d13          	li	s10,45
            ladjust = 0;
    802006cc:	4481                	li	s1,0
        if (c == '0') {
    802006ce:	03000c93          	li	s9,48
    802006d2:	0000da17          	auipc	s4,0xd
    802006d6:	9d6a0a13          	addi	s4,s4,-1578 # 8020d0a8 <textEnd+0xa8>
    802006da:	0000d997          	auipc	s3,0xd
    802006de:	aa298993          	addi	s3,s3,-1374 # 8020d17c <textEnd+0x17c>
    802006e2:	a01d                	j	80200708 <print+0x72>
                putchar('\r');
    802006e4:	4535                	li	a0,13
    802006e6:	00000097          	auipc	ra,0x0
    802006ea:	c36080e7          	jalr	-970(ra) # 8020031c <putchar>
            putchar(fmt[i]);
    802006ee:	000bc503          	lbu	a0,0(s7)
    802006f2:	00000097          	auipc	ra,0x0
    802006f6:	c2a080e7          	jalr	-982(ra) # 8020031c <putchar>
    for (i = 0; fmt[i]; i++) {
    802006fa:	2905                	addiw	s2,s2,1
    802006fc:	012a8bb3          	add	s7,s5,s2
    80200700:	000bc783          	lbu	a5,0(s7)
    80200704:	3a078363          	beqz	a5,80200aaa <print+0x414>
        if (fmt[i] != '%'){
    80200708:	01678663          	beq	a5,s6,80200714 <print+0x7e>
            if (fmt[i] == '\n') {
    8020070c:	4729                	li	a4,10
    8020070e:	fee790e3          	bne	a5,a4,802006ee <print+0x58>
    80200712:	bfc9                	j	802006e4 <print+0x4e>
        c = fmt[++i];
    80200714:	0019089b          	addiw	a7,s2,1
    80200718:	011a87b3          	add	a5,s5,a7
    8020071c:	0007c503          	lbu	a0,0(a5)
            ladjust = 0;
    80200720:	87a6                	mv	a5,s1
        if (c == '-') {
    80200722:	09a50163          	beq	a0,s10,802007a4 <print+0x10e>
            padc = ' ';
    80200726:	02000813          	li	a6,32
        if (c == '0') {
    8020072a:	09950563          	beq	a0,s9,802007b4 <print+0x11e>
        while (IsDigit(c)) {
    8020072e:	fd05071b          	addiw	a4,a0,-48
    80200732:	46a5                	li	a3,9
    80200734:	08e6e763          	bltu	a3,a4,802007c2 <print+0x12c>
    80200738:	2885                	addiw	a7,a7,1
        width = 0;
    8020073a:	8726                	mv	a4,s1
        while (IsDigit(c)) {
    8020073c:	4625                	li	a2,9
            width = (width << 3) + (width << 1) + c - '0';
    8020073e:	0037159b          	slliw	a1,a4,0x3
    80200742:	0017171b          	slliw	a4,a4,0x1
    80200746:	9db9                	addw	a1,a1,a4
    80200748:	9da9                	addw	a1,a1,a0
    8020074a:	fd05871b          	addiw	a4,a1,-48
            c = fmt[++i];
    8020074e:	0008891b          	sext.w	s2,a7
    80200752:	011a86b3          	add	a3,s5,a7
    80200756:	0006c683          	lbu	a3,0(a3)
    8020075a:	0006851b          	sext.w	a0,a3
        while (IsDigit(c)) {
    8020075e:	0885                	addi	a7,a7,1
    80200760:	fd06869b          	addiw	a3,a3,-48
    80200764:	fcd67de3          	bgeu	a2,a3,8020073e <print+0xa8>
        if (c == '.') {
    80200768:	02e00693          	li	a3,46
    8020076c:	04d50e63          	beq	a0,a3,802007c8 <print+0x132>
        if (c == 'l') {
    80200770:	06c00693          	li	a3,108
    80200774:	08d50a63          	beq	a0,a3,80200808 <print+0x172>
        switch (c) {
    80200778:	30050f63          	beqz	a0,80200a96 <print+0x400>
    8020077c:	fbc5069b          	addiw	a3,a0,-68
    80200780:	03400613          	li	a2,52
    80200784:	30d66c63          	bltu	a2,a3,80200a9c <print+0x406>
    80200788:	fbc5059b          	addiw	a1,a0,-68
    8020078c:	8636                	mv	a2,a3
    8020078e:	03400693          	li	a3,52
    80200792:	30c6e563          	bltu	a3,a2,80200a9c <print+0x406>
    80200796:	1582                	slli	a1,a1,0x20
    80200798:	9181                	srli	a1,a1,0x20
    8020079a:	058a                	slli	a1,a1,0x2
    8020079c:	95d2                	add	a1,a1,s4
    8020079e:	4194                	lw	a3,0(a1)
    802007a0:	96d2                	add	a3,a3,s4
    802007a2:	8682                	jr	a3
            c = fmt[++i];
    802007a4:	0029089b          	addiw	a7,s2,2
    802007a8:	011a87b3          	add	a5,s5,a7
    802007ac:	0007c503          	lbu	a0,0(a5)
            ladjust = 1;
    802007b0:	4785                	li	a5,1
    802007b2:	bf95                	j	80200726 <print+0x90>
            c = fmt[++i];
    802007b4:	2885                	addiw	a7,a7,1
    802007b6:	011a8733          	add	a4,s5,a7
    802007ba:	00074503          	lbu	a0,0(a4)
            padc = '0';
    802007be:	8866                	mv	a6,s9
    802007c0:	b7bd                	j	8020072e <print+0x98>
        while (IsDigit(c)) {
    802007c2:	8946                	mv	s2,a7
        width = 0;
    802007c4:	8726                	mv	a4,s1
    802007c6:	b74d                	j	80200768 <print+0xd2>
            c = fmt[++i];
    802007c8:	0019061b          	addiw	a2,s2,1
    802007cc:	00ca86b3          	add	a3,s5,a2
    802007d0:	0006c583          	lbu	a1,0(a3)
            while (IsDigit(c)) {
    802007d4:	fd05831b          	addiw	t1,a1,-48
    802007d8:	4525                	li	a0,9
    802007da:	0029069b          	addiw	a3,s2,2
    802007de:	48a5                	li	a7,9
    802007e0:	02656063          	bltu	a0,t1,80200800 <print+0x16a>
                c = fmt[++i];
    802007e4:	0006891b          	sext.w	s2,a3
    802007e8:	00da8633          	add	a2,s5,a3
    802007ec:	00064583          	lbu	a1,0(a2)
            while (IsDigit(c)) {
    802007f0:	0685                	addi	a3,a3,1
    802007f2:	fd05861b          	addiw	a2,a1,-48
    802007f6:	fec8f7e3          	bgeu	a7,a2,802007e4 <print+0x14e>
                c = fmt[++i];
    802007fa:	0005851b          	sext.w	a0,a1
    802007fe:	bf8d                	j	80200770 <print+0xda>
            c = fmt[++i];
    80200800:	0005851b          	sext.w	a0,a1
    80200804:	8932                	mv	s2,a2
    80200806:	b7ad                	j	80200770 <print+0xda>
            c = fmt[++i];
    80200808:	2905                	addiw	s2,s2,1
    8020080a:	012a86b3          	add	a3,s5,s2
    8020080e:	0006c503          	lbu	a0,0(a3)
        switch (c) {
    80200812:	28050263          	beqz	a0,80200a96 <print+0x400>
    80200816:	fbc5069b          	addiw	a3,a0,-68
    8020081a:	0ff6f693          	andi	a3,a3,255
    8020081e:	03400613          	li	a2,52
    80200822:	26d66c63          	bltu	a2,a3,80200a9a <print+0x404>
    80200826:	fbc5059b          	addiw	a1,a0,-68
    8020082a:	0ff5f613          	andi	a2,a1,255
    8020082e:	03400693          	li	a3,52
    80200832:	26c6e463          	bltu	a3,a2,80200a9a <print+0x404>
    80200836:	00261593          	slli	a1,a2,0x2
    8020083a:	95ce                	add	a1,a1,s3
    8020083c:	4194                	lw	a3,0(a1)
    8020083e:	96ce                	add	a3,a3,s3
    80200840:	8682                	jr	a3
                c = (char)va_arg(ap, u32);
    80200842:	008c0b93          	addi	s7,s8,8
    80200846:	000c4c03          	lbu	s8,0(s8)
            	printChar(buf, c, width, ladjust);
    8020084a:	86be                	mv	a3,a5
    8020084c:	863a                	mv	a2,a4
    8020084e:	85e2                	mv	a1,s8
    80200850:	f1040513          	addi	a0,s0,-240
    80200854:	00000097          	auipc	ra,0x0
    80200858:	bae080e7          	jalr	-1106(ra) # 80200402 <printChar>
                putchar(c);
    8020085c:	8562                	mv	a0,s8
    8020085e:	00000097          	auipc	ra,0x0
    80200862:	abe080e7          	jalr	-1346(ra) # 8020031c <putchar>
                c = (char)va_arg(ap, u32);
    80200866:	8c5e                	mv	s8,s7
                break;
    80200868:	bd49                	j	802006fa <print+0x64>
                    num = va_arg(ap, i64);
    8020086a:	000c3583          	ld	a1,0(s8)
    8020086e:	0c21                	addi	s8,s8,8
        negFlag = 0;
    80200870:	86a6                	mv	a3,s1
                if (num < 0) {
    80200872:	0205c663          	bltz	a1,8020089e <print+0x208>
	            printNum(buf, num, 10, negFlag, width, ladjust, padc, 0);
    80200876:	88a6                	mv	a7,s1
    80200878:	4629                	li	a2,10
    8020087a:	f1040513          	addi	a0,s0,-240
    8020087e:	00000097          	auipc	ra,0x0
    80200882:	cde080e7          	jalr	-802(ra) # 8020055c <printNum>
    while (*s) {
    80200886:	f1044783          	lbu	a5,-240(s0)
    8020088a:	e60788e3          	beqz	a5,802006fa <print+0x64>
    8020088e:	f1040b93          	addi	s7,s0,-240
        if (*s == '\n') {
    80200892:	4da9                	li	s11,10
    80200894:	a025                	j	802008bc <print+0x226>
                    num = va_arg(ap, i32);
    80200896:	000c2583          	lw	a1,0(s8)
    8020089a:	0c21                	addi	s8,s8,8
    8020089c:	bfd1                	j	80200870 <print+0x1da>
                    num = -num;
    8020089e:	40b005b3          	neg	a1,a1
                    negFlag = 1;
    802008a2:	4685                	li	a3,1
    802008a4:	bfc9                	j	80200876 <print+0x1e0>
        putchar(*s++);
    802008a6:	0b85                	addi	s7,s7,1
    802008a8:	fffbc503          	lbu	a0,-1(s7)
    802008ac:	00000097          	auipc	ra,0x0
    802008b0:	a70080e7          	jalr	-1424(ra) # 8020031c <putchar>
    while (*s) {
    802008b4:	000bc783          	lbu	a5,0(s7)
    802008b8:	e40781e3          	beqz	a5,802006fa <print+0x64>
        if (*s == '\n') {
    802008bc:	ffb795e3          	bne	a5,s11,802008a6 <print+0x210>
            putchar('\r');
    802008c0:	4535                	li	a0,13
    802008c2:	00000097          	auipc	ra,0x0
    802008c6:	a5a080e7          	jalr	-1446(ra) # 8020031c <putchar>
    802008ca:	bff1                	j	802008a6 <print+0x210>
        switch (c) {
    802008cc:	4685                	li	a3,1
                if (longFlag) {
    802008ce:	c69d                	beqz	a3,802008fc <print+0x266>
                    num = va_arg(ap, i64);
    802008d0:	000c3583          	ld	a1,0(s8)
    802008d4:	0c21                	addi	s8,s8,8
                printNum(buf, num, 8, 0, width, ladjust, padc, 0);
    802008d6:	88a6                	mv	a7,s1
    802008d8:	86a6                	mv	a3,s1
    802008da:	4621                	li	a2,8
    802008dc:	f1040513          	addi	a0,s0,-240
    802008e0:	00000097          	auipc	ra,0x0
    802008e4:	c7c080e7          	jalr	-900(ra) # 8020055c <printNum>
    while (*s) {
    802008e8:	f1044783          	lbu	a5,-240(s0)
    802008ec:	e00787e3          	beqz	a5,802006fa <print+0x64>
    802008f0:	f1040b93          	addi	s7,s0,-240
        if (*s == '\n') {
    802008f4:	4da9                	li	s11,10
    802008f6:	a015                	j	8020091a <print+0x284>
        switch (c) {
    802008f8:	86a6                	mv	a3,s1
    802008fa:	bfd1                	j	802008ce <print+0x238>
                    num = va_arg(ap, i32);
    802008fc:	000c2583          	lw	a1,0(s8)
    80200900:	0c21                	addi	s8,s8,8
    80200902:	bfd1                	j	802008d6 <print+0x240>
        putchar(*s++);
    80200904:	0b85                	addi	s7,s7,1
    80200906:	fffbc503          	lbu	a0,-1(s7)
    8020090a:	00000097          	auipc	ra,0x0
    8020090e:	a12080e7          	jalr	-1518(ra) # 8020031c <putchar>
    while (*s) {
    80200912:	000bc783          	lbu	a5,0(s7)
    80200916:	de0782e3          	beqz	a5,802006fa <print+0x64>
        if (*s == '\n') {
    8020091a:	ffb795e3          	bne	a5,s11,80200904 <print+0x26e>
            putchar('\r');
    8020091e:	4535                	li	a0,13
    80200920:	00000097          	auipc	ra,0x0
    80200924:	9fc080e7          	jalr	-1540(ra) # 8020031c <putchar>
    80200928:	bff1                	j	80200904 <print+0x26e>
        switch (c) {
    8020092a:	4685                	li	a3,1
                if (longFlag) {
    8020092c:	c69d                	beqz	a3,8020095a <print+0x2c4>
                    num = va_arg(ap, i64);
    8020092e:	000c3583          	ld	a1,0(s8)
    80200932:	0c21                	addi	s8,s8,8
	            printNum(buf, num, 10, 0, width, ladjust, padc, 0);
    80200934:	88a6                	mv	a7,s1
    80200936:	86a6                	mv	a3,s1
    80200938:	4629                	li	a2,10
    8020093a:	f1040513          	addi	a0,s0,-240
    8020093e:	00000097          	auipc	ra,0x0
    80200942:	c1e080e7          	jalr	-994(ra) # 8020055c <printNum>
    while (*s) {
    80200946:	f1044783          	lbu	a5,-240(s0)
    8020094a:	da0788e3          	beqz	a5,802006fa <print+0x64>
    8020094e:	f1040b93          	addi	s7,s0,-240
        if (*s == '\n') {
    80200952:	4da9                	li	s11,10
    80200954:	a015                	j	80200978 <print+0x2e2>
        switch (c) {
    80200956:	86a6                	mv	a3,s1
    80200958:	bfd1                	j	8020092c <print+0x296>
                    num = va_arg(ap, i32);
    8020095a:	000c2583          	lw	a1,0(s8)
    8020095e:	0c21                	addi	s8,s8,8
    80200960:	bfd1                	j	80200934 <print+0x29e>
        putchar(*s++);
    80200962:	0b85                	addi	s7,s7,1
    80200964:	fffbc503          	lbu	a0,-1(s7)
    80200968:	00000097          	auipc	ra,0x0
    8020096c:	9b4080e7          	jalr	-1612(ra) # 8020031c <putchar>
    while (*s) {
    80200970:	000bc783          	lbu	a5,0(s7)
    80200974:	d80783e3          	beqz	a5,802006fa <print+0x64>
        if (*s == '\n') {
    80200978:	ffb795e3          	bne	a5,s11,80200962 <print+0x2cc>
            putchar('\r');
    8020097c:	4535                	li	a0,13
    8020097e:	00000097          	auipc	ra,0x0
    80200982:	99e080e7          	jalr	-1634(ra) # 8020031c <putchar>
    80200986:	bff1                	j	80200962 <print+0x2cc>
        switch (c) {
    80200988:	4685                	li	a3,1
                if (longFlag) {
    8020098a:	c69d                	beqz	a3,802009b8 <print+0x322>
                    num = va_arg(ap, i64);
    8020098c:	000c3583          	ld	a1,0(s8)
    80200990:	0c21                	addi	s8,s8,8
                printNum(buf, num, 16, 0, width, ladjust, padc, 0);
    80200992:	88a6                	mv	a7,s1
    80200994:	86a6                	mv	a3,s1
    80200996:	4641                	li	a2,16
    80200998:	f1040513          	addi	a0,s0,-240
    8020099c:	00000097          	auipc	ra,0x0
    802009a0:	bc0080e7          	jalr	-1088(ra) # 8020055c <printNum>
    while (*s) {
    802009a4:	f1044783          	lbu	a5,-240(s0)
    802009a8:	d40789e3          	beqz	a5,802006fa <print+0x64>
    802009ac:	f1040b93          	addi	s7,s0,-240
        if (*s == '\n') {
    802009b0:	4da9                	li	s11,10
    802009b2:	a015                	j	802009d6 <print+0x340>
        switch (c) {
    802009b4:	86a6                	mv	a3,s1
    802009b6:	bfd1                	j	8020098a <print+0x2f4>
                    num = va_arg(ap, i32);
    802009b8:	000c2583          	lw	a1,0(s8)
    802009bc:	0c21                	addi	s8,s8,8
    802009be:	bfd1                	j	80200992 <print+0x2fc>
        putchar(*s++);
    802009c0:	0b85                	addi	s7,s7,1
    802009c2:	fffbc503          	lbu	a0,-1(s7)
    802009c6:	00000097          	auipc	ra,0x0
    802009ca:	956080e7          	jalr	-1706(ra) # 8020031c <putchar>
    while (*s) {
    802009ce:	000bc783          	lbu	a5,0(s7)
    802009d2:	d20784e3          	beqz	a5,802006fa <print+0x64>
        if (*s == '\n') {
    802009d6:	ffb795e3          	bne	a5,s11,802009c0 <print+0x32a>
            putchar('\r');
    802009da:	4535                	li	a0,13
    802009dc:	00000097          	auipc	ra,0x0
    802009e0:	940080e7          	jalr	-1728(ra) # 8020031c <putchar>
    802009e4:	bff1                	j	802009c0 <print+0x32a>
                    num = va_arg(ap, i64);
    802009e6:	000c3583          	ld	a1,0(s8)
    802009ea:	0c21                	addi	s8,s8,8
                printNum(buf, num, 16, 0, width, ladjust, padc, 1);
    802009ec:	4885                	li	a7,1
    802009ee:	86a6                	mv	a3,s1
    802009f0:	4641                	li	a2,16
    802009f2:	f1040513          	addi	a0,s0,-240
    802009f6:	00000097          	auipc	ra,0x0
    802009fa:	b66080e7          	jalr	-1178(ra) # 8020055c <printNum>
    while (*s) {
    802009fe:	f1044783          	lbu	a5,-240(s0)
    80200a02:	ce078ce3          	beqz	a5,802006fa <print+0x64>
    80200a06:	f1040b93          	addi	s7,s0,-240
        if (*s == '\n') {
    80200a0a:	4da9                	li	s11,10
    80200a0c:	a005                	j	80200a2c <print+0x396>
                    num = va_arg(ap, i32);
    80200a0e:	000c2583          	lw	a1,0(s8)
    80200a12:	0c21                	addi	s8,s8,8
    80200a14:	bfe1                	j	802009ec <print+0x356>
        putchar(*s++);
    80200a16:	0b85                	addi	s7,s7,1
    80200a18:	fffbc503          	lbu	a0,-1(s7)
    80200a1c:	00000097          	auipc	ra,0x0
    80200a20:	900080e7          	jalr	-1792(ra) # 8020031c <putchar>
    while (*s) {
    80200a24:	000bc783          	lbu	a5,0(s7)
    80200a28:	cc0789e3          	beqz	a5,802006fa <print+0x64>
        if (*s == '\n') {
    80200a2c:	ffb795e3          	bne	a5,s11,80200a16 <print+0x380>
            putchar('\r');
    80200a30:	4535                	li	a0,13
    80200a32:	00000097          	auipc	ra,0x0
    80200a36:	8ea080e7          	jalr	-1814(ra) # 8020031c <putchar>
    80200a3a:	bff1                	j	80200a16 <print+0x380>
                if ((s = va_arg(ap, char*)) == 0) {
    80200a3c:	008c0d93          	addi	s11,s8,8
    80200a40:	000c3583          	ld	a1,0(s8)
    80200a44:	c185                	beqz	a1,80200a64 <print+0x3ce>
                printString(buf, s, width, ladjust);
    80200a46:	86be                	mv	a3,a5
    80200a48:	863a                	mv	a2,a4
    80200a4a:	f1040513          	addi	a0,s0,-240
    80200a4e:	00000097          	auipc	ra,0x0
    80200a52:	a22080e7          	jalr	-1502(ra) # 80200470 <printString>
    while (*s) {
    80200a56:	f1044783          	lbu	a5,-240(s0)
    80200a5a:	c7b1                	beqz	a5,80200aa6 <print+0x410>
    80200a5c:	f1040b93          	addi	s7,s0,-240
        if (*s == '\n') {
    80200a60:	4c29                	li	s8,10
    80200a62:	a005                	j	80200a82 <print+0x3ec>
                    s = "(null)";
    80200a64:	0000c597          	auipc	a1,0xc
    80200a68:	60458593          	addi	a1,a1,1540 # 8020d068 <textEnd+0x68>
    80200a6c:	bfe9                	j	80200a46 <print+0x3b0>
        putchar(*s++);
    80200a6e:	0b85                	addi	s7,s7,1
    80200a70:	fffbc503          	lbu	a0,-1(s7)
    80200a74:	00000097          	auipc	ra,0x0
    80200a78:	8a8080e7          	jalr	-1880(ra) # 8020031c <putchar>
    while (*s) {
    80200a7c:	000bc783          	lbu	a5,0(s7)
    80200a80:	cb89                	beqz	a5,80200a92 <print+0x3fc>
        if (*s == '\n') {
    80200a82:	ff8796e3          	bne	a5,s8,80200a6e <print+0x3d8>
            putchar('\r');
    80200a86:	4535                	li	a0,13
    80200a88:	00000097          	auipc	ra,0x0
    80200a8c:	894080e7          	jalr	-1900(ra) # 8020031c <putchar>
    80200a90:	bff9                	j	80200a6e <print+0x3d8>
                if ((s = va_arg(ap, char*)) == 0) {
    80200a92:	8c6e                	mv	s8,s11
    80200a94:	b19d                	j	802006fa <print+0x64>
                i--;
    80200a96:	397d                	addiw	s2,s2,-1
                break;
    80200a98:	b18d                	j	802006fa <print+0x64>
            c = fmt[++i];
    80200a9a:	2501                	sext.w	a0,a0
                putchar(c);
    80200a9c:	00000097          	auipc	ra,0x0
    80200aa0:	880080e7          	jalr	-1920(ra) # 8020031c <putchar>
                break;
    80200aa4:	b999                	j	802006fa <print+0x64>
                if ((s = va_arg(ap, char*)) == 0) {
    80200aa6:	8c6e                	mv	s8,s11
    80200aa8:	b989                	j	802006fa <print+0x64>
}
    80200aaa:	70ae                	ld	ra,232(sp)
    80200aac:	740e                	ld	s0,224(sp)
    80200aae:	64ee                	ld	s1,216(sp)
    80200ab0:	694e                	ld	s2,208(sp)
    80200ab2:	69ae                	ld	s3,200(sp)
    80200ab4:	6a0e                	ld	s4,192(sp)
    80200ab6:	7aea                	ld	s5,184(sp)
    80200ab8:	7b4a                	ld	s6,176(sp)
    80200aba:	7baa                	ld	s7,168(sp)
    80200abc:	7c0a                	ld	s8,160(sp)
    80200abe:	6cea                	ld	s9,152(sp)
    80200ac0:	6d4a                	ld	s10,144(sp)
    80200ac2:	6daa                	ld	s11,136(sp)
    80200ac4:	616d                	addi	sp,sp,240
    80200ac6:	8082                	ret
    80200ac8:	8082                	ret

0000000080200aca <printf>:
void printf(const char *fmt, ...) {
    80200aca:	7159                	addi	sp,sp,-112
    80200acc:	f406                	sd	ra,40(sp)
    80200ace:	f022                	sd	s0,32(sp)
    80200ad0:	ec26                	sd	s1,24(sp)
    80200ad2:	e84a                	sd	s2,16(sp)
    80200ad4:	1800                	addi	s0,sp,48
    80200ad6:	84aa                	mv	s1,a0
    80200ad8:	e40c                	sd	a1,8(s0)
    80200ada:	e810                	sd	a2,16(s0)
    80200adc:	ec14                	sd	a3,24(s0)
    80200ade:	f018                	sd	a4,32(s0)
    80200ae0:	f41c                	sd	a5,40(s0)
    80200ae2:	03043823          	sd	a6,48(s0)
    80200ae6:	03143c23          	sd	a7,56(s0)
    acquireLock(&printLock);
    80200aea:	001e1917          	auipc	s2,0x1e1
    80200aee:	57690913          	addi	s2,s2,1398 # 803e2060 <printLock>
    80200af2:	854a                	mv	a0,s2
    80200af4:	00005097          	auipc	ra,0x5
    80200af8:	670080e7          	jalr	1648(ra) # 80206164 <acquireLock>
    va_start(ap, fmt);
    80200afc:	00840593          	addi	a1,s0,8
    80200b00:	fcb43c23          	sd	a1,-40(s0)
    print(fmt, ap);
    80200b04:	8526                	mv	a0,s1
    80200b06:	00000097          	auipc	ra,0x0
    80200b0a:	b90080e7          	jalr	-1136(ra) # 80200696 <print>
    releaseLock(&printLock);
    80200b0e:	854a                	mv	a0,s2
    80200b10:	00005097          	auipc	ra,0x5
    80200b14:	6d0080e7          	jalr	1744(ra) # 802061e0 <releaseLock>
}
    80200b18:	70a2                	ld	ra,40(sp)
    80200b1a:	7402                	ld	s0,32(sp)
    80200b1c:	64e2                	ld	s1,24(sp)
    80200b1e:	6942                	ld	s2,16(sp)
    80200b20:	6165                	addi	sp,sp,112
    80200b22:	8082                	ret

0000000080200b24 <panicPrintf>:

void panicPrintf(const char *fmt, ...) {
    80200b24:	711d                	addi	sp,sp,-96
    80200b26:	ec06                	sd	ra,24(sp)
    80200b28:	e822                	sd	s0,16(sp)
    80200b2a:	1000                	addi	s0,sp,32
    80200b2c:	e40c                	sd	a1,8(s0)
    80200b2e:	e810                	sd	a2,16(s0)
    80200b30:	ec14                	sd	a3,24(s0)
    80200b32:	f018                	sd	a4,32(s0)
    80200b34:	f41c                	sd	a5,40(s0)
    80200b36:	03043823          	sd	a6,48(s0)
    80200b3a:	03143c23          	sd	a7,56(s0)
    va_list ap;
    va_start(ap, fmt);
    80200b3e:	00840593          	addi	a1,s0,8
    80200b42:	feb43423          	sd	a1,-24(s0)
    print(fmt, ap);
    80200b46:	00000097          	auipc	ra,0x0
    80200b4a:	b50080e7          	jalr	-1200(ra) # 80200696 <print>
    va_end(ap);
}
    80200b4e:	60e2                	ld	ra,24(sp)
    80200b50:	6442                	ld	s0,16(sp)
    80200b52:	6125                	addi	sp,sp,96
    80200b54:	8082                	ret

0000000080200b56 <_panic_>:

void _panic_(const char *file, int line, const char *func,const char *fmt, ...) {
    80200b56:	7159                	addi	sp,sp,-112
    80200b58:	e486                	sd	ra,72(sp)
    80200b5a:	e0a2                	sd	s0,64(sp)
    80200b5c:	fc26                	sd	s1,56(sp)
    80200b5e:	f84a                	sd	s2,48(sp)
    80200b60:	f44e                	sd	s3,40(sp)
    80200b62:	f052                	sd	s4,32(sp)
    80200b64:	ec56                	sd	s5,24(sp)
    80200b66:	0880                	addi	s0,sp,80
    80200b68:	89aa                	mv	s3,a0
    80200b6a:	8a2e                	mv	s4,a1
    80200b6c:	8ab2                	mv	s5,a2
    80200b6e:	8936                	mv	s2,a3
    80200b70:	e018                	sd	a4,0(s0)
    80200b72:	e41c                	sd	a5,8(s0)
    80200b74:	01043823          	sd	a6,16(s0)
    80200b78:	01143c23          	sd	a7,24(s0)
    acquireLock(&printLock);
    80200b7c:	001e1497          	auipc	s1,0x1e1
    80200b80:	4e448493          	addi	s1,s1,1252 # 803e2060 <printLock>
    80200b84:	8526                	mv	a0,s1
    80200b86:	00005097          	auipc	ra,0x5
    80200b8a:	5de080e7          	jalr	1502(ra) # 80206164 <acquireLock>
#define HART_TOTAL_NUMBER 5

// which hart (core) is this?
static inline u64 r_hartid() {
    u64 x;
    asm volatile("mv %0, tp" : "=r" (x) );
    80200b8e:	8592                	mv	a1,tp
    panicPrintf("hartId %d panic at %s: %d in %s(): ", r_hartid(), file, line, func);
    80200b90:	8756                	mv	a4,s5
    80200b92:	86d2                	mv	a3,s4
    80200b94:	864e                	mv	a2,s3
    80200b96:	0000c517          	auipc	a0,0xc
    80200b9a:	4da50513          	addi	a0,a0,1242 # 8020d070 <textEnd+0x70>
    80200b9e:	00000097          	auipc	ra,0x0
    80200ba2:	f86080e7          	jalr	-122(ra) # 80200b24 <panicPrintf>
    va_list ap;
    va_start(ap, fmt);
    80200ba6:	fa843c23          	sd	s0,-72(s0)
    print(fmt, ap);
    80200baa:	85a2                	mv	a1,s0
    80200bac:	854a                	mv	a0,s2
    80200bae:	00000097          	auipc	ra,0x0
    80200bb2:	ae8080e7          	jalr	-1304(ra) # 80200696 <print>
    va_end(ap);
    putchar('\n');
    80200bb6:	4529                	li	a0,10
    80200bb8:	fffff097          	auipc	ra,0xfffff
    80200bbc:	764080e7          	jalr	1892(ra) # 8020031c <putchar>
    releaseLock(&printLock);
    80200bc0:	8526                	mv	a0,s1
    80200bc2:	00005097          	auipc	ra,0x5
    80200bc6:	61e080e7          	jalr	1566(ra) # 802061e0 <releaseLock>
    //timerTick();
    //w_sstatus(r_sstatus() | SSTATUS_SIE);
    while (true);
    80200bca:	a001                	j	80200bca <_panic_+0x74>

0000000080200bcc <_assert_>:
}

void _assert_(const char* file, int line, const char *func, int statement) {
    if (!statement) {
    80200bcc:	c291                	beqz	a3,80200bd0 <_assert_+0x4>
    80200bce:	8082                	ret
void _assert_(const char* file, int line, const char *func, int statement) {
    80200bd0:	1141                	addi	sp,sp,-16
    80200bd2:	e406                	sd	ra,8(sp)
    80200bd4:	e022                	sd	s0,0(sp)
    80200bd6:	0800                	addi	s0,sp,16
        _panic_(file, line, func, "assert failed\n");
    80200bd8:	0000c697          	auipc	a3,0xc
    80200bdc:	4c068693          	addi	a3,a3,1216 # 8020d098 <textEnd+0x98>
    80200be0:	00000097          	auipc	ra,0x0
    80200be4:	f76080e7          	jalr	-138(ra) # 80200b56 <_panic_>

0000000080200be8 <sd_cmd>:
{
	return spi_xfer(0xFF);
}

static u8 sd_cmd(u8 cmd, u32 arg, u8 crc)
{
    80200be8:	1101                	addi	sp,sp,-32
    80200bea:	ec06                	sd	ra,24(sp)
    80200bec:	e822                	sd	s0,16(sp)
    80200bee:	e426                	sd	s1,8(sp)
    80200bf0:	1000                	addi	s0,sp,32
	unsigned long n;
	u8 r;

	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_HOLD;
    80200bf2:	100507b7          	lui	a5,0x10050
    80200bf6:	4709                	li	a4,2
    80200bf8:	cf98                	sw	a4,24(a5)
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200bfa:	0ff00713          	li	a4,255
    80200bfe:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c00:	10050737          	lui	a4,0x10050
    80200c04:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c06:	02079693          	slli	a3,a5,0x20
    80200c0a:	fe06cde3          	bltz	a3,80200c04 <sd_cmd+0x1c>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c0e:	2501                	sext.w	a0,a0
    80200c10:	100507b7          	lui	a5,0x10050
    80200c14:	c7a8                	sw	a0,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c16:	10050737          	lui	a4,0x10050
    80200c1a:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c1c:	02079693          	slli	a3,a5,0x20
    80200c20:	fe06cde3          	bltz	a3,80200c1a <sd_cmd+0x32>
	sd_dummy();
	spi_xfer(cmd);
	spi_xfer(arg >> 24);
    80200c24:	0185d79b          	srliw	a5,a1,0x18
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c28:	10050737          	lui	a4,0x10050
    80200c2c:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c2e:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c30:	02079693          	slli	a3,a5,0x20
    80200c34:	fe06cde3          	bltz	a3,80200c2e <sd_cmd+0x46>
	spi_xfer(arg >> 16);
    80200c38:	0105d79b          	srliw	a5,a1,0x10
    80200c3c:	0ff7f793          	andi	a5,a5,255
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c40:	10050737          	lui	a4,0x10050
    80200c44:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c46:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c48:	02079693          	slli	a3,a5,0x20
    80200c4c:	fe06cde3          	bltz	a3,80200c46 <sd_cmd+0x5e>
	spi_xfer(arg >> 8);
    80200c50:	0085d79b          	srliw	a5,a1,0x8
    80200c54:	0ff7f793          	andi	a5,a5,255
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c58:	10050737          	lui	a4,0x10050
    80200c5c:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c5e:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c60:	02079693          	slli	a3,a5,0x20
    80200c64:	fe06cde3          	bltz	a3,80200c5e <sd_cmd+0x76>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c68:	0ff5f593          	andi	a1,a1,255
    80200c6c:	100507b7          	lui	a5,0x10050
    80200c70:	c7ac                	sw	a1,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c72:	10050737          	lui	a4,0x10050
    80200c76:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c78:	02079693          	slli	a3,a5,0x20
    80200c7c:	fe06cde3          	bltz	a3,80200c76 <sd_cmd+0x8e>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c80:	0006079b          	sext.w	a5,a2
    80200c84:	10050737          	lui	a4,0x10050
    80200c88:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c8a:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c8c:	02079693          	slli	a3,a5,0x20
    80200c90:	fe06cde3          	bltz	a3,80200c8a <sd_cmd+0xa2>
    80200c94:	3e800693          	li	a3,1000
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c98:	10050737          	lui	a4,0x10050
    80200c9c:	04870593          	addi	a1,a4,72 # 10050048 <_start-0x701affb8>
    80200ca0:	0ff00613          	li	a2,255
    80200ca4:	c190                	sw	a2,0(a1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200ca6:	477c                	lw	a5,76(a4)
    80200ca8:	0007849b          	sext.w	s1,a5
	} while (r < 0);
    80200cac:	02079513          	slli	a0,a5,0x20
    80200cb0:	fe054be3          	bltz	a0,80200ca6 <sd_cmd+0xbe>
	spi_xfer(crc);

	n = 1000;
	do {
		r = sd_dummy();
		if (!(r & 0x80)) {
    80200cb4:	0184979b          	slliw	a5,s1,0x18
    80200cb8:	4187d79b          	sraiw	a5,a5,0x18
    80200cbc:	0007dc63          	bgez	a5,80200cd4 <sd_cmd+0xec>
			//printf("sd:cmd: %x\r\n", r);
			goto done;
		}
	} while (--n > 0);
    80200cc0:	16fd                	addi	a3,a3,-1
    80200cc2:	f2ed                	bnez	a3,80200ca4 <sd_cmd+0xbc>
	printf("sd_cmd: timeout\n");
    80200cc4:	0000c517          	auipc	a0,0xc
    80200cc8:	58c50513          	addi	a0,a0,1420 # 8020d250 <textEnd+0x250>
    80200ccc:	00000097          	auipc	ra,0x0
    80200cd0:	dfe080e7          	jalr	-514(ra) # 80200aca <printf>
done:
	return (r & 0xFF);
}
    80200cd4:	0ff4f513          	andi	a0,s1,255
    80200cd8:	60e2                	ld	ra,24(sp)
    80200cda:	6442                	ld	s0,16(sp)
    80200cdc:	64a2                	ld	s1,8(sp)
    80200cde:	6105                	addi	sp,sp,32
    80200ce0:	8082                	ret

0000000080200ce2 <sdRead>:
#define SPIN_INDEX(i)	(((i) >> SPIN_SHIFT) & 0x3)

//static const char spinner[] = { '-', '/', '|', '\\' };


int sdRead(u8 *buf, u64 startSector, u32 sectorNumber) {
    80200ce2:	711d                	addi	sp,sp,-96
    80200ce4:	ec86                	sd	ra,88(sp)
    80200ce6:	e8a2                	sd	s0,80(sp)
    80200ce8:	e4a6                	sd	s1,72(sp)
    80200cea:	e0ca                	sd	s2,64(sp)
    80200cec:	fc4e                	sd	s3,56(sp)
    80200cee:	f852                	sd	s4,48(sp)
    80200cf0:	f456                	sd	s5,40(sp)
    80200cf2:	f05a                	sd	s6,32(sp)
    80200cf4:	ec5e                	sd	s7,24(sp)
    80200cf6:	e862                	sd	s8,16(sp)
    80200cf8:	e466                	sd	s9,8(sp)
    80200cfa:	e06a                	sd	s10,0(sp)
    80200cfc:	1080                	addi	s0,sp,96
    80200cfe:	8d2a                	mv	s10,a0
    80200d00:	8cb2                	mv	s9,a2
	volatile u8 *p = (void *)buf;
	int rc = 0;
	int timeout;
	u8 x;
	#ifdef QEMU
	if (sd_cmd(0x52, startSector * 512, 0xE1) != 0x00) {
    80200d02:	00959c1b          	slliw	s8,a1,0x9
	int readTimes = 0;
    80200d06:	4981                	li	s3,0
    80200d08:	6909                	lui	s2,0x2
    80200d0a:	70f90b93          	addi	s7,s2,1807 # 270f <_start-0x801fd8f1>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200d0e:	0ff00a13          	li	s4,255
    80200d12:	84d2                	mv	s1,s4
	crc ^= (crc & 0xff) << 5;
    80200d14:	1901                	addi	s2,s2,-32
	int readTimes = 0;
    80200d16:	8b5e                	mv	s6,s7
    80200d18:	a23d                	j	80200e46 <sdRead+0x164>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200d1a:	100507b7          	lui	a5,0x10050
    80200d1e:	0ff00713          	li	a4,255
    80200d22:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200d24:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200d26:	02071693          	slli	a3,a4,0x20
    80200d2a:	fe06cde3          	bltz	a3,80200d24 <sdRead+0x42>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200d2e:	100507b7          	lui	a5,0x10050
    80200d32:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	#else
	if (sd_cmd(0x52, startSector, 0xE1) != 0x00) {
	#endif
		sd_cmd_end();
		panic("[SD Read]Read Error, retry times %x\n", readTimes);
    80200d36:	874e                	mv	a4,s3
    80200d38:	0000c697          	auipc	a3,0xc
    80200d3c:	53068693          	addi	a3,a3,1328 # 8020d268 <textEnd+0x268>
    80200d40:	0000d617          	auipc	a2,0xd
    80200d44:	78060613          	addi	a2,a2,1920 # 8020e4c0 <__func__.1629>
    80200d48:	0bc00593          	li	a1,188
    80200d4c:	0000c517          	auipc	a0,0xc
    80200d50:	54450513          	addi	a0,a0,1348 # 8020d290 <textEnd+0x290>
    80200d54:	00000097          	auipc	ra,0x0
    80200d58:	e02080e7          	jalr	-510(ra) # 80200b56 <_panic_>
    80200d5c:	8746                	mv	a4,a7
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200d5e:	04860513          	addi	a0,a2,72
    80200d62:	a011                	j	80200d66 <sdRead+0x84>
			goto retry;
		}

		do {
			u8 x = sd_dummy();
			*p++ = x;
    80200d64:	8e1a                	mv	t3,t1
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200d66:	c104                	sw	s1,0(a0)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200d68:	467c                	lw	a5,76(a2)
    80200d6a:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    80200d6e:	02079313          	slli	t1,a5,0x20
    80200d72:	fe034be3          	bltz	t1,80200d68 <sdRead+0x86>
	return (r & 0xFF);
    80200d76:	0ff6f693          	andi	a3,a3,255
			*p++ = x;
    80200d7a:	001e0313          	addi	t1,t3,1
    80200d7e:	00de0023          	sb	a3,0(t3)
	crc = (u8)(crc >> 8) | (crc << 8);
    80200d82:	0087579b          	srliw	a5,a4,0x8
    80200d86:	0087171b          	slliw	a4,a4,0x8
    80200d8a:	8f5d                	or	a4,a4,a5
    80200d8c:	1742                	slli	a4,a4,0x30
    80200d8e:	9341                	srli	a4,a4,0x30
	crc ^= data;
    80200d90:	8eb9                	xor	a3,a3,a4
	crc ^= (u8)(crc >> 4) & 0xf;
    80200d92:	0046d71b          	srliw	a4,a3,0x4
    80200d96:	8b3d                	andi	a4,a4,15
    80200d98:	8f35                	xor	a4,a4,a3
	crc ^= crc << 12;
    80200d9a:	00c7169b          	slliw	a3,a4,0xc
    80200d9e:	8f35                	xor	a4,a4,a3
	crc ^= (crc & 0xff) << 5;
    80200da0:	0107179b          	slliw	a5,a4,0x10
    80200da4:	0107d79b          	srliw	a5,a5,0x10
    80200da8:	0057979b          	slliw	a5,a5,0x5
    80200dac:	0127f7b3          	and	a5,a5,s2
    80200db0:	8f3d                	xor	a4,a4,a5
    80200db2:	1742                	slli	a4,a4,0x30
    80200db4:	9341                	srli	a4,a4,0x30
			crc = crc16_round(crc, x);
		} while (--n > 0);
    80200db6:	fab317e3          	bne	t1,a1,80200d64 <sdRead+0x82>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200dba:	05462423          	sw	s4,72(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200dbe:	467c                	lw	a5,76(a2)
    80200dc0:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    80200dc4:	02079513          	slli	a0,a5,0x20
    80200dc8:	fe054be3          	bltz	a0,80200dbe <sdRead+0xdc>

		crc_exp = ((u16)sd_dummy() << 8);
    80200dcc:	0ff6f693          	andi	a3,a3,255
    80200dd0:	0086969b          	slliw	a3,a3,0x8
    80200dd4:	16c2                	slli	a3,a3,0x30
    80200dd6:	92c1                	srli	a3,a3,0x30
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200dd8:	05462423          	sw	s4,72(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200ddc:	467c                	lw	a5,76(a2)
    80200dde:	0007851b          	sext.w	a0,a5
	} while (r < 0);
    80200de2:	02079313          	slli	t1,a5,0x20
    80200de6:	fe034be3          	bltz	t1,80200ddc <sdRead+0xfa>
		crc_exp |= sd_dummy();
    80200dea:	0ff57513          	andi	a0,a0,255

		if (crc != crc_exp) {
    80200dee:	8ec9                	or	a3,a3,a0
    80200df0:	08e69063          	bne	a3,a4,80200e70 <sdRead+0x18e>
			printf("\b- CRC mismatch ");
			rc = 1;
			break;
		}
	} while (--tot > 0);
    80200df4:	3afd                	addiw	s5,s5,-1
    80200df6:	20058593          	addi	a1,a1,512
    80200dfa:	0d505263          	blez	s5,80200ebe <sdRead+0x1dc>
    80200dfe:	e0058e13          	addi	t3,a1,-512
	int readTimes = 0;
    80200e02:	86da                	mv	a3,s6
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200e04:	04860513          	addi	a0,a2,72
    80200e08:	c104                	sw	s1,0(a0)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200e0a:	467c                	lw	a5,76(a2)
    80200e0c:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    80200e10:	02079313          	slli	t1,a5,0x20
    80200e14:	fe034be3          	bltz	t1,80200e0a <sdRead+0x128>
			if (x == 0xFE)
    80200e18:	0ff77713          	andi	a4,a4,255
    80200e1c:	f50700e3          	beq	a4,a6,80200d5c <sdRead+0x7a>
		while (--timeout) {
    80200e20:	36fd                	addiw	a3,a3,-1
    80200e22:	f2fd                	bnez	a3,80200e08 <sdRead+0x126>
	// printf("\nread end\n");
	// printf("[SD Read]Finish\n");
	return rc;

retry:
	readTimes++;
    80200e24:	2985                	addiw	s3,s3,1
	if (readTimes > 10) {
    80200e26:	47ad                	li	a5,11
    80200e28:	08f98d63          	beq	s3,a5,80200ec2 <sdRead+0x1e0>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200e2c:	100507b7          	lui	a5,0x10050
    80200e30:	0547a423          	sw	s4,72(a5) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    80200e34:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200e36:	02071693          	slli	a3,a4,0x20
    80200e3a:	fe06cde3          	bltz	a3,80200e34 <sdRead+0x152>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200e3e:	100507b7          	lui	a5,0x10050
    80200e42:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	tot = sectorNumber;
    80200e46:	000c8a9b          	sext.w	s5,s9
	if (sd_cmd(0x52, startSector * 512, 0xE1) != 0x00) {
    80200e4a:	0e100613          	li	a2,225
    80200e4e:	85e2                	mv	a1,s8
    80200e50:	05200513          	li	a0,82
    80200e54:	00000097          	auipc	ra,0x0
    80200e58:	d94080e7          	jalr	-620(ra) # 80200be8 <sd_cmd>
    80200e5c:	ea051fe3          	bnez	a0,80200d1a <sdRead+0x38>
    80200e60:	200d0593          	addi	a1,s10,512
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200e64:	10050637          	lui	a2,0x10050
			if (x == 0xFE)
    80200e68:	0fe00813          	li	a6,254
    80200e6c:	4881                	li	a7,0
    80200e6e:	bf41                	j	80200dfe <sdRead+0x11c>
			printf("\b- CRC mismatch ");
    80200e70:	0000c517          	auipc	a0,0xc
    80200e74:	42850513          	addi	a0,a0,1064 # 8020d298 <textEnd+0x298>
    80200e78:	00000097          	auipc	ra,0x0
    80200e7c:	c52080e7          	jalr	-942(ra) # 80200aca <printf>
			rc = 1;
    80200e80:	4a85                	li	s5,1
	sd_cmd(0x4C, 0, 0x01);
    80200e82:	4605                	li	a2,1
    80200e84:	4581                	li	a1,0
    80200e86:	04c00513          	li	a0,76
    80200e8a:	00000097          	auipc	ra,0x0
    80200e8e:	d5e080e7          	jalr	-674(ra) # 80200be8 <sd_cmd>
    80200e92:	865e                	mv	a2,s7
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200e94:	100506b7          	lui	a3,0x10050
    80200e98:	04868513          	addi	a0,a3,72 # 10050048 <_start-0x701affb8>
		if (x == 0xFF) {
    80200e9c:	0ff00593          	li	a1,255
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200ea0:	c104                	sw	s1,0(a0)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200ea2:	46fc                	lw	a5,76(a3)
    80200ea4:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    80200ea8:	02079813          	slli	a6,a5,0x20
    80200eac:	fe084be3          	bltz	a6,80200ea2 <sdRead+0x1c0>
		if (x == 0xFF) {
    80200eb0:	0ff77713          	andi	a4,a4,255
    80200eb4:	02b70963          	beq	a4,a1,80200ee6 <sdRead+0x204>
	while (--timeout) {
    80200eb8:	367d                	addiw	a2,a2,-1
    80200eba:	f27d                	bnez	a2,80200ea0 <sdRead+0x1be>
    80200ebc:	b7a5                	j	80200e24 <sdRead+0x142>
	int rc = 0;
    80200ebe:	4a81                	li	s5,0
    80200ec0:	b7c9                	j	80200e82 <sdRead+0x1a0>
		panic("[SD Read]There must be some error in sd read");
    80200ec2:	0000c697          	auipc	a3,0xc
    80200ec6:	3ee68693          	addi	a3,a3,1006 # 8020d2b0 <textEnd+0x2b0>
    80200eca:	0000d617          	auipc	a2,0xd
    80200ece:	5f660613          	addi	a2,a2,1526 # 8020e4c0 <__func__.1629>
    80200ed2:	0f700593          	li	a1,247
    80200ed6:	0000c517          	auipc	a0,0xc
    80200eda:	3ba50513          	addi	a0,a0,954 # 8020d290 <textEnd+0x290>
    80200ede:	00000097          	auipc	ra,0x0
    80200ee2:	c78080e7          	jalr	-904(ra) # 80200b56 <_panic_>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200ee6:	100507b7          	lui	a5,0x10050
    80200eea:	0ff00713          	li	a4,255
    80200eee:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200ef0:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200ef2:	02071693          	slli	a3,a4,0x20
    80200ef6:	fe06cde3          	bltz	a3,80200ef0 <sdRead+0x20e>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200efa:	100507b7          	lui	a5,0x10050
    80200efe:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	}
	sd_cmd_end();
	goto start;
}
    80200f02:	8556                	mv	a0,s5
    80200f04:	60e6                	ld	ra,88(sp)
    80200f06:	6446                	ld	s0,80(sp)
    80200f08:	64a6                	ld	s1,72(sp)
    80200f0a:	6906                	ld	s2,64(sp)
    80200f0c:	79e2                	ld	s3,56(sp)
    80200f0e:	7a42                	ld	s4,48(sp)
    80200f10:	7aa2                	ld	s5,40(sp)
    80200f12:	7b02                	ld	s6,32(sp)
    80200f14:	6be2                	ld	s7,24(sp)
    80200f16:	6c42                	ld	s8,16(sp)
    80200f18:	6ca2                	ld	s9,8(sp)
    80200f1a:	6d02                	ld	s10,0(sp)
    80200f1c:	6125                	addi	sp,sp,96
    80200f1e:	8082                	ret

0000000080200f20 <sdCardRead>:
	}
	sd_cmd_end();
	goto start;
}

int sdCardRead(int isUser, u64 dst, u64 startAddr, u64 n) {
    80200f20:	dd010113          	addi	sp,sp,-560
    80200f24:	22113423          	sd	ra,552(sp)
    80200f28:	22813023          	sd	s0,544(sp)
    80200f2c:	20913c23          	sd	s1,536(sp)
    80200f30:	21213823          	sd	s2,528(sp)
    80200f34:	21313423          	sd	s3,520(sp)
    80200f38:	21413023          	sd	s4,512(sp)
    80200f3c:	1c00                	addi	s0,sp,560
	if (n & ((1 << 9) - 1)) {
    80200f3e:	1ff6f793          	andi	a5,a3,511
    80200f42:	ebb1                	bnez	a5,80200f96 <sdCardRead+0x76>
    80200f44:	8a2a                	mv	s4,a0
    80200f46:	84ae                	mv	s1,a1
		printf("[SD] Card Read error\n");
		return -1;
	}
	if (startAddr & ((1 << 9) - 1)) {
    80200f48:	1ff67793          	andi	a5,a2,511
    80200f4c:	efb9                	bnez	a5,80200faa <sdCardRead+0x8a>
		printf("[SD] Card Read error\n");
		return -1;	
	}

	if (isUser) {
    80200f4e:	e925                	bnez	a0,80200fbe <sdCardRead+0x9e>
			dst += 512;
			st++;
		}
		return 0;
	}
	int st = (startAddr) >> 9;
    80200f50:	8225                	srli	a2,a2,0x9
    80200f52:	0006091b          	sext.w	s2,a2
	for (int i = 0; i < n; i++) {
    80200f56:	c285                	beqz	a3,80200f76 <sdCardRead+0x56>
    80200f58:	06a6                	slli	a3,a3,0x9
    80200f5a:	00b689b3          	add	s3,a3,a1
		sdRead((u8*)dst, st, 1);
    80200f5e:	4605                	li	a2,1
    80200f60:	85ca                	mv	a1,s2
    80200f62:	8526                	mv	a0,s1
    80200f64:	00000097          	auipc	ra,0x0
    80200f68:	d7e080e7          	jalr	-642(ra) # 80200ce2 <sdRead>
		dst += 512;
    80200f6c:	20048493          	addi	s1,s1,512
	for (int i = 0; i < n; i++) {
    80200f70:	0905                	addi	s2,s2,1
    80200f72:	ff3496e3          	bne	s1,s3,80200f5e <sdCardRead+0x3e>
		st++;
	}
	return 0;
}
    80200f76:	8552                	mv	a0,s4
    80200f78:	22813083          	ld	ra,552(sp)
    80200f7c:	22013403          	ld	s0,544(sp)
    80200f80:	21813483          	ld	s1,536(sp)
    80200f84:	21013903          	ld	s2,528(sp)
    80200f88:	20813983          	ld	s3,520(sp)
    80200f8c:	20013a03          	ld	s4,512(sp)
    80200f90:	23010113          	addi	sp,sp,560
    80200f94:	8082                	ret
		printf("[SD] Card Read error\n");
    80200f96:	0000c517          	auipc	a0,0xc
    80200f9a:	34a50513          	addi	a0,a0,842 # 8020d2e0 <textEnd+0x2e0>
    80200f9e:	00000097          	auipc	ra,0x0
    80200fa2:	b2c080e7          	jalr	-1236(ra) # 80200aca <printf>
		return -1;
    80200fa6:	5a7d                	li	s4,-1
    80200fa8:	b7f9                	j	80200f76 <sdCardRead+0x56>
		printf("[SD] Card Read error\n");
    80200faa:	0000c517          	auipc	a0,0xc
    80200fae:	33650513          	addi	a0,a0,822 # 8020d2e0 <textEnd+0x2e0>
    80200fb2:	00000097          	auipc	ra,0x0
    80200fb6:	b18080e7          	jalr	-1256(ra) # 80200aca <printf>
		return -1;	
    80200fba:	5a7d                	li	s4,-1
    80200fbc:	bf6d                	j	80200f76 <sdCardRead+0x56>
		int st = (startAddr) >> 9;
    80200fbe:	8225                	srli	a2,a2,0x9
    80200fc0:	0006091b          	sext.w	s2,a2
		for (int i = 0; i < n; i++) {
    80200fc4:	c2a1                	beqz	a3,80201004 <sdCardRead+0xe4>
    80200fc6:	06a6                	slli	a3,a3,0x9
    80200fc8:	00b689b3          	add	s3,a3,a1
			sdRead((u8*)buf, st, 1);
    80200fcc:	4605                	li	a2,1
    80200fce:	85ca                	mv	a1,s2
    80200fd0:	dd040513          	addi	a0,s0,-560
    80200fd4:	00000097          	auipc	ra,0x0
    80200fd8:	d0e080e7          	jalr	-754(ra) # 80200ce2 <sdRead>
			copyout(myproc()->pgdir, dst, buf, 512);
    80200fdc:	00002097          	auipc	ra,0x2
    80200fe0:	a70080e7          	jalr	-1424(ra) # 80202a4c <myproc>
    80200fe4:	20000693          	li	a3,512
    80200fe8:	dd040613          	addi	a2,s0,-560
    80200fec:	85a6                	mv	a1,s1
    80200fee:	16853503          	ld	a0,360(a0)
    80200ff2:	00001097          	auipc	ra,0x1
    80200ff6:	458080e7          	jalr	1112(ra) # 8020244a <copyout>
			dst += 512;
    80200ffa:	20048493          	addi	s1,s1,512
		for (int i = 0; i < n; i++) {
    80200ffe:	0905                	addi	s2,s2,1
    80201000:	fd3496e3          	bne	s1,s3,80200fcc <sdCardRead+0xac>
		return 0;
    80201004:	4a01                	li	s4,0
    80201006:	bf85                	j	80200f76 <sdCardRead+0x56>

0000000080201008 <sdWrite>:
	for (int i = 0; i < sectorNumber; i++) {
    80201008:	20060763          	beqz	a2,80201216 <sdWrite+0x20e>
int sdWrite(u8 *buf, u64 startSector, u32 sectorNumber) {
    8020100c:	7119                	addi	sp,sp,-128
    8020100e:	fc86                	sd	ra,120(sp)
    80201010:	f8a2                	sd	s0,112(sp)
    80201012:	f4a6                	sd	s1,104(sp)
    80201014:	f0ca                	sd	s2,96(sp)
    80201016:	ecce                	sd	s3,88(sp)
    80201018:	e8d2                	sd	s4,80(sp)
    8020101a:	e4d6                	sd	s5,72(sp)
    8020101c:	e0da                	sd	s6,64(sp)
    8020101e:	fc5e                	sd	s7,56(sp)
    80201020:	f862                	sd	s8,48(sp)
    80201022:	f466                	sd	s9,40(sp)
    80201024:	f06a                	sd	s10,32(sp)
    80201026:	ec6e                	sd	s11,24(sp)
    80201028:	0100                	addi	s0,sp,128
    8020102a:	20050913          	addi	s2,a0,512
    8020102e:	fff6079b          	addiw	a5,a2,-1
    80201032:	1782                	slli	a5,a5,0x20
    80201034:	9381                	srli	a5,a5,0x20
    80201036:	07a6                	slli	a5,a5,0x9
    80201038:	40078793          	addi	a5,a5,1024
    8020103c:	00f50b33          	add	s6,a0,a5
    80201040:	0095971b          	slliw	a4,a1,0x9
    80201044:	41270abb          	subw	s5,a4,s2
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201048:	100504b7          	lui	s1,0x10050
    8020104c:	0ff00a13          	li	s4,255
    80201050:	6c09                	lui	s8,0x2
    80201052:	89d2                	mv	s3,s4
    80201054:	70fc0793          	addi	a5,s8,1807 # 270f <_start-0x801fd8f1>
    80201058:	f8f43023          	sd	a5,-128(s0)
    8020105c:	e0090793          	addi	a5,s2,-512
    80201060:	f8f43423          	sd	a5,-120(s0)
		if (sd_cmd(24 | 0x40, now * 512, 0) != 0) {
    80201064:	01590d3b          	addw	s10,s2,s5
		writeTimes = 0;
    80201068:	4b81                	li	s7,0
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020106a:	0fe00c93          	li	s9,254
	return (r & 0xFF);
    8020106e:	710c0d93          	addi	s11,s8,1808
    80201072:	a211                	j	80201176 <sdWrite+0x16e>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201074:	100507b7          	lui	a5,0x10050
    80201078:	0ff00713          	li	a4,255
    8020107c:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020107e:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80201080:	02071693          	slli	a3,a4,0x20
    80201084:	fe06cde3          	bltz	a3,8020107e <sdWrite+0x76>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80201088:	100507b7          	lui	a5,0x10050
    8020108c:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
			panic("[SD Write]Write Error, can't use cmd24, retry times %x\n", writeTimes);
    80201090:	875e                	mv	a4,s7
    80201092:	0000c697          	auipc	a3,0xc
    80201096:	26668693          	addi	a3,a3,614 # 8020d2f8 <textEnd+0x2f8>
    8020109a:	0000d617          	auipc	a2,0xd
    8020109e:	41e60613          	addi	a2,a2,1054 # 8020e4b8 <__func__.1657>
    802010a2:	19c00593          	li	a1,412
    802010a6:	0000c517          	auipc	a0,0xc
    802010aa:	1ea50513          	addi	a0,a0,490 # 8020d290 <textEnd+0x290>
    802010ae:	00000097          	auipc	ra,0x0
    802010b2:	aa8080e7          	jalr	-1368(ra) # 80200b56 <_panic_>
	return (r & 0xFF);
    802010b6:	0ff77593          	andi	a1,a4,255
    802010ba:	86ee                	mv	a3,s11
			if (x == 0xFF) {
    802010bc:	0ff00613          	li	a2,255
		while (--timeout) {
    802010c0:	36fd                	addiw	a3,a3,-1
    802010c2:	cead                	beqz	a3,8020113c <sdWrite+0x134>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802010c4:	0544a423          	sw	s4,72(s1) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    802010c8:	44f8                	lw	a4,76(s1)
    802010ca:	0007079b          	sext.w	a5,a4
	} while (r < 0);
    802010ce:	02071593          	slli	a1,a4,0x20
    802010d2:	fe05cbe3          	bltz	a1,802010c8 <sdWrite+0xc0>
	return (r & 0xFF);
    802010d6:	0ff7f593          	andi	a1,a5,255
			if (x == 0xFF) {
    802010da:	fec593e3          	bne	a1,a2,802010c0 <sdWrite+0xb8>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802010de:	0544a423          	sw	s4,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    802010e2:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    802010e4:	02079713          	slli	a4,a5,0x20
    802010e8:	fe074de3          	bltz	a4,802010e2 <sdWrite+0xda>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    802010ec:	0004ac23          	sw	zero,24(s1)
	for (int i = 0; i < sectorNumber; i++) {
    802010f0:	20090913          	addi	s2,s2,512
    802010f4:	f76914e3          	bne	s2,s6,8020105c <sdWrite+0x54>
}
    802010f8:	4501                	li	a0,0
    802010fa:	70e6                	ld	ra,120(sp)
    802010fc:	7446                	ld	s0,112(sp)
    802010fe:	74a6                	ld	s1,104(sp)
    80201100:	7906                	ld	s2,96(sp)
    80201102:	69e6                	ld	s3,88(sp)
    80201104:	6a46                	ld	s4,80(sp)
    80201106:	6aa6                	ld	s5,72(sp)
    80201108:	6b06                	ld	s6,64(sp)
    8020110a:	7be2                	ld	s7,56(sp)
    8020110c:	7c42                	ld	s8,48(sp)
    8020110e:	7ca2                	ld	s9,40(sp)
    80201110:	7d02                	ld	s10,32(sp)
    80201112:	6de2                	ld	s11,24(sp)
    80201114:	6109                	addi	sp,sp,128
    80201116:	8082                	ret
		panic("[SD Write]There must be some error in sd write");
    80201118:	0000c697          	auipc	a3,0xc
    8020111c:	21868693          	addi	a3,a3,536 # 8020d330 <textEnd+0x330>
    80201120:	0000d617          	auipc	a2,0xd
    80201124:	39860613          	addi	a2,a2,920 # 8020e4b8 <__func__.1657>
    80201128:	1c700593          	li	a1,455
    8020112c:	0000c517          	auipc	a0,0xc
    80201130:	16450513          	addi	a0,a0,356 # 8020d290 <textEnd+0x290>
    80201134:	00000097          	auipc	ra,0x0
    80201138:	a22080e7          	jalr	-1502(ra) # 80200b56 <_panic_>
			printf("%x \n", x);
    8020113c:	0000c517          	auipc	a0,0xc
    80201140:	22450513          	addi	a0,a0,548 # 8020d360 <textEnd+0x360>
    80201144:	00000097          	auipc	ra,0x0
    80201148:	986080e7          	jalr	-1658(ra) # 80200aca <printf>
			printf("keep busy\n");
    8020114c:	0000c517          	auipc	a0,0xc
    80201150:	21c50513          	addi	a0,a0,540 # 8020d368 <textEnd+0x368>
    80201154:	00000097          	auipc	ra,0x0
    80201158:	976080e7          	jalr	-1674(ra) # 80200aca <printf>
	writeTimes++;
    8020115c:	2b85                	addiw	s7,s7,1
	if (writeTimes > 10) {
    8020115e:	47ad                	li	a5,11
    80201160:	fafb8ce3          	beq	s7,a5,80201118 <sdWrite+0x110>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201164:	0544a423          	sw	s4,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201168:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    8020116a:	02079713          	slli	a4,a5,0x20
    8020116e:	fe074de3          	bltz	a4,80201168 <sdWrite+0x160>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80201172:	0004ac23          	sw	zero,24(s1)
		if (sd_cmd(24 | 0x40, now * 512, 0) != 0) {
    80201176:	4601                	li	a2,0
    80201178:	85ea                	mv	a1,s10
    8020117a:	05800513          	li	a0,88
    8020117e:	00000097          	auipc	ra,0x0
    80201182:	a6a080e7          	jalr	-1430(ra) # 80200be8 <sd_cmd>
    80201186:	ee0517e3          	bnez	a0,80201074 <sdWrite+0x6c>
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020118a:	0544a423          	sw	s4,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020118e:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80201190:	02079713          	slli	a4,a5,0x20
    80201194:	fe074de3          	bltz	a4,8020118e <sdWrite+0x186>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201198:	0544a423          	sw	s4,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020119c:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    8020119e:	02079713          	slli	a4,a5,0x20
    802011a2:	fe074de3          	bltz	a4,8020119c <sdWrite+0x194>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802011a6:	0544a423          	sw	s4,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    802011aa:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    802011ac:	02079713          	slli	a4,a5,0x20
    802011b0:	fe074de3          	bltz	a4,802011aa <sdWrite+0x1a2>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802011b4:	0594a423          	sw	s9,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    802011b8:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    802011ba:	02079713          	slli	a4,a5,0x20
    802011be:	fe074de3          	bltz	a4,802011b8 <sdWrite+0x1b0>
    802011c2:	f8843703          	ld	a4,-120(s0)
			spi_xfer(*p++);
    802011c6:	0705                	addi	a4,a4,1
	REG32(spi, SPI_REG_TXFIFO) = d;
    802011c8:	fff74783          	lbu	a5,-1(a4)
    802011cc:	c4bc                	sw	a5,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    802011ce:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    802011d0:	02079693          	slli	a3,a5,0x20
    802011d4:	fe06cde3          	bltz	a3,802011ce <sdWrite+0x1c6>
		} while (--n > 0);
    802011d8:	ff2717e3          	bne	a4,s2,802011c6 <sdWrite+0x1be>
    802011dc:	f8043683          	ld	a3,-128(s0)
	REG32(spi, SPI_REG_TXFIFO) = d;
    802011e0:	04848593          	addi	a1,s1,72
			if (5 == (x & 0x1f)) {
    802011e4:	4615                	li	a2,5
	REG32(spi, SPI_REG_TXFIFO) = d;
    802011e6:	0135a023          	sw	s3,0(a1)
		r = REG32(spi, SPI_REG_RXFIFO);
    802011ea:	44fc                	lw	a5,76(s1)
    802011ec:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    802011f0:	02079513          	slli	a0,a5,0x20
    802011f4:	fe054be3          	bltz	a0,802011ea <sdWrite+0x1e2>
			if (5 == (x & 0x1f)) {
    802011f8:	01f77793          	andi	a5,a4,31
    802011fc:	eac78de3          	beq	a5,a2,802010b6 <sdWrite+0xae>
		while (--timeout) {
    80201200:	36fd                	addiw	a3,a3,-1
    80201202:	f2f5                	bnez	a3,802011e6 <sdWrite+0x1de>
			printf("not receive 5\n");
    80201204:	0000c517          	auipc	a0,0xc
    80201208:	17450513          	addi	a0,a0,372 # 8020d378 <textEnd+0x378>
    8020120c:	00000097          	auipc	ra,0x0
    80201210:	8be080e7          	jalr	-1858(ra) # 80200aca <printf>
			goto retry;
    80201214:	b7a1                	j	8020115c <sdWrite+0x154>
}
    80201216:	4501                	li	a0,0
    80201218:	8082                	ret

000000008020121a <sdCardWrite>:

int sdCardWrite(int isUser, u64 src, u64 startAddr, u64 n) {
    8020121a:	dd010113          	addi	sp,sp,-560
    8020121e:	22113423          	sd	ra,552(sp)
    80201222:	22813023          	sd	s0,544(sp)
    80201226:	20913c23          	sd	s1,536(sp)
    8020122a:	21213823          	sd	s2,528(sp)
    8020122e:	21313423          	sd	s3,520(sp)
    80201232:	21413023          	sd	s4,512(sp)
    80201236:	1c00                	addi	s0,sp,560
	if (n & ((1 << 9) - 1)) {
    80201238:	1ff6f793          	andi	a5,a3,511
    8020123c:	ebb1                	bnez	a5,80201290 <sdCardWrite+0x76>
    8020123e:	8a2a                	mv	s4,a0
    80201240:	84ae                	mv	s1,a1
		printf("[SD] Card Write error\n");
		return -1;
	}
	if (startAddr & ((1 << 9) - 1)) {
    80201242:	1ff67793          	andi	a5,a2,511
    80201246:	efb9                	bnez	a5,802012a4 <sdCardWrite+0x8a>
		printf("[SD] Card Write error\n");
		return -1;	
	}

	if (isUser) {
    80201248:	e925                	bnez	a0,802012b8 <sdCardWrite+0x9e>
			src += 512;
			st++;
		}
		return 0;
	}
	int st = (startAddr) >> 9;
    8020124a:	8225                	srli	a2,a2,0x9
    8020124c:	0006091b          	sext.w	s2,a2
	for (int i = 0; i < n; i++) {
    80201250:	c285                	beqz	a3,80201270 <sdCardWrite+0x56>
    80201252:	06a6                	slli	a3,a3,0x9
    80201254:	00b689b3          	add	s3,a3,a1
		sdWrite((u8*)src, st, 1);
    80201258:	4605                	li	a2,1
    8020125a:	85ca                	mv	a1,s2
    8020125c:	8526                	mv	a0,s1
    8020125e:	00000097          	auipc	ra,0x0
    80201262:	daa080e7          	jalr	-598(ra) # 80201008 <sdWrite>
		src += 512;
    80201266:	20048493          	addi	s1,s1,512
	for (int i = 0; i < n; i++) {
    8020126a:	0905                	addi	s2,s2,1
    8020126c:	ff3496e3          	bne	s1,s3,80201258 <sdCardWrite+0x3e>
		st++;
	}
	return 0;
}
    80201270:	8552                	mv	a0,s4
    80201272:	22813083          	ld	ra,552(sp)
    80201276:	22013403          	ld	s0,544(sp)
    8020127a:	21813483          	ld	s1,536(sp)
    8020127e:	21013903          	ld	s2,528(sp)
    80201282:	20813983          	ld	s3,520(sp)
    80201286:	20013a03          	ld	s4,512(sp)
    8020128a:	23010113          	addi	sp,sp,560
    8020128e:	8082                	ret
		printf("[SD] Card Write error\n");
    80201290:	0000c517          	auipc	a0,0xc
    80201294:	0f850513          	addi	a0,a0,248 # 8020d388 <textEnd+0x388>
    80201298:	00000097          	auipc	ra,0x0
    8020129c:	832080e7          	jalr	-1998(ra) # 80200aca <printf>
		return -1;
    802012a0:	5a7d                	li	s4,-1
    802012a2:	b7f9                	j	80201270 <sdCardWrite+0x56>
		printf("[SD] Card Write error\n");
    802012a4:	0000c517          	auipc	a0,0xc
    802012a8:	0e450513          	addi	a0,a0,228 # 8020d388 <textEnd+0x388>
    802012ac:	00000097          	auipc	ra,0x0
    802012b0:	81e080e7          	jalr	-2018(ra) # 80200aca <printf>
		return -1;	
    802012b4:	5a7d                	li	s4,-1
    802012b6:	bf6d                	j	80201270 <sdCardWrite+0x56>
		int st = (startAddr) >> 9;
    802012b8:	8225                	srli	a2,a2,0x9
    802012ba:	0006091b          	sext.w	s2,a2
		for (int i = 0; i < n; i++) {
    802012be:	c2a1                	beqz	a3,802012fe <sdCardWrite+0xe4>
    802012c0:	06a6                	slli	a3,a3,0x9
    802012c2:	00b689b3          	add	s3,a3,a1
        	copyin(myproc()->pgdir, buf, src, 512);
    802012c6:	00001097          	auipc	ra,0x1
    802012ca:	786080e7          	jalr	1926(ra) # 80202a4c <myproc>
    802012ce:	20000693          	li	a3,512
    802012d2:	8626                	mv	a2,s1
    802012d4:	dd040593          	addi	a1,s0,-560
    802012d8:	16853503          	ld	a0,360(a0)
    802012dc:	00001097          	auipc	ra,0x1
    802012e0:	0de080e7          	jalr	222(ra) # 802023ba <copyin>
			sdWrite((u8*)buf, st, 1);
    802012e4:	4605                	li	a2,1
    802012e6:	85ca                	mv	a1,s2
    802012e8:	dd040513          	addi	a0,s0,-560
    802012ec:	00000097          	auipc	ra,0x0
    802012f0:	d1c080e7          	jalr	-740(ra) # 80201008 <sdWrite>
			src += 512;
    802012f4:	20048493          	addi	s1,s1,512
		for (int i = 0; i < n; i++) {
    802012f8:	0905                	addi	s2,s2,1
    802012fa:	fd3496e3          	bne	s1,s3,802012c6 <sdCardWrite+0xac>
		return 0;
    802012fe:	4a01                	li	s4,0
    80201300:	bf85                	j	80201270 <sdCardWrite+0x56>

0000000080201302 <sdInit>:


int sdInit(void) {
    80201302:	7179                	addi	sp,sp,-48
    80201304:	f406                	sd	ra,40(sp)
    80201306:	f022                	sd	s0,32(sp)
    80201308:	ec26                	sd	s1,24(sp)
    8020130a:	e84a                	sd	s2,16(sp)
    8020130c:	e44e                	sd	s3,8(sp)
    8020130e:	e052                	sd	s4,0(sp)
    80201310:	1800                	addi	s0,sp,48
	REG32(uart, UART_REG_TXCTRL) = UART_TXEN;
    80201312:	100107b7          	lui	a5,0x10010
    80201316:	4705                	li	a4,1
    80201318:	c798                	sw	a4,8(a5)
	REG32(spi, SPI_REG_FMT) = 0x80000;
    8020131a:	100507b7          	lui	a5,0x10050
    8020131e:	00080737          	lui	a4,0x80
    80201322:	c3b8                	sw	a4,64(a5)
	REG32(spi, SPI_REG_CSDEF) |= 1;
    80201324:	4bd8                	lw	a4,20(a5)
    80201326:	2701                	sext.w	a4,a4
    80201328:	00176713          	ori	a4,a4,1
    8020132c:	cbd8                	sw	a4,20(a5)
	REG32(spi, SPI_REG_CSID) = 0;
    8020132e:	0007a823          	sw	zero,16(a5) # 10050010 <_start-0x701afff0>
	REG32(spi, SPI_REG_SCKDIV) = f;
    80201332:	6705                	lui	a4,0x1
    80201334:	bb87071b          	addiw	a4,a4,-1096
    80201338:	c398                	sw	a4,0(a5)
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_OFF;
    8020133a:	470d                	li	a4,3
    8020133c:	cf98                	sw	a4,24(a5)
    8020133e:	47a9                	li	a5,10
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201340:	100506b7          	lui	a3,0x10050
    80201344:	04868593          	addi	a1,a3,72 # 10050048 <_start-0x701affb8>
    80201348:	0ff00613          	li	a2,255
    8020134c:	c190                	sw	a2,0(a1)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020134e:	46f8                	lw	a4,76(a3)
	} while (r < 0);
    80201350:	02071513          	slli	a0,a4,0x20
    80201354:	fe054de3          	bltz	a0,8020134e <sdInit+0x4c>
	for (i = 10; i > 0; i--) {
    80201358:	17fd                	addi	a5,a5,-1
    8020135a:	fbed                	bnez	a5,8020134c <sdInit+0x4a>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    8020135c:	100507b7          	lui	a5,0x10050
    80201360:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>

	sd_poweron(3000);

	int initTimes = 10;
    80201364:	4929                	li	s2,10
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201366:	100504b7          	lui	s1,0x10050
    8020136a:	0ff00a13          	li	s4,255
	while (initTimes > 0 && sd_cmd0()) {
    8020136e:	4985                	li	s3,1
	rc = (sd_cmd(0x40, 0, 0x95) != 0x01);
    80201370:	09500613          	li	a2,149
    80201374:	4581                	li	a1,0
    80201376:	04000513          	li	a0,64
    8020137a:	00000097          	auipc	ra,0x0
    8020137e:	86e080e7          	jalr	-1938(ra) # 80200be8 <sd_cmd>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201382:	0544a423          	sw	s4,72(s1) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    80201386:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80201388:	02079713          	slli	a4,a5,0x20
    8020138c:	fe074de3          	bltz	a4,80201386 <sdInit+0x84>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80201390:	0004ac23          	sw	zero,24(s1)
	while (initTimes > 0 && sd_cmd0()) {
    80201394:	03350763          	beq	a0,s3,802013c2 <sdInit+0xc0>
		initTimes--;
    80201398:	397d                	addiw	s2,s2,-1
	while (initTimes > 0 && sd_cmd0()) {
    8020139a:	fc091be3          	bnez	s2,80201370 <sdInit+0x6e>
	}

	if (!initTimes) {
		panic("[SD card]CMD0 error!\n");
    8020139e:	0000c697          	auipc	a3,0xc
    802013a2:	00268693          	addi	a3,a3,2 # 8020d3a0 <textEnd+0x3a0>
    802013a6:	0000d617          	auipc	a2,0xd
    802013aa:	10a60613          	addi	a2,a2,266 # 8020e4b0 <__func__.1713>
    802013ae:	21500593          	li	a1,533
    802013b2:	0000c517          	auipc	a0,0xc
    802013b6:	ede50513          	addi	a0,a0,-290 # 8020d290 <textEnd+0x290>
    802013ba:	fffff097          	auipc	ra,0xfffff
    802013be:	79c080e7          	jalr	1948(ra) # 80200b56 <_panic_>
	if (!initTimes) {
    802013c2:	fc090ee3          	beqz	s2,8020139e <sdInit+0x9c>
	rc = (sd_cmd(0x48, 0x000001AA, 0x87) != 0x01);
    802013c6:	08700613          	li	a2,135
    802013ca:	1aa00593          	li	a1,426
    802013ce:	04800513          	li	a0,72
    802013d2:	00000097          	auipc	ra,0x0
    802013d6:	816080e7          	jalr	-2026(ra) # 80200be8 <sd_cmd>
    802013da:	0005069b          	sext.w	a3,a0
    802013de:	16fd                	addi	a3,a3,-1
    802013e0:	00d03633          	snez	a2,a3
	REG32(spi, SPI_REG_TXFIFO) = d;
    802013e4:	100507b7          	lui	a5,0x10050
    802013e8:	0ff00713          	li	a4,255
    802013ec:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802013ee:	10050737          	lui	a4,0x10050
    802013f2:	477c                	lw	a5,76(a4)
	} while (r < 0);
    802013f4:	02079693          	slli	a3,a5,0x20
    802013f8:	fe06cde3          	bltz	a3,802013f2 <sdInit+0xf0>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802013fc:	100507b7          	lui	a5,0x10050
    80201400:	0ff00713          	li	a4,255
    80201404:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201406:	10050737          	lui	a4,0x10050
    8020140a:	477c                	lw	a5,76(a4)
	} while (r < 0);
    8020140c:	02079693          	slli	a3,a5,0x20
    80201410:	fe06cde3          	bltz	a3,8020140a <sdInit+0x108>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201414:	100507b7          	lui	a5,0x10050
    80201418:	0ff00713          	li	a4,255
    8020141c:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020141e:	10050737          	lui	a4,0x10050
    80201422:	477c                	lw	a5,76(a4)
    80201424:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    80201428:	02079593          	slli	a1,a5,0x20
    8020142c:	fe05cbe3          	bltz	a1,80201422 <sdInit+0x120>
	rc |= ((sd_dummy() & 0xF) != 0x1); /* voltage */
    80201430:	8abd                	andi	a3,a3,15
    80201432:	16fd                	addi	a3,a3,-1
    80201434:	00d036b3          	snez	a3,a3
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201438:	100507b7          	lui	a5,0x10050
    8020143c:	0ff00713          	li	a4,255
    80201440:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201442:	100505b7          	lui	a1,0x10050
    80201446:	45fc                	lw	a5,76(a1)
    80201448:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    8020144c:	02079513          	slli	a0,a5,0x20
    80201450:	fe054be3          	bltz	a0,80201446 <sdInit+0x144>
	rc |= (sd_dummy() != 0xAA); /* check pattern */
    80201454:	0ff77713          	andi	a4,a4,255
    80201458:	f5670713          	addi	a4,a4,-170 # 1004ff56 <_start-0x701b00aa>
    8020145c:	00e03733          	snez	a4,a4
    80201460:	8ed1                	or	a3,a3,a2
    80201462:	8f55                	or	a4,a4,a3
    80201464:	0ff77713          	andi	a4,a4,255
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201468:	100507b7          	lui	a5,0x10050
    8020146c:	0ff00693          	li	a3,255
    80201470:	c7b4                	sw	a3,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201472:	100506b7          	lui	a3,0x10050
    80201476:	46fc                	lw	a5,76(a3)
	} while (r < 0);
    80201478:	02079613          	slli	a2,a5,0x20
    8020147c:	fe064de3          	bltz	a2,80201476 <sdInit+0x174>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80201480:	100507b7          	lui	a5,0x10050
    80201484:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	}

	if (sd_cmd8()) {
    80201488:	e76d                	bnez	a4,80201572 <sdInit+0x270>
	printf("ACMD41");
    8020148a:	0000c517          	auipc	a0,0xc
    8020148e:	f4650513          	addi	a0,a0,-186 # 8020d3d0 <textEnd+0x3d0>
    80201492:	fffff097          	auipc	ra,0xfffff
    80201496:	638080e7          	jalr	1592(ra) # 80200aca <printf>
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020149a:	100504b7          	lui	s1,0x10050
    8020149e:	0ff00993          	li	s3,255
	} while (r == 0x01);
    802014a2:	4905                	li	s2,1
	sd_cmd(0x77, 0, 0x65);
    802014a4:	06500613          	li	a2,101
    802014a8:	4581                	li	a1,0
    802014aa:	07700513          	li	a0,119
    802014ae:	fffff097          	auipc	ra,0xfffff
    802014b2:	73a080e7          	jalr	1850(ra) # 80200be8 <sd_cmd>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802014b6:	0534a423          	sw	s3,72(s1) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    802014ba:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    802014bc:	02079713          	slli	a4,a5,0x20
    802014c0:	fe074de3          	bltz	a4,802014ba <sdInit+0x1b8>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    802014c4:	0004ac23          	sw	zero,24(s1)
		r = sd_cmd(0x69, 0x40000000, 0x77); /* HCS = 1 */
    802014c8:	07700613          	li	a2,119
    802014cc:	400005b7          	lui	a1,0x40000
    802014d0:	06900513          	li	a0,105
    802014d4:	fffff097          	auipc	ra,0xfffff
    802014d8:	714080e7          	jalr	1812(ra) # 80200be8 <sd_cmd>
	} while (r == 0x01);
    802014dc:	fd2504e3          	beq	a0,s2,802014a4 <sdInit+0x1a2>
		panic("[SD card]CMD8 error!\n");
	}

	if (sd_acmd41()) {
    802014e0:	e95d                	bnez	a0,80201596 <sdInit+0x294>
	printf("CMD16");
    802014e2:	0000c517          	auipc	a0,0xc
    802014e6:	f0e50513          	addi	a0,a0,-242 # 8020d3f0 <textEnd+0x3f0>
    802014ea:	fffff097          	auipc	ra,0xfffff
    802014ee:	5e0080e7          	jalr	1504(ra) # 80200aca <printf>
	rc = (sd_cmd(0x50, 0x200, 0x15) != 0x00);
    802014f2:	4655                	li	a2,21
    802014f4:	20000593          	li	a1,512
    802014f8:	05000513          	li	a0,80
    802014fc:	fffff097          	auipc	ra,0xfffff
    80201500:	6ec080e7          	jalr	1772(ra) # 80200be8 <sd_cmd>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201504:	100507b7          	lui	a5,0x10050
    80201508:	0ff00713          	li	a4,255
    8020150c:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020150e:	10050737          	lui	a4,0x10050
    80201512:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80201514:	02079693          	slli	a3,a5,0x20
    80201518:	fe06cde3          	bltz	a3,80201512 <sdInit+0x210>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    8020151c:	100507b7          	lui	a5,0x10050
    80201520:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>

	if (sd_cmd58()) {
		panic("[SD card]CMD58 error!\n");
	}

	if (sd_cmd16()) {
    80201524:	e959                	bnez	a0,802015ba <sdInit+0x2b8>
		panic("[SD card]CMD16 error!\n");
	}

	printf("[SD card]SD card init finish!\n");
    80201526:	0000c517          	auipc	a0,0xc
    8020152a:	eea50513          	addi	a0,a0,-278 # 8020d410 <textEnd+0x410>
    8020152e:	fffff097          	auipc	ra,0xfffff
    80201532:	59c080e7          	jalr	1436(ra) # 80200aca <printf>

	REG32(spi, SPI_REG_SCKDIV) = (F_CLK / 16666666UL);
    80201536:	100507b7          	lui	a5,0x10050
    8020153a:	03c00713          	li	a4,60
    8020153e:	c398                	sw	a4,0(a5)
	__asm__ __volatile__ ("fence.i" : : : "memory");
    80201540:	0000100f          	fence.i
	
	devsw[DEV_SD].read = sdCardRead;
    80201544:	00438797          	auipc	a5,0x438
    80201548:	af478793          	addi	a5,a5,-1292 # 80639038 <devsw>
    8020154c:	00000717          	auipc	a4,0x0
    80201550:	9d470713          	addi	a4,a4,-1580 # 80200f20 <sdCardRead>
    80201554:	e398                	sd	a4,0(a5)
	devsw[DEV_SD].write = sdCardWrite;
    80201556:	00000717          	auipc	a4,0x0
    8020155a:	cc470713          	addi	a4,a4,-828 # 8020121a <sdCardWrite>
    8020155e:	e798                	sd	a4,8(a5)
	return 0;
}
    80201560:	4501                	li	a0,0
    80201562:	70a2                	ld	ra,40(sp)
    80201564:	7402                	ld	s0,32(sp)
    80201566:	64e2                	ld	s1,24(sp)
    80201568:	6942                	ld	s2,16(sp)
    8020156a:	69a2                	ld	s3,8(sp)
    8020156c:	6a02                	ld	s4,0(sp)
    8020156e:	6145                	addi	sp,sp,48
    80201570:	8082                	ret
		panic("[SD card]CMD8 error!\n");
    80201572:	0000c697          	auipc	a3,0xc
    80201576:	e4668693          	addi	a3,a3,-442 # 8020d3b8 <textEnd+0x3b8>
    8020157a:	0000d617          	auipc	a2,0xd
    8020157e:	f3660613          	addi	a2,a2,-202 # 8020e4b0 <__func__.1713>
    80201582:	21900593          	li	a1,537
    80201586:	0000c517          	auipc	a0,0xc
    8020158a:	d0a50513          	addi	a0,a0,-758 # 8020d290 <textEnd+0x290>
    8020158e:	fffff097          	auipc	ra,0xfffff
    80201592:	5c8080e7          	jalr	1480(ra) # 80200b56 <_panic_>
		panic("[SD card]ACMD41 error!\n");
    80201596:	0000c697          	auipc	a3,0xc
    8020159a:	e4268693          	addi	a3,a3,-446 # 8020d3d8 <textEnd+0x3d8>
    8020159e:	0000d617          	auipc	a2,0xd
    802015a2:	f1260613          	addi	a2,a2,-238 # 8020e4b0 <__func__.1713>
    802015a6:	21d00593          	li	a1,541
    802015aa:	0000c517          	auipc	a0,0xc
    802015ae:	ce650513          	addi	a0,a0,-794 # 8020d290 <textEnd+0x290>
    802015b2:	fffff097          	auipc	ra,0xfffff
    802015b6:	5a4080e7          	jalr	1444(ra) # 80200b56 <_panic_>
		panic("[SD card]CMD16 error!\n");
    802015ba:	0000c697          	auipc	a3,0xc
    802015be:	e3e68693          	addi	a3,a3,-450 # 8020d3f8 <textEnd+0x3f8>
    802015c2:	0000d617          	auipc	a2,0xd
    802015c6:	eee60613          	addi	a2,a2,-274 # 8020e4b0 <__func__.1713>
    802015ca:	22500593          	li	a1,549
    802015ce:	0000c517          	auipc	a0,0xc
    802015d2:	cc250513          	addi	a0,a0,-830 # 8020d290 <textEnd+0x290>
    802015d6:	fffff097          	auipc	ra,0xfffff
    802015da:	580080e7          	jalr	1408(ra) # 80200b56 <_panic_>

00000000802015de <sdTest>:

u8 binary[1024];
int sdTest(void) {
    802015de:	7179                	addi	sp,sp,-48
    802015e0:	f406                	sd	ra,40(sp)
    802015e2:	f022                	sd	s0,32(sp)
    802015e4:	ec26                	sd	s1,24(sp)
    802015e6:	e84a                	sd	s2,16(sp)
    802015e8:	e44e                	sd	s3,8(sp)
    802015ea:	e052                	sd	s4,0(sp)
    802015ec:	1800                	addi	s0,sp,48
	sdInit();
    802015ee:	00000097          	auipc	ra,0x0
    802015f2:	d14080e7          	jalr	-748(ra) # 80201302 <sdInit>
    802015f6:	4481                	li	s1,0
        // }
        // sdWrite(binary, j, 2);
        // for (int i = 0; i < 1024; i++) {
        //     binary[i] = 0;
        // }
        sdRead(binary, j, 2);
    802015f8:	001e1a17          	auipc	s4,0x1e1
    802015fc:	a80a0a13          	addi	s4,s4,-1408 # 803e2078 <binary>
        //     if (binary[i] != (i & 7)) {
        //         panic("gg: %d ", j);
        //         break;
        //     }
        // }
        printf("finish %d\n", j);
    80201600:	0000c997          	auipc	s3,0xc
    80201604:	e3098993          	addi	s3,s3,-464 # 8020d430 <textEnd+0x430>
    for (int j = 0; j < 20; j += 2) {
    80201608:	4951                	li	s2,20
        sdRead(binary, j, 2);
    8020160a:	4609                	li	a2,2
    8020160c:	85a6                	mv	a1,s1
    8020160e:	8552                	mv	a0,s4
    80201610:	fffff097          	auipc	ra,0xfffff
    80201614:	6d2080e7          	jalr	1746(ra) # 80200ce2 <sdRead>
        printf("finish %d\n", j);
    80201618:	0004859b          	sext.w	a1,s1
    8020161c:	854e                	mv	a0,s3
    8020161e:	fffff097          	auipc	ra,0xfffff
    80201622:	4ac080e7          	jalr	1196(ra) # 80200aca <printf>
    for (int j = 0; j < 20; j += 2) {
    80201626:	0489                	addi	s1,s1,2
    80201628:	ff2491e3          	bne	s1,s2,8020160a <sdTest+0x2c>
    }
	return 0;
    8020162c:	4501                	li	a0,0
    8020162e:	70a2                	ld	ra,40(sp)
    80201630:	7402                	ld	s0,32(sp)
    80201632:	64e2                	ld	s1,24(sp)
    80201634:	6942                	ld	s2,16(sp)
    80201636:	69a2                	ld	s3,8(sp)
    80201638:	6a02                	ld	s4,0(sp)
    8020163a:	6145                	addi	sp,sp,48
    8020163c:	8082                	ret

000000008020163e <startPage>:
        PTE_READ | PTE_WRITE | PTE_EXECUTE | PTE_ACCESSED | PTE_DIRTY);
    pageInsert(kernelPageDirectory, TRAMPOLINE_BASE + PAGE_SIZE, (u64)trampoline + PAGE_SIZE, 
        PTE_READ | PTE_WRITE | PTE_EXECUTE | PTE_ACCESSED | PTE_DIRTY);
}

void startPage() {
    8020163e:	1141                	addi	sp,sp,-16
    80201640:	e422                	sd	s0,8(sp)
    80201642:	0800                	addi	s0,sp,16
    w_satp(MAKE_SATP(kernelPageDirectory));
    80201644:	00439797          	auipc	a5,0x439
    80201648:	9bc78793          	addi	a5,a5,-1604 # 8063a000 <_pgdir>
    8020164c:	83b1                	srli	a5,a5,0xc
    8020164e:	577d                	li	a4,-1
    80201650:	177e                	slli	a4,a4,0x3f
    80201652:	8fd9                	or	a5,a5,a4
#define MAKE_SATP(pagetable) (SATP_SV39 | (((u64)pagetable) >> 12))

// supervisor address translation and protection;
// holds the address of the page table.
static inline void w_satp(u64 x) {
	asm volatile("csrw satp, %0" : : "r" (x));
    80201654:	18079073          	csrw	satp,a5

// flush the TLB.
static inline void sfence_vma() {
	// the zero, zero means flush all TLB entries.
	// asm volatile("sfence.vma zero, zero");
	asm volatile("sfence.vma");
    80201658:	12000073          	sfence.vma
    sfence_vma();
}
    8020165c:	6422                	ld	s0,8(sp)
    8020165e:	0141                	addi	sp,sp,16
    80201660:	8082                	ret

0000000080201662 <memoryInit>:
    pageInsert(kernelPageDirectory, 1ll << 35, page2pa(p), PTE_READ | PTE_WRITE);
    *((u32*)page2pa(p)) = 65536;
    printf("value1 of %lx:  %d\n", 1ll << 35, *((u32*)(1ll<<35)));
}

void memoryInit() {
    80201662:	711d                	addi	sp,sp,-96
    80201664:	ec86                	sd	ra,88(sp)
    80201666:	e8a2                	sd	s0,80(sp)
    80201668:	e4a6                	sd	s1,72(sp)
    8020166a:	e0ca                	sd	s2,64(sp)
    8020166c:	fc4e                	sd	s3,56(sp)
    8020166e:	f852                	sd	s4,48(sp)
    80201670:	f456                	sd	s5,40(sp)
    80201672:	f05a                	sd	s6,32(sp)
    80201674:	ec5e                	sd	s7,24(sp)
    80201676:	1080                	addi	s0,sp,96
    printf("Memory init start...\n");
    80201678:	0000c517          	auipc	a0,0xc
    8020167c:	dc850513          	addi	a0,a0,-568 # 8020d440 <textEnd+0x440>
    80201680:	fffff097          	auipc	ra,0xfffff
    80201684:	44a080e7          	jalr	1098(ra) # 80200aca <printf>
    u32 n = PA2PPN(kernelEnd);
    80201688:	0043a497          	auipc	s1,0x43a
    8020168c:	97848493          	addi	s1,s1,-1672 # 8063b000 <bssEnd>
    80201690:	80b1                	srli	s1,s1,0xc
    80201692:	0004899b          	sext.w	s3,s1
    80201696:	14c2                	slli	s1,s1,0x30
    80201698:	90c1                	srli	s1,s1,0x30
    for (i = 0; i < n; i++) {
    8020169a:	40048c63          	beqz	s1,80201ab2 <memoryInit+0x450>
    8020169e:	001e1717          	auipc	a4,0x1e1
    802016a2:	dea70713          	addi	a4,a4,-534 # 803e2488 <pages+0x10>
    802016a6:	fff4879b          	addiw	a5,s1,-1
    802016aa:	02079693          	slli	a3,a5,0x20
    802016ae:	9281                	srli	a3,a3,0x20
    802016b0:	00169793          	slli	a5,a3,0x1
    802016b4:	97b6                	add	a5,a5,a3
    802016b6:	078e                	slli	a5,a5,0x3
    802016b8:	001e1697          	auipc	a3,0x1e1
    802016bc:	de868693          	addi	a3,a3,-536 # 803e24a0 <pages+0x28>
    802016c0:	97b6                	add	a5,a5,a3
        pages[i].ref = 1;
    802016c2:	4685                	li	a3,1
    802016c4:	c314                	sw	a3,0(a4)
    for (i = 0; i < n; i++) {
    802016c6:	0761                	addi	a4,a4,24
    802016c8:	fef71ee3          	bne	a4,a5,802016c4 <memoryInit+0x62>
    LIST_INIT(&freePages);
    802016cc:	002a1797          	auipc	a5,0x2a1
    802016d0:	da07b623          	sd	zero,-596(a5) # 804a2478 <freePages>
    for (; i < n; i++) {
    802016d4:	03099793          	slli	a5,s3,0x30
    802016d8:	0607c763          	bltz	a5,80201746 <memoryInit+0xe4>
    for (i = 0; i < n; i++) {
    802016dc:	86a6                	mv	a3,s1
    802016de:	002a1797          	auipc	a5,0x2a1
    802016e2:	d9a7b783          	ld	a5,-614(a5) # 804a2478 <freePages>
        pages[i].ref = 0;
    802016e6:	001e1597          	auipc	a1,0x1e1
    802016ea:	d9258593          	addi	a1,a1,-622 # 803e2478 <pages>
        LIST_INSERT_HEAD(&freePages, &pages[i], link);
    802016ee:	002a1897          	auipc	a7,0x2a1
    802016f2:	d8a88893          	addi	a7,a7,-630 # 804a2478 <freePages>
    for (; i < n; i++) {
    802016f6:	6821                	lui	a6,0x8
    802016f8:	a839                	j	80201716 <memoryInit+0xb4>
        LIST_INSERT_HEAD(&freePages, &pages[i], link);
    802016fa:	02069613          	slli	a2,a3,0x20
    802016fe:	9201                	srli	a2,a2,0x20
    80201700:	00161713          	slli	a4,a2,0x1
    80201704:	00c707b3          	add	a5,a4,a2
    80201708:	078e                	slli	a5,a5,0x3
    8020170a:	97ae                	add	a5,a5,a1
    8020170c:	0117b423          	sd	a7,8(a5)
    for (; i < n; i++) {
    80201710:	2685                	addiw	a3,a3,1
    80201712:	0306f663          	bgeu	a3,a6,8020173e <memoryInit+0xdc>
        pages[i].ref = 0;
    80201716:	02069513          	slli	a0,a3,0x20
    8020171a:	9101                	srli	a0,a0,0x20
    8020171c:	00151713          	slli	a4,a0,0x1
    80201720:	00a70633          	add	a2,a4,a0
    80201724:	060e                	slli	a2,a2,0x3
    80201726:	962e                	add	a2,a2,a1
    80201728:	00062823          	sw	zero,16(a2)
        LIST_INSERT_HEAD(&freePages, &pages[i], link);
    8020172c:	e21c                	sd	a5,0(a2)
    8020172e:	d7f1                	beqz	a5,802016fa <memoryInit+0x98>
    80201730:	00151713          	slli	a4,a0,0x1
    80201734:	972a                	add	a4,a4,a0
    80201736:	070e                	slli	a4,a4,0x3
    80201738:	972e                	add	a4,a4,a1
    8020173a:	e798                	sd	a4,8(a5)
    8020173c:	bf7d                	j	802016fa <memoryInit+0x98>
    8020173e:	002a1717          	auipc	a4,0x2a1
    80201742:	d2f73d23          	sd	a5,-710(a4) # 804a2478 <freePages>
    pageInsert(kernelPageDirectory, UART_V, UART, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201746:	0c600693          	li	a3,198
    8020174a:	10000637          	lui	a2,0x10000
    8020174e:	3f100593          	li	a1,1009
    80201752:	05f2                	slli	a1,a1,0x1c
    80201754:	00439517          	auipc	a0,0x439
    80201758:	8ac50513          	addi	a0,a0,-1876 # 8063a000 <_pgdir>
    8020175c:	00001097          	auipc	ra,0x1
    80201760:	8be080e7          	jalr	-1858(ra) # 8020201a <pageInsert>
    80201764:	01f81937          	lui	s2,0x1f81
    80201768:	0936                	slli	s2,s2,0xd
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    8020176a:	fc100a93          	li	s5,-63
    8020176e:	1a82                	slli	s5,s5,0x20
    80201770:	00439b97          	auipc	s7,0x439
    80201774:	890b8b93          	addi	s7,s7,-1904 # 8063a000 <_pgdir>
    80201778:	6b05                	lui	s6,0x1
    for (u64 i = 0; i < 0x10000; i += PAGE_SIZE) {
    8020177a:	003f0a37          	lui	s4,0x3f0
    8020177e:	201a0a13          	addi	s4,s4,513 # 3f0201 <_start-0x7fe0fdff>
    80201782:	0a42                	slli	s4,s4,0x10
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201784:	0c600693          	li	a3,198
    80201788:	01590633          	add	a2,s2,s5
    8020178c:	85ca                	mv	a1,s2
    8020178e:	855e                	mv	a0,s7
    80201790:	00001097          	auipc	ra,0x1
    80201794:	88a080e7          	jalr	-1910(ra) # 8020201a <pageInsert>
    for (u64 i = 0; i < 0x10000; i += PAGE_SIZE) {
    80201798:	995a                	add	s2,s2,s6
    8020179a:	ff4915e3          	bne	s2,s4,80201784 <memoryInit+0x122>
    8020179e:	00fc3937          	lui	s2,0xfc3
    802017a2:	093a                	slli	s2,s2,0xe
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    802017a4:	fc100a93          	li	s5,-63
    802017a8:	1a82                	slli	s5,s5,0x20
    802017aa:	00439b97          	auipc	s7,0x439
    802017ae:	856b8b93          	addi	s7,s7,-1962 # 8063a000 <_pgdir>
    802017b2:	6b05                	lui	s6,0x1
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    802017b4:	00fc3a37          	lui	s4,0xfc3
    802017b8:	0a05                	addi	s4,s4,1
    802017ba:	0a3a                	slli	s4,s4,0xe
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    802017bc:	0c600693          	li	a3,198
    802017c0:	01590633          	add	a2,s2,s5
    802017c4:	85ca                	mv	a1,s2
    802017c6:	855e                	mv	a0,s7
    802017c8:	00001097          	auipc	ra,0x1
    802017cc:	852080e7          	jalr	-1966(ra) # 8020201a <pageInsert>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    802017d0:	995a                	add	s2,s2,s6
    802017d2:	ff4915e3          	bne	s2,s4,802017bc <memoryInit+0x15a>
    802017d6:	1f861937          	lui	s2,0x1f861
    802017da:	0926                	slli	s2,s2,0x9
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    802017dc:	fc100a93          	li	s5,-63
    802017e0:	1a82                	slli	s5,s5,0x20
    802017e2:	00439b97          	auipc	s7,0x439
    802017e6:	81eb8b93          	addi	s7,s7,-2018 # 8063a000 <_pgdir>
    802017ea:	6b05                	lui	s6,0x1
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    802017ec:	00fc3a37          	lui	s4,0xfc3
    802017f0:	081a0a13          	addi	s4,s4,129 # fc3081 <_start-0x7f23cf7f>
    802017f4:	0a3a                	slli	s4,s4,0xe
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    802017f6:	0c600693          	li	a3,198
    802017fa:	01590633          	add	a2,s2,s5
    802017fe:	85ca                	mv	a1,s2
    80201800:	855e                	mv	a0,s7
    80201802:	00001097          	auipc	ra,0x1
    80201806:	818080e7          	jalr	-2024(ra) # 8020201a <pageInsert>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    8020180a:	995a                	add	s2,s2,s6
    8020180c:	ff4915e3          	bne	s2,s4,802017f6 <memoryInit+0x194>
    pageInsert(kernelPageDirectory, SPI_CTRL_ADDR, SPI_CTRL_ADDR, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201810:	0c600693          	li	a3,198
    80201814:	10050637          	lui	a2,0x10050
    80201818:	100505b7          	lui	a1,0x10050
    8020181c:	00438517          	auipc	a0,0x438
    80201820:	7e450513          	addi	a0,a0,2020 # 8063a000 <_pgdir>
    80201824:	00000097          	auipc	ra,0x0
    80201828:	7f6080e7          	jalr	2038(ra) # 8020201a <pageInsert>
    pageInsert(kernelPageDirectory, UART_CTRL_ADDR, UART_CTRL_ADDR, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    8020182c:	0c600693          	li	a3,198
    80201830:	10010637          	lui	a2,0x10010
    80201834:	100105b7          	lui	a1,0x10010
    80201838:	00438517          	auipc	a0,0x438
    8020183c:	7c850513          	addi	a0,a0,1992 # 8063a000 <_pgdir>
    80201840:	00000097          	auipc	ra,0x0
    80201844:	7da080e7          	jalr	2010(ra) # 8020201a <pageInsert>
    va = pa = (u64)kernelStart;
    80201848:	ffffea17          	auipc	s4,0xffffe
    8020184c:	7b8a0a13          	addi	s4,s4,1976 # 80200000 <_start>
    for (u64 i = 0; va + i < (u64)textEnd; i += PAGE_SIZE) {
    80201850:	0000b917          	auipc	s2,0xb
    80201854:	7b090913          	addi	s2,s2,1968 # 8020d000 <textEnd>
    80201858:	032a7363          	bgeu	s4,s2,8020187e <memoryInit+0x21c>
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_EXECUTE | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    8020185c:	00438b17          	auipc	s6,0x438
    80201860:	7a4b0b13          	addi	s6,s6,1956 # 8063a000 <_pgdir>
    80201864:	6a85                	lui	s5,0x1
    80201866:	0ce00693          	li	a3,206
    8020186a:	8652                	mv	a2,s4
    8020186c:	85d2                	mv	a1,s4
    8020186e:	855a                	mv	a0,s6
    80201870:	00000097          	auipc	ra,0x0
    80201874:	7aa080e7          	jalr	1962(ra) # 8020201a <pageInsert>
    for (u64 i = 0; va + i < (u64)textEnd; i += PAGE_SIZE) {
    80201878:	9a56                	add	s4,s4,s5
    8020187a:	ff2a66e3          	bltu	s4,s2,80201866 <memoryInit+0x204>
    for (u64 i = 0; va + i < PHYSICAL_MEMORY_TOP; i += PAGE_SIZE) {
    8020187e:	47c5                	li	a5,17
    80201880:	07ee                	slli	a5,a5,0x1b
    80201882:	02f97463          	bgeu	s2,a5,802018aa <memoryInit+0x248>
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201886:	00438b17          	auipc	s6,0x438
    8020188a:	77ab0b13          	addi	s6,s6,1914 # 8063a000 <_pgdir>
    8020188e:	6a85                	lui	s5,0x1
    for (u64 i = 0; va + i < PHYSICAL_MEMORY_TOP; i += PAGE_SIZE) {
    80201890:	8a3e                	mv	s4,a5
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201892:	0c600693          	li	a3,198
    80201896:	864a                	mv	a2,s2
    80201898:	85ca                	mv	a1,s2
    8020189a:	855a                	mv	a0,s6
    8020189c:	00000097          	auipc	ra,0x0
    802018a0:	77e080e7          	jalr	1918(ra) # 8020201a <pageInsert>
    for (u64 i = 0; va + i < PHYSICAL_MEMORY_TOP; i += PAGE_SIZE) {
    802018a4:	9956                	add	s2,s2,s5
    802018a6:	ff4966e3          	bltu	s2,s4,80201892 <memoryInit+0x230>
    pageInsert(kernelPageDirectory, TRAMPOLINE_BASE, (u64)trampoline, 
    802018aa:	0ce00693          	li	a3,206
    802018ae:	00009617          	auipc	a2,0x9
    802018b2:	75260613          	addi	a2,a2,1874 # 8020b000 <_trampoline>
    802018b6:	020005b7          	lui	a1,0x2000
    802018ba:	15fd                	addi	a1,a1,-1
    802018bc:	05b6                	slli	a1,a1,0xd
    802018be:	00438517          	auipc	a0,0x438
    802018c2:	74250513          	addi	a0,a0,1858 # 8063a000 <_pgdir>
    802018c6:	00000097          	auipc	ra,0x0
    802018ca:	754080e7          	jalr	1876(ra) # 8020201a <pageInsert>
    pageInsert(kernelPageDirectory, TRAMPOLINE_BASE + PAGE_SIZE, (u64)trampoline + PAGE_SIZE, 
    802018ce:	0ce00693          	li	a3,206
    802018d2:	0000a617          	auipc	a2,0xa
    802018d6:	72e60613          	addi	a2,a2,1838 # 8020c000 <trapframe>
    802018da:	040005b7          	lui	a1,0x4000
    802018de:	15fd                	addi	a1,a1,-1
    802018e0:	05b2                	slli	a1,a1,0xc
    802018e2:	00438517          	auipc	a0,0x438
    802018e6:	71e50513          	addi	a0,a0,1822 # 8063a000 <_pgdir>
    802018ea:	00000097          	auipc	ra,0x0
    802018ee:	730080e7          	jalr	1840(ra) # 8020201a <pageInsert>
    for (; i < n; i++) {
    802018f2:	03099793          	slli	a5,s3,0x30
    802018f6:	0207c563          	bltz	a5,80201920 <memoryInit+0x2be>
    802018fa:	02049713          	slli	a4,s1,0x20
    802018fe:	9301                	srli	a4,a4,0x20
    80201900:	00171793          	slli	a5,a4,0x1
    80201904:	97ba                	add	a5,a5,a4
    80201906:	078e                	slli	a5,a5,0x3
    80201908:	001e1717          	auipc	a4,0x1e1
    8020190c:	b7070713          	addi	a4,a4,-1168 # 803e2478 <pages>
    80201910:	97ba                	add	a5,a5,a4
    80201912:	6721                	lui	a4,0x8
        pages[i].ref = 0;
    80201914:	0007a823          	sw	zero,16(a5)
    for (; i < n; i++) {
    80201918:	2485                	addiw	s1,s1,1
    8020191a:	07e1                	addi	a5,a5,24
    8020191c:	fee4ece3          	bltu	s1,a4,80201914 <memoryInit+0x2b2>
    initFreePages();
    virtualMemory();
    resetRef();
    startPage();
    80201920:	00000097          	auipc	ra,0x0
    80201924:	d1e080e7          	jalr	-738(ra) # 8020163e <startPage>
    printf("Memory init finish!\n");
    80201928:	0000c517          	auipc	a0,0xc
    8020192c:	b3050513          	addi	a0,a0,-1232 # 8020d458 <textEnd+0x458>
    80201930:	fffff097          	auipc	ra,0xfffff
    80201934:	19a080e7          	jalr	410(ra) # 80200aca <printf>
    printf("Test memory start...\n");
    80201938:	0000c517          	auipc	a0,0xc
    8020193c:	b3850513          	addi	a0,a0,-1224 # 8020d470 <textEnd+0x470>
    80201940:	fffff097          	auipc	ra,0xfffff
    80201944:	18a080e7          	jalr	394(ra) # 80200aca <printf>
    pageAlloc(&p);
    80201948:	fa840513          	addi	a0,s0,-88
    8020194c:	00000097          	auipc	ra,0x0
    80201950:	332080e7          	jalr	818(ra) # 80201c7e <pageAlloc>
    int hartId;
} PhysicalPage;

inline u32 page2PPN(PhysicalPage *page) {
    extern PhysicalPage pages[];
    return page - pages;
    80201954:	001e1997          	auipc	s3,0x1e1
    80201958:	b2498993          	addi	s3,s3,-1244 # 803e2478 <pages>
    8020195c:	fa843583          	ld	a1,-88(s0)
    80201960:	413585b3          	sub	a1,a1,s3
    80201964:	858d                	srai	a1,a1,0x3
    80201966:	0000d917          	auipc	s2,0xd
    8020196a:	c0a93903          	ld	s2,-1014(s2) # 8020e570 <__func__.1590+0x8>
    8020196e:	032585b3          	mul	a1,a1,s2
    return pages + ppn;
}


inline u64 page2pa(PhysicalPage *page) {
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201972:	00c5959b          	slliw	a1,a1,0xc
    80201976:	1582                	slli	a1,a1,0x20
    80201978:	9181                	srli	a1,a1,0x20
    8020197a:	4a05                	li	s4,1
    8020197c:	01fa1493          	slli	s1,s4,0x1f
    printf("alloced page1:  %lx\n", page2pa(p));
    80201980:	95a6                	add	a1,a1,s1
    80201982:	0000c517          	auipc	a0,0xc
    80201986:	b0650513          	addi	a0,a0,-1274 # 8020d488 <textEnd+0x488>
    8020198a:	fffff097          	auipc	ra,0xfffff
    8020198e:	140080e7          	jalr	320(ra) # 80200aca <printf>
    return page - pages;
    80201992:	fa843603          	ld	a2,-88(s0)
    80201996:	41360633          	sub	a2,a2,s3
    8020199a:	860d                	srai	a2,a2,0x3
    8020199c:	03260633          	mul	a2,a2,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802019a0:	00c6161b          	slliw	a2,a2,0xc
    802019a4:	1602                	slli	a2,a2,0x20
    802019a6:	9201                	srli	a2,a2,0x20
    pageInsert(kernelPageDirectory, 1ll << 35, page2pa(p), PTE_READ | PTE_WRITE);
    802019a8:	4699                	li	a3,6
    802019aa:	9626                	add	a2,a2,s1
    802019ac:	023a1593          	slli	a1,s4,0x23
    802019b0:	00438517          	auipc	a0,0x438
    802019b4:	65050513          	addi	a0,a0,1616 # 8063a000 <_pgdir>
    802019b8:	00000097          	auipc	ra,0x0
    802019bc:	662080e7          	jalr	1634(ra) # 8020201a <pageInsert>
    return page - pages;
    802019c0:	fa843783          	ld	a5,-88(s0)
    802019c4:	413787b3          	sub	a5,a5,s3
    802019c8:	878d                	srai	a5,a5,0x3
    802019ca:	032787b3          	mul	a5,a5,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802019ce:	00c7979b          	slliw	a5,a5,0xc
    802019d2:	1782                	slli	a5,a5,0x20
    802019d4:	9381                	srli	a5,a5,0x20
    *((u32*)page2pa(p)) = 147893;
    802019d6:	97a6                	add	a5,a5,s1
    802019d8:	00024737          	lui	a4,0x24
    802019dc:	1b57071b          	addiw	a4,a4,437
    802019e0:	c398                	sw	a4,0(a5)
    printf("value1 of %lx:  %d\n", 1ll << 35, *((u32*)(1ll<<35)));
    802019e2:	1a0e                	slli	s4,s4,0x23
    802019e4:	000a2603          	lw	a2,0(s4)
    802019e8:	85d2                	mv	a1,s4
    802019ea:	0000c517          	auipc	a0,0xc
    802019ee:	ab650513          	addi	a0,a0,-1354 # 8020d4a0 <textEnd+0x4a0>
    802019f2:	fffff097          	auipc	ra,0xfffff
    802019f6:	0d8080e7          	jalr	216(ra) # 80200aca <printf>
    pageAlloc(&p);
    802019fa:	fa840513          	addi	a0,s0,-88
    802019fe:	00000097          	auipc	ra,0x0
    80201a02:	280080e7          	jalr	640(ra) # 80201c7e <pageAlloc>
    return page - pages;
    80201a06:	fa843583          	ld	a1,-88(s0)
    80201a0a:	413585b3          	sub	a1,a1,s3
    80201a0e:	858d                	srai	a1,a1,0x3
    80201a10:	032585b3          	mul	a1,a1,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201a14:	00c5959b          	slliw	a1,a1,0xc
    80201a18:	1582                	slli	a1,a1,0x20
    80201a1a:	9181                	srli	a1,a1,0x20
    printf("alloced page2:  %lx\n", page2pa(p));
    80201a1c:	95a6                	add	a1,a1,s1
    80201a1e:	0000c517          	auipc	a0,0xc
    80201a22:	a9a50513          	addi	a0,a0,-1382 # 8020d4b8 <textEnd+0x4b8>
    80201a26:	fffff097          	auipc	ra,0xfffff
    80201a2a:	0a4080e7          	jalr	164(ra) # 80200aca <printf>
    return page - pages;
    80201a2e:	fa843603          	ld	a2,-88(s0)
    80201a32:	41360633          	sub	a2,a2,s3
    80201a36:	860d                	srai	a2,a2,0x3
    80201a38:	03260633          	mul	a2,a2,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201a3c:	00c6161b          	slliw	a2,a2,0xc
    80201a40:	1602                	slli	a2,a2,0x20
    80201a42:	9201                	srli	a2,a2,0x20
    pageInsert(kernelPageDirectory, 1ll << 35, page2pa(p), PTE_READ | PTE_WRITE);
    80201a44:	4699                	li	a3,6
    80201a46:	9626                	add	a2,a2,s1
    80201a48:	85d2                	mv	a1,s4
    80201a4a:	00438517          	auipc	a0,0x438
    80201a4e:	5b650513          	addi	a0,a0,1462 # 8063a000 <_pgdir>
    80201a52:	00000097          	auipc	ra,0x0
    80201a56:	5c8080e7          	jalr	1480(ra) # 8020201a <pageInsert>
    return page - pages;
    80201a5a:	fa843783          	ld	a5,-88(s0)
    80201a5e:	413787b3          	sub	a5,a5,s3
    80201a62:	878d                	srai	a5,a5,0x3
    80201a64:	032787b3          	mul	a5,a5,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201a68:	00c7979b          	slliw	a5,a5,0xc
    80201a6c:	1782                	slli	a5,a5,0x20
    80201a6e:	9381                	srli	a5,a5,0x20
    *((u32*)page2pa(p)) = 65536;
    80201a70:	97a6                	add	a5,a5,s1
    80201a72:	6741                	lui	a4,0x10
    80201a74:	c398                	sw	a4,0(a5)
    printf("value1 of %lx:  %d\n", 1ll << 35, *((u32*)(1ll<<35)));
    80201a76:	000a2603          	lw	a2,0(s4)
    80201a7a:	85d2                	mv	a1,s4
    80201a7c:	0000c517          	auipc	a0,0xc
    80201a80:	a2450513          	addi	a0,a0,-1500 # 8020d4a0 <textEnd+0x4a0>
    80201a84:	fffff097          	auipc	ra,0xfffff
    80201a88:	046080e7          	jalr	70(ra) # 80200aca <printf>
    testMemory();
    printf("Test memory finish!\n");
    80201a8c:	0000c517          	auipc	a0,0xc
    80201a90:	a4450513          	addi	a0,a0,-1468 # 8020d4d0 <textEnd+0x4d0>
    80201a94:	fffff097          	auipc	ra,0xfffff
    80201a98:	036080e7          	jalr	54(ra) # 80200aca <printf>
}
    80201a9c:	60e6                	ld	ra,88(sp)
    80201a9e:	6446                	ld	s0,80(sp)
    80201aa0:	64a6                	ld	s1,72(sp)
    80201aa2:	6906                	ld	s2,64(sp)
    80201aa4:	79e2                	ld	s3,56(sp)
    80201aa6:	7a42                	ld	s4,48(sp)
    80201aa8:	7aa2                	ld	s5,40(sp)
    80201aaa:	7b02                	ld	s6,32(sp)
    80201aac:	6be2                	ld	s7,24(sp)
    80201aae:	6125                	addi	sp,sp,96
    80201ab0:	8082                	ret
    LIST_INIT(&freePages);
    80201ab2:	002a1797          	auipc	a5,0x2a1
    80201ab6:	9c07b323          	sd	zero,-1594(a5) # 804a2478 <freePages>
    for (i = 0; i < n; i++) {
    80201aba:	86a6                	mv	a3,s1
    80201abc:	b10d                	j	802016de <memoryInit+0x7c>

0000000080201abe <bcopy>:

void bcopy(void *src, void *dst, u32 len) {
    80201abe:	1141                	addi	sp,sp,-16
    80201ac0:	e422                	sd	s0,8(sp)
    80201ac2:	0800                	addi	s0,sp,16
    void *finish = src + len;
    80201ac4:	1602                	slli	a2,a2,0x20
    80201ac6:	9201                	srli	a2,a2,0x20
    80201ac8:	962a                	add	a2,a2,a0

    while (src < finish) {
    80201aca:	00c57a63          	bgeu	a0,a2,80201ade <bcopy+0x20>
        *(u8*)dst = *(u8*)src;
    80201ace:	00054783          	lbu	a5,0(a0)
    80201ad2:	00f58023          	sb	a5,0(a1) # 4000000 <_start-0x7c200000>
        src++;
    80201ad6:	0505                	addi	a0,a0,1
        dst++;
    80201ad8:	0585                	addi	a1,a1,1
    while (src < finish) {
    80201ada:	fea61ae3          	bne	a2,a0,80201ace <bcopy+0x10>
    }
}
    80201ade:	6422                	ld	s0,8(sp)
    80201ae0:	0141                	addi	sp,sp,16
    80201ae2:	8082                	ret

0000000080201ae4 <bzero>:

void bzero(void *start, u32 len) {
    80201ae4:	1141                	addi	sp,sp,-16
    80201ae6:	e422                	sd	s0,8(sp)
    80201ae8:	0800                	addi	s0,sp,16
    void *finish = start + len;
    80201aea:	02059713          	slli	a4,a1,0x20
    80201aee:	9301                	srli	a4,a4,0x20
    80201af0:	972a                	add	a4,a4,a0

    if (len <= 7) {
    80201af2:	479d                	li	a5,7
    80201af4:	04b7f463          	bgeu	a5,a1,80201b3c <bzero+0x58>
        while (start < finish) {
            *(u8*)start++ = 0;
        }
        return;
    }
    while (((u64) start) & 7) {
    80201af8:	00757793          	andi	a5,a0,7
    80201afc:	c799                	beqz	a5,80201b0a <bzero+0x26>
        *(u8*)start++ = 0;
    80201afe:	0505                	addi	a0,a0,1
    80201b00:	fe050fa3          	sb	zero,-1(a0)
    while (((u64) start) & 7) {
    80201b04:	00757793          	andi	a5,a0,7
    80201b08:	fbfd                	bnez	a5,80201afe <bzero+0x1a>
    }
    while (start + 7 < finish) {
    80201b0a:	00750793          	addi	a5,a0,7
    80201b0e:	02e7ff63          	bgeu	a5,a4,80201b4c <bzero+0x68>
    80201b12:	ff870793          	addi	a5,a4,-8 # fff8 <_start-0x801f0008>
    80201b16:	8f89                	sub	a5,a5,a0
    80201b18:	9be1                	andi	a5,a5,-8
    80201b1a:	07a1                	addi	a5,a5,8
    80201b1c:	97aa                	add	a5,a5,a0
        *(u64*)start = 0;
    80201b1e:	00053023          	sd	zero,0(a0)
        start += 8;
    80201b22:	0521                	addi	a0,a0,8
    while (start + 7 < finish) {
    80201b24:	fef51de3          	bne	a0,a5,80201b1e <bzero+0x3a>
    }
    while (start < finish) {
    80201b28:	00e7f763          	bgeu	a5,a4,80201b36 <bzero+0x52>
        *(u8*)start++ = 0;
    80201b2c:	0785                	addi	a5,a5,1
    80201b2e:	fe078fa3          	sb	zero,-1(a5)
    while (start < finish) {
    80201b32:	fef71de3          	bne	a4,a5,80201b2c <bzero+0x48>
    }
    80201b36:	6422                	ld	s0,8(sp)
    80201b38:	0141                	addi	sp,sp,16
    80201b3a:	8082                	ret
        while (start < finish) {
    80201b3c:	fee57de3          	bgeu	a0,a4,80201b36 <bzero+0x52>
            *(u8*)start++ = 0;
    80201b40:	0505                	addi	a0,a0,1
    80201b42:	fe050fa3          	sb	zero,-1(a0)
        while (start < finish) {
    80201b46:	fea71de3          	bne	a4,a0,80201b40 <bzero+0x5c>
    80201b4a:	b7f5                	j	80201b36 <bzero+0x52>
    while (start + 7 < finish) {
    80201b4c:	87aa                	mv	a5,a0
    80201b4e:	bfe9                	j	80201b28 <bzero+0x44>

0000000080201b50 <paDecreaseRef>:
        LIST_INSERT_HEAD(&freePages, page, link);
        releaseLock(&pageListLock);
    }
}

static void paDecreaseRef(u64 pa) {
    80201b50:	1101                	addi	sp,sp,-32
    80201b52:	ec06                	sd	ra,24(sp)
    80201b54:	e822                	sd	s0,16(sp)
    80201b56:	e426                	sd	s1,8(sp)
    80201b58:	1000                	addi	s0,sp,32
}

inline PhysicalPage* pa2page(u64 pa) {
    if (pa == 0)
    80201b5a:	cd21                	beqz	a0,80201bb2 <paDecreaseRef+0x62>
        return NULL;
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80201b5c:	800007b7          	lui	a5,0x80000
    80201b60:	953e                	add	a0,a0,a5
    80201b62:	8131                	srli	a0,a0,0xc
    return pages + ppn;
    80201b64:	1502                	slli	a0,a0,0x20
    80201b66:	9101                	srli	a0,a0,0x20
    80201b68:	00151493          	slli	s1,a0,0x1
    80201b6c:	94aa                	add	s1,s1,a0
    80201b6e:	048e                	slli	s1,s1,0x3
    80201b70:	001e1517          	auipc	a0,0x1e1
    80201b74:	90850513          	addi	a0,a0,-1784 # 803e2478 <pages>
    80201b78:	94aa                	add	s1,s1,a0
    PhysicalPage *page = pa2page(pa);
    page->ref--;
    80201b7a:	489c                	lw	a5,16(s1)
    80201b7c:	37fd                	addiw	a5,a5,-1
    80201b7e:	0007869b          	sext.w	a3,a5
    80201b82:	c89c                	sw	a5,16(s1)
    assert(page->ref==0);
    80201b84:	0016b693          	seqz	a3,a3
    80201b88:	0000c617          	auipc	a2,0xc
    80201b8c:	a3860613          	addi	a2,a2,-1480 # 8020d5c0 <__func__.1794>
    80201b90:	07400593          	li	a1,116
    80201b94:	0000c517          	auipc	a0,0xc
    80201b98:	95450513          	addi	a0,a0,-1708 # 8020d4e8 <textEnd+0x4e8>
    80201b9c:	fffff097          	auipc	ra,0xfffff
    80201ba0:	030080e7          	jalr	48(ra) # 80200bcc <_assert_>
    if (page->ref == 0) {
    80201ba4:	489c                	lw	a5,16(s1)
    80201ba6:	cb81                	beqz	a5,80201bb6 <paDecreaseRef+0x66>
        acquireLock(&pageListLock);
        LIST_INSERT_HEAD(&freePages, page, link);
        releaseLock(&pageListLock);
    }
}
    80201ba8:	60e2                	ld	ra,24(sp)
    80201baa:	6442                	ld	s0,16(sp)
    80201bac:	64a2                	ld	s1,8(sp)
    80201bae:	6105                	addi	sp,sp,32
    80201bb0:	8082                	ret
        return NULL;
    80201bb2:	4481                	li	s1,0
    80201bb4:	b7d9                	j	80201b7a <paDecreaseRef+0x2a>
        acquireLock(&pageListLock);
    80201bb6:	002a1517          	auipc	a0,0x2a1
    80201bba:	8ca50513          	addi	a0,a0,-1846 # 804a2480 <pageListLock>
    80201bbe:	00004097          	auipc	ra,0x4
    80201bc2:	5a6080e7          	jalr	1446(ra) # 80206164 <acquireLock>
        LIST_INSERT_HEAD(&freePages, page, link);
    80201bc6:	002a1797          	auipc	a5,0x2a1
    80201bca:	8b27b783          	ld	a5,-1870(a5) # 804a2478 <freePages>
    80201bce:	e09c                	sd	a5,0(s1)
    80201bd0:	c391                	beqz	a5,80201bd4 <paDecreaseRef+0x84>
    80201bd2:	e784                	sd	s1,8(a5)
    80201bd4:	002a1797          	auipc	a5,0x2a1
    80201bd8:	8a478793          	addi	a5,a5,-1884 # 804a2478 <freePages>
    80201bdc:	e384                	sd	s1,0(a5)
    80201bde:	e49c                	sd	a5,8(s1)
        releaseLock(&pageListLock);
    80201be0:	002a1517          	auipc	a0,0x2a1
    80201be4:	8a050513          	addi	a0,a0,-1888 # 804a2480 <pageListLock>
    80201be8:	00004097          	auipc	ra,0x4
    80201bec:	5f8080e7          	jalr	1528(ra) # 802061e0 <releaseLock>
}
    80201bf0:	bf65                	j	80201ba8 <paDecreaseRef+0x58>

0000000080201bf2 <pageLockInit>:
inline void pageLockInit(void) {
    80201bf2:	1141                	addi	sp,sp,-16
    80201bf4:	e406                	sd	ra,8(sp)
    80201bf6:	e022                	sd	s0,0(sp)
    80201bf8:	0800                	addi	s0,sp,16
    initLock(&pageListLock, "pageListLock");
    80201bfa:	0000c597          	auipc	a1,0xc
    80201bfe:	8f658593          	addi	a1,a1,-1802 # 8020d4f0 <textEnd+0x4f0>
    80201c02:	002a1517          	auipc	a0,0x2a1
    80201c06:	87e50513          	addi	a0,a0,-1922 # 804a2480 <pageListLock>
    80201c0a:	00004097          	auipc	ra,0x4
    80201c0e:	510080e7          	jalr	1296(ra) # 8020611a <initLock>
    initLock(&cowBufferLock, "cowBufferLock");
    80201c12:	0000c597          	auipc	a1,0xc
    80201c16:	8ee58593          	addi	a1,a1,-1810 # 8020d500 <textEnd+0x500>
    80201c1a:	002a1517          	auipc	a0,0x2a1
    80201c1e:	87e50513          	addi	a0,a0,-1922 # 804a2498 <cowBufferLock>
    80201c22:	00004097          	auipc	ra,0x4
    80201c26:	4f8080e7          	jalr	1272(ra) # 8020611a <initLock>
}
    80201c2a:	60a2                	ld	ra,8(sp)
    80201c2c:	6402                	ld	s0,0(sp)
    80201c2e:	0141                	addi	sp,sp,16
    80201c30:	8082                	ret

0000000080201c32 <countFreePages>:
int countFreePages() {
    80201c32:	1101                	addi	sp,sp,-32
    80201c34:	ec06                	sd	ra,24(sp)
    80201c36:	e822                	sd	s0,16(sp)
    80201c38:	e426                	sd	s1,8(sp)
    80201c3a:	1000                	addi	s0,sp,32
    acquireLock(&pageListLock);
    80201c3c:	002a1517          	auipc	a0,0x2a1
    80201c40:	84450513          	addi	a0,a0,-1980 # 804a2480 <pageListLock>
    80201c44:	00004097          	auipc	ra,0x4
    80201c48:	520080e7          	jalr	1312(ra) # 80206164 <acquireLock>
    LIST_FOREACH(page, &freePages, link)
    80201c4c:	002a1797          	auipc	a5,0x2a1
    80201c50:	82c7b783          	ld	a5,-2004(a5) # 804a2478 <freePages>
    80201c54:	c39d                	beqz	a5,80201c7a <countFreePages+0x48>
    int count = 0;
    80201c56:	4481                	li	s1,0
        count++;
    80201c58:	2485                	addiw	s1,s1,1
    LIST_FOREACH(page, &freePages, link)
    80201c5a:	639c                	ld	a5,0(a5)
    80201c5c:	fff5                	bnez	a5,80201c58 <countFreePages+0x26>
    releaseLock(&pageListLock);
    80201c5e:	002a1517          	auipc	a0,0x2a1
    80201c62:	82250513          	addi	a0,a0,-2014 # 804a2480 <pageListLock>
    80201c66:	00004097          	auipc	ra,0x4
    80201c6a:	57a080e7          	jalr	1402(ra) # 802061e0 <releaseLock>
}
    80201c6e:	8526                	mv	a0,s1
    80201c70:	60e2                	ld	ra,24(sp)
    80201c72:	6442                	ld	s0,16(sp)
    80201c74:	64a2                	ld	s1,8(sp)
    80201c76:	6105                	addi	sp,sp,32
    80201c78:	8082                	ret
    int count = 0;
    80201c7a:	4481                	li	s1,0
    80201c7c:	b7cd                	j	80201c5e <countFreePages+0x2c>

0000000080201c7e <pageAlloc>:
int pageAlloc(PhysicalPage **pp) {
    80201c7e:	1101                	addi	sp,sp,-32
    80201c80:	ec06                	sd	ra,24(sp)
    80201c82:	e822                	sd	s0,16(sp)
    80201c84:	e426                	sd	s1,8(sp)
    80201c86:	e04a                	sd	s2,0(sp)
    80201c88:	1000                	addi	s0,sp,32
    80201c8a:	892a                	mv	s2,a0
    acquireLock(&pageListLock);
    80201c8c:	002a0517          	auipc	a0,0x2a0
    80201c90:	7f450513          	addi	a0,a0,2036 # 804a2480 <pageListLock>
    80201c94:	00004097          	auipc	ra,0x4
    80201c98:	4d0080e7          	jalr	1232(ra) # 80206164 <acquireLock>
    if ((page = LIST_FIRST(&freePages)) != NULL) {
    80201c9c:	002a0497          	auipc	s1,0x2a0
    80201ca0:	7dc4b483          	ld	s1,2012(s1) # 804a2478 <freePages>
    80201ca4:	c4a5                	beqz	s1,80201d0c <pageAlloc+0x8e>
        *pp = page;
    80201ca6:	00993023          	sd	s1,0(s2)
    asm volatile("mv %0, tp" : "=r" (x) );
    80201caa:	8792                	mv	a5,tp
        page->hartId = r_hartid();
    80201cac:	c8dc                	sw	a5,20(s1)
        LIST_REMOVE(page, link);
    80201cae:	609c                	ld	a5,0(s1)
    80201cb0:	c399                	beqz	a5,80201cb6 <pageAlloc+0x38>
    80201cb2:	6498                	ld	a4,8(s1)
    80201cb4:	e798                	sd	a4,8(a5)
    80201cb6:	649c                	ld	a5,8(s1)
    80201cb8:	6098                	ld	a4,0(s1)
    80201cba:	e398                	sd	a4,0(a5)
        releaseLock(&pageListLock);
    80201cbc:	002a0517          	auipc	a0,0x2a0
    80201cc0:	7c450513          	addi	a0,a0,1988 # 804a2480 <pageListLock>
    80201cc4:	00004097          	auipc	ra,0x4
    80201cc8:	51c080e7          	jalr	1308(ra) # 802061e0 <releaseLock>
    return page - pages;
    80201ccc:	001e0797          	auipc	a5,0x1e0
    80201cd0:	7ac78793          	addi	a5,a5,1964 # 803e2478 <pages>
    80201cd4:	40f487b3          	sub	a5,s1,a5
    80201cd8:	878d                	srai	a5,a5,0x3
    80201cda:	0000d517          	auipc	a0,0xd
    80201cde:	89653503          	ld	a0,-1898(a0) # 8020e570 <__func__.1590+0x8>
    80201ce2:	02a787b3          	mul	a5,a5,a0
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201ce6:	00c7979b          	slliw	a5,a5,0xc
    80201cea:	1782                	slli	a5,a5,0x20
    80201cec:	9381                	srli	a5,a5,0x20
        bzero((void*)page2pa(page), PAGE_SIZE);
    80201cee:	6585                	lui	a1,0x1
    80201cf0:	4505                	li	a0,1
    80201cf2:	057e                	slli	a0,a0,0x1f
    80201cf4:	953e                	add	a0,a0,a5
    80201cf6:	00000097          	auipc	ra,0x0
    80201cfa:	dee080e7          	jalr	-530(ra) # 80201ae4 <bzero>
        return 0;
    80201cfe:	4501                	li	a0,0
}
    80201d00:	60e2                	ld	ra,24(sp)
    80201d02:	6442                	ld	s0,16(sp)
    80201d04:	64a2                	ld	s1,8(sp)
    80201d06:	6902                	ld	s2,0(sp)
    80201d08:	6105                	addi	sp,sp,32
    80201d0a:	8082                	ret
    releaseLock(&pageListLock);
    80201d0c:	002a0517          	auipc	a0,0x2a0
    80201d10:	77450513          	addi	a0,a0,1908 # 804a2480 <pageListLock>
    80201d14:	00004097          	auipc	ra,0x4
    80201d18:	4cc080e7          	jalr	1228(ra) # 802061e0 <releaseLock>
    printf("there's no physical page left!\n");
    80201d1c:	0000b517          	auipc	a0,0xb
    80201d20:	7f450513          	addi	a0,a0,2036 # 8020d510 <textEnd+0x510>
    80201d24:	fffff097          	auipc	ra,0xfffff
    80201d28:	da6080e7          	jalr	-602(ra) # 80200aca <printf>
    *pp = NULL;
    80201d2c:	00093023          	sd	zero,0(s2)
    return -NO_FREE_MEMORY;
    80201d30:	5571                	li	a0,-4
    80201d32:	b7f9                	j	80201d00 <pageAlloc+0x82>

0000000080201d34 <pageWalk>:
static int pageWalk(u64 *pgdir, u64 va, bool create, u64 **pte) {
    80201d34:	7159                	addi	sp,sp,-112
    80201d36:	f486                	sd	ra,104(sp)
    80201d38:	f0a2                	sd	s0,96(sp)
    80201d3a:	eca6                	sd	s1,88(sp)
    80201d3c:	e8ca                	sd	s2,80(sp)
    80201d3e:	e4ce                	sd	s3,72(sp)
    80201d40:	e0d2                	sd	s4,64(sp)
    80201d42:	fc56                	sd	s5,56(sp)
    80201d44:	f85a                	sd	s6,48(sp)
    80201d46:	f45e                	sd	s7,40(sp)
    80201d48:	f062                	sd	s8,32(sp)
    80201d4a:	ec66                	sd	s9,24(sp)
    80201d4c:	e86a                	sd	s10,16(sp)
    80201d4e:	1880                	addi	s0,sp,112
    80201d50:	892e                	mv	s2,a1
    80201d52:	8b32                	mv	s6,a2
    80201d54:	8ab6                	mv	s5,a3
    80201d56:	49f9                	li	s3,30
    return page - pages;
    80201d58:	001e0d17          	auipc	s10,0x1e0
    80201d5c:	720d0d13          	addi	s10,s10,1824 # 803e2478 <pages>
    80201d60:	0000dc97          	auipc	s9,0xd
    80201d64:	810c8c93          	addi	s9,s9,-2032 # 8020e570 <__func__.1590+0x8>
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201d68:	4b85                	li	s7,1
    80201d6a:	0bfe                	slli	s7,s7,0x1f
        addr = (u64*)PTE2PA(*addr);
    80201d6c:	fff00a37          	lui	s4,0xfff00
    80201d70:	008a5a13          	srli	s4,s4,0x8
    for (level = 2; level > 0; level--) {
    80201d74:	4c31                	li	s8,12
    80201d76:	a821                	j	80201d8e <pageWalk+0x5a>
                *pte = NULL;
    80201d78:	000ab023          	sd	zero,0(s5) # 1000 <_start-0x801ff000>
                return 0;
    80201d7c:	4501                	li	a0,0
    80201d7e:	a89d                	j	80201df4 <pageWalk+0xc0>
        addr = (u64*)PTE2PA(*addr);
    80201d80:	6088                	ld	a0,0(s1)
    80201d82:	050a                	slli	a0,a0,0x2
    80201d84:	01457533          	and	a0,a0,s4
    for (level = 2; level > 0; level--) {
    80201d88:	39dd                	addiw	s3,s3,-9
    80201d8a:	05898c63          	beq	s3,s8,80201de2 <pageWalk+0xae>
        addr += GET_PAGE_TABLE_INDEX(va, level);
    80201d8e:	013954b3          	srl	s1,s2,s3
    80201d92:	1ff4f493          	andi	s1,s1,511
    80201d96:	048e                	slli	s1,s1,0x3
    80201d98:	94aa                	add	s1,s1,a0
        if (!(*addr) & PTE_VALID) {
    80201d9a:	609c                	ld	a5,0(s1)
    80201d9c:	f3f5                	bnez	a5,80201d80 <pageWalk+0x4c>
            if (!create) {
    80201d9e:	fc0b0de3          	beqz	s6,80201d78 <pageWalk+0x44>
            int ret = pageAlloc(&pp);
    80201da2:	f9840513          	addi	a0,s0,-104
    80201da6:	00000097          	auipc	ra,0x0
    80201daa:	ed8080e7          	jalr	-296(ra) # 80201c7e <pageAlloc>
            if (ret < 0) {
    80201dae:	04054363          	bltz	a0,80201df4 <pageWalk+0xc0>
    return page - pages;
    80201db2:	f9843783          	ld	a5,-104(s0)
    80201db6:	41a787b3          	sub	a5,a5,s10
    80201dba:	878d                	srai	a5,a5,0x3
    80201dbc:	000cb703          	ld	a4,0(s9)
    80201dc0:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201dc4:	00c7979b          	slliw	a5,a5,0xc
    80201dc8:	1782                	slli	a5,a5,0x20
    80201dca:	9381                	srli	a5,a5,0x20
    80201dcc:	97de                	add	a5,a5,s7
#define PTE2PERM(pte) (((u64)(pte)) & ~((1ull << 54) - (1ull << 10)))
#define PTE2PA(pte) (((((u64)(pte)) & ((1ull << 54) - (1ull << 10))) >> PERM_WIDTH) << PAGE_SHIFT)
#define PA2PTE(pa) ((((u64)(pa)) >> PAGE_SHIFT) << PERM_WIDTH)

inline u64 page2pte(PhysicalPage *page) {
    return (page2pa(page) >> PAGE_SHIFT) << PERM_WIDTH;
    80201dce:	8389                	srli	a5,a5,0x2
            (*addr) = page2pte(pp) | PTE_VALID;
    80201dd0:	0017e793          	ori	a5,a5,1
    80201dd4:	e09c                	sd	a5,0(s1)
            pp->ref++;
    80201dd6:	f9843703          	ld	a4,-104(s0)
    80201dda:	4b1c                	lw	a5,16(a4)
    80201ddc:	2785                	addiw	a5,a5,1
    80201dde:	cb1c                	sw	a5,16(a4)
    80201de0:	b745                	j	80201d80 <pageWalk+0x4c>
    *pte = addr + GET_PAGE_TABLE_INDEX(va, 0);
    80201de2:	00c95493          	srli	s1,s2,0xc
    80201de6:	1ff4f493          	andi	s1,s1,511
    80201dea:	048e                	slli	s1,s1,0x3
    80201dec:	9526                	add	a0,a0,s1
    80201dee:	00aab023          	sd	a0,0(s5)
    return 0;
    80201df2:	4501                	li	a0,0
}
    80201df4:	70a6                	ld	ra,104(sp)
    80201df6:	7406                	ld	s0,96(sp)
    80201df8:	64e6                	ld	s1,88(sp)
    80201dfa:	6946                	ld	s2,80(sp)
    80201dfc:	69a6                	ld	s3,72(sp)
    80201dfe:	6a06                	ld	s4,64(sp)
    80201e00:	7ae2                	ld	s5,56(sp)
    80201e02:	7b42                	ld	s6,48(sp)
    80201e04:	7ba2                	ld	s7,40(sp)
    80201e06:	7c02                	ld	s8,32(sp)
    80201e08:	6ce2                	ld	s9,24(sp)
    80201e0a:	6d42                	ld	s10,16(sp)
    80201e0c:	6165                	addi	sp,sp,112
    80201e0e:	8082                	ret

0000000080201e10 <pageLookup>:
u64 pageLookup(u64 *pgdir, u64 va, u64 **pte) {
    80201e10:	7179                	addi	sp,sp,-48
    80201e12:	f406                	sd	ra,40(sp)
    80201e14:	f022                	sd	s0,32(sp)
    80201e16:	ec26                	sd	s1,24(sp)
    80201e18:	1800                	addi	s0,sp,48
    80201e1a:	84b2                	mv	s1,a2
    pageWalk(pgdir, va, false, &entry);
    80201e1c:	fd840693          	addi	a3,s0,-40
    80201e20:	4601                	li	a2,0
    80201e22:	00000097          	auipc	ra,0x0
    80201e26:	f12080e7          	jalr	-238(ra) # 80201d34 <pageWalk>
    if (entry == NULL || !(*entry & PTE_VALID)) {
    80201e2a:	fd843783          	ld	a5,-40(s0)
    80201e2e:	c38d                	beqz	a5,80201e50 <pageLookup+0x40>
    80201e30:	6388                	ld	a0,0(a5)
    80201e32:	8905                	andi	a0,a0,1
    80201e34:	c909                	beqz	a0,80201e46 <pageLookup+0x36>
    if (pte) {
    80201e36:	c091                	beqz	s1,80201e3a <pageLookup+0x2a>
        *pte = entry;
    80201e38:	e09c                	sd	a5,0(s1)
    return PTE2PA(*entry);
    80201e3a:	6388                	ld	a0,0(a5)
    80201e3c:	050a                	slli	a0,a0,0x2
    80201e3e:	fff007b7          	lui	a5,0xfff00
    80201e42:	83a1                	srli	a5,a5,0x8
    80201e44:	8d7d                	and	a0,a0,a5
}
    80201e46:	70a2                	ld	ra,40(sp)
    80201e48:	7402                	ld	s0,32(sp)
    80201e4a:	64e2                	ld	s1,24(sp)
    80201e4c:	6145                	addi	sp,sp,48
    80201e4e:	8082                	ret
        return 0;
    80201e50:	4501                	li	a0,0
    80201e52:	bfd5                	j	80201e46 <pageLookup+0x36>

0000000080201e54 <pageFree>:
    if (page->ref > 0) {
    80201e54:	491c                	lw	a5,16(a0)
    80201e56:	c391                	beqz	a5,80201e5a <pageFree+0x6>
    80201e58:	8082                	ret
void pageFree(PhysicalPage *page) {
    80201e5a:	1101                	addi	sp,sp,-32
    80201e5c:	ec06                	sd	ra,24(sp)
    80201e5e:	e822                	sd	s0,16(sp)
    80201e60:	e426                	sd	s1,8(sp)
    80201e62:	1000                	addi	s0,sp,32
    80201e64:	84aa                	mv	s1,a0
        acquireLock(&pageListLock);
    80201e66:	002a0517          	auipc	a0,0x2a0
    80201e6a:	61a50513          	addi	a0,a0,1562 # 804a2480 <pageListLock>
    80201e6e:	00004097          	auipc	ra,0x4
    80201e72:	2f6080e7          	jalr	758(ra) # 80206164 <acquireLock>
        LIST_INSERT_HEAD(&freePages, page, link);
    80201e76:	002a0797          	auipc	a5,0x2a0
    80201e7a:	6027b783          	ld	a5,1538(a5) # 804a2478 <freePages>
    80201e7e:	e09c                	sd	a5,0(s1)
    80201e80:	c391                	beqz	a5,80201e84 <pageFree+0x30>
    80201e82:	e784                	sd	s1,8(a5)
    80201e84:	002a0797          	auipc	a5,0x2a0
    80201e88:	5f478793          	addi	a5,a5,1524 # 804a2478 <freePages>
    80201e8c:	e384                	sd	s1,0(a5)
    80201e8e:	e49c                	sd	a5,8(s1)
        releaseLock(&pageListLock);
    80201e90:	002a0517          	auipc	a0,0x2a0
    80201e94:	5f050513          	addi	a0,a0,1520 # 804a2480 <pageListLock>
    80201e98:	00004097          	auipc	ra,0x4
    80201e9c:	348080e7          	jalr	840(ra) # 802061e0 <releaseLock>
}
    80201ea0:	60e2                	ld	ra,24(sp)
    80201ea2:	6442                	ld	s0,16(sp)
    80201ea4:	64a2                	ld	s1,8(sp)
    80201ea6:	6105                	addi	sp,sp,32
    80201ea8:	8082                	ret

0000000080201eaa <pageRemove>:
int pageRemove(u64 *pgdir, u64 va) {
    80201eaa:	1101                	addi	sp,sp,-32
    80201eac:	ec06                	sd	ra,24(sp)
    80201eae:	e822                	sd	s0,16(sp)
    80201eb0:	1000                	addi	s0,sp,32
    u64 pa = pageLookup(pgdir, va, &pte);
    80201eb2:	fe840613          	addi	a2,s0,-24
    80201eb6:	00000097          	auipc	ra,0x0
    80201eba:	f5a080e7          	jalr	-166(ra) # 80201e10 <pageLookup>
    if (!pte) {
    80201ebe:	fe843783          	ld	a5,-24(s0)
    80201ec2:	c7a1                	beqz	a5,80201f0a <pageRemove+0x60>
    if (pa < PHYSICAL_ADDRESS_BASE || pa >= PHYSICAL_MEMORY_TOP) {
    80201ec4:	800007b7          	lui	a5,0x80000
    80201ec8:	953e                	add	a0,a0,a5
    80201eca:	080007b7          	lui	a5,0x8000
    80201ece:	04f57063          	bgeu	a0,a5,80201f0e <pageRemove+0x64>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80201ed2:	8131                	srli	a0,a0,0xc
    return pages + ppn;
    80201ed4:	00151793          	slli	a5,a0,0x1
    80201ed8:	953e                	add	a0,a0,a5
    80201eda:	050e                	slli	a0,a0,0x3
    80201edc:	001e0797          	auipc	a5,0x1e0
    80201ee0:	59c78793          	addi	a5,a5,1436 # 803e2478 <pages>
    80201ee4:	953e                	add	a0,a0,a5
    page->ref--;
    80201ee6:	491c                	lw	a5,16(a0)
    80201ee8:	37fd                	addiw	a5,a5,-1
    80201eea:	c91c                	sw	a5,16(a0)
    pageFree(page);
    80201eec:	00000097          	auipc	ra,0x0
    80201ef0:	f68080e7          	jalr	-152(ra) # 80201e54 <pageFree>
    *pte = 0;
    80201ef4:	fe843783          	ld	a5,-24(s0)
    80201ef8:	0007b023          	sd	zero,0(a5)
	asm volatile("sfence.vma");
    80201efc:	12000073          	sfence.vma
    return 0;
    80201f00:	4501                	li	a0,0
}
    80201f02:	60e2                	ld	ra,24(sp)
    80201f04:	6442                	ld	s0,16(sp)
    80201f06:	6105                	addi	sp,sp,32
    80201f08:	8082                	ret
        return -1;
    80201f0a:	557d                	li	a0,-1
    80201f0c:	bfdd                	j	80201f02 <pageRemove+0x58>
        return -1;
    80201f0e:	557d                	li	a0,-1
    80201f10:	bfcd                	j	80201f02 <pageRemove+0x58>

0000000080201f12 <pgdirFree>:

void pgdirFree(u64* pgdir) {
    80201f12:	7175                	addi	sp,sp,-144
    80201f14:	e506                	sd	ra,136(sp)
    80201f16:	e122                	sd	s0,128(sp)
    80201f18:	fca6                	sd	s1,120(sp)
    80201f1a:	f8ca                	sd	s2,112(sp)
    80201f1c:	f4ce                	sd	s3,104(sp)
    80201f1e:	f0d2                	sd	s4,96(sp)
    80201f20:	ecd6                	sd	s5,88(sp)
    80201f22:	e8da                	sd	s6,80(sp)
    80201f24:	e4de                	sd	s7,72(sp)
    80201f26:	e0e2                	sd	s8,64(sp)
    80201f28:	fc66                	sd	s9,56(sp)
    80201f2a:	f86a                	sd	s10,48(sp)
    80201f2c:	f46e                	sd	s11,40(sp)
    80201f2e:	0900                	addi	s0,sp,144
    80201f30:	8aaa                	mv	s5,a0
   // printf("jaoeifherigh   %lx\n", (u64)pgdir);
    u64 i, j, k;
    u64* pageTable;
    for (i = 0; i < PTE2PT; i++) {
    80201f32:	6785                	lui	a5,0x1
    80201f34:	97aa                	add	a5,a5,a0
    80201f36:	f8f43023          	sd	a5,-128(s0)
    80201f3a:	40a007b3          	neg	a5,a0
    80201f3e:	07ee                	slli	a5,a5,0x1b
    80201f40:	f6f43c23          	sd	a5,-136(s0)
void pgdirFree(u64* pgdir) {
    80201f44:	f8a43423          	sd	a0,-120(s0)
        if (!(pgdir[i] & PTE_VALID))
            continue;
        pageTable = pgdir + i;
        u64* pa = (u64*) PTE2PA(*pageTable);
    80201f48:	fff00d37          	lui	s10,0xfff00
    80201f4c:	008d5d13          	srli	s10,s10,0x8
    80201f50:	6c05                	lui	s8,0x1
    80201f52:	a041                	j	80201fd2 <pgdirFree+0xc0>
        for (j = 0; j < PTE2PT; j++) {
            if (!(pa[j] & PTE_VALID)) 
                continue;
            pageTable = (u64*) pa + j;
            u64* pa2 = (u64*) PTE2PA(*pageTable);
            for (k = 0; k < PTE2PT; k++) {
    80201f54:	04a1                	addi	s1,s1,8
    80201f56:	03248063          	beq	s1,s2,80201f76 <pgdirFree+0x64>
                if (!(pa2[k] & PTE_VALID)) 
    80201f5a:	609c                	ld	a5,0(s1)
    80201f5c:	8b85                	andi	a5,a5,1
    80201f5e:	dbfd                	beqz	a5,80201f54 <pgdirFree+0x42>
                    continue;
                u64 addr = (i << 30) | (j << 21) | (k << 12);
    80201f60:	00949593          	slli	a1,s1,0x9
    80201f64:	95ce                	add	a1,a1,s3
                pageRemove(pgdir, addr);
    80201f66:	0145e5b3          	or	a1,a1,s4
    80201f6a:	8556                	mv	a0,s5
    80201f6c:	00000097          	auipc	ra,0x0
    80201f70:	f3e080e7          	jalr	-194(ra) # 80201eaa <pageRemove>
    80201f74:	b7c5                	j	80201f54 <pgdirFree+0x42>
            }
            pa2[j] = 0;
    80201f76:	017b07b3          	add	a5,s6,s7
    80201f7a:	0007b023          	sd	zero,0(a5) # 1000 <_start-0x801ff000>
            paDecreaseRef((u64) pa2);
    80201f7e:	855a                	mv	a0,s6
    80201f80:	00000097          	auipc	ra,0x0
    80201f84:	bd0080e7          	jalr	-1072(ra) # 80201b50 <paDecreaseRef>
        for (j = 0; j < PTE2PT; j++) {
    80201f88:	0ba1                	addi	s7,s7,8
    80201f8a:	038b8663          	beq	s7,s8,80201fb6 <pgdirFree+0xa4>
            if (!(pa[j] & PTE_VALID)) 
    80201f8e:	017c87b3          	add	a5,s9,s7
    80201f92:	639c                	ld	a5,0(a5)
    80201f94:	0017f713          	andi	a4,a5,1
    80201f98:	db65                	beqz	a4,80201f88 <pgdirFree+0x76>
            u64* pa2 = (u64*) PTE2PA(*pageTable);
    80201f9a:	078a                	slli	a5,a5,0x2
    80201f9c:	01a7fb33          	and	s6,a5,s10
                u64 addr = (i << 30) | (j << 21) | (k << 12);
    80201fa0:	012b9a13          	slli	s4,s7,0x12
    80201fa4:	01ba6a33          	or	s4,s4,s11
    80201fa8:	018b0933          	add	s2,s6,s8
    80201fac:	416009b3          	neg	s3,s6
    80201fb0:	09a6                	slli	s3,s3,0x9
    80201fb2:	84da                	mv	s1,s6
    80201fb4:	b75d                	j	80201f5a <pgdirFree+0x48>
        }
        paDecreaseRef((u64) pa);
    80201fb6:	8566                	mv	a0,s9
    80201fb8:	00000097          	auipc	ra,0x0
    80201fbc:	b98080e7          	jalr	-1128(ra) # 80201b50 <paDecreaseRef>
    for (i = 0; i < PTE2PT; i++) {
    80201fc0:	f8843783          	ld	a5,-120(s0)
    80201fc4:	07a1                	addi	a5,a5,8
    80201fc6:	f8f43423          	sd	a5,-120(s0)
    80201fca:	f8043703          	ld	a4,-128(s0)
    80201fce:	02e78263          	beq	a5,a4,80201ff2 <pgdirFree+0xe0>
        if (!(pgdir[i] & PTE_VALID))
    80201fd2:	f8843683          	ld	a3,-120(s0)
    80201fd6:	629c                	ld	a5,0(a3)
    80201fd8:	0017f713          	andi	a4,a5,1
    80201fdc:	d375                	beqz	a4,80201fc0 <pgdirFree+0xae>
        u64* pa = (u64*) PTE2PA(*pageTable);
    80201fde:	078a                	slli	a5,a5,0x2
    80201fe0:	01a7fcb3          	and	s9,a5,s10
                u64 addr = (i << 30) | (j << 21) | (k << 12);
    80201fe4:	01b69d93          	slli	s11,a3,0x1b
    80201fe8:	f7843783          	ld	a5,-136(s0)
    80201fec:	9dbe                	add	s11,s11,a5
    80201fee:	4b81                	li	s7,0
    80201ff0:	bf79                	j	80201f8e <pgdirFree+0x7c>
    }
    paDecreaseRef((u64) pgdir);
    80201ff2:	8556                	mv	a0,s5
    80201ff4:	00000097          	auipc	ra,0x0
    80201ff8:	b5c080e7          	jalr	-1188(ra) # 80201b50 <paDecreaseRef>
}
    80201ffc:	60aa                	ld	ra,136(sp)
    80201ffe:	640a                	ld	s0,128(sp)
    80202000:	74e6                	ld	s1,120(sp)
    80202002:	7946                	ld	s2,112(sp)
    80202004:	79a6                	ld	s3,104(sp)
    80202006:	7a06                	ld	s4,96(sp)
    80202008:	6ae6                	ld	s5,88(sp)
    8020200a:	6b46                	ld	s6,80(sp)
    8020200c:	6ba6                	ld	s7,72(sp)
    8020200e:	6c06                	ld	s8,64(sp)
    80202010:	7ce2                	ld	s9,56(sp)
    80202012:	7d42                	ld	s10,48(sp)
    80202014:	7da2                	ld	s11,40(sp)
    80202016:	6149                	addi	sp,sp,144
    80202018:	8082                	ret

000000008020201a <pageInsert>:

int pageInsert(u64 *pgdir, u64 va, u64 pa, u64 perm) {
    8020201a:	7139                	addi	sp,sp,-64
    8020201c:	fc06                	sd	ra,56(sp)
    8020201e:	f822                	sd	s0,48(sp)
    80202020:	f426                	sd	s1,40(sp)
    80202022:	f04a                	sd	s2,32(sp)
    80202024:	ec4e                	sd	s3,24(sp)
    80202026:	e852                	sd	s4,16(sp)
    80202028:	0080                	addi	s0,sp,64
    8020202a:	89aa                	mv	s3,a0
    8020202c:	84b2                	mv	s1,a2
    8020202e:	8a36                	mv	s4,a3
    u64 *pte;
    va = DOWN_ALIGN(va, PAGE_SIZE);
    80202030:	797d                	lui	s2,0xfffff
    80202032:	0125f933          	and	s2,a1,s2
    pa = DOWN_ALIGN(pa, PAGE_SIZE);
    perm |= PTE_ACCESSED | PTE_DIRTY;
    int ret = pageWalk(pgdir, va, false, &pte);
    80202036:	fc840693          	addi	a3,s0,-56
    8020203a:	4601                	li	a2,0
    8020203c:	85ca                	mv	a1,s2
    8020203e:	00000097          	auipc	ra,0x0
    80202042:	cf6080e7          	jalr	-778(ra) # 80201d34 <pageWalk>
    if (ret < 0) {
    80202046:	06054663          	bltz	a0,802020b2 <pageInsert+0x98>
        return ret;
    }
    if (pte != NULL && (*pte & PTE_VALID)) {
    8020204a:	fc843783          	ld	a5,-56(s0)
    8020204e:	c781                	beqz	a5,80202056 <pageInsert+0x3c>
    80202050:	639c                	ld	a5,0(a5)
    80202052:	8b85                	andi	a5,a5,1
    80202054:	e7bd                	bnez	a5,802020c2 <pageInsert+0xa8>
        pageRemove(pgdir, va);
    }
    ret = pageWalk(pgdir, va, true, &pte);
    80202056:	fc840693          	addi	a3,s0,-56
    8020205a:	4605                	li	a2,1
    8020205c:	85ca                	mv	a1,s2
    8020205e:	854e                	mv	a0,s3
    80202060:	00000097          	auipc	ra,0x0
    80202064:	cd4080e7          	jalr	-812(ra) # 80201d34 <pageWalk>
    if (ret < 0) {
    80202068:	04054563          	bltz	a0,802020b2 <pageInsert+0x98>
    pa = DOWN_ALIGN(pa, PAGE_SIZE);
    8020206c:	767d                	lui	a2,0xfffff
    8020206e:	8e65                	and	a2,a2,s1
        return ret;
    }
    *pte = PA2PTE(pa) | perm | PTE_VALID;
    80202070:	00265693          	srli	a3,a2,0x2
    80202074:	0146ea33          	or	s4,a3,s4
    80202078:	0c1a6a13          	ori	s4,s4,193
    8020207c:	fc843783          	ld	a5,-56(s0)
    80202080:	0147b023          	sd	s4,0(a5)
    if (pa >= PHYSICAL_ADDRESS_BASE && pa < PHYSICAL_MEMORY_TOP)
    80202084:	800007b7          	lui	a5,0x80000
    80202088:	963e                	add	a2,a2,a5
    8020208a:	080007b7          	lui	a5,0x8000
    8020208e:	00f67f63          	bgeu	a2,a5,802020ac <pageInsert+0x92>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80202092:	00c65793          	srli	a5,a2,0xc
    return pages + ppn;
    80202096:	822d                	srli	a2,a2,0xb
    80202098:	963e                	add	a2,a2,a5
    8020209a:	060e                	slli	a2,a2,0x3
    8020209c:	001e0797          	auipc	a5,0x1e0
    802020a0:	3dc78793          	addi	a5,a5,988 # 803e2478 <pages>
    802020a4:	963e                	add	a2,a2,a5
        pa2page(pa)->ref++;
    802020a6:	4a1c                	lw	a5,16(a2)
    802020a8:	2785                	addiw	a5,a5,1
    802020aa:	ca1c                	sw	a5,16(a2)
    802020ac:	12000073          	sfence.vma
    sfence_vma();
    return 0;
    802020b0:	4501                	li	a0,0
}
    802020b2:	70e2                	ld	ra,56(sp)
    802020b4:	7442                	ld	s0,48(sp)
    802020b6:	74a2                	ld	s1,40(sp)
    802020b8:	7902                	ld	s2,32(sp)
    802020ba:	69e2                	ld	s3,24(sp)
    802020bc:	6a42                	ld	s4,16(sp)
    802020be:	6121                	addi	sp,sp,64
    802020c0:	8082                	ret
        pageRemove(pgdir, va);
    802020c2:	85ca                	mv	a1,s2
    802020c4:	854e                	mv	a0,s3
    802020c6:	00000097          	auipc	ra,0x0
    802020ca:	de4080e7          	jalr	-540(ra) # 80201eaa <pageRemove>
    802020ce:	b761                	j	80202056 <pageInsert+0x3c>

00000000802020d0 <allocPgdir>:

int allocPgdir(PhysicalPage **page) {
    802020d0:	1101                	addi	sp,sp,-32
    802020d2:	ec06                	sd	ra,24(sp)
    802020d4:	e822                	sd	s0,16(sp)
    802020d6:	e426                	sd	s1,8(sp)
    802020d8:	1000                	addi	s0,sp,32
    802020da:	84aa                	mv	s1,a0
    int r;
    if ((r = pageAlloc(page)) < 0) {
    802020dc:	00000097          	auipc	ra,0x0
    802020e0:	ba2080e7          	jalr	-1118(ra) # 80201c7e <pageAlloc>
    802020e4:	00054763          	bltz	a0,802020f2 <allocPgdir+0x22>
        return r;
    }
    (*page)->ref++;
    802020e8:	6098                	ld	a4,0(s1)
    802020ea:	4b1c                	lw	a5,16(a4)
    802020ec:	2785                	addiw	a5,a5,1
    802020ee:	cb1c                	sw	a5,16(a4)
    return 0;
    802020f0:	4501                	li	a0,0
}
    802020f2:	60e2                	ld	ra,24(sp)
    802020f4:	6442                	ld	s0,16(sp)
    802020f6:	64a2                	ld	s1,8(sp)
    802020f8:	6105                	addi	sp,sp,32
    802020fa:	8082                	ret

00000000802020fc <pageout>:

void pageout(u64 *pgdir, u64 badAddr) {
    802020fc:	7179                	addi	sp,sp,-48
    802020fe:	f406                	sd	ra,40(sp)
    80202100:	f022                	sd	s0,32(sp)
    80202102:	ec26                	sd	s1,24(sp)
    80202104:	e84a                	sd	s2,16(sp)
    80202106:	1800                	addi	s0,sp,48
    if (badAddr <= PAGE_SIZE) {
    80202108:	6785                	lui	a5,0x1
    8020210a:	06b7f863          	bgeu	a5,a1,8020217a <pageout+0x7e>
    8020210e:	892a                	mv	s2,a0
    80202110:	84ae                	mv	s1,a1
        panic("^^^^^^^^^^TOO LOW^^^^^^^^^^^\n");
    }
    printf("[Page out]pageout at %lx\n", badAddr);
    80202112:	0000b517          	auipc	a0,0xb
    80202116:	43e50513          	addi	a0,a0,1086 # 8020d550 <textEnd+0x550>
    8020211a:	fffff097          	auipc	ra,0xfffff
    8020211e:	9b0080e7          	jalr	-1616(ra) # 80200aca <printf>
    PhysicalPage *page;
    if (pageAlloc(&page) < 0) {
    80202122:	fd840513          	addi	a0,s0,-40
    80202126:	00000097          	auipc	ra,0x0
    8020212a:	b58080e7          	jalr	-1192(ra) # 80201c7e <pageAlloc>
    8020212e:	06054863          	bltz	a0,8020219e <pageout+0xa2>
    return page - pages;
    80202132:	fd843783          	ld	a5,-40(s0)
    80202136:	001e0717          	auipc	a4,0x1e0
    8020213a:	34270713          	addi	a4,a4,834 # 803e2478 <pages>
    8020213e:	8f99                	sub	a5,a5,a4
    80202140:	878d                	srai	a5,a5,0x3
    80202142:	0000c617          	auipc	a2,0xc
    80202146:	42e63603          	ld	a2,1070(a2) # 8020e570 <__func__.1590+0x8>
    8020214a:	02c787b3          	mul	a5,a5,a2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020214e:	00c7979b          	slliw	a5,a5,0xc
    80202152:	1782                	slli	a5,a5,0x20
    80202154:	9381                	srli	a5,a5,0x20
        panic("");
    }
    if (pageInsert(pgdir, badAddr, page2pa(page), 
    80202156:	46d9                	li	a3,22
    80202158:	4605                	li	a2,1
    8020215a:	067e                	slli	a2,a2,0x1f
    8020215c:	963e                	add	a2,a2,a5
    8020215e:	85a6                	mv	a1,s1
    80202160:	854a                	mv	a0,s2
    80202162:	00000097          	auipc	ra,0x0
    80202166:	eb8080e7          	jalr	-328(ra) # 8020201a <pageInsert>
    8020216a:	04054c63          	bltz	a0,802021c2 <pageout+0xc6>
        PTE_USER | PTE_READ | PTE_WRITE) < 0) {
        panic("");
    }
}
    8020216e:	70a2                	ld	ra,40(sp)
    80202170:	7402                	ld	s0,32(sp)
    80202172:	64e2                	ld	s1,24(sp)
    80202174:	6942                	ld	s2,16(sp)
    80202176:	6145                	addi	sp,sp,48
    80202178:	8082                	ret
        panic("^^^^^^^^^^TOO LOW^^^^^^^^^^^\n");
    8020217a:	0000b697          	auipc	a3,0xb
    8020217e:	3b668693          	addi	a3,a3,950 # 8020d530 <textEnd+0x530>
    80202182:	0000c617          	auipc	a2,0xc
    80202186:	34e60613          	addi	a2,a2,846 # 8020e4d0 <__func__.1833>
    8020218a:	0ba00593          	li	a1,186
    8020218e:	0000b517          	auipc	a0,0xb
    80202192:	35a50513          	addi	a0,a0,858 # 8020d4e8 <textEnd+0x4e8>
    80202196:	fffff097          	auipc	ra,0xfffff
    8020219a:	9c0080e7          	jalr	-1600(ra) # 80200b56 <_panic_>
        panic("");
    8020219e:	0000b697          	auipc	a3,0xb
    802021a2:	53268693          	addi	a3,a3,1330 # 8020d6d0 <__func__.1844+0x100>
    802021a6:	0000c617          	auipc	a2,0xc
    802021aa:	32a60613          	addi	a2,a2,810 # 8020e4d0 <__func__.1833>
    802021ae:	0bf00593          	li	a1,191
    802021b2:	0000b517          	auipc	a0,0xb
    802021b6:	33650513          	addi	a0,a0,822 # 8020d4e8 <textEnd+0x4e8>
    802021ba:	fffff097          	auipc	ra,0xfffff
    802021be:	99c080e7          	jalr	-1636(ra) # 80200b56 <_panic_>
        panic("");
    802021c2:	0000b697          	auipc	a3,0xb
    802021c6:	50e68693          	addi	a3,a3,1294 # 8020d6d0 <__func__.1844+0x100>
    802021ca:	0000c617          	auipc	a2,0xc
    802021ce:	30660613          	addi	a2,a2,774 # 8020e4d0 <__func__.1833>
    802021d2:	0c300593          	li	a1,195
    802021d6:	0000b517          	auipc	a0,0xb
    802021da:	31250513          	addi	a0,a0,786 # 8020d4e8 <textEnd+0x4e8>
    802021de:	fffff097          	auipc	ra,0xfffff
    802021e2:	978080e7          	jalr	-1672(ra) # 80200b56 <_panic_>

00000000802021e6 <cowHandler>:

u8 cowBuffer[PAGE_SIZE];
void cowHandler(u64 *pgdir, u64 badAddr) {
    802021e6:	715d                	addi	sp,sp,-80
    802021e8:	e486                	sd	ra,72(sp)
    802021ea:	e0a2                	sd	s0,64(sp)
    802021ec:	fc26                	sd	s1,56(sp)
    802021ee:	f84a                	sd	s2,48(sp)
    802021f0:	f44e                	sd	s3,40(sp)
    802021f2:	f052                	sd	s4,32(sp)
    802021f4:	ec56                	sd	s5,24(sp)
    802021f6:	e85a                	sd	s6,16(sp)
    802021f8:	0880                	addi	s0,sp,80
    802021fa:	892a                	mv	s2,a0
    802021fc:	8b2e                	mv	s6,a1
    u64 pa;
    u64 *pte;
    pa = pageLookup(pgdir, badAddr, &pte);
    802021fe:	fb840613          	addi	a2,s0,-72
    80202202:	00000097          	auipc	ra,0x0
    80202206:	c0e080e7          	jalr	-1010(ra) # 80201e10 <pageLookup>
    // printf("[COW] %x to cow %lx %lx\n", myproc()->id, badAddr, pa);
    if (!(*pte & PTE_COW)) {
    8020220a:	fb843783          	ld	a5,-72(s0)
    8020220e:	639c                	ld	a5,0(a5)
    80202210:	1007f793          	andi	a5,a5,256
    80202214:	cfe9                	beqz	a5,802022ee <cowHandler+0x108>
        printf("access denied");
        return;
    }
    PhysicalPage *page;
    int r = pageAlloc(&page);
    80202216:	fb040513          	addi	a0,s0,-80
    8020221a:	00000097          	auipc	ra,0x0
    8020221e:	a64080e7          	jalr	-1436(ra) # 80201c7e <pageAlloc>
    if (r < 0) {
    80202222:	0c054f63          	bltz	a0,80202300 <cowHandler+0x11a>
        panic("cow handler error");
        return;
    }
    acquireLock(&cowBufferLock);
    80202226:	002a0497          	auipc	s1,0x2a0
    8020222a:	27248493          	addi	s1,s1,626 # 804a2498 <cowBufferLock>
    8020222e:	8526                	mv	a0,s1
    80202230:	00004097          	auipc	ra,0x4
    80202234:	f34080e7          	jalr	-204(ra) # 80206164 <acquireLock>
    pa = pageLookup(pgdir, badAddr, &pte);
    80202238:	fb840613          	addi	a2,s0,-72
    8020223c:	85da                	mv	a1,s6
    8020223e:	854a                	mv	a0,s2
    80202240:	00000097          	auipc	ra,0x0
    80202244:	bd0080e7          	jalr	-1072(ra) # 80201e10 <pageLookup>
    bcopy((void *)pa, (void*)cowBuffer, PAGE_SIZE);
    80202248:	6605                	lui	a2,0x1
    8020224a:	002a0597          	auipc	a1,0x2a0
    8020224e:	26658593          	addi	a1,a1,614 # 804a24b0 <cowBuffer>
    80202252:	00000097          	auipc	ra,0x0
    80202256:	86c080e7          	jalr	-1940(ra) # 80201abe <bcopy>
    pageInsert(pgdir, badAddr, page2pa(page), (PTE2PERM(*pte) | PTE_WRITE) & ~PTE_COW);
    8020225a:	fb843783          	ld	a5,-72(s0)
    8020225e:	639c                	ld	a5,0(a5)
    80202260:	56fd                	li	a3,-1
    80202262:	16da                	slli	a3,a3,0x36
    80202264:	2fb68693          	addi	a3,a3,763
    80202268:	8efd                	and	a3,a3,a5
    return page - pages;
    8020226a:	001e0a97          	auipc	s5,0x1e0
    8020226e:	20ea8a93          	addi	s5,s5,526 # 803e2478 <pages>
    80202272:	fb043603          	ld	a2,-80(s0)
    80202276:	41560633          	sub	a2,a2,s5
    8020227a:	860d                	srai	a2,a2,0x3
    8020227c:	0000ca17          	auipc	s4,0xc
    80202280:	2f4a3a03          	ld	s4,756(s4) # 8020e570 <__func__.1590+0x8>
    80202284:	03460633          	mul	a2,a2,s4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202288:	00c6161b          	slliw	a2,a2,0xc
    8020228c:	1602                	slli	a2,a2,0x20
    8020228e:	9201                	srli	a2,a2,0x20
    80202290:	4985                	li	s3,1
    80202292:	09fe                	slli	s3,s3,0x1f
    80202294:	0046e693          	ori	a3,a3,4
    80202298:	964e                	add	a2,a2,s3
    8020229a:	85da                	mv	a1,s6
    8020229c:	854a                	mv	a0,s2
    8020229e:	00000097          	auipc	ra,0x0
    802022a2:	d7c080e7          	jalr	-644(ra) # 8020201a <pageInsert>
    return page - pages;
    802022a6:	fb043583          	ld	a1,-80(s0)
    802022aa:	415585b3          	sub	a1,a1,s5
    802022ae:	858d                	srai	a1,a1,0x3
    802022b0:	034585b3          	mul	a1,a1,s4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802022b4:	00c5959b          	slliw	a1,a1,0xc
    802022b8:	1582                	slli	a1,a1,0x20
    802022ba:	9181                	srli	a1,a1,0x20
    bcopy((void*) cowBuffer, (void*) page2pa(page), PAGE_SIZE);
    802022bc:	6605                	lui	a2,0x1
    802022be:	95ce                	add	a1,a1,s3
    802022c0:	002a0517          	auipc	a0,0x2a0
    802022c4:	1f050513          	addi	a0,a0,496 # 804a24b0 <cowBuffer>
    802022c8:	fffff097          	auipc	ra,0xfffff
    802022cc:	7f6080e7          	jalr	2038(ra) # 80201abe <bcopy>
    releaseLock(&cowBufferLock);
    802022d0:	8526                	mv	a0,s1
    802022d2:	00004097          	auipc	ra,0x4
    802022d6:	f0e080e7          	jalr	-242(ra) # 802061e0 <releaseLock>
}
    802022da:	60a6                	ld	ra,72(sp)
    802022dc:	6406                	ld	s0,64(sp)
    802022de:	74e2                	ld	s1,56(sp)
    802022e0:	7942                	ld	s2,48(sp)
    802022e2:	79a2                	ld	s3,40(sp)
    802022e4:	7a02                	ld	s4,32(sp)
    802022e6:	6ae2                	ld	s5,24(sp)
    802022e8:	6b42                	ld	s6,16(sp)
    802022ea:	6161                	addi	sp,sp,80
    802022ec:	8082                	ret
        printf("access denied");
    802022ee:	0000b517          	auipc	a0,0xb
    802022f2:	28250513          	addi	a0,a0,642 # 8020d570 <textEnd+0x570>
    802022f6:	ffffe097          	auipc	ra,0xffffe
    802022fa:	7d4080e7          	jalr	2004(ra) # 80200aca <printf>
        return;
    802022fe:	bff1                	j	802022da <cowHandler+0xf4>
        panic("cow handler error");
    80202300:	0000b697          	auipc	a3,0xb
    80202304:	28068693          	addi	a3,a3,640 # 8020d580 <textEnd+0x580>
    80202308:	0000b617          	auipc	a2,0xb
    8020230c:	2c860613          	addi	a2,a2,712 # 8020d5d0 <__func__.1844>
    80202310:	0d400593          	li	a1,212
    80202314:	0000b517          	auipc	a0,0xb
    80202318:	1d450513          	addi	a0,a0,468 # 8020d4e8 <textEnd+0x4e8>
    8020231c:	fffff097          	auipc	ra,0xfffff
    80202320:	83a080e7          	jalr	-1990(ra) # 80200b56 <_panic_>

0000000080202324 <vir2phy>:
// Can only be used to look up user pages.
u64 vir2phy(u64* pagetable, u64 va, int* cow) {
    u64* pte;
    u64 pa;

    if (va >= MAXVA)
    80202324:	57fd                	li	a5,-1
    80202326:	83e9                	srli	a5,a5,0x1a
    80202328:	00b7f463          	bgeu	a5,a1,80202330 <vir2phy+0xc>
        return NULL;
    8020232c:	4501                	li	a0,0
        return NULL;
    if (cow)
        *cow = (*pte & PTE_COW) > 0;
    pa = PTE2PA(*pte) + (va&0xfff);
    return pa;
}
    8020232e:	8082                	ret
u64 vir2phy(u64* pagetable, u64 va, int* cow) {
    80202330:	7179                	addi	sp,sp,-48
    80202332:	f406                	sd	ra,40(sp)
    80202334:	f022                	sd	s0,32(sp)
    80202336:	ec26                	sd	s1,24(sp)
    80202338:	e84a                	sd	s2,16(sp)
    8020233a:	1800                	addi	s0,sp,48
    8020233c:	84ae                	mv	s1,a1
    8020233e:	8932                	mv	s2,a2
    int ret = pageWalk(pagetable, va, 0, &pte);
    80202340:	fd840693          	addi	a3,s0,-40
    80202344:	4601                	li	a2,0
    80202346:	00000097          	auipc	ra,0x0
    8020234a:	9ee080e7          	jalr	-1554(ra) # 80201d34 <pageWalk>
    if (ret < 0) {
    8020234e:	02054263          	bltz	a0,80202372 <vir2phy+0x4e>
    if (pte == 0)
    80202352:	fd843783          	ld	a5,-40(s0)
    80202356:	c3a5                	beqz	a5,802023b6 <vir2phy+0x92>
    if ((*pte & PTE_VALID) == 0)
    80202358:	6398                	ld	a4,0(a5)
    if ((*pte & PTE_USER) == 0)
    8020235a:	01177613          	andi	a2,a4,17
    8020235e:	46c5                	li	a3,17
        return NULL;
    80202360:	4501                	li	a0,0
    if ((*pte & PTE_USER) == 0)
    80202362:	02d60a63          	beq	a2,a3,80202396 <vir2phy+0x72>
}
    80202366:	70a2                	ld	ra,40(sp)
    80202368:	7402                	ld	s0,32(sp)
    8020236a:	64e2                	ld	s1,24(sp)
    8020236c:	6942                	ld	s2,16(sp)
    8020236e:	6145                	addi	sp,sp,48
    80202370:	8082                	ret
        panic("pageWalk error in vir2phy function!");
    80202372:	0000b697          	auipc	a3,0xb
    80202376:	22668693          	addi	a3,a3,550 # 8020d598 <textEnd+0x598>
    8020237a:	0000c617          	auipc	a2,0xc
    8020237e:	14e60613          	addi	a2,a2,334 # 8020e4c8 <__func__.1853>
    80202382:	0eb00593          	li	a1,235
    80202386:	0000b517          	auipc	a0,0xb
    8020238a:	16250513          	addi	a0,a0,354 # 8020d4e8 <textEnd+0x4e8>
    8020238e:	ffffe097          	auipc	ra,0xffffe
    80202392:	7c8080e7          	jalr	1992(ra) # 80200b56 <_panic_>
    if (cow)
    80202396:	00090663          	beqz	s2,802023a2 <vir2phy+0x7e>
        *cow = (*pte & PTE_COW) > 0;
    8020239a:	8321                	srli	a4,a4,0x8
    8020239c:	8b05                	andi	a4,a4,1
    8020239e:	00e92023          	sw	a4,0(s2) # fffffffffffff000 <bssEnd+0xffffffff7f9c4000>
    pa = PTE2PA(*pte) + (va&0xfff);
    802023a2:	6388                	ld	a0,0(a5)
    802023a4:	050a                	slli	a0,a0,0x2
    802023a6:	fff007b7          	lui	a5,0xfff00
    802023aa:	83a1                	srli	a5,a5,0x8
    802023ac:	8d7d                	and	a0,a0,a5
    802023ae:	14d2                	slli	s1,s1,0x34
    802023b0:	90d1                	srli	s1,s1,0x34
    802023b2:	8d45                	or	a0,a0,s1
    return pa;
    802023b4:	bf4d                	j	80202366 <vir2phy+0x42>
        return NULL;
    802023b6:	4501                	li	a0,0
    802023b8:	b77d                	j	80202366 <vir2phy+0x42>

00000000802023ba <copyin>:
// Return 0 on success, -1 on error.
int copyin(u64* pagetable, char* dst, u64 srcva, u64 len) {
    u64 n, va0, pa0;
    int cow;

    while (len > 0) {
    802023ba:	caad                	beqz	a3,8020242c <copyin+0x72>
int copyin(u64* pagetable, char* dst, u64 srcva, u64 len) {
    802023bc:	711d                	addi	sp,sp,-96
    802023be:	ec86                	sd	ra,88(sp)
    802023c0:	e8a2                	sd	s0,80(sp)
    802023c2:	e4a6                	sd	s1,72(sp)
    802023c4:	e0ca                	sd	s2,64(sp)
    802023c6:	fc4e                	sd	s3,56(sp)
    802023c8:	f852                	sd	s4,48(sp)
    802023ca:	f456                	sd	s5,40(sp)
    802023cc:	f05a                	sd	s6,32(sp)
    802023ce:	ec5e                	sd	s7,24(sp)
    802023d0:	e862                	sd	s8,16(sp)
    802023d2:	1080                	addi	s0,sp,96
    802023d4:	8b2a                	mv	s6,a0
    802023d6:	8a2e                	mv	s4,a1
    802023d8:	8c32                	mv	s8,a2
    802023da:	89b6                	mv	s3,a3
        va0 = DOWN_ALIGN(srcva, PGSIZE);
    802023dc:	7bfd                	lui	s7,0xfffff
        pa0 = vir2phy(pagetable, va0, &cow);
        if (pa0 == NULL)
            return -1;
        n = PGSIZE - (srcva - va0);
    802023de:	6a85                	lui	s5,0x1
    802023e0:	a015                	j	80202404 <copyin+0x4a>
        if (n > len)
            n = len;
        memmove(dst, (void*)(pa0 + (srcva - va0)), n);
    802023e2:	9562                	add	a0,a0,s8
    802023e4:	0004861b          	sext.w	a2,s1
    802023e8:	412505b3          	sub	a1,a0,s2
    802023ec:	8552                	mv	a0,s4
    802023ee:	00004097          	auipc	ra,0x4
    802023f2:	08c080e7          	jalr	140(ra) # 8020647a <memmove>

        len -= n;
    802023f6:	409989b3          	sub	s3,s3,s1
        dst += n;
    802023fa:	9a26                	add	s4,s4,s1
        srcva = va0 + PGSIZE;
    802023fc:	01590c33          	add	s8,s2,s5
    while (len > 0) {
    80202400:	02098463          	beqz	s3,80202428 <copyin+0x6e>
        va0 = DOWN_ALIGN(srcva, PGSIZE);
    80202404:	017c7933          	and	s2,s8,s7
        pa0 = vir2phy(pagetable, va0, &cow);
    80202408:	fac40613          	addi	a2,s0,-84
    8020240c:	85ca                	mv	a1,s2
    8020240e:	855a                	mv	a0,s6
    80202410:	00000097          	auipc	ra,0x0
    80202414:	f14080e7          	jalr	-236(ra) # 80202324 <vir2phy>
        if (pa0 == NULL)
    80202418:	cd01                	beqz	a0,80202430 <copyin+0x76>
        n = PGSIZE - (srcva - va0);
    8020241a:	418904b3          	sub	s1,s2,s8
    8020241e:	94d6                	add	s1,s1,s5
        if (n > len)
    80202420:	fc99f1e3          	bgeu	s3,s1,802023e2 <copyin+0x28>
    80202424:	84ce                	mv	s1,s3
    80202426:	bf75                	j	802023e2 <copyin+0x28>
    }
    return 0;
    80202428:	4501                	li	a0,0
    8020242a:	a021                	j	80202432 <copyin+0x78>
    8020242c:	4501                	li	a0,0
}
    8020242e:	8082                	ret
            return -1;
    80202430:	557d                	li	a0,-1
}
    80202432:	60e6                	ld	ra,88(sp)
    80202434:	6446                	ld	s0,80(sp)
    80202436:	64a6                	ld	s1,72(sp)
    80202438:	6906                	ld	s2,64(sp)
    8020243a:	79e2                	ld	s3,56(sp)
    8020243c:	7a42                	ld	s4,48(sp)
    8020243e:	7aa2                	ld	s5,40(sp)
    80202440:	7b02                	ld	s6,32(sp)
    80202442:	6be2                	ld	s7,24(sp)
    80202444:	6c42                	ld	s8,16(sp)
    80202446:	6125                	addi	sp,sp,96
    80202448:	8082                	ret

000000008020244a <copyout>:
// Return 0 on success, -1 on error.
int copyout(u64* pagetable, u64 dstva, char* src, u64 len) {
    u64 n, va0, pa0;
    int cow;

    while (len > 0) {
    8020244a:	cad9                	beqz	a3,802024e0 <copyout+0x96>
int copyout(u64* pagetable, u64 dstva, char* src, u64 len) {
    8020244c:	711d                	addi	sp,sp,-96
    8020244e:	ec86                	sd	ra,88(sp)
    80202450:	e8a2                	sd	s0,80(sp)
    80202452:	e4a6                	sd	s1,72(sp)
    80202454:	e0ca                	sd	s2,64(sp)
    80202456:	fc4e                	sd	s3,56(sp)
    80202458:	f852                	sd	s4,48(sp)
    8020245a:	f456                	sd	s5,40(sp)
    8020245c:	f05a                	sd	s6,32(sp)
    8020245e:	ec5e                	sd	s7,24(sp)
    80202460:	e862                	sd	s8,16(sp)
    80202462:	1080                	addi	s0,sp,96
    80202464:	8b2a                	mv	s6,a0
    80202466:	89ae                	mv	s3,a1
    80202468:	8ab2                	mv	s5,a2
    8020246a:	8a36                	mv	s4,a3
        va0 = DOWN_ALIGN(dstva, PGSIZE);
    8020246c:	7c7d                	lui	s8,0xfffff
        if (cow) {
            // printf("COW?\n");
            cowHandler(pagetable, va0);
        }
        pa0 = vir2phy(pagetable, va0, &cow);
        n = PGSIZE - (dstva - va0);
    8020246e:	6b85                	lui	s7,0x1
    80202470:	a80d                	j	802024a2 <copyout+0x58>
            cowHandler(pagetable, va0);
    80202472:	85ca                	mv	a1,s2
    80202474:	855a                	mv	a0,s6
    80202476:	00000097          	auipc	ra,0x0
    8020247a:	d70080e7          	jalr	-656(ra) # 802021e6 <cowHandler>
    8020247e:	a081                	j	802024be <copyout+0x74>
        if (n > len)
            n = len;
        memmove((void*)(pa0 + (dstva - va0)), src, n);
    80202480:	412989b3          	sub	s3,s3,s2
    80202484:	0004861b          	sext.w	a2,s1
    80202488:	85d6                	mv	a1,s5
    8020248a:	954e                	add	a0,a0,s3
    8020248c:	00004097          	auipc	ra,0x4
    80202490:	fee080e7          	jalr	-18(ra) # 8020647a <memmove>
        len -= n;
    80202494:	409a0a33          	sub	s4,s4,s1
        src += n;
    80202498:	9aa6                	add	s5,s5,s1
        dstva = va0 + PGSIZE;
    8020249a:	017909b3          	add	s3,s2,s7
    while (len > 0) {
    8020249e:	020a0f63          	beqz	s4,802024dc <copyout+0x92>
        va0 = DOWN_ALIGN(dstva, PGSIZE);
    802024a2:	0189f933          	and	s2,s3,s8
        pa0 = vir2phy(pagetable, va0, &cow);
    802024a6:	fac40613          	addi	a2,s0,-84
    802024aa:	85ca                	mv	a1,s2
    802024ac:	855a                	mv	a0,s6
    802024ae:	00000097          	auipc	ra,0x0
    802024b2:	e76080e7          	jalr	-394(ra) # 80202324 <vir2phy>
        if (pa0 == NULL)
    802024b6:	c51d                	beqz	a0,802024e4 <copyout+0x9a>
        if (cow) {
    802024b8:	fac42783          	lw	a5,-84(s0)
    802024bc:	fbdd                	bnez	a5,80202472 <copyout+0x28>
        pa0 = vir2phy(pagetable, va0, &cow);
    802024be:	fac40613          	addi	a2,s0,-84
    802024c2:	85ca                	mv	a1,s2
    802024c4:	855a                	mv	a0,s6
    802024c6:	00000097          	auipc	ra,0x0
    802024ca:	e5e080e7          	jalr	-418(ra) # 80202324 <vir2phy>
        n = PGSIZE - (dstva - va0);
    802024ce:	413904b3          	sub	s1,s2,s3
    802024d2:	94de                	add	s1,s1,s7
        if (n > len)
    802024d4:	fa9a76e3          	bgeu	s4,s1,80202480 <copyout+0x36>
    802024d8:	84d2                	mv	s1,s4
    802024da:	b75d                	j	80202480 <copyout+0x36>
    }
    return 0;
    802024dc:	4501                	li	a0,0
    802024de:	a021                	j	802024e6 <copyout+0x9c>
    802024e0:	4501                	li	a0,0
}
    802024e2:	8082                	ret
            return -1;
    802024e4:	557d                	li	a0,-1
}
    802024e6:	60e6                	ld	ra,88(sp)
    802024e8:	6446                	ld	s0,80(sp)
    802024ea:	64a6                	ld	s1,72(sp)
    802024ec:	6906                	ld	s2,64(sp)
    802024ee:	79e2                	ld	s3,56(sp)
    802024f0:	7a42                	ld	s4,48(sp)
    802024f2:	7aa2                	ld	s5,40(sp)
    802024f4:	7b02                	ld	s6,32(sp)
    802024f6:	6be2                	ld	s7,24(sp)
    802024f8:	6c42                	ld	s8,16(sp)
    802024fa:	6125                	addi	sp,sp,96
    802024fc:	8082                	ret

00000000802024fe <growproc>:

int growproc(int n) {
    802024fe:	1101                	addi	sp,sp,-32
    80202500:	ec06                	sd	ra,24(sp)
    80202502:	e822                	sd	s0,16(sp)
    80202504:	e426                	sd	s1,8(sp)
    80202506:	1000                	addi	s0,sp,32
    80202508:	84aa                	mv	s1,a0
    if (myproc()->heapBottom + n >= USER_HEAP_TOP)
    8020250a:	00000097          	auipc	ra,0x0
    8020250e:	542080e7          	jalr	1346(ra) # 80202a4c <myproc>
    80202512:	5d053783          	ld	a5,1488(a0)
    80202516:	97a6                	add	a5,a5,s1
    80202518:	0000c717          	auipc	a4,0xc
    8020251c:	06073703          	ld	a4,96(a4) # 8020e578 <__func__.1590+0x10>
    80202520:	02f76163          	bltu	a4,a5,80202542 <growproc+0x44>
        return -1;
    myproc()->heapBottom += n;
    80202524:	00000097          	auipc	ra,0x0
    80202528:	528080e7          	jalr	1320(ra) # 80202a4c <myproc>
    8020252c:	5d053783          	ld	a5,1488(a0)
    80202530:	94be                	add	s1,s1,a5
    80202532:	5c953823          	sd	s1,1488(a0)
    return 0;
    80202536:	4501                	li	a0,0
}
    80202538:	60e2                	ld	ra,24(sp)
    8020253a:	6442                	ld	s0,16(sp)
    8020253c:	64a2                	ld	s1,8(sp)
    8020253e:	6105                	addi	sp,sp,32
    80202540:	8082                	ret
        return -1;
    80202542:	557d                	li	a0,-1
    80202544:	bfd5                	j	80202538 <growproc+0x3a>

0000000080202546 <sys_sbrk>:

u64 sys_sbrk(u32 len) {
    80202546:	1101                	addi	sp,sp,-32
    80202548:	ec06                	sd	ra,24(sp)
    8020254a:	e822                	sd	s0,16(sp)
    8020254c:	e426                	sd	s1,8(sp)
    8020254e:	e04a                	sd	s2,0(sp)
    80202550:	1000                	addi	s0,sp,32
    80202552:	84aa                	mv	s1,a0
    u64 addr = myproc()->heapBottom;
    80202554:	00000097          	auipc	ra,0x0
    80202558:	4f8080e7          	jalr	1272(ra) # 80202a4c <myproc>
    8020255c:	5d053903          	ld	s2,1488(a0)
    if (growproc(len) < 0)
    80202560:	8526                	mv	a0,s1
    80202562:	00000097          	auipc	ra,0x0
    80202566:	f9c080e7          	jalr	-100(ra) # 802024fe <growproc>
    8020256a:	00054963          	bltz	a0,8020257c <sys_sbrk+0x36>
        return -1;
    return addr;
    8020256e:	854a                	mv	a0,s2
    80202570:	60e2                	ld	ra,24(sp)
    80202572:	6442                	ld	s0,16(sp)
    80202574:	64a2                	ld	s1,8(sp)
    80202576:	6902                	ld	s2,0(sp)
    80202578:	6105                	addi	sp,sp,32
    8020257a:	8082                	ret
        return -1;
    8020257c:	597d                	li	s2,-1
    8020257e:	bfc5                	j	8020256e <sys_sbrk+0x28>

0000000080202580 <loadElf>:
    u8 *ph_table = 0;
    u16 entry_cnt;
    u16 entry_size;
    int r;

    if (size < 4 || !is_elf_format(binary)) {
    80202580:	478d                	li	a5,3
    80202582:	0cb7da63          	bge	a5,a1,80202656 <loadElf+0xd6>
    int (*map)(u64 va, u32 segmentSize, u8 *bin, u32 binSize, void *userData)) {
    80202586:	711d                	addi	sp,sp,-96
    80202588:	ec86                	sd	ra,88(sp)
    8020258a:	e8a2                	sd	s0,80(sp)
    8020258c:	e4a6                	sd	s1,72(sp)
    8020258e:	e0ca                	sd	s2,64(sp)
    80202590:	fc4e                	sd	s3,56(sp)
    80202592:	f852                	sd	s4,48(sp)
    80202594:	f456                	sd	s5,40(sp)
    80202596:	f05a                	sd	s6,32(sp)
    80202598:	ec5e                	sd	s7,24(sp)
    8020259a:	e862                	sd	s8,16(sp)
    8020259c:	e466                	sd	s9,8(sp)
    8020259e:	1080                	addi	s0,sp,96
    802025a0:	84aa                	mv	s1,a0
    802025a2:	8a32                	mv	s4,a2
    802025a4:	89b6                	mv	s3,a3
    802025a6:	893a                	mv	s2,a4
int loadElf(u8 *binary, int size, u64 *entry, void *userData, 
    int (*map)(u64, u32, u8*, u32, void*));

inline bool is_elf_format(u8 *binary) {
    u8 *magic = ((Indent*) binary)->magic;
    if (magic[0] == ELF_MAGIC0 &&
    802025a8:	00054703          	lbu	a4,0(a0)
    802025ac:	07f00793          	li	a5,127
        return -NOT_ELF_FILE;
    802025b0:	5569                	li	a0,-6
    802025b2:	00f70f63          	beq	a4,a5,802025d0 <loadElf+0x50>
        ph_table += entry_size;
    }
    
    *entry = ehdr->entry;
    return 0;
    802025b6:	60e6                	ld	ra,88(sp)
    802025b8:	6446                	ld	s0,80(sp)
    802025ba:	64a6                	ld	s1,72(sp)
    802025bc:	6906                	ld	s2,64(sp)
    802025be:	79e2                	ld	s3,56(sp)
    802025c0:	7a42                	ld	s4,48(sp)
    802025c2:	7aa2                	ld	s5,40(sp)
    802025c4:	7b02                	ld	s6,32(sp)
    802025c6:	6be2                	ld	s7,24(sp)
    802025c8:	6c42                	ld	s8,16(sp)
    802025ca:	6ca2                	ld	s9,8(sp)
    802025cc:	6125                	addi	sp,sp,96
    802025ce:	8082                	ret
    802025d0:	0014c703          	lbu	a4,1(s1)
    802025d4:	04500793          	li	a5,69
    802025d8:	fcf71fe3          	bne	a4,a5,802025b6 <loadElf+0x36>
        magic[1] == ELF_MAGIC1 &&
    802025dc:	0024c703          	lbu	a4,2(s1)
    802025e0:	04c00793          	li	a5,76
    802025e4:	fcf719e3          	bne	a4,a5,802025b6 <loadElf+0x36>
        magic[2] == ELF_MAGIC2 &&
    802025e8:	0034c703          	lbu	a4,3(s1)
    802025ec:	04600793          	li	a5,70
    802025f0:	fcf713e3          	bne	a4,a5,802025b6 <loadElf+0x36>
    ph_table = binary + ehdr->phoff;
    802025f4:	0204bb03          	ld	s6,32(s1)
    802025f8:	9b26                	add	s6,s6,s1
    entry_cnt = ehdr->phnum;
    802025fa:	0384d783          	lhu	a5,56(s1)
    entry_size = ehdr->phentsize;
    802025fe:	0364dc83          	lhu	s9,54(s1)
    while (entry_cnt--) {
    80202602:	fff78a9b          	addiw	s5,a5,-1
    80202606:	1ac2                	slli	s5,s5,0x30
    80202608:	030ada93          	srli	s5,s5,0x30
    8020260c:	c3a1                	beqz	a5,8020264c <loadElf+0xcc>
        if (phdr->type == PT_LOAD) {
    8020260e:	4c05                	li	s8,1
    while (entry_cnt--) {
    80202610:	6bc1                	lui	s7,0x10
    80202612:	1bfd                	addi	s7,s7,-1
    80202614:	a811                	j	80202628 <loadElf+0xa8>
        ph_table += entry_size;
    80202616:	9b66                	add	s6,s6,s9
    while (entry_cnt--) {
    80202618:	3afd                	addiw	s5,s5,-1
    8020261a:	1ac2                	slli	s5,s5,0x30
    8020261c:	030ada93          	srli	s5,s5,0x30
    80202620:	000a879b          	sext.w	a5,s5
    80202624:	03778463          	beq	a5,s7,8020264c <loadElf+0xcc>
        if (phdr->type == PT_LOAD) {
    80202628:	000b2783          	lw	a5,0(s6)
    8020262c:	ff8795e3          	bne	a5,s8,80202616 <loadElf+0x96>
            r = map(phdr->vaddr, phdr->memsz, binary + phdr->offset, phdr->filesz, userData);
    80202630:	008b3603          	ld	a2,8(s6)
    80202634:	874e                	mv	a4,s3
    80202636:	020b2683          	lw	a3,32(s6)
    8020263a:	9626                	add	a2,a2,s1
    8020263c:	028b2583          	lw	a1,40(s6)
    80202640:	010b3503          	ld	a0,16(s6)
    80202644:	9902                	jalr	s2
            if (r < 0) {
    80202646:	fc0558e3          	bgez	a0,80202616 <loadElf+0x96>
    8020264a:	b7b5                	j	802025b6 <loadElf+0x36>
    *entry = ehdr->entry;
    8020264c:	6c9c                	ld	a5,24(s1)
    8020264e:	00fa3023          	sd	a5,0(s4)
    return 0;
    80202652:	4501                	li	a0,0
    80202654:	b78d                	j	802025b6 <loadElf+0x36>
        return -NOT_ELF_FILE;
    80202656:	5569                	li	a0,-6
    80202658:	8082                	ret
	...

000000008020265c <kernelVector>:
.globl kernelTrap
.section .text
.globl kernelVector
.align 2
kernelVector:
    addi sp, sp, -256
    8020265c:	7111                	addi	sp,sp,-256

    sd ra, 0(sp)
    8020265e:	e006                	sd	ra,0(sp)
    sd sp, 8(sp)
    80202660:	e40a                	sd	sp,8(sp)
    sd gp, 16(sp)
    80202662:	e80e                	sd	gp,16(sp)
    sd tp, 24(sp)
    80202664:	ec12                	sd	tp,24(sp)
    sd t0, 32(sp)
    80202666:	f016                	sd	t0,32(sp)
    sd t1, 40(sp)
    80202668:	f41a                	sd	t1,40(sp)
    sd t2, 48(sp)
    8020266a:	f81e                	sd	t2,48(sp)
    sd s0, 56(sp)
    8020266c:	fc22                	sd	s0,56(sp)
    sd s1, 64(sp)
    8020266e:	e0a6                	sd	s1,64(sp)
    sd a0, 72(sp)
    80202670:	e4aa                	sd	a0,72(sp)
    sd a1, 80(sp)
    80202672:	e8ae                	sd	a1,80(sp)
    sd a2, 88(sp)
    80202674:	ecb2                	sd	a2,88(sp)
    sd a3, 96(sp)
    80202676:	f0b6                	sd	a3,96(sp)
    sd a4, 104(sp)
    80202678:	f4ba                	sd	a4,104(sp)
    sd a5, 112(sp)
    8020267a:	f8be                	sd	a5,112(sp)
    sd a6, 120(sp)
    8020267c:	fcc2                	sd	a6,120(sp)
    sd a7, 128(sp)
    8020267e:	e146                	sd	a7,128(sp)
    sd s2, 136(sp)
    80202680:	e54a                	sd	s2,136(sp)
    sd s3, 144(sp)
    80202682:	e94e                	sd	s3,144(sp)
    sd s4, 152(sp)
    80202684:	ed52                	sd	s4,152(sp)
    sd s5, 160(sp)
    80202686:	f156                	sd	s5,160(sp)
    sd s6, 168(sp)
    80202688:	f55a                	sd	s6,168(sp)
    sd s7, 176(sp)
    8020268a:	f95e                	sd	s7,176(sp)
    sd s8, 184(sp)
    8020268c:	fd62                	sd	s8,184(sp)
    sd s9, 192(sp)
    8020268e:	e1e6                	sd	s9,192(sp)
    sd s10, 200(sp)
    80202690:	e5ea                	sd	s10,200(sp)
    sd s11, 208(sp)
    80202692:	e9ee                	sd	s11,208(sp)
    sd t3, 216(sp)
    80202694:	edf2                	sd	t3,216(sp)
    sd t4, 224(sp)
    80202696:	f1f6                	sd	t4,224(sp)
    sd t5, 232(sp)
    80202698:	f5fa                	sd	t5,232(sp)
    sd t6, 240(sp)
    8020269a:	f9fe                	sd	t6,240(sp)

	// call the C trap handler in trap.c
    call kernelTrap
    8020269c:	41e020ef          	jal	ra,80204aba <kernelTrap>
    ld ra, 0(sp)
    802026a0:	6082                	ld	ra,0(sp)
    ld sp, 8(sp)
    802026a2:	6122                	ld	sp,8(sp)
    ld gp, 16(sp)
    802026a4:	61c2                	ld	gp,16(sp)
    // not this, in case we moved CPUs: ld tp, 24(sp)
    ld t0, 32(sp)
    802026a6:	7282                	ld	t0,32(sp)
    ld t1, 40(sp)
    802026a8:	7322                	ld	t1,40(sp)
    ld t2, 48(sp)
    802026aa:	73c2                	ld	t2,48(sp)
    ld s0, 56(sp)
    802026ac:	7462                	ld	s0,56(sp)
    ld s1, 64(sp)
    802026ae:	6486                	ld	s1,64(sp)
    ld a0, 72(sp)
    802026b0:	6526                	ld	a0,72(sp)
    ld a1, 80(sp)
    802026b2:	65c6                	ld	a1,80(sp)
    ld a2, 88(sp)
    802026b4:	6666                	ld	a2,88(sp)
    ld a3, 96(sp)
    802026b6:	7686                	ld	a3,96(sp)
    ld a4, 104(sp)
    802026b8:	7726                	ld	a4,104(sp)
    ld a5, 112(sp)
    802026ba:	77c6                	ld	a5,112(sp)
    ld a6, 120(sp)
    802026bc:	7866                	ld	a6,120(sp)
    ld a7, 128(sp)
    802026be:	688a                	ld	a7,128(sp)
    ld s2, 136(sp)
    802026c0:	692a                	ld	s2,136(sp)
    ld s3, 144(sp)
    802026c2:	69ca                	ld	s3,144(sp)
    ld s4, 152(sp)
    802026c4:	6a6a                	ld	s4,152(sp)
    ld s5, 160(sp)
    802026c6:	7a8a                	ld	s5,160(sp)
    ld s6, 168(sp)
    802026c8:	7b2a                	ld	s6,168(sp)
    ld s7, 176(sp)
    802026ca:	7bca                	ld	s7,176(sp)
    ld s8, 184(sp)
    802026cc:	7c6a                	ld	s8,184(sp)
    ld s9, 192(sp)
    802026ce:	6c8e                	ld	s9,192(sp)
    ld s10, 200(sp)
    802026d0:	6d2e                	ld	s10,200(sp)
    ld s11, 208(sp)
    802026d2:	6dce                	ld	s11,208(sp)
    ld t3, 216(sp)
    802026d4:	6e6e                	ld	t3,216(sp)
    ld t4, 224(sp)
    802026d6:	7e8e                	ld	t4,224(sp)
    ld t5, 232(sp)
    802026d8:	7f2e                	ld	t5,232(sp)
    ld t6, 240(sp)
    802026da:	7fce                	ld	t6,240(sp)

    addi sp, sp, 256
    802026dc:	6111                	addi	sp,sp,256
    sret
    802026de:	10200073          	sret

00000000802026e2 <codeMapper>:

    *new = p;
    return 0;
}

int codeMapper(u64 va, u32 segmentSize, u8 *binary, u32 binSize, void *userData) {
    802026e2:	7119                	addi	sp,sp,-128
    802026e4:	fc86                	sd	ra,120(sp)
    802026e6:	f8a2                	sd	s0,112(sp)
    802026e8:	f4a6                	sd	s1,104(sp)
    802026ea:	f0ca                	sd	s2,96(sp)
    802026ec:	ecce                	sd	s3,88(sp)
    802026ee:	e8d2                	sd	s4,80(sp)
    802026f0:	e4d6                	sd	s5,72(sp)
    802026f2:	e0da                	sd	s6,64(sp)
    802026f4:	fc5e                	sd	s7,56(sp)
    802026f6:	f862                	sd	s8,48(sp)
    802026f8:	f466                	sd	s9,40(sp)
    802026fa:	f06a                	sd	s10,32(sp)
    802026fc:	ec6e                	sd	s11,24(sp)
    802026fe:	0100                	addi	s0,sp,128
    80202700:	8baa                	mv	s7,a0
    80202702:	8d2e                	mv	s10,a1
    80202704:	8db2                	mv	s11,a2
    80202706:	89b6                	mv	s3,a3
    80202708:	8c3a                	mv	s8,a4
    Process *process = (Process*)userData;
    PhysicalPage *p = NULL;
    8020270a:	f8043423          	sd	zero,-120(s0)
    u64 i;
    int r = 0;
    u64 offset = va - DOWN_ALIGN(va, PAGE_SIZE);
    8020270e:	03451793          	slli	a5,a0,0x34
    80202712:	0347d913          	srli	s2,a5,0x34
    u64* j;

    if (offset > 0) {
    80202716:	e39d                	bnez	a5,8020273c <codeMapper+0x5a>
                PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        }
        r = MIN(binSize, PAGE_SIZE - offset);
        bcopy(binary, (void*) page2pa(p) + offset, r);
    }
    for (i = r; i < binSize; i += r) {
    80202718:	02069993          	slli	s3,a3,0x20
    8020271c:	0209d993          	srli	s3,s3,0x20
    80202720:	2c098b63          	beqz	s3,802029f6 <codeMapper+0x314>
    int hartId;
} PhysicalPage;

inline u32 page2PPN(PhysicalPage *page) {
    extern PhysicalPage pages[];
    return page - pages;
    80202724:	001e0b17          	auipc	s6,0x1e0
    80202728:	d54b0b13          	addi	s6,s6,-684 # 803e2478 <pages>
    8020272c:	0000ca97          	auipc	s5,0xc
    80202730:	e44a8a93          	addi	s5,s5,-444 # 8020e570 <__func__.1590+0x8>
    return pages + ppn;
}


inline u64 page2pa(PhysicalPage *page) {
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202734:	4a05                	li	s4,1
    80202736:	0a7e                	slli	s4,s4,0x1f
        if (pageAlloc(&p) != 0) {
            return -1;
        }
        pageInsert(process->pgdir, va + i, page2pa(p), 
            PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        r = MIN(PAGE_SIZE, binSize - i);
    80202738:	6c85                	lui	s9,0x1
    8020273a:	a8c5                	j	8020282a <codeMapper+0x148>
        p = pa2page(pageLookup(process->pgdir, va, &j));
    8020273c:	f8040613          	addi	a2,s0,-128
    80202740:	85aa                	mv	a1,a0
    80202742:	16873503          	ld	a0,360(a4)
    80202746:	fffff097          	auipc	ra,0xfffff
    8020274a:	6ca080e7          	jalr	1738(ra) # 80201e10 <pageLookup>
}

inline PhysicalPage* pa2page(u64 pa) {
    if (pa == 0)
    8020274e:	2a050763          	beqz	a0,802029fc <codeMapper+0x31a>
        return NULL;
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80202752:	800007b7          	lui	a5,0x80000
    80202756:	97aa                	add	a5,a5,a0
    80202758:	83b1                	srli	a5,a5,0xc
    return pages + ppn;
    8020275a:	1782                	slli	a5,a5,0x20
    8020275c:	9381                	srli	a5,a5,0x20
    8020275e:	00179713          	slli	a4,a5,0x1
    80202762:	97ba                	add	a5,a5,a4
    80202764:	078e                	slli	a5,a5,0x3
    80202766:	001e0717          	auipc	a4,0x1e0
    8020276a:	d1270713          	addi	a4,a4,-750 # 803e2478 <pages>
    8020276e:	97ba                	add	a5,a5,a4
    80202770:	f8f43423          	sd	a5,-120(s0)
        r = MIN(binSize, PAGE_SIZE - offset);
    80202774:	1982                	slli	s3,s3,0x20
    80202776:	0209d993          	srli	s3,s3,0x20
    8020277a:	6485                	lui	s1,0x1
    8020277c:	412484b3          	sub	s1,s1,s2
    80202780:	0099f363          	bgeu	s3,s1,80202786 <codeMapper+0xa4>
    80202784:	84ce                	mv	s1,s3
    80202786:	2481                	sext.w	s1,s1
    return page - pages;
    80202788:	f8843583          	ld	a1,-120(s0)
    8020278c:	001e0797          	auipc	a5,0x1e0
    80202790:	cec78793          	addi	a5,a5,-788 # 803e2478 <pages>
    80202794:	8d9d                	sub	a1,a1,a5
    80202796:	858d                	srai	a1,a1,0x3
    80202798:	0000c797          	auipc	a5,0xc
    8020279c:	dd87b783          	ld	a5,-552(a5) # 8020e570 <__func__.1590+0x8>
    802027a0:	02f585b3          	mul	a1,a1,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802027a4:	00c5959b          	slliw	a1,a1,0xc
    802027a8:	1582                	slli	a1,a1,0x20
    802027aa:	9181                	srli	a1,a1,0x20
    802027ac:	4785                	li	a5,1
    802027ae:	07fe                	slli	a5,a5,0x1f
    802027b0:	95be                	add	a1,a1,a5
        bcopy(binary, (void*) page2pa(p) + offset, r);
    802027b2:	8626                	mv	a2,s1
    802027b4:	95ca                	add	a1,a1,s2
    802027b6:	856e                	mv	a0,s11
    802027b8:	fffff097          	auipc	ra,0xfffff
    802027bc:	306080e7          	jalr	774(ra) # 80201abe <bcopy>
    for (i = r; i < binSize; i += r) {
    802027c0:	8926                	mv	s2,s1
    802027c2:	f734e1e3          	bltu	s1,s3,80202724 <codeMapper+0x42>
        bcopy(binary + i, (void*) page2pa(p), r);
    }

    offset = va + i - DOWN_ALIGN(va + i, PAGE_SIZE);
    802027c6:	012b8a33          	add	s4,s7,s2
    802027ca:	034a1793          	slli	a5,s4,0x34
    802027ce:	0347d993          	srli	s3,a5,0x34
    if (offset > 0) {
    802027d2:	e3cd                	bnez	a5,80202874 <codeMapper+0x192>
                PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        }
        r = MIN(segmentSize - i, PAGE_SIZE - offset);
        bzero((void*) page2pa(p) + offset, r);
    }
    for (i += r; i < segmentSize; i += r) {
    802027d4:	94ca                	add	s1,s1,s2
    802027d6:	1d02                	slli	s10,s10,0x20
    802027d8:	020d5d13          	srli	s10,s10,0x20
    802027dc:	1ba4fe63          	bgeu	s1,s10,80202998 <codeMapper+0x2b6>
    return page - pages;
    802027e0:	001e0b17          	auipc	s6,0x1e0
    802027e4:	c98b0b13          	addi	s6,s6,-872 # 803e2478 <pages>
    802027e8:	0000ca97          	auipc	s5,0xc
    802027ec:	d88a8a93          	addi	s5,s5,-632 # 8020e570 <__func__.1590+0x8>
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802027f0:	4a05                	li	s4,1
    802027f2:	0a7e                	slli	s4,s4,0x1f
        if (pageAlloc(&p) != 0) {
            return -1;
        }
        pageInsert(process->pgdir, va + i, page2pa(p), 
            PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        r = MIN(PAGE_SIZE, segmentSize - i);
    802027f4:	6c85                	lui	s9,0x1
    802027f6:	aa1d                	j	8020292c <codeMapper+0x24a>
        r = MIN(PAGE_SIZE, binSize - i);
    802027f8:	2481                	sext.w	s1,s1
    return page - pages;
    802027fa:	f8843583          	ld	a1,-120(s0)
    802027fe:	416585b3          	sub	a1,a1,s6
    80202802:	858d                	srai	a1,a1,0x3
    80202804:	000ab783          	ld	a5,0(s5)
    80202808:	02f585b3          	mul	a1,a1,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020280c:	00c5959b          	slliw	a1,a1,0xc
    80202810:	1582                	slli	a1,a1,0x20
    80202812:	9181                	srli	a1,a1,0x20
        bcopy(binary + i, (void*) page2pa(p), r);
    80202814:	8626                	mv	a2,s1
    80202816:	95d2                	add	a1,a1,s4
    80202818:	012d8533          	add	a0,s11,s2
    8020281c:	fffff097          	auipc	ra,0xfffff
    80202820:	2a2080e7          	jalr	674(ra) # 80201abe <bcopy>
    for (i = r; i < binSize; i += r) {
    80202824:	9926                	add	s2,s2,s1
    80202826:	fb3970e3          	bgeu	s2,s3,802027c6 <codeMapper+0xe4>
        if (pageAlloc(&p) != 0) {
    8020282a:	f8840513          	addi	a0,s0,-120
    8020282e:	fffff097          	auipc	ra,0xfffff
    80202832:	450080e7          	jalr	1104(ra) # 80201c7e <pageAlloc>
    80202836:	14051063          	bnez	a0,80202976 <codeMapper+0x294>
    return page - pages;
    8020283a:	f8843603          	ld	a2,-120(s0)
    8020283e:	41660633          	sub	a2,a2,s6
    80202842:	860d                	srai	a2,a2,0x3
    80202844:	000ab783          	ld	a5,0(s5)
    80202848:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020284c:	00c6161b          	slliw	a2,a2,0xc
    80202850:	1602                	slli	a2,a2,0x20
    80202852:	9201                	srli	a2,a2,0x20
        pageInsert(process->pgdir, va + i, page2pa(p), 
    80202854:	46f9                	li	a3,30
    80202856:	9652                	add	a2,a2,s4
    80202858:	012b85b3          	add	a1,s7,s2
    8020285c:	168c3503          	ld	a0,360(s8) # fffffffffffff168 <bssEnd+0xffffffff7f9c4168>
    80202860:	fffff097          	auipc	ra,0xfffff
    80202864:	7ba080e7          	jalr	1978(ra) # 8020201a <pageInsert>
        r = MIN(PAGE_SIZE, binSize - i);
    80202868:	412984b3          	sub	s1,s3,s2
    8020286c:	f89cf6e3          	bgeu	s9,s1,802027f8 <codeMapper+0x116>
    80202870:	84e6                	mv	s1,s9
    80202872:	b759                	j	802027f8 <codeMapper+0x116>
        p = pa2page(pageLookup(process->pgdir, va + i, &j));
    80202874:	f8040613          	addi	a2,s0,-128
    80202878:	85d2                	mv	a1,s4
    8020287a:	168c3503          	ld	a0,360(s8)
    8020287e:	fffff097          	auipc	ra,0xfffff
    80202882:	592080e7          	jalr	1426(ra) # 80201e10 <pageLookup>
    if (pa == 0)
    80202886:	12050163          	beqz	a0,802029a8 <codeMapper+0x2c6>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    8020288a:	800007b7          	lui	a5,0x80000
    8020288e:	97aa                	add	a5,a5,a0
    80202890:	83b1                	srli	a5,a5,0xc
    return pages + ppn;
    80202892:	1782                	slli	a5,a5,0x20
    80202894:	9381                	srli	a5,a5,0x20
    80202896:	00179713          	slli	a4,a5,0x1
    8020289a:	97ba                	add	a5,a5,a4
    8020289c:	078e                	slli	a5,a5,0x3
    8020289e:	001e0717          	auipc	a4,0x1e0
    802028a2:	bda70713          	addi	a4,a4,-1062 # 803e2478 <pages>
    802028a6:	97ba                	add	a5,a5,a4
    802028a8:	f8f43423          	sd	a5,-120(s0)
        r = MIN(segmentSize - i, PAGE_SIZE - offset);
    802028ac:	020d1493          	slli	s1,s10,0x20
    802028b0:	9081                	srli	s1,s1,0x20
    802028b2:	6785                	lui	a5,0x1
    802028b4:	413787b3          	sub	a5,a5,s3
    802028b8:	412484b3          	sub	s1,s1,s2
    802028bc:	0097f363          	bgeu	a5,s1,802028c2 <codeMapper+0x1e0>
    802028c0:	84be                	mv	s1,a5
    802028c2:	2481                	sext.w	s1,s1
    return page - pages;
    802028c4:	f8843503          	ld	a0,-120(s0)
    802028c8:	001e0797          	auipc	a5,0x1e0
    802028cc:	bb078793          	addi	a5,a5,-1104 # 803e2478 <pages>
    802028d0:	8d1d                	sub	a0,a0,a5
    802028d2:	850d                	srai	a0,a0,0x3
    802028d4:	0000c797          	auipc	a5,0xc
    802028d8:	c9c7b783          	ld	a5,-868(a5) # 8020e570 <__func__.1590+0x8>
    802028dc:	02f50533          	mul	a0,a0,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802028e0:	00c5151b          	slliw	a0,a0,0xc
    802028e4:	1502                	slli	a0,a0,0x20
    802028e6:	9101                	srli	a0,a0,0x20
    802028e8:	4785                	li	a5,1
    802028ea:	07fe                	slli	a5,a5,0x1f
    802028ec:	953e                	add	a0,a0,a5
        bzero((void*) page2pa(p) + offset, r);
    802028ee:	85a6                	mv	a1,s1
    802028f0:	954e                	add	a0,a0,s3
    802028f2:	fffff097          	auipc	ra,0xfffff
    802028f6:	1f2080e7          	jalr	498(ra) # 80201ae4 <bzero>
    802028fa:	bde9                	j	802027d4 <codeMapper+0xf2>
        bzero((void*) page2pa(p), r);
    802028fc:	2981                	sext.w	s3,s3
    return page - pages;
    802028fe:	f8843783          	ld	a5,-120(s0)
    80202902:	416787b3          	sub	a5,a5,s6
    80202906:	878d                	srai	a5,a5,0x3
    80202908:	000ab503          	ld	a0,0(s5)
    8020290c:	02a787b3          	mul	a5,a5,a0
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202910:	00c7979b          	slliw	a5,a5,0xc
    80202914:	1782                	slli	a5,a5,0x20
    80202916:	9381                	srli	a5,a5,0x20
    80202918:	85ce                	mv	a1,s3
    8020291a:	01478533          	add	a0,a5,s4
    8020291e:	fffff097          	auipc	ra,0xfffff
    80202922:	1c6080e7          	jalr	454(ra) # 80201ae4 <bzero>
    for (i += r; i < segmentSize; i += r) {
    80202926:	94ce                	add	s1,s1,s3
    80202928:	05a4f863          	bgeu	s1,s10,80202978 <codeMapper+0x296>
        if (pageAlloc(&p) != 0) {
    8020292c:	f8840513          	addi	a0,s0,-120
    80202930:	fffff097          	auipc	ra,0xfffff
    80202934:	34e080e7          	jalr	846(ra) # 80201c7e <pageAlloc>
    80202938:	892a                	mv	s2,a0
    8020293a:	e12d                	bnez	a0,8020299c <codeMapper+0x2ba>
    return page - pages;
    8020293c:	f8843603          	ld	a2,-120(s0)
    80202940:	41660633          	sub	a2,a2,s6
    80202944:	860d                	srai	a2,a2,0x3
    80202946:	000ab783          	ld	a5,0(s5)
    8020294a:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020294e:	00c6161b          	slliw	a2,a2,0xc
    80202952:	1602                	slli	a2,a2,0x20
    80202954:	9201                	srli	a2,a2,0x20
        pageInsert(process->pgdir, va + i, page2pa(p), 
    80202956:	46f9                	li	a3,30
    80202958:	9652                	add	a2,a2,s4
    8020295a:	009b85b3          	add	a1,s7,s1
    8020295e:	168c3503          	ld	a0,360(s8)
    80202962:	fffff097          	auipc	ra,0xfffff
    80202966:	6b8080e7          	jalr	1720(ra) # 8020201a <pageInsert>
        r = MIN(PAGE_SIZE, segmentSize - i);
    8020296a:	409d09b3          	sub	s3,s10,s1
    8020296e:	f93cf7e3          	bgeu	s9,s3,802028fc <codeMapper+0x21a>
    80202972:	89e6                	mv	s3,s9
    80202974:	b761                	j	802028fc <codeMapper+0x21a>
            return -1;
    80202976:	597d                	li	s2,-1
    }
    return 0;
}
    80202978:	854a                	mv	a0,s2
    8020297a:	70e6                	ld	ra,120(sp)
    8020297c:	7446                	ld	s0,112(sp)
    8020297e:	74a6                	ld	s1,104(sp)
    80202980:	7906                	ld	s2,96(sp)
    80202982:	69e6                	ld	s3,88(sp)
    80202984:	6a46                	ld	s4,80(sp)
    80202986:	6aa6                	ld	s5,72(sp)
    80202988:	6b06                	ld	s6,64(sp)
    8020298a:	7be2                	ld	s7,56(sp)
    8020298c:	7c42                	ld	s8,48(sp)
    8020298e:	7ca2                	ld	s9,40(sp)
    80202990:	7d02                	ld	s10,32(sp)
    80202992:	6de2                	ld	s11,24(sp)
    80202994:	6109                	addi	sp,sp,128
    80202996:	8082                	ret
    return 0;
    80202998:	4901                	li	s2,0
    8020299a:	bff9                	j	80202978 <codeMapper+0x296>
            return -1;
    8020299c:	597d                	li	s2,-1
    8020299e:	bfe9                	j	80202978 <codeMapper+0x296>
                return -1;
    802029a0:	597d                	li	s2,-1
    802029a2:	bfd9                	j	80202978 <codeMapper+0x296>
                return -1;
    802029a4:	597d                	li	s2,-1
    802029a6:	bfc9                	j	80202978 <codeMapper+0x296>
        p = pa2page(pageLookup(process->pgdir, va + i, &j));
    802029a8:	f8043423          	sd	zero,-120(s0)
            if (pageAlloc(&p) != 0) {
    802029ac:	f8840513          	addi	a0,s0,-120
    802029b0:	fffff097          	auipc	ra,0xfffff
    802029b4:	2ce080e7          	jalr	718(ra) # 80201c7e <pageAlloc>
    802029b8:	f565                	bnez	a0,802029a0 <codeMapper+0x2be>
    return page - pages;
    802029ba:	f8843783          	ld	a5,-120(s0)
    802029be:	001e0717          	auipc	a4,0x1e0
    802029c2:	aba70713          	addi	a4,a4,-1350 # 803e2478 <pages>
    802029c6:	8f99                	sub	a5,a5,a4
    802029c8:	878d                	srai	a5,a5,0x3
    802029ca:	0000c717          	auipc	a4,0xc
    802029ce:	ba673703          	ld	a4,-1114(a4) # 8020e570 <__func__.1590+0x8>
    802029d2:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802029d6:	00c7979b          	slliw	a5,a5,0xc
    802029da:	1782                	slli	a5,a5,0x20
    802029dc:	9381                	srli	a5,a5,0x20
            pageInsert(process->pgdir, va + i, page2pa(p), 
    802029de:	46f9                	li	a3,30
    802029e0:	4605                	li	a2,1
    802029e2:	067e                	slli	a2,a2,0x1f
    802029e4:	963e                	add	a2,a2,a5
    802029e6:	85d2                	mv	a1,s4
    802029e8:	168c3503          	ld	a0,360(s8)
    802029ec:	fffff097          	auipc	ra,0xfffff
    802029f0:	62e080e7          	jalr	1582(ra) # 8020201a <pageInsert>
    802029f4:	bd65                	j	802028ac <codeMapper+0x1ca>
    for (i = r; i < binSize; i += r) {
    802029f6:	894e                	mv	s2,s3
    int r = 0;
    802029f8:	4481                	li	s1,0
    802029fa:	bbe9                	j	802027d4 <codeMapper+0xf2>
        p = pa2page(pageLookup(process->pgdir, va, &j));
    802029fc:	f8043423          	sd	zero,-120(s0)
            if (pageAlloc(&p) < 0) {
    80202a00:	f8840513          	addi	a0,s0,-120
    80202a04:	fffff097          	auipc	ra,0xfffff
    80202a08:	27a080e7          	jalr	634(ra) # 80201c7e <pageAlloc>
    80202a0c:	f8054ce3          	bltz	a0,802029a4 <codeMapper+0x2c2>
    return page - pages;
    80202a10:	f8843783          	ld	a5,-120(s0)
    80202a14:	001e0717          	auipc	a4,0x1e0
    80202a18:	a6470713          	addi	a4,a4,-1436 # 803e2478 <pages>
    80202a1c:	8f99                	sub	a5,a5,a4
    80202a1e:	878d                	srai	a5,a5,0x3
    80202a20:	0000c717          	auipc	a4,0xc
    80202a24:	b5073703          	ld	a4,-1200(a4) # 8020e570 <__func__.1590+0x8>
    80202a28:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202a2c:	00c7979b          	slliw	a5,a5,0xc
    80202a30:	1782                	slli	a5,a5,0x20
    80202a32:	9381                	srli	a5,a5,0x20
            pageInsert(process->pgdir, va, page2pa(p), 
    80202a34:	46f9                	li	a3,30
    80202a36:	4605                	li	a2,1
    80202a38:	067e                	slli	a2,a2,0x1f
    80202a3a:	963e                	add	a2,a2,a5
    80202a3c:	85de                	mv	a1,s7
    80202a3e:	168c3503          	ld	a0,360(s8)
    80202a42:	fffff097          	auipc	ra,0xfffff
    80202a46:	5d8080e7          	jalr	1496(ra) # 8020201a <pageInsert>
    80202a4a:	b32d                	j	80202774 <codeMapper+0x92>

0000000080202a4c <myproc>:
Process* myproc() {
    80202a4c:	1101                	addi	sp,sp,-32
    80202a4e:	ec06                	sd	ra,24(sp)
    80202a50:	e822                	sd	s0,16(sp)
    80202a52:	e426                	sd	s1,8(sp)
    80202a54:	1000                	addi	s0,sp,32
    interruptPush();
    80202a56:	00003097          	auipc	ra,0x3
    80202a5a:	4da080e7          	jalr	1242(ra) # 80205f30 <interruptPush>
#define HART_TOTAL_NUMBER 5

// which hart (core) is this?
static inline u64 r_hartid() {
    u64 x;
    asm volatile("mv %0, tp" : "=r" (x) );
    80202a5e:	8792                	mv	a5,tp
    if (currentProcess[hartId] == NULL)
    80202a60:	2781                	sext.w	a5,a5
    80202a62:	078e                	slli	a5,a5,0x3
    80202a64:	002a1717          	auipc	a4,0x2a1
    80202a68:	a4c70713          	addi	a4,a4,-1460 # 804a34b0 <currentProcess>
    80202a6c:	97ba                	add	a5,a5,a4
    80202a6e:	6384                	ld	s1,0(a5)
    80202a70:	c899                	beqz	s1,80202a86 <myproc+0x3a>
    interruptPop();
    80202a72:	00003097          	auipc	ra,0x3
    80202a76:	4f6080e7          	jalr	1270(ra) # 80205f68 <interruptPop>
}
    80202a7a:	8526                	mv	a0,s1
    80202a7c:	60e2                	ld	ra,24(sp)
    80202a7e:	6442                	ld	s0,16(sp)
    80202a80:	64a2                	ld	s1,8(sp)
    80202a82:	6105                	addi	sp,sp,32
    80202a84:	8082                	ret
        panic("get current process error");
    80202a86:	0000b697          	auipc	a3,0xb
    80202a8a:	b5a68693          	addi	a3,a3,-1190 # 8020d5e0 <__func__.1844+0x10>
    80202a8e:	0000c617          	auipc	a2,0xc
    80202a92:	a5260613          	addi	a2,a2,-1454 # 8020e4e0 <__func__.1929>
    80202a96:	45e9                	li	a1,26
    80202a98:	0000b517          	auipc	a0,0xb
    80202a9c:	b6850513          	addi	a0,a0,-1176 # 8020d600 <__func__.1844+0x30>
    80202aa0:	ffffe097          	auipc	ra,0xffffe
    80202aa4:	0b6080e7          	jalr	182(ra) # 80200b56 <_panic_>

0000000080202aa8 <getProcessTopSp>:
u64 getProcessTopSp(Process* p) {
    80202aa8:	1141                	addi	sp,sp,-16
    80202aaa:	e422                	sd	s0,8(sp)
    80202aac:	0800                	addi	s0,sp,16
    return KERNEL_PROCESS_SP_TOP - (u64)(p - processes) * 10 * PAGE_SIZE;
    80202aae:	002a1797          	auipc	a5,0x2a1
    80202ab2:	ae278793          	addi	a5,a5,-1310 # 804a3590 <processes>
    80202ab6:	8d1d                	sub	a0,a0,a5
    80202ab8:	850d                	srai	a0,a0,0x3
    80202aba:	0000c797          	auipc	a5,0xc
    80202abe:	ac67b783          	ld	a5,-1338(a5) # 8020e580 <__func__.1590+0x18>
    80202ac2:	02f50533          	mul	a0,a0,a5
    80202ac6:	00251793          	slli	a5,a0,0x2
    80202aca:	953e                	add	a0,a0,a5
    80202acc:	0536                	slli	a0,a0,0xd
}
    80202ace:	4785                	li	a5,1
    80202ad0:	1792                	slli	a5,a5,0x24
    80202ad2:	40a78533          	sub	a0,a5,a0
    80202ad6:	6422                	ld	s0,8(sp)
    80202ad8:	0141                	addi	sp,sp,16
    80202ada:	8082                	ret

0000000080202adc <getSignalHandler>:
SignalAction *getSignalHandler(Process *p) {
    80202adc:	1141                	addi	sp,sp,-16
    80202ade:	e422                	sd	s0,8(sp)
    80202ae0:	0800                	addi	s0,sp,16
    return (SignalAction*)(PROCESS_SIGNAL_BASE + (u64)(p - processes) * PAGE_SIZE);
    80202ae2:	002a1797          	auipc	a5,0x2a1
    80202ae6:	aae78793          	addi	a5,a5,-1362 # 804a3590 <processes>
    80202aea:	8d1d                	sub	a0,a0,a5
    80202aec:	850d                	srai	a0,a0,0x3
    80202aee:	0000c797          	auipc	a5,0xc
    80202af2:	a927b783          	ld	a5,-1390(a5) # 8020e580 <__func__.1590+0x18>
    80202af6:	02f50533          	mul	a0,a0,a5
    80202afa:	010407b7          	lui	a5,0x1040
    80202afe:	953e                	add	a0,a0,a5
}
    80202b00:	0532                	slli	a0,a0,0xc
    80202b02:	6422                	ld	s0,8(sp)
    80202b04:	0141                	addi	sp,sp,16
    80202b06:	8082                	ret

0000000080202b08 <processInit>:
void processInit() {
    80202b08:	1101                	addi	sp,sp,-32
    80202b0a:	ec06                	sd	ra,24(sp)
    80202b0c:	e822                	sd	s0,16(sp)
    80202b0e:	e426                	sd	s1,8(sp)
    80202b10:	1000                	addi	s0,sp,32
    printf("Process init start...\n");
    80202b12:	0000b517          	auipc	a0,0xb
    80202b16:	afe50513          	addi	a0,a0,-1282 # 8020d610 <__func__.1844+0x40>
    80202b1a:	ffffe097          	auipc	ra,0xffffe
    80202b1e:	fb0080e7          	jalr	-80(ra) # 80200aca <printf>
    initLock(&freeProcessesLock, "freeProcess");
    80202b22:	002a1497          	auipc	s1,0x2a1
    80202b26:	98e48493          	addi	s1,s1,-1650 # 804a34b0 <currentProcess>
    80202b2a:	0000b597          	auipc	a1,0xb
    80202b2e:	afe58593          	addi	a1,a1,-1282 # 8020d628 <__func__.1844+0x58>
    80202b32:	002a1517          	auipc	a0,0x2a1
    80202b36:	9a650513          	addi	a0,a0,-1626 # 804a34d8 <freeProcessesLock>
    80202b3a:	00003097          	auipc	ra,0x3
    80202b3e:	5e0080e7          	jalr	1504(ra) # 8020611a <initLock>
    initLock(&scheduleListLock, "scheduleList");
    80202b42:	0000b597          	auipc	a1,0xb
    80202b46:	af658593          	addi	a1,a1,-1290 # 8020d638 <__func__.1844+0x68>
    80202b4a:	002a1517          	auipc	a0,0x2a1
    80202b4e:	9a650513          	addi	a0,a0,-1626 # 804a34f0 <scheduleListLock>
    80202b52:	00003097          	auipc	ra,0x3
    80202b56:	5c8080e7          	jalr	1480(ra) # 8020611a <initLock>
    initLock(&processIdLock, "processId");
    80202b5a:	0000b597          	auipc	a1,0xb
    80202b5e:	aee58593          	addi	a1,a1,-1298 # 8020d648 <__func__.1844+0x78>
    80202b62:	002a1517          	auipc	a0,0x2a1
    80202b66:	9a650513          	addi	a0,a0,-1626 # 804a3508 <processIdLock>
    80202b6a:	00003097          	auipc	ra,0x3
    80202b6e:	5b0080e7          	jalr	1456(ra) # 8020611a <initLock>
    initLock(&waitLock, "waitProcess");
    80202b72:	0000b597          	auipc	a1,0xb
    80202b76:	ae658593          	addi	a1,a1,-1306 # 8020d658 <__func__.1844+0x88>
    80202b7a:	002a1517          	auipc	a0,0x2a1
    80202b7e:	9a650513          	addi	a0,a0,-1626 # 804a3520 <waitLock>
    80202b82:	00003097          	auipc	ra,0x3
    80202b86:	598080e7          	jalr	1432(ra) # 8020611a <initLock>
    initLock(&currentProcessLock, "currentProcess");
    80202b8a:	0000b597          	auipc	a1,0xb
    80202b8e:	ade58593          	addi	a1,a1,-1314 # 8020d668 <__func__.1844+0x98>
    80202b92:	002a1517          	auipc	a0,0x2a1
    80202b96:	9a650513          	addi	a0,a0,-1626 # 804a3538 <currentProcessLock>
    80202b9a:	00003097          	auipc	ra,0x3
    80202b9e:	580080e7          	jalr	1408(ra) # 8020611a <initLock>
    LIST_INIT(&scheduleList[0]);
    80202ba2:	0a04b023          	sd	zero,160(s1)
    LIST_INIT(&scheduleList[1]);
    80202ba6:	0a04b423          	sd	zero,168(s1)
        processes[i].trapframe.kernelSatp = MAKE_SATP(kernelPageDirectory);
    80202baa:	00437597          	auipc	a1,0x437
    80202bae:	45658593          	addi	a1,a1,1110 # 8063a000 <_pgdir>
    80202bb2:	81b1                	srli	a1,a1,0xc
    80202bb4:	57fd                	li	a5,-1
    80202bb6:	17fe                	slli	a5,a5,0x3f
    80202bb8:	8ddd                	or	a1,a1,a5
    80202bba:	0041a797          	auipc	a5,0x41a
    80202bbe:	3ee78793          	addi	a5,a5,1006 # 8061cfa8 <processes+0x179a18>
    80202bc2:	002a1817          	auipc	a6,0x2a1
    80202bc6:	9ce80813          	addi	a6,a6,-1586 # 804a3590 <processes>
    80202bca:	4681                	li	a3,0
        LIST_INSERT_HEAD(&freeProcesses, &processes[i], link);
    80202bcc:	0041b517          	auipc	a0,0x41b
    80202bd0:	9cc50513          	addi	a0,a0,-1588 # 8061d598 <freeProcesses>
    80202bd4:	a801                	j	80202be4 <processInit+0xdc>
    80202bd6:	14a6bc23          	sd	a0,344(a3)
    for (i = PROCESS_TOTAL_NUMBER - 1; i >= 0; i--) {
    80202bda:	a1878713          	addi	a4,a5,-1512
    80202bde:	03078063          	beq	a5,a6,80202bfe <processInit+0xf6>
    80202be2:	87ba                	mv	a5,a4
        processes[i].state = UNUSED;
    80202be4:	8736                	mv	a4,a3
    80202be6:	86be                	mv	a3,a5
    80202be8:	1807a623          	sw	zero,396(a5)
        processes[i].trapframe.kernelSatp = MAKE_SATP(kernelPageDirectory);
    80202bec:	e38c                	sd	a1,0(a5)
        LIST_INSERT_HEAD(&freeProcesses, &processes[i], link);
    80202bee:	14e7b823          	sd	a4,336(a5)
    80202bf2:	d375                	beqz	a4,80202bd6 <processInit+0xce>
    80202bf4:	15078613          	addi	a2,a5,336
    80202bf8:	14c73c23          	sd	a2,344(a4)
    80202bfc:	bfe9                	j	80202bd6 <processInit+0xce>
    80202bfe:	002a1797          	auipc	a5,0x2a1
    80202c02:	99278793          	addi	a5,a5,-1646 # 804a3590 <processes>
    80202c06:	0041b717          	auipc	a4,0x41b
    80202c0a:	98f73923          	sd	a5,-1646(a4) # 8061d598 <freeProcesses>
    w_sscratch((u64)getHartTrapFrame());
    80202c0e:	00003097          	auipc	ra,0x3
    80202c12:	64c080e7          	jalr	1612(ra) # 8020625a <getHartTrapFrame>
	return x;
}

// Supervisor Scratch register, for early trap handler in trampoline.S.
static inline void w_sscratch(u64 x) {
	asm volatile("csrw sscratch, %0" : : "r" (x));
    80202c16:	14051073          	csrw	sscratch,a0
    printf("Process init finish!\n");
    80202c1a:	0000b517          	auipc	a0,0xb
    80202c1e:	a5e50513          	addi	a0,a0,-1442 # 8020d678 <__func__.1844+0xa8>
    80202c22:	ffffe097          	auipc	ra,0xffffe
    80202c26:	ea8080e7          	jalr	-344(ra) # 80200aca <printf>
}
    80202c2a:	60e2                	ld	ra,24(sp)
    80202c2c:	6442                	ld	s0,16(sp)
    80202c2e:	64a2                	ld	s1,8(sp)
    80202c30:	6105                	addi	sp,sp,32
    80202c32:	8082                	ret

0000000080202c34 <generateProcessId>:
u32 generateProcessId(Process *p) {
    80202c34:	7179                	addi	sp,sp,-48
    80202c36:	f406                	sd	ra,40(sp)
    80202c38:	f022                	sd	s0,32(sp)
    80202c3a:	ec26                	sd	s1,24(sp)
    80202c3c:	e84a                	sd	s2,16(sp)
    80202c3e:	e44e                	sd	s3,8(sp)
    80202c40:	1800                	addi	s0,sp,48
    80202c42:	892a                	mv	s2,a0
    acquireLock(&processIdLock);
    80202c44:	002a1997          	auipc	s3,0x2a1
    80202c48:	8c498993          	addi	s3,s3,-1852 # 804a3508 <processIdLock>
    80202c4c:	854e                	mv	a0,s3
    80202c4e:	00003097          	auipc	ra,0x3
    80202c52:	516080e7          	jalr	1302(ra) # 80206164 <acquireLock>
    u32 processId = (++nextId << (1 + LOG_PROCESS_NUM)) | (u32)(p - processes);
    80202c56:	0041b717          	auipc	a4,0x41b
    80202c5a:	93e70713          	addi	a4,a4,-1730 # 8061d594 <nextId.1951>
    80202c5e:	431c                	lw	a5,0(a4)
    80202c60:	2785                	addiw	a5,a5,1
    80202c62:	c31c                	sw	a5,0(a4)
    80202c64:	002a1497          	auipc	s1,0x2a1
    80202c68:	92c48493          	addi	s1,s1,-1748 # 804a3590 <processes>
    80202c6c:	409904b3          	sub	s1,s2,s1
    80202c70:	848d                	srai	s1,s1,0x3
    80202c72:	0000c917          	auipc	s2,0xc
    80202c76:	90e93903          	ld	s2,-1778(s2) # 8020e580 <__func__.1590+0x18>
    80202c7a:	032484b3          	mul	s1,s1,s2
    80202c7e:	00b7979b          	slliw	a5,a5,0xb
    80202c82:	8cdd                	or	s1,s1,a5
    80202c84:	2481                	sext.w	s1,s1
    releaseLock(&processIdLock);
    80202c86:	854e                	mv	a0,s3
    80202c88:	00003097          	auipc	ra,0x3
    80202c8c:	558080e7          	jalr	1368(ra) # 802061e0 <releaseLock>
}
    80202c90:	8526                	mv	a0,s1
    80202c92:	70a2                	ld	ra,40(sp)
    80202c94:	7402                	ld	s0,32(sp)
    80202c96:	64e2                	ld	s1,24(sp)
    80202c98:	6942                	ld	s2,16(sp)
    80202c9a:	69a2                	ld	s3,8(sp)
    80202c9c:	6145                	addi	sp,sp,48
    80202c9e:	8082                	ret

0000000080202ca0 <pid2Process>:
int pid2Process(u32 processId, struct Process **process, int checkPerm) {
    80202ca0:	1141                	addi	sp,sp,-16
    80202ca2:	e422                	sd	s0,8(sp)
    80202ca4:	0800                	addi	s0,sp,16
    asm volatile("mv %0, tp" : "=r" (x) );
    80202ca6:	8792                	mv	a5,tp
    int hartId = r_hartid();
    80202ca8:	0007871b          	sext.w	a4,a5
    if (processId == 0) {
    80202cac:	c921                	beqz	a0,80202cfc <pid2Process+0x5c>
    p = processes + PROCESS_OFFSET(processId);
    80202cae:	3ff57793          	andi	a5,a0,1023
    80202cb2:	5e800693          	li	a3,1512
    80202cb6:	02d787b3          	mul	a5,a5,a3
    80202cba:	002a1697          	auipc	a3,0x2a1
    80202cbe:	8d668693          	addi	a3,a3,-1834 # 804a3590 <processes>
    80202cc2:	97b6                	add	a5,a5,a3
    if (p->state == UNUSED || p->id != processId) {
    80202cc4:	18c7a683          	lw	a3,396(a5)
    80202cc8:	c6a1                	beqz	a3,80202d10 <pid2Process+0x70>
    80202cca:	1707a683          	lw	a3,368(a5)
    80202cce:	04a69163          	bne	a3,a0,80202d10 <pid2Process+0x70>
    if (checkPerm) {
    80202cd2:	c205                	beqz	a2,80202cf2 <pid2Process+0x52>
        if (p != currentProcess[hartId] && p->parentId != currentProcess[hartId]->id) {
    80202cd4:	070e                	slli	a4,a4,0x3
    80202cd6:	002a0697          	auipc	a3,0x2a0
    80202cda:	7da68693          	addi	a3,a3,2010 # 804a34b0 <currentProcess>
    80202cde:	9736                	add	a4,a4,a3
    80202ce0:	6318                	ld	a4,0(a4)
    80202ce2:	00f70863          	beq	a4,a5,80202cf2 <pid2Process+0x52>
    80202ce6:	1747a683          	lw	a3,372(a5)
    80202cea:	17072703          	lw	a4,368(a4)
    80202cee:	02e69563          	bne	a3,a4,80202d18 <pid2Process+0x78>
    *process = p;
    80202cf2:	e19c                	sd	a5,0(a1)
    return 0;
    80202cf4:	4501                	li	a0,0
}
    80202cf6:	6422                	ld	s0,8(sp)
    80202cf8:	0141                	addi	sp,sp,16
    80202cfa:	8082                	ret
        *process = currentProcess[hartId];
    80202cfc:	00371793          	slli	a5,a4,0x3
    80202d00:	002a0717          	auipc	a4,0x2a0
    80202d04:	7b070713          	addi	a4,a4,1968 # 804a34b0 <currentProcess>
    80202d08:	97ba                	add	a5,a5,a4
    80202d0a:	639c                	ld	a5,0(a5)
    80202d0c:	e19c                	sd	a5,0(a1)
        return 0;
    80202d0e:	b7e5                	j	80202cf6 <pid2Process+0x56>
        *process = NULL;
    80202d10:	0005b023          	sd	zero,0(a1)
        return -INVALID_PROCESS_STATUS;
    80202d14:	5565                	li	a0,-7
    80202d16:	b7c5                	j	80202cf6 <pid2Process+0x56>
            *process = NULL;
    80202d18:	0005b023          	sd	zero,0(a1)
            return -INVALID_PERM;
    80202d1c:	5561                	li	a0,-8
    80202d1e:	bfe1                	j	80202cf6 <pid2Process+0x56>

0000000080202d20 <setup>:
int setup(Process *p) {
    80202d20:	7139                	addi	sp,sp,-64
    80202d22:	fc06                	sd	ra,56(sp)
    80202d24:	f822                	sd	s0,48(sp)
    80202d26:	f426                	sd	s1,40(sp)
    80202d28:	f04a                	sd	s2,32(sp)
    80202d2a:	ec4e                	sd	s3,24(sp)
    80202d2c:	e852                	sd	s4,16(sp)
    80202d2e:	0080                	addi	s0,sp,64
    80202d30:	84aa                	mv	s1,a0
    r = allocPgdir(&page);
    80202d32:	fc840513          	addi	a0,s0,-56
    80202d36:	fffff097          	auipc	ra,0xfffff
    80202d3a:	39a080e7          	jalr	922(ra) # 802020d0 <allocPgdir>
    if (r < 0) {
    80202d3e:	16054763          	bltz	a0,80202eac <setup+0x18c>
    return page - pages;
    80202d42:	001dfa17          	auipc	s4,0x1df
    80202d46:	736a0a13          	addi	s4,s4,1846 # 803e2478 <pages>
    80202d4a:	fc843783          	ld	a5,-56(s0)
    80202d4e:	414787b3          	sub	a5,a5,s4
    80202d52:	878d                	srai	a5,a5,0x3
    80202d54:	0000c997          	auipc	s3,0xc
    80202d58:	81c9b983          	ld	s3,-2020(s3) # 8020e570 <__func__.1590+0x8>
    80202d5c:	033787b3          	mul	a5,a5,s3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202d60:	00c7979b          	slliw	a5,a5,0xc
    80202d64:	1782                	slli	a5,a5,0x20
    80202d66:	9381                	srli	a5,a5,0x20
    80202d68:	4905                	li	s2,1
    80202d6a:	097e                	slli	s2,s2,0x1f
    80202d6c:	97ca                	add	a5,a5,s2
    p->pgdir = (u64*) page2pa(page);
    80202d6e:	16f4b423          	sd	a5,360(s1)
    p->chan = 0;
    80202d72:	5a04b823          	sd	zero,1456(s1)
    p->retValue = 0;
    80202d76:	5c04b423          	sd	zero,1480(s1)
    p->state = UNUSED;
    80202d7a:	1804a623          	sw	zero,396(s1)
    p->parentId = 0;
    80202d7e:	1604aa23          	sw	zero,372(s1)
    p->heapBottom = USER_HEAP_BOTTOM;
    80202d82:	01fc07b7          	lui	a5,0x1fc0
    80202d86:	17fd                	addi	a5,a5,-1
    80202d88:	07b6                	slli	a5,a5,0xd
    80202d8a:	5cf4b823          	sd	a5,1488(s1)
    p->awakeTime = 0;
    80202d8e:	1604b023          	sd	zero,352(s1)
    p->cwd = &rootFileSystem.root;
    80202d92:	0041b797          	auipc	a5,0x41b
    80202d96:	8ae78793          	addi	a5,a5,-1874 # 8061d640 <rootFileSystem+0x70>
    80202d9a:	1af4b423          	sd	a5,424(s1)
    r = pageAlloc(&page);
    80202d9e:	fc840513          	addi	a0,s0,-56
    80202da2:	fffff097          	auipc	ra,0xfffff
    80202da6:	edc080e7          	jalr	-292(ra) # 80201c7e <pageAlloc>
    pageInsert(kernelPageDirectory, getProcessTopSp(p) - PGSIZE, page2pa(page), PTE_READ | PTE_WRITE | PTE_EXECUTE);
    80202daa:	8526                	mv	a0,s1
    80202dac:	00000097          	auipc	ra,0x0
    80202db0:	cfc080e7          	jalr	-772(ra) # 80202aa8 <getProcessTopSp>
    return page - pages;
    80202db4:	fc843603          	ld	a2,-56(s0)
    80202db8:	41460633          	sub	a2,a2,s4
    80202dbc:	860d                	srai	a2,a2,0x3
    80202dbe:	03360633          	mul	a2,a2,s3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202dc2:	00c6161b          	slliw	a2,a2,0xc
    80202dc6:	1602                	slli	a2,a2,0x20
    80202dc8:	9201                	srli	a2,a2,0x20
    80202dca:	46b9                	li	a3,14
    80202dcc:	964a                	add	a2,a2,s2
    80202dce:	75fd                	lui	a1,0xfffff
    80202dd0:	95aa                	add	a1,a1,a0
    80202dd2:	00437517          	auipc	a0,0x437
    80202dd6:	22e50513          	addi	a0,a0,558 # 8063a000 <_pgdir>
    80202dda:	fffff097          	auipc	ra,0xfffff
    80202dde:	240080e7          	jalr	576(ra) # 8020201a <pageInsert>
    r = pageAlloc(&page);
    80202de2:	fc840513          	addi	a0,s0,-56
    80202de6:	fffff097          	auipc	ra,0xfffff
    80202dea:	e98080e7          	jalr	-360(ra) # 80201c7e <pageAlloc>
    pageInsert(kernelPageDirectory, (u64)getSignalHandler(p), page2pa(page), PTE_READ | PTE_WRITE);
    80202dee:	8526                	mv	a0,s1
    80202df0:	00000097          	auipc	ra,0x0
    80202df4:	cec080e7          	jalr	-788(ra) # 80202adc <getSignalHandler>
    80202df8:	85aa                	mv	a1,a0
    return page - pages;
    80202dfa:	fc843603          	ld	a2,-56(s0)
    80202dfe:	41460633          	sub	a2,a2,s4
    80202e02:	860d                	srai	a2,a2,0x3
    80202e04:	03360633          	mul	a2,a2,s3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202e08:	00c6161b          	slliw	a2,a2,0xc
    80202e0c:	1602                	slli	a2,a2,0x20
    80202e0e:	9201                	srli	a2,a2,0x20
    80202e10:	4699                	li	a3,6
    80202e12:	964a                	add	a2,a2,s2
    80202e14:	00437517          	auipc	a0,0x437
    80202e18:	1ec50513          	addi	a0,a0,492 # 8063a000 <_pgdir>
    80202e1c:	fffff097          	auipc	ra,0xfffff
    80202e20:	1fe080e7          	jalr	510(ra) # 8020201a <pageInsert>
    r = pageAlloc(&page);
    80202e24:	fc840513          	addi	a0,s0,-56
    80202e28:	fffff097          	auipc	ra,0xfffff
    80202e2c:	e56080e7          	jalr	-426(ra) # 80201c7e <pageAlloc>
    return page - pages;
    80202e30:	fc843603          	ld	a2,-56(s0)
    80202e34:	41460633          	sub	a2,a2,s4
    80202e38:	860d                	srai	a2,a2,0x3
    80202e3a:	03360633          	mul	a2,a2,s3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202e3e:	00c6161b          	slliw	a2,a2,0xc
    80202e42:	1602                	slli	a2,a2,0x20
    80202e44:	9201                	srli	a2,a2,0x20
    pageInsert(p->pgdir, USER_STACK_TOP - PGSIZE, page2pa(page), PTE_USER | PTE_READ | PTE_WRITE | PTE_EXECUTE); // We must alloc the stack
    80202e46:	46f9                	li	a3,30
    80202e48:	964a                	add	a2,a2,s2
    80202e4a:	04000937          	lui	s2,0x4000
    80202e4e:	ffd90593          	addi	a1,s2,-3 # 3fffffd <_start-0x7c200003>
    80202e52:	05b2                	slli	a1,a1,0xc
    80202e54:	1684b503          	ld	a0,360(s1)
    80202e58:	fffff097          	auipc	ra,0xfffff
    80202e5c:	1c2080e7          	jalr	450(ra) # 8020201a <pageInsert>
    pageInsert(p->pgdir, TRAMPOLINE_BASE, (u64)trampoline, 
    80202e60:	46b9                	li	a3,14
    80202e62:	00008617          	auipc	a2,0x8
    80202e66:	19e60613          	addi	a2,a2,414 # 8020b000 <_trampoline>
    80202e6a:	020005b7          	lui	a1,0x2000
    80202e6e:	15fd                	addi	a1,a1,-1
    80202e70:	05b6                	slli	a1,a1,0xd
    80202e72:	1684b503          	ld	a0,360(s1)
    80202e76:	fffff097          	auipc	ra,0xfffff
    80202e7a:	1a4080e7          	jalr	420(ra) # 8020201a <pageInsert>
    pageInsert(p->pgdir, TRAMPOLINE_BASE + PAGE_SIZE, ((u64)trampoline) + PAGE_SIZE, 
    80202e7e:	46b9                	li	a3,14
    80202e80:	00009617          	auipc	a2,0x9
    80202e84:	18060613          	addi	a2,a2,384 # 8020c000 <trapframe>
    80202e88:	fff90593          	addi	a1,s2,-1
    80202e8c:	05b2                	slli	a1,a1,0xc
    80202e8e:	1684b503          	ld	a0,360(s1)
    80202e92:	fffff097          	auipc	ra,0xfffff
    80202e96:	188080e7          	jalr	392(ra) # 8020201a <pageInsert>
}
    80202e9a:	4501                	li	a0,0
    80202e9c:	70e2                	ld	ra,56(sp)
    80202e9e:	7442                	ld	s0,48(sp)
    80202ea0:	74a2                	ld	s1,40(sp)
    80202ea2:	7902                	ld	s2,32(sp)
    80202ea4:	69e2                	ld	s3,24(sp)
    80202ea6:	6a42                	ld	s4,16(sp)
    80202ea8:	6121                	addi	sp,sp,64
    80202eaa:	8082                	ret
        panic("setup page alloc error\n");
    80202eac:	0000a697          	auipc	a3,0xa
    80202eb0:	7e468693          	addi	a3,a3,2020 # 8020d690 <__func__.1844+0xc0>
    80202eb4:	0000b617          	auipc	a2,0xb
    80202eb8:	62460613          	addi	a2,a2,1572 # 8020e4d8 <__func__.1984>
    80202ebc:	09400593          	li	a1,148
    80202ec0:	0000a517          	auipc	a0,0xa
    80202ec4:	74050513          	addi	a0,a0,1856 # 8020d600 <__func__.1844+0x30>
    80202ec8:	ffffe097          	auipc	ra,0xffffe
    80202ecc:	c8e080e7          	jalr	-882(ra) # 80200b56 <_panic_>

0000000080202ed0 <processAlloc>:
int processAlloc(Process **new, u64 parentId) {
    80202ed0:	7179                	addi	sp,sp,-48
    80202ed2:	f406                	sd	ra,40(sp)
    80202ed4:	f022                	sd	s0,32(sp)
    80202ed6:	ec26                	sd	s1,24(sp)
    80202ed8:	e84a                	sd	s2,16(sp)
    80202eda:	e44e                	sd	s3,8(sp)
    80202edc:	1800                	addi	s0,sp,48
    80202ede:	89aa                	mv	s3,a0
    80202ee0:	892e                	mv	s2,a1
    acquireLock(&freeProcessesLock);
    80202ee2:	002a0517          	auipc	a0,0x2a0
    80202ee6:	5f650513          	addi	a0,a0,1526 # 804a34d8 <freeProcessesLock>
    80202eea:	00003097          	auipc	ra,0x3
    80202eee:	27a080e7          	jalr	634(ra) # 80206164 <acquireLock>
    if (LIST_EMPTY(&freeProcesses)) {
    80202ef2:	0041a497          	auipc	s1,0x41a
    80202ef6:	6a64b483          	ld	s1,1702(s1) # 8061d598 <freeProcesses>
    80202efa:	ccad                	beqz	s1,80202f74 <processAlloc+0xa4>
    LIST_REMOVE(p, link);
    80202efc:	1504b783          	ld	a5,336(s1)
    80202f00:	c789                	beqz	a5,80202f0a <processAlloc+0x3a>
    80202f02:	1584b703          	ld	a4,344(s1)
    80202f06:	14e7bc23          	sd	a4,344(a5)
    80202f0a:	1584b783          	ld	a5,344(s1)
    80202f0e:	1504b703          	ld	a4,336(s1)
    80202f12:	e398                	sd	a4,0(a5)
    releaseLock(&freeProcessesLock);
    80202f14:	002a0517          	auipc	a0,0x2a0
    80202f18:	5c450513          	addi	a0,a0,1476 # 804a34d8 <freeProcessesLock>
    80202f1c:	00003097          	auipc	ra,0x3
    80202f20:	2c4080e7          	jalr	708(ra) # 802061e0 <releaseLock>
    if ((r = setup(p)) < 0) {
    80202f24:	8526                	mv	a0,s1
    80202f26:	00000097          	auipc	ra,0x0
    80202f2a:	dfa080e7          	jalr	-518(ra) # 80202d20 <setup>
    80202f2e:	02054c63          	bltz	a0,80202f66 <processAlloc+0x96>
    p->id = generateProcessId(p);
    80202f32:	8526                	mv	a0,s1
    80202f34:	00000097          	auipc	ra,0x0
    80202f38:	d00080e7          	jalr	-768(ra) # 80202c34 <generateProcessId>
    80202f3c:	16a4a823          	sw	a0,368(s1)
    p->state = RUNNABLE;
    80202f40:	4789                	li	a5,2
    80202f42:	18f4a623          	sw	a5,396(s1)
    p->parentId = parentId;
    80202f46:	1724aa23          	sw	s2,372(s1)
    p->trapframe.kernelSp = getProcessTopSp(p);
    80202f4a:	8526                	mv	a0,s1
    80202f4c:	00000097          	auipc	ra,0x0
    80202f50:	b5c080e7          	jalr	-1188(ra) # 80202aa8 <getProcessTopSp>
    80202f54:	e488                	sd	a0,8(s1)
    p->trapframe.sp = USER_STACK_TOP - 24; //argc = 0, argv = 0, envp = 0
    80202f56:	bfd00793          	li	a5,-1027
    80202f5a:	07f6                	slli	a5,a5,0x1d
    80202f5c:	83e9                	srli	a5,a5,0x1a
    80202f5e:	f89c                	sd	a5,48(s1)
    *new = p;
    80202f60:	0099b023          	sd	s1,0(s3)
    return 0;
    80202f64:	4501                	li	a0,0
}
    80202f66:	70a2                	ld	ra,40(sp)
    80202f68:	7402                	ld	s0,32(sp)
    80202f6a:	64e2                	ld	s1,24(sp)
    80202f6c:	6942                	ld	s2,16(sp)
    80202f6e:	69a2                	ld	s3,8(sp)
    80202f70:	6145                	addi	sp,sp,48
    80202f72:	8082                	ret
        releaseLock(&freeProcessesLock);
    80202f74:	002a0517          	auipc	a0,0x2a0
    80202f78:	56450513          	addi	a0,a0,1380 # 804a34d8 <freeProcessesLock>
    80202f7c:	00003097          	auipc	ra,0x3
    80202f80:	264080e7          	jalr	612(ra) # 802061e0 <releaseLock>
        *new = NULL;
    80202f84:	0009b023          	sd	zero,0(s3)
        return -NO_FREE_PROCESS;
    80202f88:	556d                	li	a0,-5
    80202f8a:	bff1                	j	80202f66 <processAlloc+0x96>

0000000080202f8c <processCreatePriority>:

void processCreatePriority(u8 *binary, u32 size, u32 priority) {
    80202f8c:	7139                	addi	sp,sp,-64
    80202f8e:	fc06                	sd	ra,56(sp)
    80202f90:	f822                	sd	s0,48(sp)
    80202f92:	f426                	sd	s1,40(sp)
    80202f94:	f04a                	sd	s2,32(sp)
    80202f96:	ec4e                	sd	s3,24(sp)
    80202f98:	0080                	addi	s0,sp,64
    80202f9a:	84aa                	mv	s1,a0
    80202f9c:	892e                	mv	s2,a1
    80202f9e:	89b2                	mv	s3,a2
    Process *p;
    int r = processAlloc(&p, 0);
    80202fa0:	4581                	li	a1,0
    80202fa2:	fc840513          	addi	a0,s0,-56
    80202fa6:	00000097          	auipc	ra,0x0
    80202faa:	f2a080e7          	jalr	-214(ra) # 80202ed0 <processAlloc>
    if (r < 0) {
    80202fae:	08054563          	bltz	a0,80203038 <processCreatePriority+0xac>
        return;
    }
    p->priority = priority;
    80202fb2:	fc843683          	ld	a3,-56(s0)
    80202fb6:	1936a423          	sw	s3,392(a3)
    u64 entryPoint;
    if (loadElf(binary, size, &entryPoint, p, codeMapper) < 0) {
    80202fba:	fffff717          	auipc	a4,0xfffff
    80202fbe:	72870713          	addi	a4,a4,1832 # 802026e2 <codeMapper>
    80202fc2:	fc040613          	addi	a2,s0,-64
    80202fc6:	85ca                	mv	a1,s2
    80202fc8:	8526                	mv	a0,s1
    80202fca:	fffff097          	auipc	ra,0xfffff
    80202fce:	5b6080e7          	jalr	1462(ra) # 80202580 <loadElf>
    80202fd2:	06054a63          	bltz	a0,80203046 <processCreatePriority+0xba>
        panic("process create error\n");
    }
    p->trapframe.epc = entryPoint;
    80202fd6:	fc843783          	ld	a5,-56(s0)
    80202fda:	fc043703          	ld	a4,-64(s0)
    80202fde:	ef98                	sd	a4,24(a5)

    acquireLock(&scheduleListLock);
    80202fe0:	002a0517          	auipc	a0,0x2a0
    80202fe4:	51050513          	addi	a0,a0,1296 # 804a34f0 <scheduleListLock>
    80202fe8:	00003097          	auipc	ra,0x3
    80202fec:	17c080e7          	jalr	380(ra) # 80206164 <acquireLock>
    LIST_INSERT_TAIL(&scheduleList[0], p, scheduleLink);
    80202ff0:	002a0697          	auipc	a3,0x2a0
    80202ff4:	5606b683          	ld	a3,1376(a3) # 804a3550 <scheduleList>
    80202ff8:	caad                	beqz	a3,8020306a <processCreatePriority+0xde>
    80202ffa:	fc843703          	ld	a4,-56(s0)
    80202ffe:	16d73c23          	sd	a3,376(a4)
    80203002:	1786b783          	ld	a5,376(a3)
    80203006:	c799                	beqz	a5,80203014 <processCreatePriority+0x88>
    80203008:	16f73c23          	sd	a5,376(a4)
    8020300c:	86be                	mv	a3,a5
    8020300e:	1787b783          	ld	a5,376(a5)
    80203012:	fbfd                	bnez	a5,80203008 <processCreatePriority+0x7c>
    80203014:	16e6bc23          	sd	a4,376(a3)
    80203018:	17873783          	ld	a5,376(a4)
    8020301c:	17878793          	addi	a5,a5,376
    80203020:	18f73023          	sd	a5,384(a4)
    80203024:	16073c23          	sd	zero,376(a4)
    releaseLock(&scheduleListLock);
    80203028:	002a0517          	auipc	a0,0x2a0
    8020302c:	4c850513          	addi	a0,a0,1224 # 804a34f0 <scheduleListLock>
    80203030:	00003097          	auipc	ra,0x3
    80203034:	1b0080e7          	jalr	432(ra) # 802061e0 <releaseLock>
}
    80203038:	70e2                	ld	ra,56(sp)
    8020303a:	7442                	ld	s0,48(sp)
    8020303c:	74a2                	ld	s1,40(sp)
    8020303e:	7902                	ld	s2,32(sp)
    80203040:	69e2                	ld	s3,24(sp)
    80203042:	6121                	addi	sp,sp,64
    80203044:	8082                	ret
        panic("process create error\n");
    80203046:	0000a697          	auipc	a3,0xa
    8020304a:	66268693          	addi	a3,a3,1634 # 8020d6a8 <__func__.1844+0xd8>
    8020304e:	0000a617          	auipc	a2,0xa
    80203052:	6a260613          	addi	a2,a2,1698 # 8020d6f0 <__func__.2034>
    80203056:	10d00593          	li	a1,269
    8020305a:	0000a517          	auipc	a0,0xa
    8020305e:	5a650513          	addi	a0,a0,1446 # 8020d600 <__func__.1844+0x30>
    80203062:	ffffe097          	auipc	ra,0xffffe
    80203066:	af4080e7          	jalr	-1292(ra) # 80200b56 <_panic_>
    LIST_INSERT_TAIL(&scheduleList[0], p, scheduleLink);
    8020306a:	fc843783          	ld	a5,-56(s0)
    8020306e:	1607bc23          	sd	zero,376(a5)
    80203072:	002a0717          	auipc	a4,0x2a0
    80203076:	4cf73f23          	sd	a5,1246(a4) # 804a3550 <scheduleList>
    8020307a:	002a0717          	auipc	a4,0x2a0
    8020307e:	4d670713          	addi	a4,a4,1238 # 804a3550 <scheduleList>
    80203082:	18e7b023          	sd	a4,384(a5)
    80203086:	b74d                	j	80203028 <processCreatePriority+0x9c>

0000000080203088 <processRun>:

void sleepRec();
void processRun(Process* p) {
    80203088:	7139                	addi	sp,sp,-64
    8020308a:	fc06                	sd	ra,56(sp)
    8020308c:	f822                	sd	s0,48(sp)
    8020308e:	f426                	sd	s1,40(sp)
    80203090:	f04a                	sd	s2,32(sp)
    80203092:	ec4e                	sd	s3,24(sp)
    80203094:	e852                	sd	s4,16(sp)
    80203096:	0080                	addi	s0,sp,64
    80203098:	84aa                	mv	s1,a0
    static volatile int first = 0;
    Trapframe* trapframe = getHartTrapFrame();
    8020309a:	00003097          	auipc	ra,0x3
    8020309e:	1c0080e7          	jalr	448(ra) # 8020625a <getHartTrapFrame>
    802030a2:	892a                	mv	s2,a0
    802030a4:	8792                	mv	a5,tp
    if (currentProcess[r_hartid()]) {
    802030a6:	00379713          	slli	a4,a5,0x3
    802030aa:	002a0797          	auipc	a5,0x2a0
    802030ae:	40678793          	addi	a5,a5,1030 # 804a34b0 <currentProcess>
    802030b2:	97ba                	add	a5,a5,a4
    802030b4:	639c                	ld	a5,0(a5)
    802030b6:	c385                	beqz	a5,802030d6 <processRun+0x4e>
    802030b8:	8792                	mv	a5,tp
        bcopy(trapframe, &(currentProcess[r_hartid()]->trapframe),
    802030ba:	00379713          	slli	a4,a5,0x3
    802030be:	002a0797          	auipc	a5,0x2a0
    802030c2:	3f278793          	addi	a5,a5,1010 # 804a34b0 <currentProcess>
    802030c6:	97ba                	add	a5,a5,a4
    802030c8:	12000613          	li	a2,288
    802030cc:	638c                	ld	a1,0(a5)
    802030ce:	fffff097          	auipc	ra,0xfffff
    802030d2:	9f0080e7          	jalr	-1552(ra) # 80201abe <bcopy>
              sizeof(Trapframe));
    }

    p->state = RUNNING;
    802030d6:	478d                	li	a5,3
    802030d8:	18f4a623          	sw	a5,396(s1)
    if (p->reason == 1) {
    802030dc:	5c04a703          	lw	a4,1472(s1)
    802030e0:	4785                	li	a5,1
    802030e2:	06f70763          	beq	a4,a5,80203150 <processRun+0xc8>
    802030e6:	8792                	mv	a5,tp
        asm volatile("ld sp, 0(%0)" : : "r"(&p->currentKernelSp));
        // releaseLock(&currentProcessLock);
        sleepRec();
    } else {
        // acquireLock(&currentProcessLock);
        currentProcess[r_hartid()] = p;
    802030e8:	00379713          	slli	a4,a5,0x3
    802030ec:	002a0797          	auipc	a5,0x2a0
    802030f0:	3c478793          	addi	a5,a5,964 # 804a34b0 <currentProcess>
    802030f4:	97ba                	add	a5,a5,a4
    802030f6:	e384                	sd	s1,0(a5)
        if (first == 0) {
    802030f8:	0041a797          	auipc	a5,0x41a
    802030fc:	4987a783          	lw	a5,1176(a5) # 8061d590 <first.2042>
    80203100:	c7d1                	beqz	a5,8020318c <processRun+0x104>
    80203102:	8792                	mv	a5,tp
            eput(ep);
            ep = create(AT_FDCWD, "/dev/vda2", T_DIR, O_RDONLY);
            ep->head = &rootFileSystem;            
            eunlock(ep);
        }
        bcopy(&(currentProcess[r_hartid()]->trapframe), trapframe, sizeof(Trapframe));
    80203104:	00379713          	slli	a4,a5,0x3
    80203108:	002a0797          	auipc	a5,0x2a0
    8020310c:	3a878793          	addi	a5,a5,936 # 804a34b0 <currentProcess>
    80203110:	97ba                	add	a5,a5,a4
    80203112:	12000613          	li	a2,288
    80203116:	85ca                	mv	a1,s2
    80203118:	6388                	ld	a0,0(a5)
    8020311a:	fffff097          	auipc	ra,0xfffff
    8020311e:	9a4080e7          	jalr	-1628(ra) # 80201abe <bcopy>
        u64 sp = getHartKernelTopSp(p);
    80203122:	8526                	mv	a0,s1
    80203124:	00003097          	auipc	ra,0x3
    80203128:	156080e7          	jalr	342(ra) # 8020627a <getHartKernelTopSp>
    8020312c:	fca43423          	sd	a0,-56(s0)
        asm volatile("ld sp, 0(%0)" : :"r"(&sp): "memory");
    80203130:	fc840793          	addi	a5,s0,-56
    80203134:	0007b103          	ld	sp,0(a5)
        // releaseLock(&currentProcessLock);
        userTrapReturn();
    80203138:	00001097          	auipc	ra,0x1
    8020313c:	7fc080e7          	jalr	2044(ra) # 80204934 <userTrapReturn>
    }
}
    80203140:	70e2                	ld	ra,56(sp)
    80203142:	7442                	ld	s0,48(sp)
    80203144:	74a2                	ld	s1,40(sp)
    80203146:	7902                	ld	s2,32(sp)
    80203148:	69e2                	ld	s3,24(sp)
    8020314a:	6a42                	ld	s4,16(sp)
    8020314c:	6121                	addi	sp,sp,64
    8020314e:	8082                	ret
        p->reason = 0;
    80203150:	5c04a023          	sw	zero,1472(s1)
    80203154:	8792                	mv	a5,tp
        currentProcess[r_hartid()] = p;
    80203156:	002a0717          	auipc	a4,0x2a0
    8020315a:	35a70713          	addi	a4,a4,858 # 804a34b0 <currentProcess>
    8020315e:	078e                	slli	a5,a5,0x3
    80203160:	97ba                	add	a5,a5,a4
    80203162:	e384                	sd	s1,0(a5)
    80203164:	8792                	mv	a5,tp
        bcopy(&currentProcess[r_hartid()]->trapframe, trapframe, sizeof(Trapframe));
    80203166:	078e                	slli	a5,a5,0x3
    80203168:	973e                	add	a4,a4,a5
    8020316a:	12000613          	li	a2,288
    8020316e:	85ca                	mv	a1,s2
    80203170:	6308                	ld	a0,0(a4)
    80203172:	fffff097          	auipc	ra,0xfffff
    80203176:	94c080e7          	jalr	-1716(ra) # 80201abe <bcopy>
        asm volatile("ld sp, 0(%0)" : : "r"(&p->currentKernelSp));
    8020317a:	5b848493          	addi	s1,s1,1464
    8020317e:	0004b103          	ld	sp,0(s1)
        sleepRec();
    80203182:	00001097          	auipc	ra,0x1
    80203186:	b2e080e7          	jalr	-1234(ra) # 80203cb0 <sleepRec>
    8020318a:	bf5d                	j	80203140 <processRun+0xb8>
            first = 1;
    8020318c:	4785                	li	a5,1
    8020318e:	0041a717          	auipc	a4,0x41a
    80203192:	40f72123          	sw	a5,1026(a4) # 8061d590 <first.2042>
            rootFileSystem.name[0] = 'f';
    80203196:	0041a997          	auipc	s3,0x41a
    8020319a:	43a98993          	addi	s3,s3,1082 # 8061d5d0 <rootFileSystem>
    8020319e:	06600793          	li	a5,102
    802031a2:	00f980a3          	sb	a5,1(s3)
            rootFileSystem.name[1] = 'a';
    802031a6:	06100793          	li	a5,97
    802031aa:	00f98123          	sb	a5,2(s3)
            rootFileSystem.name[2] = 't';
    802031ae:	07400793          	li	a5,116
    802031b2:	00f981a3          	sb	a5,3(s3)
            rootFileSystem.name[3] = '3';
    802031b6:	03300793          	li	a5,51
    802031ba:	00f98223          	sb	a5,4(s3)
            rootFileSystem.name[4] = '2';
    802031be:	03200793          	li	a5,50
    802031c2:	00f982a3          	sb	a5,5(s3)
            rootFileSystem.read = blockRead;
    802031c6:	00005797          	auipc	a5,0x5
    802031ca:	c0278793          	addi	a5,a5,-1022 # 80207dc8 <blockRead>
    802031ce:	1ef9bc23          	sd	a5,504(s3)
            fatInit(&rootFileSystem);
    802031d2:	854e                	mv	a0,s3
    802031d4:	00003097          	auipc	ra,0x3
    802031d8:	4c0080e7          	jalr	1216(ra) # 80206694 <fatInit>
            initDirentCache();
    802031dc:	00003097          	auipc	ra,0x3
    802031e0:	622080e7          	jalr	1570(ra) # 802067fe <initDirentCache>
            printf("init dirent end\n");
    802031e4:	0000a517          	auipc	a0,0xa
    802031e8:	4dc50513          	addi	a0,a0,1244 # 8020d6c0 <__func__.1844+0xf0>
    802031ec:	ffffe097          	auipc	ra,0xffffe
    802031f0:	8de080e7          	jalr	-1826(ra) # 80200aca <printf>
            testfat();
    802031f4:	00007097          	auipc	ra,0x7
    802031f8:	348080e7          	jalr	840(ra) # 8020a53c <testfat>
            struct dirent* ep = create(AT_FDCWD, "/dev", T_DIR, O_RDONLY);
    802031fc:	4681                	li	a3,0
    802031fe:	4605                	li	a2,1
    80203200:	0000a597          	auipc	a1,0xa
    80203204:	4d858593          	addi	a1,a1,1240 # 8020d6d8 <__func__.1844+0x108>
    80203208:	f9c00513          	li	a0,-100
    8020320c:	00006097          	auipc	ra,0x6
    80203210:	7ec080e7          	jalr	2028(ra) # 802099f8 <create>
    80203214:	8a2a                	mv	s4,a0
            eunlock(ep);
    80203216:	00006097          	auipc	ra,0x6
    8020321a:	e52080e7          	jalr	-430(ra) # 80209068 <eunlock>
            eput(ep);
    8020321e:	8552                	mv	a0,s4
    80203220:	00006097          	auipc	ra,0x6
    80203224:	eaa080e7          	jalr	-342(ra) # 802090ca <eput>
            ep = create(AT_FDCWD, "/dev/vda2", T_DIR, O_RDONLY);
    80203228:	4681                	li	a3,0
    8020322a:	4605                	li	a2,1
    8020322c:	0000a597          	auipc	a1,0xa
    80203230:	4b458593          	addi	a1,a1,1204 # 8020d6e0 <__func__.1844+0x110>
    80203234:	f9c00513          	li	a0,-100
    80203238:	00006097          	auipc	ra,0x6
    8020323c:	7c0080e7          	jalr	1984(ra) # 802099f8 <create>
            ep->head = &rootFileSystem;            
    80203240:	13353423          	sd	s3,296(a0)
            eunlock(ep);
    80203244:	00006097          	auipc	ra,0x6
    80203248:	e24080e7          	jalr	-476(ra) # 80209068 <eunlock>
    8020324c:	bd5d                	j	80203102 <processRun+0x7a>

000000008020324e <wakeup>:
        // printf("[WAIT]porcess id %x wait for %x\n", p->id, p);
        sleep(p, &waitLock);
    }
}

void wakeup(void* channel) {
    8020324e:	715d                	addi	sp,sp,-80
    80203250:	e486                	sd	ra,72(sp)
    80203252:	e0a2                	sd	s0,64(sp)
    80203254:	fc26                	sd	s1,56(sp)
    80203256:	f84a                	sd	s2,48(sp)
    80203258:	f44e                	sd	s3,40(sp)
    8020325a:	f052                	sd	s4,32(sp)
    8020325c:	ec56                	sd	s5,24(sp)
    8020325e:	e85a                	sd	s6,16(sp)
    80203260:	e45e                	sd	s7,8(sp)
    80203262:	0880                	addi	s0,sp,80
    80203264:	8b2a                	mv	s6,a0
    for (int i = 0; i < PROCESS_TOTAL_NUMBER; ++i) {
    80203266:	002a0497          	auipc	s1,0x2a0
    8020326a:	32a48493          	addi	s1,s1,810 # 804a3590 <processes>
    8020326e:	0041aa17          	auipc	s4,0x41a
    80203272:	322a0a13          	addi	s4,s4,802 # 8061d590 <first.2042>
        if (&processes[i] != myproc()) {
            acquireLock(&processes[i].lock);
            // printf("%d %x %x\n", i, processes[i].state, processes[i].chan);
            if (processes[i].state == SLEEPING &&
    80203276:	4a85                	li	s5,1
                processes[i].chan == (u64)channel) {
                processes[i].state = RUNNABLE;
    80203278:	4b89                	li	s7,2
    8020327a:	a811                	j	8020328e <wakeup+0x40>
                // printf("[wake up]%x\n", processes[i].id);
            }
            releaseLock(&processes[i].lock);
    8020327c:	854a                	mv	a0,s2
    8020327e:	00003097          	auipc	ra,0x3
    80203282:	f62080e7          	jalr	-158(ra) # 802061e0 <releaseLock>
    for (int i = 0; i < PROCESS_TOTAL_NUMBER; ++i) {
    80203286:	5e848493          	addi	s1,s1,1512
    8020328a:	03448a63          	beq	s1,s4,802032be <wakeup+0x70>
        if (&processes[i] != myproc()) {
    8020328e:	fffff097          	auipc	ra,0xfffff
    80203292:	7be080e7          	jalr	1982(ra) # 80202a4c <myproc>
    80203296:	fe9508e3          	beq	a0,s1,80203286 <wakeup+0x38>
            acquireLock(&processes[i].lock);
    8020329a:	19048913          	addi	s2,s1,400
    8020329e:	854a                	mv	a0,s2
    802032a0:	00003097          	auipc	ra,0x3
    802032a4:	ec4080e7          	jalr	-316(ra) # 80206164 <acquireLock>
            if (processes[i].state == SLEEPING &&
    802032a8:	18c4a783          	lw	a5,396(s1)
    802032ac:	fd5798e3          	bne	a5,s5,8020327c <wakeup+0x2e>
    802032b0:	5b04b783          	ld	a5,1456(s1)
    802032b4:	fcfb14e3          	bne	s6,a5,8020327c <wakeup+0x2e>
                processes[i].state = RUNNABLE;
    802032b8:	1974a623          	sw	s7,396(s1)
    802032bc:	b7c1                	j	8020327c <wakeup+0x2e>
        }
    }
}
    802032be:	60a6                	ld	ra,72(sp)
    802032c0:	6406                	ld	s0,64(sp)
    802032c2:	74e2                	ld	s1,56(sp)
    802032c4:	7942                	ld	s2,48(sp)
    802032c6:	79a2                	ld	s3,40(sp)
    802032c8:	7a02                	ld	s4,32(sp)
    802032ca:	6ae2                	ld	s5,24(sp)
    802032cc:	6b42                	ld	s6,16(sp)
    802032ce:	6ba2                	ld	s7,8(sp)
    802032d0:	6161                	addi	sp,sp,80
    802032d2:	8082                	ret

00000000802032d4 <either_copyout>:
static int processTimeCount[HART_TOTAL_NUMBER] = {0, 0, 0, 0, 0};
static int processBelongList[HART_TOTAL_NUMBER] = {0, 0, 0, 0, 0};
// Copy to either a user address, or kernel address,
// depending on usr_dst.
// Returns 0 on success, -1 on error.
int either_copyout(int user_dst, u64 dst, void* src, u64 len) {
    802032d4:	7179                	addi	sp,sp,-48
    802032d6:	f406                	sd	ra,40(sp)
    802032d8:	f022                	sd	s0,32(sp)
    802032da:	ec26                	sd	s1,24(sp)
    802032dc:	e84a                	sd	s2,16(sp)
    802032de:	e44e                	sd	s3,8(sp)
    802032e0:	e052                	sd	s4,0(sp)
    802032e2:	1800                	addi	s0,sp,48
    802032e4:	892e                	mv	s2,a1
    802032e6:	89b2                	mv	s3,a2
    802032e8:	8a36                	mv	s4,a3
    if (user_dst) {
    802032ea:	c515                	beqz	a0,80203316 <either_copyout+0x42>
        struct Process* p = myproc();//because only this branch uses p->pgdir, so it need call myproc
    802032ec:	fffff097          	auipc	ra,0xfffff
    802032f0:	760080e7          	jalr	1888(ra) # 80202a4c <myproc>
        return copyout(p->pgdir, dst, src, len);
    802032f4:	86d2                	mv	a3,s4
    802032f6:	864e                	mv	a2,s3
    802032f8:	85ca                	mv	a1,s2
    802032fa:	16853503          	ld	a0,360(a0)
    802032fe:	fffff097          	auipc	ra,0xfffff
    80203302:	14c080e7          	jalr	332(ra) # 8020244a <copyout>
    } else {
        memmove((char*)dst, src, len);
        return 0;
    }
}
    80203306:	70a2                	ld	ra,40(sp)
    80203308:	7402                	ld	s0,32(sp)
    8020330a:	64e2                	ld	s1,24(sp)
    8020330c:	6942                	ld	s2,16(sp)
    8020330e:	69a2                	ld	s3,8(sp)
    80203310:	6a02                	ld	s4,0(sp)
    80203312:	6145                	addi	sp,sp,48
    80203314:	8082                	ret
    80203316:	84aa                	mv	s1,a0
        memmove((char*)dst, src, len);
    80203318:	0006861b          	sext.w	a2,a3
    8020331c:	85ce                	mv	a1,s3
    8020331e:	854a                	mv	a0,s2
    80203320:	00003097          	auipc	ra,0x3
    80203324:	15a080e7          	jalr	346(ra) # 8020647a <memmove>
        return 0;
    80203328:	8526                	mv	a0,s1
    8020332a:	bff1                	j	80203306 <either_copyout+0x32>

000000008020332c <either_copyin>:

// Copy from either a user address, or kernel address,
// depending on usr_src.
// Returns 0 on success, -1 on error.
int either_copyin(void* dst, int user_src, u64 src, u64 len) {
    8020332c:	7179                	addi	sp,sp,-48
    8020332e:	f406                	sd	ra,40(sp)
    80203330:	f022                	sd	s0,32(sp)
    80203332:	ec26                	sd	s1,24(sp)
    80203334:	e84a                	sd	s2,16(sp)
    80203336:	e44e                	sd	s3,8(sp)
    80203338:	e052                	sd	s4,0(sp)
    8020333a:	1800                	addi	s0,sp,48
    8020333c:	892a                	mv	s2,a0
    8020333e:	89b2                	mv	s3,a2
    80203340:	8a36                	mv	s4,a3
    if (user_src) {
    80203342:	c595                	beqz	a1,8020336e <either_copyin+0x42>
        struct Process* p = myproc();//because only this branch uses p->pgdir, so it need call myproc
    80203344:	fffff097          	auipc	ra,0xfffff
    80203348:	708080e7          	jalr	1800(ra) # 80202a4c <myproc>
        return copyin(p->pgdir, dst, src, len);
    8020334c:	86d2                	mv	a3,s4
    8020334e:	864e                	mv	a2,s3
    80203350:	85ca                	mv	a1,s2
    80203352:	16853503          	ld	a0,360(a0)
    80203356:	fffff097          	auipc	ra,0xfffff
    8020335a:	064080e7          	jalr	100(ra) # 802023ba <copyin>
    } else {
        memmove(dst, (char*)src, len);
        return 0;
    }
}
    8020335e:	70a2                	ld	ra,40(sp)
    80203360:	7402                	ld	s0,32(sp)
    80203362:	64e2                	ld	s1,24(sp)
    80203364:	6942                	ld	s2,16(sp)
    80203366:	69a2                	ld	s3,8(sp)
    80203368:	6a02                	ld	s4,0(sp)
    8020336a:	6145                	addi	sp,sp,48
    8020336c:	8082                	ret
    8020336e:	84ae                	mv	s1,a1
        memmove(dst, (char*)src, len);
    80203370:	0006861b          	sext.w	a2,a3
    80203374:	85ce                	mv	a1,s3
    80203376:	00003097          	auipc	ra,0x3
    8020337a:	104080e7          	jalr	260(ra) # 8020647a <memmove>
        return 0;
    8020337e:	8526                	mv	a0,s1
    80203380:	bff9                	j	8020335e <either_copyin+0x32>

0000000080203382 <yield>:

void yield() {
    80203382:	711d                	addi	sp,sp,-96
    80203384:	ec86                	sd	ra,88(sp)
    80203386:	e8a2                	sd	s0,80(sp)
    80203388:	e4a6                	sd	s1,72(sp)
    8020338a:	e0ca                	sd	s2,64(sp)
    8020338c:	fc4e                	sd	s3,56(sp)
    8020338e:	f852                	sd	s4,48(sp)
    80203390:	f456                	sd	s5,40(sp)
    80203392:	f05a                	sd	s6,32(sp)
    80203394:	ec5e                	sd	s7,24(sp)
    80203396:	e862                	sd	s8,16(sp)
    80203398:	e466                	sd	s9,8(sp)
    8020339a:	1080                	addi	s0,sp,96
    8020339c:	8c12                	mv	s8,tp
    int hartId = r_hartid();
    8020339e:	2c01                	sext.w	s8,s8
    int count = processTimeCount[hartId];
    802033a0:	002a0797          	auipc	a5,0x2a0
    802033a4:	11078793          	addi	a5,a5,272 # 804a34b0 <currentProcess>
    802033a8:	002c1713          	slli	a4,s8,0x2
    802033ac:	973e                	add	a4,a4,a5
    802033ae:	0b072c83          	lw	s9,176(a4)
    int point = processBelongList[hartId];
    802033b2:	0c872903          	lw	s2,200(a4)
    Process* process = currentProcess[hartId];
    802033b6:	003c1713          	slli	a4,s8,0x3
    802033ba:	97ba                	add	a5,a5,a4
    802033bc:	6384                	ld	s1,0(a5)
    acquireLock(&scheduleListLock);
    802033be:	002a0517          	auipc	a0,0x2a0
    802033c2:	13250513          	addi	a0,a0,306 # 804a34f0 <scheduleListLock>
    802033c6:	00003097          	auipc	ra,0x3
    802033ca:	d9e080e7          	jalr	-610(ra) # 80206164 <acquireLock>
    if (process && process->state == RUNNING) {
    802033ce:	c491                	beqz	s1,802033da <yield+0x58>
    802033d0:	18c4a703          	lw	a4,396(s1)
    802033d4:	478d                	li	a5,3
    802033d6:	02f70163          	beq	a4,a5,802033f8 <yield+0x76>
        if(process->reason==1){
            bcopy(getHartTrapFrame(), &process->trapframe, sizeof(Trapframe));
        }
        process->state = RUNNABLE;
    }
    while ((count == 0) || !process || (process->state != RUNNABLE) || process->awakeTime > r_time()) {
    802033da:	4b89                	li	s7,2
            point ^= 1;
        // printf("[POS1]now hart id %x: %x\n", hartId, process);
        if (!(LIST_EMPTY(&scheduleList[point]))) {
            process = LIST_FIRST(&scheduleList[point]);
            LIST_REMOVE(process, scheduleLink);
            count = 1;
    802033dc:	4a85                	li	s5,1
        if (LIST_EMPTY(&scheduleList[point]))
    802033de:	002a0997          	auipc	s3,0x2a0
    802033e2:	0d298993          	addi	s3,s3,210 # 804a34b0 <currentProcess>
            LIST_INSERT_TAIL(&scheduleList[point ^ 1], process, scheduleLink);
    802033e6:	002a0b17          	auipc	s6,0x2a0
    802033ea:	16ab0b13          	addi	s6,s6,362 # 804a3550 <scheduleList>
        }
        releaseLock(&scheduleListLock);
    802033ee:	002a0a17          	auipc	s4,0x2a0
    802033f2:	102a0a13          	addi	s4,s4,258 # 804a34f0 <scheduleListLock>
    802033f6:	a059                	j	8020347c <yield+0xfa>
        if(process->reason==1){
    802033f8:	5c04a703          	lw	a4,1472(s1)
    802033fc:	4785                	li	a5,1
    802033fe:	00f70663          	beq	a4,a5,8020340a <yield+0x88>
        process->state = RUNNABLE;
    80203402:	4789                	li	a5,2
    80203404:	18f4a623          	sw	a5,396(s1)
    80203408:	bfc9                	j	802033da <yield+0x58>
            bcopy(getHartTrapFrame(), &process->trapframe, sizeof(Trapframe));
    8020340a:	00003097          	auipc	ra,0x3
    8020340e:	e50080e7          	jalr	-432(ra) # 8020625a <getHartTrapFrame>
    80203412:	12000613          	li	a2,288
    80203416:	85a6                	mv	a1,s1
    80203418:	ffffe097          	auipc	ra,0xffffe
    8020341c:	6a6080e7          	jalr	1702(ra) # 80201abe <bcopy>
    80203420:	b7cd                	j	80203402 <yield+0x80>
        if (process)
    80203422:	c8e5                	beqz	s1,80203512 <yield+0x190>
            LIST_INSERT_TAIL(&scheduleList[point ^ 1], process, scheduleLink);
    80203424:	00194793          	xori	a5,s2,1
    80203428:	00379713          	slli	a4,a5,0x3
    8020342c:	974e                	add	a4,a4,s3
    8020342e:	7358                	ld	a4,160(a4)
    80203430:	eb5d                	bnez	a4,802034e6 <yield+0x164>
    80203432:	1604bc23          	sd	zero,376(s1)
    80203436:	078e                	slli	a5,a5,0x3
    80203438:	00f98733          	add	a4,s3,a5
    8020343c:	f344                	sd	s1,160(a4)
    8020343e:	97da                	add	a5,a5,s6
    80203440:	18f4b023          	sd	a5,384(s1)
        if (LIST_EMPTY(&scheduleList[point]))
    80203444:	00391793          	slli	a5,s2,0x3
    80203448:	97ce                	add	a5,a5,s3
    8020344a:	73c4                	ld	s1,160(a5)
    8020344c:	cce5                	beqz	s1,80203544 <yield+0x1c2>
            LIST_REMOVE(process, scheduleLink);
    8020344e:	1784b783          	ld	a5,376(s1)
    80203452:	c789                	beqz	a5,8020345c <yield+0xda>
    80203454:	1804b703          	ld	a4,384(s1)
    80203458:	18e7b023          	sd	a4,384(a5)
    8020345c:	1804b783          	ld	a5,384(s1)
    80203460:	1784b703          	ld	a4,376(s1)
    80203464:	e398                	sd	a4,0(a5)
            count = 1;
    80203466:	8cd6                	mv	s9,s5
        releaseLock(&scheduleListLock);
    80203468:	8552                	mv	a0,s4
    8020346a:	00003097          	auipc	ra,0x3
    8020346e:	d76080e7          	jalr	-650(ra) # 802061e0 <releaseLock>
        acquireLock(&scheduleListLock);
    80203472:	8552                	mv	a0,s4
    80203474:	00003097          	auipc	ra,0x3
    80203478:	cf0080e7          	jalr	-784(ra) # 80206164 <acquireLock>
    while ((count == 0) || !process || (process->state != RUNNABLE) || process->awakeTime > r_time()) {
    8020347c:	fa0c83e3          	beqz	s9,80203422 <yield+0xa0>
    80203480:	c8c9                	beqz	s1,80203512 <yield+0x190>
    80203482:	18c4a783          	lw	a5,396(s1)
    80203486:	f9779fe3          	bne	a5,s7,80203424 <yield+0xa2>
// supervisor-mode cycle counter
static inline u64 r_time() {
	u64 x;
  	// asm volatile("csrr %0, time" : "=r" (x) );
  	// this instruction will trap in SBI
	asm volatile("rdtime %0" : "=r" (x) );
    8020348a:	c01027f3          	rdtime	a5
    8020348e:	1604b703          	ld	a4,352(s1)
    80203492:	f8e7e9e3          	bltu	a5,a4,80203424 <yield+0xa2>
    }
    releaseLock(&scheduleListLock);
    80203496:	002a0517          	auipc	a0,0x2a0
    8020349a:	05a50513          	addi	a0,a0,90 # 804a34f0 <scheduleListLock>
    8020349e:	00003097          	auipc	ra,0x3
    802034a2:	d42080e7          	jalr	-702(ra) # 802061e0 <releaseLock>
    count--;
    processTimeCount[hartId] = count;
    802034a6:	0c0a                	slli	s8,s8,0x2
    802034a8:	002a0797          	auipc	a5,0x2a0
    802034ac:	00878793          	addi	a5,a5,8 # 804a34b0 <currentProcess>
    802034b0:	9c3e                	add	s8,s8,a5
    count--;
    802034b2:	3cfd                	addiw	s9,s9,-1
    processTimeCount[hartId] = count;
    802034b4:	0b9c2823          	sw	s9,176(s8)
    processBelongList[hartId] = point;
    802034b8:	0d2c2423          	sw	s2,200(s8)
    // printf("hartID %d yield process %lx\n", hartId, process->id);
    if (process->awakeTime > 0) {
    802034bc:	1604b783          	ld	a5,352(s1)
    802034c0:	e7bd                	bnez	a5,8020352e <yield+0x1ac>
        getHartTrapFrame()->a0 = 0;
        process->awakeTime = 0;
    }
    processRun(process);
    802034c2:	8526                	mv	a0,s1
    802034c4:	00000097          	auipc	ra,0x0
    802034c8:	bc4080e7          	jalr	-1084(ra) # 80203088 <processRun>
}
    802034cc:	60e6                	ld	ra,88(sp)
    802034ce:	6446                	ld	s0,80(sp)
    802034d0:	64a6                	ld	s1,72(sp)
    802034d2:	6906                	ld	s2,64(sp)
    802034d4:	79e2                	ld	s3,56(sp)
    802034d6:	7a42                	ld	s4,48(sp)
    802034d8:	7aa2                	ld	s5,40(sp)
    802034da:	7b02                	ld	s6,32(sp)
    802034dc:	6be2                	ld	s7,24(sp)
    802034de:	6c42                	ld	s8,16(sp)
    802034e0:	6ca2                	ld	s9,8(sp)
    802034e2:	6125                	addi	sp,sp,96
    802034e4:	8082                	ret
            LIST_INSERT_TAIL(&scheduleList[point ^ 1], process, scheduleLink);
    802034e6:	16e4bc23          	sd	a4,376(s1)
    802034ea:	17873783          	ld	a5,376(a4)
    802034ee:	c799                	beqz	a5,802034fc <yield+0x17a>
    802034f0:	16f4bc23          	sd	a5,376(s1)
    802034f4:	873e                	mv	a4,a5
    802034f6:	1787b783          	ld	a5,376(a5)
    802034fa:	fbfd                	bnez	a5,802034f0 <yield+0x16e>
    802034fc:	16973c23          	sd	s1,376(a4)
    80203500:	1784b783          	ld	a5,376(s1)
    80203504:	17878793          	addi	a5,a5,376
    80203508:	18f4b023          	sd	a5,384(s1)
    8020350c:	1604bc23          	sd	zero,376(s1)
    80203510:	bf15                	j	80203444 <yield+0xc2>
        if (LIST_EMPTY(&scheduleList[point]))
    80203512:	00391793          	slli	a5,s2,0x3
    80203516:	97ce                	add	a5,a5,s3
    80203518:	73dc                	ld	a5,160(a5)
    8020351a:	e39d                	bnez	a5,80203540 <yield+0x1be>
            point ^= 1;
    8020351c:	00194913          	xori	s2,s2,1
        if (!(LIST_EMPTY(&scheduleList[point]))) {
    80203520:	00391793          	slli	a5,s2,0x3
    80203524:	97ce                	add	a5,a5,s3
    80203526:	73dc                	ld	a5,160(a5)
    80203528:	d3a1                	beqz	a5,80203468 <yield+0xe6>
    8020352a:	84be                	mv	s1,a5
    8020352c:	b70d                	j	8020344e <yield+0xcc>
        getHartTrapFrame()->a0 = 0;
    8020352e:	00003097          	auipc	ra,0x3
    80203532:	d2c080e7          	jalr	-724(ra) # 8020625a <getHartTrapFrame>
    80203536:	06053823          	sd	zero,112(a0)
        process->awakeTime = 0;
    8020353a:	1604b023          	sd	zero,352(s1)
    8020353e:	b751                	j	802034c2 <yield+0x140>
        if (LIST_EMPTY(&scheduleList[point]))
    80203540:	84be                	mv	s1,a5
        if (!(LIST_EMPTY(&scheduleList[point]))) {
    80203542:	b731                	j	8020344e <yield+0xcc>
            point ^= 1;
    80203544:	00194913          	xori	s2,s2,1
        if (!(LIST_EMPTY(&scheduleList[point]))) {
    80203548:	00391793          	slli	a5,s2,0x3
    8020354c:	97ce                	add	a5,a5,s3
    8020354e:	73c4                	ld	s1,160(a5)
    80203550:	bdfd                	j	8020344e <yield+0xcc>

0000000080203552 <processFork>:

void processFork(u32 flags, u64 stackVa, u64 parentThreadId, u64 tls, u64 childThreadId) {
    if (flags != START_FORK) {
    80203552:	47c5                	li	a5,17
    80203554:	00f50e63          	beq	a0,a5,80203570 <processFork+0x1e>
    asm volatile("mv %0, tp" : "=r" (x) );
    80203558:	8792                	mv	a5,tp
        currentProcess[r_hartid()]->trapframe.a0 = -1;
    8020355a:	00379713          	slli	a4,a5,0x3
    8020355e:	002a0797          	auipc	a5,0x2a0
    80203562:	f5278793          	addi	a5,a5,-174 # 804a34b0 <currentProcess>
    80203566:	97ba                	add	a5,a5,a4
    80203568:	639c                	ld	a5,0(a5)
    8020356a:	577d                	li	a4,-1
    8020356c:	fbb8                	sd	a4,112(a5)
        return;
    8020356e:	8082                	ret
void processFork(u32 flags, u64 stackVa, u64 parentThreadId, u64 tls, u64 childThreadId) {
    80203570:	7175                	addi	sp,sp,-144
    80203572:	e506                	sd	ra,136(sp)
    80203574:	e122                	sd	s0,128(sp)
    80203576:	fca6                	sd	s1,120(sp)
    80203578:	f8ca                	sd	s2,112(sp)
    8020357a:	f4ce                	sd	s3,104(sp)
    8020357c:	f0d2                	sd	s4,96(sp)
    8020357e:	ecd6                	sd	s5,88(sp)
    80203580:	e8da                	sd	s6,80(sp)
    80203582:	e4de                	sd	s7,72(sp)
    80203584:	e0e2                	sd	s8,64(sp)
    80203586:	fc66                	sd	s9,56(sp)
    80203588:	f86a                	sd	s10,48(sp)
    8020358a:	f46e                	sd	s11,40(sp)
    8020358c:	0900                	addi	s0,sp,144
    8020358e:	8aae                	mv	s5,a1
    80203590:	8a32                	mv	s4,a2
    80203592:	89ba                	mv	s3,a4
    80203594:	8492                	mv	s1,tp
    }
    Process *process;
    int hartId = r_hartid();
    80203596:	2481                	sext.w	s1,s1
    int r = processAlloc(&process, currentProcess[hartId]->id);
    80203598:	00349713          	slli	a4,s1,0x3
    8020359c:	002a0797          	auipc	a5,0x2a0
    802035a0:	f1478793          	addi	a5,a5,-236 # 804a34b0 <currentProcess>
    802035a4:	97ba                	add	a5,a5,a4
    802035a6:	639c                	ld	a5,0(a5)
    802035a8:	1707e583          	lwu	a1,368(a5)
    802035ac:	f8840513          	addi	a0,s0,-120
    802035b0:	00000097          	auipc	ra,0x0
    802035b4:	920080e7          	jalr	-1760(ra) # 80202ed0 <processAlloc>
    802035b8:	8b2a                	mv	s6,a0
    process->cwd = myproc()->cwd; //when we fork, we should keep cwd
    802035ba:	fffff097          	auipc	ra,0xfffff
    802035be:	492080e7          	jalr	1170(ra) # 80202a4c <myproc>
    802035c2:	1a853703          	ld	a4,424(a0)
    802035c6:	f8843783          	ld	a5,-120(s0)
    802035ca:	1ae7b423          	sd	a4,424(a5)
    if (r < 0) {
        currentProcess[hartId]->trapframe.a0 = r;
        return;
    }

    for (int i = 0; i < NOFILE; i++)
    802035ce:	4901                	li	s2,0
    802035d0:	08000c13          	li	s8,128
    if (r < 0) {
    802035d4:	000b5f63          	bgez	s6,802035f2 <processFork+0xa0>
        currentProcess[hartId]->trapframe.a0 = r;
    802035d8:	048e                	slli	s1,s1,0x3
    802035da:	002a0797          	auipc	a5,0x2a0
    802035de:	ed678793          	addi	a5,a5,-298 # 804a34b0 <currentProcess>
    802035e2:	97a6                	add	a5,a5,s1
    802035e4:	639c                	ld	a5,0(a5)
    802035e6:	0767b823          	sd	s6,112(a5)
        return;
    802035ea:	a415                	j	8020380e <processFork+0x2bc>
    for (int i = 0; i < NOFILE; i++)
    802035ec:	2905                	addiw	s2,s2,1
    802035ee:	05890063          	beq	s2,s8,8020362e <processFork+0xdc>
        if (myproc()->ofile[i])
    802035f2:	fffff097          	auipc	ra,0xfffff
    802035f6:	45a080e7          	jalr	1114(ra) # 80202a4c <myproc>
    802035fa:	03690793          	addi	a5,s2,54
    802035fe:	078e                	slli	a5,a5,0x3
    80203600:	97aa                	add	a5,a5,a0
    80203602:	639c                	ld	a5,0(a5)
    80203604:	d7e5                	beqz	a5,802035ec <processFork+0x9a>
            process->ofile[i] = filedup(myproc()->ofile[i]);
    80203606:	fffff097          	auipc	ra,0xfffff
    8020360a:	446080e7          	jalr	1094(ra) # 80202a4c <myproc>
    8020360e:	f8843b83          	ld	s7,-120(s0)
    80203612:	03690b13          	addi	s6,s2,54
    80203616:	0b0e                	slli	s6,s6,0x3
    80203618:	016507b3          	add	a5,a0,s6
    8020361c:	6388                	ld	a0,0(a5)
    8020361e:	00006097          	auipc	ra,0x6
    80203622:	5a6080e7          	jalr	1446(ra) # 80209bc4 <filedup>
    80203626:	9b5e                	add	s6,s6,s7
    80203628:	00ab3023          	sd	a0,0(s6)
    8020362c:	b7c1                	j	802035ec <processFork+0x9a>

    process->priority = currentProcess[hartId]->priority;
    8020362e:	00349713          	slli	a4,s1,0x3
    80203632:	002a0797          	auipc	a5,0x2a0
    80203636:	e7e78793          	addi	a5,a5,-386 # 804a34b0 <currentProcess>
    8020363a:	97ba                	add	a5,a5,a4
    8020363c:	639c                	ld	a5,0(a5)
    8020363e:	1887a703          	lw	a4,392(a5)
    80203642:	f8843783          	ld	a5,-120(s0)
    80203646:	18e7a423          	sw	a4,392(a5)
    Trapframe* trapframe = getHartTrapFrame();
    8020364a:	00003097          	auipc	ra,0x3
    8020364e:	c10080e7          	jalr	-1008(ra) # 8020625a <getHartTrapFrame>
    80203652:	892a                	mv	s2,a0
    bcopy(trapframe, &process->trapframe, sizeof(Trapframe));
    80203654:	12000613          	li	a2,288
    80203658:	f8843583          	ld	a1,-120(s0)
    8020365c:	ffffe097          	auipc	ra,0xffffe
    80203660:	462080e7          	jalr	1122(ra) # 80201abe <bcopy>
    process->trapframe.a0 = 0;
    80203664:	f8843783          	ld	a5,-120(s0)
    80203668:	0607b823          	sd	zero,112(a5)
    if (stackVa != 0) {
    8020366c:	000a8463          	beqz	s5,80203674 <processFork+0x122>
        process->trapframe.sp = stackVa;
    80203670:	0357b823          	sd	s5,48(a5)
    }
    if (parentThreadId != NULL) {
    80203674:	020a1a63          	bnez	s4,802036a8 <processFork+0x156>
        copyout(currentProcess[hartId]->pgdir, parentThreadId, (char*) &currentProcess[hartId]->id, sizeof(u32));
    }
    if (childThreadId != NULL) {
    80203678:	04099b63          	bnez	s3,802036ce <processFork+0x17c>
        copyout(currentProcess[hartId]->pgdir, childThreadId, (char*) &process->id, sizeof(u32));
    }

    trapframe->a0 = process->id;
    8020367c:	f8843783          	ld	a5,-120(s0)
    80203680:	1707e783          	lwu	a5,368(a5)
    80203684:	06f93823          	sd	a5,112(s2)
    80203688:	4d81                	li	s11,0
    u64 i, j, k;
    for (i = 0; i < 512; i++) {
        if (!(currentProcess[hartId]->pgdir[i] & PTE_VALID)) {
    8020368a:	048e                	slli	s1,s1,0x3
    8020368c:	002a0797          	auipc	a5,0x2a0
    80203690:	e2478793          	addi	a5,a5,-476 # 804a34b0 <currentProcess>
    80203694:	97a6                	add	a5,a5,s1
    80203696:	f6f43c23          	sd	a5,-136(s0)
            continue;
        }
        u64 *pa = (u64*) PTE2PA(currentProcess[hartId]->pgdir[i]);
    8020369a:	fff00b37          	lui	s6,0xfff00
            for (k = 0; k < 512; k++) {
                if (!(pa2[k] & PTE_VALID)) {
                    continue;
                }
                u64 va = (i << 30) + (j << 21) + (k << 12);
                if (va == TRAMPOLINE_BASE || va == TRAMPOLINE_BASE + PAGE_SIZE) {
    8020369e:	02000ab7          	lui	s5,0x2000
    802036a2:	1afd                	addi	s5,s5,-1
    802036a4:	0ab6                	slli	s5,s5,0xd
    802036a6:	a8e1                	j	8020377e <processFork+0x22c>
        copyout(currentProcess[hartId]->pgdir, parentThreadId, (char*) &currentProcess[hartId]->id, sizeof(u32));
    802036a8:	00349713          	slli	a4,s1,0x3
    802036ac:	002a0797          	auipc	a5,0x2a0
    802036b0:	e0478793          	addi	a5,a5,-508 # 804a34b0 <currentProcess>
    802036b4:	97ba                	add	a5,a5,a4
    802036b6:	639c                	ld	a5,0(a5)
    802036b8:	4691                	li	a3,4
    802036ba:	17078613          	addi	a2,a5,368
    802036be:	85d2                	mv	a1,s4
    802036c0:	1687b503          	ld	a0,360(a5)
    802036c4:	fffff097          	auipc	ra,0xfffff
    802036c8:	d86080e7          	jalr	-634(ra) # 8020244a <copyout>
    802036cc:	b775                	j	80203678 <processFork+0x126>
        copyout(currentProcess[hartId]->pgdir, childThreadId, (char*) &process->id, sizeof(u32));
    802036ce:	00349713          	slli	a4,s1,0x3
    802036d2:	002a0797          	auipc	a5,0x2a0
    802036d6:	dde78793          	addi	a5,a5,-546 # 804a34b0 <currentProcess>
    802036da:	97ba                	add	a5,a5,a4
    802036dc:	639c                	ld	a5,0(a5)
    802036de:	4691                	li	a3,4
    802036e0:	f8843603          	ld	a2,-120(s0)
    802036e4:	17060613          	addi	a2,a2,368
    802036e8:	85ce                	mv	a1,s3
    802036ea:	1687b503          	ld	a0,360(a5)
    802036ee:	fffff097          	auipc	ra,0xfffff
    802036f2:	d5c080e7          	jalr	-676(ra) # 8020244a <copyout>
    802036f6:	b759                	j	8020367c <processFork+0x12a>
                }
                if (pa2[k] & PTE_WRITE) {
                    pa2[k] |= PTE_COW;
                    pa2[k] &= ~PTE_WRITE;
                } 
                pageInsert(process->pgdir, va, PTE2PA(pa2[k]), PTE2PERM(pa2[k]));
    802036f8:	6294                	ld	a3,0(a3)
    802036fa:	00269613          	slli	a2,a3,0x2
    802036fe:	008b5793          	srli	a5,s6,0x8
    80203702:	0176f6b3          	and	a3,a3,s7
    80203706:	8e7d                	and	a2,a2,a5
    80203708:	f8843783          	ld	a5,-120(s0)
    8020370c:	1687b503          	ld	a0,360(a5)
    80203710:	fffff097          	auipc	ra,0xfffff
    80203714:	90a080e7          	jalr	-1782(ra) # 8020201a <pageInsert>
            for (k = 0; k < 512; k++) {
    80203718:	04a1                	addi	s1,s1,8
    8020371a:	03248663          	beq	s1,s2,80203746 <processFork+0x1f4>
                if (!(pa2[k] & PTE_VALID)) {
    8020371e:	86a6                	mv	a3,s1
    80203720:	609c                	ld	a5,0(s1)
    80203722:	0017f713          	andi	a4,a5,1
    80203726:	db6d                	beqz	a4,80203718 <processFork+0x1c6>
                u64 va = (i << 30) + (j << 21) + (k << 12);
    80203728:	00949593          	slli	a1,s1,0x9
    8020372c:	95ce                	add	a1,a1,s3
                if (va == TRAMPOLINE_BASE || va == TRAMPOLINE_BASE + PAGE_SIZE) {
    8020372e:	0145f733          	and	a4,a1,s4
    80203732:	ff5703e3          	beq	a4,s5,80203718 <processFork+0x1c6>
                if (pa2[k] & PTE_WRITE) {
    80203736:	0047f713          	andi	a4,a5,4
    8020373a:	df5d                	beqz	a4,802036f8 <processFork+0x1a6>
                    pa2[k] &= ~PTE_WRITE;
    8020373c:	9bed                	andi	a5,a5,-5
    8020373e:	1007e793          	ori	a5,a5,256
    80203742:	e09c                	sd	a5,0(s1)
    80203744:	bf55                	j	802036f8 <processFork+0x1a6>
        for (j = 0; j < 512; j++) {
    80203746:	0c21                	addi	s8,s8,8
    80203748:	038c8763          	beq	s9,s8,80203776 <processFork+0x224>
            if (!(pa[j] & PTE_VALID)) {
    8020374c:	000c3783          	ld	a5,0(s8)
    80203750:	0017f713          	andi	a4,a5,1
    80203754:	db6d                	beqz	a4,80203746 <processFork+0x1f4>
            u64 *pa2 = (u64*) PTE2PA(pa[j]);
    80203756:	078a                	slli	a5,a5,0x2
    80203758:	008b5493          	srli	s1,s6,0x8
    8020375c:	8cfd                	and	s1,s1,a5
            for (k = 0; k < 512; k++) {
    8020375e:	6905                	lui	s2,0x1
    80203760:	9926                	add	s2,s2,s1
                u64 va = (i << 30) + (j << 21) + (k << 12);
    80203762:	012c1993          	slli	s3,s8,0x12
    80203766:	99ea                	add	s3,s3,s10
    80203768:	00949793          	slli	a5,s1,0x9
    8020376c:	40f989b3          	sub	s3,s3,a5
                if (va == TRAMPOLINE_BASE || va == TRAMPOLINE_BASE + PAGE_SIZE) {
    80203770:	7a7d                	lui	s4,0xfffff
    80203772:	1a7d                	addi	s4,s4,-1
    80203774:	b76d                	j	8020371e <processFork+0x1cc>
    for (i = 0; i < 512; i++) {
    80203776:	0da1                	addi	s11,s11,8
    80203778:	6785                	lui	a5,0x1
    8020377a:	02fd8e63          	beq	s11,a5,802037b6 <processFork+0x264>
        if (!(currentProcess[hartId]->pgdir[i] & PTE_VALID)) {
    8020377e:	f7843783          	ld	a5,-136(s0)
    80203782:	639c                	ld	a5,0(a5)
    80203784:	1687b783          	ld	a5,360(a5) # 1168 <_start-0x801fee98>
    80203788:	97ee                	add	a5,a5,s11
    8020378a:	639c                	ld	a5,0(a5)
    8020378c:	0017f713          	andi	a4,a5,1
    80203790:	d37d                	beqz	a4,80203776 <processFork+0x224>
        u64 *pa = (u64*) PTE2PA(currentProcess[hartId]->pgdir[i]);
    80203792:	078a                	slli	a5,a5,0x2
    80203794:	008b5c13          	srli	s8,s6,0x8
    80203798:	0187fc33          	and	s8,a5,s8
        for (j = 0; j < 512; j++) {
    8020379c:	6c85                	lui	s9,0x1
    8020379e:	9ce2                	add	s9,s9,s8
    802037a0:	01bd9d13          	slli	s10,s11,0x1b
    802037a4:	012c1793          	slli	a5,s8,0x12
    802037a8:	40fd0d33          	sub	s10,s10,a5
                pageInsert(process->pgdir, va, PTE2PA(pa2[k]), PTE2PERM(pa2[k]));
    802037ac:	5bfd                	li	s7,-1
    802037ae:	1bda                	slli	s7,s7,0x36
    802037b0:	3ffb8b93          	addi	s7,s7,1023 # 103ff <_start-0x801efc01>
    802037b4:	bf61                	j	8020374c <processFork+0x1fa>
            }
        }
    }

    acquireLock(&scheduleListLock);
    802037b6:	002a0517          	auipc	a0,0x2a0
    802037ba:	d3a50513          	addi	a0,a0,-710 # 804a34f0 <scheduleListLock>
    802037be:	00003097          	auipc	ra,0x3
    802037c2:	9a6080e7          	jalr	-1626(ra) # 80206164 <acquireLock>
    LIST_INSERT_TAIL(&scheduleList[0], process, scheduleLink);
    802037c6:	002a0697          	auipc	a3,0x2a0
    802037ca:	d8a6b683          	ld	a3,-630(a3) # 804a3550 <scheduleList>
    802037ce:	ceb9                	beqz	a3,8020382c <processFork+0x2da>
    802037d0:	f8843783          	ld	a5,-120(s0)
    802037d4:	16d7bc23          	sd	a3,376(a5)
    802037d8:	1786b703          	ld	a4,376(a3)
    802037dc:	c719                	beqz	a4,802037ea <processFork+0x298>
    802037de:	16e7bc23          	sd	a4,376(a5)
    802037e2:	86ba                	mv	a3,a4
    802037e4:	17873703          	ld	a4,376(a4)
    802037e8:	fb7d                	bnez	a4,802037de <processFork+0x28c>
    802037ea:	16f6bc23          	sd	a5,376(a3)
    802037ee:	1787b703          	ld	a4,376(a5)
    802037f2:	17870713          	addi	a4,a4,376
    802037f6:	18e7b023          	sd	a4,384(a5)
    802037fa:	1607bc23          	sd	zero,376(a5)
    releaseLock(&scheduleListLock);
    802037fe:	002a0517          	auipc	a0,0x2a0
    80203802:	cf250513          	addi	a0,a0,-782 # 804a34f0 <scheduleListLock>
    80203806:	00003097          	auipc	ra,0x3
    8020380a:	9da080e7          	jalr	-1574(ra) # 802061e0 <releaseLock>

    return;
}
    8020380e:	60aa                	ld	ra,136(sp)
    80203810:	640a                	ld	s0,128(sp)
    80203812:	74e6                	ld	s1,120(sp)
    80203814:	7946                	ld	s2,112(sp)
    80203816:	79a6                	ld	s3,104(sp)
    80203818:	7a06                	ld	s4,96(sp)
    8020381a:	6ae6                	ld	s5,88(sp)
    8020381c:	6b46                	ld	s6,80(sp)
    8020381e:	6ba6                	ld	s7,72(sp)
    80203820:	6c06                	ld	s8,64(sp)
    80203822:	7ce2                	ld	s9,56(sp)
    80203824:	7d42                	ld	s10,48(sp)
    80203826:	7da2                	ld	s11,40(sp)
    80203828:	6149                	addi	sp,sp,144
    8020382a:	8082                	ret
    LIST_INSERT_TAIL(&scheduleList[0], process, scheduleLink);
    8020382c:	f8843783          	ld	a5,-120(s0)
    80203830:	1607bc23          	sd	zero,376(a5)
    80203834:	002a0717          	auipc	a4,0x2a0
    80203838:	d0f73e23          	sd	a5,-740(a4) # 804a3550 <scheduleList>
    8020383c:	002a0717          	auipc	a4,0x2a0
    80203840:	d1470713          	addi	a4,a4,-748 # 804a3550 <scheduleList>
    80203844:	18e7b023          	sd	a4,384(a5)
    80203848:	bf5d                	j	802037fe <processFork+0x2ac>

000000008020384a <kernelProcessCpuTimeBegin>:

void kernelProcessCpuTimeBegin() {
    8020384a:	1141                	addi	sp,sp,-16
    8020384c:	e406                	sd	ra,8(sp)
    8020384e:	e022                	sd	s0,0(sp)
    80203850:	0800                	addi	s0,sp,16
    //printf("enter kernel %s %d\n", __FILE__, __LINE__);
    Process *p = myproc();
    80203852:	fffff097          	auipc	ra,0xfffff
    80203856:	1fa080e7          	jalr	506(ra) # 80202a4c <myproc>
	asm volatile("rdtime %0" : "=r" (x) );
    8020385a:	c01027f3          	rdtime	a5
    long currentTime = r_time();
    p->cpuTime.kernel += currentTime - p->processTime.lastKernelTime;
    8020385e:	12853703          	ld	a4,296(a0)
    80203862:	40e78733          	sub	a4,a5,a4
    80203866:	13853783          	ld	a5,312(a0)
    8020386a:	97ba                	add	a5,a5,a4
    8020386c:	12f53c23          	sd	a5,312(a0)
}
    80203870:	60a2                	ld	ra,8(sp)
    80203872:	6402                	ld	s0,0(sp)
    80203874:	0141                	addi	sp,sp,16
    80203876:	8082                	ret

0000000080203878 <kernelProcessCpuTimeEnd>:

void kernelProcessCpuTimeEnd() {
    80203878:	1141                	addi	sp,sp,-16
    8020387a:	e406                	sd	ra,8(sp)
    8020387c:	e022                	sd	s0,0(sp)
    8020387e:	0800                	addi	s0,sp,16
    Process *p = myproc();
    80203880:	fffff097          	auipc	ra,0xfffff
    80203884:	1cc080e7          	jalr	460(ra) # 80202a4c <myproc>
    80203888:	c01027f3          	rdtime	a5
    p->processTime.lastKernelTime = r_time();
    8020388c:	12f53423          	sd	a5,296(a0)
}
    80203890:	60a2                	ld	ra,8(sp)
    80203892:	6402                	ld	s0,0(sp)
    80203894:	0141                	addi	sp,sp,16
    80203896:	8082                	ret

0000000080203898 <processFree>:
void processFree(Process *p) {
    80203898:	7139                	addi	sp,sp,-64
    8020389a:	fc06                	sd	ra,56(sp)
    8020389c:	f822                	sd	s0,48(sp)
    8020389e:	f426                	sd	s1,40(sp)
    802038a0:	f04a                	sd	s2,32(sp)
    802038a2:	ec4e                	sd	s3,24(sp)
    802038a4:	0080                	addi	s0,sp,64
    802038a6:	89aa                	mv	s3,a0
    pgdirFree(p->pgdir);
    802038a8:	16853503          	ld	a0,360(a0)
    802038ac:	ffffe097          	auipc	ra,0xffffe
    802038b0:	666080e7          	jalr	1638(ra) # 80201f12 <pgdirFree>
    p->state = ZOMBIE; // new
    802038b4:	4791                	li	a5,4
    802038b6:	18f9a623          	sw	a5,396(s3)
    for (int fd = 0; fd < NOFILE; fd++) {
    802038ba:	1b098493          	addi	s1,s3,432
    802038be:	5b098913          	addi	s2,s3,1456
    802038c2:	a811                	j	802038d6 <processFree+0x3e>
            fileclose(f);
    802038c4:	00006097          	auipc	ra,0x6
    802038c8:	366080e7          	jalr	870(ra) # 80209c2a <fileclose>
            p->ofile[fd] = 0;
    802038cc:	0004b023          	sd	zero,0(s1)
    for (int fd = 0; fd < NOFILE; fd++) {
    802038d0:	04a1                	addi	s1,s1,8
    802038d2:	01248563          	beq	s1,s2,802038dc <processFree+0x44>
        if (p->ofile[fd]) {
    802038d6:	6088                	ld	a0,0(s1)
    802038d8:	f575                	bnez	a0,802038c4 <processFree+0x2c>
    802038da:	bfdd                	j	802038d0 <processFree+0x38>
    kernelProcessCpuTimeEnd();
    802038dc:	00000097          	auipc	ra,0x0
    802038e0:	f9c080e7          	jalr	-100(ra) # 80203878 <kernelProcessCpuTimeEnd>
    if (p->parentId > 0) {
    802038e4:	1749a503          	lw	a0,372(s3)
    802038e8:	e901                	bnez	a0,802038f8 <processFree+0x60>
}
    802038ea:	70e2                	ld	ra,56(sp)
    802038ec:	7442                	ld	s0,48(sp)
    802038ee:	74a2                	ld	s1,40(sp)
    802038f0:	7902                	ld	s2,32(sp)
    802038f2:	69e2                	ld	s3,24(sp)
    802038f4:	6121                	addi	sp,sp,64
    802038f6:	8082                	ret
        int r = pid2Process(p->parentId, &parentProcess, 0);
    802038f8:	4601                	li	a2,0
    802038fa:	fc840593          	addi	a1,s0,-56
    802038fe:	fffff097          	auipc	ra,0xfffff
    80203902:	3a2080e7          	jalr	930(ra) # 80202ca0 <pid2Process>
        if (r == 0) {
    80203906:	f175                	bnez	a0,802038ea <processFree+0x52>
            wakeup(parentProcess);
    80203908:	fc843503          	ld	a0,-56(s0)
    8020390c:	00000097          	auipc	ra,0x0
    80203910:	942080e7          	jalr	-1726(ra) # 8020324e <wakeup>
}
    80203914:	bfd9                	j	802038ea <processFree+0x52>

0000000080203916 <processDestory>:
void processDestory(Process *p) {
    80203916:	7179                	addi	sp,sp,-48
    80203918:	f406                	sd	ra,40(sp)
    8020391a:	f022                	sd	s0,32(sp)
    8020391c:	ec26                	sd	s1,24(sp)
    8020391e:	1800                	addi	s0,sp,48
    80203920:	84aa                	mv	s1,a0
    processFree(p);
    80203922:	00000097          	auipc	ra,0x0
    80203926:	f76080e7          	jalr	-138(ra) # 80203898 <processFree>
    asm volatile("mv %0, tp" : "=r" (x) );
    8020392a:	8792                	mv	a5,tp
    int hartId = r_hartid();
    8020392c:	2781                	sext.w	a5,a5
    if (currentProcess[hartId] == p) {
    8020392e:	00379693          	slli	a3,a5,0x3
    80203932:	002a0717          	auipc	a4,0x2a0
    80203936:	b7e70713          	addi	a4,a4,-1154 # 804a34b0 <currentProcess>
    8020393a:	9736                	add	a4,a4,a3
    8020393c:	6318                	ld	a4,0(a4)
    8020393e:	00970763          	beq	a4,s1,8020394c <processDestory+0x36>
}
    80203942:	70a2                	ld	ra,40(sp)
    80203944:	7402                	ld	s0,32(sp)
    80203946:	64e2                	ld	s1,24(sp)
    80203948:	6145                	addi	sp,sp,48
    8020394a:	8082                	ret
        currentProcess[hartId] = NULL;
    8020394c:	002a0717          	auipc	a4,0x2a0
    80203950:	b6470713          	addi	a4,a4,-1180 # 804a34b0 <currentProcess>
    80203954:	9736                	add	a4,a4,a3
    80203956:	00073023          	sd	zero,0(a4)
        u64 sp = (u64)kernelStack + (hartId + 1) * KERNEL_STACK_SIZE;
    8020395a:	2785                	addiw	a5,a5,1
    8020395c:	0107979b          	slliw	a5,a5,0x10
    80203960:	0018d717          	auipc	a4,0x18d
    80203964:	6a070713          	addi	a4,a4,1696 # 80391000 <_stack>
    80203968:	97ba                	add	a5,a5,a4
    8020396a:	fcf43c23          	sd	a5,-40(s0)
        asm volatile("ld sp, 0(%0)" : :"r"(&sp): "memory");
    8020396e:	fd840793          	addi	a5,s0,-40
    80203972:	0007b103          	ld	sp,0(a5)
        yield();
    80203976:	00000097          	auipc	ra,0x0
    8020397a:	a0c080e7          	jalr	-1524(ra) # 80203382 <yield>
}
    8020397e:	b7d1                	j	80203942 <processDestory+0x2c>

0000000080203980 <sleep>:
void sleep(void* chan, struct Spinlock* lk) {//wait()
    80203980:	7179                	addi	sp,sp,-48
    80203982:	f406                	sd	ra,40(sp)
    80203984:	f022                	sd	s0,32(sp)
    80203986:	ec26                	sd	s1,24(sp)
    80203988:	e84a                	sd	s2,16(sp)
    8020398a:	e44e                	sd	s3,8(sp)
    8020398c:	e052                	sd	s4,0(sp)
    8020398e:	1800                	addi	s0,sp,48
    80203990:	8a2a                	mv	s4,a0
    80203992:	892e                	mv	s2,a1
    struct Process* p = myproc();
    80203994:	fffff097          	auipc	ra,0xfffff
    80203998:	0b8080e7          	jalr	184(ra) # 80202a4c <myproc>
    8020399c:	84aa                	mv	s1,a0
    kernelProcessCpuTimeEnd();
    8020399e:	00000097          	auipc	ra,0x0
    802039a2:	eda080e7          	jalr	-294(ra) # 80203878 <kernelProcessCpuTimeEnd>
    acquireLock(&p->lock);  // DOC: sleeplock1
    802039a6:	19048993          	addi	s3,s1,400
    802039aa:	854e                	mv	a0,s3
    802039ac:	00002097          	auipc	ra,0x2
    802039b0:	7b8080e7          	jalr	1976(ra) # 80206164 <acquireLock>
    releaseLock(lk);
    802039b4:	854a                	mv	a0,s2
    802039b6:	00003097          	auipc	ra,0x3
    802039ba:	82a080e7          	jalr	-2006(ra) # 802061e0 <releaseLock>
    p->chan = (u64)chan;
    802039be:	5b44b823          	sd	s4,1456(s1)
    p->state = SLEEPING;
    802039c2:	4785                	li	a5,1
    802039c4:	18f4a623          	sw	a5,396(s1)
    p->reason = 1;
    802039c8:	5cf4a023          	sw	a5,1472(s1)
    releaseLock(&p->lock);
    802039cc:	854e                	mv	a0,s3
    802039ce:	00003097          	auipc	ra,0x3
    802039d2:	812080e7          	jalr	-2030(ra) # 802061e0 <releaseLock>
	asm volatile("sd sp, 0(%0)" : :"r"(&p->currentKernelSp));
    802039d6:	5b848793          	addi	a5,s1,1464
    802039da:	0027b023          	sd	sp,0(a5)
    sleepSave();
    802039de:	00000097          	auipc	ra,0x0
    802039e2:	272080e7          	jalr	626(ra) # 80203c50 <sleepSave>
    acquireLock(&p->lock);  // DOC: sleeplock1
    802039e6:	854e                	mv	a0,s3
    802039e8:	00002097          	auipc	ra,0x2
    802039ec:	77c080e7          	jalr	1916(ra) # 80206164 <acquireLock>
    p->chan = 0;
    802039f0:	5a04b823          	sd	zero,1456(s1)
    releaseLock(&p->lock);
    802039f4:	854e                	mv	a0,s3
    802039f6:	00002097          	auipc	ra,0x2
    802039fa:	7ea080e7          	jalr	2026(ra) # 802061e0 <releaseLock>
    kernelProcessCpuTimeBegin();
    802039fe:	00000097          	auipc	ra,0x0
    80203a02:	e4c080e7          	jalr	-436(ra) # 8020384a <kernelProcessCpuTimeBegin>
    acquireLock(lk);
    80203a06:	854a                	mv	a0,s2
    80203a08:	00002097          	auipc	ra,0x2
    80203a0c:	75c080e7          	jalr	1884(ra) # 80206164 <acquireLock>
}
    80203a10:	70a2                	ld	ra,40(sp)
    80203a12:	7402                	ld	s0,32(sp)
    80203a14:	64e2                	ld	s1,24(sp)
    80203a16:	6942                	ld	s2,16(sp)
    80203a18:	69a2                	ld	s3,8(sp)
    80203a1a:	6a02                	ld	s4,0(sp)
    80203a1c:	6145                	addi	sp,sp,48
    80203a1e:	8082                	ret

0000000080203a20 <wait>:
int wait(int targetProcessId, u64 addr) {
    80203a20:	7175                	addi	sp,sp,-144
    80203a22:	e506                	sd	ra,136(sp)
    80203a24:	e122                	sd	s0,128(sp)
    80203a26:	fca6                	sd	s1,120(sp)
    80203a28:	f8ca                	sd	s2,112(sp)
    80203a2a:	f4ce                	sd	s3,104(sp)
    80203a2c:	f0d2                	sd	s4,96(sp)
    80203a2e:	ecd6                	sd	s5,88(sp)
    80203a30:	e8da                	sd	s6,80(sp)
    80203a32:	e4de                	sd	s7,72(sp)
    80203a34:	e0e2                	sd	s8,64(sp)
    80203a36:	fc66                	sd	s9,56(sp)
    80203a38:	f86a                	sd	s10,48(sp)
    80203a3a:	f46e                	sd	s11,40(sp)
    80203a3c:	0900                	addi	s0,sp,144
    80203a3e:	8c2a                	mv	s8,a0
    80203a40:	f6b43c23          	sd	a1,-136(s0)
    Process* p = myproc();
    80203a44:	fffff097          	auipc	ra,0xfffff
    80203a48:	008080e7          	jalr	8(ra) # 80202a4c <myproc>
    80203a4c:	8a2a                	mv	s4,a0
    acquireLock(&waitLock);
    80203a4e:	002a0517          	auipc	a0,0x2a0
    80203a52:	ad250513          	addi	a0,a0,-1326 # 804a3520 <waitLock>
    80203a56:	00002097          	auipc	ra,0x2
    80203a5a:	70e080e7          	jalr	1806(ra) # 80206164 <acquireLock>
                if ((targetProcessId == -1 || np->id == targetProcessId) && np->state == ZOMBIE) {
    80203a5e:	5cfd                	li	s9,-1
    80203a60:	4d91                	li	s11,4
    80203a62:	000c0d1b          	sext.w	s10,s8
        for (int i = 0; i < PROCESS_TOTAL_NUMBER; ++i) {
    80203a66:	002a0497          	auipc	s1,0x2a0
    80203a6a:	cba48493          	addi	s1,s1,-838 # 804a3720 <processes+0x190>
    80203a6e:	4901                	li	s2,0
        haveChildProcess = 0;
    80203a70:	4b01                	li	s6,0
                haveChildProcess = 1;
    80203a72:	4b85                	li	s7,1
        for (int i = 0; i < PROCESS_TOTAL_NUMBER; ++i) {
    80203a74:	40000a93          	li	s5,1024
    80203a78:	a005                	j	80203a98 <wait+0x78>
                if ((targetProcessId == -1 || np->id == targetProcessId) && np->state == ZOMBIE) {
    80203a7a:	ffc9a783          	lw	a5,-4(s3)
    80203a7e:	05b78163          	beq	a5,s11,80203ac0 <wait+0xa0>
                haveChildProcess = 1;
    80203a82:	8b5e                	mv	s6,s7
            releaseLock(&np->lock);
    80203a84:	854e                	mv	a0,s3
    80203a86:	00002097          	auipc	ra,0x2
    80203a8a:	75a080e7          	jalr	1882(ra) # 802061e0 <releaseLock>
        for (int i = 0; i < PROCESS_TOTAL_NUMBER; ++i) {
    80203a8e:	2905                	addiw	s2,s2,1
    80203a90:	5e848493          	addi	s1,s1,1512
    80203a94:	19590363          	beq	s2,s5,80203c1a <wait+0x1fa>
            acquireLock(&np->lock);
    80203a98:	89a6                	mv	s3,s1
    80203a9a:	8526                	mv	a0,s1
    80203a9c:	00002097          	auipc	ra,0x2
    80203aa0:	6c8080e7          	jalr	1736(ra) # 80206164 <acquireLock>
            if (np->parentId == p->id) {
    80203aa4:	fe44a703          	lw	a4,-28(s1)
    80203aa8:	170a2783          	lw	a5,368(s4) # fffffffffffff170 <bssEnd+0xffffffff7f9c4170>
    80203aac:	fcf71ce3          	bne	a4,a5,80203a84 <wait+0x64>
                if ((targetProcessId == -1 || np->id == targetProcessId) && np->state == ZOMBIE) {
    80203ab0:	fd9c05e3          	beq	s8,s9,80203a7a <wait+0x5a>
    80203ab4:	fe04a783          	lw	a5,-32(s1)
                haveChildProcess = 1;
    80203ab8:	8b5e                	mv	s6,s7
                if ((targetProcessId == -1 || np->id == targetProcessId) && np->state == ZOMBIE) {
    80203aba:	fda795e3          	bne	a5,s10,80203a84 <wait+0x64>
    80203abe:	bf75                	j	80203a7a <wait+0x5a>
                    pid = np->id;
    80203ac0:	5e800793          	li	a5,1512
    80203ac4:	02f90733          	mul	a4,s2,a5
    80203ac8:	002a0797          	auipc	a5,0x2a0
    80203acc:	ac878793          	addi	a5,a5,-1336 # 804a3590 <processes>
    80203ad0:	97ba                	add	a5,a5,a4
    80203ad2:	1707a483          	lw	s1,368(a5)
                    if (addr != 0 && copyout(p->pgdir, addr, (char *)&np->retValue, sizeof(np->retValue)) < 0) {
    80203ad6:	f7843583          	ld	a1,-136(s0)
    80203ada:	cd99                	beqz	a1,80203af8 <wait+0xd8>
    80203adc:	46a1                	li	a3,8
    80203ade:	002a0617          	auipc	a2,0x2a0
    80203ae2:	07a60613          	addi	a2,a2,122 # 804a3b58 <processes+0x5c8>
    80203ae6:	963a                	add	a2,a2,a4
    80203ae8:	168a3503          	ld	a0,360(s4)
    80203aec:	fffff097          	auipc	ra,0xfffff
    80203af0:	95e080e7          	jalr	-1698(ra) # 8020244a <copyout>
    80203af4:	10054463          	bltz	a0,80203bfc <wait+0x1dc>
    80203af8:	5e800b13          	li	s6,1512
    80203afc:	03690b33          	mul	s6,s2,s6
            Process* np = &processes[i];
    80203b00:	002a0a97          	auipc	s5,0x2a0
    80203b04:	a90a8a93          	addi	s5,s5,-1392 # 804a3590 <processes>
    80203b08:	9ada                	add	s5,s5,s6
                    acquireLock(&freeProcessesLock);
    80203b0a:	002a0517          	auipc	a0,0x2a0
    80203b0e:	9ce50513          	addi	a0,a0,-1586 # 804a34d8 <freeProcessesLock>
    80203b12:	00002097          	auipc	ra,0x2
    80203b16:	652080e7          	jalr	1618(ra) # 80206164 <acquireLock>
    Process *pp = p;
    80203b1a:	f9543423          	sd	s5,-120(s0)
    while (pp->parentId > 0 && pid2Process(pp->parentId, &pp, false) >= 0) {
    80203b1e:	174aa503          	lw	a0,372(s5)
    80203b22:	cd15                	beqz	a0,80203b5e <wait+0x13e>
        pp->cpuTime.deadChildrenKernel += p->cpuTime.kernel;
    80203b24:	8a56                	mv	s4,s5
    while (pp->parentId > 0 && pid2Process(pp->parentId, &pp, false) >= 0) {
    80203b26:	4601                	li	a2,0
    80203b28:	f8840593          	addi	a1,s0,-120
    80203b2c:	fffff097          	auipc	ra,0xfffff
    80203b30:	174080e7          	jalr	372(ra) # 80202ca0 <pid2Process>
    80203b34:	02054563          	bltz	a0,80203b5e <wait+0x13e>
        pp->cpuTime.deadChildrenKernel += p->cpuTime.kernel;
    80203b38:	f8843783          	ld	a5,-120(s0)
    80203b3c:	1487b703          	ld	a4,328(a5)
    80203b40:	138a3683          	ld	a3,312(s4)
    80203b44:	9736                	add	a4,a4,a3
    80203b46:	14e7b423          	sd	a4,328(a5)
        pp->cpuTime.deadChildrenUser += p->cpuTime.user;
    80203b4a:	1407b703          	ld	a4,320(a5)
    80203b4e:	130a3683          	ld	a3,304(s4)
    80203b52:	9736                	add	a4,a4,a3
    80203b54:	14e7b023          	sd	a4,320(a5)
    while (pp->parentId > 0 && pid2Process(pp->parentId, &pp, false) >= 0) {
    80203b58:	1747a503          	lw	a0,372(a5)
    80203b5c:	f569                	bnez	a0,80203b26 <wait+0x106>
                    np->state = UNUSED;
    80203b5e:	5e800793          	li	a5,1512
    80203b62:	02f90733          	mul	a4,s2,a5
    80203b66:	002a0797          	auipc	a5,0x2a0
    80203b6a:	a2a78793          	addi	a5,a5,-1494 # 804a3590 <processes>
    80203b6e:	97ba                	add	a5,a5,a4
    80203b70:	1807a623          	sw	zero,396(a5)
                    LIST_INSERT_HEAD(&freeProcesses, np, link); //test pipe
    80203b74:	0041a717          	auipc	a4,0x41a
    80203b78:	a2473703          	ld	a4,-1500(a4) # 8061d598 <freeProcesses>
    80203b7c:	14e7b823          	sd	a4,336(a5)
    80203b80:	cb01                	beqz	a4,80203b90 <wait+0x170>
    80203b82:	002a0797          	auipc	a5,0x2a0
    80203b86:	b5e78793          	addi	a5,a5,-1186 # 804a36e0 <processes+0x150>
    80203b8a:	9b3e                	add	s6,s6,a5
    80203b8c:	15673c23          	sd	s6,344(a4)
    80203b90:	0041a717          	auipc	a4,0x41a
    80203b94:	a0870713          	addi	a4,a4,-1528 # 8061d598 <freeProcesses>
    80203b98:	01573023          	sd	s5,0(a4)
    80203b9c:	5e800793          	li	a5,1512
    80203ba0:	02f90933          	mul	s2,s2,a5
    80203ba4:	002a0797          	auipc	a5,0x2a0
    80203ba8:	9ec78793          	addi	a5,a5,-1556 # 804a3590 <processes>
    80203bac:	993e                	add	s2,s2,a5
    80203bae:	14e93c23          	sd	a4,344(s2) # 1158 <_start-0x801feea8>
                    releaseLock(&freeProcessesLock);
    80203bb2:	002a0517          	auipc	a0,0x2a0
    80203bb6:	92650513          	addi	a0,a0,-1754 # 804a34d8 <freeProcessesLock>
    80203bba:	00002097          	auipc	ra,0x2
    80203bbe:	626080e7          	jalr	1574(ra) # 802061e0 <releaseLock>
                    releaseLock(&np->lock);
    80203bc2:	854e                	mv	a0,s3
    80203bc4:	00002097          	auipc	ra,0x2
    80203bc8:	61c080e7          	jalr	1564(ra) # 802061e0 <releaseLock>
                    releaseLock(&waitLock);
    80203bcc:	002a0517          	auipc	a0,0x2a0
    80203bd0:	95450513          	addi	a0,a0,-1708 # 804a3520 <waitLock>
    80203bd4:	00002097          	auipc	ra,0x2
    80203bd8:	60c080e7          	jalr	1548(ra) # 802061e0 <releaseLock>
}
    80203bdc:	8526                	mv	a0,s1
    80203bde:	60aa                	ld	ra,136(sp)
    80203be0:	640a                	ld	s0,128(sp)
    80203be2:	74e6                	ld	s1,120(sp)
    80203be4:	7946                	ld	s2,112(sp)
    80203be6:	79a6                	ld	s3,104(sp)
    80203be8:	7a06                	ld	s4,96(sp)
    80203bea:	6ae6                	ld	s5,88(sp)
    80203bec:	6b46                	ld	s6,80(sp)
    80203bee:	6ba6                	ld	s7,72(sp)
    80203bf0:	6c06                	ld	s8,64(sp)
    80203bf2:	7ce2                	ld	s9,56(sp)
    80203bf4:	7d42                	ld	s10,48(sp)
    80203bf6:	7da2                	ld	s11,40(sp)
    80203bf8:	6149                	addi	sp,sp,144
    80203bfa:	8082                	ret
                        releaseLock(&np->lock);
    80203bfc:	854e                	mv	a0,s3
    80203bfe:	00002097          	auipc	ra,0x2
    80203c02:	5e2080e7          	jalr	1506(ra) # 802061e0 <releaseLock>
                        releaseLock(&waitLock);
    80203c06:	002a0517          	auipc	a0,0x2a0
    80203c0a:	91a50513          	addi	a0,a0,-1766 # 804a3520 <waitLock>
    80203c0e:	00002097          	auipc	ra,0x2
    80203c12:	5d2080e7          	jalr	1490(ra) # 802061e0 <releaseLock>
                        return -1;
    80203c16:	54fd                	li	s1,-1
    80203c18:	b7d1                	j	80203bdc <wait+0x1bc>
        if (!haveChildProcess) {
    80203c1a:	000b1c63          	bnez	s6,80203c32 <wait+0x212>
            releaseLock(&waitLock);
    80203c1e:	002a0517          	auipc	a0,0x2a0
    80203c22:	90250513          	addi	a0,a0,-1790 # 804a3520 <waitLock>
    80203c26:	00002097          	auipc	ra,0x2
    80203c2a:	5ba080e7          	jalr	1466(ra) # 802061e0 <releaseLock>
            return -1;
    80203c2e:	54fd                	li	s1,-1
    80203c30:	b775                	j	80203bdc <wait+0x1bc>
        sleep(p, &waitLock);
    80203c32:	002a0597          	auipc	a1,0x2a0
    80203c36:	8ee58593          	addi	a1,a1,-1810 # 804a3520 <waitLock>
    80203c3a:	8552                	mv	a0,s4
    80203c3c:	00000097          	auipc	ra,0x0
    80203c40:	d44080e7          	jalr	-700(ra) # 80203980 <sleep>
        haveChildProcess = 0;
    80203c44:	b50d                	j	80203a66 <wait+0x46>
	...

0000000080203c50 <sleepSave>:
#include <assembly/Trapframe.h>

    .globl sleepSave
    .align 4
sleepSave:
    sd ra, -8(sp)
    80203c50:	fe113c23          	sd	ra,-8(sp)
    sd gp, -16(sp)
    80203c54:	fe313823          	sd	gp,-16(sp)
    # sd tp, -24(sp)
    sd s0, -32(sp)
    80203c58:	fe813023          	sd	s0,-32(sp)
    sd s1, -40(sp)
    80203c5c:	fc913c23          	sd	s1,-40(sp)
    sd s2, -48(sp)
    80203c60:	fd213823          	sd	s2,-48(sp)
    sd s3, -56(sp)
    80203c64:	fd313423          	sd	s3,-56(sp)
    sd s4, -64(sp)
    80203c68:	fd413023          	sd	s4,-64(sp)
    sd s5, -72(sp)
    80203c6c:	fb513c23          	sd	s5,-72(sp)
    sd s6, -80(sp)
    80203c70:	fb613823          	sd	s6,-80(sp)
    sd s7, -88(sp)
    80203c74:	fb713423          	sd	s7,-88(sp)
    sd s8, -96(sp)
    80203c78:	fb813023          	sd	s8,-96(sp)
    sd s9, -104(sp)
    80203c7c:	f9913c23          	sd	s9,-104(sp)
    sd s10, -112(sp)
    80203c80:	f9a13823          	sd	s10,-112(sp)
    sd s11, -120(sp)
    80203c84:	f9b13423          	sd	s11,-120(sp)
    sd a0, -128(sp)
    80203c88:	f8a13023          	sd	a0,-128(sp)
    sd a1, -136(sp)
    80203c8c:	f6b13c23          	sd	a1,-136(sp)
    sd a2, -144(sp)
    80203c90:	f6c13823          	sd	a2,-144(sp)
    sd a3, -152(sp)
    80203c94:	f6d13423          	sd	a3,-152(sp)
    sd a4, -160(sp)
    80203c98:	f6e13023          	sd	a4,-160(sp)
    sd a5, -168(sp)
    80203c9c:	f4f13c23          	sd	a5,-168(sp)
    sd a6, -176(sp)
    80203ca0:	f5013823          	sd	a6,-176(sp)
    sd a7, -184(sp)
    80203ca4:	f5113423          	sd	a7,-184(sp)
    add sp, sp, -184
    80203ca8:	f4810113          	addi	sp,sp,-184
    jal yield
    80203cac:	ed6ff0ef          	jal	ra,80203382 <yield>

0000000080203cb0 <sleepRec>:

    .globl sleepRec
    .align 4
sleepRec:
    ld ra, -8(sp)
    80203cb0:	ff813083          	ld	ra,-8(sp)
    ld gp, -16(sp)
    80203cb4:	ff013183          	ld	gp,-16(sp)
    # ld tp, -24(sp)
    ld s0, -32(sp)
    80203cb8:	fe013403          	ld	s0,-32(sp)
    ld s1, -40(sp)
    80203cbc:	fd813483          	ld	s1,-40(sp)
    ld s2, -48(sp)
    80203cc0:	fd013903          	ld	s2,-48(sp)
    ld s3, -56(sp)
    80203cc4:	fc813983          	ld	s3,-56(sp)
    ld s4, -64(sp)
    80203cc8:	fc013a03          	ld	s4,-64(sp)
    ld s5, -72(sp)
    80203ccc:	fb813a83          	ld	s5,-72(sp)
    ld s6, -80(sp)
    80203cd0:	fb013b03          	ld	s6,-80(sp)
    ld s7, -88(sp)
    80203cd4:	fa813b83          	ld	s7,-88(sp)
    ld s8, -96(sp)
    80203cd8:	fa013c03          	ld	s8,-96(sp)
    ld s9, -104(sp)
    80203cdc:	f9813c83          	ld	s9,-104(sp)
    ld s10, -112(sp)
    80203ce0:	f9013d03          	ld	s10,-112(sp)
    ld s11, -120(sp)
    80203ce4:	f8813d83          	ld	s11,-120(sp)
    ld a0, -128(sp)
    80203ce8:	f8013503          	ld	a0,-128(sp)
    ld a1, -136(sp)
    80203cec:	f7813583          	ld	a1,-136(sp)
    ld a2, -144(sp)
    80203cf0:	f7013603          	ld	a2,-144(sp)
    ld a3, -152(sp)
    80203cf4:	f6813683          	ld	a3,-152(sp)
    ld a4, -160(sp)
    80203cf8:	f6013703          	ld	a4,-160(sp)
    ld a5, -168(sp)
    80203cfc:	f5813783          	ld	a5,-168(sp)
    ld a6, -176(sp)
    80203d00:	f5013803          	ld	a6,-176(sp)
    ld a7, -184(sp)
    80203d04:	f4813883          	ld	a7,-184(sp)
    80203d08:	8082                	ret
	...

0000000080203d14 <argraw>:
}




static u64 argraw(int n) {
    80203d14:	1101                	addi	sp,sp,-32
    80203d16:	ec06                	sd	ra,24(sp)
    80203d18:	e822                	sd	s0,16(sp)
    80203d1a:	e426                	sd	s1,8(sp)
    80203d1c:	1000                	addi	s0,sp,32
    80203d1e:	84aa                	mv	s1,a0
    Trapframe *trapframe = getHartTrapFrame();
    80203d20:	00002097          	auipc	ra,0x2
    80203d24:	53a080e7          	jalr	1338(ra) # 8020625a <getHartTrapFrame>
    switch (n) {
    80203d28:	4795                	li	a5,5
    80203d2a:	0297eb63          	bltu	a5,s1,80203d60 <argraw+0x4c>
    80203d2e:	048a                	slli	s1,s1,0x2
    80203d30:	0000a717          	auipc	a4,0xa
    80203d34:	a0470713          	addi	a4,a4,-1532 # 8020d734 <__func__.2034+0x44>
    80203d38:	94ba                	add	s1,s1,a4
    80203d3a:	409c                	lw	a5,0(s1)
    80203d3c:	97ba                	add	a5,a5,a4
    80203d3e:	8782                	jr	a5
        case 0:
            return trapframe->a0;
    80203d40:	7928                	ld	a0,112(a0)
        case 5:
            return trapframe->a5;
    }
    panic("argraw");
    return -1;
}
    80203d42:	60e2                	ld	ra,24(sp)
    80203d44:	6442                	ld	s0,16(sp)
    80203d46:	64a2                	ld	s1,8(sp)
    80203d48:	6105                	addi	sp,sp,32
    80203d4a:	8082                	ret
            return trapframe->a1;
    80203d4c:	7d28                	ld	a0,120(a0)
    80203d4e:	bfd5                	j	80203d42 <argraw+0x2e>
            return trapframe->a2;
    80203d50:	6148                	ld	a0,128(a0)
    80203d52:	bfc5                	j	80203d42 <argraw+0x2e>
            return trapframe->a3;
    80203d54:	6548                	ld	a0,136(a0)
    80203d56:	b7f5                	j	80203d42 <argraw+0x2e>
            return trapframe->a4;
    80203d58:	6948                	ld	a0,144(a0)
    80203d5a:	b7e5                	j	80203d42 <argraw+0x2e>
            return trapframe->a5;
    80203d5c:	6d48                	ld	a0,152(a0)
    80203d5e:	b7d5                	j	80203d42 <argraw+0x2e>
    panic("argraw");
    80203d60:	0000a697          	auipc	a3,0xa
    80203d64:	9a868693          	addi	a3,a3,-1624 # 8020d708 <__func__.2034+0x18>
    80203d68:	0000a617          	auipc	a2,0xa
    80203d6c:	78060613          	addi	a2,a2,1920 # 8020e4e8 <__func__.1643>
    80203d70:	02f00593          	li	a1,47
    80203d74:	0000a517          	auipc	a0,0xa
    80203d78:	99c50513          	addi	a0,a0,-1636 # 8020d710 <__func__.2034+0x20>
    80203d7c:	ffffd097          	auipc	ra,0xffffd
    80203d80:	dda080e7          	jalr	-550(ra) # 80200b56 <_panic_>

0000000080203d84 <fetchaddr>:
int fetchaddr(u64 addr, u64* ip) {
    80203d84:	1101                	addi	sp,sp,-32
    80203d86:	ec06                	sd	ra,24(sp)
    80203d88:	e822                	sd	s0,16(sp)
    80203d8a:	e426                	sd	s1,8(sp)
    80203d8c:	e04a                	sd	s2,0(sp)
    80203d8e:	1000                	addi	s0,sp,32
    80203d90:	892a                	mv	s2,a0
    80203d92:	84ae                	mv	s1,a1
    struct Process* p = myproc();
    80203d94:	fffff097          	auipc	ra,0xfffff
    80203d98:	cb8080e7          	jalr	-840(ra) # 80202a4c <myproc>
    if (copyin(p->pgdir, (char*)ip, addr, sizeof(*ip)) != 0)
    80203d9c:	46a1                	li	a3,8
    80203d9e:	864a                	mv	a2,s2
    80203da0:	85a6                	mv	a1,s1
    80203da2:	16853503          	ld	a0,360(a0)
    80203da6:	ffffe097          	auipc	ra,0xffffe
    80203daa:	614080e7          	jalr	1556(ra) # 802023ba <copyin>
    80203dae:	00a03533          	snez	a0,a0
}
    80203db2:	40a00533          	neg	a0,a0
    80203db6:	60e2                	ld	ra,24(sp)
    80203db8:	6442                	ld	s0,16(sp)
    80203dba:	64a2                	ld	s1,8(sp)
    80203dbc:	6902                	ld	s2,0(sp)
    80203dbe:	6105                	addi	sp,sp,32
    80203dc0:	8082                	ret

0000000080203dc2 <argint>:

// Fetch the nth 32-bit system call argument.
int argint(int n, int* ip) {
    80203dc2:	1101                	addi	sp,sp,-32
    80203dc4:	ec06                	sd	ra,24(sp)
    80203dc6:	e822                	sd	s0,16(sp)
    80203dc8:	e426                	sd	s1,8(sp)
    80203dca:	1000                	addi	s0,sp,32
    80203dcc:	84ae                	mv	s1,a1
    *ip = argraw(n);
    80203dce:	00000097          	auipc	ra,0x0
    80203dd2:	f46080e7          	jalr	-186(ra) # 80203d14 <argraw>
    80203dd6:	c088                	sw	a0,0(s1)
    return 0;
}
    80203dd8:	4501                	li	a0,0
    80203dda:	60e2                	ld	ra,24(sp)
    80203ddc:	6442                	ld	s0,16(sp)
    80203dde:	64a2                	ld	s1,8(sp)
    80203de0:	6105                	addi	sp,sp,32
    80203de2:	8082                	ret

0000000080203de4 <argaddr>:

// Retrieve an argument as a pointer.
// Doesn't check for legality, since
// copyin/copyout will do that.
int argaddr(int n, u64* ip) {
    80203de4:	1101                	addi	sp,sp,-32
    80203de6:	ec06                	sd	ra,24(sp)
    80203de8:	e822                	sd	s0,16(sp)
    80203dea:	e426                	sd	s1,8(sp)
    80203dec:	1000                	addi	s0,sp,32
    80203dee:	84ae                	mv	s1,a1
    *ip = argraw(n);
    80203df0:	00000097          	auipc	ra,0x0
    80203df4:	f24080e7          	jalr	-220(ra) # 80203d14 <argraw>
    80203df8:	e088                	sd	a0,0(s1)
    return 0;
}
    80203dfa:	4501                	li	a0,0
    80203dfc:	60e2                	ld	ra,24(sp)
    80203dfe:	6442                	ld	s0,16(sp)
    80203e00:	64a2                	ld	s1,8(sp)
    80203e02:	6105                	addi	sp,sp,32
    80203e04:	8082                	ret

0000000080203e06 <copyinstr>:

// Copy a null-terminated string from user to kernel.
// Copy bytes to dst from virtual address srcva in a given page table,
// until a '\0', or max.
// Return 0 on success, -1 on error.
int copyinstr(u64* pagetable, char* dst, u64 srcva, u64 max) {
    80203e06:	711d                	addi	sp,sp,-96
    80203e08:	ec86                	sd	ra,88(sp)
    80203e0a:	e8a2                	sd	s0,80(sp)
    80203e0c:	e4a6                	sd	s1,72(sp)
    80203e0e:	e0ca                	sd	s2,64(sp)
    80203e10:	fc4e                	sd	s3,56(sp)
    80203e12:	f852                	sd	s4,48(sp)
    80203e14:	f456                	sd	s5,40(sp)
    80203e16:	f05a                	sd	s6,32(sp)
    80203e18:	ec5e                	sd	s7,24(sp)
    80203e1a:	1080                	addi	s0,sp,96
    u64 n, va0, pa0;
    int got_null = 0, cow;

    while (got_null == 0 && max > 0) {
    80203e1c:	cec9                	beqz	a3,80203eb6 <copyinstr+0xb0>
    80203e1e:	8a2a                	mv	s4,a0
    80203e20:	8b2e                	mv	s6,a1
    80203e22:	8bb2                	mv	s7,a2
    80203e24:	84b6                	mv	s1,a3
        va0 = DOWN_ALIGN(srcva, PGSIZE);
    80203e26:	7afd                	lui	s5,0xfffff
        pa0 = vir2phy(pagetable, va0, &cow);
        if (pa0 == 0){
            printf("pa0=0!");
            return -1;
        }
        n = PGSIZE - (srcva - va0);
    80203e28:	6985                	lui	s3,0x1
    80203e2a:	a825                	j	80203e62 <copyinstr+0x5c>
            printf("pa0=0!");
    80203e2c:	0000a517          	auipc	a0,0xa
    80203e30:	8f450513          	addi	a0,a0,-1804 # 8020d720 <__func__.2034+0x30>
    80203e34:	ffffd097          	auipc	ra,0xffffd
    80203e38:	c96080e7          	jalr	-874(ra) # 80200aca <printf>
            return -1;
    80203e3c:	557d                	li	a0,-1
    80203e3e:	a021                	j	80203e46 <copyinstr+0x40>
            n = max;

        char* p = (char*)(pa0 + (srcva - va0));
        while (n > 0) {
            if (*p == '\0') {
                *dst = '\0';
    80203e40:	00078023          	sb	zero,0(a5)
        }

        srcva = va0 + PGSIZE;
    }
    if (got_null) {
        return 0;
    80203e44:	4501                	li	a0,0
    } else {
        printf("ungot null\n");
        return -1;
    }
}
    80203e46:	60e6                	ld	ra,88(sp)
    80203e48:	6446                	ld	s0,80(sp)
    80203e4a:	64a6                	ld	s1,72(sp)
    80203e4c:	6906                	ld	s2,64(sp)
    80203e4e:	79e2                	ld	s3,56(sp)
    80203e50:	7a42                	ld	s4,48(sp)
    80203e52:	7aa2                	ld	s5,40(sp)
    80203e54:	7b02                	ld	s6,32(sp)
    80203e56:	6be2                	ld	s7,24(sp)
    80203e58:	6125                	addi	sp,sp,96
    80203e5a:	8082                	ret
        srcva = va0 + PGSIZE;
    80203e5c:	01390bb3          	add	s7,s2,s3
    while (got_null == 0 && max > 0) {
    80203e60:	c8b9                	beqz	s1,80203eb6 <copyinstr+0xb0>
        va0 = DOWN_ALIGN(srcva, PGSIZE);
    80203e62:	015bf933          	and	s2,s7,s5
        pa0 = vir2phy(pagetable, va0, &cow);
    80203e66:	fac40613          	addi	a2,s0,-84
    80203e6a:	85ca                	mv	a1,s2
    80203e6c:	8552                	mv	a0,s4
    80203e6e:	ffffe097          	auipc	ra,0xffffe
    80203e72:	4b6080e7          	jalr	1206(ra) # 80202324 <vir2phy>
        if (pa0 == 0){
    80203e76:	d95d                	beqz	a0,80203e2c <copyinstr+0x26>
        n = PGSIZE - (srcva - va0);
    80203e78:	41790833          	sub	a6,s2,s7
    80203e7c:	984e                	add	a6,a6,s3
        if (n > max)
    80203e7e:	0104f363          	bgeu	s1,a6,80203e84 <copyinstr+0x7e>
    80203e82:	8826                	mv	a6,s1
        char* p = (char*)(pa0 + (srcva - va0));
    80203e84:	955e                	add	a0,a0,s7
    80203e86:	41250533          	sub	a0,a0,s2
        while (n > 0) {
    80203e8a:	fc0809e3          	beqz	a6,80203e5c <copyinstr+0x56>
    80203e8e:	985a                	add	a6,a6,s6
    80203e90:	87da                	mv	a5,s6
            if (*p == '\0') {
    80203e92:	41650633          	sub	a2,a0,s6
    80203e96:	14fd                	addi	s1,s1,-1
    80203e98:	9b26                	add	s6,s6,s1
    80203e9a:	00f60733          	add	a4,a2,a5
    80203e9e:	00074703          	lbu	a4,0(a4)
    80203ea2:	df59                	beqz	a4,80203e40 <copyinstr+0x3a>
                *dst = *p;
    80203ea4:	00e78023          	sb	a4,0(a5)
            --max;
    80203ea8:	40fb04b3          	sub	s1,s6,a5
            dst++;
    80203eac:	0785                	addi	a5,a5,1
        while (n > 0) {
    80203eae:	ff0796e3          	bne	a5,a6,80203e9a <copyinstr+0x94>
            dst++;
    80203eb2:	8b42                	mv	s6,a6
    80203eb4:	b765                	j	80203e5c <copyinstr+0x56>
        printf("ungot null\n");
    80203eb6:	0000a517          	auipc	a0,0xa
    80203eba:	87250513          	addi	a0,a0,-1934 # 8020d728 <__func__.2034+0x38>
    80203ebe:	ffffd097          	auipc	ra,0xffffd
    80203ec2:	c0c080e7          	jalr	-1012(ra) # 80200aca <printf>
        return -1;
    80203ec6:	557d                	li	a0,-1
    80203ec8:	bfbd                	j	80203e46 <copyinstr+0x40>

0000000080203eca <fetchstr>:
int fetchstr(u64 uva, char* buf, int max) {
    80203eca:	7179                	addi	sp,sp,-48
    80203ecc:	f406                	sd	ra,40(sp)
    80203ece:	f022                	sd	s0,32(sp)
    80203ed0:	ec26                	sd	s1,24(sp)
    80203ed2:	e84a                	sd	s2,16(sp)
    80203ed4:	e44e                	sd	s3,8(sp)
    80203ed6:	1800                	addi	s0,sp,48
    80203ed8:	892a                	mv	s2,a0
    80203eda:	84ae                	mv	s1,a1
    80203edc:	89b2                	mv	s3,a2
    struct Process* p = myproc();
    80203ede:	fffff097          	auipc	ra,0xfffff
    80203ee2:	b6e080e7          	jalr	-1170(ra) # 80202a4c <myproc>
    int err = copyinstr(p->pgdir, buf, uva, max);
    80203ee6:	86ce                	mv	a3,s3
    80203ee8:	864a                	mv	a2,s2
    80203eea:	85a6                	mv	a1,s1
    80203eec:	16853503          	ld	a0,360(a0)
    80203ef0:	00000097          	auipc	ra,0x0
    80203ef4:	f16080e7          	jalr	-234(ra) # 80203e06 <copyinstr>
    if (err < 0)
    80203ef8:	00054763          	bltz	a0,80203f06 <fetchstr+0x3c>
    return strlen(buf);
    80203efc:	8526                	mv	a0,s1
    80203efe:	00002097          	auipc	ra,0x2
    80203f02:	6a0080e7          	jalr	1696(ra) # 8020659e <strlen>
}
    80203f06:	70a2                	ld	ra,40(sp)
    80203f08:	7402                	ld	s0,32(sp)
    80203f0a:	64e2                	ld	s1,24(sp)
    80203f0c:	6942                	ld	s2,16(sp)
    80203f0e:	69a2                	ld	s3,8(sp)
    80203f10:	6145                	addi	sp,sp,48
    80203f12:	8082                	ret

0000000080203f14 <argstr>:
int argstr(int n, char* buf, int max) {
    80203f14:	1101                	addi	sp,sp,-32
    80203f16:	ec06                	sd	ra,24(sp)
    80203f18:	e822                	sd	s0,16(sp)
    80203f1a:	e426                	sd	s1,8(sp)
    80203f1c:	e04a                	sd	s2,0(sp)
    80203f1e:	1000                	addi	s0,sp,32
    80203f20:	84ae                	mv	s1,a1
    80203f22:	8932                	mv	s2,a2
    *ip = argraw(n);
    80203f24:	00000097          	auipc	ra,0x0
    80203f28:	df0080e7          	jalr	-528(ra) # 80203d14 <argraw>
    return fetchstr(addr, buf, max);
    80203f2c:	864a                	mv	a2,s2
    80203f2e:	85a6                	mv	a1,s1
    80203f30:	00000097          	auipc	ra,0x0
    80203f34:	f9a080e7          	jalr	-102(ra) # 80203eca <fetchstr>
}
    80203f38:	60e2                	ld	ra,24(sp)
    80203f3a:	6442                	ld	s0,16(sp)
    80203f3c:	64a2                	ld	s1,8(sp)
    80203f3e:	6902                	ld	s2,0(sp)
    80203f40:	6105                	addi	sp,sp,32
    80203f42:	8082                	ret

0000000080203f44 <syscallGetProcessId>:
    acquireLock(&printLock);
    putchar(trapframe->a0);
    releaseLock(&printLock);
}

void syscallGetProcessId() {
    80203f44:	1141                	addi	sp,sp,-16
    80203f46:	e406                	sd	ra,8(sp)
    80203f48:	e022                	sd	s0,0(sp)
    80203f4a:	0800                	addi	s0,sp,16
    Trapframe* trapframe = getHartTrapFrame();
    80203f4c:	00002097          	auipc	ra,0x2
    80203f50:	30e080e7          	jalr	782(ra) # 8020625a <getHartTrapFrame>
    80203f54:	8792                	mv	a5,tp
    trapframe->a0 = currentProcess[r_hartid()]->id;
    80203f56:	00379713          	slli	a4,a5,0x3
    80203f5a:	0029f797          	auipc	a5,0x29f
    80203f5e:	55678793          	addi	a5,a5,1366 # 804a34b0 <currentProcess>
    80203f62:	97ba                	add	a5,a5,a4
    80203f64:	639c                	ld	a5,0(a5)
    80203f66:	1707e783          	lwu	a5,368(a5)
    80203f6a:	f93c                	sd	a5,112(a0)
}
    80203f6c:	60a2                	ld	ra,8(sp)
    80203f6e:	6402                	ld	s0,0(sp)
    80203f70:	0141                	addi	sp,sp,16
    80203f72:	8082                	ret

0000000080203f74 <syscallGetParentProcessId>:

void syscallGetParentProcessId() {
    80203f74:	1141                	addi	sp,sp,-16
    80203f76:	e406                	sd	ra,8(sp)
    80203f78:	e022                	sd	s0,0(sp)
    80203f7a:	0800                	addi	s0,sp,16
    Trapframe* trapframe = getHartTrapFrame();
    80203f7c:	00002097          	auipc	ra,0x2
    80203f80:	2de080e7          	jalr	734(ra) # 8020625a <getHartTrapFrame>
    80203f84:	8792                	mv	a5,tp
    trapframe->a0 = currentProcess[r_hartid()]->parentId;
    80203f86:	00379713          	slli	a4,a5,0x3
    80203f8a:	0029f797          	auipc	a5,0x29f
    80203f8e:	52678793          	addi	a5,a5,1318 # 804a34b0 <currentProcess>
    80203f92:	97ba                	add	a5,a5,a4
    80203f94:	639c                	ld	a5,0(a5)
    80203f96:	1747e783          	lwu	a5,372(a5)
    80203f9a:	f93c                	sd	a5,112(a0)
}
    80203f9c:	60a2                	ld	ra,8(sp)
    80203f9e:	6402                	ld	s0,0(sp)
    80203fa0:	0141                	addi	sp,sp,16
    80203fa2:	8082                	ret

0000000080203fa4 <syscallExitGroup>:
void syscallSetTidAddress() {
    Trapframe *tf = getHartTrapFrame();
    tf->a0 = myproc()->id;
}

void syscallExitGroup() {
    80203fa4:	1141                	addi	sp,sp,-16
    80203fa6:	e406                	sd	ra,8(sp)
    80203fa8:	e022                	sd	s0,0(sp)
    80203faa:	0800                	addi	s0,sp,16
    Trapframe *tf = getHartTrapFrame();
    80203fac:	00002097          	auipc	ra,0x2
    80203fb0:	2ae080e7          	jalr	686(ra) # 8020625a <getHartTrapFrame>
    tf->a0 = 0;
    80203fb4:	06053823          	sd	zero,112(a0)
}
    80203fb8:	60a2                	ld	ra,8(sp)
    80203fba:	6402                	ld	s0,0(sp)
    80203fbc:	0141                	addi	sp,sp,16
    80203fbe:	8082                	ret

0000000080203fc0 <syscallProcessResourceLimit>:
void syscallGetTheardId() {
    Trapframe *tf = getHartTrapFrame();
    tf->a0 = myproc()->id;
}

void syscallProcessResourceLimit() {
    80203fc0:	1141                	addi	sp,sp,-16
    80203fc2:	e406                	sd	ra,8(sp)
    80203fc4:	e022                	sd	s0,0(sp)
    80203fc6:	0800                	addi	s0,sp,16
    Trapframe *tf = getHartTrapFrame();
    80203fc8:	00002097          	auipc	ra,0x2
    80203fcc:	292080e7          	jalr	658(ra) # 8020625a <getHartTrapFrame>
    tf->a0 = 0;
    80203fd0:	06053823          	sd	zero,112(a0)
}
    80203fd4:	60a2                	ld	ra,8(sp)
    80203fd6:	6402                	ld	s0,0(sp)
    80203fd8:	0141                	addi	sp,sp,16
    80203fda:	8082                	ret

0000000080203fdc <syscallPutchar>:
void syscallPutchar() {
    80203fdc:	1101                	addi	sp,sp,-32
    80203fde:	ec06                	sd	ra,24(sp)
    80203fe0:	e822                	sd	s0,16(sp)
    80203fe2:	e426                	sd	s1,8(sp)
    80203fe4:	1000                	addi	s0,sp,32
    Trapframe* trapframe = getHartTrapFrame();
    80203fe6:	00002097          	auipc	ra,0x2
    80203fea:	274080e7          	jalr	628(ra) # 8020625a <getHartTrapFrame>
    80203fee:	84aa                	mv	s1,a0
    acquireLock(&printLock);
    80203ff0:	001de517          	auipc	a0,0x1de
    80203ff4:	07050513          	addi	a0,a0,112 # 803e2060 <printLock>
    80203ff8:	00002097          	auipc	ra,0x2
    80203ffc:	16c080e7          	jalr	364(ra) # 80206164 <acquireLock>
    putchar(trapframe->a0);
    80204000:	0704c503          	lbu	a0,112(s1)
    80204004:	ffffc097          	auipc	ra,0xffffc
    80204008:	318080e7          	jalr	792(ra) # 8020031c <putchar>
    releaseLock(&printLock);
    8020400c:	001de517          	auipc	a0,0x1de
    80204010:	05450513          	addi	a0,a0,84 # 803e2060 <printLock>
    80204014:	00002097          	auipc	ra,0x2
    80204018:	1cc080e7          	jalr	460(ra) # 802061e0 <releaseLock>
}
    8020401c:	60e2                	ld	ra,24(sp)
    8020401e:	6442                	ld	s0,16(sp)
    80204020:	64a2                	ld	s1,8(sp)
    80204022:	6105                	addi	sp,sp,32
    80204024:	8082                	ret

0000000080204026 <syscallProcessDestory>:
void syscallProcessDestory() {
    80204026:	7179                	addi	sp,sp,-48
    80204028:	f406                	sd	ra,40(sp)
    8020402a:	f022                	sd	s0,32(sp)
    8020402c:	ec26                	sd	s1,24(sp)
    8020402e:	1800                	addi	s0,sp,48
    Trapframe* trapframe = getHartTrapFrame();
    80204030:	00002097          	auipc	ra,0x2
    80204034:	22a080e7          	jalr	554(ra) # 8020625a <getHartTrapFrame>
    80204038:	84aa                	mv	s1,a0
    if ((ret = pid2Process(processId, &process, 1)) < 0) {
    8020403a:	4605                	li	a2,1
    8020403c:	fd840593          	addi	a1,s0,-40
    80204040:	5928                	lw	a0,112(a0)
    80204042:	fffff097          	auipc	ra,0xfffff
    80204046:	c5e080e7          	jalr	-930(ra) # 80202ca0 <pid2Process>
    8020404a:	00054f63          	bltz	a0,80204068 <syscallProcessDestory+0x42>
    processDestory(process);
    8020404e:	fd843503          	ld	a0,-40(s0)
    80204052:	00000097          	auipc	ra,0x0
    80204056:	8c4080e7          	jalr	-1852(ra) # 80203916 <processDestory>
    trapframe->a0 = 0;
    8020405a:	0604b823          	sd	zero,112(s1)
}
    8020405e:	70a2                	ld	ra,40(sp)
    80204060:	7402                	ld	s0,32(sp)
    80204062:	64e2                	ld	s1,24(sp)
    80204064:	6145                	addi	sp,sp,48
    80204066:	8082                	ret
        trapframe->a0 = ret;
    80204068:	f8a8                	sd	a0,112(s1)
        return;
    8020406a:	bfd5                	j	8020405e <syscallProcessDestory+0x38>

000000008020406c <syscallWait>:
void syscallWait() {
    8020406c:	1101                	addi	sp,sp,-32
    8020406e:	ec06                	sd	ra,24(sp)
    80204070:	e822                	sd	s0,16(sp)
    80204072:	e426                	sd	s1,8(sp)
    80204074:	1000                	addi	s0,sp,32
    Trapframe* trapframe = getHartTrapFrame();
    80204076:	00002097          	auipc	ra,0x2
    8020407a:	1e4080e7          	jalr	484(ra) # 8020625a <getHartTrapFrame>
    8020407e:	84aa                	mv	s1,a0
    trapframe->a0 = wait(pid, addr);
    80204080:	7d2c                	ld	a1,120(a0)
    80204082:	5928                	lw	a0,112(a0)
    80204084:	00000097          	auipc	ra,0x0
    80204088:	99c080e7          	jalr	-1636(ra) # 80203a20 <wait>
    8020408c:	f8a8                	sd	a0,112(s1)
}
    8020408e:	60e2                	ld	ra,24(sp)
    80204090:	6442                	ld	s0,16(sp)
    80204092:	64a2                	ld	s1,8(sp)
    80204094:	6105                	addi	sp,sp,32
    80204096:	8082                	ret

0000000080204098 <syscallYield>:
void syscallYield() {
    80204098:	1141                	addi	sp,sp,-16
    8020409a:	e406                	sd	ra,8(sp)
    8020409c:	e022                	sd	s0,0(sp)
    8020409e:	0800                	addi	s0,sp,16
    kernelProcessCpuTimeEnd();
    802040a0:	fffff097          	auipc	ra,0xfffff
    802040a4:	7d8080e7          	jalr	2008(ra) # 80203878 <kernelProcessCpuTimeEnd>
	yield();
    802040a8:	fffff097          	auipc	ra,0xfffff
    802040ac:	2da080e7          	jalr	730(ra) # 80203382 <yield>
}
    802040b0:	60a2                	ld	ra,8(sp)
    802040b2:	6402                	ld	s0,0(sp)
    802040b4:	0141                	addi	sp,sp,16
    802040b6:	8082                	ret

00000000802040b8 <syscallClone>:
void syscallClone() {
    802040b8:	1141                	addi	sp,sp,-16
    802040ba:	e406                	sd	ra,8(sp)
    802040bc:	e022                	sd	s0,0(sp)
    802040be:	0800                	addi	s0,sp,16
    Trapframe *tf = getHartTrapFrame();
    802040c0:	00002097          	auipc	ra,0x2
    802040c4:	19a080e7          	jalr	410(ra) # 8020625a <getHartTrapFrame>
    processFork(tf->a0, tf->a1, tf->a2, tf->a3, tf->a4);
    802040c8:	6958                	ld	a4,144(a0)
    802040ca:	6554                	ld	a3,136(a0)
    802040cc:	6150                	ld	a2,128(a0)
    802040ce:	7d2c                	ld	a1,120(a0)
    802040d0:	5928                	lw	a0,112(a0)
    802040d2:	fffff097          	auipc	ra,0xfffff
    802040d6:	480080e7          	jalr	1152(ra) # 80203552 <processFork>
}
    802040da:	60a2                	ld	ra,8(sp)
    802040dc:	6402                	ld	s0,0(sp)
    802040de:	0141                	addi	sp,sp,16
    802040e0:	8082                	ret

00000000802040e2 <syscallExit>:
void syscallExit() {
    802040e2:	7179                	addi	sp,sp,-48
    802040e4:	f406                	sd	ra,40(sp)
    802040e6:	f022                	sd	s0,32(sp)
    802040e8:	ec26                	sd	s1,24(sp)
    802040ea:	1800                	addi	s0,sp,48
    Trapframe* trapframe = getHartTrapFrame();
    802040ec:	00002097          	auipc	ra,0x2
    802040f0:	16e080e7          	jalr	366(ra) # 8020625a <getHartTrapFrame>
    int ret, ec = trapframe->a0;
    802040f4:	7924                	ld	s1,112(a0)
    if ((ret = pid2Process(0, &process, 1)) < 0) {
    802040f6:	4605                	li	a2,1
    802040f8:	fd840593          	addi	a1,s0,-40
    802040fc:	4501                	li	a0,0
    802040fe:	fffff097          	auipc	ra,0xfffff
    80204102:	ba2080e7          	jalr	-1118(ra) # 80202ca0 <pid2Process>
    80204106:	02054e63          	bltz	a0,80204142 <syscallExit+0x60>
    process->retValue = (ec << 8); //todo
    8020410a:	fd843503          	ld	a0,-40(s0)
    8020410e:	0084949b          	slliw	s1,s1,0x8
    80204112:	5c953423          	sd	s1,1480(a0)
    processDestory(process);
    80204116:	00000097          	auipc	ra,0x0
    8020411a:	800080e7          	jalr	-2048(ra) # 80203916 <processDestory>
    panic("sycall exit error");
    8020411e:	00009697          	auipc	a3,0x9
    80204122:	65a68693          	addi	a3,a3,1626 # 8020d778 <__func__.2034+0x88>
    80204126:	00009617          	auipc	a2,0x9
    8020412a:	71a60613          	addi	a2,a2,1818 # 8020d840 <__func__.1867>
    8020412e:	08200593          	li	a1,130
    80204132:	00009517          	auipc	a0,0x9
    80204136:	63650513          	addi	a0,a0,1590 # 8020d768 <__func__.2034+0x78>
    8020413a:	ffffd097          	auipc	ra,0xffffd
    8020413e:	a1c080e7          	jalr	-1508(ra) # 80200b56 <_panic_>
        panic("Process exit error\n");
    80204142:	00009697          	auipc	a3,0x9
    80204146:	60e68693          	addi	a3,a3,1550 # 8020d750 <__func__.2034+0x60>
    8020414a:	00009617          	auipc	a2,0x9
    8020414e:	6f660613          	addi	a2,a2,1782 # 8020d840 <__func__.1867>
    80204152:	07b00593          	li	a1,123
    80204156:	00009517          	auipc	a0,0x9
    8020415a:	61250513          	addi	a0,a0,1554 # 8020d768 <__func__.2034+0x78>
    8020415e:	ffffd097          	auipc	ra,0xffffd
    80204162:	9f8080e7          	jalr	-1544(ra) # 80200b56 <_panic_>

0000000080204166 <syscallPutString>:
void syscallPutString() {
    80204166:	7139                	addi	sp,sp,-64
    80204168:	fc06                	sd	ra,56(sp)
    8020416a:	f822                	sd	s0,48(sp)
    8020416c:	f426                	sd	s1,40(sp)
    8020416e:	f04a                	sd	s2,32(sp)
    80204170:	ec4e                	sd	s3,24(sp)
    80204172:	e852                	sd	s4,16(sp)
    80204174:	0080                	addi	s0,sp,64
    Trapframe* trapframe = getHartTrapFrame();
    80204176:	00002097          	auipc	ra,0x2
    8020417a:	0e4080e7          	jalr	228(ra) # 8020625a <getHartTrapFrame>
    8020417e:	8792                	mv	a5,tp
    u64 va = trapframe->a0;
    80204180:	7924                	ld	s1,112(a0)
    int len = trapframe->a1;
    80204182:	07853903          	ld	s2,120(a0)
    80204186:	00090a1b          	sext.w	s4,s2
    u64 pa = pageLookup(currentProcess[hartId]->pgdir, va, &pte) + (va & 0xfff);
    8020418a:	2781                	sext.w	a5,a5
    8020418c:	078e                	slli	a5,a5,0x3
    8020418e:	0029f717          	auipc	a4,0x29f
    80204192:	32270713          	addi	a4,a4,802 # 804a34b0 <currentProcess>
    80204196:	97ba                	add	a5,a5,a4
    80204198:	639c                	ld	a5,0(a5)
    8020419a:	fc840613          	addi	a2,s0,-56
    8020419e:	85a6                	mv	a1,s1
    802041a0:	1687b503          	ld	a0,360(a5)
    802041a4:	ffffe097          	auipc	ra,0xffffe
    802041a8:	c6c080e7          	jalr	-916(ra) # 80201e10 <pageLookup>
    802041ac:	03449993          	slli	s3,s1,0x34
    802041b0:	0349d993          	srli	s3,s3,0x34
    802041b4:	99aa                	add	s3,s3,a0
    if (pa == 0) {
    802041b6:	04098c63          	beqz	s3,8020420e <syscallPutString+0xa8>
    char* start = (char*) pa;
    802041ba:	84ce                	mv	s1,s3
    acquireLock(&printLock);
    802041bc:	001de517          	auipc	a0,0x1de
    802041c0:	ea450513          	addi	a0,a0,-348 # 803e2060 <printLock>
    802041c4:	00002097          	auipc	ra,0x2
    802041c8:	fa0080e7          	jalr	-96(ra) # 80206164 <acquireLock>
    while (len--) {
    802041cc:	020a0163          	beqz	s4,802041ee <syscallPutString+0x88>
    802041d0:	397d                	addiw	s2,s2,-1
    802041d2:	1902                	slli	s2,s2,0x20
    802041d4:	02095913          	srli	s2,s2,0x20
    802041d8:	0985                	addi	s3,s3,1
    802041da:	994e                	add	s2,s2,s3
        putchar(*start);
    802041dc:	0004c503          	lbu	a0,0(s1)
    802041e0:	ffffc097          	auipc	ra,0xffffc
    802041e4:	13c080e7          	jalr	316(ra) # 8020031c <putchar>
        start++;
    802041e8:	0485                	addi	s1,s1,1
    while (len--) {
    802041ea:	ff2499e3          	bne	s1,s2,802041dc <syscallPutString+0x76>
    releaseLock(&printLock);
    802041ee:	001de517          	auipc	a0,0x1de
    802041f2:	e7250513          	addi	a0,a0,-398 # 803e2060 <printLock>
    802041f6:	00002097          	auipc	ra,0x2
    802041fa:	fea080e7          	jalr	-22(ra) # 802061e0 <releaseLock>
}
    802041fe:	70e2                	ld	ra,56(sp)
    80204200:	7442                	ld	s0,48(sp)
    80204202:	74a2                	ld	s1,40(sp)
    80204204:	7902                	ld	s2,32(sp)
    80204206:	69e2                	ld	s3,24(sp)
    80204208:	6a42                	ld	s4,16(sp)
    8020420a:	6121                	addi	sp,sp,64
    8020420c:	8082                	ret
        panic("Syscall put string address error!\nThe virtual address is %x, the length is %x\n", va, len);
    8020420e:	87d2                	mv	a5,s4
    80204210:	8726                	mv	a4,s1
    80204212:	00009697          	auipc	a3,0x9
    80204216:	57e68693          	addi	a3,a3,1406 # 8020d790 <__func__.2034+0xa0>
    8020421a:	00009617          	auipc	a2,0x9
    8020421e:	63660613          	addi	a2,a2,1590 # 8020d850 <__func__.1877>
    80204222:	08f00593          	li	a1,143
    80204226:	00009517          	auipc	a0,0x9
    8020422a:	54250513          	addi	a0,a0,1346 # 8020d768 <__func__.2034+0x78>
    8020422e:	ffffd097          	auipc	ra,0xffffd
    80204232:	928080e7          	jalr	-1752(ra) # 80200b56 <_panic_>

0000000080204236 <syscallSetTidAddress>:
void syscallSetTidAddress() {
    80204236:	1101                	addi	sp,sp,-32
    80204238:	ec06                	sd	ra,24(sp)
    8020423a:	e822                	sd	s0,16(sp)
    8020423c:	e426                	sd	s1,8(sp)
    8020423e:	1000                	addi	s0,sp,32
    Trapframe *tf = getHartTrapFrame();
    80204240:	00002097          	auipc	ra,0x2
    80204244:	01a080e7          	jalr	26(ra) # 8020625a <getHartTrapFrame>
    80204248:	84aa                	mv	s1,a0
    tf->a0 = myproc()->id;
    8020424a:	fffff097          	auipc	ra,0xfffff
    8020424e:	802080e7          	jalr	-2046(ra) # 80202a4c <myproc>
    80204252:	17056783          	lwu	a5,368(a0)
    80204256:	f8bc                	sd	a5,112(s1)
}
    80204258:	60e2                	ld	ra,24(sp)
    8020425a:	6442                	ld	s0,16(sp)
    8020425c:	64a2                	ld	s1,8(sp)
    8020425e:	6105                	addi	sp,sp,32
    80204260:	8082                	ret

0000000080204262 <syscallGetTheardId>:
void syscallGetTheardId() {
    80204262:	1101                	addi	sp,sp,-32
    80204264:	ec06                	sd	ra,24(sp)
    80204266:	e822                	sd	s0,16(sp)
    80204268:	e426                	sd	s1,8(sp)
    8020426a:	1000                	addi	s0,sp,32
    Trapframe *tf = getHartTrapFrame();
    8020426c:	00002097          	auipc	ra,0x2
    80204270:	fee080e7          	jalr	-18(ra) # 8020625a <getHartTrapFrame>
    80204274:	84aa                	mv	s1,a0
    tf->a0 = myproc()->id;
    80204276:	ffffe097          	auipc	ra,0xffffe
    8020427a:	7d6080e7          	jalr	2006(ra) # 80202a4c <myproc>
    8020427e:	17056783          	lwu	a5,368(a0)
    80204282:	f8bc                	sd	a5,112(s1)
}
    80204284:	60e2                	ld	ra,24(sp)
    80204286:	6442                	ld	s0,16(sp)
    80204288:	64a2                	ld	s1,8(sp)
    8020428a:	6105                	addi	sp,sp,32
    8020428c:	8082                	ret

000000008020428e <syscallGetCpuTimes>:
void syscallGetCpuTimes() {
    8020428e:	7179                	addi	sp,sp,-48
    80204290:	f406                	sd	ra,40(sp)
    80204292:	f022                	sd	s0,32(sp)
    80204294:	ec26                	sd	s1,24(sp)
    80204296:	e84a                	sd	s2,16(sp)
    80204298:	1800                	addi	s0,sp,48
    Trapframe *tf = getHartTrapFrame();
    8020429a:	00002097          	auipc	ra,0x2
    8020429e:	fc0080e7          	jalr	-64(ra) # 8020625a <getHartTrapFrame>
    802042a2:	892a                	mv	s2,a0
    CpuTimes *ct = (CpuTimes*)vir2phy(myproc()->pgdir, tf->a0, &cow);
    802042a4:	ffffe097          	auipc	ra,0xffffe
    802042a8:	7a8080e7          	jalr	1960(ra) # 80202a4c <myproc>
    802042ac:	fdc40613          	addi	a2,s0,-36
    802042b0:	07093583          	ld	a1,112(s2)
    802042b4:	16853503          	ld	a0,360(a0)
    802042b8:	ffffe097          	auipc	ra,0xffffe
    802042bc:	06c080e7          	jalr	108(ra) # 80202324 <vir2phy>
    802042c0:	84aa                	mv	s1,a0
    if (cow) {
    802042c2:	fdc42783          	lw	a5,-36(s0)
    802042c6:	ef8d                	bnez	a5,80204300 <syscallGetCpuTimes+0x72>
    *ct = myproc()->cpuTime;
    802042c8:	ffffe097          	auipc	ra,0xffffe
    802042cc:	784080e7          	jalr	1924(ra) # 80202a4c <myproc>
    802042d0:	13053603          	ld	a2,304(a0)
    802042d4:	13853683          	ld	a3,312(a0)
    802042d8:	14053703          	ld	a4,320(a0)
    802042dc:	14853783          	ld	a5,328(a0)
    802042e0:	e090                	sd	a2,0(s1)
    802042e2:	e494                	sd	a3,8(s1)
    802042e4:	e898                	sd	a4,16(s1)
    802042e6:	ec9c                	sd	a5,24(s1)
	return x;
}

static inline u64 r_cycle() {
	u64 x;
	asm volatile("rdcycle %0" : "=r" (x) );
    802042e8:	c00027f3          	rdcycle	a5
    tf->a0 = (r_cycle() & 0x3FFFFFFF);
    802042ec:	178a                	slli	a5,a5,0x22
    802042ee:	9389                	srli	a5,a5,0x22
    802042f0:	06f93823          	sd	a5,112(s2)
}
    802042f4:	70a2                	ld	ra,40(sp)
    802042f6:	7402                	ld	s0,32(sp)
    802042f8:	64e2                	ld	s1,24(sp)
    802042fa:	6942                	ld	s2,16(sp)
    802042fc:	6145                	addi	sp,sp,48
    802042fe:	8082                	ret
        cowHandler(myproc()->pgdir, tf->a0);
    80204300:	ffffe097          	auipc	ra,0xffffe
    80204304:	74c080e7          	jalr	1868(ra) # 80202a4c <myproc>
    80204308:	07093583          	ld	a1,112(s2)
    8020430c:	16853503          	ld	a0,360(a0)
    80204310:	ffffe097          	auipc	ra,0xffffe
    80204314:	ed6080e7          	jalr	-298(ra) # 802021e6 <cowHandler>
    80204318:	bf45                	j	802042c8 <syscallGetCpuTimes+0x3a>

000000008020431a <syscallGetTime>:
void syscallGetTime() {
    8020431a:	7179                	addi	sp,sp,-48
    8020431c:	f406                	sd	ra,40(sp)
    8020431e:	f022                	sd	s0,32(sp)
    80204320:	ec26                	sd	s1,24(sp)
    80204322:	1800                	addi	s0,sp,48
    Trapframe *tf = getHartTrapFrame();
    80204324:	00002097          	auipc	ra,0x2
    80204328:	f36080e7          	jalr	-202(ra) # 8020625a <getHartTrapFrame>
    8020432c:	84aa                	mv	s1,a0
	asm volatile("rdtime %0" : "=r" (x) );
    8020432e:	c01027f3          	rdtime	a5
    ts.second = time / 1000000;
    80204332:	000f4737          	lui	a4,0xf4
    80204336:	24070713          	addi	a4,a4,576 # f4240 <_start-0x8010bdc0>
    8020433a:	02e7d6b3          	divu	a3,a5,a4
    8020433e:	fcd43823          	sd	a3,-48(s0)
    ts.microSecond = time % 1000000;
    80204342:	02e7f7b3          	remu	a5,a5,a4
    80204346:	fcf43c23          	sd	a5,-40(s0)
    copyout(myproc()->pgdir, tf->a0, (char*)&ts, sizeof(TimeSpec));
    8020434a:	ffffe097          	auipc	ra,0xffffe
    8020434e:	702080e7          	jalr	1794(ra) # 80202a4c <myproc>
    80204352:	46c1                	li	a3,16
    80204354:	fd040613          	addi	a2,s0,-48
    80204358:	78ac                	ld	a1,112(s1)
    8020435a:	16853503          	ld	a0,360(a0)
    8020435e:	ffffe097          	auipc	ra,0xffffe
    80204362:	0ec080e7          	jalr	236(ra) # 8020244a <copyout>
    tf->a0 = 0;
    80204366:	0604b823          	sd	zero,112(s1)
}
    8020436a:	70a2                	ld	ra,40(sp)
    8020436c:	7402                	ld	s0,32(sp)
    8020436e:	64e2                	ld	s1,24(sp)
    80204370:	6145                	addi	sp,sp,48
    80204372:	8082                	ret

0000000080204374 <syscallSleepTime>:
void syscallSleepTime() {
    80204374:	7179                	addi	sp,sp,-48
    80204376:	f406                	sd	ra,40(sp)
    80204378:	f022                	sd	s0,32(sp)
    8020437a:	ec26                	sd	s1,24(sp)
    8020437c:	e84a                	sd	s2,16(sp)
    8020437e:	1800                	addi	s0,sp,48
    Trapframe *tf = getHartTrapFrame();
    80204380:	00002097          	auipc	ra,0x2
    80204384:	eda080e7          	jalr	-294(ra) # 8020625a <getHartTrapFrame>
    80204388:	84aa                	mv	s1,a0
    copyin(myproc()->pgdir, (char*)&ts, tf->a0, sizeof(TimeSpec));
    8020438a:	ffffe097          	auipc	ra,0xffffe
    8020438e:	6c2080e7          	jalr	1730(ra) # 80202a4c <myproc>
    80204392:	46c1                	li	a3,16
    80204394:	78b0                	ld	a2,112(s1)
    80204396:	fd040593          	addi	a1,s0,-48
    8020439a:	16853503          	ld	a0,360(a0)
    8020439e:	ffffe097          	auipc	ra,0xffffe
    802043a2:	01c080e7          	jalr	28(ra) # 802023ba <copyin>
    802043a6:	c0102973          	rdtime	s2
    myproc()->awakeTime = r_time() +  ts.second * 1000000 + ts.microSecond;
    802043aa:	fd043483          	ld	s1,-48(s0)
    802043ae:	000f47b7          	lui	a5,0xf4
    802043b2:	24078793          	addi	a5,a5,576 # f4240 <_start-0x8010bdc0>
    802043b6:	02f484b3          	mul	s1,s1,a5
    802043ba:	fd843783          	ld	a5,-40(s0)
    802043be:	94be                	add	s1,s1,a5
    802043c0:	ffffe097          	auipc	ra,0xffffe
    802043c4:	68c080e7          	jalr	1676(ra) # 80202a4c <myproc>
    802043c8:	94ca                	add	s1,s1,s2
    802043ca:	16953023          	sd	s1,352(a0)
    kernelProcessCpuTimeEnd();
    802043ce:	fffff097          	auipc	ra,0xfffff
    802043d2:	4aa080e7          	jalr	1194(ra) # 80203878 <kernelProcessCpuTimeEnd>
    yield();
    802043d6:	fffff097          	auipc	ra,0xfffff
    802043da:	fac080e7          	jalr	-84(ra) # 80203382 <yield>
}
    802043de:	70a2                	ld	ra,40(sp)
    802043e0:	7402                	ld	s0,32(sp)
    802043e2:	64e2                	ld	s1,24(sp)
    802043e4:	6942                	ld	s2,16(sp)
    802043e6:	6145                	addi	sp,sp,48
    802043e8:	8082                	ret

00000000802043ea <syscallBrk>:
void syscallBrk() {
    802043ea:	1101                	addi	sp,sp,-32
    802043ec:	ec06                	sd	ra,24(sp)
    802043ee:	e822                	sd	s0,16(sp)
    802043f0:	e426                	sd	s1,8(sp)
    802043f2:	e04a                	sd	s2,0(sp)
    802043f4:	1000                	addi	s0,sp,32
    Trapframe *trapframe = getHartTrapFrame();
    802043f6:	00002097          	auipc	ra,0x2
    802043fa:	e64080e7          	jalr	-412(ra) # 8020625a <getHartTrapFrame>
    802043fe:	84aa                	mv	s1,a0
    u64 addr = trapframe->a0;
    80204400:	07053903          	ld	s2,112(a0)
    if (addr == 0) {
    80204404:	00091f63          	bnez	s2,80204422 <syscallBrk+0x38>
        trapframe->a0 = myproc()->heapBottom;
    80204408:	ffffe097          	auipc	ra,0xffffe
    8020440c:	644080e7          	jalr	1604(ra) # 80202a4c <myproc>
    80204410:	5d053783          	ld	a5,1488(a0)
    80204414:	f8bc                	sd	a5,112(s1)
}
    80204416:	60e2                	ld	ra,24(sp)
    80204418:	6442                	ld	s0,16(sp)
    8020441a:	64a2                	ld	s1,8(sp)
    8020441c:	6902                	ld	s2,0(sp)
    8020441e:	6105                	addi	sp,sp,32
    80204420:	8082                	ret
    } else if (addr >= myproc()->heapBottom) {
    80204422:	ffffe097          	auipc	ra,0xffffe
    80204426:	62a080e7          	jalr	1578(ra) # 80202a4c <myproc>
    8020442a:	5d053783          	ld	a5,1488(a0)
    8020442e:	00f97563          	bgeu	s2,a5,80204438 <syscallBrk+0x4e>
        trapframe->a0 = -1;
    80204432:	57fd                	li	a5,-1
    80204434:	f8bc                	sd	a5,112(s1)
}
    80204436:	b7c5                	j	80204416 <syscallBrk+0x2c>
        trapframe->a0 = (sys_sbrk(addr - myproc()->heapBottom) != -1);
    80204438:	ffffe097          	auipc	ra,0xffffe
    8020443c:	614080e7          	jalr	1556(ra) # 80202a4c <myproc>
    80204440:	5d053503          	ld	a0,1488(a0)
    80204444:	40a9053b          	subw	a0,s2,a0
    80204448:	ffffe097          	auipc	ra,0xffffe
    8020444c:	0fe080e7          	jalr	254(ra) # 80202546 <sys_sbrk>
    80204450:	0505                	addi	a0,a0,1
    80204452:	00a03533          	snez	a0,a0
    80204456:	f8a8                	sd	a0,112(s1)
    80204458:	bf7d                	j	80204416 <syscallBrk+0x2c>

000000008020445a <syscallSetBrk>:
void syscallSetBrk() {
    8020445a:	1101                	addi	sp,sp,-32
    8020445c:	ec06                	sd	ra,24(sp)
    8020445e:	e822                	sd	s0,16(sp)
    80204460:	e426                	sd	s1,8(sp)
    80204462:	1000                	addi	s0,sp,32
    Trapframe *trapframe = getHartTrapFrame();
    80204464:	00002097          	auipc	ra,0x2
    80204468:	df6080e7          	jalr	-522(ra) # 8020625a <getHartTrapFrame>
    8020446c:	84aa                	mv	s1,a0
    trapframe->a0 = sys_sbrk(len);
    8020446e:	5928                	lw	a0,112(a0)
    80204470:	ffffe097          	auipc	ra,0xffffe
    80204474:	0d6080e7          	jalr	214(ra) # 80202546 <sys_sbrk>
    80204478:	f8a8                	sd	a0,112(s1)
}
    8020447a:	60e2                	ld	ra,24(sp)
    8020447c:	6442                	ld	s0,16(sp)
    8020447e:	64a2                	ld	s1,8(sp)
    80204480:	6105                	addi	sp,sp,32
    80204482:	8082                	ret

0000000080204484 <syscallMapMemory>:
void syscallMapMemory() {
    80204484:	715d                	addi	sp,sp,-80
    80204486:	e486                	sd	ra,72(sp)
    80204488:	e0a2                	sd	s0,64(sp)
    8020448a:	fc26                	sd	s1,56(sp)
    8020448c:	f84a                	sd	s2,48(sp)
    8020448e:	f44e                	sd	s3,40(sp)
    80204490:	f052                	sd	s4,32(sp)
    80204492:	ec56                	sd	s5,24(sp)
    80204494:	0880                	addi	s0,sp,80
    Trapframe* trapframe = getHartTrapFrame();
    80204496:	00002097          	auipc	ra,0x2
    8020449a:	dc4080e7          	jalr	-572(ra) # 8020625a <getHartTrapFrame>
    8020449e:	84aa                	mv	s1,a0
    u64 start = trapframe->a0, len = trapframe->a1, perm = trapframe->a2,
    802044a0:	07053903          	ld	s2,112(a0)
    802044a4:	07853983          	ld	s3,120(a0)
    802044a8:	08053a03          	ld	s4,128(a0)
        off = trapframe->a5;
    802044ac:	09853a83          	ld	s5,152(a0)
    if (argfd(4, 0, &fd)) {
    802044b0:	fb840613          	addi	a2,s0,-72
    802044b4:	4581                	li	a1,0
    802044b6:	4511                	li	a0,4
    802044b8:	00002097          	auipc	ra,0x2
    802044bc:	3dc080e7          	jalr	988(ra) # 80206894 <argfd>
    802044c0:	cd01                	beqz	a0,802044d8 <syscallMapMemory+0x54>
        trapframe->a0 = -1;
    802044c2:	57fd                	li	a5,-1
    802044c4:	f8bc                	sd	a5,112(s1)
}
    802044c6:	60a6                	ld	ra,72(sp)
    802044c8:	6406                	ld	s0,64(sp)
    802044ca:	74e2                	ld	s1,56(sp)
    802044cc:	7942                	ld	s2,48(sp)
    802044ce:	79a2                	ld	s3,40(sp)
    802044d0:	7a02                	ld	s4,32(sp)
    802044d2:	6ae2                	ld	s5,24(sp)
    802044d4:	6161                	addi	sp,sp,80
    802044d6:	8082                	ret
        do_mmap(fd, start, len, perm, /*'type' currently not used */ 0, off);
    802044d8:	87d6                	mv	a5,s5
    802044da:	4701                	li	a4,0
    802044dc:	000a069b          	sext.w	a3,s4
    802044e0:	864e                	mv	a2,s3
    802044e2:	85ca                	mv	a1,s2
    802044e4:	fb843503          	ld	a0,-72(s0)
    802044e8:	00006097          	auipc	ra,0x6
    802044ec:	b46080e7          	jalr	-1210(ra) # 8020a02e <do_mmap>
    trapframe->a0 =
    802044f0:	f8a8                	sd	a0,112(s1)
    return;
    802044f2:	bfd1                	j	802044c6 <syscallMapMemory+0x42>

00000000802044f4 <syscallUnMapMemory>:
void syscallUnMapMemory() {
    802044f4:	7179                	addi	sp,sp,-48
    802044f6:	f406                	sd	ra,40(sp)
    802044f8:	f022                	sd	s0,32(sp)
    802044fa:	ec26                	sd	s1,24(sp)
    802044fc:	e84a                	sd	s2,16(sp)
    802044fe:	e44e                	sd	s3,8(sp)
    80204500:	e052                	sd	s4,0(sp)
    80204502:	1800                	addi	s0,sp,48
    Trapframe *trapframe = getHartTrapFrame();
    80204504:	00002097          	auipc	ra,0x2
    80204508:	d56080e7          	jalr	-682(ra) # 8020625a <getHartTrapFrame>
    8020450c:	8a2a                	mv	s4,a0
    u64 start = trapframe->a0, len = trapframe->a1, end = start + len;
    8020450e:	7924                	ld	s1,112(a0)
    80204510:	07853903          	ld	s2,120(a0)
    80204514:	9926                	add	s2,s2,s1
    start = DOWN_ALIGN(start, 12);
    80204516:	98d1                	andi	s1,s1,-12
    while (start < end) {
    80204518:	0324f363          	bgeu	s1,s2,8020453e <syscallUnMapMemory+0x4a>
        start += PGSIZE;
    8020451c:	6985                	lui	s3,0x1
        if (pageRemove(myproc()->pgdir, start) < 0) {
    8020451e:	ffffe097          	auipc	ra,0xffffe
    80204522:	52e080e7          	jalr	1326(ra) # 80202a4c <myproc>
    80204526:	85a6                	mv	a1,s1
    80204528:	16853503          	ld	a0,360(a0)
    8020452c:	ffffe097          	auipc	ra,0xffffe
    80204530:	97e080e7          	jalr	-1666(ra) # 80201eaa <pageRemove>
    80204534:	00054f63          	bltz	a0,80204552 <syscallUnMapMemory+0x5e>
        start += PGSIZE;
    80204538:	94ce                	add	s1,s1,s3
    while (start < end) {
    8020453a:	ff24e2e3          	bltu	s1,s2,8020451e <syscallUnMapMemory+0x2a>
    trapframe->a0 = 0;
    8020453e:	060a3823          	sd	zero,112(s4)
}
    80204542:	70a2                	ld	ra,40(sp)
    80204544:	7402                	ld	s0,32(sp)
    80204546:	64e2                	ld	s1,24(sp)
    80204548:	6942                	ld	s2,16(sp)
    8020454a:	69a2                	ld	s3,8(sp)
    8020454c:	6a02                	ld	s4,0(sp)
    8020454e:	6145                	addi	sp,sp,48
    80204550:	8082                	ret
            trapframe->a0 = -1;
    80204552:	57fd                	li	a5,-1
    80204554:	06fa3823          	sd	a5,112(s4)
            return ;
    80204558:	b7ed                	j	80204542 <syscallUnMapMemory+0x4e>

000000008020455a <syscallExec>:
void syscallExec() {
    8020455a:	1101                	addi	sp,sp,-32
    8020455c:	ec06                	sd	ra,24(sp)
    8020455e:	e822                	sd	s0,16(sp)
    80204560:	e426                	sd	s1,8(sp)
    80204562:	1000                	addi	s0,sp,32
    Trapframe *tf = getHartTrapFrame();
    80204564:	00002097          	auipc	ra,0x2
    80204568:	cf6080e7          	jalr	-778(ra) # 8020625a <getHartTrapFrame>
    8020456c:	84aa                	mv	s1,a0
    tf->a0 = sys_exec();
    8020456e:	00002097          	auipc	ra,0x2
    80204572:	818080e7          	jalr	-2024(ra) # 80205d86 <sys_exec>
    80204576:	f8a8                	sd	a0,112(s1)
}
    80204578:	60e2                	ld	ra,24(sp)
    8020457a:	6442                	ld	s0,16(sp)
    8020457c:	64a2                	ld	s1,8(sp)
    8020457e:	6105                	addi	sp,sp,32
    80204580:	8082                	ret

0000000080204582 <syscallUname>:
void syscallUname() {
    80204582:	7161                	addi	sp,sp,-432
    80204584:	f706                	sd	ra,424(sp)
    80204586:	f322                	sd	s0,416(sp)
    80204588:	ef26                	sd	s1,408(sp)
    8020458a:	1b00                	addi	s0,sp,432
    strncpy(uname.sysname, "my_linux", 65);
    8020458c:	04100613          	li	a2,65
    80204590:	00009597          	auipc	a1,0x9
    80204594:	25058593          	addi	a1,a1,592 # 8020d7e0 <__func__.2034+0xf0>
    80204598:	e5840513          	addi	a0,s0,-424
    8020459c:	00002097          	auipc	ra,0x2
    802045a0:	f92080e7          	jalr	-110(ra) # 8020652e <strncpy>
    strncpy(uname.nodename, "my_node", 65);
    802045a4:	04100613          	li	a2,65
    802045a8:	00009597          	auipc	a1,0x9
    802045ac:	24858593          	addi	a1,a1,584 # 8020d7f0 <__func__.2034+0x100>
    802045b0:	e9940513          	addi	a0,s0,-359
    802045b4:	00002097          	auipc	ra,0x2
    802045b8:	f7a080e7          	jalr	-134(ra) # 8020652e <strncpy>
    strncpy(uname.release, "MIPS-OS", 65);
    802045bc:	04100613          	li	a2,65
    802045c0:	00009597          	auipc	a1,0x9
    802045c4:	23858593          	addi	a1,a1,568 # 8020d7f8 <__func__.2034+0x108>
    802045c8:	eda40513          	addi	a0,s0,-294
    802045cc:	00002097          	auipc	ra,0x2
    802045d0:	f62080e7          	jalr	-158(ra) # 8020652e <strncpy>
    strncpy(uname.version, "0.1.0", 65);
    802045d4:	04100613          	li	a2,65
    802045d8:	00009597          	auipc	a1,0x9
    802045dc:	22858593          	addi	a1,a1,552 # 8020d800 <__func__.2034+0x110>
    802045e0:	f1b40513          	addi	a0,s0,-229
    802045e4:	00002097          	auipc	ra,0x2
    802045e8:	f4a080e7          	jalr	-182(ra) # 8020652e <strncpy>
    strncpy(uname.machine, "Risc-V sifive_u", 65);
    802045ec:	04100613          	li	a2,65
    802045f0:	00009597          	auipc	a1,0x9
    802045f4:	21858593          	addi	a1,a1,536 # 8020d808 <__func__.2034+0x118>
    802045f8:	f5c40513          	addi	a0,s0,-164
    802045fc:	00002097          	auipc	ra,0x2
    80204600:	f32080e7          	jalr	-206(ra) # 8020652e <strncpy>
    strncpy(uname.domainname, "Beijing", 65);
    80204604:	04100613          	li	a2,65
    80204608:	00009597          	auipc	a1,0x9
    8020460c:	21058593          	addi	a1,a1,528 # 8020d818 <__func__.2034+0x128>
    80204610:	f9d40513          	addi	a0,s0,-99
    80204614:	00002097          	auipc	ra,0x2
    80204618:	f1a080e7          	jalr	-230(ra) # 8020652e <strncpy>
    Trapframe *tf = getHartTrapFrame();
    8020461c:	00002097          	auipc	ra,0x2
    80204620:	c3e080e7          	jalr	-962(ra) # 8020625a <getHartTrapFrame>
    80204624:	84aa                	mv	s1,a0
    copyout(myproc()->pgdir, tf->a0, (char*)&uname, sizeof(struct utsname));
    80204626:	ffffe097          	auipc	ra,0xffffe
    8020462a:	426080e7          	jalr	1062(ra) # 80202a4c <myproc>
    8020462e:	18600693          	li	a3,390
    80204632:	e5840613          	addi	a2,s0,-424
    80204636:	78ac                	ld	a1,112(s1)
    80204638:	16853503          	ld	a0,360(a0)
    8020463c:	ffffe097          	auipc	ra,0xffffe
    80204640:	e0e080e7          	jalr	-498(ra) # 8020244a <copyout>
}
    80204644:	70ba                	ld	ra,424(sp)
    80204646:	741a                	ld	s0,416(sp)
    80204648:	64fa                	ld	s1,408(sp)
    8020464a:	615d                	addi	sp,sp,432
    8020464c:	8082                	ret

000000008020464e <syscallSignProccessMask>:
void syscallSignProccessMask() {
    8020464e:	7139                	addi	sp,sp,-64
    80204650:	fc06                	sd	ra,56(sp)
    80204652:	f822                	sd	s0,48(sp)
    80204654:	f426                	sd	s1,40(sp)
    80204656:	f04a                	sd	s2,32(sp)
    80204658:	ec4e                	sd	s3,24(sp)
    8020465a:	e852                	sd	s4,16(sp)
    8020465c:	0080                	addi	s0,sp,64
    Trapframe *tf = getHartTrapFrame();
    8020465e:	00002097          	auipc	ra,0x2
    80204662:	bfc080e7          	jalr	-1028(ra) # 8020625a <getHartTrapFrame>
    80204666:	84aa                	mv	s1,a0
    u64 how = tf->a0;
    80204668:	07053903          	ld	s2,112(a0)
    copyin(myproc()->pgdir, (char*)&set, tf->a1, sizeof(SignalSet));
    8020466c:	ffffe097          	auipc	ra,0xffffe
    80204670:	3e0080e7          	jalr	992(ra) # 80202a4c <myproc>
    80204674:	46a1                	li	a3,8
    80204676:	7cb0                	ld	a2,120(s1)
    80204678:	fc840593          	addi	a1,s0,-56
    8020467c:	16853503          	ld	a0,360(a0)
    80204680:	ffffe097          	auipc	ra,0xffffe
    80204684:	d3a080e7          	jalr	-710(ra) # 802023ba <copyin>
    if (tf->a2 != 0) {
    80204688:	60dc                	ld	a5,128(s1)
    8020468a:	e38d                	bnez	a5,802046ac <syscallSignProccessMask+0x5e>
    tf->a0 = signProccessMask(how, &set);
    8020468c:	fc840593          	addi	a1,s0,-56
    80204690:	854a                	mv	a0,s2
    80204692:	00002097          	auipc	ra,0x2
    80204696:	c04080e7          	jalr	-1020(ra) # 80206296 <signProccessMask>
    8020469a:	f8a8                	sd	a0,112(s1)
}
    8020469c:	70e2                	ld	ra,56(sp)
    8020469e:	7442                	ld	s0,48(sp)
    802046a0:	74a2                	ld	s1,40(sp)
    802046a2:	7902                	ld	s2,32(sp)
    802046a4:	69e2                	ld	s3,24(sp)
    802046a6:	6a42                	ld	s4,16(sp)
    802046a8:	6121                	addi	sp,sp,64
    802046aa:	8082                	ret
        copyout(myproc()->pgdir, tf->a2, (char*)(&myproc()->blocked), sizeof(SignalSet));
    802046ac:	ffffe097          	auipc	ra,0xffffe
    802046b0:	3a0080e7          	jalr	928(ra) # 80202a4c <myproc>
    802046b4:	16853983          	ld	s3,360(a0)
    802046b8:	0804ba03          	ld	s4,128(s1)
    802046bc:	ffffe097          	auipc	ra,0xffffe
    802046c0:	390080e7          	jalr	912(ra) # 80202a4c <myproc>
    802046c4:	46a1                	li	a3,8
    802046c6:	5d850613          	addi	a2,a0,1496
    802046ca:	85d2                	mv	a1,s4
    802046cc:	854e                	mv	a0,s3
    802046ce:	ffffe097          	auipc	ra,0xffffe
    802046d2:	d7c080e7          	jalr	-644(ra) # 8020244a <copyout>
    802046d6:	bf5d                	j	8020468c <syscallSignProccessMask+0x3e>

00000000802046d8 <syscallSignalAction>:
void syscallSignalAction() {
    802046d8:	1101                	addi	sp,sp,-32
    802046da:	ec06                	sd	ra,24(sp)
    802046dc:	e822                	sd	s0,16(sp)
    802046de:	e426                	sd	s1,8(sp)
    802046e0:	1000                	addi	s0,sp,32
    Trapframe *tf = getHartTrapFrame();
    802046e2:	00002097          	auipc	ra,0x2
    802046e6:	b78080e7          	jalr	-1160(ra) # 8020625a <getHartTrapFrame>
    802046ea:	84aa                	mv	s1,a0
    tf->a0 = doSignalAction(tf->a0, tf->a1, tf->a2);
    802046ec:	6150                	ld	a2,128(a0)
    802046ee:	7d2c                	ld	a1,120(a0)
    802046f0:	5928                	lw	a0,112(a0)
    802046f2:	00002097          	auipc	ra,0x2
    802046f6:	c0c080e7          	jalr	-1012(ra) # 802062fe <doSignalAction>
    802046fa:	f8a8                	sd	a0,112(s1)
}
    802046fc:	60e2                	ld	ra,24(sp)
    802046fe:	6442                	ld	s0,16(sp)
    80204700:	64a2                	ld	s1,8(sp)
    80204702:	6105                	addi	sp,sp,32
    80204704:	8082                	ret

0000000080204706 <syscallSignalTimedWait>:
void syscallSignalTimedWait() {
    80204706:	7131                	addi	sp,sp,-192
    80204708:	fd06                	sd	ra,184(sp)
    8020470a:	f922                	sd	s0,176(sp)
    8020470c:	f526                	sd	s1,168(sp)
    8020470e:	0180                	addi	s0,sp,192
    Trapframe *tf = getHartTrapFrame();
    80204710:	00002097          	auipc	ra,0x2
    80204714:	b4a080e7          	jalr	-1206(ra) # 8020625a <getHartTrapFrame>
    80204718:	84aa                	mv	s1,a0
    if (tf->a2) {
    8020471a:	615c                	ld	a5,128(a0)
    8020471c:	e7a5                	bnez	a5,80204784 <syscallSignalTimedWait+0x7e>
    copyin(myproc()->pgdir, (char*) &signalSet, tf->a0, sizeof(SignalSet));
    8020471e:	ffffe097          	auipc	ra,0xffffe
    80204722:	32e080e7          	jalr	814(ra) # 80202a4c <myproc>
    80204726:	46a1                	li	a3,8
    80204728:	78b0                	ld	a2,112(s1)
    8020472a:	fc840593          	addi	a1,s0,-56
    8020472e:	16853503          	ld	a0,360(a0)
    80204732:	ffffe097          	auipc	ra,0xffffe
    80204736:	c88080e7          	jalr	-888(ra) # 802023ba <copyin>
    copyin(myproc()->pgdir, (char*) &info, tf->a0, sizeof(SignalInfo));
    8020473a:	ffffe097          	auipc	ra,0xffffe
    8020473e:	312080e7          	jalr	786(ra) # 80202a4c <myproc>
    80204742:	08000693          	li	a3,128
    80204746:	78b0                	ld	a2,112(s1)
    80204748:	f4840593          	addi	a1,s0,-184
    8020474c:	16853503          	ld	a0,360(a0)
    80204750:	ffffe097          	auipc	ra,0xffffe
    80204754:	c6a080e7          	jalr	-918(ra) # 802023ba <copyin>
    tf->a0 = doSignalTimedWait(&signalSet, &info, tf->a2 ? &ts: 0);
    80204758:	60dc                	ld	a5,128(s1)
    8020475a:	00f037b3          	snez	a5,a5
    8020475e:	40f007b3          	neg	a5,a5
    80204762:	fd040613          	addi	a2,s0,-48
    80204766:	8e7d                	and	a2,a2,a5
    80204768:	f4840593          	addi	a1,s0,-184
    8020476c:	fc840513          	addi	a0,s0,-56
    80204770:	00002097          	auipc	ra,0x2
    80204774:	c5a080e7          	jalr	-934(ra) # 802063ca <doSignalTimedWait>
    80204778:	f8a8                	sd	a0,112(s1)
}
    8020477a:	70ea                	ld	ra,184(sp)
    8020477c:	744a                	ld	s0,176(sp)
    8020477e:	74aa                	ld	s1,168(sp)
    80204780:	6129                	addi	sp,sp,192
    80204782:	8082                	ret
        copyin(myproc()->pgdir, (char*) &ts, tf->a2, sizeof(TimeSpec));
    80204784:	ffffe097          	auipc	ra,0xffffe
    80204788:	2c8080e7          	jalr	712(ra) # 80202a4c <myproc>
    8020478c:	46c1                	li	a3,16
    8020478e:	60d0                	ld	a2,128(s1)
    80204790:	fd040593          	addi	a1,s0,-48
    80204794:	16853503          	ld	a0,360(a0)
    80204798:	ffffe097          	auipc	ra,0xffffe
    8020479c:	c22080e7          	jalr	-990(ra) # 802023ba <copyin>
    802047a0:	bfbd                	j	8020471e <syscallSignalTimedWait+0x18>

00000000802047a2 <syscallIOControl>:

void syscallIOControl() {
    802047a2:	1101                	addi	sp,sp,-32
    802047a4:	ec06                	sd	ra,24(sp)
    802047a6:	e822                	sd	s0,16(sp)
    802047a8:	e426                	sd	s1,8(sp)
    802047aa:	1000                	addi	s0,sp,32
    Trapframe *tf = getHartTrapFrame();
    802047ac:	00002097          	auipc	ra,0x2
    802047b0:	aae080e7          	jalr	-1362(ra) # 8020625a <getHartTrapFrame>
    802047b4:	84aa                	mv	s1,a0
    printf("fd: %d, cmd: %d, argc: %d\n", tf->a0, tf->a1, tf->a2);
    802047b6:	6154                	ld	a3,128(a0)
    802047b8:	7d30                	ld	a2,120(a0)
    802047ba:	792c                	ld	a1,112(a0)
    802047bc:	00009517          	auipc	a0,0x9
    802047c0:	06450513          	addi	a0,a0,100 # 8020d820 <__func__.2034+0x130>
    802047c4:	ffffc097          	auipc	ra,0xffffc
    802047c8:	306080e7          	jalr	774(ra) # 80200aca <printf>
    tf->a0 = 0;
    802047cc:	0604b823          	sd	zero,112(s1)
}
    802047d0:	60e2                	ld	ra,24(sp)
    802047d2:	6442                	ld	s0,16(sp)
    802047d4:	64a2                	ld	s1,8(sp)
    802047d6:	6105                	addi	sp,sp,32
    802047d8:	8082                	ret

00000000802047da <setNextTimeout>:
#include <Process.h>
#include <Riscv.h>

static u32 ticks;

void setNextTimeout() {
    802047da:	1141                	addi	sp,sp,-16
    802047dc:	e422                	sd	s0,8(sp)
    802047de:	0800                	addi	s0,sp,16
    802047e0:	c0102573          	rdtime	a0
    SBI_CALL_1(SBI_SET_TIMER, r_time() + INTERVAL);
    802047e4:	000317b7          	lui	a5,0x31
    802047e8:	d4078793          	addi	a5,a5,-704 # 30d40 <_start-0x801cf2c0>
    802047ec:	953e                	add	a0,a0,a5
    802047ee:	4581                	li	a1,0
    802047f0:	4601                	li	a2,0
    802047f2:	4681                	li	a3,0
    802047f4:	4881                	li	a7,0
    802047f6:	00000073          	ecall
}
    802047fa:	6422                	ld	s0,8(sp)
    802047fc:	0141                	addi	sp,sp,16
    802047fe:	8082                	ret

0000000080204800 <timerTick>:

void timerTick() {
    80204800:	1141                	addi	sp,sp,-16
    80204802:	e406                	sd	ra,8(sp)
    80204804:	e022                	sd	s0,0(sp)
    80204806:	0800                	addi	s0,sp,16
    ticks++;
    80204808:	00419717          	auipc	a4,0x419
    8020480c:	d9870713          	addi	a4,a4,-616 # 8061d5a0 <ticks>
    80204810:	431c                	lw	a5,0(a4)
    80204812:	2785                	addiw	a5,a5,1
    80204814:	c31c                	sw	a5,0(a4)
    setNextTimeout();
    80204816:	00000097          	auipc	ra,0x0
    8020481a:	fc4080e7          	jalr	-60(ra) # 802047da <setNextTimeout>
    8020481e:	60a2                	ld	ra,8(sp)
    80204820:	6402                	ld	s0,0(sp)
    80204822:	0141                	addi	sp,sp,16
    80204824:	8082                	ret

0000000080204826 <trapInit>:
#include <Sysfile.h>
#include <Debug.h>
#include <Defs.h>
#include <exec.h>

void trapInit() {
    80204826:	1141                	addi	sp,sp,-16
    80204828:	e406                	sd	ra,8(sp)
    8020482a:	e022                	sd	s0,0(sp)
    8020482c:	0800                	addi	s0,sp,16
    printf("Trap init start...\n");
    8020482e:	00009517          	auipc	a0,0x9
    80204832:	03a50513          	addi	a0,a0,58 # 8020d868 <__func__.1877+0x18>
    80204836:	ffffc097          	auipc	ra,0xffffc
    8020483a:	294080e7          	jalr	660(ra) # 80200aca <printf>
	asm volatile("csrw stvec, %0" : : "r" (x));
    8020483e:	ffffe797          	auipc	a5,0xffffe
    80204842:	e1e78793          	addi	a5,a5,-482 # 8020265c <kernelVector>
    80204846:	10579073          	csrw	stvec,a5
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    8020484a:	100027f3          	csrr	a5,sstatus
    w_stvec((u64)kernelVector);
    w_sstatus(r_sstatus() | SSTATUS_SIE | SSTATUS_SPIE);
    8020484e:	0227e793          	ori	a5,a5,34
    asm volatile("csrw sstatus, %0" : : "r" (x));
    80204852:	10079073          	csrw	sstatus,a5
    asm volatile("csrw sip, %0" : : "r" (x));
    80204856:	4781                	li	a5,0
    80204858:	14479073          	csrw	sip,a5
    asm volatile("csrr %0, sie" : "=r" (x) );
    8020485c:	104027f3          	csrr	a5,sie
    // setNextTimeout();
    w_sip(0); //todo
    w_sie(r_sie() | SIE_SEIE | SIE_SSIE | SIE_STIE);
    80204860:	2227e793          	ori	a5,a5,546
	asm volatile("csrw sie, %0" : : "r" (x));
    80204864:	10479073          	csrw	sie,a5
    printf("Trap init finish!\n");
    80204868:	00009517          	auipc	a0,0x9
    8020486c:	01850513          	addi	a0,a0,24 # 8020d880 <__func__.1877+0x30>
    80204870:	ffffc097          	auipc	ra,0xffffc
    80204874:	25a080e7          	jalr	602(ra) # 80200aca <printf>
}
    80204878:	60a2                	ld	ra,8(sp)
    8020487a:	6402                	ld	s0,0(sp)
    8020487c:	0141                	addi	sp,sp,16
    8020487e:	8082                	ret

0000000080204880 <trapDevice>:
	asm volatile("csrr %0, scause" : "=r" (x) );
    80204880:	142027f3          	csrr	a5,scause
    if ((scause & SCAUSE_INTERRUPT) &&
    ((scause & SCAUSE_EXCEPTION_CODE) == SCAUSE_SUPERVISOR_TIMER)) {
        timerTick();
        return TIMER_INTERRUPT;
    }
    return UNKNOWN_DEVICE;
    80204884:	4501                	li	a0,0
    if ((scause & SCAUSE_INTERRUPT) && 
    80204886:	0007c363          	bltz	a5,8020488c <trapDevice+0xc>
}
    8020488a:	8082                	ret
int trapDevice() {
    8020488c:	1101                	addi	sp,sp,-32
    8020488e:	ec06                	sd	ra,24(sp)
    80204890:	e822                	sd	s0,16(sp)
    80204892:	e426                	sd	s1,8(sp)
    80204894:	1000                	addi	s0,sp,32
    ((scause & SCAUSE_EXCEPTION_CODE) == SCAUSE_SUPERVISOR_EXTERNAL)) {
    80204896:	0786                	slli	a5,a5,0x1
    80204898:	8385                	srli	a5,a5,0x1
    if ((scause & SCAUSE_INTERRUPT) && 
    8020489a:	4725                	li	a4,9
    8020489c:	00e78b63          	beq	a5,a4,802048b2 <trapDevice+0x32>
    if ((scause & SCAUSE_INTERRUPT) &&
    802048a0:	4715                	li	a4,5
    return UNKNOWN_DEVICE;
    802048a2:	4501                	li	a0,0
    if ((scause & SCAUSE_INTERRUPT) &&
    802048a4:	08e78263          	beq	a5,a4,80204928 <trapDevice+0xa8>
}
    802048a8:	60e2                	ld	ra,24(sp)
    802048aa:	6442                	ld	s0,16(sp)
    802048ac:	64a2                	ld	s1,8(sp)
    802048ae:	6105                	addi	sp,sp,32
    802048b0:	8082                	ret

// read and write tp, the thread pointer, which holds
// this core's hartid (core number), the index into cpus[].
static inline u64 r_tp() {
	u64 x;
	asm volatile("mv %0, tp" : "=r" (x) );
    802048b2:	8792                	mv	a5,tp
void trapframeDump(Trapframe*);

inline static u32 interruptServed() {
    int hart = r_tp();
    #ifndef QEMU
    return *(u32*)PLIC_MCLAIM(hart);
    802048b4:	00d7971b          	slliw	a4,a5,0xd
    802048b8:	1f8617b7          	lui	a5,0x1f861
    802048bc:	07a6                	slli	a5,a5,0x9
    802048be:	97ba                	add	a5,a5,a4
    802048c0:	43c4                	lw	s1,4(a5)
        int irq = interruptServed();
    802048c2:	0004871b          	sext.w	a4,s1
        if (irq == UART_IRQ) {
    802048c6:	02100793          	li	a5,33
    802048ca:	02f70963          	beq	a4,a5,802048fc <trapDevice+0x7c>
        } else if (irq == DISK_IRQ) {
    802048ce:	47ed                	li	a5,27
    802048d0:	02f70d63          	beq	a4,a5,8020490a <trapDevice+0x8a>
        return SOFTWARE_TRAP;
    802048d4:	4505                	li	a0,1
        } else if (irq) {
    802048d6:	db69                	beqz	a4,802048a8 <trapDevice+0x28>
            panic("unexpected interrupt irq = %d\n", irq);
    802048d8:	00009697          	auipc	a3,0x9
    802048dc:	fc068693          	addi	a3,a3,-64 # 8020d898 <__func__.1877+0x48>
    802048e0:	00009617          	auipc	a2,0x9
    802048e4:	27060613          	addi	a2,a2,624 # 8020db50 <__func__.1842>
    802048e8:	02b00593          	li	a1,43
    802048ec:	00009517          	auipc	a0,0x9
    802048f0:	fcc50513          	addi	a0,a0,-52 # 8020d8b8 <__func__.1877+0x68>
    802048f4:	ffffc097          	auipc	ra,0xffffc
    802048f8:	262080e7          	jalr	610(ra) # 80200b56 <_panic_>
            int c = getchar();
    802048fc:	ffffc097          	auipc	ra,0xffffc
    80204900:	a48080e7          	jalr	-1464(ra) # 80200344 <getchar>
            if (c != -1) {
    80204904:	57fd                	li	a5,-1
    80204906:	00f51c63          	bne	a0,a5,8020491e <trapDevice+0x9e>
    8020490a:	8792                	mv	a5,tp
}

inline static void interruptCompleted(int irq) {
    int hart = r_tp();
    #ifndef QEMU
    *(u32*)PLIC_MCLAIM(hart) = irq;
    8020490c:	00d7971b          	slliw	a4,a5,0xd
    80204910:	1f8617b7          	lui	a5,0x1f861
    80204914:	07a6                	slli	a5,a5,0x9
    80204916:	97ba                	add	a5,a5,a4
    80204918:	c3c4                	sw	s1,4(a5)
        return SOFTWARE_TRAP;
    8020491a:	4505                	li	a0,1
    #else
    *(u32*)PLIC_SCLAIM(hart) = irq;
    #endif
}
    8020491c:	b771                	j	802048a8 <trapDevice+0x28>
                consoleInterrupt(c);
    8020491e:	ffffc097          	auipc	ra,0xffffc
    80204922:	9f2080e7          	jalr	-1550(ra) # 80200310 <consoleInterrupt>
    80204926:	b7d5                	j	8020490a <trapDevice+0x8a>
        timerTick();
    80204928:	00000097          	auipc	ra,0x0
    8020492c:	ed8080e7          	jalr	-296(ra) # 80204800 <timerTick>
        return TIMER_INTERRUPT;
    80204930:	4509                	li	a0,2
    80204932:	bf9d                	j	802048a8 <trapDevice+0x28>

0000000080204934 <userTrapReturn>:
    //printf("leave kernel %s %d\n", __FILE__, __LINE__);
    Process *p = myproc();
    p->processTime.lastUserTime = r_time();
}

void userTrapReturn() {
    80204934:	7139                	addi	sp,sp,-64
    80204936:	fc06                	sd	ra,56(sp)
    80204938:	f822                	sd	s0,48(sp)
    8020493a:	f426                	sd	s1,40(sp)
    8020493c:	f04a                	sd	s2,32(sp)
    8020493e:	ec4e                	sd	s3,24(sp)
    80204940:	e852                	sd	s4,16(sp)
    80204942:	0080                	addi	s0,sp,64
    Process *p = myproc();
    80204944:	ffffe097          	auipc	ra,0xffffe
    80204948:	108080e7          	jalr	264(ra) # 80202a4c <myproc>
	asm volatile("rdtime %0" : "=r" (x) );
    8020494c:	c01027f3          	rdtime	a5
    p->processTime.lastUserTime = r_time();
    80204950:	12f53023          	sd	a5,288(a0)
    userProcessCpuTimeBegin();
    extern char trampoline[];
    w_stvec(TRAMPOLINE_BASE + ((u64)userVector - (u64)trampoline));
    80204954:	00006a17          	auipc	s4,0x6
    80204958:	6aca0a13          	addi	s4,s4,1708 # 8020b000 <_trampoline>
    8020495c:	02000937          	lui	s2,0x2000
    80204960:	197d                	addi	s2,s2,-1
    80204962:	0936                	slli	s2,s2,0xd
    80204964:	00006797          	auipc	a5,0x6
    80204968:	69c78793          	addi	a5,a5,1692 # 8020b000 <_trampoline>
    8020496c:	97ca                	add	a5,a5,s2
    8020496e:	414787b3          	sub	a5,a5,s4
	asm volatile("csrw stvec, %0" : : "r" (x));
    80204972:	10579073          	csrw	stvec,a5
    asm volatile("mv %0, tp" : "=r" (x) );
    80204976:	8992                	mv	s3,tp
    int hartId = r_hartid();

    extern Process *currentProcess[HART_TOTAL_NUMBER];
    Trapframe* trapframe = getHartTrapFrame();
    80204978:	00002097          	auipc	ra,0x2
    8020497c:	8e2080e7          	jalr	-1822(ra) # 8020625a <getHartTrapFrame>
    80204980:	84aa                	mv	s1,a0

    trapframe->kernelSp = getProcessTopSp(myproc());
    80204982:	ffffe097          	auipc	ra,0xffffe
    80204986:	0ca080e7          	jalr	202(ra) # 80202a4c <myproc>
    8020498a:	ffffe097          	auipc	ra,0xffffe
    8020498e:	11e080e7          	jalr	286(ra) # 80202aa8 <getProcessTopSp>
    80204992:	e488                	sd	a0,8(s1)
    trapframe->trapHandler = (u64)userTrap;
    80204994:	00000797          	auipc	a5,0x0
    80204998:	24a78793          	addi	a5,a5,586 # 80204bde <userTrap>
    8020499c:	e89c                	sd	a5,16(s1)
	asm volatile("mv %0, tp" : "=r" (x) );
    8020499e:	8792                	mv	a5,tp
    trapframe->kernelHartId = r_tp();
    802049a0:	f09c                	sd	a5,32(s1)
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    802049a2:	100027f3          	csrr	a5,sstatus

    //bcopy(&(currentProcess->trapframe), trapframe, sizeof(Trapframe));

    u64 sstatus = r_sstatus();
    sstatus &= ~SSTATUS_SPP;
    802049a6:	eff7f793          	andi	a5,a5,-257
    sstatus |= SSTATUS_SPIE;
    802049aa:	0207e793          	ori	a5,a5,32
    asm volatile("csrw sstatus, %0" : : "r" (x));
    802049ae:	10079073          	csrw	sstatus,a5
    w_sstatus(sstatus);
    u64 satp = MAKE_SATP(currentProcess[hartId]->pgdir);
    802049b2:	2981                	sext.w	s3,s3
    802049b4:	098e                	slli	s3,s3,0x3
    802049b6:	0029f797          	auipc	a5,0x29f
    802049ba:	afa78793          	addi	a5,a5,-1286 # 804a34b0 <currentProcess>
    802049be:	99be                	add	s3,s3,a5
    802049c0:	0009b783          	ld	a5,0(s3) # 1000 <_start-0x801ff000>
    802049c4:	1687b983          	ld	s3,360(a5)
    u64 fn = TRAMPOLINE_BASE + ((u64)userReturn - (u64)trampoline);
    802049c8:	00006797          	auipc	a5,0x6
    802049cc:	6d078793          	addi	a5,a5,1744 # 8020b098 <userReturn>
    802049d0:	993e                	add	s2,s2,a5
    802049d2:	41490933          	sub	s2,s2,s4
    u64* pte;
    u64 pa = pageLookup(currentProcess[hartId]->pgdir, USER_STACK_TOP - PAGE_SIZE, &pte);
    802049d6:	fc840613          	addi	a2,s0,-56
    802049da:	040005b7          	lui	a1,0x4000
    802049de:	15f5                	addi	a1,a1,-3
    802049e0:	05b2                	slli	a1,a1,0xc
    802049e2:	854e                	mv	a0,s3
    802049e4:	ffffd097          	auipc	ra,0xffffd
    802049e8:	42c080e7          	jalr	1068(ra) # 80201e10 <pageLookup>
    u64 satp = MAKE_SATP(currentProcess[hartId]->pgdir);
    802049ec:	00c9d993          	srli	s3,s3,0xc
        use(tem);
#endif
    }
    
    // printf("return to user!\n");
    ((void(*)(u64, u64))fn)((u64)trapframe, satp);
    802049f0:	55fd                	li	a1,-1
    802049f2:	15fe                	slli	a1,a1,0x3f
    802049f4:	00b9e5b3          	or	a1,s3,a1
    802049f8:	8526                	mv	a0,s1
    802049fa:	9902                	jalr	s2
}
    802049fc:	70e2                	ld	ra,56(sp)
    802049fe:	7442                	ld	s0,48(sp)
    80204a00:	74a2                	ld	s1,40(sp)
    80204a02:	7902                	ld	s2,32(sp)
    80204a04:	69e2                	ld	s3,24(sp)
    80204a06:	6a42                	ld	s4,16(sp)
    80204a08:	6121                	addi	sp,sp,64
    80204a0a:	8082                	ret

0000000080204a0c <trapframeDump>:

void trapframeDump(Trapframe *tf)
{
    80204a0c:	7111                	addi	sp,sp,-256
    80204a0e:	fd86                	sd	ra,248(sp)
    80204a10:	f9a2                	sd	s0,240(sp)
    80204a12:	0200                	addi	s0,sp,256
    printf(" a0: %lx\n \
    80204a14:	711c                	ld	a5,32(a0)
    80204a16:	f1be                	sd	a5,224(sp)
    80204a18:	691c                	ld	a5,16(a0)
    80204a1a:	edbe                	sd	a5,216(sp)
    80204a1c:	611c                	ld	a5,0(a0)
    80204a1e:	e9be                	sd	a5,208(sp)
    80204a20:	651c                	ld	a5,8(a0)
    80204a22:	e5be                	sd	a5,200(sp)
    80204a24:	6d1c                	ld	a5,24(a0)
    80204a26:	e1be                	sd	a5,192(sp)
    80204a28:	613c                	ld	a5,64(a0)
    80204a2a:	fd3e                	sd	a5,184(sp)
    80204a2c:	7d1c                	ld	a5,56(a0)
    80204a2e:	f93e                	sd	a5,176(sp)
    80204a30:	791c                	ld	a5,48(a0)
    80204a32:	f53e                	sd	a5,168(sp)
    80204a34:	751c                	ld	a5,40(a0)
    80204a36:	f13e                	sd	a5,160(sp)
    80204a38:	7d7c                	ld	a5,248(a0)
    80204a3a:	ed3e                	sd	a5,152(sp)
    80204a3c:	797c                	ld	a5,240(a0)
    80204a3e:	e93e                	sd	a5,144(sp)
    80204a40:	757c                	ld	a5,232(a0)
    80204a42:	e53e                	sd	a5,136(sp)
    80204a44:	717c                	ld	a5,224(a0)
    80204a46:	e13e                	sd	a5,128(sp)
    80204a48:	6d7c                	ld	a5,216(a0)
    80204a4a:	fcbe                	sd	a5,120(sp)
    80204a4c:	697c                	ld	a5,208(a0)
    80204a4e:	f8be                	sd	a5,112(sp)
    80204a50:	657c                	ld	a5,200(a0)
    80204a52:	f4be                	sd	a5,104(sp)
    80204a54:	617c                	ld	a5,192(a0)
    80204a56:	f0be                	sd	a5,96(sp)
    80204a58:	7d5c                	ld	a5,184(a0)
    80204a5a:	ecbe                	sd	a5,88(sp)
    80204a5c:	795c                	ld	a5,176(a0)
    80204a5e:	e8be                	sd	a5,80(sp)
    80204a60:	753c                	ld	a5,104(a0)
    80204a62:	e4be                	sd	a5,72(sp)
    80204a64:	713c                	ld	a5,96(a0)
    80204a66:	e0be                	sd	a5,64(sp)
    80204a68:	11853783          	ld	a5,280(a0)
    80204a6c:	fc3e                	sd	a5,56(sp)
    80204a6e:	11053783          	ld	a5,272(a0)
    80204a72:	f83e                	sd	a5,48(sp)
    80204a74:	10853783          	ld	a5,264(a0)
    80204a78:	f43e                	sd	a5,40(sp)
    80204a7a:	10053783          	ld	a5,256(a0)
    80204a7e:	f03e                	sd	a5,32(sp)
    80204a80:	6d3c                	ld	a5,88(a0)
    80204a82:	ec3e                	sd	a5,24(sp)
    80204a84:	693c                	ld	a5,80(a0)
    80204a86:	e83e                	sd	a5,16(sp)
    80204a88:	653c                	ld	a5,72(a0)
    80204a8a:	e43e                	sd	a5,8(sp)
    80204a8c:	755c                	ld	a5,168(a0)
    80204a8e:	e03e                	sd	a5,0(sp)
    80204a90:	0a053883          	ld	a7,160(a0)
    80204a94:	09853803          	ld	a6,152(a0)
    80204a98:	695c                	ld	a5,144(a0)
    80204a9a:	6558                	ld	a4,136(a0)
    80204a9c:	6154                	ld	a3,128(a0)
    80204a9e:	7d30                	ld	a2,120(a0)
    80204aa0:	792c                	ld	a1,112(a0)
    80204aa2:	00009517          	auipc	a0,0x9
    80204aa6:	e1e50513          	addi	a0,a0,-482 # 8020d8c0 <__func__.1877+0x70>
    80204aaa:	ffffc097          	auipc	ra,0xffffc
    80204aae:	020080e7          	jalr	32(ra) # 80200aca <printf>
            tf->s0, tf->s1, tf->s2, tf->s3, tf->s4,
            tf->s5, tf->s6, tf->s7, tf->s8, tf->s9,
            tf->s10, tf->s11, tf->ra, tf->sp, tf->gp,
            tf->tp, tf->epc, tf->kernelSp, tf->kernelSatp,
            tf->trapHandler, tf->kernelHartId);
}
    80204ab2:	70ee                	ld	ra,248(sp)
    80204ab4:	744e                	ld	s0,240(sp)
    80204ab6:	6111                	addi	sp,sp,256
    80204ab8:	8082                	ret

0000000080204aba <kernelTrap>:
void kernelTrap() {
    80204aba:	7139                	addi	sp,sp,-64
    80204abc:	fc06                	sd	ra,56(sp)
    80204abe:	f822                	sd	s0,48(sp)
    80204ac0:	f426                	sd	s1,40(sp)
    80204ac2:	f04a                	sd	s2,32(sp)
    80204ac4:	ec4e                	sd	s3,24(sp)
    80204ac6:	e852                	sd	s4,16(sp)
    80204ac8:	0080                	addi	s0,sp,64
    asm volatile("csrr %0, sepc" : "=r" (x) );
    80204aca:	14102973          	csrr	s2,sepc
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80204ace:	100024f3          	csrr	s1,sstatus
	asm volatile("csrr %0, scause" : "=r" (x) );
    80204ad2:	14202a73          	csrr	s4,scause
    asm volatile("mv %0, tp" : "=r" (x) );
    80204ad6:	8992                	mv	s3,tp
	asm volatile("csrr %0, stval" : "=r" (x) );
    80204ad8:	143027f3          	csrr	a5,stval
    printf("[Kernel Trap] hartId is %lx, status is %lx, spec is %lx, cause is %lx, stval is %lx\n", hartId, sstatus, sepc, scause, r_stval());
    80204adc:	8752                	mv	a4,s4
    80204ade:	86ca                	mv	a3,s2
    80204ae0:	8626                	mv	a2,s1
    80204ae2:	85ce                	mv	a1,s3
    80204ae4:	00009517          	auipc	a0,0x9
    80204ae8:	f4c50513          	addi	a0,a0,-180 # 8020da30 <__func__.1877+0x1e0>
    80204aec:	ffffc097          	auipc	ra,0xffffc
    80204af0:	fde080e7          	jalr	-34(ra) # 80200aca <printf>
    Trapframe* trapframe = getHartTrapFrame();
    80204af4:	00001097          	auipc	ra,0x1
    80204af8:	766080e7          	jalr	1894(ra) # 8020625a <getHartTrapFrame>
    trapframeDump(trapframe);
    80204afc:	00000097          	auipc	ra,0x0
    80204b00:	f10080e7          	jalr	-240(ra) # 80204a0c <trapframeDump>
    if (!(sstatus & SSTATUS_SPP)) {
    80204b04:	1004f793          	andi	a5,s1,256
    80204b08:	cb8d                	beqz	a5,80204b3a <kernelTrap+0x80>
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80204b0a:	100027f3          	csrr	a5,sstatus
	return (x & SSTATUS_SIE) != 0;
    80204b0e:	8b89                	andi	a5,a5,2
    if (intr_get()) {
    80204b10:	e7b9                	bnez	a5,80204b5e <kernelTrap+0xa4>
    int device = trapDevice();
    80204b12:	00000097          	auipc	ra,0x0
    80204b16:	d6e080e7          	jalr	-658(ra) # 80204880 <trapDevice>
    if (device == UNKNOWN_DEVICE) {
    80204b1a:	c525                	beqz	a0,80204b82 <kernelTrap+0xc8>
    if (device == TIMER_INTERRUPT) {
    80204b1c:	4789                	li	a5,2
    80204b1e:	0af50b63          	beq	a0,a5,80204bd4 <kernelTrap+0x11a>
  	asm volatile("csrw sepc, %0" : : "r" (x));
    80204b22:	14191073          	csrw	sepc,s2
    asm volatile("csrw sstatus, %0" : : "r" (x));
    80204b26:	10049073          	csrw	sstatus,s1
}
    80204b2a:	70e2                	ld	ra,56(sp)
    80204b2c:	7442                	ld	s0,48(sp)
    80204b2e:	74a2                	ld	s1,40(sp)
    80204b30:	7902                	ld	s2,32(sp)
    80204b32:	69e2                	ld	s3,24(sp)
    80204b34:	6a42                	ld	s4,16(sp)
    80204b36:	6121                	addi	sp,sp,64
    80204b38:	8082                	ret
        panic("kernel trap not from supervisor mode");
    80204b3a:	00009697          	auipc	a3,0x9
    80204b3e:	f4e68693          	addi	a3,a3,-178 # 8020da88 <__func__.1877+0x238>
    80204b42:	00009617          	auipc	a2,0x9
    80204b46:	01e60613          	addi	a2,a2,30 # 8020db60 <__func__.1851>
    80204b4a:	04d00593          	li	a1,77
    80204b4e:	00009517          	auipc	a0,0x9
    80204b52:	d6a50513          	addi	a0,a0,-662 # 8020d8b8 <__func__.1877+0x68>
    80204b56:	ffffc097          	auipc	ra,0xffffc
    80204b5a:	000080e7          	jalr	ra # 80200b56 <_panic_>
        panic("kernel trap while interrupts enbled");
    80204b5e:	00009697          	auipc	a3,0x9
    80204b62:	f5268693          	addi	a3,a3,-174 # 8020dab0 <__func__.1877+0x260>
    80204b66:	00009617          	auipc	a2,0x9
    80204b6a:	ffa60613          	addi	a2,a2,-6 # 8020db60 <__func__.1851>
    80204b6e:	05000593          	li	a1,80
    80204b72:	00009517          	auipc	a0,0x9
    80204b76:	d4650513          	addi	a0,a0,-698 # 8020d8b8 <__func__.1877+0x68>
    80204b7a:	ffffc097          	auipc	ra,0xffffc
    80204b7e:	fdc080e7          	jalr	-36(ra) # 80200b56 <_panic_>
	asm volatile("csrr %0, stval" : "=r" (x) );
    80204b82:	143025f3          	csrr	a1,stval
        int pa = pageLookup(currentProcess[hartId]->pgdir, r_stval(), &pte);
    80204b86:	098e                	slli	s3,s3,0x3
    80204b88:	0029f797          	auipc	a5,0x29f
    80204b8c:	92878793          	addi	a5,a5,-1752 # 804a34b0 <currentProcess>
    80204b90:	99be                	add	s3,s3,a5
    80204b92:	0009b783          	ld	a5,0(s3)
    80204b96:	fc840613          	addi	a2,s0,-56
    80204b9a:	1687b503          	ld	a0,360(a5)
    80204b9e:	ffffd097          	auipc	ra,0xffffd
    80204ba2:	272080e7          	jalr	626(ra) # 80201e10 <pageLookup>
    80204ba6:	143027f3          	csrr	a5,stval
        panic("unhandled error %d,  %lx, %lx\n", scause, r_stval(), pa);
    80204baa:	0005081b          	sext.w	a6,a0
    80204bae:	8752                	mv	a4,s4
    80204bb0:	00009697          	auipc	a3,0x9
    80204bb4:	f2868693          	addi	a3,a3,-216 # 8020dad8 <__func__.1877+0x288>
    80204bb8:	00009617          	auipc	a2,0x9
    80204bbc:	fa860613          	addi	a2,a2,-88 # 8020db60 <__func__.1851>
    80204bc0:	05700593          	li	a1,87
    80204bc4:	00009517          	auipc	a0,0x9
    80204bc8:	cf450513          	addi	a0,a0,-780 # 8020d8b8 <__func__.1877+0x68>
    80204bcc:	ffffc097          	auipc	ra,0xffffc
    80204bd0:	f8a080e7          	jalr	-118(ra) # 80200b56 <_panic_>
        yield();
    80204bd4:	ffffe097          	auipc	ra,0xffffe
    80204bd8:	7ae080e7          	jalr	1966(ra) # 80203382 <yield>
    80204bdc:	b799                	j	80204b22 <kernelTrap+0x68>

0000000080204bde <userTrap>:
void userTrap() {
    80204bde:	7139                	addi	sp,sp,-64
    80204be0:	fc06                	sd	ra,56(sp)
    80204be2:	f822                	sd	s0,48(sp)
    80204be4:	f426                	sd	s1,40(sp)
    80204be6:	f04a                	sd	s2,32(sp)
    80204be8:	ec4e                	sd	s3,24(sp)
    80204bea:	0080                	addi	s0,sp,64
    asm volatile("csrr %0, sepc" : "=r" (x) );
    80204bec:	141027f3          	csrr	a5,sepc
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80204bf0:	100027f3          	csrr	a5,sstatus
	asm volatile("csrr %0, scause" : "=r" (x) );
    80204bf4:	142024f3          	csrr	s1,scause
    asm volatile("mv %0, tp" : "=r" (x) );
    80204bf8:	8912                	mv	s2,tp
    if (sstatus & SSTATUS_SPP) {
    80204bfa:	1007f793          	andi	a5,a5,256
    80204bfe:	e3c9                	bnez	a5,80204c80 <userTrap+0xa2>
	asm volatile("csrw stvec, %0" : : "r" (x));
    80204c00:	ffffe797          	auipc	a5,0xffffe
    80204c04:	a5c78793          	addi	a5,a5,-1444 # 8020265c <kernelVector>
    80204c08:	10579073          	csrw	stvec,a5
    Process *p = myproc();
    80204c0c:	ffffe097          	auipc	ra,0xffffe
    80204c10:	e40080e7          	jalr	-448(ra) # 80202a4c <myproc>
	asm volatile("rdtime %0" : "=r" (x) );
    80204c14:	c01027f3          	rdtime	a5
    p->cpuTime.user += currentTime - p->processTime.lastUserTime;
    80204c18:	12053703          	ld	a4,288(a0)
    80204c1c:	40e78733          	sub	a4,a5,a4
    80204c20:	13053783          	ld	a5,304(a0)
    80204c24:	97ba                	add	a5,a5,a4
    80204c26:	12f53823          	sd	a5,304(a0)
    Trapframe* trapframe = getHartTrapFrame();
    80204c2a:	00001097          	auipc	ra,0x1
    80204c2e:	630080e7          	jalr	1584(ra) # 8020625a <getHartTrapFrame>
    80204c32:	89aa                	mv	s3,a0
    if (scause & SCAUSE_INTERRUPT) {
    80204c34:	0604c863          	bltz	s1,80204ca4 <userTrap+0xc6>
        kernelProcessCpuTimeBegin();
    80204c38:	fffff097          	auipc	ra,0xfffff
    80204c3c:	c12080e7          	jalr	-1006(ra) # 8020384a <kernelProcessCpuTimeBegin>
        u64 *pte = NULL;
    80204c40:	fc043423          	sd	zero,-56(s0)
        switch (scause & SCAUSE_EXCEPTION_CODE)
    80204c44:	00149713          	slli	a4,s1,0x1
    80204c48:	8305                	srli	a4,a4,0x1
    80204c4a:	57ed                	li	a5,-5
    80204c4c:	8385                	srli	a5,a5,0x1
    80204c4e:	8fe5                	and	a5,a5,s1
    80204c50:	46b5                	li	a3,13
    80204c52:	0ad78263          	beq	a5,a3,80204cf6 <userTrap+0x118>
    80204c56:	47a1                	li	a5,8
    80204c58:	14f71863          	bne	a4,a5,80204da8 <userTrap+0x1ca>
            trapframe->epc += 4;
    80204c5c:	0189b783          	ld	a5,24(s3)
    80204c60:	0791                	addi	a5,a5,4
    80204c62:	00f9bc23          	sd	a5,24(s3)
            if (!syscallVector[trapframe->a7]) {
    80204c66:	0a89b703          	ld	a4,168(s3)
    80204c6a:	00371693          	slli	a3,a4,0x3
    80204c6e:	0000a797          	auipc	a5,0xa
    80204c72:	39278793          	addi	a5,a5,914 # 8020f000 <syscallVector>
    80204c76:	97b6                	add	a5,a5,a3
    80204c78:	639c                	ld	a5,0(a5)
    80204c7a:	cfa1                	beqz	a5,80204cd2 <userTrap+0xf4>
            syscallVector[trapframe->a7]();
    80204c7c:	9782                	jalr	a5
            break;
    80204c7e:	a81d                	j	80204cb4 <userTrap+0xd6>
        panic("usertrap: not from user mode\n");
    80204c80:	00009697          	auipc	a3,0x9
    80204c84:	e7868693          	addi	a3,a3,-392 # 8020daf8 <__func__.1877+0x2a8>
    80204c88:	00009617          	auipc	a2,0x9
    80204c8c:	ee860613          	addi	a2,a2,-280 # 8020db70 <__func__.1866>
    80204c90:	07500593          	li	a1,117
    80204c94:	00009517          	auipc	a0,0x9
    80204c98:	c2450513          	addi	a0,a0,-988 # 8020d8b8 <__func__.1877+0x68>
    80204c9c:	ffffc097          	auipc	ra,0xffffc
    80204ca0:	eba080e7          	jalr	-326(ra) # 80200b56 <_panic_>
        trapDevice();
    80204ca4:	00000097          	auipc	ra,0x0
    80204ca8:	bdc080e7          	jalr	-1060(ra) # 80204880 <trapDevice>
        yield();
    80204cac:	ffffe097          	auipc	ra,0xffffe
    80204cb0:	6d6080e7          	jalr	1750(ra) # 80203382 <yield>
    kernelProcessCpuTimeEnd();
    80204cb4:	fffff097          	auipc	ra,0xfffff
    80204cb8:	bc4080e7          	jalr	-1084(ra) # 80203878 <kernelProcessCpuTimeEnd>
    userTrapReturn();
    80204cbc:	00000097          	auipc	ra,0x0
    80204cc0:	c78080e7          	jalr	-904(ra) # 80204934 <userTrapReturn>
}
    80204cc4:	70e2                	ld	ra,56(sp)
    80204cc6:	7442                	ld	s0,48(sp)
    80204cc8:	74a2                	ld	s1,40(sp)
    80204cca:	7902                	ld	s2,32(sp)
    80204ccc:	69e2                	ld	s3,24(sp)
    80204cce:	6121                	addi	sp,sp,64
    80204cd0:	8082                	ret
                panic("unknown-syscall: %d\n", trapframe->a7);
    80204cd2:	00009697          	auipc	a3,0x9
    80204cd6:	e4668693          	addi	a3,a3,-442 # 8020db18 <__func__.1877+0x2c8>
    80204cda:	00009617          	auipc	a2,0x9
    80204cde:	e9660613          	addi	a2,a2,-362 # 8020db70 <__func__.1866>
    80204ce2:	08a00593          	li	a1,138
    80204ce6:	00009517          	auipc	a0,0x9
    80204cea:	bd250513          	addi	a0,a0,-1070 # 8020d8b8 <__func__.1877+0x68>
    80204cee:	ffffc097          	auipc	ra,0xffffc
    80204cf2:	e68080e7          	jalr	-408(ra) # 80200b56 <_panic_>
	asm volatile("csrr %0, stval" : "=r" (x) );
    80204cf6:	143025f3          	csrr	a1,stval
            pa = pageLookup(currentProcess[hartId]->pgdir, r_stval(), &pte);
    80204cfa:	00391713          	slli	a4,s2,0x3
    80204cfe:	0029e797          	auipc	a5,0x29e
    80204d02:	7b278793          	addi	a5,a5,1970 # 804a34b0 <currentProcess>
    80204d06:	97ba                	add	a5,a5,a4
    80204d08:	639c                	ld	a5,0(a5)
    80204d0a:	fc840613          	addi	a2,s0,-56
    80204d0e:	1687b503          	ld	a0,360(a5)
    80204d12:	ffffd097          	auipc	ra,0xffffd
    80204d16:	0fe080e7          	jalr	254(ra) # 80201e10 <pageLookup>
            if (pa == 0) {
    80204d1a:	c905                	beqz	a0,80204d4a <userTrap+0x16c>
            } else if (*pte & PTE_COW) {
    80204d1c:	fc843783          	ld	a5,-56(s0)
    80204d20:	6390                	ld	a2,0(a5)
    80204d22:	10067793          	andi	a5,a2,256
    80204d26:	c3b9                	beqz	a5,80204d6c <userTrap+0x18e>
    80204d28:	143025f3          	csrr	a1,stval
                cowHandler(currentProcess[hartId]->pgdir, r_stval());
    80204d2c:	090e                	slli	s2,s2,0x3
    80204d2e:	0029e797          	auipc	a5,0x29e
    80204d32:	78278793          	addi	a5,a5,1922 # 804a34b0 <currentProcess>
    80204d36:	993e                	add	s2,s2,a5
    80204d38:	00093783          	ld	a5,0(s2) # 2000000 <_start-0x7e200000>
    80204d3c:	1687b503          	ld	a0,360(a5)
    80204d40:	ffffd097          	auipc	ra,0xffffd
    80204d44:	4a6080e7          	jalr	1190(ra) # 802021e6 <cowHandler>
    80204d48:	b7b5                	j	80204cb4 <userTrap+0xd6>
    80204d4a:	143025f3          	csrr	a1,stval
                pageout(currentProcess[hartId]->pgdir, r_stval());
    80204d4e:	090e                	slli	s2,s2,0x3
    80204d50:	0029e797          	auipc	a5,0x29e
    80204d54:	76078793          	addi	a5,a5,1888 # 804a34b0 <currentProcess>
    80204d58:	993e                	add	s2,s2,a5
    80204d5a:	00093783          	ld	a5,0(s2)
    80204d5e:	1687b503          	ld	a0,360(a5)
    80204d62:	ffffd097          	auipc	ra,0xffffd
    80204d66:	39a080e7          	jalr	922(ra) # 802020fc <pageout>
    80204d6a:	b7a9                	j	80204cb4 <userTrap+0xd6>
    80204d6c:	143025f3          	csrr	a1,stval
                printf("addr = %lx, pte = %x",r_stval(), (*pte)&1023);
    80204d70:	3ff67613          	andi	a2,a2,1023
    80204d74:	00009517          	auipc	a0,0x9
    80204d78:	dbc50513          	addi	a0,a0,-580 # 8020db30 <__func__.1877+0x2e0>
    80204d7c:	ffffc097          	auipc	ra,0xffffc
    80204d80:	d4e080e7          	jalr	-690(ra) # 80200aca <printf>
                panic("unknown");
    80204d84:	00009697          	auipc	a3,0x9
    80204d88:	dc468693          	addi	a3,a3,-572 # 8020db48 <__func__.1877+0x2f8>
    80204d8c:	00009617          	auipc	a2,0x9
    80204d90:	de460613          	addi	a2,a2,-540 # 8020db70 <__func__.1866>
    80204d94:	09700593          	li	a1,151
    80204d98:	00009517          	auipc	a0,0x9
    80204d9c:	b2050513          	addi	a0,a0,-1248 # 8020d8b8 <__func__.1877+0x68>
    80204da0:	ffffc097          	auipc	ra,0xffffc
    80204da4:	db6080e7          	jalr	-586(ra) # 80200b56 <_panic_>
            trapframeDump(trapframe);
    80204da8:	854e                	mv	a0,s3
    80204daa:	00000097          	auipc	ra,0x0
    80204dae:	c62080e7          	jalr	-926(ra) # 80204a0c <trapframeDump>
    80204db2:	143025f3          	csrr	a1,stval
            pageLookup(currentProcess[hartId]->pgdir, r_stval(), &pte);
    80204db6:	090e                	slli	s2,s2,0x3
    80204db8:	0029e797          	auipc	a5,0x29e
    80204dbc:	6f878793          	addi	a5,a5,1784 # 804a34b0 <currentProcess>
    80204dc0:	993e                	add	s2,s2,a5
    80204dc2:	00093783          	ld	a5,0(s2)
    80204dc6:	fc840613          	addi	a2,s0,-56
    80204dca:	1687b503          	ld	a0,360(a5)
    80204dce:	ffffd097          	auipc	ra,0xffffd
    80204dd2:	042080e7          	jalr	66(ra) # 80201e10 <pageLookup>
    80204dd6:	143027f3          	csrr	a5,stval
            panic("unhandled error %d,  %lx, %lx\n", scause, r_stval(), *pte);
    80204dda:	fc843703          	ld	a4,-56(s0)
    80204dde:	00073803          	ld	a6,0(a4)
    80204de2:	8726                	mv	a4,s1
    80204de4:	00009697          	auipc	a3,0x9
    80204de8:	cf468693          	addi	a3,a3,-780 # 8020dad8 <__func__.1877+0x288>
    80204dec:	00009617          	auipc	a2,0x9
    80204df0:	d8460613          	addi	a2,a2,-636 # 8020db70 <__func__.1866>
    80204df4:	09d00593          	li	a1,157
    80204df8:	00009517          	auipc	a0,0x9
    80204dfc:	ac050513          	addi	a0,a0,-1344 # 8020d8b8 <__func__.1877+0x68>
    80204e00:	ffffc097          	auipc	ra,0xffffc
    80204e04:	d56080e7          	jalr	-682(ra) # 80200b56 <_panic_>

0000000080204e08 <kmalloc>:
    }
    return 0;
}

/* for compat with linux interface */
void* kmalloc(int size, int policy) {
    80204e08:	1101                	addi	sp,sp,-32
    80204e0a:	ec06                	sd	ra,24(sp)
    80204e0c:	e822                	sd	s0,16(sp)
    80204e0e:	1000                	addi	s0,sp,32
    if (size > PAGE_SIZE)
    80204e10:	6785                	lui	a5,0x1
    80204e12:	04a7c163          	blt	a5,a0,80204e54 <kmalloc+0x4c>
        panic("Do not support kmalloc a mem which size > PAGE_SIZE");
	PhysicalPage* p;
    pageAlloc(&p);
    80204e16:	fe840513          	addi	a0,s0,-24
    80204e1a:	ffffd097          	auipc	ra,0xffffd
    80204e1e:	e64080e7          	jalr	-412(ra) # 80201c7e <pageAlloc>
    return page - pages;
    80204e22:	fe843783          	ld	a5,-24(s0)
    80204e26:	001dd717          	auipc	a4,0x1dd
    80204e2a:	65270713          	addi	a4,a4,1618 # 803e2478 <pages>
    80204e2e:	8f99                	sub	a5,a5,a4
    80204e30:	878d                	srai	a5,a5,0x3
    80204e32:	00009517          	auipc	a0,0x9
    80204e36:	73e53503          	ld	a0,1854(a0) # 8020e570 <__func__.1590+0x8>
    80204e3a:	02a787b3          	mul	a5,a5,a0
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80204e3e:	00c7979b          	slliw	a5,a5,0xc
    80204e42:	1782                	slli	a5,a5,0x20
    80204e44:	9381                	srli	a5,a5,0x20
    return (void *)page2pa(p);
}
    80204e46:	4505                	li	a0,1
    80204e48:	057e                	slli	a0,a0,0x1f
    80204e4a:	953e                	add	a0,a0,a5
    80204e4c:	60e2                	ld	ra,24(sp)
    80204e4e:	6442                	ld	s0,16(sp)
    80204e50:	6105                	addi	sp,sp,32
    80204e52:	8082                	ret
        panic("Do not support kmalloc a mem which size > PAGE_SIZE");
    80204e54:	00009697          	auipc	a3,0x9
    80204e58:	d2c68693          	addi	a3,a3,-724 # 8020db80 <__func__.1866+0x10>
    80204e5c:	00009617          	auipc	a2,0x9
    80204e60:	6a460613          	addi	a2,a2,1700 # 8020e500 <__func__.1899>
    80204e64:	05100593          	li	a1,81
    80204e68:	00009517          	auipc	a0,0x9
    80204e6c:	d5050513          	addi	a0,a0,-688 # 8020dbb8 <__func__.1866+0x48>
    80204e70:	ffffc097          	auipc	ra,0xffffc
    80204e74:	ce6080e7          	jalr	-794(ra) # 80200b56 <_panic_>

0000000080204e78 <kfree>:
void kfree(void* mem) {
    80204e78:	1141                	addi	sp,sp,-16
    80204e7a:	e406                	sd	ra,8(sp)
    80204e7c:	e022                	sd	s0,0(sp)
    80204e7e:	0800                	addi	s0,sp,16
    if (pa == 0)
    80204e80:	c10d                	beqz	a0,80204ea2 <kfree+0x2a>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80204e82:	800007b7          	lui	a5,0x80000
    80204e86:	953e                	add	a0,a0,a5
    80204e88:	8131                	srli	a0,a0,0xc
    return pages + ppn;
    80204e8a:	1502                	slli	a0,a0,0x20
    80204e8c:	9101                	srli	a0,a0,0x20
    80204e8e:	00151793          	slli	a5,a0,0x1
    80204e92:	953e                	add	a0,a0,a5
    80204e94:	00351793          	slli	a5,a0,0x3
    80204e98:	001dd517          	auipc	a0,0x1dd
    80204e9c:	5e050513          	addi	a0,a0,1504 # 803e2478 <pages>
    80204ea0:	953e                	add	a0,a0,a5
    pageFree(pa2page((u64)mem));
    80204ea2:	ffffd097          	auipc	ra,0xffffd
    80204ea6:	fb2080e7          	jalr	-78(ra) # 80201e54 <pageFree>
}
    80204eaa:	60a2                	ld	ra,8(sp)
    80204eac:	6402                	ld	s0,0(sp)
    80204eae:	0141                	addi	sp,sp,16
    80204eb0:	8082                	ret

0000000080204eb2 <load_elf_interp>:
//加载动态链接器
u64 load_elf_interp(u64* pagetable,
                    Ehdr* interp_elf_ex,
                    struct dirent* interpreter,
                    u64 no_base,
                    Phdr* interp_elf_phdata) {
    80204eb2:	7155                	addi	sp,sp,-208
    80204eb4:	e586                	sd	ra,200(sp)
    80204eb6:	e1a2                	sd	s0,192(sp)
    80204eb8:	fd26                	sd	s1,184(sp)
    80204eba:	f94a                	sd	s2,176(sp)
    80204ebc:	f54e                	sd	s3,168(sp)
    80204ebe:	f152                	sd	s4,160(sp)
    80204ec0:	ed56                	sd	s5,152(sp)
    80204ec2:	e95a                	sd	s6,144(sp)
    80204ec4:	e55e                	sd	s7,136(sp)
    80204ec6:	e162                	sd	s8,128(sp)
    80204ec8:	fce6                	sd	s9,120(sp)
    80204eca:	f8ea                	sd	s10,112(sp)
    80204ecc:	f4ee                	sd	s11,104(sp)
    80204ece:	0980                	addi	s0,sp,208
    80204ed0:	f4c43023          	sd	a2,-192(s0)
    80204ed4:	f2d43823          	sd	a3,-208(s0)
    80204ed8:	84ba                	mv	s1,a4
	u64 total_size;
	int i;


	total_size = total_mapping_size(interp_elf_phdata,
					interp_elf_ex->phnum);
    80204eda:	0385d703          	lhu	a4,56(a1) # 4000038 <_start-0x7c1fffc8>
    for (i = 0; i < nr; i++) {
    80204ede:	1c070063          	beqz	a4,8020509e <load_elf_interp+0x1ec>
    80204ee2:	8bae                	mv	s7,a1
    80204ee4:	87a6                	mv	a5,s1
    80204ee6:	377d                	addiw	a4,a4,-1
    80204ee8:	1702                	slli	a4,a4,0x20
    80204eea:	9301                	srli	a4,a4,0x20
    80204eec:	00371693          	slli	a3,a4,0x3
    80204ef0:	8e99                	sub	a3,a3,a4
    80204ef2:	068e                	slli	a3,a3,0x3
    80204ef4:	03848713          	addi	a4,s1,56
    80204ef8:	96ba                	add	a3,a3,a4
    bool pt_load = false;
    80204efa:	4501                	li	a0,0
    u64 max_addr = 0;
    80204efc:	4881                	li	a7,0
    u64 min_addr = -1;
    80204efe:	587d                	li	a6,-1
        if (phdr[i].type == PT_LOAD) {
    80204f00:	4605                	li	a2,1
            min_addr = min(min_addr, DOWN_ALIGN(phdr[i].vaddr, PGSIZE));//最低虚拟地址
    80204f02:	737d                	lui	t1,0xfffff
    80204f04:	a031                	j	80204f10 <load_elf_interp+0x5e>
            pt_load = true;
    80204f06:	8532                	mv	a0,a2
    for (i = 0; i < nr; i++) {
    80204f08:	03878793          	addi	a5,a5,56 # ffffffff80000038 <bssEnd+0xfffffffeff9c5038>
    80204f0c:	02f68263          	beq	a3,a5,80204f30 <load_elf_interp+0x7e>
        if (phdr[i].type == PT_LOAD) {
    80204f10:	85be                	mv	a1,a5
    80204f12:	4398                	lw	a4,0(a5)
    80204f14:	fec71ae3          	bne	a4,a2,80204f08 <load_elf_interp+0x56>
            min_addr = min(min_addr, DOWN_ALIGN(phdr[i].vaddr, PGSIZE));//最低虚拟地址
    80204f18:	6b98                	ld	a4,16(a5)
    80204f1a:	00677533          	and	a0,a4,t1
    80204f1e:	01057363          	bgeu	a0,a6,80204f24 <load_elf_interp+0x72>
    80204f22:	882a                	mv	a6,a0
            max_addr = max(max_addr, phdr[i].vaddr + phdr[i].memsz);//最高虚拟地址
    80204f24:	758c                	ld	a1,40(a1)
    80204f26:	972e                	add	a4,a4,a1
    80204f28:	fce8ffe3          	bgeu	a7,a4,80204f06 <load_elf_interp+0x54>
    80204f2c:	88ba                	mv	a7,a4
    80204f2e:	bfe1                	j	80204f06 <load_elf_interp+0x54>
    return pt_load ? (max_addr - min_addr) : 0;
    80204f30:	16050b63          	beqz	a0,802050a6 <load_elf_interp+0x1f4>
    80204f34:	410887b3          	sub	a5,a7,a6
    80204f38:	f4f43823          	sd	a5,-176(s0)
	if (!total_size) {
    80204f3c:	19088963          	beq	a7,a6,802050ce <load_elf_interp+0x21c>
首先申请total_size（这里是不固定的，需要OS来分配）。直接调用 do_mmap();
然后再把每个段填进去（这里的地址是确定的）

*/
	eppnt = interp_elf_phdata;
	for (i = 0; i < interp_elf_ex->phnum; i++, eppnt++) {
    80204f40:	4a01                	li	s4,0
	int load_addr_set = 0;
    80204f42:	4d01                	li	s10,0
	u64 load_addr = 0;
    80204f44:	f4043423          	sd	zero,-184(s0)
		if (eppnt->type == PT_LOAD) {
    80204f48:	4c05                	li	s8,1
    u64 size = eppnt->filesz + PAGE_OFFSET(eppnt->vaddr, PAGE_SIZE);
    80204f4a:	6d85                	lui	s11,0x1
    80204f4c:	fffd8793          	addi	a5,s11,-1 # fff <_start-0x801ff001>
    80204f50:	f2f43c23          	sd	a5,-200(s0)
    80204f54:	a869                	j	80204fee <load_elf_interp+0x13c>
				elf_type |= MAP_FIXED;
			else if (no_base && interp_elf_ex->type == ET_DYN)
				load_addr = -vaddr;
            
            struct file interp_file;
            interp_file.ep = interpreter;
    80204f56:	f4043783          	ld	a5,-192(s0)
    80204f5a:	f8f43023          	sd	a5,-128(s0)
            interp_file.type = FD_ENTRY;
    80204f5e:	4789                	li	a5,2
    80204f60:	f6f42423          	sw	a5,-152(s0)
            interp_file.readable = 1;
    80204f64:	4785                	li	a5,1
    80204f66:	f6f40823          	sb	a5,-144(s0)
			map_addr = elf_map(&interp_file, load_addr + vaddr,
    80204f6a:	f4843783          	ld	a5,-184(s0)
    80204f6e:	01678ab3          	add	s5,a5,s6
    u64 size = eppnt->filesz + PAGE_OFFSET(eppnt->vaddr, PAGE_SIZE);
    80204f72:	708c                	ld	a1,32(s1)
    80204f74:	f3843783          	ld	a5,-200(s0)
    80204f78:	00fb7b33          	and	s6,s6,a5
    80204f7c:	016589b3          	add	s3,a1,s6
    u64 off = eppnt->offset - PAGE_OFFSET(eppnt->vaddr, PAGE_SIZE);
    80204f80:	6490                	ld	a2,8(s1)
    80204f82:	41660cb3          	sub	s9,a2,s6
    printf("\nsize = %x, off = %x size2=%lx off2=%lx\n", eppnt->filesz, eppnt->offset, size, off);
    80204f86:	8766                	mv	a4,s9
    80204f88:	86ce                	mv	a3,s3
    80204f8a:	00009517          	auipc	a0,0x9
    80204f8e:	c3650513          	addi	a0,a0,-970 # 8020dbc0 <__func__.1866+0x50>
    80204f92:	ffffc097          	auipc	ra,0xffffc
    80204f96:	b38080e7          	jalr	-1224(ra) # 80200aca <printf>
    addr = DOWN_ALIGN(addr, PAGE_SIZE);
    80204f9a:	77fd                	lui	a5,0xfffff
    80204f9c:	00faf5b3          	and	a1,s5,a5
    size = UP_ALIGN(size, PGSIZE);
    80204fa0:	fff98613          	addi	a2,s3,-1
    80204fa4:	8e7d                	and	a2,a2,a5
    80204fa6:	966e                	add	a2,a2,s11
    if (!size)
    80204fa8:	ca05                	beqz	a2,80204fd8 <load_elf_interp+0x126>
    return prot|PTE_USER|PTE_ACCESSED;
    80204faa:	05096693          	ori	a3,s2,80
    if (total_size) {
    80204fae:	f5043783          	ld	a5,-176(s0)
    80204fb2:	cfd1                	beqz	a5,8020504e <load_elf_interp+0x19c>
        total_size = UP_ALIGN(total_size, PAGE_SIZE);
    80204fb4:	fff78613          	addi	a2,a5,-1 # ffffffffffffefff <bssEnd+0xffffffff7f9c3fff>
    80204fb8:	77fd                	lui	a5,0xfffff
    80204fba:	8e7d                	and	a2,a2,a5
        map_addr = do_mmap(filep, addr, total_size, prot, type, off);
    80204fbc:	87e6                	mv	a5,s9
    80204fbe:	f5843703          	ld	a4,-168(s0)
    80204fc2:	966e                	add	a2,a2,s11
    80204fc4:	f6840513          	addi	a0,s0,-152
    80204fc8:	00005097          	auipc	ra,0x5
    80204fcc:	066080e7          	jalr	102(ra) # 8020a02e <do_mmap>
    80204fd0:	85aa                	mv	a1,a0
    if (map_addr == -1)
    80204fd2:	57fd                	li	a5,-1
    80204fd4:	08f58863          	beq	a1,a5,80205064 <load_elf_interp+0x1b2>
			total_size = 0;
			error = map_addr;
			if (map_addr == -1)
                panic("elf_map failed");

			if (!load_addr_set &&
    80204fd8:	0a0d0863          	beqz	s10,80205088 <load_elf_interp+0x1d6>
			total_size = 0;
    80204fdc:	f4043823          	sd	zero,-176(s0)
	for (i = 0; i < interp_elf_ex->phnum; i++, eppnt++) {
    80204fe0:	2a05                	addiw	s4,s4,1
    80204fe2:	03848493          	addi	s1,s1,56
    80204fe6:	038bd783          	lhu	a5,56(s7)
    80204fea:	0cfa5163          	bge	s4,a5,802050ac <load_elf_interp+0x1fa>
		if (eppnt->type == PT_LOAD) {
    80204fee:	409c                	lw	a5,0(s1)
    80204ff0:	ff8798e3          	bne	a5,s8,80204fe0 <load_elf_interp+0x12e>
			int elf_prot = make_prot(eppnt->flags);
    80204ff4:	40dc                	lw	a5,4(s1)
    if (p_flags & PF_R)
    80204ff6:	0047f913          	andi	s2,a5,4
        prot |= PTE_READ;
    80204ffa:	01203933          	snez	s2,s2
    80204ffe:	0906                	slli	s2,s2,0x1
    if (p_flags & PF_W)
    80205000:	0027f713          	andi	a4,a5,2
    80205004:	c701                	beqz	a4,8020500c <load_elf_interp+0x15a>
        prot |= PTE_WRITE;
    80205006:	00496913          	ori	s2,s2,4
    8020500a:	2901                	sext.w	s2,s2
    if (p_flags & PF_X)
    8020500c:	8b85                	andi	a5,a5,1
    8020500e:	c399                	beqz	a5,80205014 <load_elf_interp+0x162>
        prot |= PTE_EXECUTE;
    80205010:	00896913          	ori	s2,s2,8
			vaddr = eppnt->vaddr;
    80205014:	0104bb03          	ld	s6,16(s1)
			if (interp_elf_ex->type == ET_EXEC || load_addr_set)
    80205018:	010bd783          	lhu	a5,16(s7)
    8020501c:	0007871b          	sext.w	a4,a5
				elf_type |= MAP_FIXED;
    80205020:	46c9                	li	a3,18
    80205022:	f4d43c23          	sd	a3,-168(s0)
			if (interp_elf_ex->type == ET_EXEC || load_addr_set)
    80205026:	4689                	li	a3,2
    80205028:	f2d707e3          	beq	a4,a3,80204f56 <load_elf_interp+0xa4>
    8020502c:	f20d15e3          	bnez	s10,80204f56 <load_elf_interp+0xa4>
			int elf_type = MAP_PRIVATE;
    80205030:	4709                	li	a4,2
    80205032:	f4e43c23          	sd	a4,-168(s0)
			else if (no_base && interp_elf_ex->type == ET_DYN)
    80205036:	f3043703          	ld	a4,-208(s0)
    8020503a:	df11                	beqz	a4,80204f56 <load_elf_interp+0xa4>
    8020503c:	2781                	sext.w	a5,a5
    8020503e:	470d                	li	a4,3
    80205040:	f0e79be3          	bne	a5,a4,80204f56 <load_elf_interp+0xa4>
				load_addr = -vaddr;
    80205044:	416007b3          	neg	a5,s6
    80205048:	f4f43423          	sd	a5,-184(s0)
    8020504c:	b729                	j	80204f56 <load_elf_interp+0xa4>
        map_addr = do_mmap(filep, addr, size, prot, type, off);
    8020504e:	87e6                	mv	a5,s9
    80205050:	f5843703          	ld	a4,-168(s0)
    80205054:	f6840513          	addi	a0,s0,-152
    80205058:	00005097          	auipc	ra,0x5
    8020505c:	fd6080e7          	jalr	-42(ra) # 8020a02e <do_mmap>
    80205060:	85aa                	mv	a1,a0
    80205062:	bf85                	j	80204fd2 <load_elf_interp+0x120>
        panic("mmap interpreter fail!");
    80205064:	00009697          	auipc	a3,0x9
    80205068:	b8c68693          	addi	a3,a3,-1140 # 8020dbf0 <__func__.1866+0x80>
    8020506c:	00009617          	auipc	a2,0x9
    80205070:	48c60613          	addi	a2,a2,1164 # 8020e4f8 <__func__.1926>
    80205074:	08a00593          	li	a1,138
    80205078:	00009517          	auipc	a0,0x9
    8020507c:	b4050513          	addi	a0,a0,-1216 # 8020dbb8 <__func__.1866+0x48>
    80205080:	ffffc097          	auipc	ra,0xffffc
    80205084:	ad6080e7          	jalr	-1322(ra) # 80200b56 <_panic_>
			if (!load_addr_set &&
    80205088:	010bd703          	lhu	a4,16(s7)
    8020508c:	478d                	li	a5,3
    8020508e:	f4f717e3          	bne	a4,a5,80204fdc <load_elf_interp+0x12a>
			    interp_elf_ex->type == ET_DYN) {
				load_addr = map_addr - PAGE_OFFSET(vaddr, PAGE_SIZE);
    80205092:	416587b3          	sub	a5,a1,s6
    80205096:	f4f43423          	sd	a5,-184(s0)
				load_addr_set = 1;
    8020509a:	8d62                	mv	s10,s8
    8020509c:	b781                	j	80204fdc <load_elf_interp+0x12a>
		error = -EINVAL;
    8020509e:	57a9                	li	a5,-22
    802050a0:	f4f43423          	sd	a5,-184(s0)
    802050a4:	a021                	j	802050ac <load_elf_interp+0x1fa>
    802050a6:	57a9                	li	a5,-22
    802050a8:	f4f43423          	sd	a5,-184(s0)
	}*/

	error = load_addr;
out:
	return error;
}
    802050ac:	f4843503          	ld	a0,-184(s0)
    802050b0:	60ae                	ld	ra,200(sp)
    802050b2:	640e                	ld	s0,192(sp)
    802050b4:	74ea                	ld	s1,184(sp)
    802050b6:	794a                	ld	s2,176(sp)
    802050b8:	79aa                	ld	s3,168(sp)
    802050ba:	7a0a                	ld	s4,160(sp)
    802050bc:	6aea                	ld	s5,152(sp)
    802050be:	6b4a                	ld	s6,144(sp)
    802050c0:	6baa                	ld	s7,136(sp)
    802050c2:	6c0a                	ld	s8,128(sp)
    802050c4:	7ce6                	ld	s9,120(sp)
    802050c6:	7d46                	ld	s10,112(sp)
    802050c8:	7da6                	ld	s11,104(sp)
    802050ca:	6169                	addi	sp,sp,208
    802050cc:	8082                	ret
		error = -EINVAL;
    802050ce:	57a9                	li	a5,-22
    802050d0:	f4f43423          	sd	a5,-184(s0)
	return error;
    802050d4:	bfe1                	j	802050ac <load_elf_interp+0x1fa>

00000000802050d6 <exec>:


int exec(char* path, char** argv) {
    802050d6:	c3010113          	addi	sp,sp,-976
    802050da:	3c113423          	sd	ra,968(sp)
    802050de:	3c813023          	sd	s0,960(sp)
    802050e2:	3a913c23          	sd	s1,952(sp)
    802050e6:	3b213823          	sd	s2,944(sp)
    802050ea:	3b313423          	sd	s3,936(sp)
    802050ee:	3b413023          	sd	s4,928(sp)
    802050f2:	39513c23          	sd	s5,920(sp)
    802050f6:	39613823          	sd	s6,912(sp)
    802050fa:	39713423          	sd	s7,904(sp)
    802050fe:	39813023          	sd	s8,896(sp)
    80205102:	37913c23          	sd	s9,888(sp)
    80205106:	37a13823          	sd	s10,880(sp)
    8020510a:	37b13423          	sd	s11,872(sp)
    8020510e:	0f80                	addi	s0,sp,976
    80205110:	892a                	mv	s2,a0
    80205112:	c6b43c23          	sd	a1,-904(s0)
    u64 argc,  sp, ustack[MAXARG + AT_VECTOR_SIZE], stackbase;
    Ehdr elf;
    struct dirent* de;
    Phdr ph;
    u64 *pagetable = 0, *old_pagetable = 0;
    Process* p = myproc();
    80205116:	ffffe097          	auipc	ra,0xffffe
    8020511a:	936080e7          	jalr	-1738(ra) # 80202a4c <myproc>
    8020511e:	89aa                	mv	s3,a0
    u64* oldpagetable = p->pgdir;
    80205120:	16853d83          	ld	s11,360(a0)
    u64 phdr_addr = 0; // virtual address in user space, point to the program header. We will pass 'phdr_addr' to ld.so

    PhysicalPage *page;
    int r = allocPgdir(&page);
    80205124:	ca040513          	addi	a0,s0,-864
    80205128:	ffffd097          	auipc	ra,0xffffd
    8020512c:	fa8080e7          	jalr	-88(ra) # 802020d0 <allocPgdir>
    if (r < 0) {
    80205130:	12054e63          	bltz	a0,8020526c <exec+0x196>
        panic("setup page alloc error\n");
        return r;
    }
    
    p->heapBottom = USER_HEAP_BOTTOM;// TODO,these code have writen twice
    80205134:	01fc05b7          	lui	a1,0x1fc0
    80205138:	15fd                	addi	a1,a1,-1
    8020513a:	05b6                	slli	a1,a1,0xd
    8020513c:	5cb9b823          	sd	a1,1488(s3)
    printf("heapBottom ? = %lx %lx\n",USER_HEAP_BOTTOM, USER_HEAP_TOP);
    80205140:	01fe0637          	lui	a2,0x1fe0
    80205144:	167d                	addi	a2,a2,-1
    80205146:	0636                	slli	a2,a2,0xd
    80205148:	00009517          	auipc	a0,0x9
    8020514c:	ac050513          	addi	a0,a0,-1344 # 8020dc08 <__func__.1866+0x98>
    80205150:	ffffc097          	auipc	ra,0xffffc
    80205154:	97a080e7          	jalr	-1670(ra) # 80200aca <printf>
    return page - pages;
    80205158:	ca043483          	ld	s1,-864(s0)
    8020515c:	001dd797          	auipc	a5,0x1dd
    80205160:	31c78793          	addi	a5,a5,796 # 803e2478 <pages>
    80205164:	8c9d                	sub	s1,s1,a5
    80205166:	848d                	srai	s1,s1,0x3
    80205168:	00009797          	auipc	a5,0x9
    8020516c:	4087b783          	ld	a5,1032(a5) # 8020e570 <__func__.1590+0x8>
    80205170:	02f484b3          	mul	s1,s1,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80205174:	00c4949b          	slliw	s1,s1,0xc
    80205178:	1482                	slli	s1,s1,0x20
    8020517a:	9081                	srli	s1,s1,0x20
    8020517c:	4785                	li	a5,1
    8020517e:	07fe                	slli	a5,a5,0x1f
    80205180:	94be                	add	s1,s1,a5
    pagetable = (u64*)page2pa(page);
    extern char trampoline[];
    pageInsert(pagetable, TRAMPOLINE_BASE, (u64)trampoline, 
    80205182:	46b9                	li	a3,14
    80205184:	00006617          	auipc	a2,0x6
    80205188:	e7c60613          	addi	a2,a2,-388 # 8020b000 <_trampoline>
    8020518c:	020005b7          	lui	a1,0x2000
    80205190:	15fd                	addi	a1,a1,-1
    80205192:	05b6                	slli	a1,a1,0xd
    80205194:	8526                	mv	a0,s1
    80205196:	ffffd097          	auipc	ra,0xffffd
    8020519a:	e84080e7          	jalr	-380(ra) # 8020201a <pageInsert>
        PTE_READ | PTE_WRITE | PTE_EXECUTE);
    pageInsert(pagetable, TRAMPOLINE_BASE + PAGE_SIZE, ((u64)trampoline) + PAGE_SIZE, 
    8020519e:	46b9                	li	a3,14
    802051a0:	00007617          	auipc	a2,0x7
    802051a4:	e6060613          	addi	a2,a2,-416 # 8020c000 <trapframe>
    802051a8:	040005b7          	lui	a1,0x4000
    802051ac:	15fd                	addi	a1,a1,-1
    802051ae:	05b2                	slli	a1,a1,0xc
    802051b0:	8526                	mv	a0,s1
    802051b2:	ffffd097          	auipc	ra,0xffffd
    802051b6:	e68080e7          	jalr	-408(ra) # 8020201a <pageInsert>
        PTE_READ | PTE_WRITE | PTE_EXECUTE);    
    
    old_pagetable = p->pgdir;
    802051ba:	1689bb83          	ld	s7,360(s3)
    p->pgdir = pagetable;
    802051be:	1699b423          	sd	s1,360(s3)

    MSG_PRINT("setup");

    if ((de = ename(AT_FDCWD, path)) == 0) {
    802051c2:	85ca                	mv	a1,s2
    802051c4:	f9c00513          	li	a0,-100
    802051c8:	00004097          	auipc	ra,0x4
    802051cc:	57c080e7          	jalr	1404(ra) # 80209744 <ename>
    802051d0:	892a                	mv	s2,a0
    802051d2:	2e0508e3          	beqz	a0,80205cc2 <exec+0xbec>
        MSG_PRINT("find file error\n");
        return -1;
    }
    elock(de);
    802051d6:	00004097          	auipc	ra,0x4
    802051da:	e48080e7          	jalr	-440(ra) # 8020901e <elock>

    MSG_PRINT("lock file success");
    // Check ELF header
    if (eread(de, 0, (u64)&elf, 0, sizeof(elf)) != sizeof(elf)){
    802051de:	04000713          	li	a4,64
    802051e2:	4681                	li	a3,0
    802051e4:	ce040613          	addi	a2,s0,-800
    802051e8:	4581                	li	a1,0
    802051ea:	854a                	mv	a0,s2
    802051ec:	00003097          	auipc	ra,0x3
    802051f0:	4b6080e7          	jalr	1206(ra) # 802086a2 <eread>
    802051f4:	04000793          	li	a5,64
    802051f8:	00f51863          	bne	a0,a5,80205208 <exec+0x132>
    if (magic[0] == ELF_MAGIC0 &&
    802051fc:	ce044703          	lbu	a4,-800(s0)
    80205200:	07f00793          	li	a5,127
    80205204:	08f70663          	beq	a4,a5,80205290 <exec+0x1ba>
    asm volatile("fence.i");
    printf("out exec");
    return argc;  // this ends up in a0, the first argument to main(argc, argv)

bad:
    p->pgdir = old_pagetable;
    80205208:	1779b423          	sd	s7,360(s3)
    if (pagetable)
        pgdirFree((u64*)pagetable);
    8020520c:	8526                	mv	a0,s1
    8020520e:	ffffd097          	auipc	ra,0xffffd
    80205212:	d04080e7          	jalr	-764(ra) # 80201f12 <pgdirFree>
    if (de) {
        if(holdingsleep(&de->lock))
    80205216:	14090513          	addi	a0,s2,320
    8020521a:	00001097          	auipc	ra,0x1
    8020521e:	ea8080e7          	jalr	-344(ra) # 802060c2 <holdingsleep>
    80205222:	280519e3          	bnez	a0,80205cb4 <exec+0xbde>
            eunlock(de);
        eput(de);
    80205226:	854a                	mv	a0,s2
    80205228:	00004097          	auipc	ra,0x4
    8020522c:	ea2080e7          	jalr	-350(ra) # 802090ca <eput>
    }
    return -1;
    80205230:	557d                	li	a0,-1
}
    80205232:	3c813083          	ld	ra,968(sp)
    80205236:	3c013403          	ld	s0,960(sp)
    8020523a:	3b813483          	ld	s1,952(sp)
    8020523e:	3b013903          	ld	s2,944(sp)
    80205242:	3a813983          	ld	s3,936(sp)
    80205246:	3a013a03          	ld	s4,928(sp)
    8020524a:	39813a83          	ld	s5,920(sp)
    8020524e:	39013b03          	ld	s6,912(sp)
    80205252:	38813b83          	ld	s7,904(sp)
    80205256:	38013c03          	ld	s8,896(sp)
    8020525a:	37813c83          	ld	s9,888(sp)
    8020525e:	37013d03          	ld	s10,880(sp)
    80205262:	36813d83          	ld	s11,872(sp)
    80205266:	3d010113          	addi	sp,sp,976
    8020526a:	8082                	ret
        panic("setup page alloc error\n");
    8020526c:	00008697          	auipc	a3,0x8
    80205270:	42468693          	addi	a3,a3,1060 # 8020d690 <__func__.1844+0xc0>
    80205274:	00009617          	auipc	a2,0x9
    80205278:	27c60613          	addi	a2,a2,636 # 8020e4f0 <__func__.1977>
    8020527c:	12500593          	li	a1,293
    80205280:	00009517          	auipc	a0,0x9
    80205284:	93850513          	addi	a0,a0,-1736 # 8020dbb8 <__func__.1866+0x48>
    80205288:	ffffc097          	auipc	ra,0xffffc
    8020528c:	8ce080e7          	jalr	-1842(ra) # 80200b56 <_panic_>
    80205290:	ce144703          	lbu	a4,-799(s0)
    80205294:	04500793          	li	a5,69
    80205298:	f6f718e3          	bne	a4,a5,80205208 <exec+0x132>
        magic[1] == ELF_MAGIC1 &&
    8020529c:	ce244703          	lbu	a4,-798(s0)
    802052a0:	04c00793          	li	a5,76
    802052a4:	f6f712e3          	bne	a4,a5,80205208 <exec+0x132>
        magic[2] == ELF_MAGIC2 &&
    802052a8:	ce344703          	lbu	a4,-797(s0)
    802052ac:	04600793          	li	a5,70
    802052b0:	f4f71ce3          	bne	a4,a5,80205208 <exec+0x132>
    for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
    802052b4:	d0042783          	lw	a5,-768(s0)
    802052b8:	d1845703          	lhu	a4,-744(s0)
    802052bc:	200706e3          	beqz	a4,80205cc8 <exec+0xbf2>
    u64 phdr_addr = 0; // virtual address in user space, point to the program header. We will pass 'phdr_addr' to ld.so
    802052c0:	c2043823          	sd	zero,-976(s0)
    for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
    802052c4:	c4043c23          	sd	zero,-936(s0)
    u64 offset = va - DOWN_ALIGN(va, PAGE_SIZE);
    802052c8:	6705                	lui	a4,0x1
    802052ca:	177d                	addi	a4,a4,-1
    802052cc:	c4e43423          	sd	a4,-952(s0)
    802052d0:	577d                	li	a4,-1
    802052d2:	9301                	srli	a4,a4,0x20
    802052d4:	c4e43023          	sd	a4,-960(s0)
    802052d8:	4705                	li	a4,1
    802052da:	01f71b13          	slli	s6,a4,0x1f
    802052de:	a685                	j	8020563e <exec+0x568>
        page = pa2page(pageLookup(pagetable, va, &entry));
    802052e0:	c8840613          	addi	a2,s0,-888
    802052e4:	85be                	mv	a1,a5
    802052e6:	8526                	mv	a0,s1
    802052e8:	ffffd097          	auipc	ra,0xffffd
    802052ec:	b28080e7          	jalr	-1240(ra) # 80201e10 <pageLookup>
    if (pa == 0)
    802052f0:	240504e3          	beqz	a0,80205d38 <exec+0xc62>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    802052f4:	800007b7          	lui	a5,0x80000
    802052f8:	97aa                	add	a5,a5,a0
    802052fa:	83b1                	srli	a5,a5,0xc
    return pages + ppn;
    802052fc:	c4043703          	ld	a4,-960(s0)
    80205300:	8ff9                	and	a5,a5,a4
    80205302:	00179713          	slli	a4,a5,0x1
    80205306:	97ba                	add	a5,a5,a4
    80205308:	078e                	slli	a5,a5,0x3
    8020530a:	001dd717          	auipc	a4,0x1dd
    8020530e:	16e70713          	addi	a4,a4,366 # 803e2478 <pages>
    80205312:	97ba                	add	a5,a5,a4
    80205314:	c8f43023          	sd	a5,-896(s0)
        r = MIN(binSize, PAGE_SIZE - offset);
    80205318:	c4043783          	ld	a5,-960(s0)
    8020531c:	00fc7c33          	and	s8,s8,a5
    80205320:	6785                	lui	a5,0x1
    80205322:	41478cb3          	sub	s9,a5,s4
    80205326:	019c7363          	bgeu	s8,s9,8020532c <exec+0x256>
    8020532a:	8ce2                	mv	s9,s8
        if (eread(de, 0, page2pa(page) + offset, fileOffset, r) != r) {
    8020532c:	2c81                	sext.w	s9,s9
    return page - pages;
    8020532e:	c8043783          	ld	a5,-896(s0)
    80205332:	001dd717          	auipc	a4,0x1dd
    80205336:	14670713          	addi	a4,a4,326 # 803e2478 <pages>
    8020533a:	8f99                	sub	a5,a5,a4
    8020533c:	878d                	srai	a5,a5,0x3
    8020533e:	00009717          	auipc	a4,0x9
    80205342:	23273703          	ld	a4,562(a4) # 8020e570 <__func__.1590+0x8>
    80205346:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020534a:	00c7979b          	slliw	a5,a5,0xc
    8020534e:	1782                	slli	a5,a5,0x20
    80205350:	9381                	srli	a5,a5,0x20
    80205352:	016a0633          	add	a2,s4,s6
    80205356:	8766                	mv	a4,s9
    80205358:	c6043683          	ld	a3,-928(s0)
    8020535c:	963e                	add	a2,a2,a5
    8020535e:	4581                	li	a1,0
    80205360:	854a                	mv	a0,s2
    80205362:	00003097          	auipc	ra,0x3
    80205366:	340080e7          	jalr	832(ra) # 802086a2 <eread>
    8020536a:	8aaa                	mv	s5,a0
    8020536c:	04ac9763          	bne	s9,a0,802053ba <exec+0x2e4>
    for (i = r; i < binSize; i += r) {
    80205370:	8a2a                	mv	s4,a0
    80205372:	33856b63          	bltu	a0,s8,802056a8 <exec+0x5d2>
    offset = va + i - DOWN_ALIGN(va + i, PAGE_SIZE);
    80205376:	c7043783          	ld	a5,-912(s0)
    8020537a:	01478cb3          	add	s9,a5,s4
    8020537e:	c4843783          	ld	a5,-952(s0)
    80205382:	00fcfc33          	and	s8,s9,a5
    if (offset > 0) {
    80205386:	120c1563          	bnez	s8,802054b0 <exec+0x3da>
    for (i += r; i < segmentSize; i += r) {
    8020538a:	9a56                	add	s4,s4,s5
    8020538c:	c6843783          	ld	a5,-920(s0)
    80205390:	26fa7663          	bgeu	s4,a5,802055fc <exec+0x526>
    return page - pages;
    80205394:	001dda97          	auipc	s5,0x1dd
    80205398:	0e4a8a93          	addi	s5,s5,228 # 803e2478 <pages>
    8020539c:	00009c97          	auipc	s9,0x9
    802053a0:	1d4c8c93          	addi	s9,s9,468 # 8020e570 <__func__.1590+0x8>
    802053a4:	a421                	j	802055ac <exec+0x4d6>
                printf("load segment error when we need to alloc a page!\n");
    802053a6:	00009517          	auipc	a0,0x9
    802053aa:	87a50513          	addi	a0,a0,-1926 # 8020dc20 <__func__.1866+0xb0>
    802053ae:	ffffb097          	auipc	ra,0xffffb
    802053b2:	71c080e7          	jalr	1820(ra) # 80200aca <printf>
    802053b6:	1970006f          	j	80205d4c <exec+0xc76>
            panic("load segment error when eread on offset\n");
    802053ba:	00009697          	auipc	a3,0x9
    802053be:	89e68693          	addi	a3,a3,-1890 # 8020dc58 <__func__.1866+0xe8>
    802053c2:	00009617          	auipc	a2,0x9
    802053c6:	b7660613          	addi	a2,a2,-1162 # 8020df38 <__func__.1879>
    802053ca:	02700593          	li	a1,39
    802053ce:	00008517          	auipc	a0,0x8
    802053d2:	7ea50513          	addi	a0,a0,2026 # 8020dbb8 <__func__.1866+0x48>
    802053d6:	ffffb097          	auipc	ra,0xffffb
    802053da:	780080e7          	jalr	1920(ra) # 80200b56 <_panic_>
            panic("load segment error when we need to alloc a page 1!\n");
    802053de:	00009697          	auipc	a3,0x9
    802053e2:	8aa68693          	addi	a3,a3,-1878 # 8020dc88 <__func__.1866+0x118>
    802053e6:	00009617          	auipc	a2,0x9
    802053ea:	b5260613          	addi	a2,a2,-1198 # 8020df38 <__func__.1879>
    802053ee:	02d00593          	li	a1,45
    802053f2:	00008517          	auipc	a0,0x8
    802053f6:	7c650513          	addi	a0,a0,1990 # 8020dbb8 <__func__.1866+0x48>
    802053fa:	ffffb097          	auipc	ra,0xffffb
    802053fe:	75c080e7          	jalr	1884(ra) # 80200b56 <_panic_>
        r = MIN(PAGE_SIZE, binSize - i);
    80205402:	2a81                	sext.w	s5,s5
    80205404:	c8043603          	ld	a2,-896(s0)
    80205408:	41a60633          	sub	a2,a2,s10
    8020540c:	860d                	srai	a2,a2,0x3
    8020540e:	000cb783          	ld	a5,0(s9)
    80205412:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80205416:	00c6161b          	slliw	a2,a2,0xc
    8020541a:	1602                	slli	a2,a2,0x20
    8020541c:	9201                	srli	a2,a2,0x20
        if (eread(de, 0, page2pa(page), fileOffset + i, r) != r) {
    8020541e:	8756                	mv	a4,s5
    80205420:	c6043783          	ld	a5,-928(s0)
    80205424:	00fa06bb          	addw	a3,s4,a5
    80205428:	965a                	add	a2,a2,s6
    8020542a:	4581                	li	a1,0
    8020542c:	854a                	mv	a0,s2
    8020542e:	00003097          	auipc	ra,0x3
    80205432:	274080e7          	jalr	628(ra) # 802086a2 <eread>
    80205436:	04aa9b63          	bne	s5,a0,8020548c <exec+0x3b6>
    for (i = r; i < binSize; i += r) {
    8020543a:	9a56                	add	s4,s4,s5
    8020543c:	f38a7de3          	bgeu	s4,s8,80205376 <exec+0x2a0>
        if (pageAlloc(&page) != 0) {
    80205440:	c8040513          	addi	a0,s0,-896
    80205444:	ffffd097          	auipc	ra,0xffffd
    80205448:	83a080e7          	jalr	-1990(ra) # 80201c7e <pageAlloc>
    8020544c:	f949                	bnez	a0,802053de <exec+0x308>
    return page - pages;
    8020544e:	c8043603          	ld	a2,-896(s0)
    80205452:	41a60633          	sub	a2,a2,s10
    80205456:	860d                	srai	a2,a2,0x3
    80205458:	000cb783          	ld	a5,0(s9)
    8020545c:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80205460:	00c6161b          	slliw	a2,a2,0xc
    80205464:	1602                	slli	a2,a2,0x20
    80205466:	9201                	srli	a2,a2,0x20
        pageInsert(pagetable, va + i, page2pa(page), PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
    80205468:	46f9                	li	a3,30
    8020546a:	965a                	add	a2,a2,s6
    8020546c:	c7043783          	ld	a5,-912(s0)
    80205470:	014785b3          	add	a1,a5,s4
    80205474:	8526                	mv	a0,s1
    80205476:	ffffd097          	auipc	ra,0xffffd
    8020547a:	ba4080e7          	jalr	-1116(ra) # 8020201a <pageInsert>
        r = MIN(PAGE_SIZE, binSize - i);
    8020547e:	414c0ab3          	sub	s5,s8,s4
    80205482:	6785                	lui	a5,0x1
    80205484:	f757ffe3          	bgeu	a5,s5,80205402 <exec+0x32c>
    80205488:	6a85                	lui	s5,0x1
    8020548a:	bfa5                	j	80205402 <exec+0x32c>
            panic("load segment error when eread on offset 1\n");
    8020548c:	00009697          	auipc	a3,0x9
    80205490:	83468693          	addi	a3,a3,-1996 # 8020dcc0 <__func__.1866+0x150>
    80205494:	00009617          	auipc	a2,0x9
    80205498:	aa460613          	addi	a2,a2,-1372 # 8020df38 <__func__.1879>
    8020549c:	03200593          	li	a1,50
    802054a0:	00008517          	auipc	a0,0x8
    802054a4:	71850513          	addi	a0,a0,1816 # 8020dbb8 <__func__.1866+0x48>
    802054a8:	ffffb097          	auipc	ra,0xffffb
    802054ac:	6ae080e7          	jalr	1710(ra) # 80200b56 <_panic_>
        page = pa2page(pageLookup(pagetable, va + i, &entry));
    802054b0:	c8840613          	addi	a2,s0,-888
    802054b4:	85e6                	mv	a1,s9
    802054b6:	8526                	mv	a0,s1
    802054b8:	ffffd097          	auipc	ra,0xffffd
    802054bc:	958080e7          	jalr	-1704(ra) # 80201e10 <pageLookup>
    if (pa == 0)
    802054c0:	020502e3          	beqz	a0,80205ce4 <exec+0xc0e>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    802054c4:	800007b7          	lui	a5,0x80000
    802054c8:	97aa                	add	a5,a5,a0
    802054ca:	83b1                	srli	a5,a5,0xc
    return pages + ppn;
    802054cc:	c4043703          	ld	a4,-960(s0)
    802054d0:	8ff9                	and	a5,a5,a4
    802054d2:	00179713          	slli	a4,a5,0x1
    802054d6:	97ba                	add	a5,a5,a4
    802054d8:	078e                	slli	a5,a5,0x3
    802054da:	001dd717          	auipc	a4,0x1dd
    802054de:	f9e70713          	addi	a4,a4,-98 # 803e2478 <pages>
    802054e2:	97ba                	add	a5,a5,a4
    802054e4:	c8f43023          	sd	a5,-896(s0)
        r = MIN(segmentSize - i, PAGE_SIZE - offset);
    802054e8:	6785                	lui	a5,0x1
    802054ea:	418787b3          	sub	a5,a5,s8
    802054ee:	c6843703          	ld	a4,-920(s0)
    802054f2:	41470ab3          	sub	s5,a4,s4
    802054f6:	0157f363          	bgeu	a5,s5,802054fc <exec+0x426>
    802054fa:	8abe                	mv	s5,a5
    802054fc:	2a81                	sext.w	s5,s5
    return page - pages;
    802054fe:	c8043503          	ld	a0,-896(s0)
    80205502:	001dd797          	auipc	a5,0x1dd
    80205506:	f7678793          	addi	a5,a5,-138 # 803e2478 <pages>
    8020550a:	8d1d                	sub	a0,a0,a5
    8020550c:	850d                	srai	a0,a0,0x3
    8020550e:	00009797          	auipc	a5,0x9
    80205512:	0627b783          	ld	a5,98(a5) # 8020e570 <__func__.1590+0x8>
    80205516:	02f50533          	mul	a0,a0,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020551a:	00c5151b          	slliw	a0,a0,0xc
    8020551e:	1502                	slli	a0,a0,0x20
    80205520:	9101                	srli	a0,a0,0x20
    80205522:	955a                	add	a0,a0,s6
        bzero((void*)page2pa(page) + offset, r);
    80205524:	85d6                	mv	a1,s5
    80205526:	9562                	add	a0,a0,s8
    80205528:	ffffc097          	auipc	ra,0xffffc
    8020552c:	5bc080e7          	jalr	1468(ra) # 80201ae4 <bzero>
    80205530:	bda9                	j	8020538a <exec+0x2b4>
                panic("load segment error when we need to alloc a page 2!\n");
    80205532:	00008697          	auipc	a3,0x8
    80205536:	7be68693          	addi	a3,a3,1982 # 8020dcf0 <__func__.1866+0x180>
    8020553a:	00009617          	auipc	a2,0x9
    8020553e:	9fe60613          	addi	a2,a2,-1538 # 8020df38 <__func__.1879>
    80205542:	03b00593          	li	a1,59
    80205546:	00008517          	auipc	a0,0x8
    8020554a:	67250513          	addi	a0,a0,1650 # 8020dbb8 <__func__.1866+0x48>
    8020554e:	ffffb097          	auipc	ra,0xffffb
    80205552:	608080e7          	jalr	1544(ra) # 80200b56 <_panic_>
            panic("load segment error when we need to alloc a page 3!\n");
    80205556:	00008697          	auipc	a3,0x8
    8020555a:	7d268693          	addi	a3,a3,2002 # 8020dd28 <__func__.1866+0x1b8>
    8020555e:	00009617          	auipc	a2,0x9
    80205562:	9da60613          	addi	a2,a2,-1574 # 8020df38 <__func__.1879>
    80205566:	04500593          	li	a1,69
    8020556a:	00008517          	auipc	a0,0x8
    8020556e:	64e50513          	addi	a0,a0,1614 # 8020dbb8 <__func__.1866+0x48>
    80205572:	ffffb097          	auipc	ra,0xffffb
    80205576:	5e4080e7          	jalr	1508(ra) # 80200b56 <_panic_>
        bzero((void*)page2pa(page), r);
    8020557a:	2c01                	sext.w	s8,s8
    return page - pages;
    8020557c:	c8043503          	ld	a0,-896(s0)
    80205580:	41550533          	sub	a0,a0,s5
    80205584:	850d                	srai	a0,a0,0x3
    80205586:	000cb783          	ld	a5,0(s9)
    8020558a:	02f50533          	mul	a0,a0,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020558e:	00c5151b          	slliw	a0,a0,0xc
    80205592:	1502                	slli	a0,a0,0x20
    80205594:	9101                	srli	a0,a0,0x20
    80205596:	85e2                	mv	a1,s8
    80205598:	955a                	add	a0,a0,s6
    8020559a:	ffffc097          	auipc	ra,0xffffc
    8020559e:	54a080e7          	jalr	1354(ra) # 80201ae4 <bzero>
    for (i += r; i < segmentSize; i += r) {
    802055a2:	9a62                	add	s4,s4,s8
    802055a4:	c6843783          	ld	a5,-920(s0)
    802055a8:	04fa7a63          	bgeu	s4,a5,802055fc <exec+0x526>
        if (pageAlloc(&page) != 0) {
    802055ac:	c8040513          	addi	a0,s0,-896
    802055b0:	ffffc097          	auipc	ra,0xffffc
    802055b4:	6ce080e7          	jalr	1742(ra) # 80201c7e <pageAlloc>
    802055b8:	fd59                	bnez	a0,80205556 <exec+0x480>
    return page - pages;
    802055ba:	c8043603          	ld	a2,-896(s0)
    802055be:	41560633          	sub	a2,a2,s5
    802055c2:	860d                	srai	a2,a2,0x3
    802055c4:	000cb783          	ld	a5,0(s9)
    802055c8:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802055cc:	00c6161b          	slliw	a2,a2,0xc
    802055d0:	1602                	slli	a2,a2,0x20
    802055d2:	9201                	srli	a2,a2,0x20
        pageInsert(pagetable, va + i, page2pa(page), PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
    802055d4:	46f9                	li	a3,30
    802055d6:	965a                	add	a2,a2,s6
    802055d8:	c7043783          	ld	a5,-912(s0)
    802055dc:	014785b3          	add	a1,a5,s4
    802055e0:	8526                	mv	a0,s1
    802055e2:	ffffd097          	auipc	ra,0xffffd
    802055e6:	a38080e7          	jalr	-1480(ra) # 8020201a <pageInsert>
        r = MIN(PAGE_SIZE, segmentSize - i);
    802055ea:	c6843783          	ld	a5,-920(s0)
    802055ee:	41478c33          	sub	s8,a5,s4
    802055f2:	6785                	lui	a5,0x1
    802055f4:	f987f3e3          	bgeu	a5,s8,8020557a <exec+0x4a4>
    802055f8:	6c05                	lui	s8,0x1
    802055fa:	b741                	j	8020557a <exec+0x4a4>
        if (ph.offset <= elf.phoff && elf.phoff < ph.offset + ph.filesz) {
    802055fc:	cb043703          	ld	a4,-848(s0)
    80205600:	d0043783          	ld	a5,-768(s0)
    80205604:	00e7ed63          	bltu	a5,a4,8020561e <exec+0x548>
    80205608:	cc843683          	ld	a3,-824(s0)
    8020560c:	96ba                	add	a3,a3,a4
    8020560e:	00d7f863          	bgeu	a5,a3,8020561e <exec+0x548>
            phdr_addr = elf.phoff - ph.offset + ph.vaddr;
    80205612:	cb843683          	ld	a3,-840(s0)
    80205616:	97b6                	add	a5,a5,a3
    80205618:	8f99                	sub	a5,a5,a4
    8020561a:	c2f43823          	sd	a5,-976(s0)
    for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
    8020561e:	c5843783          	ld	a5,-936(s0)
    80205622:	0017861b          	addiw	a2,a5,1
    80205626:	c4c43c23          	sd	a2,-936(s0)
    8020562a:	c5043783          	ld	a5,-944(s0)
    8020562e:	0387879b          	addiw	a5,a5,56
    80205632:	d1845703          	lhu	a4,-744(s0)
    80205636:	0007069b          	sext.w	a3,a4
    8020563a:	08d65063          	bge	a2,a3,802056ba <exec+0x5e4>
        if (eread(de, 0, (u64)&ph, off, sizeof(ph)) != sizeof(ph)) {
    8020563e:	2781                	sext.w	a5,a5
    80205640:	c4f43823          	sd	a5,-944(s0)
    80205644:	03800713          	li	a4,56
    80205648:	86be                	mv	a3,a5
    8020564a:	ca840613          	addi	a2,s0,-856
    8020564e:	4581                	li	a1,0
    80205650:	854a                	mv	a0,s2
    80205652:	00003097          	auipc	ra,0x3
    80205656:	050080e7          	jalr	80(ra) # 802086a2 <eread>
    8020565a:	03800793          	li	a5,56
    8020565e:	baf515e3          	bne	a0,a5,80205208 <exec+0x132>
        if (ph.type != PT_LOAD)
    80205662:	ca842783          	lw	a5,-856(s0)
    80205666:	4705                	li	a4,1
    80205668:	fae79be3          	bne	a5,a4,8020561e <exec+0x548>
        if (ph.memsz < ph.filesz)
    8020566c:	cd043783          	ld	a5,-816(s0)
    80205670:	c6f43423          	sd	a5,-920(s0)
    80205674:	cc843c03          	ld	s8,-824(s0)
    80205678:	b987e8e3          	bltu	a5,s8,80205208 <exec+0x132>
        if (loadSegment(pagetable, ph.vaddr, ph.memsz, de, ph.offset, ph.filesz) < 0)
    8020567c:	cb843783          	ld	a5,-840(s0)
    80205680:	c6f43823          	sd	a5,-912(s0)
    80205684:	cb042703          	lw	a4,-848(s0)
    80205688:	c6e43023          	sd	a4,-928(s0)
    u64 offset = va - DOWN_ALIGN(va, PAGE_SIZE);
    8020568c:	c4843703          	ld	a4,-952(s0)
    80205690:	00e7fa33          	and	s4,a5,a4
    PhysicalPage* page = NULL;
    80205694:	c8043023          	sd	zero,-896(s0)
    if (offset > 0) {
    80205698:	c40a14e3          	bnez	s4,802052e0 <exec+0x20a>
    for (i = r; i < binSize; i += r) {
    8020569c:	c4043783          	ld	a5,-960(s0)
    802056a0:	00fc7c33          	and	s8,s8,a5
    802056a4:	680c0663          	beqz	s8,80205d30 <exec+0xc5a>
    return page - pages;
    802056a8:	001ddd17          	auipc	s10,0x1dd
    802056ac:	dd0d0d13          	addi	s10,s10,-560 # 803e2478 <pages>
    802056b0:	00009c97          	auipc	s9,0x9
    802056b4:	ec0c8c93          	addi	s9,s9,-320 # 8020e570 <__func__.1590+0x8>
    802056b8:	b361                	j	80205440 <exec+0x36a>
    for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
    802056ba:	d0042a03          	lw	s4,-768(s0)
    802056be:	60070763          	beqz	a4,80205ccc <exec+0xbf6>
    struct dirent* interpreter = NULL;
    802056c2:	4d01                	li	s10,0
    for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
    802056c4:	4a81                	li	s5,0
        if (ph.type == PT_GNU_PROPERTY) {
    802056c6:	6474eb37          	lui	s6,0x6474e
    802056ca:	553b0b13          	addi	s6,s6,1363 # 6474e553 <_start-0x1bab1aad>
        if (ph.type != PT_INTERP)
    802056ce:	4c0d                	li	s8,3
        if (ph.filesz > 4096 || ph.filesz < 2)
    802056d0:	6785                	lui	a5,0x1
    802056d2:	17f9                	addi	a5,a5,-2
    802056d4:	c6f43823          	sd	a5,-912(s0)
    802056d8:	a231                	j	802057e4 <exec+0x70e>
            panic("do not support PT_GNU_PROPERTY Segment");
    802056da:	00008697          	auipc	a3,0x8
    802056de:	68668693          	addi	a3,a3,1670 # 8020dd60 <__func__.1866+0x1f0>
    802056e2:	00009617          	auipc	a2,0x9
    802056e6:	e0e60613          	addi	a2,a2,-498 # 8020e4f0 <__func__.1977>
    802056ea:	16b00593          	li	a1,363
    802056ee:	00008517          	auipc	a0,0x8
    802056f2:	4ca50513          	addi	a0,a0,1226 # 8020dbb8 <__func__.1866+0x48>
    802056f6:	ffffb097          	auipc	ra,0xffffb
    802056fa:	460080e7          	jalr	1120(ra) # 80200b56 <_panic_>
            panic("interpreter path too long !");
    802056fe:	00008697          	auipc	a3,0x8
    80205702:	68a68693          	addi	a3,a3,1674 # 8020dd88 <__func__.1866+0x218>
    80205706:	00009617          	auipc	a2,0x9
    8020570a:	dea60613          	addi	a2,a2,-534 # 8020e4f0 <__func__.1977>
    8020570e:	17400593          	li	a1,372
    80205712:	00008517          	auipc	a0,0x8
    80205716:	4a650513          	addi	a0,a0,1190 # 8020dbb8 <__func__.1866+0x48>
    8020571a:	ffffb097          	auipc	ra,0xffffb
    8020571e:	43c080e7          	jalr	1084(ra) # 80200b56 <_panic_>
            panic("Alloc page for elf_interpreter error!");
    80205722:	00008697          	auipc	a3,0x8
    80205726:	68668693          	addi	a3,a3,1670 # 8020dda8 <__func__.1866+0x238>
    8020572a:	00009617          	auipc	a2,0x9
    8020572e:	dc660613          	addi	a2,a2,-570 # 8020e4f0 <__func__.1977>
    80205732:	17800593          	li	a1,376
    80205736:	00008517          	auipc	a0,0x8
    8020573a:	48250513          	addi	a0,a0,1154 # 8020dbb8 <__func__.1866+0x48>
    8020573e:	ffffb097          	auipc	ra,0xffffb
    80205742:	418080e7          	jalr	1048(ra) # 80200b56 <_panic_>
            panic("read execed file error");
    80205746:	00008697          	auipc	a3,0x8
    8020574a:	68a68693          	addi	a3,a3,1674 # 8020ddd0 <__func__.1866+0x260>
    8020574e:	00009617          	auipc	a2,0x9
    80205752:	da260613          	addi	a2,a2,-606 # 8020e4f0 <__func__.1977>
    80205756:	17c00593          	li	a1,380
    8020575a:	00008517          	auipc	a0,0x8
    8020575e:	45e50513          	addi	a0,a0,1118 # 8020dbb8 <__func__.1866+0x48>
    80205762:	ffffb097          	auipc	ra,0xffffb
    80205766:	3f4080e7          	jalr	1012(ra) # 80200b56 <_panic_>
            panic("interpreter path is not NULL terminated");
    8020576a:	00008697          	auipc	a3,0x8
    8020576e:	67e68693          	addi	a3,a3,1662 # 8020dde8 <__func__.1866+0x278>
    80205772:	00009617          	auipc	a2,0x9
    80205776:	d7e60613          	addi	a2,a2,-642 # 8020e4f0 <__func__.1977>
    8020577a:	18000593          	li	a1,384
    8020577e:	00008517          	auipc	a0,0x8
    80205782:	43a50513          	addi	a0,a0,1082 # 8020dbb8 <__func__.1866+0x48>
    80205786:	ffffb097          	auipc	ra,0xffffb
    8020578a:	3d0080e7          	jalr	976(ra) # 80200b56 <_panic_>
            panic("open interpreter error!");
    8020578e:	00008697          	auipc	a3,0x8
    80205792:	69268693          	addi	a3,a3,1682 # 8020de20 <__func__.1866+0x2b0>
    80205796:	00009617          	auipc	a2,0x9
    8020579a:	d5a60613          	addi	a2,a2,-678 # 8020e4f0 <__func__.1977>
    8020579e:	18700593          	li	a1,391
    802057a2:	00008517          	auipc	a0,0x8
    802057a6:	41650513          	addi	a0,a0,1046 # 8020dbb8 <__func__.1866+0x48>
    802057aa:	ffffb097          	auipc	ra,0xffffb
    802057ae:	3ac080e7          	jalr	940(ra) # 80200b56 <_panic_>
            panic("Alloc page for interpreter Elf_Header error!");
    802057b2:	00008697          	auipc	a3,0x8
    802057b6:	68668693          	addi	a3,a3,1670 # 8020de38 <__func__.1866+0x2c8>
    802057ba:	00009617          	auipc	a2,0x9
    802057be:	d3660613          	addi	a2,a2,-714 # 8020e4f0 <__func__.1977>
    802057c2:	18b00593          	li	a1,395
    802057c6:	00008517          	auipc	a0,0x8
    802057ca:	3f250513          	addi	a0,a0,1010 # 8020dbb8 <__func__.1866+0x48>
    802057ce:	ffffb097          	auipc	ra,0xffffb
    802057d2:	388080e7          	jalr	904(ra) # 80200b56 <_panic_>
    for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
    802057d6:	2a85                	addiw	s5,s5,1
    802057d8:	038a0a1b          	addiw	s4,s4,56
    802057dc:	d1845783          	lhu	a5,-744(s0)
    802057e0:	0efadc63          	bge	s5,a5,802058d8 <exec+0x802>
        if (eread(de, 0, (u64)&ph, off, sizeof(ph)) != sizeof(ph)) {
    802057e4:	2a01                	sext.w	s4,s4
    802057e6:	03800713          	li	a4,56
    802057ea:	86d2                	mv	a3,s4
    802057ec:	ca840613          	addi	a2,s0,-856
    802057f0:	4581                	li	a1,0
    802057f2:	854a                	mv	a0,s2
    802057f4:	00003097          	auipc	ra,0x3
    802057f8:	eae080e7          	jalr	-338(ra) # 802086a2 <eread>
    802057fc:	03800793          	li	a5,56
    80205800:	a0f514e3          	bne	a0,a5,80205208 <exec+0x132>
        if (ph.type == PT_GNU_PROPERTY) {
    80205804:	ca842783          	lw	a5,-856(s0)
    80205808:	ed6789e3          	beq	a5,s6,802056da <exec+0x604>
        if (ph.type != PT_INTERP)
    8020580c:	fd8795e3          	bne	a5,s8,802057d6 <exec+0x700>
        if (ph.memsz < ph.filesz)
    80205810:	cc843503          	ld	a0,-824(s0)
    80205814:	cd043783          	ld	a5,-816(s0)
    80205818:	9ea7e8e3          	bltu	a5,a0,80205208 <exec+0x132>
        if (ph.filesz > 4096 || ph.filesz < 2)
    8020581c:	ffe50793          	addi	a5,a0,-2
    80205820:	c7043703          	ld	a4,-912(s0)
    80205824:	ecf76de3          	bltu	a4,a5,802056fe <exec+0x628>
        char* elf_interpreter = kmalloc(ph.filesz, 0);
    80205828:	4581                	li	a1,0
    8020582a:	2501                	sext.w	a0,a0
    8020582c:	fffff097          	auipc	ra,0xfffff
    80205830:	5dc080e7          	jalr	1500(ra) # 80204e08 <kmalloc>
    80205834:	8caa                	mv	s9,a0
        if (!elf_interpreter)
    80205836:	ee0506e3          	beqz	a0,80205722 <exec+0x64c>
        retval = eread(de, 0, (u64)elf_interpreter, ph.offset, ph.filesz);
    8020583a:	cc842703          	lw	a4,-824(s0)
    8020583e:	cb042683          	lw	a3,-848(s0)
    80205842:	862a                	mv	a2,a0
    80205844:	4581                	li	a1,0
    80205846:	854a                	mv	a0,s2
    80205848:	00003097          	auipc	ra,0x3
    8020584c:	e5a080e7          	jalr	-422(ra) # 802086a2 <eread>
        if (retval < 0)
    80205850:	ee054be3          	bltz	a0,80205746 <exec+0x670>
        if (elf_interpreter[ph.filesz - 1] != '\0')
    80205854:	cc843783          	ld	a5,-824(s0)
    80205858:	97e6                	add	a5,a5,s9
    8020585a:	fff7c783          	lbu	a5,-1(a5) # fff <_start-0x801ff001>
    8020585e:	f791                	bnez	a5,8020576a <exec+0x694>
        interpreter = ename(AT_FDCWD, elf_interpreter);
    80205860:	85e6                	mv	a1,s9
    80205862:	f9c00513          	li	a0,-100
    80205866:	00004097          	auipc	ra,0x4
    8020586a:	ede080e7          	jalr	-290(ra) # 80209744 <ename>
    8020586e:	8d2a                	mv	s10,a0
        printf("inter path :%s\n",elf_interpreter);
    80205870:	85e6                	mv	a1,s9
    80205872:	00008517          	auipc	a0,0x8
    80205876:	59e50513          	addi	a0,a0,1438 # 8020de10 <__func__.1866+0x2a0>
    8020587a:	ffffb097          	auipc	ra,0xffffb
    8020587e:	250080e7          	jalr	592(ra) # 80200aca <printf>
        if (interpreter == NULL)
    80205882:	f00d06e3          	beqz	s10,8020578e <exec+0x6b8>
        interp_elf_ex = kmalloc(sizeof(*interp_elf_ex), 0);
    80205886:	4581                	li	a1,0
    80205888:	04000513          	li	a0,64
    8020588c:	fffff097          	auipc	ra,0xfffff
    80205890:	57c080e7          	jalr	1404(ra) # 80204e08 <kmalloc>
    80205894:	c2a43c23          	sd	a0,-968(s0)
        if (!interp_elf_ex) {
    80205898:	dd09                	beqz	a0,802057b2 <exec+0x6dc>
        retval = eread(interpreter, 0, (u64)interp_elf_ex, 0,
    8020589a:	04000713          	li	a4,64
    8020589e:	4681                	li	a3,0
    802058a0:	c3843603          	ld	a2,-968(s0)
    802058a4:	4581                	li	a1,0
    802058a6:	856a                	mv	a0,s10
    802058a8:	00003097          	auipc	ra,0x3
    802058ac:	dfa080e7          	jalr	-518(ra) # 802086a2 <eread>
        if (retval < 0)
    802058b0:	f20553e3          	bgez	a0,802057d6 <exec+0x700>
            panic("read interpreter file error");
    802058b4:	00008697          	auipc	a3,0x8
    802058b8:	5b468693          	addi	a3,a3,1460 # 8020de68 <__func__.1866+0x2f8>
    802058bc:	00009617          	auipc	a2,0x9
    802058c0:	c3460613          	addi	a2,a2,-972 # 8020e4f0 <__func__.1977>
    802058c4:	19200593          	li	a1,402
    802058c8:	00008517          	auipc	a0,0x8
    802058cc:	2f050513          	addi	a0,a0,752 # 8020dbb8 <__func__.1866+0x48>
    802058d0:	ffffb097          	auipc	ra,0xffffb
    802058d4:	286080e7          	jalr	646(ra) # 80200b56 <_panic_>
    printf("end of find interpreter");
    802058d8:	00008517          	auipc	a0,0x8
    802058dc:	5b050513          	addi	a0,a0,1456 # 8020de88 <__func__.1866+0x318>
    802058e0:	ffffb097          	auipc	ra,0xffffb
    802058e4:	1ea080e7          	jalr	490(ra) # 80200aca <printf>
    if (interpreter) {
    802058e8:	3e0d0a63          	beqz	s10,80205cdc <exec+0xc06>
        u64 interp_Phdrs_size = sizeof(Phdr) * interp_elf_ex->phnum;
    802058ec:	c3843a83          	ld	s5,-968(s0)
    802058f0:	038ada03          	lhu	s4,56(s5) # 1038 <_start-0x801fefc8>
        Phdr* interp_elf_phdata = kmalloc(interp_Phdrs_size, 0);
    802058f4:	03800793          	li	a5,56
    802058f8:	02fa0a33          	mul	s4,s4,a5
    802058fc:	4581                	li	a1,0
    802058fe:	8552                	mv	a0,s4
    80205900:	fffff097          	auipc	ra,0xfffff
    80205904:	508080e7          	jalr	1288(ra) # 80204e08 <kmalloc>
    80205908:	89aa                	mv	s3,a0
        eread(interpreter, 0, (u64)interp_elf_phdata, interp_elf_ex->phoff,
    8020590a:	8752                	mv	a4,s4
    8020590c:	020aa683          	lw	a3,32(s5)
    80205910:	862a                	mv	a2,a0
    80205912:	4581                	li	a1,0
    80205914:	856a                	mv	a0,s10
    80205916:	00003097          	auipc	ra,0x3
    8020591a:	d8c080e7          	jalr	-628(ra) # 802086a2 <eread>
        elf_entry = load_elf_interp(pagetable, interp_elf_ex, interpreter, load_bias,
    8020591e:	874e                	mv	a4,s3
    80205920:	4681                	li	a3,0
    80205922:	866a                	mv	a2,s10
    80205924:	85d6                	mv	a1,s5
    80205926:	8526                	mv	a0,s1
    80205928:	fffff097          	auipc	ra,0xfffff
    8020592c:	58a080e7          	jalr	1418(ra) # 80204eb2 <load_elf_interp>
    80205930:	8d2a                	mv	s10,a0
        elf_entry += interp_elf_ex->entry;
    80205932:	018aba83          	ld	s5,24(s5)
    80205936:	9aaa                	add	s5,s5,a0
    printf("end of load interpreter");
    80205938:	00008517          	auipc	a0,0x8
    8020593c:	56850513          	addi	a0,a0,1384 # 8020dea0 <__func__.1866+0x330>
    80205940:	ffffb097          	auipc	ra,0xffffb
    80205944:	18a080e7          	jalr	394(ra) # 80200aca <printf>
    eunlock(de);
    80205948:	854a                	mv	a0,s2
    8020594a:	00003097          	auipc	ra,0x3
    8020594e:	71e080e7          	jalr	1822(ra) # 80209068 <eunlock>
    eput(de);
    80205952:	854a                	mv	a0,s2
    80205954:	00003097          	auipc	ra,0x3
    80205958:	776080e7          	jalr	1910(ra) # 802090ca <eput>
    p = myproc();
    8020595c:	ffffd097          	auipc	ra,0xffffd
    80205960:	0f0080e7          	jalr	240(ra) # 80202a4c <myproc>
    80205964:	c6a43823          	sd	a0,-912(s0)
    if (pageAlloc(&page)){
    80205968:	ca040513          	addi	a0,s0,-864
    8020596c:	ffffc097          	auipc	ra,0xffffc
    80205970:	312080e7          	jalr	786(ra) # 80201c7e <pageAlloc>
    80205974:	cd01                	beqz	a0,8020598c <exec+0x8b6>
    p->pgdir = old_pagetable;
    80205976:	c7043783          	ld	a5,-912(s0)
    8020597a:	1777b423          	sd	s7,360(a5)
        pgdirFree((u64*)pagetable);
    8020597e:	8526                	mv	a0,s1
    80205980:	ffffc097          	auipc	ra,0xffffc
    80205984:	592080e7          	jalr	1426(ra) # 80201f12 <pgdirFree>
    return -1;
    80205988:	557d                	li	a0,-1
    8020598a:	b065                	j	80205232 <exec+0x15c>
    8020598c:	ca043783          	ld	a5,-864(s0)
    80205990:	001dd717          	auipc	a4,0x1dd
    80205994:	ae870713          	addi	a4,a4,-1304 # 803e2478 <pages>
    80205998:	8f99                	sub	a5,a5,a4
    8020599a:	878d                	srai	a5,a5,0x3
    8020599c:	00009717          	auipc	a4,0x9
    802059a0:	bd473703          	ld	a4,-1068(a4) # 8020e570 <__func__.1590+0x8>
    802059a4:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802059a8:	00c7979b          	slliw	a5,a5,0xc
    802059ac:	1782                	slli	a5,a5,0x20
    802059ae:	9381                	srli	a5,a5,0x20
    pageInsert(pagetable, stackbase, page2pa(page),
    802059b0:	46f9                	li	a3,30
    802059b2:	4605                	li	a2,1
    802059b4:	067e                	slli	a2,a2,0x1f
    802059b6:	963e                	add	a2,a2,a5
    802059b8:	040005b7          	lui	a1,0x4000
    802059bc:	15f5                	addi	a1,a1,-3
    802059be:	05b2                	slli	a1,a1,0xc
    802059c0:	8526                	mv	a0,s1
    802059c2:	ffffc097          	auipc	ra,0xffffc
    802059c6:	658080e7          	jalr	1624(ra) # 8020201a <pageInsert>
    for (argc = 0; argv[argc]; argc++) {
    802059ca:	c7843783          	ld	a5,-904(s0)
    802059ce:	6388                	ld	a0,0(a5)
    802059d0:	cd2d                	beqz	a0,80205a4a <exec+0x974>
    802059d2:	d2840c13          	addi	s8,s0,-728
    802059d6:	e2840c93          	addi	s9,s0,-472
    sp = USER_STACK_TOP;
    802059da:	02000a37          	lui	s4,0x2000
    802059de:	1a7d                	addi	s4,s4,-1
    802059e0:	0a36                	slli	s4,s4,0xd
    for (argc = 0; argv[argc]; argc++) {
    802059e2:	4901                	li	s2,0
        if (sp < stackbase)
    802059e4:	fcfff9b7          	lui	s3,0xfcfff
    802059e8:	09ba                	slli	s3,s3,0xe
    802059ea:	01a9d993          	srli	s3,s3,0x1a
        sp -= strlen(argv[argc]) + 1;
    802059ee:	00001097          	auipc	ra,0x1
    802059f2:	bb0080e7          	jalr	-1104(ra) # 8020659e <strlen>
    802059f6:	0015079b          	addiw	a5,a0,1
    802059fa:	40fa0a33          	sub	s4,s4,a5
        sp -= sp % 16;  // riscv sp must be 16-byte aligned
    802059fe:	ff0a7a13          	andi	s4,s4,-16
        if (sp < stackbase)
    80205a02:	f749fae3          	bgeu	s3,s4,80205976 <exec+0x8a0>
        if (copyout(pagetable, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
    80205a06:	c7843783          	ld	a5,-904(s0)
    80205a0a:	0007bb03          	ld	s6,0(a5)
    80205a0e:	855a                	mv	a0,s6
    80205a10:	00001097          	auipc	ra,0x1
    80205a14:	b8e080e7          	jalr	-1138(ra) # 8020659e <strlen>
    80205a18:	0015069b          	addiw	a3,a0,1
    80205a1c:	865a                	mv	a2,s6
    80205a1e:	85d2                	mv	a1,s4
    80205a20:	8526                	mv	a0,s1
    80205a22:	ffffd097          	auipc	ra,0xffffd
    80205a26:	a28080e7          	jalr	-1496(ra) # 8020244a <copyout>
    80205a2a:	f40546e3          	bltz	a0,80205976 <exec+0x8a0>
        ustack[argc + 1] = sp;
    80205a2e:	0905                	addi	s2,s2,1
    80205a30:	014c3023          	sd	s4,0(s8) # 1000 <_start-0x801ff000>
    for (argc = 0; argv[argc]; argc++) {
    80205a34:	c7843783          	ld	a5,-904(s0)
    80205a38:	07a1                	addi	a5,a5,8
    80205a3a:	c6f43c23          	sd	a5,-904(s0)
    80205a3e:	6388                	ld	a0,0(a5)
    80205a40:	c911                	beqz	a0,80205a54 <exec+0x97e>
        if (argc >= MAXARG)
    80205a42:	0c21                	addi	s8,s8,8
    80205a44:	fb9c15e3          	bne	s8,s9,802059ee <exec+0x918>
    80205a48:	b73d                	j	80205976 <exec+0x8a0>
    sp = USER_STACK_TOP;
    80205a4a:	02000a37          	lui	s4,0x2000
    80205a4e:	1a7d                	addi	s4,s4,-1
    80205a50:	0a36                	slli	s4,s4,0xd
    for (argc = 0; argv[argc]; argc++) {
    80205a52:	4901                	li	s2,0
    ustack[0] = argc;
    80205a54:	d3243023          	sd	s2,-736(s0)
    ustack[argc + 1] = 0;
    80205a58:	00190793          	addi	a5,s2,1
    80205a5c:	078e                	slli	a5,a5,0x3
    80205a5e:	f9040713          	addi	a4,s0,-112
    80205a62:	97ba                	add	a5,a5,a4
    80205a64:	d807b823          	sd	zero,-624(a5)
    char *envVariable[2] = {"va=a", "vb=b"};
    80205a68:	00008797          	auipc	a5,0x8
    80205a6c:	45078793          	addi	a5,a5,1104 # 8020deb8 <__func__.1866+0x348>
    80205a70:	c8f43823          	sd	a5,-880(s0)
    80205a74:	00008797          	auipc	a5,0x8
    80205a78:	44c78793          	addi	a5,a5,1100 # 8020dec0 <__func__.1866+0x350>
    80205a7c:	c8f43c23          	sd	a5,-872(s0)
    for (i = 0; i < envCount; i++) {
    80205a80:	00391993          	slli	s3,s2,0x3
    80205a84:	d2040793          	addi	a5,s0,-736
    80205a88:	01378b33          	add	s6,a5,s3
    char *envVariable[2] = {"va=a", "vb=b"};
    80205a8c:	4c01                	li	s8,0
        if (sp < stackbase)
    80205a8e:	fcfff7b7          	lui	a5,0xfcfff
    80205a92:	07ba                	slli	a5,a5,0xe
    80205a94:	83e9                	srli	a5,a5,0x1a
    80205a96:	c6f43c23          	sd	a5,-904(s0)
        sp -= strlen(envVariable[i]) + 1;
    80205a9a:	c9040793          	addi	a5,s0,-880
    80205a9e:	97e2                	add	a5,a5,s8
    80205aa0:	0007bc83          	ld	s9,0(a5) # fffffffffcfff000 <bssEnd+0xffffffff7c9c4000>
    80205aa4:	8566                	mv	a0,s9
    80205aa6:	00001097          	auipc	ra,0x1
    80205aaa:	af8080e7          	jalr	-1288(ra) # 8020659e <strlen>
    80205aae:	0015079b          	addiw	a5,a0,1
    80205ab2:	40fa0a33          	sub	s4,s4,a5
        sp -= sp % 16;  // riscv sp must be 16-byte aligned
    80205ab6:	ff0a7a13          	andi	s4,s4,-16
        if (sp < stackbase)
    80205aba:	c7843783          	ld	a5,-904(s0)
    80205abe:	eb47fce3          	bgeu	a5,s4,80205976 <exec+0x8a0>
        if (copyout(pagetable, sp, envVariable[i], strlen(envVariable[i]) + 1) < 0)
    80205ac2:	8566                	mv	a0,s9
    80205ac4:	00001097          	auipc	ra,0x1
    80205ac8:	ada080e7          	jalr	-1318(ra) # 8020659e <strlen>
    80205acc:	0015069b          	addiw	a3,a0,1
    80205ad0:	8666                	mv	a2,s9
    80205ad2:	85d2                	mv	a1,s4
    80205ad4:	8526                	mv	a0,s1
    80205ad6:	ffffd097          	auipc	ra,0xffffd
    80205ada:	974080e7          	jalr	-1676(ra) # 8020244a <copyout>
    80205ade:	e8054ce3          	bltz	a0,80205976 <exec+0x8a0>
        ustack[argc + 2 + i] = sp;
    80205ae2:	014b3823          	sd	s4,16(s6)
    for (i = 0; i < envCount; i++) {
    80205ae6:	0b21                	addi	s6,s6,8
    80205ae8:	0c21                	addi	s8,s8,8
    80205aea:	47c1                	li	a5,16
    80205aec:	fafc17e3          	bne	s8,a5,80205a9a <exec+0x9c4>
    ustack[argc + 2 + envCount] = 0;
    80205af0:	00490793          	addi	a5,s2,4
    80205af4:	078e                	slli	a5,a5,0x3
    80205af6:	f9040713          	addi	a4,s0,-112
    80205afa:	97ba                	add	a5,a5,a4
    80205afc:	d807b823          	sd	zero,-624(a5)
    sp -= 16;
    80205b00:	1a41                	addi	s4,s4,-16
    if (sp < stackbase)
    80205b02:	fcfff7b7          	lui	a5,0xfcfff
    80205b06:	07ba                	slli	a5,a5,0xe
    80205b08:	83e9                	srli	a5,a5,0x1a
    80205b0a:	e747f6e3          	bgeu	a5,s4,80205976 <exec+0x8a0>
    if (copyout(pagetable, sp, (char *)k_rand_bytes, sizeof(k_rand_bytes)) < 0)
    80205b0e:	46c1                	li	a3,16
    80205b10:	0000a617          	auipc	a2,0xa
    80205b14:	d2060613          	addi	a2,a2,-736 # 8020f830 <k_rand_bytes.2005>
    80205b18:	85d2                	mv	a1,s4
    80205b1a:	8526                	mv	a0,s1
    80205b1c:	ffffd097          	auipc	ra,0xffffd
    80205b20:	92e080e7          	jalr	-1746(ra) # 8020244a <copyout>
    80205b24:	e40549e3          	bltz	a0,80205976 <exec+0x8a0>
    u64* elf_info = ustack + (argc + 3 + envCount);
    80205b28:	d2040b13          	addi	s6,s0,-736
    80205b2c:	02898993          	addi	s3,s3,40 # fffffffffcfff028 <bssEnd+0xffffffff7c9c4028>
    80205b30:	99da                	add	s3,s3,s6
    printf("before NEW AUX ENT");
    80205b32:	00008517          	auipc	a0,0x8
    80205b36:	39650513          	addi	a0,a0,918 # 8020dec8 <__func__.1866+0x358>
    80205b3a:	ffffb097          	auipc	ra,0xffffb
    80205b3e:	f90080e7          	jalr	-112(ra) # 80200aca <printf>
	NEW_AUX_ENT(AT_HWCAP, ELF_HWCAP); //CPU的extension信息
    80205b42:	47c1                	li	a5,16
    80205b44:	00f9b023          	sd	a5,0(s3)
    80205b48:	0009b423          	sd	zero,8(s3)
	NEW_AUX_ENT(AT_PAGESZ, ELF_EXEC_PAGESIZE); //PAGE_SIZE
    80205b4c:	4799                	li	a5,6
    80205b4e:	00f9b823          	sd	a5,16(s3)
    80205b52:	6785                	lui	a5,0x1
    80205b54:	00f9bc23          	sd	a5,24(s3)
	NEW_AUX_ENT(AT_CLKTCK, CLOCKS_PER_SEC);//与时钟相关的，copy linux 100
    80205b58:	47c5                	li	a5,17
    80205b5a:	02f9b023          	sd	a5,32(s3)
    80205b5e:	06400793          	li	a5,100
    80205b62:	02f9b423          	sd	a5,40(s3)
	NEW_AUX_ENT(AT_PHDR, phdr_addr);// Phdr * phdr_addr; 指向用户态。
    80205b66:	478d                	li	a5,3
    80205b68:	02f9b823          	sd	a5,48(s3)
    80205b6c:	c3043783          	ld	a5,-976(s0)
    80205b70:	02f9bc23          	sd	a5,56(s3)
	NEW_AUX_ENT(AT_PHENT, sizeof(Phdr)); //每个 Phdr 的大小
    80205b74:	4791                	li	a5,4
    80205b76:	04f9b023          	sd	a5,64(s3)
    80205b7a:	03800793          	li	a5,56
    80205b7e:	04f9b423          	sd	a5,72(s3)
	NEW_AUX_ENT(AT_PHNUM, elf.phnum); //phdr的数量
    80205b82:	4795                	li	a5,5
    80205b84:	04f9b823          	sd	a5,80(s3)
    80205b88:	d1845783          	lhu	a5,-744(s0)
    80205b8c:	04f9bc23          	sd	a5,88(s3)
	NEW_AUX_ENT(AT_BASE, interp_load_addr);
    80205b90:	479d                	li	a5,7
    80205b92:	06f9b023          	sd	a5,96(s3)
    80205b96:	07a9b423          	sd	s10,104(s3)
	NEW_AUX_ENT(AT_FLAGS, flags);
    80205b9a:	47a1                	li	a5,8
    80205b9c:	06f9b823          	sd	a5,112(s3)
    80205ba0:	4785                	li	a5,1
    80205ba2:	06f9bc23          	sd	a5,120(s3)
	NEW_AUX_ENT(AT_ENTRY, elf_entry);//源程序的入口
    80205ba6:	4725                	li	a4,9
    80205ba8:	08e9b023          	sd	a4,128(s3)
    80205bac:	0959b423          	sd	s5,136(s3)
	NEW_AUX_ENT(AT_UID, from_kuid_munged(cred->user_ns, cred->uid));// 0
    80205bb0:	472d                	li	a4,11
    80205bb2:	08e9b823          	sd	a4,144(s3)
    80205bb6:	0809bc23          	sd	zero,152(s3)
	NEW_AUX_ENT(AT_EUID, from_kuid_munged(cred->user_ns, cred->euid));// 0
    80205bba:	4731                	li	a4,12
    80205bbc:	0ae9b023          	sd	a4,160(s3)
    80205bc0:	0a09b423          	sd	zero,168(s3)
	NEW_AUX_ENT(AT_GID, from_kgid_munged(cred->user_ns, cred->gid));// 0
    80205bc4:	4735                	li	a4,13
    80205bc6:	0ae9b823          	sd	a4,176(s3)
    80205bca:	0a09bc23          	sd	zero,184(s3)
	NEW_AUX_ENT(AT_EGID, from_kgid_munged(cred->user_ns, cred->egid));// 0
    80205bce:	4739                	li	a4,14
    80205bd0:	0ce9b023          	sd	a4,192(s3)
    80205bd4:	0c09b423          	sd	zero,200(s3)
	NEW_AUX_ENT(AT_SECURE, secureexec);//安全，默认1
    80205bd8:	475d                	li	a4,23
    80205bda:	0ce9b823          	sd	a4,208(s3)
    80205bde:	0cf9bc23          	sd	a5,216(s3)
	NEW_AUX_ENT(AT_RANDOM, u_rand_bytes);//16byte随机数的地址。
    80205be2:	47e5                	li	a5,25
    80205be4:	0ef9b023          	sd	a5,224(s3)
    80205be8:	0f49b423          	sd	s4,232(s3)
	NEW_AUX_ENT(AT_EXECFN, ustack[1]/*用户态地址*/); /* 传递给动态连接器该程序的名称 */
    80205bec:	47fd                	li	a5,31
    80205bee:	0ef9b823          	sd	a5,240(s3)
    80205bf2:	d2843783          	ld	a5,-728(s0)
    80205bf6:	0ef9bc23          	sd	a5,248(s3)
    NEW_AUX_ENT(0, 0);
    80205bfa:	1009b023          	sd	zero,256(s3)
    80205bfe:	1009b423          	sd	zero,264(s3)
    80205c02:	11098993          	addi	s3,s3,272
    printf("copy size = %x\n", (u64)(elf_info-ustack));
    80205c06:	416989b3          	sub	s3,s3,s6
    80205c0a:	4039d993          	srai	s3,s3,0x3
    80205c0e:	85ce                	mv	a1,s3
    80205c10:	00008517          	auipc	a0,0x8
    80205c14:	2d050513          	addi	a0,a0,720 # 8020dee0 <__func__.1866+0x370>
    80205c18:	ffffb097          	auipc	ra,0xffffb
    80205c1c:	eb2080e7          	jalr	-334(ra) # 80200aca <printf>
    sp -= elf_info - ustack; /* now elf_info is the stack top */
    80205c20:	413a0a33          	sub	s4,s4,s3
    sp -= sp % 16;
    80205c24:	ff0a7a13          	andi	s4,s4,-16
    if (sp < stackbase)
    80205c28:	fcfff7b7          	lui	a5,0xfcfff
    80205c2c:	07ba                	slli	a5,a5,0xe
    80205c2e:	83e9                	srli	a5,a5,0x1a
    80205c30:	d547f3e3          	bgeu	a5,s4,80205976 <exec+0x8a0>
    if (copyout(pagetable, sp, (char*)ustack, elf_info - ustack) < 0)
    80205c34:	86ce                	mv	a3,s3
    80205c36:	865a                	mv	a2,s6
    80205c38:	85d2                	mv	a1,s4
    80205c3a:	8526                	mv	a0,s1
    80205c3c:	ffffd097          	auipc	ra,0xffffd
    80205c40:	80e080e7          	jalr	-2034(ra) # 8020244a <copyout>
    80205c44:	d20549e3          	bltz	a0,80205976 <exec+0x8a0>
    printf("end push args\n");
    80205c48:	00008517          	auipc	a0,0x8
    80205c4c:	2a850513          	addi	a0,a0,680 # 8020def0 <__func__.1866+0x380>
    80205c50:	ffffb097          	auipc	ra,0xffffb
    80205c54:	e7a080e7          	jalr	-390(ra) # 80200aca <printf>
    getHartTrapFrame()->a1 = sp;
    80205c58:	00000097          	auipc	ra,0x0
    80205c5c:	602080e7          	jalr	1538(ra) # 8020625a <getHartTrapFrame>
    80205c60:	07453c23          	sd	s4,120(a0)
    printf("elf_entry = %lx\n",elf_entry);
    80205c64:	85d6                	mv	a1,s5
    80205c66:	00008517          	auipc	a0,0x8
    80205c6a:	29a50513          	addi	a0,a0,666 # 8020df00 <__func__.1866+0x390>
    80205c6e:	ffffb097          	auipc	ra,0xffffb
    80205c72:	e5c080e7          	jalr	-420(ra) # 80200aca <printf>
    getHartTrapFrame()->epc = elf_entry;  // initial program counter = main
    80205c76:	00000097          	auipc	ra,0x0
    80205c7a:	5e4080e7          	jalr	1508(ra) # 8020625a <getHartTrapFrame>
    80205c7e:	01553c23          	sd	s5,24(a0)
    getHartTrapFrame()->sp = sp;          // initial stack pointer
    80205c82:	00000097          	auipc	ra,0x0
    80205c86:	5d8080e7          	jalr	1496(ra) # 8020625a <getHartTrapFrame>
    80205c8a:	03453823          	sd	s4,48(a0)
    pgdirFree(oldpagetable);
    80205c8e:	856e                	mv	a0,s11
    80205c90:	ffffc097          	auipc	ra,0xffffc
    80205c94:	282080e7          	jalr	642(ra) # 80201f12 <pgdirFree>
    asm volatile("fence.i");
    80205c98:	0000100f          	fence.i
    printf("out exec");
    80205c9c:	00008517          	auipc	a0,0x8
    80205ca0:	27c50513          	addi	a0,a0,636 # 8020df18 <__func__.1866+0x3a8>
    80205ca4:	ffffb097          	auipc	ra,0xffffb
    80205ca8:	e26080e7          	jalr	-474(ra) # 80200aca <printf>
    return argc;  // this ends up in a0, the first argument to main(argc, argv)
    80205cac:	0009051b          	sext.w	a0,s2
    80205cb0:	d82ff06f          	j	80205232 <exec+0x15c>
            eunlock(de);
    80205cb4:	854a                	mv	a0,s2
    80205cb6:	00003097          	auipc	ra,0x3
    80205cba:	3b2080e7          	jalr	946(ra) # 80209068 <eunlock>
    80205cbe:	d68ff06f          	j	80205226 <exec+0x150>
        return -1;
    80205cc2:	557d                	li	a0,-1
    80205cc4:	d6eff06f          	j	80205232 <exec+0x15c>
    u64 phdr_addr = 0; // virtual address in user space, point to the program header. We will pass 'phdr_addr' to ld.so
    80205cc8:	c2043823          	sd	zero,-976(s0)
    printf("end of find interpreter");
    80205ccc:	00008517          	auipc	a0,0x8
    80205cd0:	1bc50513          	addi	a0,a0,444 # 8020de88 <__func__.1866+0x318>
    80205cd4:	ffffb097          	auipc	ra,0xffffb
    80205cd8:	df6080e7          	jalr	-522(ra) # 80200aca <printf>
        elf_entry = elf.entry;
    80205cdc:	cf843a83          	ld	s5,-776(s0)
    u64 interp_load_addr = 0;
    80205ce0:	4d01                	li	s10,0
    80205ce2:	b999                	j	80205938 <exec+0x862>
        page = pa2page(pageLookup(pagetable, va + i, &entry));
    80205ce4:	c8043023          	sd	zero,-896(s0)
            if (pageAlloc(&page) != 0) {
    80205ce8:	c8040513          	addi	a0,s0,-896
    80205cec:	ffffc097          	auipc	ra,0xffffc
    80205cf0:	f92080e7          	jalr	-110(ra) # 80201c7e <pageAlloc>
    80205cf4:	82051fe3          	bnez	a0,80205532 <exec+0x45c>
    return page - pages;
    80205cf8:	c8043603          	ld	a2,-896(s0)
    80205cfc:	001dc797          	auipc	a5,0x1dc
    80205d00:	77c78793          	addi	a5,a5,1916 # 803e2478 <pages>
    80205d04:	8e1d                	sub	a2,a2,a5
    80205d06:	860d                	srai	a2,a2,0x3
    80205d08:	00009797          	auipc	a5,0x9
    80205d0c:	8687b783          	ld	a5,-1944(a5) # 8020e570 <__func__.1590+0x8>
    80205d10:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80205d14:	00c6161b          	slliw	a2,a2,0xc
    80205d18:	1602                	slli	a2,a2,0x20
    80205d1a:	9201                	srli	a2,a2,0x20
            pageInsert(pagetable, va + i, page2pa(page), PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
    80205d1c:	46f9                	li	a3,30
    80205d1e:	965a                	add	a2,a2,s6
    80205d20:	85e6                	mv	a1,s9
    80205d22:	8526                	mv	a0,s1
    80205d24:	ffffc097          	auipc	ra,0xffffc
    80205d28:	2f6080e7          	jalr	758(ra) # 8020201a <pageInsert>
    80205d2c:	fbcff06f          	j	802054e8 <exec+0x412>
    for (i = r; i < binSize; i += r) {
    80205d30:	8a62                	mv	s4,s8
    int r = 0;    
    80205d32:	4a81                	li	s5,0
    80205d34:	e56ff06f          	j	8020538a <exec+0x2b4>
        page = pa2page(pageLookup(pagetable, va, &entry));
    80205d38:	c8043023          	sd	zero,-896(s0)
            if (pageAlloc(&page) < 0) {
    80205d3c:	c8040513          	addi	a0,s0,-896
    80205d40:	ffffc097          	auipc	ra,0xffffc
    80205d44:	f3e080e7          	jalr	-194(ra) # 80201c7e <pageAlloc>
    80205d48:	e4054f63          	bltz	a0,802053a6 <exec+0x2d0>
    return page - pages;
    80205d4c:	c8043603          	ld	a2,-896(s0)
    80205d50:	001dc797          	auipc	a5,0x1dc
    80205d54:	72878793          	addi	a5,a5,1832 # 803e2478 <pages>
    80205d58:	8e1d                	sub	a2,a2,a5
    80205d5a:	860d                	srai	a2,a2,0x3
    80205d5c:	00009797          	auipc	a5,0x9
    80205d60:	8147b783          	ld	a5,-2028(a5) # 8020e570 <__func__.1590+0x8>
    80205d64:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80205d68:	00c6161b          	slliw	a2,a2,0xc
    80205d6c:	1602                	slli	a2,a2,0x20
    80205d6e:	9201                	srli	a2,a2,0x20
            pageInsert(pagetable, va, page2pa(page), PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
    80205d70:	46f9                	li	a3,30
    80205d72:	965a                	add	a2,a2,s6
    80205d74:	c7043583          	ld	a1,-912(s0)
    80205d78:	8526                	mv	a0,s1
    80205d7a:	ffffc097          	auipc	ra,0xffffc
    80205d7e:	2a0080e7          	jalr	672(ra) # 8020201a <pageInsert>
    80205d82:	d96ff06f          	j	80205318 <exec+0x242>

0000000080205d86 <sys_exec>:

#define MAXPATH      128   // maximum file path name
u64 sys_exec(void) {
    80205d86:	7141                	addi	sp,sp,-496
    80205d88:	f786                	sd	ra,488(sp)
    80205d8a:	f3a2                	sd	s0,480(sp)
    80205d8c:	efa6                	sd	s1,472(sp)
    80205d8e:	ebca                	sd	s2,464(sp)
    80205d90:	e7ce                	sd	s3,456(sp)
    80205d92:	e3d2                	sd	s4,448(sp)
    80205d94:	ff56                	sd	s5,440(sp)
    80205d96:	fb5a                	sd	s6,432(sp)
    80205d98:	f75e                	sd	s7,424(sp)
    80205d9a:	f362                	sd	s8,416(sp)
    80205d9c:	1b80                	addi	s0,sp,496
    char path[MAXPATH], *argv[MAXARG];
    int i;
    u64 uargv, uarg;

    if (argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0) {
    80205d9e:	08000613          	li	a2,128
    80205da2:	f3040593          	addi	a1,s0,-208
    80205da6:	4501                	li	a0,0
    80205da8:	ffffe097          	auipc	ra,0xffffe
    80205dac:	16c080e7          	jalr	364(ra) # 80203f14 <argstr>
        return -1;
    80205db0:	597d                	li	s2,-1
    if (argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0) {
    80205db2:	16054263          	bltz	a0,80205f16 <sys_exec+0x190>
    80205db6:	e2840593          	addi	a1,s0,-472
    80205dba:	4505                	li	a0,1
    80205dbc:	ffffe097          	auipc	ra,0xffffe
    80205dc0:	028080e7          	jalr	40(ra) # 80203de4 <argaddr>
    80205dc4:	14054963          	bltz	a0,80205f16 <sys_exec+0x190>
    }
    memset(argv, 0, sizeof(argv));
    80205dc8:	10000613          	li	a2,256
    80205dcc:	4581                	li	a1,0
    80205dce:	e3040513          	addi	a0,s0,-464
    80205dd2:	00000097          	auipc	ra,0x0
    80205dd6:	648080e7          	jalr	1608(ra) # 8020641a <memset>
    for (i = 0;; i++) {
        if (i >= NELEM(argv)) {
    80205dda:	e3040493          	addi	s1,s0,-464
    memset(argv, 0, sizeof(argv));
    80205dde:	89a6                	mv	s3,s1
    80205de0:	4901                	li	s2,0
    return page - pages;
    80205de2:	001dcb17          	auipc	s6,0x1dc
    80205de6:	696b0b13          	addi	s6,s6,1686 # 803e2478 <pages>
    80205dea:	00008a97          	auipc	s5,0x8
    80205dee:	786a8a93          	addi	s5,s5,1926 # 8020e570 <__func__.1590+0x8>
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80205df2:	4a05                	li	s4,1
    80205df4:	0a7e                	slli	s4,s4,0x1f
        if (i >= NELEM(argv)) {
    80205df6:	02000b93          	li	s7,32
    80205dfa:	00090c1b          	sext.w	s8,s2
            goto bad;
        }
        if (fetchaddr(uargv + sizeof(u64) * i, (u64*)&uarg) < 0) {
    80205dfe:	00391513          	slli	a0,s2,0x3
    80205e02:	e2040593          	addi	a1,s0,-480
    80205e06:	e2843783          	ld	a5,-472(s0)
    80205e0a:	953e                	add	a0,a0,a5
    80205e0c:	ffffe097          	auipc	ra,0xffffe
    80205e10:	f78080e7          	jalr	-136(ra) # 80203d84 <fetchaddr>
    80205e14:	04054963          	bltz	a0,80205e66 <sys_exec+0xe0>
            goto bad;
        }
        if (uarg == 0) {
    80205e18:	e2043783          	ld	a5,-480(s0)
    80205e1c:	c7c9                	beqz	a5,80205ea6 <sys_exec+0x120>
            argv[i] = 0;
            break;
        }
        PhysicalPage *page;
        if(pageAlloc(&page))
    80205e1e:	e1840513          	addi	a0,s0,-488
    80205e22:	ffffc097          	auipc	ra,0xffffc
    80205e26:	e5c080e7          	jalr	-420(ra) # 80201c7e <pageAlloc>
    80205e2a:	ed15                	bnez	a0,80205e66 <sys_exec+0xe0>
    return page - pages;
    80205e2c:	e1843583          	ld	a1,-488(s0)
    80205e30:	416585b3          	sub	a1,a1,s6
    80205e34:	858d                	srai	a1,a1,0x3
    80205e36:	000ab783          	ld	a5,0(s5)
    80205e3a:	02f585b3          	mul	a1,a1,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80205e3e:	00c5959b          	slliw	a1,a1,0xc
    80205e42:	1582                	slli	a1,a1,0x20
    80205e44:	9181                	srli	a1,a1,0x20
    80205e46:	95d2                	add	a1,a1,s4
            goto bad;
        argv[i] = (char *)page2pa(page);
    80205e48:	00b9b023          	sd	a1,0(s3)
        if (argv[i] == 0)
            goto bad;
        if (fetchstr(uarg, argv[i], PGSIZE) < 0)
    80205e4c:	6605                	lui	a2,0x1
    80205e4e:	e2043503          	ld	a0,-480(s0)
    80205e52:	ffffe097          	auipc	ra,0xffffe
    80205e56:	078080e7          	jalr	120(ra) # 80203eca <fetchstr>
    80205e5a:	00054663          	bltz	a0,80205e66 <sys_exec+0xe0>
        if (i >= NELEM(argv)) {
    80205e5e:	0905                	addi	s2,s2,1
    80205e60:	09a1                	addi	s3,s3,8
    80205e62:	f9791ce3          	bne	s2,s7,80205dfa <sys_exec+0x74>

    printf("out sys_exec \n");
    return ret;

bad:
    for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
    80205e66:	10048a93          	addi	s5,s1,256
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80205e6a:	80000a37          	lui	s4,0x80000
    return pages + ppn;
    80205e6e:	597d                	li	s2,-1
    80205e70:	02095913          	srli	s2,s2,0x20
    80205e74:	001dc997          	auipc	s3,0x1dc
    80205e78:	60498993          	addi	s3,s3,1540 # 803e2478 <pages>
    80205e7c:	609c                	ld	a5,0(s1)
    80205e7e:	cbd9                	beqz	a5,80205f14 <sys_exec+0x18e>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80205e80:	97d2                	add	a5,a5,s4
    80205e82:	83b1                	srli	a5,a5,0xc
    return pages + ppn;
    80205e84:	0127f7b3          	and	a5,a5,s2
    80205e88:	00179513          	slli	a0,a5,0x1
    80205e8c:	97aa                	add	a5,a5,a0
    80205e8e:	00379513          	slli	a0,a5,0x3
        pageFree(pa2page((u64)argv[i]));
    80205e92:	954e                	add	a0,a0,s3
    80205e94:	ffffc097          	auipc	ra,0xffffc
    80205e98:	fc0080e7          	jalr	-64(ra) # 80201e54 <pageFree>
    for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
    80205e9c:	04a1                	addi	s1,s1,8
    80205e9e:	fc9a9fe3          	bne	s5,s1,80205e7c <sys_exec+0xf6>
    return -1;
    80205ea2:	597d                	li	s2,-1
    80205ea4:	a88d                	j	80205f16 <sys_exec+0x190>
            argv[i] = 0;
    80205ea6:	003c1793          	slli	a5,s8,0x3
    80205eaa:	fb040713          	addi	a4,s0,-80
    80205eae:	97ba                	add	a5,a5,a4
    80205eb0:	e807b023          	sd	zero,-384(a5)
    int ret = exec(path, argv);
    80205eb4:	e3040593          	addi	a1,s0,-464
    80205eb8:	f3040513          	addi	a0,s0,-208
    80205ebc:	fffff097          	auipc	ra,0xfffff
    80205ec0:	21a080e7          	jalr	538(ra) # 802050d6 <exec>
    80205ec4:	892a                	mv	s2,a0
    for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
    80205ec6:	10048b13          	addi	s6,s1,256
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80205eca:	80000ab7          	lui	s5,0x80000
    return pages + ppn;
    80205ece:	59fd                	li	s3,-1
    80205ed0:	0209d993          	srli	s3,s3,0x20
    80205ed4:	001dca17          	auipc	s4,0x1dc
    80205ed8:	5a4a0a13          	addi	s4,s4,1444 # 803e2478 <pages>
    80205edc:	609c                	ld	a5,0(s1)
    80205ede:	c395                	beqz	a5,80205f02 <sys_exec+0x17c>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80205ee0:	97d6                	add	a5,a5,s5
    80205ee2:	83b1                	srli	a5,a5,0xc
    return pages + ppn;
    80205ee4:	0137f7b3          	and	a5,a5,s3
    80205ee8:	00179513          	slli	a0,a5,0x1
    80205eec:	97aa                	add	a5,a5,a0
    80205eee:	00379513          	slli	a0,a5,0x3
        pageFree(pa2page((u64)argv[i]));
    80205ef2:	9552                	add	a0,a0,s4
    80205ef4:	ffffc097          	auipc	ra,0xffffc
    80205ef8:	f60080e7          	jalr	-160(ra) # 80201e54 <pageFree>
    for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
    80205efc:	04a1                	addi	s1,s1,8
    80205efe:	fd649fe3          	bne	s1,s6,80205edc <sys_exec+0x156>
    printf("out sys_exec \n");
    80205f02:	00008517          	auipc	a0,0x8
    80205f06:	02650513          	addi	a0,a0,38 # 8020df28 <__func__.1866+0x3b8>
    80205f0a:	ffffb097          	auipc	ra,0xffffb
    80205f0e:	bc0080e7          	jalr	-1088(ra) # 80200aca <printf>
    return ret;
    80205f12:	a011                	j	80205f16 <sys_exec+0x190>
    return -1;
    80205f14:	597d                	li	s2,-1
}
    80205f16:	854a                	mv	a0,s2
    80205f18:	70be                	ld	ra,488(sp)
    80205f1a:	741e                	ld	s0,480(sp)
    80205f1c:	64fe                	ld	s1,472(sp)
    80205f1e:	695e                	ld	s2,464(sp)
    80205f20:	69be                	ld	s3,456(sp)
    80205f22:	6a1e                	ld	s4,448(sp)
    80205f24:	7afa                	ld	s5,440(sp)
    80205f26:	7b5a                	ld	s6,432(sp)
    80205f28:	7bba                	ld	s7,424(sp)
    80205f2a:	7c1a                	ld	s8,416(sp)
    80205f2c:	617d                	addi	sp,sp,496
    80205f2e:	8082                	ret

0000000080205f30 <interruptPush>:
#include "Interrupt.h"
#include "Riscv.h"
#include "Hart.h"
#include "Driver.h"

void interruptPush(void) {
    80205f30:	1101                	addi	sp,sp,-32
    80205f32:	ec06                	sd	ra,24(sp)
    80205f34:	e822                	sd	s0,16(sp)
    80205f36:	e426                	sd	s1,8(sp)
    80205f38:	1000                	addi	s0,sp,32
#define SSTATUS_SIE (1L << 1)  // Supervisor Interrupt Enable
#define SSTATUS_UIE (1L << 0)  // User Interrupt Enable

static inline u64 r_sstatus() {
    u64 x;
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80205f3a:	100024f3          	csrr	s1,sstatus
    80205f3e:	100027f3          	csrr	a5,sstatus
	w_sstatus(r_sstatus() | SSTATUS_SIE);
}

// disable device interrupts
static inline void intr_off() {
	w_sstatus(r_sstatus() & ~SSTATUS_SIE);
    80205f42:	9bf5                	andi	a5,a5,-3
    asm volatile("csrw sstatus, %0" : : "r" (x));
    80205f44:	10079073          	csrw	sstatus,a5
    int oldInterruptEnable = intr_get();
    intr_off();

    struct Hart* hart = myHart();
    80205f48:	00000097          	auipc	ra,0x0
    80205f4c:	2f6080e7          	jalr	758(ra) # 8020623e <myHart>
    if (hart->interruptLayer == 0)
    80205f50:	411c                	lw	a5,0(a0)
    80205f52:	e781                	bnez	a5,80205f5a <interruptPush+0x2a>
}

// are device interrupts enabled?
static inline bool intr_get() {
	u64 x = r_sstatus();
	return (x & SSTATUS_SIE) != 0;
    80205f54:	8085                	srli	s1,s1,0x1
    80205f56:	8885                	andi	s1,s1,1
        hart->lastInterruptEnable = oldInterruptEnable;
    80205f58:	c144                	sw	s1,4(a0)
    hart->interruptLayer++;
    80205f5a:	2785                	addiw	a5,a5,1
    80205f5c:	c11c                	sw	a5,0(a0)
}
    80205f5e:	60e2                	ld	ra,24(sp)
    80205f60:	6442                	ld	s0,16(sp)
    80205f62:	64a2                	ld	s1,8(sp)
    80205f64:	6105                	addi	sp,sp,32
    80205f66:	8082                	ret

0000000080205f68 <interruptPop>:

void interruptPop(void) {
    80205f68:	1141                	addi	sp,sp,-16
    80205f6a:	e406                	sd	ra,8(sp)
    80205f6c:	e022                	sd	s0,0(sp)
    80205f6e:	0800                	addi	s0,sp,16
    struct Hart* hart = myHart();
    80205f70:	00000097          	auipc	ra,0x0
    80205f74:	2ce080e7          	jalr	718(ra) # 8020623e <myHart>
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80205f78:	100027f3          	csrr	a5,sstatus
	return (x & SSTATUS_SIE) != 0;
    80205f7c:	8b89                	andi	a5,a5,2
    if (intr_get()) {
    80205f7e:	e78d                	bnez	a5,80205fa8 <interruptPop+0x40>
        panic("Interrupt bit still have!\n");
    }

    if (hart->interruptLayer < 0) {
    80205f80:	411c                	lw	a5,0(a0)
    80205f82:	0407c463          	bltz	a5,80205fca <interruptPop+0x62>
        panic("Interrupt close error! Not match!\n");
    }

    hart->interruptLayer--;
    80205f86:	37fd                	addiw	a5,a5,-1
    80205f88:	0007871b          	sext.w	a4,a5
    80205f8c:	c11c                	sw	a5,0(a0)
    if (hart->interruptLayer == 0 && hart->lastInterruptEnable)
    80205f8e:	eb09                	bnez	a4,80205fa0 <interruptPop+0x38>
    80205f90:	415c                	lw	a5,4(a0)
    80205f92:	c799                	beqz	a5,80205fa0 <interruptPop+0x38>
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80205f94:	100027f3          	csrr	a5,sstatus
	w_sstatus(r_sstatus() | SSTATUS_SIE);
    80205f98:	0027e793          	ori	a5,a5,2
    asm volatile("csrw sstatus, %0" : : "r" (x));
    80205f9c:	10079073          	csrw	sstatus,a5
        intr_on();
    80205fa0:	60a2                	ld	ra,8(sp)
    80205fa2:	6402                	ld	s0,0(sp)
    80205fa4:	0141                	addi	sp,sp,16
    80205fa6:	8082                	ret
        panic("Interrupt bit still have!\n");
    80205fa8:	00008697          	auipc	a3,0x8
    80205fac:	fa068693          	addi	a3,a3,-96 # 8020df48 <__func__.1879+0x10>
    80205fb0:	00008617          	auipc	a2,0x8
    80205fb4:	ff060613          	addi	a2,a2,-16 # 8020dfa0 <__func__.1194>
    80205fb8:	45cd                	li	a1,19
    80205fba:	00008517          	auipc	a0,0x8
    80205fbe:	fae50513          	addi	a0,a0,-82 # 8020df68 <__func__.1879+0x30>
    80205fc2:	ffffb097          	auipc	ra,0xffffb
    80205fc6:	b94080e7          	jalr	-1132(ra) # 80200b56 <_panic_>
        panic("Interrupt close error! Not match!\n");
    80205fca:	00008697          	auipc	a3,0x8
    80205fce:	fae68693          	addi	a3,a3,-82 # 8020df78 <__func__.1879+0x40>
    80205fd2:	00008617          	auipc	a2,0x8
    80205fd6:	fce60613          	addi	a2,a2,-50 # 8020dfa0 <__func__.1194>
    80205fda:	45dd                	li	a1,23
    80205fdc:	00008517          	auipc	a0,0x8
    80205fe0:	f8c50513          	addi	a0,a0,-116 # 8020df68 <__func__.1879+0x30>
    80205fe4:	ffffb097          	auipc	ra,0xffffb
    80205fe8:	b72080e7          	jalr	-1166(ra) # 80200b56 <_panic_>

0000000080205fec <initsleeplock>:
int holdingsleep(struct Sleeplock* lk) {
    return 1;
}
#else

void initsleeplock(struct Sleeplock* lk, char* name) {
    80205fec:	1101                	addi	sp,sp,-32
    80205fee:	ec06                	sd	ra,24(sp)
    80205ff0:	e822                	sd	s0,16(sp)
    80205ff2:	e426                	sd	s1,8(sp)
    80205ff4:	e04a                	sd	s2,0(sp)
    80205ff6:	1000                	addi	s0,sp,32
    80205ff8:	84aa                	mv	s1,a0
    80205ffa:	892e                	mv	s2,a1
    initLock(&lk->lk, "sleep lock");
    80205ffc:	00008597          	auipc	a1,0x8
    80206000:	fb458593          	addi	a1,a1,-76 # 8020dfb0 <__func__.1194+0x10>
    80206004:	0521                	addi	a0,a0,8
    80206006:	00000097          	auipc	ra,0x0
    8020600a:	114080e7          	jalr	276(ra) # 8020611a <initLock>
    lk->name = name;
    8020600e:	0324b023          	sd	s2,32(s1)
    lk->locked = 0;
    80206012:	0004a023          	sw	zero,0(s1)
    lk->pid = 0;
    80206016:	0204a423          	sw	zero,40(s1)
}
    8020601a:	60e2                	ld	ra,24(sp)
    8020601c:	6442                	ld	s0,16(sp)
    8020601e:	64a2                	ld	s1,8(sp)
    80206020:	6902                	ld	s2,0(sp)
    80206022:	6105                	addi	sp,sp,32
    80206024:	8082                	ret

0000000080206026 <acquiresleep>:

void acquiresleep(struct Sleeplock* lk) {
    80206026:	1101                	addi	sp,sp,-32
    80206028:	ec06                	sd	ra,24(sp)
    8020602a:	e822                	sd	s0,16(sp)
    8020602c:	e426                	sd	s1,8(sp)
    8020602e:	e04a                	sd	s2,0(sp)
    80206030:	1000                	addi	s0,sp,32
    80206032:	84aa                	mv	s1,a0
    acquireLock(&lk->lk);
    80206034:	00850913          	addi	s2,a0,8
    80206038:	854a                	mv	a0,s2
    8020603a:	00000097          	auipc	ra,0x0
    8020603e:	12a080e7          	jalr	298(ra) # 80206164 <acquireLock>
    while (lk->locked) {
    80206042:	409c                	lw	a5,0(s1)
    80206044:	cb89                	beqz	a5,80206056 <acquiresleep+0x30>
        // MSG_PRINT("in while");
        sleep(lk, &lk->lk);
    80206046:	85ca                	mv	a1,s2
    80206048:	8526                	mv	a0,s1
    8020604a:	ffffe097          	auipc	ra,0xffffe
    8020604e:	936080e7          	jalr	-1738(ra) # 80203980 <sleep>
    while (lk->locked) {
    80206052:	409c                	lw	a5,0(s1)
    80206054:	fbed                	bnez	a5,80206046 <acquiresleep+0x20>
    }
    lk->locked = 1;
    80206056:	4785                	li	a5,1
    80206058:	c09c                	sw	a5,0(s1)
    lk->pid = myproc()->id;
    8020605a:	ffffd097          	auipc	ra,0xffffd
    8020605e:	9f2080e7          	jalr	-1550(ra) # 80202a4c <myproc>
    80206062:	17052783          	lw	a5,368(a0)
    80206066:	d49c                	sw	a5,40(s1)
    releaseLock(&lk->lk);
    80206068:	854a                	mv	a0,s2
    8020606a:	00000097          	auipc	ra,0x0
    8020606e:	176080e7          	jalr	374(ra) # 802061e0 <releaseLock>
}
    80206072:	60e2                	ld	ra,24(sp)
    80206074:	6442                	ld	s0,16(sp)
    80206076:	64a2                	ld	s1,8(sp)
    80206078:	6902                	ld	s2,0(sp)
    8020607a:	6105                	addi	sp,sp,32
    8020607c:	8082                	ret

000000008020607e <releasesleep>:

void releasesleep(struct Sleeplock* lk) {
    8020607e:	1101                	addi	sp,sp,-32
    80206080:	ec06                	sd	ra,24(sp)
    80206082:	e822                	sd	s0,16(sp)
    80206084:	e426                	sd	s1,8(sp)
    80206086:	e04a                	sd	s2,0(sp)
    80206088:	1000                	addi	s0,sp,32
    8020608a:	84aa                	mv	s1,a0
    acquireLock(&lk->lk);
    8020608c:	00850913          	addi	s2,a0,8
    80206090:	854a                	mv	a0,s2
    80206092:	00000097          	auipc	ra,0x0
    80206096:	0d2080e7          	jalr	210(ra) # 80206164 <acquireLock>
    lk->locked = 0;
    8020609a:	0004a023          	sw	zero,0(s1)
    lk->pid = 0;
    8020609e:	0204a423          	sw	zero,40(s1)
    wakeup(lk);
    802060a2:	8526                	mv	a0,s1
    802060a4:	ffffd097          	auipc	ra,0xffffd
    802060a8:	1aa080e7          	jalr	426(ra) # 8020324e <wakeup>
    releaseLock(&lk->lk);
    802060ac:	854a                	mv	a0,s2
    802060ae:	00000097          	auipc	ra,0x0
    802060b2:	132080e7          	jalr	306(ra) # 802061e0 <releaseLock>
}
    802060b6:	60e2                	ld	ra,24(sp)
    802060b8:	6442                	ld	s0,16(sp)
    802060ba:	64a2                	ld	s1,8(sp)
    802060bc:	6902                	ld	s2,0(sp)
    802060be:	6105                	addi	sp,sp,32
    802060c0:	8082                	ret

00000000802060c2 <holdingsleep>:

int holdingsleep(struct Sleeplock* lk) {
    802060c2:	7179                	addi	sp,sp,-48
    802060c4:	f406                	sd	ra,40(sp)
    802060c6:	f022                	sd	s0,32(sp)
    802060c8:	ec26                	sd	s1,24(sp)
    802060ca:	e84a                	sd	s2,16(sp)
    802060cc:	e44e                	sd	s3,8(sp)
    802060ce:	1800                	addi	s0,sp,48
    802060d0:	84aa                	mv	s1,a0
    int r;

    acquireLock(&lk->lk);
    802060d2:	00850913          	addi	s2,a0,8
    802060d6:	854a                	mv	a0,s2
    802060d8:	00000097          	auipc	ra,0x0
    802060dc:	08c080e7          	jalr	140(ra) # 80206164 <acquireLock>
    r = lk->locked && (lk->pid == myproc()->id);
    802060e0:	409c                	lw	a5,0(s1)
    802060e2:	ef99                	bnez	a5,80206100 <holdingsleep+0x3e>
    802060e4:	4481                	li	s1,0
    releaseLock(&lk->lk);
    802060e6:	854a                	mv	a0,s2
    802060e8:	00000097          	auipc	ra,0x0
    802060ec:	0f8080e7          	jalr	248(ra) # 802061e0 <releaseLock>
    return r;
}
    802060f0:	8526                	mv	a0,s1
    802060f2:	70a2                	ld	ra,40(sp)
    802060f4:	7402                	ld	s0,32(sp)
    802060f6:	64e2                	ld	s1,24(sp)
    802060f8:	6942                	ld	s2,16(sp)
    802060fa:	69a2                	ld	s3,8(sp)
    802060fc:	6145                	addi	sp,sp,48
    802060fe:	8082                	ret
    r = lk->locked && (lk->pid == myproc()->id);
    80206100:	0284a983          	lw	s3,40(s1)
    80206104:	ffffd097          	auipc	ra,0xffffd
    80206108:	948080e7          	jalr	-1720(ra) # 80202a4c <myproc>
    8020610c:	17052483          	lw	s1,368(a0)
    80206110:	413484b3          	sub	s1,s1,s3
    80206114:	0014b493          	seqz	s1,s1
    80206118:	b7f9                	j	802060e6 <holdingsleep+0x24>

000000008020611a <initLock>:
#include "Spinlock.h"
#include "Hart.h"
#include "Interrupt.h"
#include "Driver.h"

void initLock(struct Spinlock* lock, char* name) {
    8020611a:	1141                	addi	sp,sp,-16
    8020611c:	e422                	sd	s0,8(sp)
    8020611e:	0800                	addi	s0,sp,16
    lock->name = name;
    80206120:	e50c                	sd	a1,8(a0)
    lock->locked = 0;
    80206122:	00050023          	sb	zero,0(a0)
    lock->hart = 0;
    80206126:	00053823          	sd	zero,16(a0)
    lock->times = 0;
    8020612a:	00052223          	sw	zero,4(a0)
}
    8020612e:	6422                	ld	s0,8(sp)
    80206130:	0141                	addi	sp,sp,16
    80206132:	8082                	ret

0000000080206134 <holding>:
    interruptPop();
}

int holding(struct Spinlock* lock) {
    int r;
    r = (lock->locked && lock->hart == myHart());
    80206134:	00054783          	lbu	a5,0(a0)
    80206138:	e399                	bnez	a5,8020613e <holding+0xa>
    8020613a:	4501                	li	a0,0
    return r;
    8020613c:	8082                	ret
int holding(struct Spinlock* lock) {
    8020613e:	1101                	addi	sp,sp,-32
    80206140:	ec06                	sd	ra,24(sp)
    80206142:	e822                	sd	s0,16(sp)
    80206144:	e426                	sd	s1,8(sp)
    80206146:	1000                	addi	s0,sp,32
    r = (lock->locked && lock->hart == myHart());
    80206148:	6904                	ld	s1,16(a0)
    8020614a:	00000097          	auipc	ra,0x0
    8020614e:	0f4080e7          	jalr	244(ra) # 8020623e <myHart>
    80206152:	40a48533          	sub	a0,s1,a0
    80206156:	00153513          	seqz	a0,a0
    8020615a:	60e2                	ld	ra,24(sp)
    8020615c:	6442                	ld	s0,16(sp)
    8020615e:	64a2                	ld	s1,8(sp)
    80206160:	6105                	addi	sp,sp,32
    80206162:	8082                	ret

0000000080206164 <acquireLock>:
void acquireLock(struct Spinlock* lock) {
    80206164:	1101                	addi	sp,sp,-32
    80206166:	ec06                	sd	ra,24(sp)
    80206168:	e822                	sd	s0,16(sp)
    8020616a:	e426                	sd	s1,8(sp)
    8020616c:	1000                	addi	s0,sp,32
    8020616e:	84aa                	mv	s1,a0
    interruptPush();
    80206170:	00000097          	auipc	ra,0x0
    80206174:	dc0080e7          	jalr	-576(ra) # 80205f30 <interruptPush>
    if (holding(lock)) {
    80206178:	8526                	mv	a0,s1
    8020617a:	00000097          	auipc	ra,0x0
    8020617e:	fba080e7          	jalr	-70(ra) # 80206134 <holding>
    80206182:	ed0d                	bnez	a0,802061bc <acquireLock+0x58>
    while(__sync_lock_test_and_set(&lock->locked, 1) != 0);
    80206184:	ffc4f713          	andi	a4,s1,-4
    80206188:	0034f693          	andi	a3,s1,3
    8020618c:	0036969b          	slliw	a3,a3,0x3
    80206190:	4605                	li	a2,1
    80206192:	00d6163b          	sllw	a2,a2,a3
    80206196:	44c727af          	amoor.w.aq	a5,a2,(a4)
    8020619a:	00d7d7bb          	srlw	a5,a5,a3
    8020619e:	0ff7f793          	andi	a5,a5,255
    802061a2:	fbf5                	bnez	a5,80206196 <acquireLock+0x32>
    __sync_synchronize();
    802061a4:	0ff0000f          	fence
    lock->hart = myHart();
    802061a8:	00000097          	auipc	ra,0x0
    802061ac:	096080e7          	jalr	150(ra) # 8020623e <myHart>
    802061b0:	e888                	sd	a0,16(s1)
}
    802061b2:	60e2                	ld	ra,24(sp)
    802061b4:	6442                	ld	s0,16(sp)
    802061b6:	64a2                	ld	s1,8(sp)
    802061b8:	6105                	addi	sp,sp,32
    802061ba:	8082                	ret
        panic("You have acquire the lock! The lock is %s\n", lock->name);
    802061bc:	6498                	ld	a4,8(s1)
    802061be:	00008697          	auipc	a3,0x8
    802061c2:	e0268693          	addi	a3,a3,-510 # 8020dfc0 <__func__.1194+0x20>
    802061c6:	00008617          	auipc	a2,0x8
    802061ca:	e6a60613          	addi	a2,a2,-406 # 8020e030 <__func__.1089>
    802061ce:	45c9                	li	a1,18
    802061d0:	00008517          	auipc	a0,0x8
    802061d4:	e2050513          	addi	a0,a0,-480 # 8020dff0 <__func__.1194+0x50>
    802061d8:	ffffb097          	auipc	ra,0xffffb
    802061dc:	97e080e7          	jalr	-1666(ra) # 80200b56 <_panic_>

00000000802061e0 <releaseLock>:
void releaseLock(struct Spinlock* lock) {
    802061e0:	1101                	addi	sp,sp,-32
    802061e2:	ec06                	sd	ra,24(sp)
    802061e4:	e822                	sd	s0,16(sp)
    802061e6:	e426                	sd	s1,8(sp)
    802061e8:	1000                	addi	s0,sp,32
    802061ea:	84aa                	mv	s1,a0
    if (!holding(lock)) {
    802061ec:	00000097          	auipc	ra,0x0
    802061f0:	f48080e7          	jalr	-184(ra) # 80206134 <holding>
    802061f4:	c115                	beqz	a0,80206218 <releaseLock+0x38>
    lock->hart = 0;
    802061f6:	0004b823          	sd	zero,16(s1)
    __sync_synchronize();
    802061fa:	0ff0000f          	fence
    __sync_lock_release(&lock->locked);
    802061fe:	0ff0000f          	fence
    80206202:	00048023          	sb	zero,0(s1)
    interruptPop();
    80206206:	00000097          	auipc	ra,0x0
    8020620a:	d62080e7          	jalr	-670(ra) # 80205f68 <interruptPop>
}
    8020620e:	60e2                	ld	ra,24(sp)
    80206210:	6442                	ld	s0,16(sp)
    80206212:	64a2                	ld	s1,8(sp)
    80206214:	6105                	addi	sp,sp,32
    80206216:	8082                	ret
        panic("You have release the lock! The lock is %s\n", lock->name);
    80206218:	6498                	ld	a4,8(s1)
    8020621a:	00008697          	auipc	a3,0x8
    8020621e:	de668693          	addi	a3,a3,-538 # 8020e000 <__func__.1194+0x60>
    80206222:	00008617          	auipc	a2,0x8
    80206226:	e1e60613          	addi	a2,a2,-482 # 8020e040 <__func__.1096>
    8020622a:	02700593          	li	a1,39
    8020622e:	00008517          	auipc	a0,0x8
    80206232:	dc250513          	addi	a0,a0,-574 # 8020dff0 <__func__.1194+0x50>
    80206236:	ffffb097          	auipc	ra,0xffffb
    8020623a:	920080e7          	jalr	-1760(ra) # 80200b56 <_panic_>

000000008020623e <myHart>:
#include "Process.h"
#include "MemoryConfig.h"

struct Hart harts[HART_TOTAL_NUMBER];

inline struct Hart* myHart() {
    8020623e:	1141                	addi	sp,sp,-16
    80206240:	e422                	sd	s0,8(sp)
    80206242:	0800                	addi	s0,sp,16
#define HART_TOTAL_NUMBER 5

// which hart (core) is this?
static inline u64 r_hartid() {
    u64 x;
    asm volatile("mv %0, tp" : "=r" (x) );
    80206244:	8792                	mv	a5,tp
    int r = r_hartid();
    return &harts[r];
    80206246:	2781                	sext.w	a5,a5
    80206248:	078e                	slli	a5,a5,0x3
}
    8020624a:	00417517          	auipc	a0,0x417
    8020624e:	35e50513          	addi	a0,a0,862 # 8061d5a8 <harts>
    80206252:	953e                	add	a0,a0,a5
    80206254:	6422                	ld	s0,8(sp)
    80206256:	0141                	addi	sp,sp,16
    80206258:	8082                	ret

000000008020625a <getHartTrapFrame>:

Trapframe* getHartTrapFrame() {
    8020625a:	1141                	addi	sp,sp,-16
    8020625c:	e422                	sd	s0,8(sp)
    8020625e:	0800                	addi	s0,sp,16
    80206260:	8792                	mv	a5,tp
    return (Trapframe*)(TRAMPOLINE_BASE + PAGE_SIZE + r_hartid() * sizeof(Trapframe)); 
    80206262:	00379513          	slli	a0,a5,0x3
    80206266:	953e                	add	a0,a0,a5
    80206268:	0516                	slli	a0,a0,0x5
    8020626a:	040007b7          	lui	a5,0x4000
}
    8020626e:	17fd                	addi	a5,a5,-1
    80206270:	07b2                	slli	a5,a5,0xc
    80206272:	953e                	add	a0,a0,a5
    80206274:	6422                	ld	s0,8(sp)
    80206276:	0141                	addi	sp,sp,16
    80206278:	8082                	ret

000000008020627a <getHartKernelTopSp>:

u64 getHartKernelTopSp() {
    8020627a:	1141                	addi	sp,sp,-16
    8020627c:	e422                	sd	s0,8(sp)
    8020627e:	0800                	addi	s0,sp,16
    80206280:	8792                	mv	a5,tp
    extern char kernelStack[];
    return (u64)kernelStack + KERNEL_STACK_SIZE * (r_hartid() + 1);
    80206282:	0785                	addi	a5,a5,1
    80206284:	07c2                	slli	a5,a5,0x10
    80206286:	0018b517          	auipc	a0,0x18b
    8020628a:	d7a50513          	addi	a0,a0,-646 # 80391000 <_stack>
    8020628e:	953e                	add	a0,a0,a5
    80206290:	6422                	ld	s0,8(sp)
    80206292:	0141                	addi	sp,sp,16
    80206294:	8082                	ret

0000000080206296 <signProccessMask>:
#include <Signal.h>
#include <Riscv.h>
#include <Process.h>
#include <Page.h>

int signProccessMask(u64 how, SignalSet *newSet) {
    80206296:	1101                	addi	sp,sp,-32
    80206298:	ec06                	sd	ra,24(sp)
    8020629a:	e822                	sd	s0,16(sp)
    8020629c:	e426                	sd	s1,8(sp)
    8020629e:	e04a                	sd	s2,0(sp)
    802062a0:	1000                	addi	s0,sp,32
    802062a2:	84aa                	mv	s1,a0
    802062a4:	892e                	mv	s2,a1
    Process *p = myproc();
    802062a6:	ffffc097          	auipc	ra,0xffffc
    802062aa:	7a6080e7          	jalr	1958(ra) # 80202a4c <myproc>
    switch (how) {
    802062ae:	4785                	li	a5,1
    802062b0:	00f48d63          	beq	s1,a5,802062ca <signProccessMask+0x34>
    802062b4:	4789                	li	a5,2
    802062b6:	02f48e63          	beq	s1,a5,802062f2 <signProccessMask+0x5c>
    802062ba:	c09d                	beqz	s1,802062e0 <signProccessMask+0x4a>
    802062bc:	557d                	li	a0,-1
        p->blocked = *newSet;
        return 0;
    default:
        return -1;
    }
}
    802062be:	60e2                	ld	ra,24(sp)
    802062c0:	6442                	ld	s0,16(sp)
    802062c2:	64a2                	ld	s1,8(sp)
    802062c4:	6902                	ld	s2,0(sp)
    802062c6:	6105                	addi	sp,sp,32
    802062c8:	8082                	ret
        p->blocked |= ~(*newSet);
    802062ca:	00093783          	ld	a5,0(s2)
    802062ce:	fff7c713          	not	a4,a5
    802062d2:	5d853783          	ld	a5,1496(a0)
    802062d6:	8fd9                	or	a5,a5,a4
    802062d8:	5cf53c23          	sd	a5,1496(a0)
        return 0;
    802062dc:	4501                	li	a0,0
    802062de:	b7c5                	j	802062be <signProccessMask+0x28>
        p->blocked &= *newSet;
    802062e0:	5d853783          	ld	a5,1496(a0)
    802062e4:	00093703          	ld	a4,0(s2)
    802062e8:	8ff9                	and	a5,a5,a4
    802062ea:	5cf53c23          	sd	a5,1496(a0)
        return 0;
    802062ee:	4501                	li	a0,0
    802062f0:	b7f9                	j	802062be <signProccessMask+0x28>
        p->blocked = *newSet;
    802062f2:	00093783          	ld	a5,0(s2)
    802062f6:	5cf53c23          	sd	a5,1496(a0)
        return 0;
    802062fa:	4501                	li	a0,0
    802062fc:	b7c9                	j	802062be <signProccessMask+0x28>

00000000802062fe <doSignalAction>:

int doSignalAction(int sig, u64 act, u64 oldAction) {
    802062fe:	7179                	addi	sp,sp,-48
    80206300:	f406                	sd	ra,40(sp)
    80206302:	f022                	sd	s0,32(sp)
    80206304:	ec26                	sd	s1,24(sp)
    80206306:	e84a                	sd	s2,16(sp)
    80206308:	e44e                	sd	s3,8(sp)
    8020630a:	1800                	addi	s0,sp,48
    8020630c:	84aa                	mv	s1,a0
    8020630e:	892e                	mv	s2,a1
    80206310:	89b2                	mv	s3,a2
    Process *p = myproc();
    80206312:	ffffc097          	auipc	ra,0xffffc
    80206316:	73a080e7          	jalr	1850(ra) # 80202a4c <myproc>
    if (sig < 1 || sig > SIGNAL_COUNT) {
    8020631a:	fff4871b          	addiw	a4,s1,-1
    8020631e:	03f00793          	li	a5,63
    80206322:	06e7e963          	bltu	a5,a4,80206394 <doSignalAction+0x96>
        return -1;
    }
	SignalAction *k = getSignalHandler(p) + (sig - 1);
    80206326:	ffffc097          	auipc	ra,0xffffc
    8020632a:	7b6080e7          	jalr	1974(ra) # 80202adc <getSignalHandler>
    8020632e:	00249793          	slli	a5,s1,0x2
    80206332:	97a6                	add	a5,a5,s1
    80206334:	078e                	slli	a5,a5,0x3
    80206336:	fd878793          	addi	a5,a5,-40 # 3ffffd8 <_start-0x7c200028>
    8020633a:	00f504b3          	add	s1,a0,a5
    if (oldAction) {
    8020633e:	00099c63          	bnez	s3,80206356 <doSignalAction+0x58>
        copyout(myproc()->pgdir, oldAction, (char*)k, sizeof(SignalAction));
    }
	if (act) {
		copyin(myproc()->pgdir, (char *)k, act, sizeof(SignalAction));
	}
	return 0;
    80206342:	4501                	li	a0,0
	if (act) {
    80206344:	02091863          	bnez	s2,80206374 <doSignalAction+0x76>
}
    80206348:	70a2                	ld	ra,40(sp)
    8020634a:	7402                	ld	s0,32(sp)
    8020634c:	64e2                	ld	s1,24(sp)
    8020634e:	6942                	ld	s2,16(sp)
    80206350:	69a2                	ld	s3,8(sp)
    80206352:	6145                	addi	sp,sp,48
    80206354:	8082                	ret
        copyout(myproc()->pgdir, oldAction, (char*)k, sizeof(SignalAction));
    80206356:	ffffc097          	auipc	ra,0xffffc
    8020635a:	6f6080e7          	jalr	1782(ra) # 80202a4c <myproc>
    8020635e:	02800693          	li	a3,40
    80206362:	8626                	mv	a2,s1
    80206364:	85ce                	mv	a1,s3
    80206366:	16853503          	ld	a0,360(a0)
    8020636a:	ffffc097          	auipc	ra,0xffffc
    8020636e:	0e0080e7          	jalr	224(ra) # 8020244a <copyout>
    80206372:	bfc1                	j	80206342 <doSignalAction+0x44>
		copyin(myproc()->pgdir, (char *)k, act, sizeof(SignalAction));
    80206374:	ffffc097          	auipc	ra,0xffffc
    80206378:	6d8080e7          	jalr	1752(ra) # 80202a4c <myproc>
    8020637c:	02800693          	li	a3,40
    80206380:	864a                	mv	a2,s2
    80206382:	85a6                	mv	a1,s1
    80206384:	16853503          	ld	a0,360(a0)
    80206388:	ffffc097          	auipc	ra,0xffffc
    8020638c:	032080e7          	jalr	50(ra) # 802023ba <copyin>
	return 0;
    80206390:	4501                	li	a0,0
    80206392:	bf5d                	j	80206348 <doSignalAction+0x4a>
        return -1;
    80206394:	557d                	li	a0,-1
    80206396:	bf4d                	j	80206348 <doSignalAction+0x4a>

0000000080206398 <__dequeueSignal>:

int __dequeueSignal(SignalSet *pending, SignalSet *mask) {
    80206398:	1141                	addi	sp,sp,-16
    8020639a:	e422                	sd	s0,8(sp)
    8020639c:	0800                	addi	s0,sp,16
    u64 x = *pending & ~*mask;
    8020639e:	619c                	ld	a5,0(a1)
    802063a0:	fff7c793          	not	a5,a5
    802063a4:	6118                	ld	a4,0(a0)
    802063a6:	8ff9                	and	a5,a5,a4
            i++;
            x >>= 1;
        }
        return i;
    }
    return 0;
    802063a8:	4501                	li	a0,0
    if (x) {
    802063aa:	e781                	bnez	a5,802063b2 <__dequeueSignal+0x1a>
}
    802063ac:	6422                	ld	s0,8(sp)
    802063ae:	0141                	addi	sp,sp,16
    802063b0:	8082                	ret
        while (!(x & 1)) {
    802063b2:	0017f713          	andi	a4,a5,1
    802063b6:	eb01                	bnez	a4,802063c6 <__dequeueSignal+0x2e>
        int i = 1;
    802063b8:	4505                	li	a0,1
            i++;
    802063ba:	2505                	addiw	a0,a0,1
            x >>= 1;
    802063bc:	8385                	srli	a5,a5,0x1
        while (!(x & 1)) {
    802063be:	0017f713          	andi	a4,a5,1
    802063c2:	df65                	beqz	a4,802063ba <__dequeueSignal+0x22>
    802063c4:	b7e5                	j	802063ac <__dequeueSignal+0x14>
        int i = 1;
    802063c6:	4505                	li	a0,1
    802063c8:	b7d5                	j	802063ac <__dequeueSignal+0x14>

00000000802063ca <doSignalTimedWait>:
static int dequeueSignal(Process *p, SignalSet *mask, SignalInfo *info) {
    int signal = __dequeueSignal(&p->pending, mask);
    return signal;
}

int doSignalTimedWait(SignalSet *which, SignalInfo *info, TimeSpec *ts) {
    802063ca:	1101                	addi	sp,sp,-32
    802063cc:	ec06                	sd	ra,24(sp)
    802063ce:	e822                	sd	s0,16(sp)
    802063d0:	e426                	sd	s1,8(sp)
    802063d2:	e04a                	sd	s2,0(sp)
    802063d4:	1000                	addi	s0,sp,32
    802063d6:	892a                	mv	s2,a0
    802063d8:	84b2                	mv	s1,a2
    Process *p = myproc();
    802063da:	ffffc097          	auipc	ra,0xffffc
    802063de:	672080e7          	jalr	1650(ra) # 80202a4c <myproc>
    if (ts) {
    802063e2:	cc99                	beqz	s1,80206400 <doSignalTimedWait+0x36>
// supervisor-mode cycle counter
static inline u64 r_time() {
	u64 x;
  	// asm volatile("csrr %0, time" : "=r" (x) );
  	// this instruction will trap in SBI
	asm volatile("rdtime %0" : "=r" (x) );
    802063e4:	c01026f3          	rdtime	a3
        p->awakeTime = r_time() +  ts->second * 1000000 + ts->microSecond;
    802063e8:	609c                	ld	a5,0(s1)
    802063ea:	000f4737          	lui	a4,0xf4
    802063ee:	24070713          	addi	a4,a4,576 # f4240 <_start-0x8010bdc0>
    802063f2:	02e787b3          	mul	a5,a5,a4
    802063f6:	6498                	ld	a4,8(s1)
    802063f8:	97ba                	add	a5,a5,a4
    802063fa:	97b6                	add	a5,a5,a3
    802063fc:	16f53023          	sd	a5,352(a0)
    int signal = __dequeueSignal(&p->pending, mask);
    80206400:	85ca                	mv	a1,s2
    80206402:	5e050513          	addi	a0,a0,1504
    80206406:	00000097          	auipc	ra,0x0
    8020640a:	f92080e7          	jalr	-110(ra) # 80206398 <__dequeueSignal>
    }
    return dequeueSignal(p, which, info);    
}
    8020640e:	60e2                	ld	ra,24(sp)
    80206410:	6442                	ld	s0,16(sp)
    80206412:	64a2                	ld	s1,8(sp)
    80206414:	6902                	ld	s2,0(sp)
    80206416:	6105                	addi	sp,sp,32
    80206418:	8082                	ret

000000008020641a <memset>:
#include "Type.h"

void* memset(void* dst, int c, uint n) {
    8020641a:	1141                	addi	sp,sp,-16
    8020641c:	e422                	sd	s0,8(sp)
    8020641e:	0800                	addi	s0,sp,16
    char* cdst = (char*)dst;
    int i;
    for (i = 0; i < n; i++) {
    80206420:	ce09                	beqz	a2,8020643a <memset+0x20>
    80206422:	87aa                	mv	a5,a0
    80206424:	fff6071b          	addiw	a4,a2,-1
    80206428:	1702                	slli	a4,a4,0x20
    8020642a:	9301                	srli	a4,a4,0x20
    8020642c:	0705                	addi	a4,a4,1
    8020642e:	972a                	add	a4,a4,a0
        cdst[i] = c;
    80206430:	00b78023          	sb	a1,0(a5)
    for (i = 0; i < n; i++) {
    80206434:	0785                	addi	a5,a5,1
    80206436:	fee79de3          	bne	a5,a4,80206430 <memset+0x16>
    }
    return dst;
}
    8020643a:	6422                	ld	s0,8(sp)
    8020643c:	0141                	addi	sp,sp,16
    8020643e:	8082                	ret

0000000080206440 <memcmp>:

int memcmp(const void* v1, const void* v2, uint n) {
    80206440:	1141                	addi	sp,sp,-16
    80206442:	e422                	sd	s0,8(sp)
    80206444:	0800                	addi	s0,sp,16
    const uchar *s1, *s2;

    s1 = v1;
    s2 = v2;
    while (n-- > 0) {
    80206446:	ca05                	beqz	a2,80206476 <memcmp+0x36>
    80206448:	fff6069b          	addiw	a3,a2,-1
    8020644c:	1682                	slli	a3,a3,0x20
    8020644e:	9281                	srli	a3,a3,0x20
    80206450:	0685                	addi	a3,a3,1
    80206452:	96aa                	add	a3,a3,a0
        if (*s1 != *s2)
    80206454:	00054783          	lbu	a5,0(a0)
    80206458:	0005c703          	lbu	a4,0(a1)
    8020645c:	00e79863          	bne	a5,a4,8020646c <memcmp+0x2c>
            return *s1 - *s2;
        s1++, s2++;
    80206460:	0505                	addi	a0,a0,1
    80206462:	0585                	addi	a1,a1,1
    while (n-- > 0) {
    80206464:	fed518e3          	bne	a0,a3,80206454 <memcmp+0x14>
    }

    return 0;
    80206468:	4501                	li	a0,0
    8020646a:	a019                	j	80206470 <memcmp+0x30>
            return *s1 - *s2;
    8020646c:	40e7853b          	subw	a0,a5,a4
}
    80206470:	6422                	ld	s0,8(sp)
    80206472:	0141                	addi	sp,sp,16
    80206474:	8082                	ret
    return 0;
    80206476:	4501                	li	a0,0
    80206478:	bfe5                	j	80206470 <memcmp+0x30>

000000008020647a <memmove>:

void* memmove(void* dst, const void* src, uint n) {
    8020647a:	1141                	addi	sp,sp,-16
    8020647c:	e422                	sd	s0,8(sp)
    8020647e:	0800                	addi	s0,sp,16
    const char* s;
    char* d;

    if (n == 0)
    80206480:	ca0d                	beqz	a2,802064b2 <memmove+0x38>
        return dst;

    s = src;
    d = dst;
    if (s < d && s + n > d) {
    80206482:	00a5f963          	bgeu	a1,a0,80206494 <memmove+0x1a>
    80206486:	02061693          	slli	a3,a2,0x20
    8020648a:	9281                	srli	a3,a3,0x20
    8020648c:	00d58733          	add	a4,a1,a3
    80206490:	02e56463          	bltu	a0,a4,802064b8 <memmove+0x3e>
        s += n;
        d += n;
        while (n-- > 0)
            *--d = *--s;
    } else
        while (n-- > 0)
    80206494:	fff6079b          	addiw	a5,a2,-1
    80206498:	1782                	slli	a5,a5,0x20
    8020649a:	9381                	srli	a5,a5,0x20
    8020649c:	0785                	addi	a5,a5,1
    8020649e:	97ae                	add	a5,a5,a1
    802064a0:	872a                	mv	a4,a0
            *d++ = *s++;
    802064a2:	0585                	addi	a1,a1,1
    802064a4:	0705                	addi	a4,a4,1
    802064a6:	fff5c683          	lbu	a3,-1(a1)
    802064aa:	fed70fa3          	sb	a3,-1(a4)
        while (n-- > 0)
    802064ae:	fef59ae3          	bne	a1,a5,802064a2 <memmove+0x28>

    return dst;
}
    802064b2:	6422                	ld	s0,8(sp)
    802064b4:	0141                	addi	sp,sp,16
    802064b6:	8082                	ret
        d += n;
    802064b8:	96aa                	add	a3,a3,a0
        while (n-- > 0)
    802064ba:	fff6079b          	addiw	a5,a2,-1
    802064be:	1782                	slli	a5,a5,0x20
    802064c0:	9381                	srli	a5,a5,0x20
    802064c2:	fff7c793          	not	a5,a5
    802064c6:	97ba                	add	a5,a5,a4
            *--d = *--s;
    802064c8:	177d                	addi	a4,a4,-1
    802064ca:	16fd                	addi	a3,a3,-1
    802064cc:	00074603          	lbu	a2,0(a4)
    802064d0:	00c68023          	sb	a2,0(a3)
        while (n-- > 0)
    802064d4:	fef71ae3          	bne	a4,a5,802064c8 <memmove+0x4e>
    802064d8:	bfe9                	j	802064b2 <memmove+0x38>

00000000802064da <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void* memcpy(void* dst, const void* src, uint n) {
    802064da:	1141                	addi	sp,sp,-16
    802064dc:	e406                	sd	ra,8(sp)
    802064de:	e022                	sd	s0,0(sp)
    802064e0:	0800                	addi	s0,sp,16
    return memmove(dst, src, n);
    802064e2:	00000097          	auipc	ra,0x0
    802064e6:	f98080e7          	jalr	-104(ra) # 8020647a <memmove>
}
    802064ea:	60a2                	ld	ra,8(sp)
    802064ec:	6402                	ld	s0,0(sp)
    802064ee:	0141                	addi	sp,sp,16
    802064f0:	8082                	ret

00000000802064f2 <strncmp>:

int strncmp(const char* p, const char* q, uint n) {
    802064f2:	1141                	addi	sp,sp,-16
    802064f4:	e422                	sd	s0,8(sp)
    802064f6:	0800                	addi	s0,sp,16
    while (n > 0 && *p && *p == *q)
    802064f8:	ce11                	beqz	a2,80206514 <strncmp+0x22>
    802064fa:	00054783          	lbu	a5,0(a0)
    802064fe:	cf89                	beqz	a5,80206518 <strncmp+0x26>
    80206500:	0005c703          	lbu	a4,0(a1)
    80206504:	00f71a63          	bne	a4,a5,80206518 <strncmp+0x26>
        n--, p++, q++;
    80206508:	367d                	addiw	a2,a2,-1
    8020650a:	0505                	addi	a0,a0,1
    8020650c:	0585                	addi	a1,a1,1
    while (n > 0 && *p && *p == *q)
    8020650e:	f675                	bnez	a2,802064fa <strncmp+0x8>
    if (n == 0)
        return 0;
    80206510:	4501                	li	a0,0
    80206512:	a809                	j	80206524 <strncmp+0x32>
    80206514:	4501                	li	a0,0
    80206516:	a039                	j	80206524 <strncmp+0x32>
    if (n == 0)
    80206518:	ca09                	beqz	a2,8020652a <strncmp+0x38>
    return (uchar)*p - (uchar)*q;
    8020651a:	00054503          	lbu	a0,0(a0)
    8020651e:	0005c783          	lbu	a5,0(a1)
    80206522:	9d1d                	subw	a0,a0,a5
}
    80206524:	6422                	ld	s0,8(sp)
    80206526:	0141                	addi	sp,sp,16
    80206528:	8082                	ret
        return 0;
    8020652a:	4501                	li	a0,0
    8020652c:	bfe5                	j	80206524 <strncmp+0x32>

000000008020652e <strncpy>:

char* strncpy(char* s, const char* t, int n) {
    8020652e:	1141                	addi	sp,sp,-16
    80206530:	e422                	sd	s0,8(sp)
    80206532:	0800                	addi	s0,sp,16
    char* os;

    os = s;
    while (n-- > 0 && (*s++ = *t++) != 0)
    80206534:	872a                	mv	a4,a0
    80206536:	8832                	mv	a6,a2
    80206538:	367d                	addiw	a2,a2,-1
    8020653a:	01005963          	blez	a6,8020654c <strncpy+0x1e>
    8020653e:	0705                	addi	a4,a4,1
    80206540:	0005c783          	lbu	a5,0(a1)
    80206544:	fef70fa3          	sb	a5,-1(a4)
    80206548:	0585                	addi	a1,a1,1
    8020654a:	f7f5                	bnez	a5,80206536 <strncpy+0x8>
        ;
    while (n-- > 0)
    8020654c:	00c05d63          	blez	a2,80206566 <strncpy+0x38>
    80206550:	86ba                	mv	a3,a4
        *s++ = 0;
    80206552:	0685                	addi	a3,a3,1
    80206554:	fe068fa3          	sb	zero,-1(a3)
    while (n-- > 0)
    80206558:	fff6c793          	not	a5,a3
    8020655c:	9fb9                	addw	a5,a5,a4
    8020655e:	010787bb          	addw	a5,a5,a6
    80206562:	fef048e3          	bgtz	a5,80206552 <strncpy+0x24>
    return os;
}
    80206566:	6422                	ld	s0,8(sp)
    80206568:	0141                	addi	sp,sp,16
    8020656a:	8082                	ret

000000008020656c <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char* safestrcpy(char* s, const char* t, int n) {
    8020656c:	1141                	addi	sp,sp,-16
    8020656e:	e422                	sd	s0,8(sp)
    80206570:	0800                	addi	s0,sp,16
    char* os;

    os = s;
    if (n <= 0)
    80206572:	02c05363          	blez	a2,80206598 <safestrcpy+0x2c>
    80206576:	fff6069b          	addiw	a3,a2,-1
    8020657a:	1682                	slli	a3,a3,0x20
    8020657c:	9281                	srli	a3,a3,0x20
    8020657e:	96ae                	add	a3,a3,a1
    80206580:	87aa                	mv	a5,a0
        return os;
    while (--n > 0 && (*s++ = *t++) != 0)
    80206582:	00d58963          	beq	a1,a3,80206594 <safestrcpy+0x28>
    80206586:	0585                	addi	a1,a1,1
    80206588:	0785                	addi	a5,a5,1
    8020658a:	fff5c703          	lbu	a4,-1(a1)
    8020658e:	fee78fa3          	sb	a4,-1(a5)
    80206592:	fb65                	bnez	a4,80206582 <safestrcpy+0x16>
        ;
    *s = 0;
    80206594:	00078023          	sb	zero,0(a5)
    return os;
}
    80206598:	6422                	ld	s0,8(sp)
    8020659a:	0141                	addi	sp,sp,16
    8020659c:	8082                	ret

000000008020659e <strlen>:

int strlen(const char* s) {
    8020659e:	1141                	addi	sp,sp,-16
    802065a0:	e422                	sd	s0,8(sp)
    802065a2:	0800                	addi	s0,sp,16
    int n;

    for (n = 0; s[n]; n++)
    802065a4:	00054783          	lbu	a5,0(a0)
    802065a8:	cf91                	beqz	a5,802065c4 <strlen+0x26>
    802065aa:	0505                	addi	a0,a0,1
    802065ac:	87aa                	mv	a5,a0
    802065ae:	4685                	li	a3,1
    802065b0:	9e89                	subw	a3,a3,a0
    802065b2:	00f6853b          	addw	a0,a3,a5
    802065b6:	0785                	addi	a5,a5,1
    802065b8:	fff7c703          	lbu	a4,-1(a5)
    802065bc:	fb7d                	bnez	a4,802065b2 <strlen+0x14>
        ;
    return n;
}
    802065be:	6422                	ld	s0,8(sp)
    802065c0:	0141                	addi	sp,sp,16
    802065c2:	8082                	ret
    for (n = 0; s[n]; n++)
    802065c4:	4501                	li	a0,0
    802065c6:	bfe5                	j	802065be <strlen+0x20>

00000000802065c8 <strchr>:

char* strchr(const char* s, char c) {
    802065c8:	1141                	addi	sp,sp,-16
    802065ca:	e422                	sd	s0,8(sp)
    802065cc:	0800                	addi	s0,sp,16
    for (; *s; s++)
    802065ce:	00054783          	lbu	a5,0(a0)
    802065d2:	cb99                	beqz	a5,802065e8 <strchr+0x20>
        if (*s == c)
    802065d4:	00f58763          	beq	a1,a5,802065e2 <strchr+0x1a>
    for (; *s; s++)
    802065d8:	0505                	addi	a0,a0,1
    802065da:	00054783          	lbu	a5,0(a0)
    802065de:	fbfd                	bnez	a5,802065d4 <strchr+0xc>
            return (char*)s;
    return 0;
    802065e0:	4501                	li	a0,0
}
    802065e2:	6422                	ld	s0,8(sp)
    802065e4:	0141                	addi	sp,sp,16
    802065e6:	8082                	ret
    return 0;
    802065e8:	4501                	li	a0,0
    802065ea:	bfe5                	j	802065e2 <strchr+0x1a>

00000000802065ec <snstr>:

// convert wide char string into uchar string
void snstr(char* dst, wchar const* src, int len) {
    802065ec:	1141                	addi	sp,sp,-16
    802065ee:	e422                	sd	s0,8(sp)
    802065f0:	0800                	addi	s0,sp,16
    while (len-- && *src) {
    802065f2:	c221                	beqz	a2,80206632 <snstr+0x46>
    802065f4:	fff6079b          	addiw	a5,a2,-1
    802065f8:	fff6069b          	addiw	a3,a2,-1
    802065fc:	1682                	slli	a3,a3,0x20
    802065fe:	9281                	srli	a3,a3,0x20
    80206600:	0685                	addi	a3,a3,1
    80206602:	96aa                	add	a3,a3,a0
    80206604:	0005d703          	lhu	a4,0(a1)
    80206608:	cb09                	beqz	a4,8020661a <snstr+0x2e>
        *dst++ = (uchar)(*src & 0xff);
    8020660a:	0505                	addi	a0,a0,1
    8020660c:	fee50fa3          	sb	a4,-1(a0)
        src++;
    80206610:	0589                	addi	a1,a1,2
    while (len-- && *src) {
    80206612:	37fd                	addiw	a5,a5,-1
    80206614:	fed518e3          	bne	a0,a3,80206604 <snstr+0x18>
        *dst++ = (uchar)(*src & 0xff);
    80206618:	8536                	mv	a0,a3
    }
    while (len-- > 0)
    8020661a:	00f05c63          	blez	a5,80206632 <snstr+0x46>
    8020661e:	37fd                	addiw	a5,a5,-1
    80206620:	1782                	slli	a5,a5,0x20
    80206622:	9381                	srli	a5,a5,0x20
    80206624:	0785                	addi	a5,a5,1
    80206626:	97aa                	add	a5,a5,a0
        *dst++ = 0;
    80206628:	0505                	addi	a0,a0,1
    8020662a:	fe050fa3          	sb	zero,-1(a0)
    while (len-- > 0)
    8020662e:	fea79de3          	bne	a5,a0,80206628 <snstr+0x3c>
    80206632:	6422                	ld	s0,8(sp)
    80206634:	0141                	addi	sp,sp,16
    80206636:	8082                	ret

0000000080206638 <fsAlloc>:
#include <Driver.h>
#include <file.h>
FileSystem fileSystem[32];

int fsAlloc(FileSystem **fs) {
    for (int i = 0; i < 32; i++) {
    80206638:	0041c717          	auipc	a4,0x41c
    8020663c:	99070713          	addi	a4,a4,-1648 # 80621fc8 <fileSystem>
    80206640:	4781                	li	a5,0
    80206642:	02000613          	li	a2,32
        if (!fileSystem[i].valid) {
    80206646:	00074683          	lbu	a3,0(a4)
    8020664a:	ca81                	beqz	a3,8020665a <fsAlloc+0x22>
    for (int i = 0; i < 32; i++) {
    8020664c:	2785                	addiw	a5,a5,1
    8020664e:	20070713          	addi	a4,a4,512
    80206652:	fec79ae3          	bne	a5,a2,80206646 <fsAlloc+0xe>
            memset(*fs, 0, sizeof(FileSystem));
            fileSystem[i].valid = true;
            return 0;
        }
    }
    return -1;
    80206656:	557d                	li	a0,-1
}
    80206658:	8082                	ret
int fsAlloc(FileSystem **fs) {
    8020665a:	1101                	addi	sp,sp,-32
    8020665c:	ec06                	sd	ra,24(sp)
    8020665e:	e822                	sd	s0,16(sp)
    80206660:	e426                	sd	s1,8(sp)
    80206662:	1000                	addi	s0,sp,32
            *fs = &fileSystem[i];
    80206664:	07a6                	slli	a5,a5,0x9
    80206666:	0041c497          	auipc	s1,0x41c
    8020666a:	96248493          	addi	s1,s1,-1694 # 80621fc8 <fileSystem>
    8020666e:	94be                	add	s1,s1,a5
    80206670:	e104                	sd	s1,0(a0)
            memset(*fs, 0, sizeof(FileSystem));
    80206672:	20000613          	li	a2,512
    80206676:	4581                	li	a1,0
    80206678:	8526                	mv	a0,s1
    8020667a:	00000097          	auipc	ra,0x0
    8020667e:	da0080e7          	jalr	-608(ra) # 8020641a <memset>
            fileSystem[i].valid = true;
    80206682:	4785                	li	a5,1
    80206684:	00f48023          	sb	a5,0(s1)
            return 0;
    80206688:	4501                	li	a0,0
}
    8020668a:	60e2                	ld	ra,24(sp)
    8020668c:	6442                	ld	s0,16(sp)
    8020668e:	64a2                	ld	s1,8(sp)
    80206690:	6105                	addi	sp,sp,32
    80206692:	8082                	ret

0000000080206694 <fatInit>:

DirentCache direntCache;
// fs's read, name, mount_point should be inited
int fatInit(FileSystem *fs) {
    80206694:	1101                	addi	sp,sp,-32
    80206696:	ec06                	sd	ra,24(sp)
    80206698:	e822                	sd	s0,16(sp)
    8020669a:	e426                	sd	s1,8(sp)
    8020669c:	e04a                	sd	s2,0(sp)
    8020669e:	1000                	addi	s0,sp,32
    802066a0:	84aa                	mv	s1,a0
    // printf("[FAT32 init]fat init begin\n");
    struct buf *b = fs->read(fs, 0);
    802066a2:	1f853783          	ld	a5,504(a0)
    802066a6:	4581                	li	a1,0
    802066a8:	9782                	jalr	a5
    if (b == 0) {
    802066aa:	c575                	beqz	a0,80206796 <fatInit+0x102>
    802066ac:	892a                	mv	s2,a0
        panic("");
    }
    if (strncmp((char const*)(b->data + 82), "FAT32", 5)) {
    802066ae:	4615                	li	a2,5
    802066b0:	00008597          	auipc	a1,0x8
    802066b4:	9b058593          	addi	a1,a1,-1616 # 8020e060 <__func__.1096+0x20>
    802066b8:	0aa50513          	addi	a0,a0,170
    802066bc:	00000097          	auipc	ra,0x0
    802066c0:	e36080e7          	jalr	-458(ra) # 802064f2 <strncmp>
    802066c4:	e975                	bnez	a0,802067b8 <fatInit+0x124>
        panic("not FAT32 volume");
        return -1;
    }
    memmove(&fs->superBlock.bpb.byts_per_sec, b->data + 11, 2); 
    802066c6:	4609                	li	a2,2
    802066c8:	06390593          	addi	a1,s2,99
    802066cc:	05448513          	addi	a0,s1,84
    802066d0:	00000097          	auipc	ra,0x0
    802066d4:	daa080e7          	jalr	-598(ra) # 8020647a <memmove>
    fs->superBlock.bpb.sec_per_clus = *(b->data + 13);
    802066d8:	06594603          	lbu	a2,101(s2)
    802066dc:	04c48b23          	sb	a2,86(s1)
    fs->superBlock.bpb.rsvd_sec_cnt = *(uint16*)(b->data + 14);
    802066e0:	06695583          	lhu	a1,102(s2)
    802066e4:	04b49c23          	sh	a1,88(s1)
    fs->superBlock.bpb.fat_cnt = *(b->data + 16);
    802066e8:	06894683          	lbu	a3,104(s2)
    802066ec:	04d48d23          	sb	a3,90(s1)
    fs->superBlock.bpb.hidd_sec = *(uint32*)(b->data + 28);
    802066f0:	07492783          	lw	a5,116(s2)
    802066f4:	ccfc                	sw	a5,92(s1)
    fs->superBlock.bpb.tot_sec = *(uint32*)(b->data + 32);
    802066f6:	07892783          	lw	a5,120(s2)
    802066fa:	d0bc                	sw	a5,96(s1)
    fs->superBlock.bpb.fat_sz = *(uint32*)(b->data + 36);
    802066fc:	07c92703          	lw	a4,124(s2)
    80206700:	d0f8                	sw	a4,100(s1)
    fs->superBlock.bpb.root_clus = *(uint32*)(b->data + 44);
    80206702:	08492503          	lw	a0,132(s2)
    80206706:	d4a8                	sw	a0,104(s1)
    fs->superBlock.first_data_sec = fs->superBlock.bpb.rsvd_sec_cnt + fs->superBlock.bpb.fat_cnt * fs->superBlock.bpb.fat_sz;
    80206708:	02e6873b          	mulw	a4,a3,a4
    8020670c:	9f2d                	addw	a4,a4,a1
    8020670e:	c0f8                	sw	a4,68(s1)
    fs->superBlock.data_sec_cnt = fs->superBlock.bpb.tot_sec - fs->superBlock.first_data_sec;
    80206710:	9f99                	subw	a5,a5,a4
    80206712:	c4bc                	sw	a5,72(s1)
    fs->superBlock.data_clus_cnt = fs->superBlock.data_sec_cnt / fs->superBlock.bpb.sec_per_clus;
    80206714:	02c7d7bb          	divuw	a5,a5,a2
    80206718:	c4fc                	sw	a5,76(s1)
    fs->superBlock.byts_per_clus = fs->superBlock.bpb.sec_per_clus * fs->superBlock.bpb.byts_per_sec;
    8020671a:	0544d783          	lhu	a5,84(s1)
    8020671e:	02c787bb          	mulw	a5,a5,a2
    80206722:	c8bc                	sw	a5,80(s1)
    brelse(b);
    80206724:	854a                	mv	a0,s2
    80206726:	00001097          	auipc	ra,0x1
    8020672a:	718080e7          	jalr	1816(ra) # 80207e3e <brelse>
    printf("[FAT32 init]fat_sz: %d\n", fat.bpb.fat_sz);
    printf("[FAT32 init]first_data_sec: %d\n", fat.first_data_sec);
#endif

    // make sure that byts_per_sec has the same value with BSIZE
    if (BSIZE != fs->superBlock.bpb.byts_per_sec)
    8020672e:	0544d703          	lhu	a4,84(s1)
    80206732:	20000793          	li	a5,512
    80206736:	0af71263          	bne	a4,a5,802067da <fatInit+0x146>
        panic("byts_per_sec != BSIZE");
    memset(&fs->root, 0, sizeof(fs->root));
    8020673a:	17000613          	li	a2,368
    8020673e:	4581                	li	a1,0
    80206740:	07048513          	addi	a0,s1,112
    80206744:	00000097          	auipc	ra,0x0
    80206748:	cd6080e7          	jalr	-810(ra) # 8020641a <memset>
    initsleeplock(&fs->root.lock, "entry");
    8020674c:	00008597          	auipc	a1,0x8
    80206750:	94c58593          	addi	a1,a1,-1716 # 8020e098 <__func__.1096+0x58>
    80206754:	1b048513          	addi	a0,s1,432
    80206758:	00000097          	auipc	ra,0x0
    8020675c:	894080e7          	jalr	-1900(ra) # 80205fec <initsleeplock>
    fs->root.attribute = (ATTR_DIRECTORY | ATTR_SYSTEM);
    80206760:	47d1                	li	a5,20
    80206762:	16f48823          	sb	a5,368(s1)
    fs->root.first_clus = fs->root.cur_clus = fs->superBlock.bpb.root_clus;
    80206766:	54bc                	lw	a5,104(s1)
    80206768:	16f4ae23          	sw	a5,380(s1)
    8020676c:	16f4aa23          	sw	a5,372(s1)
    fs->root.valid = 1;
    80206770:	4785                	li	a5,1
    80206772:	18f49923          	sh	a5,402(s1)
    fs->root.filename[0]='/';
    80206776:	02f00793          	li	a5,47
    8020677a:	06f48823          	sb	a5,112(s1)
    fs->root.fileSystem = fs;
    8020677e:	1894b423          	sd	s1,392(s1)
    fs->root.ref = 1;
    80206782:	4785                	li	a5,1
    80206784:	1af4a023          	sw	a5,416(s1)
    
    // printf("[FAT32 init]fat init end\n");
    return 0;
}
    80206788:	4501                	li	a0,0
    8020678a:	60e2                	ld	ra,24(sp)
    8020678c:	6442                	ld	s0,16(sp)
    8020678e:	64a2                	ld	s1,8(sp)
    80206790:	6902                	ld	s2,0(sp)
    80206792:	6105                	addi	sp,sp,32
    80206794:	8082                	ret
        panic("");
    80206796:	00007697          	auipc	a3,0x7
    8020679a:	f3a68693          	addi	a3,a3,-198 # 8020d6d0 <__func__.1844+0x100>
    8020679e:	00008617          	auipc	a2,0x8
    802067a2:	d6a60613          	addi	a2,a2,-662 # 8020e508 <__func__.1381>
    802067a6:	45ed                	li	a1,27
    802067a8:	00008517          	auipc	a0,0x8
    802067ac:	8a850513          	addi	a0,a0,-1880 # 8020e050 <__func__.1096+0x10>
    802067b0:	ffffa097          	auipc	ra,0xffffa
    802067b4:	3a6080e7          	jalr	934(ra) # 80200b56 <_panic_>
        panic("not FAT32 volume");
    802067b8:	00008697          	auipc	a3,0x8
    802067bc:	8b068693          	addi	a3,a3,-1872 # 8020e068 <__func__.1096+0x28>
    802067c0:	00008617          	auipc	a2,0x8
    802067c4:	d4860613          	addi	a2,a2,-696 # 8020e508 <__func__.1381>
    802067c8:	45f9                	li	a1,30
    802067ca:	00008517          	auipc	a0,0x8
    802067ce:	88650513          	addi	a0,a0,-1914 # 8020e050 <__func__.1096+0x10>
    802067d2:	ffffa097          	auipc	ra,0xffffa
    802067d6:	384080e7          	jalr	900(ra) # 80200b56 <_panic_>
        panic("byts_per_sec != BSIZE");
    802067da:	00008697          	auipc	a3,0x8
    802067de:	8a668693          	addi	a3,a3,-1882 # 8020e080 <__func__.1096+0x40>
    802067e2:	00008617          	auipc	a2,0x8
    802067e6:	d2660613          	addi	a2,a2,-730 # 8020e508 <__func__.1381>
    802067ea:	03b00593          	li	a1,59
    802067ee:	00008517          	auipc	a0,0x8
    802067f2:	86250513          	addi	a0,a0,-1950 # 8020e050 <__func__.1096+0x10>
    802067f6:	ffffa097          	auipc	ra,0xffffa
    802067fa:	360080e7          	jalr	864(ra) # 80200b56 <_panic_>

00000000802067fe <initDirentCache>:

FileSystem rootFileSystem;
void initDirentCache() {
    802067fe:	7179                	addi	sp,sp,-48
    80206800:	f406                	sd	ra,40(sp)
    80206802:	f022                	sd	s0,32(sp)
    80206804:	ec26                	sd	s1,24(sp)
    80206806:	e84a                	sd	s2,16(sp)
    80206808:	e44e                	sd	s3,8(sp)
    8020680a:	1800                	addi	s0,sp,48
    initLock(&direntCache.lock, "ecache");
    8020680c:	00008597          	auipc	a1,0x8
    80206810:	89458593          	addi	a1,a1,-1900 # 8020e0a0 <__func__.1096+0x60>
    80206814:	00417517          	auipc	a0,0x417
    80206818:	fbc50513          	addi	a0,a0,-68 # 8061d7d0 <direntCache>
    8020681c:	00000097          	auipc	ra,0x0
    80206820:	8fe080e7          	jalr	-1794(ra) # 8020611a <initLock>
    struct file* file = filealloc();
    80206824:	00003097          	auipc	ra,0x3
    80206828:	336080e7          	jalr	822(ra) # 80209b5a <filealloc>
    rootFileSystem.image = file;
    8020682c:	00417797          	auipc	a5,0x417
    80206830:	f8a7b223          	sd	a0,-124(a5) # 8061d7b0 <rootFileSystem+0x1e0>
    file->type = FD_DEVICE;
    80206834:	478d                	li	a5,3
    80206836:	c11c                	sw	a5,0(a0)
    file->major = 0;
    80206838:	02051223          	sh	zero,36(a0)
    file->readable = true;
    8020683c:	4785                	li	a5,1
    8020683e:	00f50423          	sb	a5,8(a0)
    file->writable = true;
    80206842:	00f504a3          	sb	a5,9(a0)
   // fs->root.prev = &fs->root;
   // fs->root.next = &fs->root;
    for (struct dirent* de = direntCache.entries;
         de < direntCache.entries + ENTRY_CACHE_NUM; de++) {
    80206846:	00417497          	auipc	s1,0x417
    8020684a:	0e248493          	addi	s1,s1,226 # 8061d928 <direntCache+0x158>
    8020684e:	0041c997          	auipc	s3,0x41c
    80206852:	8ba98993          	addi	s3,s3,-1862 # 80622108 <fileSystem+0x140>
        de->ref = 0;
        de->dirty = 0;
        de->parent = 0;
     //   de->next = fs->root.next;
     //   de->prev = &fs->root;
        initsleeplock(&de->lock, "entry");
    80206856:	00008917          	auipc	s2,0x8
    8020685a:	84290913          	addi	s2,s2,-1982 # 8020e098 <__func__.1096+0x58>
        de->dev = 0;
    8020685e:	fe048023          	sb	zero,-32(s1)
        de->valid = 0;
    80206862:	fe049123          	sh	zero,-30(s1)
        de->ref = 0;
    80206866:	fe04a823          	sw	zero,-16(s1)
        de->dirty = 0;
    8020686a:	fe0480a3          	sb	zero,-31(s1)
        de->parent = 0;
    8020686e:	fe04bc23          	sd	zero,-8(s1)
        initsleeplock(&de->lock, "entry");
    80206872:	85ca                	mv	a1,s2
    80206874:	8526                	mv	a0,s1
    80206876:	fffff097          	auipc	ra,0xfffff
    8020687a:	776080e7          	jalr	1910(ra) # 80205fec <initsleeplock>
         de < direntCache.entries + ENTRY_CACHE_NUM; de++) {
    8020687e:	17048493          	addi	s1,s1,368
    for (struct dirent* de = direntCache.entries;
    80206882:	fd349ee3          	bne	s1,s3,8020685e <initDirentCache+0x60>
     //   fs->root.next->prev = de;
     //   fs->root.next = de;
    }
    80206886:	70a2                	ld	ra,40(sp)
    80206888:	7402                	ld	s0,32(sp)
    8020688a:	64e2                	ld	s1,24(sp)
    8020688c:	6942                	ld	s2,16(sp)
    8020688e:	69a2                	ld	s3,8(sp)
    80206890:	6145                	addi	sp,sp,48
    80206892:	8082                	ret

0000000080206894 <argfd>:
#include <pipe.h>
#include <FileSystem.h>

// Fetch the nth word-sized system call argument as a file descriptor
// and return both the descriptor and the corresponding struct file.
int argfd(int n, int* pfd, struct file** pf) {
    80206894:	7179                	addi	sp,sp,-48
    80206896:	f406                	sd	ra,40(sp)
    80206898:	f022                	sd	s0,32(sp)
    8020689a:	ec26                	sd	s1,24(sp)
    8020689c:	e84a                	sd	s2,16(sp)
    8020689e:	1800                	addi	s0,sp,48
    802068a0:	892e                	mv	s2,a1
    802068a2:	84b2                	mv	s1,a2
    int fd;
    struct file* f;

    if (argint(n, &fd) < 0)
    802068a4:	fdc40593          	addi	a1,s0,-36
    802068a8:	ffffd097          	auipc	ra,0xffffd
    802068ac:	51a080e7          	jalr	1306(ra) # 80203dc2 <argint>
    802068b0:	04054163          	bltz	a0,802068f2 <argfd+0x5e>
        return -1;
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL)
    802068b4:	fdc42703          	lw	a4,-36(s0)
    802068b8:	07f00793          	li	a5,127
    802068bc:	02e7ed63          	bltu	a5,a4,802068f6 <argfd+0x62>
    802068c0:	ffffc097          	auipc	ra,0xffffc
    802068c4:	18c080e7          	jalr	396(ra) # 80202a4c <myproc>
    802068c8:	fdc42703          	lw	a4,-36(s0)
    802068cc:	03670793          	addi	a5,a4,54
    802068d0:	078e                	slli	a5,a5,0x3
    802068d2:	953e                	add	a0,a0,a5
    802068d4:	611c                	ld	a5,0(a0)
    802068d6:	c395                	beqz	a5,802068fa <argfd+0x66>
        return -1;
    if (pfd)
    802068d8:	00090463          	beqz	s2,802068e0 <argfd+0x4c>
        *pfd = fd;
    802068dc:	00e92023          	sw	a4,0(s2)
    if (pf)
        *pf = f;
    return 0;
    802068e0:	4501                	li	a0,0
    if (pf)
    802068e2:	c091                	beqz	s1,802068e6 <argfd+0x52>
        *pf = f;
    802068e4:	e09c                	sd	a5,0(s1)
}
    802068e6:	70a2                	ld	ra,40(sp)
    802068e8:	7402                	ld	s0,32(sp)
    802068ea:	64e2                	ld	s1,24(sp)
    802068ec:	6942                	ld	s2,16(sp)
    802068ee:	6145                	addi	sp,sp,48
    802068f0:	8082                	ret
        return -1;
    802068f2:	557d                	li	a0,-1
    802068f4:	bfcd                	j	802068e6 <argfd+0x52>
        return -1;
    802068f6:	557d                	li	a0,-1
    802068f8:	b7fd                	j	802068e6 <argfd+0x52>
    802068fa:	557d                	li	a0,-1
    802068fc:	b7ed                	j	802068e6 <argfd+0x52>

00000000802068fe <fdalloc>:

// Allocate a file descriptor for the given file.
// Takes over file reference from caller on success.
int fdalloc(struct file* f) {
    802068fe:	1101                	addi	sp,sp,-32
    80206900:	ec06                	sd	ra,24(sp)
    80206902:	e822                	sd	s0,16(sp)
    80206904:	e426                	sd	s1,8(sp)
    80206906:	1000                	addi	s0,sp,32
    80206908:	84aa                	mv	s1,a0
    int fd;
    struct Process* p = myproc();
    8020690a:	ffffc097          	auipc	ra,0xffffc
    8020690e:	142080e7          	jalr	322(ra) # 80202a4c <myproc>
    80206912:	862a                	mv	a2,a0
    
    for (fd = 0; fd < NOFILE; fd++) {
    80206914:	1b050793          	addi	a5,a0,432
    80206918:	4501                	li	a0,0
    8020691a:	08000693          	li	a3,128
        if (p->ofile[fd] == 0) {
    8020691e:	6398                	ld	a4,0(a5)
    80206920:	c719                	beqz	a4,8020692e <fdalloc+0x30>
    for (fd = 0; fd < NOFILE; fd++) {
    80206922:	2505                	addiw	a0,a0,1
    80206924:	07a1                	addi	a5,a5,8
    80206926:	fed51ce3          	bne	a0,a3,8020691e <fdalloc+0x20>
            p->ofile[fd] = f;
            return fd;
        }
    }
    return -1;
    8020692a:	557d                	li	a0,-1
    8020692c:	a031                	j	80206938 <fdalloc+0x3a>
            p->ofile[fd] = f;
    8020692e:	03650793          	addi	a5,a0,54
    80206932:	078e                	slli	a5,a5,0x3
    80206934:	963e                	add	a2,a2,a5
    80206936:	e204                	sd	s1,0(a2)
}
    80206938:	60e2                	ld	ra,24(sp)
    8020693a:	6442                	ld	s0,16(sp)
    8020693c:	64a2                	ld	s1,8(sp)
    8020693e:	6105                	addi	sp,sp,32
    80206940:	8082                	ret

0000000080206942 <syscallDup>:

void syscallDup(void) {
    80206942:	7179                	addi	sp,sp,-48
    80206944:	f406                	sd	ra,40(sp)
    80206946:	f022                	sd	s0,32(sp)
    80206948:	ec26                	sd	s1,24(sp)
    8020694a:	e84a                	sd	s2,16(sp)
    8020694c:	e44e                	sd	s3,8(sp)
    8020694e:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    80206950:	00000097          	auipc	ra,0x0
    80206954:	90a080e7          	jalr	-1782(ra) # 8020625a <getHartTrapFrame>
    80206958:	892a                	mv	s2,a0
    struct file* f;
    int fd = tf->a0;
    8020695a:	7924                	ld	s1,112(a0)
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    8020695c:	0004871b          	sext.w	a4,s1
    80206960:	07f00793          	li	a5,127
    80206964:	00e7fc63          	bgeu	a5,a4,8020697c <syscallDup+0x3a>
        tf->a0 = -1;
    80206968:	57fd                	li	a5,-1
    8020696a:	06f93823          	sd	a5,112(s2)
        return;
    }

    filedup(f);
    tf->a0 = fd;
}
    8020696e:	70a2                	ld	ra,40(sp)
    80206970:	7402                	ld	s0,32(sp)
    80206972:	64e2                	ld	s1,24(sp)
    80206974:	6942                	ld	s2,16(sp)
    80206976:	69a2                	ld	s3,8(sp)
    80206978:	6145                	addi	sp,sp,48
    8020697a:	8082                	ret
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    8020697c:	ffffc097          	auipc	ra,0xffffc
    80206980:	0d0080e7          	jalr	208(ra) # 80202a4c <myproc>
    80206984:	2481                	sext.w	s1,s1
    80206986:	03648493          	addi	s1,s1,54
    8020698a:	048e                	slli	s1,s1,0x3
    8020698c:	94aa                	add	s1,s1,a0
    8020698e:	0004b983          	ld	s3,0(s1)
    80206992:	fc098be3          	beqz	s3,80206968 <syscallDup+0x26>
    if ((fd = fdalloc(f)) < 0) {
    80206996:	854e                	mv	a0,s3
    80206998:	00000097          	auipc	ra,0x0
    8020699c:	f66080e7          	jalr	-154(ra) # 802068fe <fdalloc>
    802069a0:	84aa                	mv	s1,a0
    802069a2:	00054a63          	bltz	a0,802069b6 <syscallDup+0x74>
    filedup(f);
    802069a6:	854e                	mv	a0,s3
    802069a8:	00003097          	auipc	ra,0x3
    802069ac:	21c080e7          	jalr	540(ra) # 80209bc4 <filedup>
    tf->a0 = fd;
    802069b0:	06993823          	sd	s1,112(s2)
    802069b4:	bf6d                	j	8020696e <syscallDup+0x2c>
        tf->a0 = -1;
    802069b6:	57fd                	li	a5,-1
    802069b8:	06f93823          	sd	a5,112(s2)
        return;
    802069bc:	bf4d                	j	8020696e <syscallDup+0x2c>

00000000802069be <syscallDupAndSet>:

void syscallDupAndSet(void) {
    802069be:	7179                	addi	sp,sp,-48
    802069c0:	f406                	sd	ra,40(sp)
    802069c2:	f022                	sd	s0,32(sp)
    802069c4:	ec26                	sd	s1,24(sp)
    802069c6:	e84a                	sd	s2,16(sp)
    802069c8:	e44e                	sd	s3,8(sp)
    802069ca:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    802069cc:	00000097          	auipc	ra,0x0
    802069d0:	88e080e7          	jalr	-1906(ra) # 8020625a <getHartTrapFrame>
    802069d4:	84aa                	mv	s1,a0
    struct file* f;
    int fd = tf->a0, fdnew = tf->a1;
    802069d6:	07053903          	ld	s2,112(a0)

    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    802069da:	0009071b          	sext.w	a4,s2
    802069de:	07f00793          	li	a5,127
    802069e2:	00e7fb63          	bgeu	a5,a4,802069f8 <syscallDupAndSet+0x3a>
        tf->a0 = -1;
    802069e6:	57fd                	li	a5,-1
    802069e8:	f8bc                	sd	a5,112(s1)
    }

    myproc()->ofile[fdnew] = f;
    filedup(f);
    tf->a0 = fdnew;
}
    802069ea:	70a2                	ld	ra,40(sp)
    802069ec:	7402                	ld	s0,32(sp)
    802069ee:	64e2                	ld	s1,24(sp)
    802069f0:	6942                	ld	s2,16(sp)
    802069f2:	69a2                	ld	s3,8(sp)
    802069f4:	6145                	addi	sp,sp,48
    802069f6:	8082                	ret
    int fd = tf->a0, fdnew = tf->a1;
    802069f8:	07853983          	ld	s3,120(a0)
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    802069fc:	ffffc097          	auipc	ra,0xffffc
    80206a00:	050080e7          	jalr	80(ra) # 80202a4c <myproc>
    80206a04:	2901                	sext.w	s2,s2
    80206a06:	03690913          	addi	s2,s2,54
    80206a0a:	090e                	slli	s2,s2,0x3
    80206a0c:	992a                	add	s2,s2,a0
    80206a0e:	00093903          	ld	s2,0(s2)
    80206a12:	fc090ae3          	beqz	s2,802069e6 <syscallDupAndSet+0x28>
    if (fdnew < 0 || fdnew >= NOFILE || myproc()->ofile[fdnew] != NULL) {
    80206a16:	0009879b          	sext.w	a5,s3
    80206a1a:	07f00713          	li	a4,127
    80206a1e:	00f77563          	bgeu	a4,a5,80206a28 <syscallDupAndSet+0x6a>
        tf->a0 = -1;
    80206a22:	57fd                	li	a5,-1
    80206a24:	f8bc                	sd	a5,112(s1)
        return;
    80206a26:	b7d1                	j	802069ea <syscallDupAndSet+0x2c>
    int fd = tf->a0, fdnew = tf->a1;
    80206a28:	89be                	mv	s3,a5
    if (fdnew < 0 || fdnew >= NOFILE || myproc()->ofile[fdnew] != NULL) {
    80206a2a:	ffffc097          	auipc	ra,0xffffc
    80206a2e:	022080e7          	jalr	34(ra) # 80202a4c <myproc>
    80206a32:	03698793          	addi	a5,s3,54
    80206a36:	078e                	slli	a5,a5,0x3
    80206a38:	953e                	add	a0,a0,a5
    80206a3a:	611c                	ld	a5,0(a0)
    80206a3c:	f3fd                	bnez	a5,80206a22 <syscallDupAndSet+0x64>
    myproc()->ofile[fdnew] = f;
    80206a3e:	ffffc097          	auipc	ra,0xffffc
    80206a42:	00e080e7          	jalr	14(ra) # 80202a4c <myproc>
    80206a46:	03698793          	addi	a5,s3,54
    80206a4a:	078e                	slli	a5,a5,0x3
    80206a4c:	953e                	add	a0,a0,a5
    80206a4e:	01253023          	sd	s2,0(a0)
    filedup(f);
    80206a52:	854a                	mv	a0,s2
    80206a54:	00003097          	auipc	ra,0x3
    80206a58:	170080e7          	jalr	368(ra) # 80209bc4 <filedup>
    tf->a0 = fdnew;
    80206a5c:	0734b823          	sd	s3,112(s1)
    80206a60:	b769                	j	802069ea <syscallDupAndSet+0x2c>

0000000080206a62 <syscallRead>:

void syscallRead(void) {
    80206a62:	7179                	addi	sp,sp,-48
    80206a64:	f406                	sd	ra,40(sp)
    80206a66:	f022                	sd	s0,32(sp)
    80206a68:	ec26                	sd	s1,24(sp)
    80206a6a:	e84a                	sd	s2,16(sp)
    80206a6c:	e44e                	sd	s3,8(sp)
    80206a6e:	e052                	sd	s4,0(sp)
    80206a70:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    80206a72:	fffff097          	auipc	ra,0xfffff
    80206a76:	7e8080e7          	jalr	2024(ra) # 8020625a <getHartTrapFrame>
    80206a7a:	84aa                	mv	s1,a0
    struct file* f;
    int len = tf->a2, fd = tf->a0;
    80206a7c:	07053903          	ld	s2,112(a0)
    u64 uva = tf->a1;

    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206a80:	0009071b          	sext.w	a4,s2
    80206a84:	07f00793          	li	a5,127
    80206a88:	00e7fc63          	bgeu	a5,a4,80206aa0 <syscallRead+0x3e>
        tf->a0 = -1;
    80206a8c:	57fd                	li	a5,-1
    80206a8e:	f8bc                	sd	a5,112(s1)
        tf->a0 = -1;
        return;
    }
    
    tf->a0 = fileread(f, uva, len);
}
    80206a90:	70a2                	ld	ra,40(sp)
    80206a92:	7402                	ld	s0,32(sp)
    80206a94:	64e2                	ld	s1,24(sp)
    80206a96:	6942                	ld	s2,16(sp)
    80206a98:	69a2                	ld	s3,8(sp)
    80206a9a:	6a02                	ld	s4,0(sp)
    80206a9c:	6145                	addi	sp,sp,48
    80206a9e:	8082                	ret
    int len = tf->a2, fd = tf->a0;
    80206aa0:	08053983          	ld	s3,128(a0)
    u64 uva = tf->a1;
    80206aa4:	07853a03          	ld	s4,120(a0)
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206aa8:	ffffc097          	auipc	ra,0xffffc
    80206aac:	fa4080e7          	jalr	-92(ra) # 80202a4c <myproc>
    80206ab0:	2901                	sext.w	s2,s2
    80206ab2:	03690913          	addi	s2,s2,54
    80206ab6:	090e                	slli	s2,s2,0x3
    80206ab8:	992a                	add	s2,s2,a0
    80206aba:	00093503          	ld	a0,0(s2)
    80206abe:	d579                	beqz	a0,80206a8c <syscallRead+0x2a>
    int len = tf->a2, fd = tf->a0;
    80206ac0:	0009861b          	sext.w	a2,s3
    if (len < 0) {
    80206ac4:	02099793          	slli	a5,s3,0x20
    80206ac8:	0007c963          	bltz	a5,80206ada <syscallRead+0x78>
    tf->a0 = fileread(f, uva, len);
    80206acc:	85d2                	mv	a1,s4
    80206ace:	00003097          	auipc	ra,0x3
    80206ad2:	298080e7          	jalr	664(ra) # 80209d66 <fileread>
    80206ad6:	f8a8                	sd	a0,112(s1)
    80206ad8:	bf65                	j	80206a90 <syscallRead+0x2e>
        tf->a0 = -1;
    80206ada:	57fd                	li	a5,-1
    80206adc:	f8bc                	sd	a5,112(s1)
        return;
    80206ade:	bf4d                	j	80206a90 <syscallRead+0x2e>

0000000080206ae0 <syscallWrite>:

void syscallWrite(void) {
    80206ae0:	7179                	addi	sp,sp,-48
    80206ae2:	f406                	sd	ra,40(sp)
    80206ae4:	f022                	sd	s0,32(sp)
    80206ae6:	ec26                	sd	s1,24(sp)
    80206ae8:	e84a                	sd	s2,16(sp)
    80206aea:	e44e                	sd	s3,8(sp)
    80206aec:	e052                	sd	s4,0(sp)
    80206aee:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    80206af0:	fffff097          	auipc	ra,0xfffff
    80206af4:	76a080e7          	jalr	1898(ra) # 8020625a <getHartTrapFrame>
    80206af8:	84aa                	mv	s1,a0
    struct file* f;
    int len = tf->a2, fd = tf->a0;
    80206afa:	07053903          	ld	s2,112(a0)
    u64 uva = tf->a1;

    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206afe:	0009071b          	sext.w	a4,s2
    80206b02:	07f00793          	li	a5,127
    80206b06:	00e7fc63          	bgeu	a5,a4,80206b1e <syscallWrite+0x3e>
        tf->a0 = -1;
    80206b0a:	57fd                	li	a5,-1
    80206b0c:	f8bc                	sd	a5,112(s1)
        tf->a0 = -1;
        return;
    }

    tf->a0 = filewrite(f, uva, len);
}
    80206b0e:	70a2                	ld	ra,40(sp)
    80206b10:	7402                	ld	s0,32(sp)
    80206b12:	64e2                	ld	s1,24(sp)
    80206b14:	6942                	ld	s2,16(sp)
    80206b16:	69a2                	ld	s3,8(sp)
    80206b18:	6a02                	ld	s4,0(sp)
    80206b1a:	6145                	addi	sp,sp,48
    80206b1c:	8082                	ret
    int len = tf->a2, fd = tf->a0;
    80206b1e:	08053983          	ld	s3,128(a0)
    u64 uva = tf->a1;
    80206b22:	07853a03          	ld	s4,120(a0)
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206b26:	ffffc097          	auipc	ra,0xffffc
    80206b2a:	f26080e7          	jalr	-218(ra) # 80202a4c <myproc>
    80206b2e:	2901                	sext.w	s2,s2
    80206b30:	03690913          	addi	s2,s2,54
    80206b34:	090e                	slli	s2,s2,0x3
    80206b36:	992a                	add	s2,s2,a0
    80206b38:	00093503          	ld	a0,0(s2)
    80206b3c:	d579                	beqz	a0,80206b0a <syscallWrite+0x2a>
    int len = tf->a2, fd = tf->a0;
    80206b3e:	0009861b          	sext.w	a2,s3
    if (len < 0) {
    80206b42:	02099793          	slli	a5,s3,0x20
    80206b46:	0007c963          	bltz	a5,80206b58 <syscallWrite+0x78>
    tf->a0 = filewrite(f, uva, len);
    80206b4a:	85d2                	mv	a1,s4
    80206b4c:	00003097          	auipc	ra,0x3
    80206b50:	2f4080e7          	jalr	756(ra) # 80209e40 <filewrite>
    80206b54:	f8a8                	sd	a0,112(s1)
    80206b56:	bf65                	j	80206b0e <syscallWrite+0x2e>
        tf->a0 = -1;
    80206b58:	57fd                	li	a5,-1
    80206b5a:	f8bc                	sd	a5,112(s1)
        return;
    80206b5c:	bf4d                	j	80206b0e <syscallWrite+0x2e>

0000000080206b5e <syscallClose>:

void syscallClose(void) {
    80206b5e:	7179                	addi	sp,sp,-48
    80206b60:	f406                	sd	ra,40(sp)
    80206b62:	f022                	sd	s0,32(sp)
    80206b64:	ec26                	sd	s1,24(sp)
    80206b66:	e84a                	sd	s2,16(sp)
    80206b68:	e44e                	sd	s3,8(sp)
    80206b6a:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    80206b6c:	fffff097          	auipc	ra,0xfffff
    80206b70:	6ee080e7          	jalr	1774(ra) # 8020625a <getHartTrapFrame>
    80206b74:	892a                	mv	s2,a0
    int fd = tf->a0;
    80206b76:	793c                	ld	a5,112(a0)
    struct file* f;

    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206b78:	0007869b          	sext.w	a3,a5
    80206b7c:	07f00713          	li	a4,127
    80206b80:	00d77c63          	bgeu	a4,a3,80206b98 <syscallClose+0x3a>
        tf->a0 = -1;
    80206b84:	57fd                	li	a5,-1
    80206b86:	06f93823          	sd	a5,112(s2)
    }
    
    myproc()->ofile[fd] = 0;
    fileclose(f);
    tf->a0 = 0;
}
    80206b8a:	70a2                	ld	ra,40(sp)
    80206b8c:	7402                	ld	s0,32(sp)
    80206b8e:	64e2                	ld	s1,24(sp)
    80206b90:	6942                	ld	s2,16(sp)
    80206b92:	69a2                	ld	s3,8(sp)
    80206b94:	6145                	addi	sp,sp,48
    80206b96:	8082                	ret
    int fd = tf->a0;
    80206b98:	84b6                	mv	s1,a3
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206b9a:	ffffc097          	auipc	ra,0xffffc
    80206b9e:	eb2080e7          	jalr	-334(ra) # 80202a4c <myproc>
    80206ba2:	03648793          	addi	a5,s1,54
    80206ba6:	078e                	slli	a5,a5,0x3
    80206ba8:	953e                	add	a0,a0,a5
    80206baa:	00053983          	ld	s3,0(a0)
    80206bae:	fc098be3          	beqz	s3,80206b84 <syscallClose+0x26>
    myproc()->ofile[fd] = 0;
    80206bb2:	ffffc097          	auipc	ra,0xffffc
    80206bb6:	e9a080e7          	jalr	-358(ra) # 80202a4c <myproc>
    80206bba:	03648793          	addi	a5,s1,54
    80206bbe:	078e                	slli	a5,a5,0x3
    80206bc0:	97aa                	add	a5,a5,a0
    80206bc2:	0007b023          	sd	zero,0(a5)
    fileclose(f);
    80206bc6:	854e                	mv	a0,s3
    80206bc8:	00003097          	auipc	ra,0x3
    80206bcc:	062080e7          	jalr	98(ra) # 80209c2a <fileclose>
    tf->a0 = 0;
    80206bd0:	06093823          	sd	zero,112(s2)
    80206bd4:	bf5d                	j	80206b8a <syscallClose+0x2c>

0000000080206bd6 <syscallGetFileState>:

void syscallGetFileState(void) {
    80206bd6:	7179                	addi	sp,sp,-48
    80206bd8:	f406                	sd	ra,40(sp)
    80206bda:	f022                	sd	s0,32(sp)
    80206bdc:	ec26                	sd	s1,24(sp)
    80206bde:	e84a                	sd	s2,16(sp)
    80206be0:	e44e                	sd	s3,8(sp)
    80206be2:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    80206be4:	fffff097          	auipc	ra,0xfffff
    80206be8:	676080e7          	jalr	1654(ra) # 8020625a <getHartTrapFrame>
    80206bec:	84aa                	mv	s1,a0
    struct file* f;
    int fd = tf->a0;
    80206bee:	07053903          	ld	s2,112(a0)
    u64 uva = tf->a1; 

    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206bf2:	0009071b          	sext.w	a4,s2
    80206bf6:	07f00793          	li	a5,127
    80206bfa:	00e7fb63          	bgeu	a5,a4,80206c10 <syscallGetFileState+0x3a>
        tf->a0 = -1;
    80206bfe:	57fd                	li	a5,-1
    80206c00:	f8bc                	sd	a5,112(s1)
        return;
    }

    tf->a0 = filestat(f, uva);
}
    80206c02:	70a2                	ld	ra,40(sp)
    80206c04:	7402                	ld	s0,32(sp)
    80206c06:	64e2                	ld	s1,24(sp)
    80206c08:	6942                	ld	s2,16(sp)
    80206c0a:	69a2                	ld	s3,8(sp)
    80206c0c:	6145                	addi	sp,sp,48
    80206c0e:	8082                	ret
    u64 uva = tf->a1; 
    80206c10:	07853983          	ld	s3,120(a0)
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206c14:	ffffc097          	auipc	ra,0xffffc
    80206c18:	e38080e7          	jalr	-456(ra) # 80202a4c <myproc>
    80206c1c:	2901                	sext.w	s2,s2
    80206c1e:	03690913          	addi	s2,s2,54
    80206c22:	090e                	slli	s2,s2,0x3
    80206c24:	992a                	add	s2,s2,a0
    80206c26:	00093503          	ld	a0,0(s2)
    80206c2a:	d971                	beqz	a0,80206bfe <syscallGetFileState+0x28>
    tf->a0 = filestat(f, uva);
    80206c2c:	85ce                	mv	a1,s3
    80206c2e:	00003097          	auipc	ra,0x3
    80206c32:	0c6080e7          	jalr	198(ra) # 80209cf4 <filestat>
    80206c36:	f8a8                	sd	a0,112(s1)
    80206c38:	b7e9                	j	80206c02 <syscallGetFileState+0x2c>

0000000080206c3a <syscallGetDirent>:

extern struct entry_cache* ecache;
void syscallGetDirent() {
    80206c3a:	7105                	addi	sp,sp,-480
    80206c3c:	ef86                	sd	ra,472(sp)
    80206c3e:	eba2                	sd	s0,464(sp)
    80206c40:	e7a6                	sd	s1,456(sp)
    80206c42:	e3ca                	sd	s2,448(sp)
    80206c44:	ff4e                	sd	s3,440(sp)
    80206c46:	fb52                	sd	s4,432(sp)
    80206c48:	f756                	sd	s5,424(sp)
    80206c4a:	f35a                	sd	s6,416(sp)
    80206c4c:	ef5e                	sd	s7,408(sp)
    80206c4e:	1380                	addi	s0,sp,480
    struct file* f;
    int fd, n;
    u64 addr;

    if (argfd(0, &fd, &f) < 0 || argaddr(1, &addr) < 0 || argint(2, &n) < 0) {
    80206c50:	fa840613          	addi	a2,s0,-88
    80206c54:	fa440593          	addi	a1,s0,-92
    80206c58:	4501                	li	a0,0
    80206c5a:	00000097          	auipc	ra,0x0
    80206c5e:	c3a080e7          	jalr	-966(ra) # 80206894 <argfd>
    80206c62:	04054663          	bltz	a0,80206cae <syscallGetDirent+0x74>
    80206c66:	f9840593          	addi	a1,s0,-104
    80206c6a:	4505                	li	a0,1
    80206c6c:	ffffd097          	auipc	ra,0xffffd
    80206c70:	178080e7          	jalr	376(ra) # 80203de4 <argaddr>
    80206c74:	02054d63          	bltz	a0,80206cae <syscallGetDirent+0x74>
    80206c78:	fa040593          	addi	a1,s0,-96
    80206c7c:	4509                	li	a0,2
    80206c7e:	ffffd097          	auipc	ra,0xffffd
    80206c82:	144080e7          	jalr	324(ra) # 80203dc2 <argint>
    80206c86:	02054463          	bltz	a0,80206cae <syscallGetDirent+0x74>
        getHartTrapFrame()->a0 = -2;
        return;
    }
    struct Process* p = myproc();
    80206c8a:	ffffc097          	auipc	ra,0xffffc
    80206c8e:	dc2080e7          	jalr	-574(ra) # 80202a4c <myproc>
    80206c92:	892a                	mv	s2,a0
    static char buf[512];
    struct linux_dirent64* dir64 = (struct linux_dirent64*)buf;

    if (f->type == FD_ENTRY) {
    80206c94:	fa843783          	ld	a5,-88(s0)
    80206c98:	4394                	lw	a3,0(a5)
    80206c9a:	4709                	li	a4,2
    80206c9c:	02e68a63          	beq	a3,a4,80206cd0 <syscallGetDirent+0x96>
        //     return;
        // }
        getHartTrapFrame()->a0 = nread;
        return;
    }
    getHartTrapFrame()->a0 = -5;
    80206ca0:	fffff097          	auipc	ra,0xfffff
    80206ca4:	5ba080e7          	jalr	1466(ra) # 8020625a <getHartTrapFrame>
    80206ca8:	57ed                	li	a5,-5
    80206caa:	f93c                	sd	a5,112(a0)
    return;
    80206cac:	a039                	j	80206cba <syscallGetDirent+0x80>
        getHartTrapFrame()->a0 = -2;
    80206cae:	fffff097          	auipc	ra,0xfffff
    80206cb2:	5ac080e7          	jalr	1452(ra) # 8020625a <getHartTrapFrame>
    80206cb6:	57f9                	li	a5,-2
    80206cb8:	f93c                	sd	a5,112(a0)
}
    80206cba:	60fe                	ld	ra,472(sp)
    80206cbc:	645e                	ld	s0,464(sp)
    80206cbe:	64be                	ld	s1,456(sp)
    80206cc0:	691e                	ld	s2,448(sp)
    80206cc2:	79fa                	ld	s3,440(sp)
    80206cc4:	7a5a                	ld	s4,432(sp)
    80206cc6:	7aba                	ld	s5,424(sp)
    80206cc8:	7b1a                	ld	s6,416(sp)
    80206cca:	6bfa                	ld	s7,408(sp)
    80206ccc:	613d                	addi	sp,sp,480
    80206cce:	8082                	ret
        int count = 0;
    80206cd0:	e2042223          	sw	zero,-476(s0)
        elock(f->ep);
    80206cd4:	6f88                	ld	a0,24(a5)
    80206cd6:	00002097          	auipc	ra,0x2
    80206cda:	348080e7          	jalr	840(ra) # 8020901e <elock>
        int nread=0;
    80206cde:	4981                	li	s3,0
            if (ret == -1)
    80206ce0:	5a7d                	li	s4,-1
            dir64->d_ino = 0;
    80206ce2:	0041f497          	auipc	s1,0x41f
    80206ce6:	2e648493          	addi	s1,s1,742 # 80625fc8 <buf.1808>
            dir64->d_type = (de.attribute & ATTR_DIRECTORY) ? DT_DIR : DT_REG;
    80206cea:	4a91                	li	s5,4
    80206cec:	4b21                	li	s6,8
    80206cee:	a8d1                	j	80206dc2 <syscallGetDirent+0x188>
                f->off += count * 32;
    80206cf0:	fa843683          	ld	a3,-88(s0)
    80206cf4:	e2442783          	lw	a5,-476(s0)
    80206cf8:	0057971b          	slliw	a4,a5,0x5
    80206cfc:	529c                	lw	a5,32(a3)
    80206cfe:	9fb9                	addw	a5,a5,a4
    80206d00:	d29c                	sw	a5,32(a3)
                de.valid = 0;
    80206d02:	f4041523          	sh	zero,-182(s0)
            while ((ret = enext(f->ep, &de, f->off, &count)) ==
    80206d06:	fa843783          	ld	a5,-88(s0)
    80206d0a:	e2440693          	addi	a3,s0,-476
    80206d0e:	5390                	lw	a2,32(a5)
    80206d10:	e2840593          	addi	a1,s0,-472
    80206d14:	6f88                	ld	a0,24(a5)
    80206d16:	00002097          	auipc	ra,0x2
    80206d1a:	532080e7          	jalr	1330(ra) # 80209248 <enext>
    80206d1e:	d969                	beqz	a0,80206cf0 <syscallGetDirent+0xb6>
            if (ret == -1)
    80206d20:	0f450163          	beq	a0,s4,80206e02 <syscallGetDirent+0x1c8>
            f->off += count * 32;
    80206d24:	fa843683          	ld	a3,-88(s0)
    80206d28:	e2442783          	lw	a5,-476(s0)
    80206d2c:	0057971b          	slliw	a4,a5,0x5
    80206d30:	529c                	lw	a5,32(a3)
    80206d32:	9fb9                	addw	a5,a5,a4
    80206d34:	d29c                	sw	a5,32(a3)
            int len = strlen(de.filename);
    80206d36:	e2840513          	addi	a0,s0,-472
    80206d3a:	00000097          	auipc	ra,0x0
    80206d3e:	864080e7          	jalr	-1948(ra) # 8020659e <strlen>
    80206d42:	8baa                	mv	s7,a0
            if (n < prefix + len + 1) {
    80206d44:	0135071b          	addiw	a4,a0,19
    80206d48:	fa042783          	lw	a5,-96(s0)
    80206d4c:	06f75e63          	bge	a4,a5,80206dc8 <syscallGetDirent+0x18e>
            dir64->d_ino = 0;
    80206d50:	0004b023          	sd	zero,0(s1)
            dir64->d_off = 0;  // This maybe wrong;
    80206d54:	0004b423          	sd	zero,8(s1)
            dir64->d_reclen = len + prefix + 1;
    80206d58:	0145079b          	addiw	a5,a0,20
    80206d5c:	00f49823          	sh	a5,16(s1)
            dir64->d_type = (de.attribute & ATTR_DIRECTORY) ? DT_DIR : DT_REG;
    80206d60:	f2844783          	lbu	a5,-216(s0)
    80206d64:	8bc1                	andi	a5,a5,16
    80206d66:	8756                	mv	a4,s5
    80206d68:	e391                	bnez	a5,80206d6c <syscallGetDirent+0x132>
    80206d6a:	875a                	mv	a4,s6
    80206d6c:	00e48923          	sb	a4,18(s1)
            if (copyout(p->pgdir, addr, (char*)dir64, prefix) != 0) {
    80206d70:	46cd                	li	a3,19
    80206d72:	8626                	mv	a2,s1
    80206d74:	f9843583          	ld	a1,-104(s0)
    80206d78:	16893503          	ld	a0,360(s2)
    80206d7c:	ffffb097          	auipc	ra,0xffffb
    80206d80:	6ce080e7          	jalr	1742(ra) # 8020244a <copyout>
    80206d84:	e125                	bnez	a0,80206de4 <syscallGetDirent+0x1aa>
            if (copyout(p->pgdir, addr + prefix, de.filename, len+1) != 0) {
    80206d86:	001b869b          	addiw	a3,s7,1
    80206d8a:	e2840613          	addi	a2,s0,-472
    80206d8e:	f9843583          	ld	a1,-104(s0)
    80206d92:	05cd                	addi	a1,a1,19
    80206d94:	16893503          	ld	a0,360(s2)
    80206d98:	ffffb097          	auipc	ra,0xffffb
    80206d9c:	6b2080e7          	jalr	1714(ra) # 8020244a <copyout>
    80206da0:	e929                	bnez	a0,80206df2 <syscallGetDirent+0x1b8>
            addr += prefix + len + 1;
    80206da2:	2bd1                	addiw	s7,s7,20
    80206da4:	000b871b          	sext.w	a4,s7
    80206da8:	f9843783          	ld	a5,-104(s0)
    80206dac:	97ba                	add	a5,a5,a4
    80206dae:	f8f43c23          	sd	a5,-104(s0)
            nread += prefix + len + 1;
    80206db2:	013b89bb          	addw	s3,s7,s3
            n -= prefix + len + 1;
    80206db6:	fa042783          	lw	a5,-96(s0)
    80206dba:	41778bbb          	subw	s7,a5,s7
    80206dbe:	fb742023          	sw	s7,-96(s0)
            de.valid = 0;
    80206dc2:	f4041523          	sh	zero,-182(s0)
            while ((ret = enext(f->ep, &de, f->off, &count)) ==
    80206dc6:	b781                	j	80206d06 <syscallGetDirent+0xcc>
                eunlock(f->ep);
    80206dc8:	fa843783          	ld	a5,-88(s0)
    80206dcc:	6f88                	ld	a0,24(a5)
    80206dce:	00002097          	auipc	ra,0x2
    80206dd2:	29a080e7          	jalr	666(ra) # 80209068 <eunlock>
                getHartTrapFrame()->a0 = nread;
    80206dd6:	fffff097          	auipc	ra,0xfffff
    80206dda:	484080e7          	jalr	1156(ra) # 8020625a <getHartTrapFrame>
    80206dde:	07353823          	sd	s3,112(a0)
                return;
    80206de2:	bde1                	j	80206cba <syscallGetDirent+0x80>
                getHartTrapFrame()->a0 = -4;
    80206de4:	fffff097          	auipc	ra,0xfffff
    80206de8:	476080e7          	jalr	1142(ra) # 8020625a <getHartTrapFrame>
    80206dec:	57f1                	li	a5,-4
    80206dee:	f93c                	sd	a5,112(a0)
                return;
    80206df0:	b5e9                	j	80206cba <syscallGetDirent+0x80>
                getHartTrapFrame()->a0 = -114;
    80206df2:	fffff097          	auipc	ra,0xfffff
    80206df6:	468080e7          	jalr	1128(ra) # 8020625a <getHartTrapFrame>
    80206dfa:	f8e00793          	li	a5,-114
    80206dfe:	f93c                	sd	a5,112(a0)
                return;
    80206e00:	bd6d                	j	80206cba <syscallGetDirent+0x80>
        eunlock(f->ep);
    80206e02:	fa843783          	ld	a5,-88(s0)
    80206e06:	6f88                	ld	a0,24(a5)
    80206e08:	00002097          	auipc	ra,0x2
    80206e0c:	260080e7          	jalr	608(ra) # 80209068 <eunlock>
        getHartTrapFrame()->a0 = nread;
    80206e10:	fffff097          	auipc	ra,0xfffff
    80206e14:	44a080e7          	jalr	1098(ra) # 8020625a <getHartTrapFrame>
    80206e18:	07353823          	sd	s3,112(a0)
        return;
    80206e1c:	bd79                	j	80206cba <syscallGetDirent+0x80>

0000000080206e1e <syscallOpenAt>:

//todo: support the mode
//todo: change the directory? whether we should add the ref(eput)
void syscallOpenAt(void) {
    80206e1e:	714d                	addi	sp,sp,-336
    80206e20:	e686                	sd	ra,328(sp)
    80206e22:	e2a2                	sd	s0,320(sp)
    80206e24:	fe26                	sd	s1,312(sp)
    80206e26:	fa4a                	sd	s2,304(sp)
    80206e28:	f64e                	sd	s3,296(sp)
    80206e2a:	f252                	sd	s4,288(sp)
    80206e2c:	ee56                	sd	s5,280(sp)
    80206e2e:	ea5a                	sd	s6,272(sp)
    80206e30:	0a80                	addi	s0,sp,336
    Trapframe* tf = getHartTrapFrame();
    80206e32:	fffff097          	auipc	ra,0xfffff
    80206e36:	428080e7          	jalr	1064(ra) # 8020625a <getHartTrapFrame>
    80206e3a:	84aa                	mv	s1,a0
    int startFd = tf->a0, flags = tf->a2, mode = tf->a3;
    80206e3c:	07053903          	ld	s2,112(a0)
    80206e40:	08053a83          	ld	s5,128(a0)
    80206e44:	08853983          	ld	s3,136(a0)
    char path[FAT32_MAX_PATH];
    if (fetchstr(tf->a1, path, FAT32_MAX_PATH) < 0) {
    80206e48:	10400613          	li	a2,260
    80206e4c:	eb840593          	addi	a1,s0,-328
    80206e50:	7d28                	ld	a0,120(a0)
    80206e52:	ffffd097          	auipc	ra,0xffffd
    80206e56:	078080e7          	jalr	120(ra) # 80203eca <fetchstr>
    80206e5a:	08054963          	bltz	a0,80206eec <syscallOpenAt+0xce>
    int startFd = tf->a0, flags = tf->a2, mode = tf->a3;
    80206e5e:	0009051b          	sext.w	a0,s2
    80206e62:	000a8a1b          	sext.w	s4,s5
        return;
    }
    struct dirent* entryPoint;

    // printf("startFd: %d, flags: %x, mode: %x\n", startFd, flags, mode);
    if (flags & O_CREATE) {
    80206e66:	040a7793          	andi	a5,s4,64
    80206e6a:	c7c1                	beqz	a5,80206ef2 <syscallOpenAt+0xd4>
        entryPoint = create(startFd, path, T_FILE, mode);
    80206e6c:	0009869b          	sext.w	a3,s3
    80206e70:	4609                	li	a2,2
    80206e72:	eb840593          	addi	a1,s0,-328
    80206e76:	00003097          	auipc	ra,0x3
    80206e7a:	b82080e7          	jalr	-1150(ra) # 802099f8 <create>
    80206e7e:	892a                	mv	s2,a0
        if (entryPoint == NULL) {
    80206e80:	c97d                	beqz	a0,80206f76 <syscallOpenAt+0x158>
            goto bad;
        }
    }
    struct file* file;
    int fd;
    if ((file = filealloc()) == NULL || (fd = fdalloc(file)) < 0) {
    80206e82:	00003097          	auipc	ra,0x3
    80206e86:	cd8080e7          	jalr	-808(ra) # 80209b5a <filealloc>
    80206e8a:	89aa                	mv	s3,a0
    80206e8c:	c979                	beqz	a0,80206f62 <syscallOpenAt+0x144>
    80206e8e:	00000097          	auipc	ra,0x0
    80206e92:	a70080e7          	jalr	-1424(ra) # 802068fe <fdalloc>
    80206e96:	8b2a                	mv	s6,a0
    80206e98:	0c054063          	bltz	a0,80206f58 <syscallOpenAt+0x13a>
        eunlock(entryPoint);
        eput(entryPoint);
        goto bad;
    }

    if (!(entryPoint->attribute & ATTR_DIRECTORY) && (flags & O_TRUNC)) {
    80206e9c:	10094783          	lbu	a5,256(s2)
    80206ea0:	8bc1                	andi	a5,a5,16
    80206ea2:	e781                	bnez	a5,80206eaa <syscallOpenAt+0x8c>
    80206ea4:	400a7793          	andi	a5,s4,1024
    80206ea8:	e3d5                	bnez	a5,80206f4c <syscallOpenAt+0x12e>
        etrunc(entryPoint);
    }

    file->type = FD_ENTRY;
    80206eaa:	4789                	li	a5,2
    80206eac:	00f9a023          	sw	a5,0(s3)
    file->off = (flags & O_APPEND) ? entryPoint->file_size : 0;
    80206eb0:	004a7793          	andi	a5,s4,4
    80206eb4:	4701                	li	a4,0
    80206eb6:	c399                	beqz	a5,80206ebc <syscallOpenAt+0x9e>
    80206eb8:	10892703          	lw	a4,264(s2)
    80206ebc:	02e9a023          	sw	a4,32(s3)
    file->ep = entryPoint;
    80206ec0:	0129bc23          	sd	s2,24(s3)
    file->readable = !(flags & O_WRONLY);
    80206ec4:	001a4a13          	xori	s4,s4,1
    80206ec8:	001a7a13          	andi	s4,s4,1
    80206ecc:	01498423          	sb	s4,8(s3)
    file->writable = (flags & O_WRONLY) || (flags & O_RDWR);
    80206ed0:	003afa93          	andi	s5,s5,3
    80206ed4:	01503ab3          	snez	s5,s5
    80206ed8:	015984a3          	sb	s5,9(s3)

    eunlock(entryPoint);
    80206edc:	854a                	mv	a0,s2
    80206ede:	00002097          	auipc	ra,0x2
    80206ee2:	18a080e7          	jalr	394(ra) # 80209068 <eunlock>

    tf->a0 = fd;
    80206ee6:	0764b823          	sd	s6,112(s1)
    return;
    80206eea:	a841                	j	80206f7a <syscallOpenAt+0x15c>
        tf->a0 = -1;
    80206eec:	57fd                	li	a5,-1
    80206eee:	f8bc                	sd	a5,112(s1)
        return;
    80206ef0:	a069                	j	80206f7a <syscallOpenAt+0x15c>
        if ((entryPoint = ename(startFd, path)) == NULL) {
    80206ef2:	eb840593          	addi	a1,s0,-328
    80206ef6:	00003097          	auipc	ra,0x3
    80206efa:	84e080e7          	jalr	-1970(ra) # 80209744 <ename>
    80206efe:	892a                	mv	s2,a0
    80206f00:	c93d                	beqz	a0,80206f76 <syscallOpenAt+0x158>
        elock(entryPoint);
    80206f02:	00002097          	auipc	ra,0x2
    80206f06:	11c080e7          	jalr	284(ra) # 8020901e <elock>
        if (!(entryPoint->attribute & ATTR_DIRECTORY) && (flags & O_DIRECTORY)) {
    80206f0a:	10094783          	lbu	a5,256(s2)
    80206f0e:	8bc1                	andi	a5,a5,16
    80206f10:	e385                	bnez	a5,80206f30 <syscallOpenAt+0x112>
    80206f12:	02aa1793          	slli	a5,s4,0x2a
    80206f16:	f607d6e3          	bgez	a5,80206e82 <syscallOpenAt+0x64>
            eunlock(entryPoint);
    80206f1a:	854a                	mv	a0,s2
    80206f1c:	00002097          	auipc	ra,0x2
    80206f20:	14c080e7          	jalr	332(ra) # 80209068 <eunlock>
            eput(entryPoint);
    80206f24:	854a                	mv	a0,s2
    80206f26:	00002097          	auipc	ra,0x2
    80206f2a:	1a4080e7          	jalr	420(ra) # 802090ca <eput>
            goto bad;
    80206f2e:	a0a1                	j	80206f76 <syscallOpenAt+0x158>
        if ((entryPoint->attribute & ATTR_DIRECTORY) && (flags & 0xFFF) != O_RDONLY) { //todo
    80206f30:	034a1793          	slli	a5,s4,0x34
    80206f34:	d7b9                	beqz	a5,80206e82 <syscallOpenAt+0x64>
            eunlock(entryPoint);
    80206f36:	854a                	mv	a0,s2
    80206f38:	00002097          	auipc	ra,0x2
    80206f3c:	130080e7          	jalr	304(ra) # 80209068 <eunlock>
            eput(entryPoint);
    80206f40:	854a                	mv	a0,s2
    80206f42:	00002097          	auipc	ra,0x2
    80206f46:	188080e7          	jalr	392(ra) # 802090ca <eput>
            goto bad;
    80206f4a:	a035                	j	80206f76 <syscallOpenAt+0x158>
        etrunc(entryPoint);
    80206f4c:	854a                	mv	a0,s2
    80206f4e:	00002097          	auipc	ra,0x2
    80206f52:	05a080e7          	jalr	90(ra) # 80208fa8 <etrunc>
    80206f56:	bf91                	j	80206eaa <syscallOpenAt+0x8c>
            fileclose(file);
    80206f58:	854e                	mv	a0,s3
    80206f5a:	00003097          	auipc	ra,0x3
    80206f5e:	cd0080e7          	jalr	-816(ra) # 80209c2a <fileclose>
        eunlock(entryPoint);
    80206f62:	854a                	mv	a0,s2
    80206f64:	00002097          	auipc	ra,0x2
    80206f68:	104080e7          	jalr	260(ra) # 80209068 <eunlock>
        eput(entryPoint);
    80206f6c:	854a                	mv	a0,s2
    80206f6e:	00002097          	auipc	ra,0x2
    80206f72:	15c080e7          	jalr	348(ra) # 802090ca <eput>
bad:
    tf->a0 = -1;
    80206f76:	57fd                	li	a5,-1
    80206f78:	f8bc                	sd	a5,112(s1)
}
    80206f7a:	60b6                	ld	ra,328(sp)
    80206f7c:	6416                	ld	s0,320(sp)
    80206f7e:	74f2                	ld	s1,312(sp)
    80206f80:	7952                	ld	s2,304(sp)
    80206f82:	79b2                	ld	s3,296(sp)
    80206f84:	7a12                	ld	s4,288(sp)
    80206f86:	6af2                	ld	s5,280(sp)
    80206f88:	6b52                	ld	s6,272(sp)
    80206f8a:	6171                	addi	sp,sp,336
    80206f8c:	8082                	ret

0000000080206f8e <syscallMakeDirAt>:

//todo: support the mode
//todo: change the directory? whether we should add the ref(eput)
void syscallMakeDirAt(void) {
    80206f8e:	7129                	addi	sp,sp,-320
    80206f90:	fe06                	sd	ra,312(sp)
    80206f92:	fa22                	sd	s0,304(sp)
    80206f94:	f626                	sd	s1,296(sp)
    80206f96:	f24a                	sd	s2,288(sp)
    80206f98:	ee4e                	sd	s3,280(sp)
    80206f9a:	0280                	addi	s0,sp,320
    Trapframe* tf = getHartTrapFrame();
    80206f9c:	fffff097          	auipc	ra,0xfffff
    80206fa0:	2be080e7          	jalr	702(ra) # 8020625a <getHartTrapFrame>
    80206fa4:	84aa                	mv	s1,a0
    int dirFd = tf->a0, mode = tf->a2;
    80206fa6:	07053903          	ld	s2,112(a0)
    80206faa:	08053983          	ld	s3,128(a0)
    char path[FAT32_MAX_PATH];
    if (fetchstr(tf->a1, path, FAT32_MAX_PATH) < 0) {
    80206fae:	10400613          	li	a2,260
    80206fb2:	ec840593          	addi	a1,s0,-312
    80206fb6:	7d28                	ld	a0,120(a0)
    80206fb8:	ffffd097          	auipc	ra,0xffffd
    80206fbc:	f12080e7          	jalr	-238(ra) # 80203eca <fetchstr>
    80206fc0:	02054b63          	bltz	a0,80206ff6 <syscallMakeDirAt+0x68>
        return;
    }

    struct dirent* entryPoint;

    if ((entryPoint = create(dirFd, path, T_DIR, mode)) == 0) {
    80206fc4:	0009869b          	sext.w	a3,s3
    80206fc8:	4605                	li	a2,1
    80206fca:	ec840593          	addi	a1,s0,-312
    80206fce:	0009051b          	sext.w	a0,s2
    80206fd2:	00003097          	auipc	ra,0x3
    80206fd6:	a26080e7          	jalr	-1498(ra) # 802099f8 <create>
    80206fda:	892a                	mv	s2,a0
    80206fdc:	c515                	beqz	a0,80207008 <syscallMakeDirAt+0x7a>
        goto bad;
    }

    eunlock(entryPoint);
    80206fde:	00002097          	auipc	ra,0x2
    80206fe2:	08a080e7          	jalr	138(ra) # 80209068 <eunlock>
    eput(entryPoint);
    80206fe6:	854a                	mv	a0,s2
    80206fe8:	00002097          	auipc	ra,0x2
    80206fec:	0e2080e7          	jalr	226(ra) # 802090ca <eput>
    tf->a0 = 0;
    80206ff0:	0604b823          	sd	zero,112(s1)
    return;
    80206ff4:	a019                	j	80206ffa <syscallMakeDirAt+0x6c>
        tf->a0 = -1;
    80206ff6:	57fd                	li	a5,-1
    80206ff8:	f8bc                	sd	a5,112(s1)

bad:
    tf->a0 = -1;
}
    80206ffa:	70f2                	ld	ra,312(sp)
    80206ffc:	7452                	ld	s0,304(sp)
    80206ffe:	74b2                	ld	s1,296(sp)
    80207000:	7912                	ld	s2,288(sp)
    80207002:	69f2                	ld	s3,280(sp)
    80207004:	6131                	addi	sp,sp,320
    80207006:	8082                	ret
    tf->a0 = -1;
    80207008:	57fd                	li	a5,-1
    8020700a:	f8bc                	sd	a5,112(s1)
    8020700c:	b7fd                	j	80206ffa <syscallMakeDirAt+0x6c>

000000008020700e <syscallChangeDir>:

void syscallChangeDir(void) {
    8020700e:	7129                	addi	sp,sp,-320
    80207010:	fe06                	sd	ra,312(sp)
    80207012:	fa22                	sd	s0,304(sp)
    80207014:	f626                	sd	s1,296(sp)
    80207016:	f24a                	sd	s2,288(sp)
    80207018:	ee4e                	sd	s3,280(sp)
    8020701a:	0280                	addi	s0,sp,320
    Trapframe* tf = getHartTrapFrame();
    8020701c:	fffff097          	auipc	ra,0xfffff
    80207020:	23e080e7          	jalr	574(ra) # 8020625a <getHartTrapFrame>
    80207024:	84aa                	mv	s1,a0
    char path[FAT32_MAX_PATH];
    struct dirent* ep;

    struct Process* p = myproc();
    80207026:	ffffc097          	auipc	ra,0xffffc
    8020702a:	a26080e7          	jalr	-1498(ra) # 80202a4c <myproc>
    8020702e:	89aa                	mv	s3,a0
    
    if (fetchstr(tf->a0, path, FAT32_MAX_PATH) < 0 || (ep = ename(AT_FDCWD, path)) == NULL) {
    80207030:	10400613          	li	a2,260
    80207034:	ec840593          	addi	a1,s0,-312
    80207038:	78a8                	ld	a0,112(s1)
    8020703a:	ffffd097          	auipc	ra,0xffffd
    8020703e:	e90080e7          	jalr	-368(ra) # 80203eca <fetchstr>
    80207042:	04054463          	bltz	a0,8020708a <syscallChangeDir+0x7c>
    80207046:	ec840593          	addi	a1,s0,-312
    8020704a:	f9c00513          	li	a0,-100
    8020704e:	00002097          	auipc	ra,0x2
    80207052:	6f6080e7          	jalr	1782(ra) # 80209744 <ename>
    80207056:	892a                	mv	s2,a0
    80207058:	c90d                	beqz	a0,8020708a <syscallChangeDir+0x7c>
        tf->a0 = -1;
        return;
    }

    elock(ep);
    8020705a:	00002097          	auipc	ra,0x2
    8020705e:	fc4080e7          	jalr	-60(ra) # 8020901e <elock>
    if (!(ep->attribute & ATTR_DIRECTORY)) {
    80207062:	10094783          	lbu	a5,256(s2)
    80207066:	8bc1                	andi	a5,a5,16
    80207068:	cb95                	beqz	a5,8020709c <syscallChangeDir+0x8e>
        eput(ep);
        tf->a0 = -1;
        return;
    }    

    eunlock(ep);
    8020706a:	854a                	mv	a0,s2
    8020706c:	00002097          	auipc	ra,0x2
    80207070:	ffc080e7          	jalr	-4(ra) # 80209068 <eunlock>
    eput(p->cwd);
    80207074:	1a89b503          	ld	a0,424(s3)
    80207078:	00002097          	auipc	ra,0x2
    8020707c:	052080e7          	jalr	82(ra) # 802090ca <eput>
    p->cwd = ep;
    80207080:	1b29b423          	sd	s2,424(s3)
    tf->a0 = 0;
    80207084:	0604b823          	sd	zero,112(s1)
    80207088:	a019                	j	8020708e <syscallChangeDir+0x80>
        tf->a0 = -1;
    8020708a:	57fd                	li	a5,-1
    8020708c:	f8bc                	sd	a5,112(s1)
}
    8020708e:	70f2                	ld	ra,312(sp)
    80207090:	7452                	ld	s0,304(sp)
    80207092:	74b2                	ld	s1,296(sp)
    80207094:	7912                	ld	s2,288(sp)
    80207096:	69f2                	ld	s3,280(sp)
    80207098:	6131                	addi	sp,sp,320
    8020709a:	8082                	ret
        eunlock(ep);
    8020709c:	854a                	mv	a0,s2
    8020709e:	00002097          	auipc	ra,0x2
    802070a2:	fca080e7          	jalr	-54(ra) # 80209068 <eunlock>
        eput(ep);
    802070a6:	854a                	mv	a0,s2
    802070a8:	00002097          	auipc	ra,0x2
    802070ac:	022080e7          	jalr	34(ra) # 802090ca <eput>
        tf->a0 = -1;
    802070b0:	57fd                	li	a5,-1
    802070b2:	f8bc                	sd	a5,112(s1)
        return;
    802070b4:	bfe9                	j	8020708e <syscallChangeDir+0x80>

00000000802070b6 <syscallPipe>:
    }
    
    tf->a0 = uva;
}

void syscallPipe(void) {
    802070b6:	715d                	addi	sp,sp,-80
    802070b8:	e486                	sd	ra,72(sp)
    802070ba:	e0a2                	sd	s0,64(sp)
    802070bc:	fc26                	sd	s1,56(sp)
    802070be:	f84a                	sd	s2,48(sp)
    802070c0:	f44e                	sd	s3,40(sp)
    802070c2:	0880                	addi	s0,sp,80
    Trapframe* tf = getHartTrapFrame();
    802070c4:	fffff097          	auipc	ra,0xfffff
    802070c8:	196080e7          	jalr	406(ra) # 8020625a <getHartTrapFrame>
    802070cc:	84aa                	mv	s1,a0
    u64 fdarray = tf->a0;  // user pointer to array of two integers
    802070ce:	07053983          	ld	s3,112(a0)
    struct file *rf, *wf;
    int fd0, fd1;
    struct Process* p = myproc();
    802070d2:	ffffc097          	auipc	ra,0xffffc
    802070d6:	97a080e7          	jalr	-1670(ra) # 80202a4c <myproc>
    802070da:	892a                	mv	s2,a0

    if (pipealloc(&rf, &wf) < 0) {
    802070dc:	fc040593          	addi	a1,s0,-64
    802070e0:	fc840513          	addi	a0,s0,-56
    802070e4:	00003097          	auipc	ra,0x3
    802070e8:	0ec080e7          	jalr	236(ra) # 8020a1d0 <pipealloc>
    802070ec:	08054b63          	bltz	a0,80207182 <syscallPipe+0xcc>
        goto bad;
    }

    fd0 = -1;
    802070f0:	57fd                	li	a5,-1
    802070f2:	faf42e23          	sw	a5,-68(s0)
    if ((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0) {
    802070f6:	fc843503          	ld	a0,-56(s0)
    802070fa:	00000097          	auipc	ra,0x0
    802070fe:	804080e7          	jalr	-2044(ra) # 802068fe <fdalloc>
    80207102:	faa42e23          	sw	a0,-68(s0)
    80207106:	06054263          	bltz	a0,8020716a <syscallPipe+0xb4>
    8020710a:	fc043503          	ld	a0,-64(s0)
    8020710e:	fffff097          	auipc	ra,0xfffff
    80207112:	7f0080e7          	jalr	2032(ra) # 802068fe <fdalloc>
    80207116:	faa42c23          	sw	a0,-72(s0)
    8020711a:	02054e63          	bltz	a0,80207156 <syscallPipe+0xa0>
        fileclose(rf);
        fileclose(wf);
        goto bad;
    }
    
    if (copyout(p->pgdir, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
    8020711e:	4691                	li	a3,4
    80207120:	fbc40613          	addi	a2,s0,-68
    80207124:	85ce                	mv	a1,s3
    80207126:	16893503          	ld	a0,360(s2)
    8020712a:	ffffb097          	auipc	ra,0xffffb
    8020712e:	320080e7          	jalr	800(ra) # 8020244a <copyout>
    80207132:	06054163          	bltz	a0,80207194 <syscallPipe+0xde>
        copyout(p->pgdir, fdarray + sizeof(fd0), (char*)&fd1, sizeof(fd1)) <
    80207136:	4691                	li	a3,4
    80207138:	fb840613          	addi	a2,s0,-72
    8020713c:	00498593          	addi	a1,s3,4
    80207140:	16893503          	ld	a0,360(s2)
    80207144:	ffffb097          	auipc	ra,0xffffb
    80207148:	306080e7          	jalr	774(ra) # 8020244a <copyout>
    if (copyout(p->pgdir, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
    8020714c:	04054463          	bltz	a0,80207194 <syscallPipe+0xde>
        fileclose(rf);
        fileclose(wf);
        goto bad;
    }
    
    tf->a0 = 0;
    80207150:	0604b823          	sd	zero,112(s1)
    return;
    80207154:	a80d                	j	80207186 <syscallPipe+0xd0>
        if (fd0 >= 0)
    80207156:	fbc42783          	lw	a5,-68(s0)
    8020715a:	0007c863          	bltz	a5,8020716a <syscallPipe+0xb4>
            p->ofile[fd0] = 0;
    8020715e:	03678793          	addi	a5,a5,54
    80207162:	078e                	slli	a5,a5,0x3
    80207164:	97ca                	add	a5,a5,s2
    80207166:	0007b023          	sd	zero,0(a5)
        fileclose(rf);
    8020716a:	fc843503          	ld	a0,-56(s0)
    8020716e:	00003097          	auipc	ra,0x3
    80207172:	abc080e7          	jalr	-1348(ra) # 80209c2a <fileclose>
        fileclose(wf);
    80207176:	fc043503          	ld	a0,-64(s0)
    8020717a:	00003097          	auipc	ra,0x3
    8020717e:	ab0080e7          	jalr	-1360(ra) # 80209c2a <fileclose>

bad:
    tf->a0 = -1;
    80207182:	57fd                	li	a5,-1
    80207184:	f8bc                	sd	a5,112(s1)
}
    80207186:	60a6                	ld	ra,72(sp)
    80207188:	6406                	ld	s0,64(sp)
    8020718a:	74e2                	ld	s1,56(sp)
    8020718c:	7942                	ld	s2,48(sp)
    8020718e:	79a2                	ld	s3,40(sp)
    80207190:	6161                	addi	sp,sp,80
    80207192:	8082                	ret
        p->ofile[fd0] = 0;
    80207194:	fbc42783          	lw	a5,-68(s0)
    80207198:	03678793          	addi	a5,a5,54
    8020719c:	078e                	slli	a5,a5,0x3
    8020719e:	97ca                	add	a5,a5,s2
    802071a0:	0007b023          	sd	zero,0(a5)
        p->ofile[fd1] = 0;
    802071a4:	fb842503          	lw	a0,-72(s0)
    802071a8:	03650513          	addi	a0,a0,54
    802071ac:	050e                	slli	a0,a0,0x3
    802071ae:	954a                	add	a0,a0,s2
    802071b0:	00053023          	sd	zero,0(a0)
        fileclose(rf);
    802071b4:	fc843503          	ld	a0,-56(s0)
    802071b8:	00003097          	auipc	ra,0x3
    802071bc:	a72080e7          	jalr	-1422(ra) # 80209c2a <fileclose>
        fileclose(wf);
    802071c0:	fc043503          	ld	a0,-64(s0)
    802071c4:	00003097          	auipc	ra,0x3
    802071c8:	a66080e7          	jalr	-1434(ra) # 80209c2a <fileclose>
        goto bad;
    802071cc:	bf5d                	j	80207182 <syscallPipe+0xcc>

00000000802071ce <syscallDevice>:

void syscallDevice(void) {
    802071ce:	7139                	addi	sp,sp,-64
    802071d0:	fc06                	sd	ra,56(sp)
    802071d2:	f822                	sd	s0,48(sp)
    802071d4:	f426                	sd	s1,40(sp)
    802071d6:	f04a                	sd	s2,32(sp)
    802071d8:	ec4e                	sd	s3,24(sp)
    802071da:	e852                	sd	s4,16(sp)
    802071dc:	e456                	sd	s5,8(sp)
    802071de:	0080                	addi	s0,sp,64
    Trapframe* tf = getHartTrapFrame();
    802071e0:	fffff097          	auipc	ra,0xfffff
    802071e4:	07a080e7          	jalr	122(ra) # 8020625a <getHartTrapFrame>
    int fd, omode = tf->a1;
    802071e8:	07853983          	ld	s3,120(a0)
    802071ec:	00098a1b          	sext.w	s4,s3
    int major = tf->a0;
    802071f0:	07053a83          	ld	s5,112(a0)
    struct file* f;

    if (omode & O_CREATE) {
    802071f4:	040a7793          	andi	a5,s4,64
    802071f8:	e395                	bnez	a5,8020721c <syscallDevice+0x4e>
    802071fa:	84aa                	mv	s1,a0
        panic("dev file on FAT");
    }

    if (major < 0 || major >= NDEV) {
    802071fc:	000a879b          	sext.w	a5,s5
    80207200:	470d                	li	a4,3
    80207202:	02f77f63          	bgeu	a4,a5,80207240 <syscallDevice+0x72>

    tf->a0 = fd;
    return;

bad:
    tf->a0 = -1;
    80207206:	57fd                	li	a5,-1
    80207208:	f8bc                	sd	a5,112(s1)
}
    8020720a:	70e2                	ld	ra,56(sp)
    8020720c:	7442                	ld	s0,48(sp)
    8020720e:	74a2                	ld	s1,40(sp)
    80207210:	7902                	ld	s2,32(sp)
    80207212:	69e2                	ld	s3,24(sp)
    80207214:	6a42                	ld	s4,16(sp)
    80207216:	6aa2                	ld	s5,8(sp)
    80207218:	6121                	addi	sp,sp,64
    8020721a:	8082                	ret
        panic("dev file on FAT");
    8020721c:	00007697          	auipc	a3,0x7
    80207220:	e8c68693          	addi	a3,a3,-372 # 8020e0a8 <__func__.1096+0x68>
    80207224:	00007617          	auipc	a2,0x7
    80207228:	edc60613          	addi	a2,a2,-292 # 8020e100 <__func__.1876>
    8020722c:	1a700593          	li	a1,423
    80207230:	00007517          	auipc	a0,0x7
    80207234:	e8850513          	addi	a0,a0,-376 # 8020e0b8 <__func__.1096+0x78>
    80207238:	ffffa097          	auipc	ra,0xffffa
    8020723c:	91e080e7          	jalr	-1762(ra) # 80200b56 <_panic_>
    if ((f = filealloc()) == NULL || (fd = fdalloc(f)) < 0) {
    80207240:	00003097          	auipc	ra,0x3
    80207244:	91a080e7          	jalr	-1766(ra) # 80209b5a <filealloc>
    80207248:	892a                	mv	s2,a0
    8020724a:	dd55                	beqz	a0,80207206 <syscallDevice+0x38>
    8020724c:	fffff097          	auipc	ra,0xfffff
    80207250:	6b2080e7          	jalr	1714(ra) # 802068fe <fdalloc>
    80207254:	02054963          	bltz	a0,80207286 <syscallDevice+0xb8>
    f->type = FD_DEVICE;
    80207258:	478d                	li	a5,3
    8020725a:	00f92023          	sw	a5,0(s2)
    f->off = 0;
    8020725e:	02092023          	sw	zero,32(s2)
    f->ep = 0;
    80207262:	00093c23          	sd	zero,24(s2)
    f->major = major;
    80207266:	03591223          	sh	s5,36(s2)
    f->readable = !(omode & O_WRONLY);
    8020726a:	001a4a13          	xori	s4,s4,1
    8020726e:	001a7a13          	andi	s4,s4,1
    80207272:	01490423          	sb	s4,8(s2)
    f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
    80207276:	0039f993          	andi	s3,s3,3
    8020727a:	013039b3          	snez	s3,s3
    8020727e:	013904a3          	sb	s3,9(s2)
    tf->a0 = fd;
    80207282:	f8a8                	sd	a0,112(s1)
    return;
    80207284:	b759                	j	8020720a <syscallDevice+0x3c>
            fileclose(f);
    80207286:	854a                	mv	a0,s2
    80207288:	00003097          	auipc	ra,0x3
    8020728c:	9a2080e7          	jalr	-1630(ra) # 80209c2a <fileclose>
    80207290:	bf9d                	j	80207206 <syscallDevice+0x38>

0000000080207292 <syscallReadDir>:

void syscallReadDir(void) {
    80207292:	7179                	addi	sp,sp,-48
    80207294:	f406                	sd	ra,40(sp)
    80207296:	f022                	sd	s0,32(sp)
    80207298:	ec26                	sd	s1,24(sp)
    8020729a:	e84a                	sd	s2,16(sp)
    8020729c:	e44e                	sd	s3,8(sp)
    8020729e:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    802072a0:	fffff097          	auipc	ra,0xfffff
    802072a4:	fba080e7          	jalr	-70(ra) # 8020625a <getHartTrapFrame>
    802072a8:	84aa                	mv	s1,a0
    struct file* f;
    int fd = tf->a0;
    802072aa:	07053903          	ld	s2,112(a0)
    u64 uva = tf->a1;

    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    802072ae:	0009071b          	sext.w	a4,s2
    802072b2:	07f00793          	li	a5,127
    802072b6:	00e7fb63          	bgeu	a5,a4,802072cc <syscallReadDir+0x3a>
        tf->a0 = -1;
    802072ba:	57fd                	li	a5,-1
    802072bc:	f8bc                	sd	a5,112(s1)
        return;
    }
    
    tf->a0 = dirnext(f, uva);
}
    802072be:	70a2                	ld	ra,40(sp)
    802072c0:	7402                	ld	s0,32(sp)
    802072c2:	64e2                	ld	s1,24(sp)
    802072c4:	6942                	ld	s2,16(sp)
    802072c6:	69a2                	ld	s3,8(sp)
    802072c8:	6145                	addi	sp,sp,48
    802072ca:	8082                	ret
    u64 uva = tf->a1;
    802072cc:	07853983          	ld	s3,120(a0)
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    802072d0:	ffffb097          	auipc	ra,0xffffb
    802072d4:	77c080e7          	jalr	1916(ra) # 80202a4c <myproc>
    802072d8:	2901                	sext.w	s2,s2
    802072da:	03690913          	addi	s2,s2,54
    802072de:	090e                	slli	s2,s2,0x3
    802072e0:	992a                	add	s2,s2,a0
    802072e2:	00093503          	ld	a0,0(s2)
    802072e6:	d971                	beqz	a0,802072ba <syscallReadDir+0x28>
    tf->a0 = dirnext(f, uva);
    802072e8:	85ce                	mv	a1,s3
    802072ea:	00003097          	auipc	ra,0x3
    802072ee:	c5e080e7          	jalr	-930(ra) # 80209f48 <dirnext>
    802072f2:	f8a8                	sd	a0,112(s1)
    802072f4:	b7e9                	j	802072be <syscallReadDir+0x2c>

00000000802072f6 <sys_rename>:
    return 0;
} */

// Must hold too many locks at a time! It's possible to raise a deadlock.
// Because this op takes some steps, we can't promise
u64 sys_rename(void) {
    802072f6:	c4010113          	addi	sp,sp,-960
    802072fa:	3a113c23          	sd	ra,952(sp)
    802072fe:	3a813823          	sd	s0,944(sp)
    80207302:	3a913423          	sd	s1,936(sp)
    80207306:	3b213023          	sd	s2,928(sp)
    8020730a:	39313c23          	sd	s3,920(sp)
    8020730e:	39413823          	sd	s4,912(sp)
    80207312:	0780                	addi	s0,sp,960
    char old[FAT32_MAX_PATH], new[FAT32_MAX_PATH];
    if (argstr(0, old, FAT32_MAX_PATH) < 0 ||
    80207314:	10400613          	li	a2,260
    80207318:	ec840593          	addi	a1,s0,-312
    8020731c:	4501                	li	a0,0
    8020731e:	ffffd097          	auipc	ra,0xffffd
    80207322:	bf6080e7          	jalr	-1034(ra) # 80203f14 <argstr>
        argstr(1, new, FAT32_MAX_PATH) < 0) {
        return -1;
    80207326:	57fd                	li	a5,-1
    if (argstr(0, old, FAT32_MAX_PATH) < 0 ||
    80207328:	0e054163          	bltz	a0,8020740a <sys_rename+0x114>
        argstr(1, new, FAT32_MAX_PATH) < 0) {
    8020732c:	10400613          	li	a2,260
    80207330:	dc040593          	addi	a1,s0,-576
    80207334:	4505                	li	a0,1
    80207336:	ffffd097          	auipc	ra,0xffffd
    8020733a:	bde080e7          	jalr	-1058(ra) # 80203f14 <argstr>
        return -1;
    8020733e:	57fd                	li	a5,-1
    if (argstr(0, old, FAT32_MAX_PATH) < 0 ||
    80207340:	0c054563          	bltz	a0,8020740a <sys_rename+0x114>
    }

    struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
    int srclock = 0;
    char* name;
    if ((src = ename(AT_FDCWD, old)) == NULL || (pdst = enameparent(AT_FDCWD, new, old)) == NULL ||
    80207344:	ec840593          	addi	a1,s0,-312
    80207348:	f9c00513          	li	a0,-100
    8020734c:	00002097          	auipc	ra,0x2
    80207350:	3f8080e7          	jalr	1016(ra) # 80209744 <ename>
    80207354:	84aa                	mv	s1,a0
    80207356:	1c050b63          	beqz	a0,8020752c <sys_rename+0x236>
    8020735a:	ec840613          	addi	a2,s0,-312
    8020735e:	dc040593          	addi	a1,s0,-576
    80207362:	f9c00513          	li	a0,-100
    80207366:	00002097          	auipc	ra,0x2
    8020736a:	676080e7          	jalr	1654(ra) # 802099dc <enameparent>
    8020736e:	892a                	mv	s2,a0
    80207370:	cd35                	beqz	a0,802073ec <sys_rename+0xf6>
        (name = formatname(old)) == NULL) {
    80207372:	ec840513          	addi	a0,s0,-312
    80207376:	00001097          	auipc	ra,0x1
    8020737a:	554080e7          	jalr	1364(ra) # 802088ca <formatname>
    8020737e:	89aa                	mv	s3,a0
    if ((src = ename(AT_FDCWD, old)) == NULL || (pdst = enameparent(AT_FDCWD, new, old)) == NULL ||
    80207380:	c535                	beqz	a0,802073ec <sys_rename+0xf6>
        goto fail;  // src doesn't exist || dst parent doesn't exist || illegal
                    // new name
    }
    for (struct dirent* ep = pdst; ep != NULL; ep = ep->parent) {
        if (ep ==
    80207382:	07248563          	beq	s1,s2,802073ec <sys_rename+0xf6>
    for (struct dirent* ep = pdst; ep != NULL; ep = ep->parent) {
    80207386:	87ca                	mv	a5,s2
    80207388:	1387b783          	ld	a5,312(a5)
    8020738c:	c781                	beqz	a5,80207394 <sys_rename+0x9e>
        if (ep ==
    8020738e:	fef49de3          	bne	s1,a5,80207388 <sys_rename+0x92>
    80207392:	a8a9                	j	802073ec <sys_rename+0xf6>
            goto fail;
        }
    }

    uint off;
    elock(src);  // must hold child's lock before acquiring parent's, because we
    80207394:	8526                	mv	a0,s1
    80207396:	00002097          	auipc	ra,0x2
    8020739a:	c88080e7          	jalr	-888(ra) # 8020901e <elock>
                 // do so in other similar cases
    srclock = 1;
    elock(pdst);
    8020739e:	854a                	mv	a0,s2
    802073a0:	00002097          	auipc	ra,0x2
    802073a4:	c7e080e7          	jalr	-898(ra) # 8020901e <elock>
    dst = dirlookup(pdst, name, &off);
    802073a8:	dbc40613          	addi	a2,s0,-580
    802073ac:	85ce                	mv	a1,s3
    802073ae:	854a                	mv	a0,s2
    802073b0:	00002097          	auipc	ra,0x2
    802073b4:	074080e7          	jalr	116(ra) # 80209424 <dirlookup>
    802073b8:	8a2a                	mv	s4,a0
    if (dst != NULL) {
    802073ba:	cd45                	beqz	a0,80207472 <sys_rename+0x17c>
        eunlock(pdst);
    802073bc:	854a                	mv	a0,s2
    802073be:	00002097          	auipc	ra,0x2
    802073c2:	caa080e7          	jalr	-854(ra) # 80209068 <eunlock>
        if (src == dst) {
    802073c6:	01448963          	beq	s1,s4,802073d8 <sys_rename+0xe2>
            goto fail;
        } else if (src->attribute & dst->attribute & ATTR_DIRECTORY) {
    802073ca:	1004c783          	lbu	a5,256(s1)
    802073ce:	100a4703          	lbu	a4,256(s4)
    802073d2:	8ff9                	and	a5,a5,a4
    802073d4:	8bc1                	andi	a5,a5,16
    802073d6:	ebb1                	bnez	a5,8020742a <sys_rename+0x134>

    return 0;

fail:
    if (srclock)
        eunlock(src);
    802073d8:	8526                	mv	a0,s1
    802073da:	00002097          	auipc	ra,0x2
    802073de:	c8e080e7          	jalr	-882(ra) # 80209068 <eunlock>
    if (dst)
        eput(dst);
    802073e2:	8552                	mv	a0,s4
    802073e4:	00002097          	auipc	ra,0x2
    802073e8:	ce6080e7          	jalr	-794(ra) # 802090ca <eput>
    if (pdst)
    802073ec:	00090763          	beqz	s2,802073fa <sys_rename+0x104>
        eput(pdst);
    802073f0:	854a                	mv	a0,s2
    802073f2:	00002097          	auipc	ra,0x2
    802073f6:	cd8080e7          	jalr	-808(ra) # 802090ca <eput>
    if (src)
        eput(src);
    return -1;
    802073fa:	57fd                	li	a5,-1
    if (src)
    802073fc:	c499                	beqz	s1,8020740a <sys_rename+0x114>
        eput(src);
    802073fe:	8526                	mv	a0,s1
    80207400:	00002097          	auipc	ra,0x2
    80207404:	cca080e7          	jalr	-822(ra) # 802090ca <eput>
    return -1;
    80207408:	57fd                	li	a5,-1
}
    8020740a:	853e                	mv	a0,a5
    8020740c:	3b813083          	ld	ra,952(sp)
    80207410:	3b013403          	ld	s0,944(sp)
    80207414:	3a813483          	ld	s1,936(sp)
    80207418:	3a013903          	ld	s2,928(sp)
    8020741c:	39813983          	ld	s3,920(sp)
    80207420:	39013a03          	ld	s4,912(sp)
    80207424:	3c010113          	addi	sp,sp,960
    80207428:	8082                	ret
            elock(dst);
    8020742a:	8552                	mv	a0,s4
    8020742c:	00002097          	auipc	ra,0x2
    80207430:	bf2080e7          	jalr	-1038(ra) # 8020901e <elock>
    ep.valid = 0;
    80207434:	d6041523          	sh	zero,-662(s0)
    return enext(dp, &ep, 2 * 32, &count) == -1; // skip the "." and ".."
    80207438:	c4440693          	addi	a3,s0,-956
    8020743c:	04000613          	li	a2,64
    80207440:	c4840593          	addi	a1,s0,-952
    80207444:	8552                	mv	a0,s4
    80207446:	00002097          	auipc	ra,0x2
    8020744a:	e02080e7          	jalr	-510(ra) # 80209248 <enext>
            if (!isDirEmpty(dst)) {  // it's ok to overwrite an empty dir
    8020744e:	57fd                	li	a5,-1
    80207450:	0cf51863          	bne	a0,a5,80207520 <sys_rename+0x22a>
            elock(pdst);
    80207454:	854a                	mv	a0,s2
    80207456:	00002097          	auipc	ra,0x2
    8020745a:	bc8080e7          	jalr	-1080(ra) # 8020901e <elock>
        eremove(dst);
    8020745e:	8552                	mv	a0,s4
    80207460:	00002097          	auipc	ra,0x2
    80207464:	a74080e7          	jalr	-1420(ra) # 80208ed4 <eremove>
        eunlock(dst);
    80207468:	8552                	mv	a0,s4
    8020746a:	00002097          	auipc	ra,0x2
    8020746e:	bfe080e7          	jalr	-1026(ra) # 80209068 <eunlock>
    memmove(src->filename, name, FAT32_MAX_FILENAME);
    80207472:	0ff00613          	li	a2,255
    80207476:	85ce                	mv	a1,s3
    80207478:	8526                	mv	a0,s1
    8020747a:	fffff097          	auipc	ra,0xfffff
    8020747e:	000080e7          	jalr	ra # 8020647a <memmove>
    emake(pdst, src, off);
    80207482:	dbc42603          	lw	a2,-580(s0)
    80207486:	85a6                	mv	a1,s1
    80207488:	854a                	mv	a0,s2
    8020748a:	00001097          	auipc	ra,0x1
    8020748e:	4f8080e7          	jalr	1272(ra) # 80208982 <emake>
    if (src->parent != pdst) {
    80207492:	1384b783          	ld	a5,312(s1)
    80207496:	01278d63          	beq	a5,s2,802074b0 <sys_rename+0x1ba>
        eunlock(pdst);
    8020749a:	854a                	mv	a0,s2
    8020749c:	00002097          	auipc	ra,0x2
    802074a0:	bcc080e7          	jalr	-1076(ra) # 80209068 <eunlock>
        elock(src->parent);
    802074a4:	1384b503          	ld	a0,312(s1)
    802074a8:	00002097          	auipc	ra,0x2
    802074ac:	b76080e7          	jalr	-1162(ra) # 8020901e <elock>
    eremove(src);
    802074b0:	8526                	mv	a0,s1
    802074b2:	00002097          	auipc	ra,0x2
    802074b6:	a22080e7          	jalr	-1502(ra) # 80208ed4 <eremove>
    eunlock(src->parent);
    802074ba:	1384b503          	ld	a0,312(s1)
    802074be:	00002097          	auipc	ra,0x2
    802074c2:	baa080e7          	jalr	-1110(ra) # 80209068 <eunlock>
    struct dirent* psrc = src->parent;  // src must not be root, or it won't
    802074c6:	1384b983          	ld	s3,312(s1)
    src->parent = edup(pdst);
    802074ca:	854a                	mv	a0,s2
    802074cc:	00002097          	auipc	ra,0x2
    802074d0:	8c8080e7          	jalr	-1848(ra) # 80208d94 <edup>
    802074d4:	12a4bc23          	sd	a0,312(s1)
    src->off = off;
    802074d8:	dbc42783          	lw	a5,-580(s0)
    802074dc:	12f4aa23          	sw	a5,308(s1)
    src->valid = 1;
    802074e0:	4785                	li	a5,1
    802074e2:	12f49123          	sh	a5,290(s1)
    eunlock(src);
    802074e6:	8526                	mv	a0,s1
    802074e8:	00002097          	auipc	ra,0x2
    802074ec:	b80080e7          	jalr	-1152(ra) # 80209068 <eunlock>
    eput(psrc);
    802074f0:	854e                	mv	a0,s3
    802074f2:	00002097          	auipc	ra,0x2
    802074f6:	bd8080e7          	jalr	-1064(ra) # 802090ca <eput>
    if (dst) {
    802074fa:	000a0763          	beqz	s4,80207508 <sys_rename+0x212>
        eput(dst);
    802074fe:	8552                	mv	a0,s4
    80207500:	00002097          	auipc	ra,0x2
    80207504:	bca080e7          	jalr	-1078(ra) # 802090ca <eput>
    eput(pdst);
    80207508:	854a                	mv	a0,s2
    8020750a:	00002097          	auipc	ra,0x2
    8020750e:	bc0080e7          	jalr	-1088(ra) # 802090ca <eput>
    eput(src);
    80207512:	8526                	mv	a0,s1
    80207514:	00002097          	auipc	ra,0x2
    80207518:	bb6080e7          	jalr	-1098(ra) # 802090ca <eput>
    return 0;
    8020751c:	4781                	li	a5,0
    8020751e:	b5f5                	j	8020740a <sys_rename+0x114>
                eunlock(dst);
    80207520:	8552                	mv	a0,s4
    80207522:	00002097          	auipc	ra,0x2
    80207526:	b46080e7          	jalr	-1210(ra) # 80209068 <eunlock>
                goto fail;
    8020752a:	b57d                	j	802073d8 <sys_rename+0xe2>
    struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
    8020752c:	892a                	mv	s2,a0
    if (dst)
    8020752e:	bd7d                	j	802073ec <sys_rename+0xf6>

0000000080207530 <syscallMount>:

void syscallMount() {
    80207530:	d9010113          	addi	sp,sp,-624
    80207534:	26113423          	sd	ra,616(sp)
    80207538:	26813023          	sd	s0,608(sp)
    8020753c:	24913c23          	sd	s1,600(sp)
    80207540:	25213823          	sd	s2,592(sp)
    80207544:	25313423          	sd	s3,584(sp)
    80207548:	25413023          	sd	s4,576(sp)
    8020754c:	23513c23          	sd	s5,568(sp)
    80207550:	1c80                	addi	s0,sp,624
    Trapframe *tf = getHartTrapFrame();
    80207552:	fffff097          	auipc	ra,0xfffff
    80207556:	d08080e7          	jalr	-760(ra) # 8020625a <getHartTrapFrame>
    8020755a:	84aa                	mv	s1,a0
    u64 imagePathUva = tf->a0, mountPathUva = tf->a1, typeUva = tf->a2, dataUva = tf->a4;
    8020755c:	07053903          	ld	s2,112(a0)
    80207560:	07853a03          	ld	s4,120(a0)
    80207564:	09053a83          	ld	s5,144(a0)
    int flag = tf->a3;
    80207568:	08853983          	ld	s3,136(a0)
    char imagePath[FAT32_MAX_FILENAME], mountPath[FAT32_MAX_FILENAME], type[10], data[10];
    if (fetchstr(typeUva, type, 10) < 0 || strncmp(type, "vfat", 4)) {
    8020756c:	4629                	li	a2,10
    8020756e:	db040593          	addi	a1,s0,-592
    80207572:	6148                	ld	a0,128(a0)
    80207574:	ffffd097          	auipc	ra,0xffffd
    80207578:	956080e7          	jalr	-1706(ra) # 80203eca <fetchstr>
    8020757c:	00054e63          	bltz	a0,80207598 <syscallMount+0x68>
    80207580:	4611                	li	a2,4
    80207582:	00007597          	auipc	a1,0x7
    80207586:	b4658593          	addi	a1,a1,-1210 # 8020e0c8 <__func__.1096+0x88>
    8020758a:	db040513          	addi	a0,s0,-592
    8020758e:	fffff097          	auipc	ra,0xfffff
    80207592:	f64080e7          	jalr	-156(ra) # 802064f2 <strncmp>
    80207596:	c505                	beqz	a0,802075be <syscallMount+0x8e>
        tf->a0 = -1;
    80207598:	57fd                	li	a5,-1
    8020759a:	f8bc                	sd	a5,112(s1)
    fs->read = mountBlockRead;
    fatInit(fs);
    fs->next = dp->head;
    dp->head = fs;
    tf->a0 = 0;
}
    8020759c:	26813083          	ld	ra,616(sp)
    802075a0:	26013403          	ld	s0,608(sp)
    802075a4:	25813483          	ld	s1,600(sp)
    802075a8:	25013903          	ld	s2,592(sp)
    802075ac:	24813983          	ld	s3,584(sp)
    802075b0:	24013a03          	ld	s4,576(sp)
    802075b4:	23813a83          	ld	s5,568(sp)
    802075b8:	27010113          	addi	sp,sp,624
    802075bc:	8082                	ret
    if (fetchstr(imagePathUva, imagePath, FAT32_MAX_PATH) < 0 || (ep = ename(AT_FDCWD, imagePath)) == NULL) {
    802075be:	10400613          	li	a2,260
    802075c2:	ec040593          	addi	a1,s0,-320
    802075c6:	854a                	mv	a0,s2
    802075c8:	ffffd097          	auipc	ra,0xffffd
    802075cc:	902080e7          	jalr	-1790(ra) # 80203eca <fetchstr>
    802075d0:	10054363          	bltz	a0,802076d6 <syscallMount+0x1a6>
    802075d4:	ec040593          	addi	a1,s0,-320
    802075d8:	f9c00513          	li	a0,-100
    802075dc:	00002097          	auipc	ra,0x2
    802075e0:	168080e7          	jalr	360(ra) # 80209744 <ename>
    802075e4:	892a                	mv	s2,a0
    802075e6:	c965                	beqz	a0,802076d6 <syscallMount+0x1a6>
    if (fetchstr(mountPathUva, mountPath, FAT32_MAX_PATH) < 0 || (dp = ename(AT_FDCWD, mountPath)) == NULL) {
    802075e8:	10400613          	li	a2,260
    802075ec:	dc040593          	addi	a1,s0,-576
    802075f0:	8552                	mv	a0,s4
    802075f2:	ffffd097          	auipc	ra,0xffffd
    802075f6:	8d8080e7          	jalr	-1832(ra) # 80203eca <fetchstr>
    802075fa:	0e054163          	bltz	a0,802076dc <syscallMount+0x1ac>
    802075fe:	dc040593          	addi	a1,s0,-576
    80207602:	f9c00513          	li	a0,-100
    80207606:	00002097          	auipc	ra,0x2
    8020760a:	13e080e7          	jalr	318(ra) # 80209744 <ename>
    8020760e:	8a2a                	mv	s4,a0
    80207610:	c571                	beqz	a0,802076dc <syscallMount+0x1ac>
    if (dataUva && fetchstr(dataUva, data, 10) < 0) {
    80207612:	000a8c63          	beqz	s5,8020762a <syscallMount+0xfa>
    80207616:	4629                	li	a2,10
    80207618:	da040593          	addi	a1,s0,-608
    8020761c:	8556                	mv	a0,s5
    8020761e:	ffffd097          	auipc	ra,0xffffd
    80207622:	8ac080e7          	jalr	-1876(ra) # 80203eca <fetchstr>
    80207626:	0a054e63          	bltz	a0,802076e2 <syscallMount+0x1b2>
    assert(flag == 0);
    8020762a:	0009869b          	sext.w	a3,s3
    8020762e:	0016b693          	seqz	a3,a3
    80207632:	00007617          	auipc	a2,0x7
    80207636:	ade60613          	addi	a2,a2,-1314 # 8020e110 <__func__.1921>
    8020763a:	28a00593          	li	a1,650
    8020763e:	00007517          	auipc	a0,0x7
    80207642:	a7a50513          	addi	a0,a0,-1414 # 8020e0b8 <__func__.1096+0x78>
    80207646:	ffff9097          	auipc	ra,0xffff9
    8020764a:	586080e7          	jalr	1414(ra) # 80200bcc <_assert_>
    if (fsAlloc(&fs) < 0) {
    8020764e:	d9840513          	addi	a0,s0,-616
    80207652:	fffff097          	auipc	ra,0xfffff
    80207656:	fe6080e7          	jalr	-26(ra) # 80206638 <fsAlloc>
    8020765a:	08054763          	bltz	a0,802076e8 <syscallMount+0x1b8>
    struct file *file = filealloc();
    8020765e:	00002097          	auipc	ra,0x2
    80207662:	4fc080e7          	jalr	1276(ra) # 80209b5a <filealloc>
    80207666:	87aa                	mv	a5,a0
    file->off = 0;
    80207668:	02052023          	sw	zero,32(a0)
    file->readable = true;
    8020766c:	4705                	li	a4,1
    8020766e:	00e50423          	sb	a4,8(a0)
    file->writable = true;
    80207672:	00e504a3          	sb	a4,9(a0)
    if (ep->head) {
    80207676:	12893703          	ld	a4,296(s2)
    8020767a:	cb35                	beqz	a4,802076ee <syscallMount+0x1be>
        file->type = ep->head->image->type;
    8020767c:	1e073703          	ld	a4,480(a4)
    80207680:	4318                	lw	a4,0(a4)
    80207682:	c118                	sw	a4,0(a0)
        file->ep = ep->head->image->ep;
    80207684:	12893703          	ld	a4,296(s2)
    80207688:	1e073703          	ld	a4,480(a4)
    8020768c:	6f18                	ld	a4,24(a4)
    8020768e:	ed18                	sd	a4,24(a0)
    fs->name[0] = 'm';
    80207690:	d9843703          	ld	a4,-616(s0)
    80207694:	06d00693          	li	a3,109
    80207698:	00d700a3          	sb	a3,1(a4)
    fs->name[1] = 0;
    8020769c:	d9843703          	ld	a4,-616(s0)
    802076a0:	00070123          	sb	zero,2(a4)
    fs->image = file;
    802076a4:	d9843503          	ld	a0,-616(s0)
    802076a8:	1ef53023          	sd	a5,480(a0)
    fs->read = mountBlockRead;
    802076ac:	00000797          	auipc	a5,0x0
    802076b0:	69a78793          	addi	a5,a5,1690 # 80207d46 <mountBlockRead>
    802076b4:	1ef53c23          	sd	a5,504(a0)
    fatInit(fs);
    802076b8:	fffff097          	auipc	ra,0xfffff
    802076bc:	fdc080e7          	jalr	-36(ra) # 80206694 <fatInit>
    fs->next = dp->head;
    802076c0:	d9843783          	ld	a5,-616(s0)
    802076c4:	128a3703          	ld	a4,296(s4)
    802076c8:	1ee7b423          	sd	a4,488(a5)
    dp->head = fs;
    802076cc:	12fa3423          	sd	a5,296(s4)
    tf->a0 = 0;
    802076d0:	0604b823          	sd	zero,112(s1)
    802076d4:	b5e1                	j	8020759c <syscallMount+0x6c>
        tf->a0 = -1;
    802076d6:	57fd                	li	a5,-1
    802076d8:	f8bc                	sd	a5,112(s1)
        return;
    802076da:	b5c9                	j	8020759c <syscallMount+0x6c>
        tf->a0 = -1;
    802076dc:	57fd                	li	a5,-1
    802076de:	f8bc                	sd	a5,112(s1)
        return;
    802076e0:	bd75                	j	8020759c <syscallMount+0x6c>
        tf->a0 = -1;
    802076e2:	57fd                	li	a5,-1
    802076e4:	f8bc                	sd	a5,112(s1)
        return;
    802076e6:	bd5d                	j	8020759c <syscallMount+0x6c>
        tf->a0 = -1;
    802076e8:	57fd                	li	a5,-1
    802076ea:	f8bc                	sd	a5,112(s1)
        return;
    802076ec:	bd45                	j	8020759c <syscallMount+0x6c>
        file->type = FD_ENTRY;
    802076ee:	4709                	li	a4,2
    802076f0:	c118                	sw	a4,0(a0)
        file->ep = ep;
    802076f2:	01253c23          	sd	s2,24(a0)
    802076f6:	bf69                	j	80207690 <syscallMount+0x160>

00000000802076f8 <syscallUmount>:

void syscallUmount() {
    802076f8:	7169                	addi	sp,sp,-304
    802076fa:	f606                	sd	ra,296(sp)
    802076fc:	f222                	sd	s0,288(sp)
    802076fe:	ee26                	sd	s1,280(sp)
    80207700:	ea4a                	sd	s2,272(sp)
    80207702:	e64e                	sd	s3,264(sp)
    80207704:	e252                	sd	s4,256(sp)
    80207706:	1a00                	addi	s0,sp,304
    Trapframe *tf = getHartTrapFrame();
    80207708:	fffff097          	auipc	ra,0xfffff
    8020770c:	b52080e7          	jalr	-1198(ra) # 8020625a <getHartTrapFrame>
    80207710:	8a2a                	mv	s4,a0
    u64 mountPathUva = tf->a0;
    int flag = tf->a1;
    80207712:	7d24                	ld	s1,120(a0)
    char mountPath[FAT32_MAX_FILENAME];
    struct dirent *ep;

    if (fetchstr(mountPathUva, mountPath, FAT32_MAX_PATH) < 0 || (ep = ename(AT_FDCWD, mountPath)) == NULL) {
    80207714:	10400613          	li	a2,260
    80207718:	ed040593          	addi	a1,s0,-304
    8020771c:	7928                	ld	a0,112(a0)
    8020771e:	ffffc097          	auipc	ra,0xffffc
    80207722:	7ac080e7          	jalr	1964(ra) # 80203eca <fetchstr>
    80207726:	06054263          	bltz	a0,8020778a <syscallUmount+0x92>
    8020772a:	ed040593          	addi	a1,s0,-304
    8020772e:	f9c00513          	li	a0,-100
    80207732:	00002097          	auipc	ra,0x2
    80207736:	012080e7          	jalr	18(ra) # 80209744 <ename>
    8020773a:	892a                	mv	s2,a0
    8020773c:	c539                	beqz	a0,8020778a <syscallUmount+0x92>
        tf->a0 = -1;
        return;
    }

    assert(flag == 0);
    8020773e:	0004869b          	sext.w	a3,s1
    80207742:	0016b693          	seqz	a3,a3
    80207746:	00007617          	auipc	a2,0x7
    8020774a:	9da60613          	addi	a2,a2,-1574 # 8020e120 <__func__.1931>
    8020774e:	2b200593          	li	a1,690
    80207752:	00007517          	auipc	a0,0x7
    80207756:	96650513          	addi	a0,a0,-1690 # 8020e0b8 <__func__.1096+0x78>
    8020775a:	ffff9097          	auipc	ra,0xffff9
    8020775e:	472080e7          	jalr	1138(ra) # 80200bcc <_assert_>

    if (ep->head == NULL) {
    80207762:	12893783          	ld	a5,296(s2)
    80207766:	cf8d                	beqz	a5,802077a0 <syscallUmount+0xa8>
        tf->a0 = -1;
        return;
    }

    extern DirentCache direntCache;
    acquireLock(&direntCache.lock);
    80207768:	00416517          	auipc	a0,0x416
    8020776c:	06850513          	addi	a0,a0,104 # 8061d7d0 <direntCache>
    80207770:	fffff097          	auipc	ra,0xfffff
    80207774:	9f4080e7          	jalr	-1548(ra) # 80206164 <acquireLock>
    // bool canUmount = true;
    for(int i = 0; i < ENTRY_CACHE_NUM; i++) {
    80207778:	00416497          	auipc	s1,0x416
    8020777c:	18848493          	addi	s1,s1,392 # 8061d900 <direntCache+0x130>
    80207780:	0041b997          	auipc	s3,0x41b
    80207784:	96098993          	addi	s3,s3,-1696 # 806220e0 <fileSystem+0x118>
    80207788:	a025                	j	802077b0 <syscallUmount+0xb8>
        tf->a0 = -1;
    8020778a:	57fd                	li	a5,-1
    8020778c:	06fa3823          	sd	a5,112(s4)

    ep->head->valid = 0;
    ep->head = ep->head->next;

    tf->a0 = 0;
}
    80207790:	70b2                	ld	ra,296(sp)
    80207792:	7412                	ld	s0,288(sp)
    80207794:	64f2                	ld	s1,280(sp)
    80207796:	6952                	ld	s2,272(sp)
    80207798:	69b2                	ld	s3,264(sp)
    8020779a:	6a12                	ld	s4,256(sp)
    8020779c:	6155                	addi	sp,sp,304
    8020779e:	8082                	ret
        tf->a0 = -1;
    802077a0:	57fd                	li	a5,-1
    802077a2:	06fa3823          	sd	a5,112(s4)
        return;
    802077a6:	b7ed                	j	80207790 <syscallUmount+0x98>
    for(int i = 0; i < ENTRY_CACHE_NUM; i++) {
    802077a8:	17048493          	addi	s1,s1,368
    802077ac:	01348e63          	beq	s1,s3,802077c8 <syscallUmount+0xd0>
        if (entry->fileSystem == ep->head) {
    802077b0:	6098                	ld	a4,0(s1)
    802077b2:	12893783          	ld	a5,296(s2)
    802077b6:	fef719e3          	bne	a4,a5,802077a8 <syscallUmount+0xb0>
            eput(entry);
    802077ba:	ee848513          	addi	a0,s1,-280
    802077be:	00002097          	auipc	ra,0x2
    802077c2:	90c080e7          	jalr	-1780(ra) # 802090ca <eput>
    802077c6:	b7cd                	j	802077a8 <syscallUmount+0xb0>
    releaseLock(&direntCache.lock);
    802077c8:	00416517          	auipc	a0,0x416
    802077cc:	00850513          	addi	a0,a0,8 # 8061d7d0 <direntCache>
    802077d0:	fffff097          	auipc	ra,0xfffff
    802077d4:	a10080e7          	jalr	-1520(ra) # 802061e0 <releaseLock>
    ep->head->valid = 0;
    802077d8:	12893783          	ld	a5,296(s2)
    802077dc:	00078023          	sb	zero,0(a5)
    ep->head = ep->head->next;
    802077e0:	12893783          	ld	a5,296(s2)
    802077e4:	1e87b783          	ld	a5,488(a5)
    802077e8:	12f93423          	sd	a5,296(s2)
    tf->a0 = 0;
    802077ec:	060a3823          	sd	zero,112(s4)
    802077f0:	b745                	j	80207790 <syscallUmount+0x98>

00000000802077f2 <syscallUnlinkAt>:
        eunlock(targetPoint);
    }
    tf->a0 = -1;
}

void syscallUnlinkAt() {
    802077f2:	7169                	addi	sp,sp,-304
    802077f4:	f606                	sd	ra,296(sp)
    802077f6:	f222                	sd	s0,288(sp)
    802077f8:	ee26                	sd	s1,280(sp)
    802077fa:	ea4a                	sd	s2,272(sp)
    802077fc:	1a00                	addi	s0,sp,304
    Trapframe *tf = getHartTrapFrame();
    802077fe:	fffff097          	auipc	ra,0xfffff
    80207802:	a5c080e7          	jalr	-1444(ra) # 8020625a <getHartTrapFrame>
    80207806:	84aa                	mv	s1,a0
    int dirFd = tf->a0, flags = tf->a2;
    80207808:	07053903          	ld	s2,112(a0)
    
    assert(flags == 0);
    8020780c:	08052683          	lw	a3,128(a0)
    80207810:	0016b693          	seqz	a3,a3
    80207814:	00007617          	auipc	a2,0x7
    80207818:	91c60613          	addi	a2,a2,-1764 # 8020e130 <__func__.1958>
    8020781c:	2ff00593          	li	a1,767
    80207820:	00007517          	auipc	a0,0x7
    80207824:	89850513          	addi	a0,a0,-1896 # 8020e0b8 <__func__.1096+0x78>
    80207828:	ffff9097          	auipc	ra,0xffff9
    8020782c:	3a4080e7          	jalr	932(ra) # 80200bcc <_assert_>
    char path[FAT32_MAX_PATH];
    if (fetchstr(tf->a1, path, FAT32_MAX_PATH) < 0) {
    80207830:	10400613          	li	a2,260
    80207834:	ed840593          	addi	a1,s0,-296
    80207838:	7ca8                	ld	a0,120(s1)
    8020783a:	ffffc097          	auipc	ra,0xffffc
    8020783e:	690080e7          	jalr	1680(ra) # 80203eca <fetchstr>
    80207842:	02054463          	bltz	a0,8020786a <syscallUnlinkAt+0x78>
        tf->a0 = -1;
        return;
    }
    struct dirent* entryPoint;

    if((entryPoint = ename(dirFd, path)) == NULL) {
    80207846:	ed840593          	addi	a1,s0,-296
    8020784a:	0009051b          	sext.w	a0,s2
    8020784e:	00002097          	auipc	ra,0x2
    80207852:	ef6080e7          	jalr	-266(ra) # 80209744 <ename>
    80207856:	c115                	beqz	a0,8020787a <syscallUnlinkAt+0x88>
        goto bad;
    }

    entryPoint->_nt_res = 0;
    80207858:	10050a23          	sb	zero,276(a0)
    eremove(entryPoint);
    8020785c:	00001097          	auipc	ra,0x1
    80207860:	678080e7          	jalr	1656(ra) # 80208ed4 <eremove>

    tf->a0 = 0;
    80207864:	0604b823          	sd	zero,112(s1)
    return;
    80207868:	a019                	j	8020786e <syscallUnlinkAt+0x7c>
        tf->a0 = -1;
    8020786a:	57fd                	li	a5,-1
    8020786c:	f8bc                	sd	a5,112(s1)
bad:
    tf->a0 = -1;
}
    8020786e:	70b2                	ld	ra,296(sp)
    80207870:	7412                	ld	s0,288(sp)
    80207872:	64f2                	ld	s1,280(sp)
    80207874:	6952                	ld	s2,272(sp)
    80207876:	6155                	addi	sp,sp,304
    80207878:	8082                	ret
    tf->a0 = -1;
    8020787a:	57fd                	li	a5,-1
    8020787c:	f8bc                	sd	a5,112(s1)
    8020787e:	bfc5                	j	8020786e <syscallUnlinkAt+0x7c>

0000000080207880 <syscallLSeek>:

void syscallLSeek() {
    80207880:	7179                	addi	sp,sp,-48
    80207882:	f406                	sd	ra,40(sp)
    80207884:	f022                	sd	s0,32(sp)
    80207886:	ec26                	sd	s1,24(sp)
    80207888:	e84a                	sd	s2,16(sp)
    8020788a:	e44e                	sd	s3,8(sp)
    8020788c:	e052                	sd	s4,0(sp)
    8020788e:	1800                	addi	s0,sp,48
    Trapframe *tf = getHartTrapFrame();
    80207890:	fffff097          	auipc	ra,0xfffff
    80207894:	9ca080e7          	jalr	-1590(ra) # 8020625a <getHartTrapFrame>
    80207898:	84aa                	mv	s1,a0
    int fd = tf->a0, offset = tf->a1, mode = tf->a2;
    8020789a:	07053903          	ld	s2,112(a0)
    if (fd < 0 || fd >= NOFILE) {
    8020789e:	0009071b          	sext.w	a4,s2
    802078a2:	07f00793          	li	a5,127
    802078a6:	00e7fc63          	bgeu	a5,a4,802078be <syscallLSeek+0x3e>
    }
    file->off = off;
    tf->a0 = file->off;
    return;
bad:
    tf->a0 = -1;
    802078aa:	57fd                	li	a5,-1
    802078ac:	f8bc                	sd	a5,112(s1)
}
    802078ae:	70a2                	ld	ra,40(sp)
    802078b0:	7402                	ld	s0,32(sp)
    802078b2:	64e2                	ld	s1,24(sp)
    802078b4:	6942                	ld	s2,16(sp)
    802078b6:	69a2                	ld	s3,8(sp)
    802078b8:	6a02                	ld	s4,0(sp)
    802078ba:	6145                	addi	sp,sp,48
    802078bc:	8082                	ret
    int fd = tf->a0, offset = tf->a1, mode = tf->a2;
    802078be:	07853983          	ld	s3,120(a0)
    802078c2:	08053a03          	ld	s4,128(a0)
    struct file* file = myproc()->ofile[fd];
    802078c6:	ffffb097          	auipc	ra,0xffffb
    802078ca:	186080e7          	jalr	390(ra) # 80202a4c <myproc>
    802078ce:	2901                	sext.w	s2,s2
    802078d0:	03690913          	addi	s2,s2,54
    802078d4:	090e                	slli	s2,s2,0x3
    802078d6:	992a                	add	s2,s2,a0
    802078d8:	00093703          	ld	a4,0(s2)
    if (file == 0) {
    802078dc:	d779                	beqz	a4,802078aa <syscallLSeek+0x2a>
    int fd = tf->a0, offset = tf->a1, mode = tf->a2;
    802078de:	000a079b          	sext.w	a5,s4
    switch (mode) {
    802078e2:	4685                	li	a3,1
    802078e4:	00d78e63          	beq	a5,a3,80207900 <syscallLSeek+0x80>
    802078e8:	4689                	li	a3,2
    802078ea:	00d78f63          	beq	a5,a3,80207908 <syscallLSeek+0x88>
    802078ee:	ffd5                	bnez	a5,802078aa <syscallLSeek+0x2a>
    int fd = tf->a0, offset = tf->a1, mode = tf->a2;
    802078f0:	0009879b          	sext.w	a5,s3
    file->off = off;
    802078f4:	2781                	sext.w	a5,a5
    802078f6:	d31c                	sw	a5,32(a4)
    tf->a0 = file->off;
    802078f8:	1782                	slli	a5,a5,0x20
    802078fa:	9381                	srli	a5,a5,0x20
    802078fc:	f8bc                	sd	a5,112(s1)
    return;
    802078fe:	bf45                	j	802078ae <syscallLSeek+0x2e>
            off += file->off;
    80207900:	531c                	lw	a5,32(a4)
    80207902:	013787bb          	addw	a5,a5,s3
            break;
    80207906:	b7fd                	j	802078f4 <syscallLSeek+0x74>
            off += file->ep->file_size;
    80207908:	6f1c                	ld	a5,24(a4)
    8020790a:	1087a783          	lw	a5,264(a5)
    8020790e:	013787bb          	addw	a5,a5,s3
            break;
    80207912:	b7cd                	j	802078f4 <syscallLSeek+0x74>

0000000080207914 <getAbsolutePath>:

extern FileSystem rootFileSystem;
int getAbsolutePath(struct dirent* d, int isUser, u64 buf, int maxLen) {
    80207914:	7149                	addi	sp,sp,-368
    80207916:	f686                	sd	ra,360(sp)
    80207918:	f2a2                	sd	s0,352(sp)
    8020791a:	eea6                	sd	s1,344(sp)
    8020791c:	eaca                	sd	s2,336(sp)
    8020791e:	e6ce                	sd	s3,328(sp)
    80207920:	e2d2                	sd	s4,320(sp)
    80207922:	fe56                	sd	s5,312(sp)
    80207924:	fa5a                	sd	s6,304(sp)
    80207926:	f65e                	sd	s7,296(sp)
    80207928:	f262                	sd	s8,288(sp)
    8020792a:	ee66                	sd	s9,280(sp)
    8020792c:	1a80                	addi	s0,sp,368
    8020792e:	8c2e                	mv	s8,a1
    80207930:	8cb2                	mv	s9,a2
    char path[FAT32_MAX_PATH];
    
    if (d->parent == NULL) {
    80207932:	13853783          	ld	a5,312(a0)
    80207936:	c7d1                	beqz	a5,802079c2 <getAbsolutePath+0xae>
    80207938:	892a                	mv	s2,a0
        return either_copyout(isUser, buf, "/", 2);
    }
    char *s = path + FAT32_MAX_PATH - 1;
    *s = '\0';
    8020793a:	f8040da3          	sb	zero,-101(s0)
    char *s = path + FAT32_MAX_PATH - 1;
    8020793e:	f9b40993          	addi	s3,s0,-101
    while (d->parent) {
        int len = strlen(d->filename);
        s -= len;
        if (s <= path || s - path <= FAT32_MAX_PATH - maxLen)  // can't reach root "/"
    80207942:	e9840a13          	addi	s4,s0,-360
    80207946:	10400b13          	li	s6,260
    8020794a:	40db0b3b          	subw	s6,s6,a3
            return -1;
        strncpy(s, d->filename, len);
        *--s = '/';
    8020794e:	02f00b93          	li	s7,47
        int len = strlen(d->filename);
    80207952:	854a                	mv	a0,s2
    80207954:	fffff097          	auipc	ra,0xfffff
    80207958:	c4a080e7          	jalr	-950(ra) # 8020659e <strlen>
    8020795c:	862a                	mv	a2,a0
        s -= len;
    8020795e:	40a984b3          	sub	s1,s3,a0
        if (s <= path || s - path <= FAT32_MAX_PATH - maxLen)  // can't reach root "/"
    80207962:	069a7c63          	bgeu	s4,s1,802079da <getAbsolutePath+0xc6>
    80207966:	414487b3          	sub	a5,s1,s4
    8020796a:	06fb5a63          	bge	s6,a5,802079de <getAbsolutePath+0xca>
        strncpy(s, d->filename, len);
    8020796e:	85ca                	mv	a1,s2
    80207970:	8526                	mv	a0,s1
    80207972:	fffff097          	auipc	ra,0xfffff
    80207976:	bbc080e7          	jalr	-1092(ra) # 8020652e <strncpy>
        *--s = '/';
    8020797a:	fff48993          	addi	s3,s1,-1
    8020797e:	ff748fa3          	sb	s7,-1(s1)
        d = d->parent;
    80207982:	13893903          	ld	s2,312(s2)
    while (d->parent) {
    80207986:	13893783          	ld	a5,312(s2)
    8020798a:	f7e1                	bnez	a5,80207952 <getAbsolutePath+0x3e>
    }
    return either_copyout(isUser, buf, (void*)s, strlen(s) + 1);
    8020798c:	854e                	mv	a0,s3
    8020798e:	fffff097          	auipc	ra,0xfffff
    80207992:	c10080e7          	jalr	-1008(ra) # 8020659e <strlen>
    80207996:	0015069b          	addiw	a3,a0,1
    8020799a:	864e                	mv	a2,s3
    8020799c:	85e6                	mv	a1,s9
    8020799e:	8562                	mv	a0,s8
    802079a0:	ffffc097          	auipc	ra,0xffffc
    802079a4:	934080e7          	jalr	-1740(ra) # 802032d4 <either_copyout>
    802079a8:	70b6                	ld	ra,360(sp)
    802079aa:	7416                	ld	s0,352(sp)
    802079ac:	64f6                	ld	s1,344(sp)
    802079ae:	6956                	ld	s2,336(sp)
    802079b0:	69b6                	ld	s3,328(sp)
    802079b2:	6a16                	ld	s4,320(sp)
    802079b4:	7af2                	ld	s5,312(sp)
    802079b6:	7b52                	ld	s6,304(sp)
    802079b8:	7bb2                	ld	s7,296(sp)
    802079ba:	7c12                	ld	s8,288(sp)
    802079bc:	6cf2                	ld	s9,280(sp)
    802079be:	6175                	addi	sp,sp,368
    802079c0:	8082                	ret
        return either_copyout(isUser, buf, "/", 2);
    802079c2:	4689                	li	a3,2
    802079c4:	00006617          	auipc	a2,0x6
    802079c8:	70c60613          	addi	a2,a2,1804 # 8020e0d0 <__func__.1096+0x90>
    802079cc:	85e6                	mv	a1,s9
    802079ce:	8562                	mv	a0,s8
    802079d0:	ffffc097          	auipc	ra,0xffffc
    802079d4:	904080e7          	jalr	-1788(ra) # 802032d4 <either_copyout>
    802079d8:	bfc1                	j	802079a8 <getAbsolutePath+0x94>
            return -1;
    802079da:	557d                	li	a0,-1
    802079dc:	b7f1                	j	802079a8 <getAbsolutePath+0x94>
    802079de:	557d                	li	a0,-1
    802079e0:	b7e1                	j	802079a8 <getAbsolutePath+0x94>

00000000802079e2 <syscallGetWorkDir>:
void syscallGetWorkDir(void) {
    802079e2:	7179                	addi	sp,sp,-48
    802079e4:	f406                	sd	ra,40(sp)
    802079e6:	f022                	sd	s0,32(sp)
    802079e8:	ec26                	sd	s1,24(sp)
    802079ea:	e84a                	sd	s2,16(sp)
    802079ec:	e44e                	sd	s3,8(sp)
    802079ee:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    802079f0:	fffff097          	auipc	ra,0xfffff
    802079f4:	86a080e7          	jalr	-1942(ra) # 8020625a <getHartTrapFrame>
    u64 uva = tf->a0;
    802079f8:	07053903          	ld	s2,112(a0)
    int n = tf->a1;
    802079fc:	07852983          	lw	s3,120(a0)
    if (uva == 0) {
    80207a00:	02090b63          	beqz	s2,80207a36 <syscallGetWorkDir+0x54>
    80207a04:	84aa                	mv	s1,a0
    int len = getAbsolutePath(myproc()->cwd, 1, uva, n);
    80207a06:	ffffb097          	auipc	ra,0xffffb
    80207a0a:	046080e7          	jalr	70(ra) # 80202a4c <myproc>
    80207a0e:	86ce                	mv	a3,s3
    80207a10:	864a                	mv	a2,s2
    80207a12:	4585                	li	a1,1
    80207a14:	1a853503          	ld	a0,424(a0)
    80207a18:	00000097          	auipc	ra,0x0
    80207a1c:	efc080e7          	jalr	-260(ra) # 80207914 <getAbsolutePath>
    if (len < 0) {
    80207a20:	02054d63          	bltz	a0,80207a5a <syscallGetWorkDir+0x78>
    tf->a0 = uva;
    80207a24:	0724b823          	sd	s2,112(s1)
}
    80207a28:	70a2                	ld	ra,40(sp)
    80207a2a:	7402                	ld	s0,32(sp)
    80207a2c:	64e2                	ld	s1,24(sp)
    80207a2e:	6942                	ld	s2,16(sp)
    80207a30:	69a2                	ld	s3,8(sp)
    80207a32:	6145                	addi	sp,sp,48
    80207a34:	8082                	ret
        panic("Alloc addr not implement for cwd\n");
    80207a36:	00006697          	auipc	a3,0x6
    80207a3a:	6a268693          	addi	a3,a3,1698 # 8020e0d8 <__func__.1096+0x98>
    80207a3e:	00006617          	auipc	a2,0x6
    80207a42:	70260613          	addi	a2,a2,1794 # 8020e140 <__func__.1855>
    80207a46:	16e00593          	li	a1,366
    80207a4a:	00006517          	auipc	a0,0x6
    80207a4e:	66e50513          	addi	a0,a0,1646 # 8020e0b8 <__func__.1096+0x78>
    80207a52:	ffff9097          	auipc	ra,0xffff9
    80207a56:	104080e7          	jalr	260(ra) # 80200b56 <_panic_>
        tf->a0 = -1;
    80207a5a:	57fd                	li	a5,-1
    80207a5c:	f8bc                	sd	a5,112(s1)
        return;
    80207a5e:	b7e9                	j	80207a28 <syscallGetWorkDir+0x46>

0000000080207a60 <syscallLinkAt>:
void syscallLinkAt() {
    80207a60:	cb010113          	addi	sp,sp,-848
    80207a64:	34113423          	sd	ra,840(sp)
    80207a68:	34813023          	sd	s0,832(sp)
    80207a6c:	32913c23          	sd	s1,824(sp)
    80207a70:	33213823          	sd	s2,816(sp)
    80207a74:	33313423          	sd	s3,808(sp)
    80207a78:	0e80                	addi	s0,sp,848
    Trapframe *tf = getHartTrapFrame();
    80207a7a:	ffffe097          	auipc	ra,0xffffe
    80207a7e:	7e0080e7          	jalr	2016(ra) # 8020625a <getHartTrapFrame>
    80207a82:	84aa                	mv	s1,a0
    int oldDirFd = tf->a0, newDirFd = tf->a2, flags = tf->a4;
    80207a84:	07053903          	ld	s2,112(a0)
    80207a88:	08053983          	ld	s3,128(a0)
    assert(flags == 0);
    80207a8c:	09052683          	lw	a3,144(a0)
    80207a90:	0016b693          	seqz	a3,a3
    80207a94:	00006617          	auipc	a2,0x6
    80207a98:	6c460613          	addi	a2,a2,1732 # 8020e158 <__func__.1945>
    80207a9c:	2cf00593          	li	a1,719
    80207aa0:	00006517          	auipc	a0,0x6
    80207aa4:	61850513          	addi	a0,a0,1560 # 8020e0b8 <__func__.1096+0x78>
    80207aa8:	ffff9097          	auipc	ra,0xffff9
    80207aac:	124080e7          	jalr	292(ra) # 80200bcc <_assert_>
    if (fetchstr(tf->a1, oldPath, FAT32_MAX_PATH) < 0) {
    80207ab0:	10400613          	li	a2,260
    80207ab4:	ec840593          	addi	a1,s0,-312
    80207ab8:	7ca8                	ld	a0,120(s1)
    80207aba:	ffffc097          	auipc	ra,0xffffc
    80207abe:	410080e7          	jalr	1040(ra) # 80203eca <fetchstr>
    80207ac2:	0a054163          	bltz	a0,80207b64 <syscallLinkAt+0x104>
    if (fetchstr(tf->a3, newPath, FAT32_MAX_PATH) < 0) {
    80207ac6:	10400613          	li	a2,260
    80207aca:	dc040593          	addi	a1,s0,-576
    80207ace:	64c8                	ld	a0,136(s1)
    80207ad0:	ffffc097          	auipc	ra,0xffffc
    80207ad4:	3fa080e7          	jalr	1018(ra) # 80203eca <fetchstr>
    80207ad8:	0a054563          	bltz	a0,80207b82 <syscallLinkAt+0x122>
    if((entryPoint = ename(oldDirFd, oldPath)) == NULL) {
    80207adc:	ec840593          	addi	a1,s0,-312
    80207ae0:	0009051b          	sext.w	a0,s2
    80207ae4:	00002097          	auipc	ra,0x2
    80207ae8:	c60080e7          	jalr	-928(ra) # 80209744 <ename>
    80207aec:	892a                	mv	s2,a0
    80207aee:	c925                	beqz	a0,80207b5e <syscallLinkAt+0xfe>
    if ((targetPoint = create(newDirFd, newPath, T_FILE, O_RDWR)) == NULL) {
    80207af0:	4689                	li	a3,2
    80207af2:	4609                	li	a2,2
    80207af4:	dc040593          	addi	a1,s0,-576
    80207af8:	0009851b          	sext.w	a0,s3
    80207afc:	00002097          	auipc	ra,0x2
    80207b00:	efc080e7          	jalr	-260(ra) # 802099f8 <create>
    80207b04:	89aa                	mv	s3,a0
    80207b06:	cd21                	beqz	a0,80207b5e <syscallLinkAt+0xfe>
    if (getAbsolutePath(entryPoint, 0, (u64)buf, FAT32_MAX_PATH) < 0) {
    80207b08:	10400693          	li	a3,260
    80207b0c:	cb840613          	addi	a2,s0,-840
    80207b10:	4581                	li	a1,0
    80207b12:	854a                	mv	a0,s2
    80207b14:	00000097          	auipc	ra,0x0
    80207b18:	e00080e7          	jalr	-512(ra) # 80207914 <getAbsolutePath>
    80207b1c:	02054c63          	bltz	a0,80207b54 <syscallLinkAt+0xf4>
    int len = strlen(buf);
    80207b20:	cb840513          	addi	a0,s0,-840
    80207b24:	fffff097          	auipc	ra,0xfffff
    80207b28:	a7a080e7          	jalr	-1414(ra) # 8020659e <strlen>
    80207b2c:	892a                	mv	s2,a0
    if (ewrite(targetPoint, 0, (u64)buf, 0, strlen(buf)) != len) {
    80207b2e:	cb840513          	addi	a0,s0,-840
    80207b32:	fffff097          	auipc	ra,0xfffff
    80207b36:	a6c080e7          	jalr	-1428(ra) # 8020659e <strlen>
    80207b3a:	0005071b          	sext.w	a4,a0
    80207b3e:	4681                	li	a3,0
    80207b40:	cb840613          	addi	a2,s0,-840
    80207b44:	4581                	li	a1,0
    80207b46:	854e                	mv	a0,s3
    80207b48:	00001097          	auipc	ra,0x1
    80207b4c:	c52080e7          	jalr	-942(ra) # 8020879a <ewrite>
    80207b50:	03250c63          	beq	a0,s2,80207b88 <syscallLinkAt+0x128>
        eunlock(targetPoint);
    80207b54:	854e                	mv	a0,s3
    80207b56:	00001097          	auipc	ra,0x1
    80207b5a:	512080e7          	jalr	1298(ra) # 80209068 <eunlock>
    tf->a0 = -1;
    80207b5e:	57fd                	li	a5,-1
    80207b60:	f8bc                	sd	a5,112(s1)
    80207b62:	a019                	j	80207b68 <syscallLinkAt+0x108>
        tf->a0 = -1;
    80207b64:	57fd                	li	a5,-1
    80207b66:	f8bc                	sd	a5,112(s1)
}
    80207b68:	34813083          	ld	ra,840(sp)
    80207b6c:	34013403          	ld	s0,832(sp)
    80207b70:	33813483          	ld	s1,824(sp)
    80207b74:	33013903          	ld	s2,816(sp)
    80207b78:	32813983          	ld	s3,808(sp)
    80207b7c:	35010113          	addi	sp,sp,848
    80207b80:	8082                	ret
        tf->a0 = -1;
    80207b82:	57fd                	li	a5,-1
    80207b84:	f8bc                	sd	a5,112(s1)
        return;
    80207b86:	b7cd                	j	80207b68 <syscallLinkAt+0x108>
    targetPoint->_nt_res = DT_LNK;
    80207b88:	47a9                	li	a5,10
    80207b8a:	10f98a23          	sb	a5,276(s3)
    eupdate(targetPoint);
    80207b8e:	854e                	mv	a0,s3
    80207b90:	00001097          	auipc	ra,0x1
    80207b94:	248080e7          	jalr	584(ra) # 80208dd8 <eupdate>
    tf->a0 = 0;
    80207b98:	0604b823          	sd	zero,112(s1)
    eunlock(targetPoint);
    80207b9c:	854e                	mv	a0,s3
    80207b9e:	00001097          	auipc	ra,0x1
    80207ba2:	4ca080e7          	jalr	1226(ra) # 80209068 <eunlock>
    return;
    80207ba6:	b7c9                	j	80207b68 <syscallLinkAt+0x108>

0000000080207ba8 <binit>:
    // Sorted by how recently the buffer was used.
    // head.next is most recent, head.prev is least.
    struct buf head;
} bcache;

void binit(void) {
    80207ba8:	7179                	addi	sp,sp,-48
    80207baa:	f406                	sd	ra,40(sp)
    80207bac:	f022                	sd	s0,32(sp)
    80207bae:	ec26                	sd	s1,24(sp)
    80207bb0:	e84a                	sd	s2,16(sp)
    80207bb2:	e44e                	sd	s3,8(sp)
    80207bb4:	e052                	sd	s4,0(sp)
    80207bb6:	1800                	addi	s0,sp,48
    struct buf* b;

    initLock(&bcache.lock, "bcache");
    80207bb8:	00006597          	auipc	a1,0x6
    80207bbc:	5b058593          	addi	a1,a1,1456 # 8020e168 <__func__.1945+0x10>
    80207bc0:	0041e517          	auipc	a0,0x41e
    80207bc4:	60850513          	addi	a0,a0,1544 # 806261c8 <bcache>
    80207bc8:	ffffe097          	auipc	ra,0xffffe
    80207bcc:	552080e7          	jalr	1362(ra) # 8020611a <initLock>

    // Create linked list of buffers
    bcache.head.prev = &bcache.head;
    80207bd0:	00431797          	auipc	a5,0x431
    80207bd4:	5f878793          	addi	a5,a5,1528 # 806391c8 <ftable+0x150>
    80207bd8:	00431717          	auipc	a4,0x431
    80207bdc:	20870713          	addi	a4,a4,520 # 80638de0 <bcache+0x12c18>
    80207be0:	c6e7b023          	sd	a4,-928(a5)
    bcache.head.next = &bcache.head;
    80207be4:	c6e7b423          	sd	a4,-920(a5)
    for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
    80207be8:	0041e497          	auipc	s1,0x41e
    80207bec:	5f848493          	addi	s1,s1,1528 # 806261e0 <bcache+0x18>
        b->next = bcache.head.next;
    80207bf0:	893e                	mv	s2,a5
        b->prev = &bcache.head;
    80207bf2:	89ba                	mv	s3,a4
        initsleeplock(&b->lock, "buffer");
    80207bf4:	00006a17          	auipc	s4,0x6
    80207bf8:	57ca0a13          	addi	s4,s4,1404 # 8020e170 <__func__.1945+0x18>
        b->next = bcache.head.next;
    80207bfc:	c6893783          	ld	a5,-920(s2)
    80207c00:	e8bc                	sd	a5,80(s1)
        b->prev = &bcache.head;
    80207c02:	0534b423          	sd	s3,72(s1)
        initsleeplock(&b->lock, "buffer");
    80207c06:	85d2                	mv	a1,s4
    80207c08:	01048513          	addi	a0,s1,16
    80207c0c:	ffffe097          	auipc	ra,0xffffe
    80207c10:	3e0080e7          	jalr	992(ra) # 80205fec <initsleeplock>
        bcache.head.next->prev = b;
    80207c14:	c6893783          	ld	a5,-920(s2)
    80207c18:	e7a4                	sd	s1,72(a5)
        bcache.head.next = b;
    80207c1a:	c6993423          	sd	s1,-920(s2)
    for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
    80207c1e:	25848493          	addi	s1,s1,600
    80207c22:	fd349de3          	bne	s1,s3,80207bfc <binit+0x54>
    }
}
    80207c26:	70a2                	ld	ra,40(sp)
    80207c28:	7402                	ld	s0,32(sp)
    80207c2a:	64e2                	ld	s1,24(sp)
    80207c2c:	6942                	ld	s2,16(sp)
    80207c2e:	69a2                	ld	s3,8(sp)
    80207c30:	6a02                	ld	s4,0(sp)
    80207c32:	6145                	addi	sp,sp,48
    80207c34:	8082                	ret

0000000080207c36 <bread>:
struct buf* blockRead(FileSystem* fs, u64 blockNum) {
    return bread(fs->deviceNumber, blockNum);
}

// Return a locked buf with the contents of the indicated block.
struct buf* bread(uint dev, uint blockno) {
    80207c36:	7179                	addi	sp,sp,-48
    80207c38:	f406                	sd	ra,40(sp)
    80207c3a:	f022                	sd	s0,32(sp)
    80207c3c:	ec26                	sd	s1,24(sp)
    80207c3e:	e84a                	sd	s2,16(sp)
    80207c40:	e44e                	sd	s3,8(sp)
    80207c42:	1800                	addi	s0,sp,48
    80207c44:	892a                	mv	s2,a0
    80207c46:	89ae                	mv	s3,a1
    acquireLock(&bcache.lock);
    80207c48:	0041e517          	auipc	a0,0x41e
    80207c4c:	58050513          	addi	a0,a0,1408 # 806261c8 <bcache>
    80207c50:	ffffe097          	auipc	ra,0xffffe
    80207c54:	514080e7          	jalr	1300(ra) # 80206164 <acquireLock>
    if (dev >= 0) {
    80207c58:	04094963          	bltz	s2,80207caa <bread+0x74>
        for (b = bcache.head.next; b != &bcache.head; b = b->next) {
    80207c5c:	00431497          	auipc	s1,0x431
    80207c60:	1d44b483          	ld	s1,468(s1) # 80638e30 <bcache+0x12c68>
    80207c64:	00431797          	auipc	a5,0x431
    80207c68:	17c78793          	addi	a5,a5,380 # 80638de0 <bcache+0x12c18>
    80207c6c:	02f48f63          	beq	s1,a5,80207caa <bread+0x74>
    80207c70:	873e                	mv	a4,a5
    80207c72:	a021                	j	80207c7a <bread+0x44>
    80207c74:	68a4                	ld	s1,80(s1)
    80207c76:	02e48a63          	beq	s1,a4,80207caa <bread+0x74>
            if (b->dev == dev && b->blockno == blockno) {
    80207c7a:	449c                	lw	a5,8(s1)
    80207c7c:	ff279ce3          	bne	a5,s2,80207c74 <bread+0x3e>
    80207c80:	44dc                	lw	a5,12(s1)
    80207c82:	ff3799e3          	bne	a5,s3,80207c74 <bread+0x3e>
                b->refcnt++;
    80207c86:	40bc                	lw	a5,64(s1)
    80207c88:	2785                	addiw	a5,a5,1
    80207c8a:	c0bc                	sw	a5,64(s1)
                releaseLock(&bcache.lock);
    80207c8c:	0041e517          	auipc	a0,0x41e
    80207c90:	53c50513          	addi	a0,a0,1340 # 806261c8 <bcache>
    80207c94:	ffffe097          	auipc	ra,0xffffe
    80207c98:	54c080e7          	jalr	1356(ra) # 802061e0 <releaseLock>
                acquiresleep(&b->lock);
    80207c9c:	01048513          	addi	a0,s1,16
    80207ca0:	ffffe097          	auipc	ra,0xffffe
    80207ca4:	386080e7          	jalr	902(ra) # 80206026 <acquiresleep>
                return b;
    80207ca8:	a88d                	j	80207d1a <bread+0xe4>
    for (b = bcache.head.prev; b != &bcache.head; b = b->prev) {
    80207caa:	00431497          	auipc	s1,0x431
    80207cae:	17e4b483          	ld	s1,382(s1) # 80638e28 <bcache+0x12c60>
    80207cb2:	00431797          	auipc	a5,0x431
    80207cb6:	12e78793          	addi	a5,a5,302 # 80638de0 <bcache+0x12c18>
    80207cba:	00f48863          	beq	s1,a5,80207cca <bread+0x94>
    80207cbe:	873e                	mv	a4,a5
        if (b->refcnt == 0) {
    80207cc0:	40bc                	lw	a5,64(s1)
    80207cc2:	c795                	beqz	a5,80207cee <bread+0xb8>
    for (b = bcache.head.prev; b != &bcache.head; b = b->prev) {
    80207cc4:	64a4                	ld	s1,72(s1)
    80207cc6:	fee49de3          	bne	s1,a4,80207cc0 <bread+0x8a>
    panic("bget: no buffers");
    80207cca:	00006697          	auipc	a3,0x6
    80207cce:	4ae68693          	addi	a3,a3,1198 # 8020e178 <__func__.1945+0x20>
    80207cd2:	00007617          	auipc	a2,0x7
    80207cd6:	84e60613          	addi	a2,a2,-1970 # 8020e520 <__func__.1362>
    80207cda:	05900593          	li	a1,89
    80207cde:	00006517          	auipc	a0,0x6
    80207ce2:	4b250513          	addi	a0,a0,1202 # 8020e190 <__func__.1945+0x38>
    80207ce6:	ffff9097          	auipc	ra,0xffff9
    80207cea:	e70080e7          	jalr	-400(ra) # 80200b56 <_panic_>
            b->dev = dev;
    80207cee:	0124a423          	sw	s2,8(s1)
            b->blockno = blockno;
    80207cf2:	0134a623          	sw	s3,12(s1)
            b->valid = 0;
    80207cf6:	0004a023          	sw	zero,0(s1)
            b->refcnt = 1;
    80207cfa:	4785                	li	a5,1
    80207cfc:	c0bc                	sw	a5,64(s1)
            releaseLock(&bcache.lock);
    80207cfe:	0041e517          	auipc	a0,0x41e
    80207d02:	4ca50513          	addi	a0,a0,1226 # 806261c8 <bcache>
    80207d06:	ffffe097          	auipc	ra,0xffffe
    80207d0a:	4da080e7          	jalr	1242(ra) # 802061e0 <releaseLock>
            acquiresleep(&b->lock);
    80207d0e:	01048513          	addi	a0,s1,16
    80207d12:	ffffe097          	auipc	ra,0xffffe
    80207d16:	314080e7          	jalr	788(ra) # 80206026 <acquiresleep>
    // static int cnt = 0;
    // printf("[Bread] %d\n", cnt++);
    struct buf* b;
    b = bget(dev, blockno);
    if (!b->valid) {
    80207d1a:	409c                	lw	a5,0(s1)
    80207d1c:	cb89                	beqz	a5,80207d2e <bread+0xf8>
        sdRead(b->data, b->blockno, 1);
        b->valid = 1;
    }
    return b;
}
    80207d1e:	8526                	mv	a0,s1
    80207d20:	70a2                	ld	ra,40(sp)
    80207d22:	7402                	ld	s0,32(sp)
    80207d24:	64e2                	ld	s1,24(sp)
    80207d26:	6942                	ld	s2,16(sp)
    80207d28:	69a2                	ld	s3,8(sp)
    80207d2a:	6145                	addi	sp,sp,48
    80207d2c:	8082                	ret
        sdRead(b->data, b->blockno, 1);
    80207d2e:	4605                	li	a2,1
    80207d30:	00c4e583          	lwu	a1,12(s1)
    80207d34:	05848513          	addi	a0,s1,88
    80207d38:	ffff9097          	auipc	ra,0xffff9
    80207d3c:	faa080e7          	jalr	-86(ra) # 80200ce2 <sdRead>
        b->valid = 1;
    80207d40:	4785                	li	a5,1
    80207d42:	c09c                	sw	a5,0(s1)
    return b;
    80207d44:	bfe9                	j	80207d1e <bread+0xe8>

0000000080207d46 <mountBlockRead>:
struct buf* mountBlockRead(FileSystem* fs, u64 blockNum) {
    80207d46:	1101                	addi	sp,sp,-32
    80207d48:	ec06                	sd	ra,24(sp)
    80207d4a:	e822                	sd	s0,16(sp)
    80207d4c:	e426                	sd	s1,8(sp)
    80207d4e:	e04a                	sd	s2,0(sp)
    80207d50:	1000                	addi	s0,sp,32
    80207d52:	892e                	mv	s2,a1
    struct file* file = fs->image;
    80207d54:	1e053783          	ld	a5,480(a0)
    if (file->type == FD_DEVICE) {
    80207d58:	4394                	lw	a3,0(a5)
    80207d5a:	470d                	li	a4,3
    80207d5c:	04e68c63          	beq	a3,a4,80207db4 <mountBlockRead+0x6e>
    80207d60:	84aa                	mv	s1,a0
    assert(file->type == FD_ENTRY);
    80207d62:	16f9                	addi	a3,a3,-2
    80207d64:	0016b693          	seqz	a3,a3
    80207d68:	00006617          	auipc	a2,0x6
    80207d6c:	44060613          	addi	a2,a2,1088 # 8020e1a8 <__func__.1368>
    80207d70:	06100593          	li	a1,97
    80207d74:	00006517          	auipc	a0,0x6
    80207d78:	41c50513          	addi	a0,a0,1052 # 8020e190 <__func__.1945+0x38>
    80207d7c:	ffff9097          	auipc	ra,0xffff9
    80207d80:	e50080e7          	jalr	-432(ra) # 80200bcc <_assert_>
    struct dirent *image = fs->image->ep;
    80207d84:	1e04b783          	ld	a5,480(s1)
    80207d88:	6f88                	ld	a0,24(a5)
    FileSystem* parentFs = image->fileSystem;
    80207d8a:	11853483          	ld	s1,280(a0)
    int parentBlockNum = getBlockNumber(image, blockNum); 
    80207d8e:	0009059b          	sext.w	a1,s2
    80207d92:	00001097          	auipc	ra,0x1
    80207d96:	8a6080e7          	jalr	-1882(ra) # 80208638 <getBlockNumber>
    80207d9a:	85aa                	mv	a1,a0
    if (parentBlockNum < 0) {
    80207d9c:	02054463          	bltz	a0,80207dc4 <mountBlockRead+0x7e>
    return parentFs->read(parentFs, parentBlockNum);
    80207da0:	1f84b783          	ld	a5,504(s1)
    80207da4:	8526                	mv	a0,s1
    80207da6:	9782                	jalr	a5
}
    80207da8:	60e2                	ld	ra,24(sp)
    80207daa:	6442                	ld	s0,16(sp)
    80207dac:	64a2                	ld	s1,8(sp)
    80207dae:	6902                	ld	s2,0(sp)
    80207db0:	6105                	addi	sp,sp,32
    80207db2:	8082                	ret
        return bread(file->major, blockNum);
    80207db4:	2581                	sext.w	a1,a1
    80207db6:	02479503          	lh	a0,36(a5)
    80207dba:	00000097          	auipc	ra,0x0
    80207dbe:	e7c080e7          	jalr	-388(ra) # 80207c36 <bread>
    80207dc2:	b7dd                	j	80207da8 <mountBlockRead+0x62>
        return 0;
    80207dc4:	4501                	li	a0,0
    80207dc6:	b7cd                	j	80207da8 <mountBlockRead+0x62>

0000000080207dc8 <blockRead>:
struct buf* blockRead(FileSystem* fs, u64 blockNum) {
    80207dc8:	1141                	addi	sp,sp,-16
    80207dca:	e406                	sd	ra,8(sp)
    80207dcc:	e022                	sd	s0,0(sp)
    80207dce:	0800                	addi	s0,sp,16
    return bread(fs->deviceNumber, blockNum);
    80207dd0:	2581                	sext.w	a1,a1
    80207dd2:	1f052503          	lw	a0,496(a0)
    80207dd6:	00000097          	auipc	ra,0x0
    80207dda:	e60080e7          	jalr	-416(ra) # 80207c36 <bread>
}
    80207dde:	60a2                	ld	ra,8(sp)
    80207de0:	6402                	ld	s0,0(sp)
    80207de2:	0141                	addi	sp,sp,16
    80207de4:	8082                	ret

0000000080207de6 <bwrite>:

// Write b's contents to disk.  Must be locked.
void bwrite(struct buf* b) {
    80207de6:	1101                	addi	sp,sp,-32
    80207de8:	ec06                	sd	ra,24(sp)
    80207dea:	e822                	sd	s0,16(sp)
    80207dec:	e426                	sd	s1,8(sp)
    80207dee:	1000                	addi	s0,sp,32
    80207df0:	84aa                	mv	s1,a0
    if (!holdingsleep(&b->lock))
    80207df2:	0541                	addi	a0,a0,16
    80207df4:	ffffe097          	auipc	ra,0xffffe
    80207df8:	2ce080e7          	jalr	718(ra) # 802060c2 <holdingsleep>
    80207dfc:	cd19                	beqz	a0,80207e1a <bwrite+0x34>
        panic("bwrite");
    sdWrite(b->data, b->blockno, 1);
    80207dfe:	4605                	li	a2,1
    80207e00:	00c4e583          	lwu	a1,12(s1)
    80207e04:	05848513          	addi	a0,s1,88
    80207e08:	ffff9097          	auipc	ra,0xffff9
    80207e0c:	200080e7          	jalr	512(ra) # 80201008 <sdWrite>
}
    80207e10:	60e2                	ld	ra,24(sp)
    80207e12:	6442                	ld	s0,16(sp)
    80207e14:	64a2                	ld	s1,8(sp)
    80207e16:	6105                	addi	sp,sp,32
    80207e18:	8082                	ret
        panic("bwrite");
    80207e1a:	00006697          	auipc	a3,0x6
    80207e1e:	37e68693          	addi	a3,a3,894 # 8020e198 <__func__.1945+0x40>
    80207e22:	00006617          	auipc	a2,0x6
    80207e26:	6f660613          	addi	a2,a2,1782 # 8020e518 <__func__.1384>
    80207e2a:	07f00593          	li	a1,127
    80207e2e:	00006517          	auipc	a0,0x6
    80207e32:	36250513          	addi	a0,a0,866 # 8020e190 <__func__.1945+0x38>
    80207e36:	ffff9097          	auipc	ra,0xffff9
    80207e3a:	d20080e7          	jalr	-736(ra) # 80200b56 <_panic_>

0000000080207e3e <brelse>:

// Release a locked buffer.
// Move to the head of the most-recently-used list.
void brelse(struct buf* b) {
    80207e3e:	1101                	addi	sp,sp,-32
    80207e40:	ec06                	sd	ra,24(sp)
    80207e42:	e822                	sd	s0,16(sp)
    80207e44:	e426                	sd	s1,8(sp)
    80207e46:	e04a                	sd	s2,0(sp)
    80207e48:	1000                	addi	s0,sp,32
    80207e4a:	84aa                	mv	s1,a0
    if (!holdingsleep(&b->lock))
    80207e4c:	01050913          	addi	s2,a0,16
    80207e50:	854a                	mv	a0,s2
    80207e52:	ffffe097          	auipc	ra,0xffffe
    80207e56:	270080e7          	jalr	624(ra) # 802060c2 <holdingsleep>
    80207e5a:	c92d                	beqz	a0,80207ecc <brelse+0x8e>
        panic("brelse");

    releasesleep(&b->lock);
    80207e5c:	854a                	mv	a0,s2
    80207e5e:	ffffe097          	auipc	ra,0xffffe
    80207e62:	220080e7          	jalr	544(ra) # 8020607e <releasesleep>

    acquireLock(&bcache.lock);
    80207e66:	0041e517          	auipc	a0,0x41e
    80207e6a:	36250513          	addi	a0,a0,866 # 806261c8 <bcache>
    80207e6e:	ffffe097          	auipc	ra,0xffffe
    80207e72:	2f6080e7          	jalr	758(ra) # 80206164 <acquireLock>
    b->refcnt--;
    80207e76:	40bc                	lw	a5,64(s1)
    80207e78:	37fd                	addiw	a5,a5,-1
    80207e7a:	0007871b          	sext.w	a4,a5
    80207e7e:	c0bc                	sw	a5,64(s1)
    if (b->refcnt == 0) {
    80207e80:	eb05                	bnez	a4,80207eb0 <brelse+0x72>
        // no one is waiting for it.
        b->next->prev = b->prev;
    80207e82:	68bc                	ld	a5,80(s1)
    80207e84:	64b8                	ld	a4,72(s1)
    80207e86:	e7b8                	sd	a4,72(a5)
        b->prev->next = b->next;
    80207e88:	64bc                	ld	a5,72(s1)
    80207e8a:	68b8                	ld	a4,80(s1)
    80207e8c:	ebb8                	sd	a4,80(a5)
        b->next = bcache.head.next;
    80207e8e:	00431797          	auipc	a5,0x431
    80207e92:	33a78793          	addi	a5,a5,826 # 806391c8 <ftable+0x150>
    80207e96:	c687b703          	ld	a4,-920(a5)
    80207e9a:	e8b8                	sd	a4,80(s1)
        b->prev = &bcache.head;
    80207e9c:	00431717          	auipc	a4,0x431
    80207ea0:	f4470713          	addi	a4,a4,-188 # 80638de0 <bcache+0x12c18>
    80207ea4:	e4b8                	sd	a4,72(s1)
        bcache.head.next->prev = b;
    80207ea6:	c687b703          	ld	a4,-920(a5)
    80207eaa:	e724                	sd	s1,72(a4)
        bcache.head.next = b;
    80207eac:	c697b423          	sd	s1,-920(a5)
    }

    releaseLock(&bcache.lock);
    80207eb0:	0041e517          	auipc	a0,0x41e
    80207eb4:	31850513          	addi	a0,a0,792 # 806261c8 <bcache>
    80207eb8:	ffffe097          	auipc	ra,0xffffe
    80207ebc:	328080e7          	jalr	808(ra) # 802061e0 <releaseLock>
}
    80207ec0:	60e2                	ld	ra,24(sp)
    80207ec2:	6442                	ld	s0,16(sp)
    80207ec4:	64a2                	ld	s1,8(sp)
    80207ec6:	6902                	ld	s2,0(sp)
    80207ec8:	6105                	addi	sp,sp,32
    80207eca:	8082                	ret
        panic("brelse");
    80207ecc:	00006697          	auipc	a3,0x6
    80207ed0:	2d468693          	addi	a3,a3,724 # 8020e1a0 <__func__.1945+0x48>
    80207ed4:	00006617          	auipc	a2,0x6
    80207ed8:	63c60613          	addi	a2,a2,1596 # 8020e510 <__func__.1388>
    80207edc:	08700593          	li	a1,135
    80207ee0:	00006517          	auipc	a0,0x6
    80207ee4:	2b050513          	addi	a0,a0,688 # 8020e190 <__func__.1945+0x38>
    80207ee8:	ffff9097          	auipc	ra,0xffff9
    80207eec:	c6e080e7          	jalr	-914(ra) # 80200b56 <_panic_>

0000000080207ef0 <bpin>:

void bpin(struct buf* b) {
    80207ef0:	1101                	addi	sp,sp,-32
    80207ef2:	ec06                	sd	ra,24(sp)
    80207ef4:	e822                	sd	s0,16(sp)
    80207ef6:	e426                	sd	s1,8(sp)
    80207ef8:	1000                	addi	s0,sp,32
    80207efa:	84aa                	mv	s1,a0
    acquireLock(&bcache.lock);
    80207efc:	0041e517          	auipc	a0,0x41e
    80207f00:	2cc50513          	addi	a0,a0,716 # 806261c8 <bcache>
    80207f04:	ffffe097          	auipc	ra,0xffffe
    80207f08:	260080e7          	jalr	608(ra) # 80206164 <acquireLock>
    b->refcnt++;
    80207f0c:	40bc                	lw	a5,64(s1)
    80207f0e:	2785                	addiw	a5,a5,1
    80207f10:	c0bc                	sw	a5,64(s1)
    releaseLock(&bcache.lock);
    80207f12:	0041e517          	auipc	a0,0x41e
    80207f16:	2b650513          	addi	a0,a0,694 # 806261c8 <bcache>
    80207f1a:	ffffe097          	auipc	ra,0xffffe
    80207f1e:	2c6080e7          	jalr	710(ra) # 802061e0 <releaseLock>
}
    80207f22:	60e2                	ld	ra,24(sp)
    80207f24:	6442                	ld	s0,16(sp)
    80207f26:	64a2                	ld	s1,8(sp)
    80207f28:	6105                	addi	sp,sp,32
    80207f2a:	8082                	ret

0000000080207f2c <bunpin>:

void bunpin(struct buf* b) {
    80207f2c:	1101                	addi	sp,sp,-32
    80207f2e:	ec06                	sd	ra,24(sp)
    80207f30:	e822                	sd	s0,16(sp)
    80207f32:	e426                	sd	s1,8(sp)
    80207f34:	1000                	addi	s0,sp,32
    80207f36:	84aa                	mv	s1,a0
    acquireLock(&bcache.lock);
    80207f38:	0041e517          	auipc	a0,0x41e
    80207f3c:	29050513          	addi	a0,a0,656 # 806261c8 <bcache>
    80207f40:	ffffe097          	auipc	ra,0xffffe
    80207f44:	224080e7          	jalr	548(ra) # 80206164 <acquireLock>
    b->refcnt--;
    80207f48:	40bc                	lw	a5,64(s1)
    80207f4a:	37fd                	addiw	a5,a5,-1
    80207f4c:	c0bc                	sw	a5,64(s1)
    releaseLock(&bcache.lock);
    80207f4e:	0041e517          	auipc	a0,0x41e
    80207f52:	27a50513          	addi	a0,a0,634 # 806261c8 <bcache>
    80207f56:	ffffe097          	auipc	ra,0xffffe
    80207f5a:	28a080e7          	jalr	650(ra) # 802061e0 <releaseLock>
}
    80207f5e:	60e2                	ld	ra,24(sp)
    80207f60:	6442                	ld	s0,16(sp)
    80207f62:	64a2                	ld	s1,8(sp)
    80207f64:	6105                	addi	sp,sp,32
    80207f66:	8082                	ret

0000000080207f68 <write_fat>:
 * @param   cluster     the number of cluster to write its content in FAT table
 * @param   content     the content which should be the next cluster number of
 * FAT end of chain flag
 */
static int write_fat(FileSystem *fs, uint32 cluster, uint32 content) {
    if (cluster > fs->superBlock.data_clus_cnt + 1) {
    80207f68:	457c                	lw	a5,76(a0)
    80207f6a:	2785                	addiw	a5,a5,1
    80207f6c:	06b7e663          	bltu	a5,a1,80207fd8 <write_fat+0x70>
static int write_fat(FileSystem *fs, uint32 cluster, uint32 content) {
    80207f70:	7179                	addi	sp,sp,-48
    80207f72:	f406                	sd	ra,40(sp)
    80207f74:	f022                	sd	s0,32(sp)
    80207f76:	ec26                	sd	s1,24(sp)
    80207f78:	e84a                	sd	s2,16(sp)
    80207f7a:	e44e                	sd	s3,8(sp)
    80207f7c:	e052                	sd	s4,0(sp)
    80207f7e:	1800                	addi	s0,sp,48
    80207f80:	892a                	mv	s2,a0
    80207f82:	8a32                	mv	s4,a2
    return fs->superBlock.bpb.rsvd_sec_cnt + (cluster << 2) / fs->superBlock.bpb.byts_per_sec +
    80207f84:	0025949b          	slliw	s1,a1,0x2
    80207f88:	05455583          	lhu	a1,84(a0)
    80207f8c:	02b4d5bb          	divuw	a1,s1,a1
    80207f90:	05855783          	lhu	a5,88(a0)
    80207f94:	9dbd                	addw	a1,a1,a5
        return -1;
    }
    uint32 fat_sec = fat_sec_of_clus(fs, cluster, 1);
    struct buf* b = fs->read(fs, fat_sec);
    80207f96:	1f853783          	ld	a5,504(a0)
    80207f9a:	1582                	slli	a1,a1,0x20
    80207f9c:	9181                	srli	a1,a1,0x20
    80207f9e:	9782                	jalr	a5
    80207fa0:	89aa                	mv	s3,a0
    return (cluster << 2) % fs->superBlock.bpb.byts_per_sec;
    80207fa2:	05495583          	lhu	a1,84(s2)
    80207fa6:	02b4f5bb          	remuw	a1,s1,a1
    uint off = fat_offset_of_clus(fs, cluster);
    *(uint32*)(b->data + off) = content;
    80207faa:	1582                	slli	a1,a1,0x20
    80207fac:	9181                	srli	a1,a1,0x20
    80207fae:	95aa                	add	a1,a1,a0
    80207fb0:	0545ac23          	sw	s4,88(a1)
    bwrite(b);
    80207fb4:	00000097          	auipc	ra,0x0
    80207fb8:	e32080e7          	jalr	-462(ra) # 80207de6 <bwrite>
    brelse(b);
    80207fbc:	854e                	mv	a0,s3
    80207fbe:	00000097          	auipc	ra,0x0
    80207fc2:	e80080e7          	jalr	-384(ra) # 80207e3e <brelse>
    return 0;
    80207fc6:	4501                	li	a0,0
}
    80207fc8:	70a2                	ld	ra,40(sp)
    80207fca:	7402                	ld	s0,32(sp)
    80207fcc:	64e2                	ld	s1,24(sp)
    80207fce:	6942                	ld	s2,16(sp)
    80207fd0:	69a2                	ld	s3,8(sp)
    80207fd2:	6a02                	ld	s4,0(sp)
    80207fd4:	6145                	addi	sp,sp,48
    80207fd6:	8082                	ret
        return -1;
    80207fd8:	557d                	li	a0,-1
}
    80207fda:	8082                	ret

0000000080207fdc <read_fat>:
static uint32 read_fat(FileSystem *fs, uint32 cluster) {
    80207fdc:	1101                	addi	sp,sp,-32
    80207fde:	ec06                	sd	ra,24(sp)
    80207fe0:	e822                	sd	s0,16(sp)
    80207fe2:	e426                	sd	s1,8(sp)
    80207fe4:	e04a                	sd	s2,0(sp)
    80207fe6:	1000                	addi	s0,sp,32
    if (cluster >= FAT32_EOC) {
    80207fe8:	100007b7          	lui	a5,0x10000
    80207fec:	17dd                	addi	a5,a5,-9
        return cluster;
    80207fee:	84ae                	mv	s1,a1
    if (cluster >= FAT32_EOC) {
    80207ff0:	04b7e263          	bltu	a5,a1,80208034 <read_fat+0x58>
    80207ff4:	892a                	mv	s2,a0
        fs->superBlock.data_clus_cnt + 1) {  // because cluster number starts at 2, not 0
    80207ff6:	457c                	lw	a5,76(a0)
    if (cluster >
    80207ff8:	2785                	addiw	a5,a5,1
        return 0;
    80207ffa:	4481                	li	s1,0
    if (cluster >
    80207ffc:	02b7ec63          	bltu	a5,a1,80208034 <read_fat+0x58>
    return fs->superBlock.bpb.rsvd_sec_cnt + (cluster << 2) / fs->superBlock.bpb.byts_per_sec +
    80208000:	0025949b          	slliw	s1,a1,0x2
    80208004:	05455583          	lhu	a1,84(a0)
    80208008:	02b4d5bb          	divuw	a1,s1,a1
    8020800c:	05855783          	lhu	a5,88(a0)
    80208010:	9dbd                	addw	a1,a1,a5
    struct buf* b = fs->read(fs, fat_sec);
    80208012:	1f853783          	ld	a5,504(a0)
    80208016:	1582                	slli	a1,a1,0x20
    80208018:	9181                	srli	a1,a1,0x20
    8020801a:	9782                	jalr	a5
    return (cluster << 2) % fs->superBlock.bpb.byts_per_sec;
    8020801c:	05495583          	lhu	a1,84(s2)
    80208020:	02b4f5bb          	remuw	a1,s1,a1
    uint32 next_clus = *(uint32*)(b->data + fat_offset_of_clus(fs, cluster));
    80208024:	1582                	slli	a1,a1,0x20
    80208026:	9181                	srli	a1,a1,0x20
    80208028:	95aa                	add	a1,a1,a0
    8020802a:	4da4                	lw	s1,88(a1)
    brelse(b);
    8020802c:	00000097          	auipc	ra,0x0
    80208030:	e12080e7          	jalr	-494(ra) # 80207e3e <brelse>
}
    80208034:	8526                	mv	a0,s1
    80208036:	60e2                	ld	ra,24(sp)
    80208038:	6442                	ld	s0,16(sp)
    8020803a:	64a2                	ld	s1,8(sp)
    8020803c:	6902                	ld	s2,0(sp)
    8020803e:	6105                	addi	sp,sp,32
    80208040:	8082                	ret

0000000080208042 <alloc_clus>:
        bwrite(b);
        brelse(b);
    }
}

static uint32 alloc_clus(FileSystem *fs, uint8 dev) {
    80208042:	715d                	addi	sp,sp,-80
    80208044:	e486                	sd	ra,72(sp)
    80208046:	e0a2                	sd	s0,64(sp)
    80208048:	fc26                	sd	s1,56(sp)
    8020804a:	f84a                	sd	s2,48(sp)
    8020804c:	f44e                	sd	s3,40(sp)
    8020804e:	f052                	sd	s4,32(sp)
    80208050:	ec56                	sd	s5,24(sp)
    80208052:	e85a                	sd	s6,16(sp)
    80208054:	e45e                	sd	s7,8(sp)
    80208056:	e062                	sd	s8,0(sp)
    80208058:	0880                	addi	s0,sp,80
    // should we keep a free cluster list? instead of searching fat every time.
    struct buf* b;
    uint32 sec = fs->superBlock.bpb.rsvd_sec_cnt;
    8020805a:	05855b83          	lhu	s7,88(a0)
    uint32 const ent_per_sec = fs->superBlock.bpb.byts_per_sec / sizeof(uint32);
    8020805e:	05455983          	lhu	s3,84(a0)
    for (uint32 i = 0; i < fs->superBlock.bpb.fat_sz; i++, sec++) {
    80208062:	517c                	lw	a5,100(a0)
    80208064:	c7f5                	beqz	a5,80208150 <alloc_clus+0x10e>
    80208066:	892a                	mv	s2,a0
    80208068:	0029d99b          	srliw	s3,s3,0x2
    8020806c:	00098a1b          	sext.w	s4,s3
    80208070:	4b01                	li	s6,0
        b = fs->read(fs, sec);
        for (uint32 j = 0; j < ent_per_sec; j++) {
    80208072:	4c01                	li	s8,0
    80208074:	a84d                	j	80208126 <alloc_clus+0xe4>
            if (((uint32*)(b->data))[j] == 0) {
                ((uint32*)(b->data))[j] = FAT32_EOC + 7;
    80208076:	100007b7          	lui	a5,0x10000
    8020807a:	37fd                	addiw	a5,a5,-1
    8020807c:	c29c                	sw	a5,0(a3)
                bwrite(b);
    8020807e:	8556                	mv	a0,s5
    80208080:	00000097          	auipc	ra,0x0
    80208084:	d66080e7          	jalr	-666(ra) # 80207de6 <bwrite>
                brelse(b);
    80208088:	8556                	mv	a0,s5
    8020808a:	00000097          	auipc	ra,0x0
    8020808e:	db4080e7          	jalr	-588(ra) # 80207e3e <brelse>
                uint32 clus = i * ent_per_sec + j;
    80208092:	036989bb          	mulw	s3,s3,s6
    80208096:	009984bb          	addw	s1,s3,s1
    8020809a:	00048a9b          	sext.w	s5,s1
    return ((cluster - 2) * fs->superBlock.bpb.sec_per_clus) + fs->superBlock.first_data_sec;
    8020809e:	05694783          	lbu	a5,86(s2)
    802080a2:	34f9                	addiw	s1,s1,-2
    802080a4:	02f48a3b          	mulw	s4,s1,a5
    802080a8:	04492703          	lw	a4,68(s2)
    802080ac:	00ea0a3b          	addw	s4,s4,a4
    for (int i = 0; i < fs->superBlock.bpb.sec_per_clus; i++) {
    802080b0:	c3b9                	beqz	a5,802080f6 <alloc_clus+0xb4>
    802080b2:	4981                	li	s3,0
        b = fs->read(fs, sec++);
    802080b4:	014985bb          	addw	a1,s3,s4
    802080b8:	1f893783          	ld	a5,504(s2)
    802080bc:	1582                	slli	a1,a1,0x20
    802080be:	9181                	srli	a1,a1,0x20
    802080c0:	854a                	mv	a0,s2
    802080c2:	9782                	jalr	a5
    802080c4:	84aa                	mv	s1,a0
        memset(b->data, 0, BSIZE);
    802080c6:	20000613          	li	a2,512
    802080ca:	4581                	li	a1,0
    802080cc:	05850513          	addi	a0,a0,88
    802080d0:	ffffe097          	auipc	ra,0xffffe
    802080d4:	34a080e7          	jalr	842(ra) # 8020641a <memset>
        bwrite(b);
    802080d8:	8526                	mv	a0,s1
    802080da:	00000097          	auipc	ra,0x0
    802080de:	d0c080e7          	jalr	-756(ra) # 80207de6 <bwrite>
        brelse(b);
    802080e2:	8526                	mv	a0,s1
    802080e4:	00000097          	auipc	ra,0x0
    802080e8:	d5a080e7          	jalr	-678(ra) # 80207e3e <brelse>
    for (int i = 0; i < fs->superBlock.bpb.sec_per_clus; i++) {
    802080ec:	2985                	addiw	s3,s3,1
    802080ee:	05694783          	lbu	a5,86(s2)
    802080f2:	fcf9c1e3          	blt	s3,a5,802080b4 <alloc_clus+0x72>
            }
        }
        brelse(b);
    }
    panic("no clusters");
}
    802080f6:	8556                	mv	a0,s5
    802080f8:	60a6                	ld	ra,72(sp)
    802080fa:	6406                	ld	s0,64(sp)
    802080fc:	74e2                	ld	s1,56(sp)
    802080fe:	7942                	ld	s2,48(sp)
    80208100:	79a2                	ld	s3,40(sp)
    80208102:	7a02                	ld	s4,32(sp)
    80208104:	6ae2                	ld	s5,24(sp)
    80208106:	6b42                	ld	s6,16(sp)
    80208108:	6ba2                	ld	s7,8(sp)
    8020810a:	6c02                	ld	s8,0(sp)
    8020810c:	6161                	addi	sp,sp,80
    8020810e:	8082                	ret
        brelse(b);
    80208110:	8556                	mv	a0,s5
    80208112:	00000097          	auipc	ra,0x0
    80208116:	d2c080e7          	jalr	-724(ra) # 80207e3e <brelse>
    for (uint32 i = 0; i < fs->superBlock.bpb.fat_sz; i++, sec++) {
    8020811a:	2b05                	addiw	s6,s6,1
    8020811c:	2b85                	addiw	s7,s7,1
    8020811e:	06492783          	lw	a5,100(s2)
    80208122:	02fb7763          	bgeu	s6,a5,80208150 <alloc_clus+0x10e>
        b = fs->read(fs, sec);
    80208126:	1f893783          	ld	a5,504(s2)
    8020812a:	020b9593          	slli	a1,s7,0x20
    8020812e:	9181                	srli	a1,a1,0x20
    80208130:	854a                	mv	a0,s2
    80208132:	9782                	jalr	a5
    80208134:	8aaa                	mv	s5,a0
        for (uint32 j = 0; j < ent_per_sec; j++) {
    80208136:	fc0a0de3          	beqz	s4,80208110 <alloc_clus+0xce>
    8020813a:	05850793          	addi	a5,a0,88
    8020813e:	84e2                	mv	s1,s8
            if (((uint32*)(b->data))[j] == 0) {
    80208140:	86be                	mv	a3,a5
    80208142:	4398                	lw	a4,0(a5)
    80208144:	db0d                	beqz	a4,80208076 <alloc_clus+0x34>
        for (uint32 j = 0; j < ent_per_sec; j++) {
    80208146:	2485                	addiw	s1,s1,1
    80208148:	0791                	addi	a5,a5,4
    8020814a:	fe9a1be3          	bne	s4,s1,80208140 <alloc_clus+0xfe>
    8020814e:	b7c9                	j	80208110 <alloc_clus+0xce>
    panic("no clusters");
    80208150:	00006697          	auipc	a3,0x6
    80208154:	06868693          	addi	a3,a3,104 # 8020e1b8 <__func__.1368+0x10>
    80208158:	00006617          	auipc	a2,0x6
    8020815c:	18060613          	addi	a2,a2,384 # 8020e2d8 <__func__.1718>
    80208160:	0db00593          	li	a1,219
    80208164:	00006517          	auipc	a0,0x6
    80208168:	06450513          	addi	a0,a0,100 # 8020e1c8 <__func__.1368+0x20>
    8020816c:	ffff9097          	auipc	ra,0xffff9
    80208170:	9ea080e7          	jalr	-1558(ra) # 80200b56 <_panic_>

0000000080208174 <reloc_clus>:
 * @param   entry       modify its cur_clus field
 * @param   off         the offset from the beginning of the relative file
 * @param   alloc       whether alloc new cluster when meeting end of FAT chains
 * @return              the offset from the new cur_clus
 */
static int reloc_clus(FileSystem *fs, struct dirent* entry, uint off, int alloc) {
    80208174:	715d                	addi	sp,sp,-80
    80208176:	e486                	sd	ra,72(sp)
    80208178:	e0a2                	sd	s0,64(sp)
    8020817a:	fc26                	sd	s1,56(sp)
    8020817c:	f84a                	sd	s2,48(sp)
    8020817e:	f44e                	sd	s3,40(sp)
    80208180:	f052                	sd	s4,32(sp)
    80208182:	ec56                	sd	s5,24(sp)
    80208184:	e85a                	sd	s6,16(sp)
    80208186:	e45e                	sd	s7,8(sp)
    80208188:	e062                	sd	s8,0(sp)
    8020818a:	0880                	addi	s0,sp,80
    8020818c:	89aa                	mv	s3,a0
    8020818e:	84ae                	mv	s1,a1
    80208190:	8ab2                	mv	s5,a2
    int clus_num = off / fs->superBlock.byts_per_clus;
    80208192:	05052c03          	lw	s8,80(a0)
    80208196:	03865a3b          	divuw	s4,a2,s8
    while (clus_num > entry->clus_cnt) {
    8020819a:	1105a703          	lw	a4,272(a1)
    8020819e:	07477963          	bgeu	a4,s4,80208210 <reloc_clus+0x9c>
    802081a2:	8bb6                	mv	s7,a3
        int clus = read_fat(fs, entry->cur_clus);
        if (clus >= FAT32_EOC) {
    802081a4:	10000b37          	lui	s6,0x10000
    802081a8:	1b5d                	addi	s6,s6,-9
    802081aa:	a025                	j	802081d2 <reloc_clus+0x5e>
            if (alloc) {
                clus = alloc_clus(fs, entry->dev);
                write_fat(fs, entry->cur_clus, clus);
            } else {
                entry->cur_clus = entry->first_clus;
    802081ac:	1044a783          	lw	a5,260(s1)
    802081b0:	10f4a623          	sw	a5,268(s1)
                entry->clus_cnt = 0;
    802081b4:	1004a823          	sw	zero,272(s1)
                return -1;
    802081b8:	557d                	li	a0,-1
    802081ba:	a04d                	j	8020825c <reloc_clus+0xe8>
            }
        }
        entry->cur_clus = clus;
    802081bc:	1124a623          	sw	s2,268(s1)
        entry->clus_cnt++;
    802081c0:	1104a783          	lw	a5,272(s1)
    802081c4:	2785                	addiw	a5,a5,1
    802081c6:	0007871b          	sext.w	a4,a5
    802081ca:	10f4a823          	sw	a5,272(s1)
    while (clus_num > entry->clus_cnt) {
    802081ce:	05477163          	bgeu	a4,s4,80208210 <reloc_clus+0x9c>
        int clus = read_fat(fs, entry->cur_clus);
    802081d2:	10c4a583          	lw	a1,268(s1)
    802081d6:	854e                	mv	a0,s3
    802081d8:	00000097          	auipc	ra,0x0
    802081dc:	e04080e7          	jalr	-508(ra) # 80207fdc <read_fat>
    802081e0:	0005091b          	sext.w	s2,a0
        if (clus >= FAT32_EOC) {
    802081e4:	fd2b5ce3          	bge	s6,s2,802081bc <reloc_clus+0x48>
            if (alloc) {
    802081e8:	fc0b82e3          	beqz	s7,802081ac <reloc_clus+0x38>
                clus = alloc_clus(fs, entry->dev);
    802081ec:	1204c583          	lbu	a1,288(s1)
    802081f0:	854e                	mv	a0,s3
    802081f2:	00000097          	auipc	ra,0x0
    802081f6:	e50080e7          	jalr	-432(ra) # 80208042 <alloc_clus>
    802081fa:	0005091b          	sext.w	s2,a0
                write_fat(fs, entry->cur_clus, clus);
    802081fe:	864a                	mv	a2,s2
    80208200:	10c4a583          	lw	a1,268(s1)
    80208204:	854e                	mv	a0,s3
    80208206:	00000097          	auipc	ra,0x0
    8020820a:	d62080e7          	jalr	-670(ra) # 80207f68 <write_fat>
    8020820e:	b77d                	j	802081bc <reloc_clus+0x48>
    }
    if (clus_num < entry->clus_cnt) {
    80208210:	04ea7263          	bgeu	s4,a4,80208254 <reloc_clus+0xe0>
        entry->cur_clus = entry->first_clus;
    80208214:	1044a783          	lw	a5,260(s1)
    80208218:	10f4a623          	sw	a5,268(s1)
        entry->clus_cnt = 0;
    8020821c:	1004a823          	sw	zero,272(s1)
        while (entry->clus_cnt < clus_num) {
    80208220:	038aea63          	bltu	s5,s8,80208254 <reloc_clus+0xe0>
            entry->cur_clus = read_fat(fs, entry->cur_clus);
            if (entry->cur_clus >= FAT32_EOC) {
    80208224:	10000937          	lui	s2,0x10000
    80208228:	195d                	addi	s2,s2,-9
            entry->cur_clus = read_fat(fs, entry->cur_clus);
    8020822a:	10c4a583          	lw	a1,268(s1)
    8020822e:	854e                	mv	a0,s3
    80208230:	00000097          	auipc	ra,0x0
    80208234:	dac080e7          	jalr	-596(ra) # 80207fdc <read_fat>
    80208238:	2501                	sext.w	a0,a0
    8020823a:	10a4a623          	sw	a0,268(s1)
            if (entry->cur_clus >= FAT32_EOC) {
    8020823e:	02a96b63          	bltu	s2,a0,80208274 <reloc_clus+0x100>
                panic("reloc_clus");
            }
            entry->clus_cnt++;
    80208242:	1104a783          	lw	a5,272(s1)
    80208246:	2785                	addiw	a5,a5,1
    80208248:	0007871b          	sext.w	a4,a5
    8020824c:	10f4a823          	sw	a5,272(s1)
        while (entry->clus_cnt < clus_num) {
    80208250:	fd476de3          	bltu	a4,s4,8020822a <reloc_clus+0xb6>
        }
    }
    return off % fs->superBlock.byts_per_clus;
    80208254:	0509a503          	lw	a0,80(s3)
    80208258:	02aaf53b          	remuw	a0,s5,a0
}
    8020825c:	60a6                	ld	ra,72(sp)
    8020825e:	6406                	ld	s0,64(sp)
    80208260:	74e2                	ld	s1,56(sp)
    80208262:	7942                	ld	s2,48(sp)
    80208264:	79a2                	ld	s3,40(sp)
    80208266:	7a02                	ld	s4,32(sp)
    80208268:	6ae2                	ld	s5,24(sp)
    8020826a:	6b42                	ld	s6,16(sp)
    8020826c:	6ba2                	ld	s7,8(sp)
    8020826e:	6c02                	ld	s8,0(sp)
    80208270:	6161                	addi	sp,sp,80
    80208272:	8082                	ret
                panic("reloc_clus");
    80208274:	00006697          	auipc	a3,0x6
    80208278:	f5c68693          	addi	a3,a3,-164 # 8020e1d0 <__func__.1368+0x28>
    8020827c:	00006617          	auipc	a2,0x6
    80208280:	06c60613          	addi	a2,a2,108 # 8020e2e8 <__func__.1761>
    80208284:	15000593          	li	a1,336
    80208288:	00006517          	auipc	a0,0x6
    8020828c:	f4050513          	addi	a0,a0,-192 # 8020e1c8 <__func__.1368+0x20>
    80208290:	ffff9097          	auipc	ra,0xffff9
    80208294:	8c6080e7          	jalr	-1850(ra) # 80200b56 <_panic_>

0000000080208298 <rw_clus>:
                    uint n) {
    80208298:	7119                	addi	sp,sp,-128
    8020829a:	fc86                	sd	ra,120(sp)
    8020829c:	f8a2                	sd	s0,112(sp)
    8020829e:	f4a6                	sd	s1,104(sp)
    802082a0:	f0ca                	sd	s2,96(sp)
    802082a2:	ecce                	sd	s3,88(sp)
    802082a4:	e8d2                	sd	s4,80(sp)
    802082a6:	e4d6                	sd	s5,72(sp)
    802082a8:	e0da                	sd	s6,64(sp)
    802082aa:	fc5e                	sd	s7,56(sp)
    802082ac:	f862                	sd	s8,48(sp)
    802082ae:	f466                	sd	s9,40(sp)
    802082b0:	f06a                	sd	s10,32(sp)
    802082b2:	ec6e                	sd	s11,24(sp)
    802082b4:	0100                	addi	s0,sp,128
    802082b6:	f8d43023          	sd	a3,-128(s0)
    802082ba:	8b3a                	mv	s6,a4
    if (off + n > fs->superBlock.byts_per_clus)
    802082bc:	010786bb          	addw	a3,a5,a6
    802082c0:	4938                	lw	a4,80(a0)
    802082c2:	02d76d63          	bltu	a4,a3,802082fc <rw_clus+0x64>
    802082c6:	8c2a                	mv	s8,a0
    802082c8:	8bb2                	mv	s7,a2
    802082ca:	8cc2                	mv	s9,a6
    uint sec = first_sec_of_clus(fs, cluster) + off / fs->superBlock.bpb.byts_per_sec;
    802082cc:	05455a83          	lhu	s5,84(a0)
    return ((cluster - 2) * fs->superBlock.bpb.sec_per_clus) + fs->superBlock.first_data_sec;
    802082d0:	ffe5899b          	addiw	s3,a1,-2
    802082d4:	05654583          	lbu	a1,86(a0)
    802082d8:	02b989bb          	mulw	s3,s3,a1
    802082dc:	416c                	lw	a1,68(a0)
    802082de:	00b989bb          	addw	s3,s3,a1
    uint sec = first_sec_of_clus(fs, cluster) + off / fs->superBlock.bpb.byts_per_sec;
    802082e2:	0357d73b          	divuw	a4,a5,s5
    802082e6:	00e989bb          	addw	s3,s3,a4
    off = off % fs->superBlock.bpb.byts_per_sec;
    802082ea:	0357fabb          	remuw	s5,a5,s5
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    802082ee:	10080163          	beqz	a6,802083f0 <rw_clus+0x158>
    802082f2:	4a01                	li	s4,0
        m = BSIZE - off % BSIZE;
    802082f4:	20000d93          	li	s11,512
        if (bad == -1) {
    802082f8:	5d7d                	li	s10,-1
    802082fa:	a8bd                	j	80208378 <rw_clus+0xe0>
        panic("offset out of range");
    802082fc:	00006697          	auipc	a3,0x6
    80208300:	ee468693          	addi	a3,a3,-284 # 8020e1e0 <__func__.1368+0x38>
    80208304:	00006617          	auipc	a2,0x6
    80208308:	25460613          	addi	a2,a2,596 # 8020e558 <__func__.1741>
    8020830c:	11500593          	li	a1,277
    80208310:	00006517          	auipc	a0,0x6
    80208314:	eb850513          	addi	a0,a0,-328 # 8020e1c8 <__func__.1368+0x20>
    80208318:	ffff9097          	auipc	ra,0xffff9
    8020831c:	83e080e7          	jalr	-1986(ra) # 80200b56 <_panic_>
                bwrite(bp);
    80208320:	854a                	mv	a0,s2
    80208322:	00000097          	auipc	ra,0x0
    80208326:	ac4080e7          	jalr	-1340(ra) # 80207de6 <bwrite>
        brelse(bp);
    8020832a:	854a                	mv	a0,s2
    8020832c:	00000097          	auipc	ra,0x0
    80208330:	b12080e7          	jalr	-1262(ra) # 80207e3e <brelse>
        if (bad == -1) {
    80208334:	a805                	j	80208364 <rw_clus+0xcc>
            bad = either_copyout(user, data, bp->data + (off % BSIZE), m);
    80208336:	05890613          	addi	a2,s2,88 # 10000058 <_start-0x701fffa8>
    8020833a:	1682                	slli	a3,a3,0x20
    8020833c:	9281                	srli	a3,a3,0x20
    8020833e:	963a                	add	a2,a2,a4
    80208340:	85da                	mv	a1,s6
    80208342:	f8043503          	ld	a0,-128(s0)
    80208346:	ffffb097          	auipc	ra,0xffffb
    8020834a:	f8e080e7          	jalr	-114(ra) # 802032d4 <either_copyout>
    8020834e:	f8a43423          	sd	a0,-120(s0)
        brelse(bp);
    80208352:	854a                	mv	a0,s2
    80208354:	00000097          	auipc	ra,0x0
    80208358:	aea080e7          	jalr	-1302(ra) # 80207e3e <brelse>
        if (bad == -1) {
    8020835c:	f8843783          	ld	a5,-120(s0)
    80208360:	07a78863          	beq	a5,s10,802083d0 <rw_clus+0x138>
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    80208364:	01448a3b          	addw	s4,s1,s4
    80208368:	01548abb          	addw	s5,s1,s5
    8020836c:	1482                	slli	s1,s1,0x20
    8020836e:	9081                	srli	s1,s1,0x20
    80208370:	9b26                	add	s6,s6,s1
    80208372:	2985                	addiw	s3,s3,1
    80208374:	059a7e63          	bgeu	s4,s9,802083d0 <rw_clus+0x138>
        bp = fs->read(fs, sec);
    80208378:	1f8c3783          	ld	a5,504(s8)
    8020837c:	02099593          	slli	a1,s3,0x20
    80208380:	9181                	srli	a1,a1,0x20
    80208382:	8562                	mv	a0,s8
    80208384:	9782                	jalr	a5
    80208386:	892a                	mv	s2,a0
        m = BSIZE - off % BSIZE;
    80208388:	1ffaf713          	andi	a4,s5,511
    8020838c:	40ed863b          	subw	a2,s11,a4
        if (n - tot < m) {
    80208390:	414c87bb          	subw	a5,s9,s4
    80208394:	86be                	mv	a3,a5
    80208396:	2781                	sext.w	a5,a5
    80208398:	0006059b          	sext.w	a1,a2
    8020839c:	00f5f363          	bgeu	a1,a5,802083a2 <rw_clus+0x10a>
    802083a0:	86b2                	mv	a3,a2
    802083a2:	0006849b          	sext.w	s1,a3
        if (write) {
    802083a6:	f80b88e3          	beqz	s7,80208336 <rw_clus+0x9e>
            if ((bad = either_copyin(bp->data + (off % BSIZE), user, data,
    802083aa:	05890513          	addi	a0,s2,88
    802083ae:	1682                	slli	a3,a3,0x20
    802083b0:	9281                	srli	a3,a3,0x20
    802083b2:	865a                	mv	a2,s6
    802083b4:	f8043583          	ld	a1,-128(s0)
    802083b8:	953a                	add	a0,a0,a4
    802083ba:	ffffb097          	auipc	ra,0xffffb
    802083be:	f72080e7          	jalr	-142(ra) # 8020332c <either_copyin>
    802083c2:	f5a51fe3          	bne	a0,s10,80208320 <rw_clus+0x88>
        brelse(bp);
    802083c6:	854a                	mv	a0,s2
    802083c8:	00000097          	auipc	ra,0x0
    802083cc:	a76080e7          	jalr	-1418(ra) # 80207e3e <brelse>
}
    802083d0:	8552                	mv	a0,s4
    802083d2:	70e6                	ld	ra,120(sp)
    802083d4:	7446                	ld	s0,112(sp)
    802083d6:	74a6                	ld	s1,104(sp)
    802083d8:	7906                	ld	s2,96(sp)
    802083da:	69e6                	ld	s3,88(sp)
    802083dc:	6a46                	ld	s4,80(sp)
    802083de:	6aa6                	ld	s5,72(sp)
    802083e0:	6b06                	ld	s6,64(sp)
    802083e2:	7be2                	ld	s7,56(sp)
    802083e4:	7c42                	ld	s8,48(sp)
    802083e6:	7ca2                	ld	s9,40(sp)
    802083e8:	7d02                	ld	s10,32(sp)
    802083ea:	6de2                	ld	s11,24(sp)
    802083ec:	6109                	addi	sp,sp,128
    802083ee:	8082                	ret
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    802083f0:	8a42                	mv	s4,a6
    802083f2:	bff9                	j	802083d0 <rw_clus+0x138>

00000000802083f4 <eget>:
// cache entries by their whole path. But when parsing a path, we open all the
// directories through it, which forms a linked list from the final file to the
// root. Thus, we use the "parent" pointer to recognize whether an entry with
// the "name" as given is really the file we want in the right path. Should
// never get root by eget, it's easy to understand.
static struct dirent* eget(struct dirent* parent, char* name) {
    802083f4:	715d                	addi	sp,sp,-80
    802083f6:	e486                	sd	ra,72(sp)
    802083f8:	e0a2                	sd	s0,64(sp)
    802083fa:	fc26                	sd	s1,56(sp)
    802083fc:	f84a                	sd	s2,48(sp)
    802083fe:	f44e                	sd	s3,40(sp)
    80208400:	f052                	sd	s4,32(sp)
    80208402:	ec56                	sd	s5,24(sp)
    80208404:	e85a                	sd	s6,16(sp)
    80208406:	e45e                	sd	s7,8(sp)
    80208408:	0880                	addi	s0,sp,80
    8020840a:	8aaa                	mv	s5,a0
    8020840c:	8bae                	mv	s7,a1
    struct dirent* ep;
    acquireLock(&direntCache.lock);
    8020840e:	00415517          	auipc	a0,0x415
    80208412:	3c250513          	addi	a0,a0,962 # 8061d7d0 <direntCache>
    80208416:	ffffe097          	auipc	ra,0xffffe
    8020841a:	d4e080e7          	jalr	-690(ra) # 80206164 <acquireLock>
    if (name) {
    8020841e:	080b8c63          	beqz	s7,802084b6 <eget+0xc2>
    80208422:	00415497          	auipc	s1,0x415
    80208426:	4e848493          	addi	s1,s1,1256 # 8061d90a <direntCache+0x13a>
        for (int i = 0; i < ENTRY_CACHE_NUM; i++) {
    8020842a:	4901                	li	s2,0
            ep = &direntCache.entries[i];
            if (ep->valid == 1 && ep->parent == parent &&
    8020842c:	4985                	li	s3,1
        for (int i = 0; i < ENTRY_CACHE_NUM; i++) {
    8020842e:	03200a13          	li	s4,50
    80208432:	a031                	j	8020843e <eget+0x4a>
    80208434:	2905                	addiw	s2,s2,1
    80208436:	17048493          	addi	s1,s1,368
    8020843a:	07490e63          	beq	s2,s4,802084b6 <eget+0xc2>
            if (ep->valid == 1 && ep->parent == parent &&
    8020843e:	00049783          	lh	a5,0(s1)
    80208442:	ff3799e3          	bne	a5,s3,80208434 <eget+0x40>
    80208446:	0164b783          	ld	a5,22(s1)
    8020844a:	ff5795e3          	bne	a5,s5,80208434 <eget+0x40>
    8020844e:	ede48b13          	addi	s6,s1,-290
                strncmp(ep->filename, name, FAT32_MAX_FILENAME) == 0) {
    80208452:	0ff00613          	li	a2,255
    80208456:	85de                	mv	a1,s7
    80208458:	855a                	mv	a0,s6
    8020845a:	ffffe097          	auipc	ra,0xffffe
    8020845e:	098080e7          	jalr	152(ra) # 802064f2 <strncmp>
            if (ep->valid == 1 && ep->parent == parent &&
    80208462:	f969                	bnez	a0,80208434 <eget+0x40>
                if (ep->ref++ == 0) {
    80208464:	17000793          	li	a5,368
    80208468:	02f90733          	mul	a4,s2,a5
    8020846c:	00415797          	auipc	a5,0x415
    80208470:	36478793          	addi	a5,a5,868 # 8061d7d0 <direntCache>
    80208474:	97ba                	add	a5,a5,a4
    80208476:	1487a703          	lw	a4,328(a5)
    8020847a:	0017069b          	addiw	a3,a4,1
    8020847e:	14d7a423          	sw	a3,328(a5)
    80208482:	e30d                	bnez	a4,802084a4 <eget+0xb0>
                    ep->parent->ref++;
    80208484:	17000793          	li	a5,368
    80208488:	02f90933          	mul	s2,s2,a5
    8020848c:	00415797          	auipc	a5,0x415
    80208490:	34478793          	addi	a5,a5,836 # 8061d7d0 <direntCache>
    80208494:	993e                	add	s2,s2,a5
    80208496:	15093703          	ld	a4,336(s2)
    8020849a:	13072783          	lw	a5,304(a4)
    8020849e:	2785                	addiw	a5,a5,1
    802084a0:	12f72823          	sw	a5,304(a4)
                }
                releaseLock(&direntCache.lock);
    802084a4:	00415517          	auipc	a0,0x415
    802084a8:	32c50513          	addi	a0,a0,812 # 8061d7d0 <direntCache>
    802084ac:	ffffe097          	auipc	ra,0xffffe
    802084b0:	d34080e7          	jalr	-716(ra) # 802061e0 <releaseLock>
                return ep;
    802084b4:	a051                	j	80208538 <eget+0x144>
            }
        }
    }
    for (int i = 0; i < ENTRY_CACHE_NUM; i++) {
    802084b6:	00415717          	auipc	a4,0x415
    802084ba:	46270713          	addi	a4,a4,1122 # 8061d918 <direntCache+0x148>
    802084be:	4781                	li	a5,0
    802084c0:	03200613          	li	a2,50
        ep = &direntCache.entries[i];
        if (ep->ref == 0) {
    802084c4:	4314                	lw	a3,0(a4)
    802084c6:	ca85                	beqz	a3,802084f6 <eget+0x102>
    for (int i = 0; i < ENTRY_CACHE_NUM; i++) {
    802084c8:	2785                	addiw	a5,a5,1
    802084ca:	17070713          	addi	a4,a4,368
    802084ce:	fec79be3          	bne	a5,a2,802084c4 <eget+0xd0>
            ep->fileSystem = parent->fileSystem;
            releaseLock(&direntCache.lock);
            return ep;
        }
    }
    panic("eget: insufficient ecache");
    802084d2:	00006697          	auipc	a3,0x6
    802084d6:	d2668693          	addi	a3,a3,-730 # 8020e1f8 <__func__.1368+0x50>
    802084da:	00006617          	auipc	a2,0x6
    802084de:	06660613          	addi	a2,a2,102 # 8020e540 <__func__.1810>
    802084e2:	1c500593          	li	a1,453
    802084e6:	00006517          	auipc	a0,0x6
    802084ea:	ce250513          	addi	a0,a0,-798 # 8020e1c8 <__func__.1368+0x20>
    802084ee:	ffff8097          	auipc	ra,0xffff8
    802084f2:	668080e7          	jalr	1640(ra) # 80200b56 <_panic_>
        ep = &direntCache.entries[i];
    802084f6:	17000713          	li	a4,368
    802084fa:	02e787b3          	mul	a5,a5,a4
    802084fe:	01878b13          	addi	s6,a5,24
    80208502:	00415517          	auipc	a0,0x415
    80208506:	2ce50513          	addi	a0,a0,718 # 8061d7d0 <direntCache>
    8020850a:	9b2a                	add	s6,s6,a0
            ep->ref = 1;
    8020850c:	97aa                	add	a5,a5,a0
    8020850e:	4705                	li	a4,1
    80208510:	14e7a423          	sw	a4,328(a5)
            ep->dev = parent->dev;
    80208514:	120ac703          	lbu	a4,288(s5) # ffffffff80000120 <bssEnd+0xfffffffeff9c5120>
    80208518:	12e78c23          	sb	a4,312(a5)
            ep->off = 0;
    8020851c:	1407a623          	sw	zero,332(a5)
            ep->valid = 0;
    80208520:	12079d23          	sh	zero,314(a5)
            ep->dirty = 0;
    80208524:	12078ca3          	sb	zero,313(a5)
            ep->fileSystem = parent->fileSystem;
    80208528:	118ab703          	ld	a4,280(s5)
    8020852c:	12e7b823          	sd	a4,304(a5)
            releaseLock(&direntCache.lock);
    80208530:	ffffe097          	auipc	ra,0xffffe
    80208534:	cb0080e7          	jalr	-848(ra) # 802061e0 <releaseLock>
    return 0;
}
    80208538:	855a                	mv	a0,s6
    8020853a:	60a6                	ld	ra,72(sp)
    8020853c:	6406                	ld	s0,64(sp)
    8020853e:	74e2                	ld	s1,56(sp)
    80208540:	7942                	ld	s2,48(sp)
    80208542:	79a2                	ld	s3,40(sp)
    80208544:	7a02                	ld	s4,32(sp)
    80208546:	6ae2                	ld	s5,24(sp)
    80208548:	6b42                	ld	s6,16(sp)
    8020854a:	6ba2                	ld	s7,8(sp)
    8020854c:	6161                	addi	sp,sp,80
    8020854e:	8082                	ret

0000000080208550 <read_entry_name>:
 * Read filename from directory entry.
 * @param   buffer      pointer to the array that stores the name
 * @param   raw_entry   pointer to the entry in a sector buffer
 * @param   islong      if non-zero, read as l-n-e, otherwise s-n-e.
 */
static void read_entry_name(char* buffer, union dentry* d) {
    80208550:	7179                	addi	sp,sp,-48
    80208552:	f406                	sd	ra,40(sp)
    80208554:	f022                	sd	s0,32(sp)
    80208556:	ec26                	sd	s1,24(sp)
    80208558:	e84a                	sd	s2,16(sp)
    8020855a:	1800                	addi	s0,sp,48
    8020855c:	84aa                	mv	s1,a0
    8020855e:	892e                	mv	s2,a1
    if (d->lne.attr == ATTR_LONG_NAME) {  // long entry branch
    80208560:	00b5c703          	lbu	a4,11(a1)
    80208564:	47bd                	li	a5,15
    80208566:	08f70463          	beq	a4,a5,802085ee <read_entry_name+0x9e>
        snstr(buffer, d->lne.name2, NELEM(d->lne.name2));
        buffer += NELEM(d->lne.name2);
        snstr(buffer, d->lne.name3, NELEM(d->lne.name3));
    } else {
        // assert: only "." and ".." will enter this branch
        memset(buffer, 0, CHAR_SHORT_NAME + 2);  // plus '.' and '\0'
    8020856a:	4635                	li	a2,13
    8020856c:	4581                	li	a1,0
    8020856e:	ffffe097          	auipc	ra,0xffffe
    80208572:	eac080e7          	jalr	-340(ra) # 8020641a <memset>
        int i;
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80208576:	00094703          	lbu	a4,0(s2)
    8020857a:	02000793          	li	a5,32
    8020857e:	0af70b63          	beq	a4,a5,80208634 <read_entry_name+0xe4>
    80208582:	4785                	li	a5,1
    80208584:	02000613          	li	a2,32
    80208588:	45a5                	li	a1,9
            buffer[i] = d->sne.name[i];
    8020858a:	00f486b3          	add	a3,s1,a5
    8020858e:	fee68fa3          	sb	a4,-1(a3)
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80208592:	0007851b          	sext.w	a0,a5
    80208596:	00f90733          	add	a4,s2,a5
    8020859a:	00074703          	lbu	a4,0(a4)
    8020859e:	00c70563          	beq	a4,a2,802085a8 <read_entry_name+0x58>
    802085a2:	0785                	addi	a5,a5,1
    802085a4:	feb793e3          	bne	a5,a1,8020858a <read_entry_name+0x3a>
        }
        if (d->sne.name[8] != ' ') {
    802085a8:	00894703          	lbu	a4,8(s2)
    802085ac:	02000793          	li	a5,32
    802085b0:	00f70963          	beq	a4,a5,802085c2 <read_entry_name+0x72>
            buffer[i++] = '.';
    802085b4:	00a487b3          	add	a5,s1,a0
    802085b8:	02e00713          	li	a4,46
    802085bc:	00e78023          	sb	a4,0(a5)
    802085c0:	2505                	addiw	a0,a0,1
        }
        for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
    802085c2:	00890793          	addi	a5,s2,8
    802085c6:	94aa                	add	s1,s1,a0
    802085c8:	092d                	addi	s2,s2,11
            if (d->sne.name[j] == ' ') {
    802085ca:	02000693          	li	a3,32
    802085ce:	0007c703          	lbu	a4,0(a5)
    802085d2:	00d70863          	beq	a4,a3,802085e2 <read_entry_name+0x92>
                break;
            }
            buffer[i] = d->sne.name[j];
    802085d6:	00e48023          	sb	a4,0(s1)
        for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
    802085da:	0785                	addi	a5,a5,1
    802085dc:	0485                	addi	s1,s1,1
    802085de:	ff2798e3          	bne	a5,s2,802085ce <read_entry_name+0x7e>
        }
    }
}
    802085e2:	70a2                	ld	ra,40(sp)
    802085e4:	7402                	ld	s0,32(sp)
    802085e6:	64e2                	ld	s1,24(sp)
    802085e8:	6942                	ld	s2,16(sp)
    802085ea:	6145                	addi	sp,sp,48
    802085ec:	8082                	ret
        memmove(temp, d->lne.name1, sizeof(temp));
    802085ee:	4629                	li	a2,10
    802085f0:	0585                	addi	a1,a1,1
    802085f2:	fd040513          	addi	a0,s0,-48
    802085f6:	ffffe097          	auipc	ra,0xffffe
    802085fa:	e84080e7          	jalr	-380(ra) # 8020647a <memmove>
        snstr(buffer, temp, NELEM(d->lne.name1));
    802085fe:	4615                	li	a2,5
    80208600:	fd040593          	addi	a1,s0,-48
    80208604:	8526                	mv	a0,s1
    80208606:	ffffe097          	auipc	ra,0xffffe
    8020860a:	fe6080e7          	jalr	-26(ra) # 802065ec <snstr>
        snstr(buffer, d->lne.name2, NELEM(d->lne.name2));
    8020860e:	4619                	li	a2,6
    80208610:	00e90593          	addi	a1,s2,14
    80208614:	00548513          	addi	a0,s1,5
    80208618:	ffffe097          	auipc	ra,0xffffe
    8020861c:	fd4080e7          	jalr	-44(ra) # 802065ec <snstr>
        snstr(buffer, d->lne.name3, NELEM(d->lne.name3));
    80208620:	4609                	li	a2,2
    80208622:	01c90593          	addi	a1,s2,28
    80208626:	00b48513          	addi	a0,s1,11
    8020862a:	ffffe097          	auipc	ra,0xffffe
    8020862e:	fc2080e7          	jalr	-62(ra) # 802065ec <snstr>
    80208632:	bf45                	j	802085e2 <read_entry_name+0x92>
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80208634:	4501                	li	a0,0
    80208636:	bf8d                	j	802085a8 <read_entry_name+0x58>

0000000080208638 <getBlockNumber>:
int getBlockNumber(struct dirent* entry, int dataBlockNum) {
    80208638:	7179                	addi	sp,sp,-48
    8020863a:	f406                	sd	ra,40(sp)
    8020863c:	f022                	sd	s0,32(sp)
    8020863e:	ec26                	sd	s1,24(sp)
    80208640:	e84a                	sd	s2,16(sp)
    80208642:	e44e                	sd	s3,8(sp)
    80208644:	1800                	addi	s0,sp,48
    int offset = (dataBlockNum << 9);
    80208646:	0095949b          	slliw	s1,a1,0x9
    if (offset > entry->file_size) {
    8020864a:	0004861b          	sext.w	a2,s1
    8020864e:	10852783          	lw	a5,264(a0)
    80208652:	04c7e663          	bltu	a5,a2,8020869e <getBlockNumber+0x66>
    80208656:	892a                	mv	s2,a0
    FileSystem *fs = entry->fileSystem;
    80208658:	11853983          	ld	s3,280(a0)
    reloc_clus(fs, entry, offset, 0);
    8020865c:	4681                	li	a3,0
    8020865e:	85aa                	mv	a1,a0
    80208660:	854e                	mv	a0,s3
    80208662:	00000097          	auipc	ra,0x0
    80208666:	b12080e7          	jalr	-1262(ra) # 80208174 <reloc_clus>
    return ((cluster - 2) * fs->superBlock.bpb.sec_per_clus) + fs->superBlock.first_data_sec;
    8020866a:	10c92503          	lw	a0,268(s2)
    8020866e:	3579                	addiw	a0,a0,-2
    80208670:	0569c783          	lbu	a5,86(s3)
    80208674:	02f5053b          	mulw	a0,a0,a5
    80208678:	0449a783          	lw	a5,68(s3)
    8020867c:	9d3d                	addw	a0,a0,a5
    return first_sec_of_clus(fs, entry->cur_clus) + offset % fs->superBlock.byts_per_clus / fs->superBlock.bpb.byts_per_sec;
    8020867e:	0509a583          	lw	a1,80(s3)
    80208682:	02b4f4bb          	remuw	s1,s1,a1
    80208686:	0549d583          	lhu	a1,84(s3)
    8020868a:	02b4d4bb          	divuw	s1,s1,a1
    8020868e:	9d25                	addw	a0,a0,s1
}
    80208690:	70a2                	ld	ra,40(sp)
    80208692:	7402                	ld	s0,32(sp)
    80208694:	64e2                	ld	s1,24(sp)
    80208696:	6942                	ld	s2,16(sp)
    80208698:	69a2                	ld	s3,8(sp)
    8020869a:	6145                	addi	sp,sp,48
    8020869c:	8082                	ret
        return -1;
    8020869e:	557d                	li	a0,-1
    802086a0:	bfc5                	j	80208690 <getBlockNumber+0x58>

00000000802086a2 <eread>:
    if (off > entry->file_size || off + n < off ||
    802086a2:	10852783          	lw	a5,264(a0)
    802086a6:	0ed7e863          	bltu	a5,a3,80208796 <eread+0xf4>
int eread(struct dirent* entry, int user_dst, u64 dst, uint off, uint n) {
    802086aa:	711d                	addi	sp,sp,-96
    802086ac:	ec86                	sd	ra,88(sp)
    802086ae:	e8a2                	sd	s0,80(sp)
    802086b0:	e4a6                	sd	s1,72(sp)
    802086b2:	e0ca                	sd	s2,64(sp)
    802086b4:	fc4e                	sd	s3,56(sp)
    802086b6:	f852                	sd	s4,48(sp)
    802086b8:	f456                	sd	s5,40(sp)
    802086ba:	f05a                	sd	s6,32(sp)
    802086bc:	ec5e                	sd	s7,24(sp)
    802086be:	e862                	sd	s8,16(sp)
    802086c0:	e466                	sd	s9,8(sp)
    802086c2:	e06a                	sd	s10,0(sp)
    802086c4:	1080                	addi	s0,sp,96
    802086c6:	8a2a                	mv	s4,a0
    802086c8:	8c2e                	mv	s8,a1
    802086ca:	8ab2                	mv	s5,a2
    802086cc:	8936                	mv	s2,a3
    802086ce:	8b3a                	mv	s6,a4
    if (off > entry->file_size || off + n < off ||
    802086d0:	9eb9                	addw	a3,a3,a4
        return 0;
    802086d2:	4501                	li	a0,0
    if (off > entry->file_size || off + n < off ||
    802086d4:	0b26e163          	bltu	a3,s2,80208776 <eread+0xd4>
    802086d8:	100a4703          	lbu	a4,256(s4)
    802086dc:	8b41                	andi	a4,a4,16
    802086de:	ef41                	bnez	a4,80208776 <eread+0xd4>
    if (off + n > entry->file_size) {
    802086e0:	00d7f463          	bgeu	a5,a3,802086e8 <eread+0x46>
        n = entry->file_size - off;
    802086e4:	41278b3b          	subw	s6,a5,s2
    FileSystem *fs = entry->fileSystem;
    802086e8:	118a3b83          	ld	s7,280(s4)
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
    802086ec:	10ca2703          	lw	a4,268(s4)
    802086f0:	100007b7          	lui	a5,0x10000
    802086f4:	17dd                	addi	a5,a5,-9
    802086f6:	06e7ed63          	bltu	a5,a4,80208770 <eread+0xce>
    802086fa:	080b0c63          	beqz	s6,80208792 <eread+0xf0>
    802086fe:	4981                	li	s3,0
    80208700:	8cbe                	mv	s9,a5
    80208702:	a835                	j	8020873e <eread+0x9c>
    80208704:	00048d1b          	sext.w	s10,s1
        if (rw_clus(fs, entry->cur_clus, 0, user_dst, dst, 
    80208708:	886a                	mv	a6,s10
    8020870a:	8756                	mv	a4,s5
    8020870c:	86e2                	mv	a3,s8
    8020870e:	4601                	li	a2,0
    80208710:	10ca2583          	lw	a1,268(s4)
    80208714:	855e                	mv	a0,s7
    80208716:	00000097          	auipc	ra,0x0
    8020871a:	b82080e7          	jalr	-1150(ra) # 80208298 <rw_clus>
    8020871e:	2501                	sext.w	a0,a0
    80208720:	04ad1963          	bne	s10,a0,80208772 <eread+0xd0>
         tot += m, off += m, dst += m) {
    80208724:	013489bb          	addw	s3,s1,s3
    80208728:	0124893b          	addw	s2,s1,s2
    8020872c:	1482                	slli	s1,s1,0x20
    8020872e:	9081                	srli	s1,s1,0x20
    80208730:	9aa6                	add	s5,s5,s1
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
    80208732:	10ca2783          	lw	a5,268(s4)
    80208736:	02fcee63          	bltu	s9,a5,80208772 <eread+0xd0>
    8020873a:	0369fc63          	bgeu	s3,s6,80208772 <eread+0xd0>
        reloc_clus(fs, entry, off, 0);
    8020873e:	4681                	li	a3,0
    80208740:	864a                	mv	a2,s2
    80208742:	85d2                	mv	a1,s4
    80208744:	855e                	mv	a0,s7
    80208746:	00000097          	auipc	ra,0x0
    8020874a:	a2e080e7          	jalr	-1490(ra) # 80208174 <reloc_clus>
        m = fs->superBlock.byts_per_clus - off % fs->superBlock.byts_per_clus;
    8020874e:	050ba683          	lw	a3,80(s7)
    80208752:	02d9773b          	remuw	a4,s2,a3
    80208756:	0007079b          	sext.w	a5,a4
    8020875a:	9e99                	subw	a3,a3,a4
        if (n - tot < m) {
    8020875c:	413b073b          	subw	a4,s6,s3
    80208760:	84ba                	mv	s1,a4
    80208762:	2701                	sext.w	a4,a4
    80208764:	0006861b          	sext.w	a2,a3
    80208768:	f8e67ee3          	bgeu	a2,a4,80208704 <eread+0x62>
    8020876c:	84b6                	mv	s1,a3
    8020876e:	bf59                	j	80208704 <eread+0x62>
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
    80208770:	4981                	li	s3,0
    return tot;
    80208772:	0009851b          	sext.w	a0,s3
}
    80208776:	60e6                	ld	ra,88(sp)
    80208778:	6446                	ld	s0,80(sp)
    8020877a:	64a6                	ld	s1,72(sp)
    8020877c:	6906                	ld	s2,64(sp)
    8020877e:	79e2                	ld	s3,56(sp)
    80208780:	7a42                	ld	s4,48(sp)
    80208782:	7aa2                	ld	s5,40(sp)
    80208784:	7b02                	ld	s6,32(sp)
    80208786:	6be2                	ld	s7,24(sp)
    80208788:	6c42                	ld	s8,16(sp)
    8020878a:	6ca2                	ld	s9,8(sp)
    8020878c:	6d02                	ld	s10,0(sp)
    8020878e:	6125                	addi	sp,sp,96
    80208790:	8082                	ret
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
    80208792:	89da                	mv	s3,s6
    80208794:	bff9                	j	80208772 <eread+0xd0>
        return 0;
    80208796:	4501                	li	a0,0
}
    80208798:	8082                	ret

000000008020879a <ewrite>:
    if (off > entry->file_size || off + n < off ||
    8020879a:	10852783          	lw	a5,264(a0)
    8020879e:	0ed7e663          	bltu	a5,a3,8020888a <ewrite+0xf0>
int ewrite(struct dirent* entry, int user_src, u64 src, uint off, uint n) {
    802087a2:	711d                	addi	sp,sp,-96
    802087a4:	ec86                	sd	ra,88(sp)
    802087a6:	e8a2                	sd	s0,80(sp)
    802087a8:	e4a6                	sd	s1,72(sp)
    802087aa:	e0ca                	sd	s2,64(sp)
    802087ac:	fc4e                	sd	s3,56(sp)
    802087ae:	f852                	sd	s4,48(sp)
    802087b0:	f456                	sd	s5,40(sp)
    802087b2:	f05a                	sd	s6,32(sp)
    802087b4:	ec5e                	sd	s7,24(sp)
    802087b6:	e862                	sd	s8,16(sp)
    802087b8:	e466                	sd	s9,8(sp)
    802087ba:	1080                	addi	s0,sp,96
    802087bc:	8b2a                	mv	s6,a0
    802087be:	8c2e                	mv	s8,a1
    802087c0:	8a32                	mv	s4,a2
    802087c2:	8936                	mv	s2,a3
    802087c4:	8bba                	mv	s7,a4
    if (off > entry->file_size || off + n < off ||
    802087c6:	00e687bb          	addw	a5,a3,a4
    802087ca:	0cd7e263          	bltu	a5,a3,8020888e <ewrite+0xf4>
        (u64)off + n > 0xffffffff || (entry->attribute & ATTR_READ_ONLY)) {
    802087ce:	02069793          	slli	a5,a3,0x20
    802087d2:	9381                	srli	a5,a5,0x20
    802087d4:	1702                	slli	a4,a4,0x20
    802087d6:	9301                	srli	a4,a4,0x20
    802087d8:	97ba                	add	a5,a5,a4
    if (off > entry->file_size || off + n < off ||
    802087da:	577d                	li	a4,-1
    802087dc:	9301                	srli	a4,a4,0x20
    802087de:	0af76a63          	bltu	a4,a5,80208892 <ewrite+0xf8>
        (u64)off + n > 0xffffffff || (entry->attribute & ATTR_READ_ONLY)) {
    802087e2:	10054783          	lbu	a5,256(a0)
    802087e6:	8b85                	andi	a5,a5,1
    802087e8:	e7dd                	bnez	a5,80208896 <ewrite+0xfc>
    FileSystem *fs = entry->fileSystem;
    802087ea:	11853a83          	ld	s5,280(a0)
    if (entry->first_clus ==
    802087ee:	10452783          	lw	a5,260(a0)
    802087f2:	c789                	beqz	a5,802087fc <ewrite+0x62>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    802087f4:	080b8963          	beqz	s7,80208886 <ewrite+0xec>
    802087f8:	4981                	li	s3,0
    802087fa:	a8a1                	j	80208852 <ewrite+0xb8>
        entry->cur_clus = entry->first_clus = alloc_clus(fs, entry->dev);
    802087fc:	12054583          	lbu	a1,288(a0)
    80208800:	8556                	mv	a0,s5
    80208802:	00000097          	auipc	ra,0x0
    80208806:	840080e7          	jalr	-1984(ra) # 80208042 <alloc_clus>
    8020880a:	2501                	sext.w	a0,a0
    8020880c:	10ab2223          	sw	a0,260(s6) # 10000104 <_start-0x701ffefc>
    80208810:	10ab2623          	sw	a0,268(s6)
        entry->clus_cnt = 0;
    80208814:	100b2823          	sw	zero,272(s6)
        entry->dirty = 1;
    80208818:	4785                	li	a5,1
    8020881a:	12fb00a3          	sb	a5,289(s6)
    8020881e:	bfd9                	j	802087f4 <ewrite+0x5a>
    80208820:	00048c9b          	sext.w	s9,s1
        if (rw_clus(fs, entry->cur_clus, 1, user_src, src, 
    80208824:	8866                	mv	a6,s9
    80208826:	8752                	mv	a4,s4
    80208828:	86e2                	mv	a3,s8
    8020882a:	4605                	li	a2,1
    8020882c:	10cb2583          	lw	a1,268(s6)
    80208830:	8556                	mv	a0,s5
    80208832:	00000097          	auipc	ra,0x0
    80208836:	a66080e7          	jalr	-1434(ra) # 80208298 <rw_clus>
    8020883a:	2501                	sext.w	a0,a0
    8020883c:	04ac9f63          	bne	s9,a0,8020889a <ewrite+0x100>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    80208840:	013489bb          	addw	s3,s1,s3
    80208844:	0124893b          	addw	s2,s1,s2
    80208848:	1482                	slli	s1,s1,0x20
    8020884a:	9081                	srli	s1,s1,0x20
    8020884c:	9a26                	add	s4,s4,s1
    8020884e:	0579f663          	bgeu	s3,s7,8020889a <ewrite+0x100>
        reloc_clus(fs, entry, off, 1);
    80208852:	4685                	li	a3,1
    80208854:	864a                	mv	a2,s2
    80208856:	85da                	mv	a1,s6
    80208858:	8556                	mv	a0,s5
    8020885a:	00000097          	auipc	ra,0x0
    8020885e:	91a080e7          	jalr	-1766(ra) # 80208174 <reloc_clus>
        m = fs->superBlock.byts_per_clus - off % fs->superBlock.byts_per_clus;
    80208862:	050aa803          	lw	a6,80(s5)
    80208866:	0309773b          	remuw	a4,s2,a6
    8020886a:	0007079b          	sext.w	a5,a4
    8020886e:	40e8083b          	subw	a6,a6,a4
        if (n - tot < m) {
    80208872:	413b873b          	subw	a4,s7,s3
    80208876:	84ba                	mv	s1,a4
    80208878:	2701                	sext.w	a4,a4
    8020887a:	0008069b          	sext.w	a3,a6
    8020887e:	fae6f1e3          	bgeu	a3,a4,80208820 <ewrite+0x86>
    80208882:	84c2                	mv	s1,a6
    80208884:	bf71                	j	80208820 <ewrite+0x86>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    80208886:	89de                	mv	s3,s7
    80208888:	a015                	j	802088ac <ewrite+0x112>
        return -1;
    8020888a:	557d                	li	a0,-1
}
    8020888c:	8082                	ret
        return -1;
    8020888e:	557d                	li	a0,-1
    80208890:	a005                	j	802088b0 <ewrite+0x116>
    80208892:	557d                	li	a0,-1
    80208894:	a831                	j	802088b0 <ewrite+0x116>
    80208896:	557d                	li	a0,-1
    80208898:	a821                	j	802088b0 <ewrite+0x116>
        if (off > entry->file_size) {
    8020889a:	108b2783          	lw	a5,264(s6)
    8020889e:	0127f763          	bgeu	a5,s2,802088ac <ewrite+0x112>
            entry->file_size = off;
    802088a2:	112b2423          	sw	s2,264(s6)
            entry->dirty = 1;
    802088a6:	4785                	li	a5,1
    802088a8:	12fb00a3          	sb	a5,289(s6)
    return tot;
    802088ac:	0009851b          	sext.w	a0,s3
}
    802088b0:	60e6                	ld	ra,88(sp)
    802088b2:	6446                	ld	s0,80(sp)
    802088b4:	64a6                	ld	s1,72(sp)
    802088b6:	6906                	ld	s2,64(sp)
    802088b8:	79e2                	ld	s3,56(sp)
    802088ba:	7a42                	ld	s4,48(sp)
    802088bc:	7aa2                	ld	s5,40(sp)
    802088be:	7b02                	ld	s6,32(sp)
    802088c0:	6be2                	ld	s7,24(sp)
    802088c2:	6c42                	ld	s8,16(sp)
    802088c4:	6ca2                	ld	s9,8(sp)
    802088c6:	6125                	addi	sp,sp,96
    802088c8:	8082                	ret

00000000802088ca <formatname>:
char* formatname(char* name) {
    802088ca:	7179                	addi	sp,sp,-48
    802088cc:	f406                	sd	ra,40(sp)
    802088ce:	f022                	sd	s0,32(sp)
    802088d0:	ec26                	sd	s1,24(sp)
    802088d2:	e84a                	sd	s2,16(sp)
    802088d4:	e44e                	sd	s3,8(sp)
    802088d6:	e052                	sd	s4,0(sp)
    802088d8:	1800                	addi	s0,sp,48
    802088da:	84aa                	mv	s1,a0
    while (*name == ' ' || *name == '.') {
    802088dc:	02000793          	li	a5,32
    802088e0:	02e00713          	li	a4,46
    802088e4:	a011                	j	802088e8 <formatname+0x1e>
        name++;
    802088e6:	0485                	addi	s1,s1,1
    while (*name == ' ' || *name == '.') {
    802088e8:	0004c583          	lbu	a1,0(s1)
    802088ec:	fef58de3          	beq	a1,a5,802088e6 <formatname+0x1c>
    802088f0:	fee58be3          	beq	a1,a4,802088e6 <formatname+0x1c>
    for (p = name; *p; p++) {
    802088f4:	c1b9                	beqz	a1,8020893a <formatname+0x70>
    802088f6:	8926                	mv	s2,s1
        if (c < 0x20 || strchr(illegal, c)) {
    802088f8:	49fd                	li	s3,31
    802088fa:	00007a17          	auipc	s4,0x7
    802088fe:	f46a0a13          	addi	s4,s4,-186 # 8020f840 <illegal.1814>
    80208902:	02b9fe63          	bgeu	s3,a1,8020893e <formatname+0x74>
    80208906:	8552                	mv	a0,s4
    80208908:	ffffe097          	auipc	ra,0xffffe
    8020890c:	cc0080e7          	jalr	-832(ra) # 802065c8 <strchr>
    80208910:	e121                	bnez	a0,80208950 <formatname+0x86>
    for (p = name; *p; p++) {
    80208912:	0905                	addi	s2,s2,1
    80208914:	00094583          	lbu	a1,0(s2)
    80208918:	f5ed                	bnez	a1,80208902 <formatname+0x38>
        if (*p != ' ') {
    8020891a:	02000693          	li	a3,32
    8020891e:	874a                	mv	a4,s2
    while (p-- > name) {
    80208920:	0124fb63          	bgeu	s1,s2,80208936 <formatname+0x6c>
        if (*p != ' ') {
    80208924:	197d                	addi	s2,s2,-1
    80208926:	00094783          	lbu	a5,0(s2)
    8020892a:	fed78ae3          	beq	a5,a3,8020891e <formatname+0x54>
            p[1] = '\0';
    8020892e:	00070023          	sb	zero,0(a4)
            break;
    80208932:	8526                	mv	a0,s1
    80208934:	a031                	j	80208940 <formatname+0x76>
    80208936:	8526                	mv	a0,s1
    80208938:	a021                	j	80208940 <formatname+0x76>
    for (p = name; *p; p++) {
    8020893a:	8526                	mv	a0,s1
    8020893c:	a011                	j	80208940 <formatname+0x76>
            return 0;
    8020893e:	4501                	li	a0,0
}
    80208940:	70a2                	ld	ra,40(sp)
    80208942:	7402                	ld	s0,32(sp)
    80208944:	64e2                	ld	s1,24(sp)
    80208946:	6942                	ld	s2,16(sp)
    80208948:	69a2                	ld	s3,8(sp)
    8020894a:	6a02                	ld	s4,0(sp)
    8020894c:	6145                	addi	sp,sp,48
    8020894e:	8082                	ret
            return 0;
    80208950:	4501                	li	a0,0
    80208952:	b7fd                	j	80208940 <formatname+0x76>

0000000080208954 <cal_checksum>:
uint8 cal_checksum(uchar* shortname) {
    80208954:	1141                	addi	sp,sp,-16
    80208956:	e422                	sd	s0,8(sp)
    80208958:	0800                	addi	s0,sp,16
    8020895a:	87aa                	mv	a5,a0
    for (int i = CHAR_SHORT_NAME; i != 0; i--) {
    8020895c:	00b50613          	addi	a2,a0,11
    uint8 sum = 0;
    80208960:	4501                	li	a0,0
        sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1) + *shortname++;
    80208962:	0075171b          	slliw	a4,a0,0x7
    80208966:	0785                	addi	a5,a5,1
    80208968:	0015551b          	srliw	a0,a0,0x1
    8020896c:	fff7c683          	lbu	a3,-1(a5) # fffffff <_start-0x70200001>
    80208970:	9d35                	addw	a0,a0,a3
    80208972:	953a                	add	a0,a0,a4
    80208974:	0ff57513          	andi	a0,a0,255
    for (int i = CHAR_SHORT_NAME; i != 0; i--) {
    80208978:	fef615e3          	bne	a2,a5,80208962 <cal_checksum+0xe>
}
    8020897c:	6422                	ld	s0,8(sp)
    8020897e:	0141                	addi	sp,sp,16
    80208980:	8082                	ret

0000000080208982 <emake>:
void emake(struct dirent* dp, struct dirent* ep, uint off) {
    80208982:	7171                	addi	sp,sp,-176
    80208984:	f506                	sd	ra,168(sp)
    80208986:	f122                	sd	s0,160(sp)
    80208988:	ed26                	sd	s1,152(sp)
    8020898a:	e94a                	sd	s2,144(sp)
    8020898c:	e54e                	sd	s3,136(sp)
    8020898e:	e152                	sd	s4,128(sp)
    80208990:	fcd6                	sd	s5,120(sp)
    80208992:	f8da                	sd	s6,112(sp)
    80208994:	f4de                	sd	s7,104(sp)
    80208996:	f0e2                	sd	s8,96(sp)
    80208998:	ece6                	sd	s9,88(sp)
    8020899a:	e8ea                	sd	s10,80(sp)
    8020899c:	e4ee                	sd	s11,72(sp)
    8020899e:	1900                	addi	s0,sp,176
    if (!(dp->attribute & ATTR_DIRECTORY))
    802089a0:	10054783          	lbu	a5,256(a0)
    802089a4:	8bc1                	andi	a5,a5,16
    802089a6:	cff9                	beqz	a5,80208a84 <emake+0x102>
    802089a8:	8a2a                	mv	s4,a0
    802089aa:	8b2e                	mv	s6,a1
    802089ac:	8cb2                	mv	s9,a2
    if (off % sizeof(union dentry))
    802089ae:	01f67793          	andi	a5,a2,31
    802089b2:	ebfd                	bnez	a5,80208aa8 <emake+0x126>
    assert(dp->fileSystem == ep->fileSystem);
    802089b4:	11853683          	ld	a3,280(a0)
    802089b8:	1185b783          	ld	a5,280(a1)
    802089bc:	8e9d                	sub	a3,a3,a5
    802089be:	0016b693          	seqz	a3,a3
    802089c2:	00006617          	auipc	a2,0x6
    802089c6:	b8e60613          	addi	a2,a2,-1138 # 8020e550 <__func__.1857>
    802089ca:	22300593          	li	a1,547
    802089ce:	00005517          	auipc	a0,0x5
    802089d2:	7fa50513          	addi	a0,a0,2042 # 8020e1c8 <__func__.1368+0x20>
    802089d6:	ffff8097          	auipc	ra,0xffff8
    802089da:	1f6080e7          	jalr	502(ra) # 80200bcc <_assert_>
    FileSystem *fs = ep->fileSystem;
    802089de:	118b3b83          	ld	s7,280(s6)
    memset(&de, 0, sizeof(de));
    802089e2:	02000613          	li	a2,32
    802089e6:	4581                	li	a1,0
    802089e8:	f7040513          	addi	a0,s0,-144
    802089ec:	ffffe097          	auipc	ra,0xffffe
    802089f0:	a2e080e7          	jalr	-1490(ra) # 8020641a <memset>
    if (off <= 32) {
    802089f4:	02000793          	li	a5,32
    802089f8:	0f97e663          	bltu	a5,s9,80208ae4 <emake+0x162>
        if (off == 0) {
    802089fc:	0c0c9863          	bnez	s9,80208acc <emake+0x14a>
            strncpy(de.sne.name, ".          ", sizeof(de.sne.name));
    80208a00:	462d                	li	a2,11
    80208a02:	00006597          	auipc	a1,0x6
    80208a06:	83e58593          	addi	a1,a1,-1986 # 8020e240 <__func__.1368+0x98>
    80208a0a:	f7040513          	addi	a0,s0,-144
    80208a0e:	ffffe097          	auipc	ra,0xffffe
    80208a12:	b20080e7          	jalr	-1248(ra) # 8020652e <strncpy>
        de.sne.attr = ATTR_DIRECTORY;
    80208a16:	47c1                	li	a5,16
    80208a18:	f6f40da3          	sb	a5,-133(s0)
            (uint16)(ep->first_clus >> 16);  // first clus high 16 bits
    80208a1c:	104b2783          	lw	a5,260(s6)
    80208a20:	0107d71b          	srliw	a4,a5,0x10
    80208a24:	f8e41223          	sh	a4,-124(s0)
        de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff);  // low 16 bits
    80208a28:	f8f41523          	sh	a5,-118(s0)
        de.sne.file_size = 0;  // filesize is updated in eupdate()
    80208a2c:	f8042623          	sw	zero,-116(s0)
        de.sne._nt_res = ep->_nt_res;
    80208a30:	114b4783          	lbu	a5,276(s6)
    80208a34:	f6f40e23          	sb	a5,-132(s0)
        off = reloc_clus(fs, dp, off, 1);
    80208a38:	4685                	li	a3,1
    80208a3a:	8666                	mv	a2,s9
    80208a3c:	85d2                	mv	a1,s4
    80208a3e:	855e                	mv	a0,s7
    80208a40:	fffff097          	auipc	ra,0xfffff
    80208a44:	734080e7          	jalr	1844(ra) # 80208174 <reloc_clus>
        rw_clus(fs, dp->cur_clus, 1, 0, (u64)&de, off, sizeof(de));
    80208a48:	02000813          	li	a6,32
    80208a4c:	0005079b          	sext.w	a5,a0
    80208a50:	f7040713          	addi	a4,s0,-144
    80208a54:	4681                	li	a3,0
    80208a56:	4605                	li	a2,1
    80208a58:	10ca2583          	lw	a1,268(s4)
    80208a5c:	855e                	mv	a0,s7
    80208a5e:	00000097          	auipc	ra,0x0
    80208a62:	83a080e7          	jalr	-1990(ra) # 80208298 <rw_clus>
}
    80208a66:	70aa                	ld	ra,168(sp)
    80208a68:	740a                	ld	s0,160(sp)
    80208a6a:	64ea                	ld	s1,152(sp)
    80208a6c:	694a                	ld	s2,144(sp)
    80208a6e:	69aa                	ld	s3,136(sp)
    80208a70:	6a0a                	ld	s4,128(sp)
    80208a72:	7ae6                	ld	s5,120(sp)
    80208a74:	7b46                	ld	s6,112(sp)
    80208a76:	7ba6                	ld	s7,104(sp)
    80208a78:	7c06                	ld	s8,96(sp)
    80208a7a:	6ce6                	ld	s9,88(sp)
    80208a7c:	6d46                	ld	s10,80(sp)
    80208a7e:	6da6                	ld	s11,72(sp)
    80208a80:	614d                	addi	sp,sp,176
    80208a82:	8082                	ret
        panic("emake: not dir");
    80208a84:	00005697          	auipc	a3,0x5
    80208a88:	79468693          	addi	a3,a3,1940 # 8020e218 <__func__.1368+0x70>
    80208a8c:	00006617          	auipc	a2,0x6
    80208a90:	ac460613          	addi	a2,a2,-1340 # 8020e550 <__func__.1857>
    80208a94:	21f00593          	li	a1,543
    80208a98:	00005517          	auipc	a0,0x5
    80208a9c:	73050513          	addi	a0,a0,1840 # 8020e1c8 <__func__.1368+0x20>
    80208aa0:	ffff8097          	auipc	ra,0xffff8
    80208aa4:	0b6080e7          	jalr	182(ra) # 80200b56 <_panic_>
        panic("emake: not aligned");
    80208aa8:	00005697          	auipc	a3,0x5
    80208aac:	78068693          	addi	a3,a3,1920 # 8020e228 <__func__.1368+0x80>
    80208ab0:	00006617          	auipc	a2,0x6
    80208ab4:	aa060613          	addi	a2,a2,-1376 # 8020e550 <__func__.1857>
    80208ab8:	22100593          	li	a1,545
    80208abc:	00005517          	auipc	a0,0x5
    80208ac0:	70c50513          	addi	a0,a0,1804 # 8020e1c8 <__func__.1368+0x20>
    80208ac4:	ffff8097          	auipc	ra,0xffff8
    80208ac8:	092080e7          	jalr	146(ra) # 80200b56 <_panic_>
            strncpy(de.sne.name, "..         ", sizeof(de.sne.name));
    80208acc:	462d                	li	a2,11
    80208ace:	00005597          	auipc	a1,0x5
    80208ad2:	78258593          	addi	a1,a1,1922 # 8020e250 <__func__.1368+0xa8>
    80208ad6:	f7040513          	addi	a0,s0,-144
    80208ada:	ffffe097          	auipc	ra,0xffffe
    80208ade:	a54080e7          	jalr	-1452(ra) # 8020652e <strncpy>
    80208ae2:	bf15                	j	80208a16 <emake+0x94>
        int entcnt = (strlen(ep->filename) + CHAR_LONG_NAME - 1) /
    80208ae4:	895a                	mv	s2,s6
    80208ae6:	855a                	mv	a0,s6
    80208ae8:	ffffe097          	auipc	ra,0xffffe
    80208aec:	ab6080e7          	jalr	-1354(ra) # 8020659e <strlen>
    80208af0:	f4a43c23          	sd	a0,-168(s0)
    80208af4:	00c5071b          	addiw	a4,a0,12
    80208af8:	47b5                	li	a5,13
    80208afa:	02f747bb          	divw	a5,a4,a5
    80208afe:	f4f42a23          	sw	a5,-172(s0)
    80208b02:	00078d9b          	sext.w	s11,a5
        memset(shortname, 0, sizeof(shortname));
    80208b06:	4631                	li	a2,12
    80208b08:	4581                	li	a1,0
    80208b0a:	f6040513          	addi	a0,s0,-160
    80208b0e:	ffffe097          	auipc	ra,0xffffe
    80208b12:	90c080e7          	jalr	-1780(ra) # 8020641a <memset>
    for (int j = strlen(name) - 1; j >= 0; j--) {
    80208b16:	855a                	mv	a0,s6
    80208b18:	ffffe097          	auipc	ra,0xffffe
    80208b1c:	a86080e7          	jalr	-1402(ra) # 8020659e <strlen>
    80208b20:	fff5079b          	addiw	a5,a0,-1
    80208b24:	0207ca63          	bltz	a5,80208b58 <emake+0x1d6>
    80208b28:	97da                	add	a5,a5,s6
    80208b2a:	ffeb0693          	addi	a3,s6,-2
    80208b2e:	96aa                	add	a3,a3,a0
    80208b30:	fff5071b          	addiw	a4,a0,-1
    80208b34:	1702                	slli	a4,a4,0x20
    80208b36:	9301                	srli	a4,a4,0x20
    80208b38:	8e99                	sub	a3,a3,a4
        if (name[j] == '.') {
    80208b3a:	02e00613          	li	a2,46
    80208b3e:	89be                	mv	s3,a5
    80208b40:	0007c703          	lbu	a4,0(a5)
    80208b44:	00c70663          	beq	a4,a2,80208b50 <emake+0x1ce>
    for (int j = strlen(name) - 1; j >= 0; j--) {
    80208b48:	17fd                	addi	a5,a5,-1
    80208b4a:	fed79ae3          	bne	a5,a3,80208b3e <emake+0x1bc>
    char c, *p = name;
    80208b4e:	89da                	mv	s3,s6
        shortname[i++] = c;
    80208b50:	4481                	li	s1,0
        if (i == 8 && p) {
    80208b52:	4c21                	li	s8,8
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    80208b54:	4d29                	li	s10,10
    80208b56:	a87d                	j	80208c14 <emake+0x292>
    char c, *p = name;
    80208b58:	89da                	mv	s3,s6
    80208b5a:	bfdd                	j	80208b50 <emake+0x1ce>
        if (i == 8 && p) {
    80208b5c:	22098763          	beqz	s3,80208d8a <emake+0x408>
            if (p + 1 < name) {
    80208b60:	0985                	addi	s3,s3,1
    80208b62:	0959f063          	bgeu	s3,s5,80208be2 <emake+0x260>
    80208b66:	f6040793          	addi	a5,s0,-160
    80208b6a:	97a6                	add	a5,a5,s1
        shortname[i++] = ' ';
    80208b6c:	02000693          	li	a3,32
    while (i < CHAR_SHORT_NAME) {
    80208b70:	4729                	li	a4,10
        shortname[i++] = ' ';
    80208b72:	2485                	addiw	s1,s1,1
    80208b74:	00d78023          	sb	a3,0(a5)
    while (i < CHAR_SHORT_NAME) {
    80208b78:	0785                	addi	a5,a5,1
    80208b7a:	fe975ce3          	bge	a4,s1,80208b72 <emake+0x1f0>
        de.lne.checksum = cal_checksum((uchar*)shortname);
    80208b7e:	f6040513          	addi	a0,s0,-160
    80208b82:	00000097          	auipc	ra,0x0
    80208b86:	dd2080e7          	jalr	-558(ra) # 80208954 <cal_checksum>
    80208b8a:	f6a40ea3          	sb	a0,-131(s0)
        de.lne.attr = ATTR_LONG_NAME;
    80208b8e:	47bd                	li	a5,15
    80208b90:	f6f40da3          	sb	a5,-133(s0)
        for (int i = entcnt; i > 0; i--) {
    80208b94:	f5843783          	ld	a5,-168(s0)
    80208b98:	0ef05a63          	blez	a5,80208c8c <emake+0x30a>
    80208b9c:	f5442783          	lw	a5,-172(s0)
    80208ba0:	37fd                	addiw	a5,a5,-1
    80208ba2:	f4f42a23          	sw	a5,-172(s0)
    80208ba6:	00179a9b          	slliw	s5,a5,0x1
    80208baa:	00fa8abb          	addw	s5,s5,a5
    80208bae:	002a9a9b          	slliw	s5,s5,0x2
    80208bb2:	00fa8abb          	addw	s5,s5,a5
    80208bb6:	9ada                	add	s5,s5,s6
    80208bb8:	89ee                	mv	s3,s11
    80208bba:	8c66                	mv	s8,s9
            int end = 0;
    80208bbc:	4d01                	li	s10,0
                    *w++ = 0xff;  // on k210, unaligned reading is illegal
    80208bbe:	597d                	li	s2,-1
                switch (j) {
    80208bc0:	44ad                	li	s1,11
    80208bc2:	a26d                	j	80208d6c <emake+0x3ea>
            if (name > p) {  // last '.'
    80208bc4:	0559f563          	bgeu	s3,s5,80208c0e <emake+0x28c>
                memset(shortname + i, ' ', 8 - i);
    80208bc8:	4621                	li	a2,8
    80208bca:	9e05                	subw	a2,a2,s1
    80208bcc:	02000593          	li	a1,32
    80208bd0:	f6040793          	addi	a5,s0,-160
    80208bd4:	00978533          	add	a0,a5,s1
    80208bd8:	ffffe097          	auipc	ra,0xffffe
    80208bdc:	842080e7          	jalr	-1982(ra) # 8020641a <memset>
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    80208be0:	89d6                	mv	s3,s5
        shortname[i++] = c;
    80208be2:	8ace                	mv	s5,s3
    80208be4:	84e2                	mv	s1,s8
    80208be6:	4981                	li	s3,0
    80208be8:	a02d                	j	80208c12 <emake+0x290>
            if (strchr(illegal, c) != NULL) {
    80208bea:	85ca                	mv	a1,s2
    80208bec:	001d8517          	auipc	a0,0x1d8
    80208bf0:	41c50513          	addi	a0,a0,1052 # 803e1008 <illegal.1830>
    80208bf4:	ffffe097          	auipc	ra,0xffffe
    80208bf8:	9d4080e7          	jalr	-1580(ra) # 802065c8 <strchr>
    80208bfc:	c119                	beqz	a0,80208c02 <emake+0x280>
                c = '_';
    80208bfe:	05f00913          	li	s2,95
        shortname[i++] = c;
    80208c02:	f9040793          	addi	a5,s0,-112
    80208c06:	97a6                	add	a5,a5,s1
    80208c08:	fd278823          	sb	s2,-48(a5)
    80208c0c:	2485                	addiw	s1,s1,1
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    80208c0e:	f69d48e3          	blt	s10,s1,80208b7e <emake+0x1fc>
        shortname[i++] = c;
    80208c12:	8956                	mv	s2,s5
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    80208c14:	00190a93          	addi	s5,s2,1
    80208c18:	00094903          	lbu	s2,0(s2)
    80208c1c:	02090763          	beqz	s2,80208c4a <emake+0x2c8>
        if (i == 8 && p) {
    80208c20:	f3848ee3          	beq	s1,s8,80208b5c <emake+0x1da>
        if (c == ' ') {
    80208c24:	02000793          	li	a5,32
    80208c28:	fef903e3          	beq	s2,a5,80208c0e <emake+0x28c>
        if (c == '.') {
    80208c2c:	02e00793          	li	a5,46
    80208c30:	f8f90ae3          	beq	s2,a5,80208bc4 <emake+0x242>
        if (c >= 'a' && c <= 'z') {
    80208c34:	f9f9079b          	addiw	a5,s2,-97
    80208c38:	0ff7f793          	andi	a5,a5,255
    80208c3c:	4765                	li	a4,25
    80208c3e:	faf766e3          	bltu	a4,a5,80208bea <emake+0x268>
            c += 'A' - 'a';
    80208c42:	3901                	addiw	s2,s2,-32
    80208c44:	0ff97913          	andi	s2,s2,255
    80208c48:	bf6d                	j	80208c02 <emake+0x280>
    while (i < CHAR_SHORT_NAME) {
    80208c4a:	47a9                	li	a5,10
    80208c4c:	f097dde3          	bge	a5,s1,80208b66 <emake+0x1e4>
    80208c50:	b73d                	j	80208b7e <emake+0x1fc>
                de.lne.order |= LAST_LONG_ENTRY;
    80208c52:	0407e793          	ori	a5,a5,64
    80208c56:	f6f40823          	sb	a5,-144(s0)
    80208c5a:	aa39                	j	80208d78 <emake+0x3f6>
                    if ((*w++ = *p++) == 0) {
    80208c5c:	0005c683          	lbu	a3,0(a1)
    80208c60:	00d78023          	sb	a3,0(a5)
                        end = 1;
    80208c64:	0016b693          	seqz	a3,a3
                    *w++ = 0;
    80208c68:	000780a3          	sb	zero,1(a5)
    80208c6c:	0789                	addi	a5,a5,2
                    if ((*w++ = *p++) == 0) {
    80208c6e:	0585                	addi	a1,a1,1
    80208c70:	a855                	j	80208d24 <emake+0x3a2>
    80208c72:	020c8c9b          	addiw	s9,s9,32
    80208c76:	4781                	li	a5,0
    80208c78:	f5843703          	ld	a4,-168(s0)
    80208c7c:	00e05663          	blez	a4,80208c88 <emake+0x306>
    80208c80:	f5442783          	lw	a5,-172(s0)
    80208c84:	0057979b          	slliw	a5,a5,0x5
    80208c88:	01978cbb          	addw	s9,a5,s9
        memset(&de, 0, sizeof(de));
    80208c8c:	02000613          	li	a2,32
    80208c90:	4581                	li	a1,0
    80208c92:	f7040513          	addi	a0,s0,-144
    80208c96:	ffffd097          	auipc	ra,0xffffd
    80208c9a:	784080e7          	jalr	1924(ra) # 8020641a <memset>
        strncpy(de.sne.name, shortname, sizeof(de.sne.name));
    80208c9e:	462d                	li	a2,11
    80208ca0:	f6040593          	addi	a1,s0,-160
    80208ca4:	f7040513          	addi	a0,s0,-144
    80208ca8:	ffffe097          	auipc	ra,0xffffe
    80208cac:	886080e7          	jalr	-1914(ra) # 8020652e <strncpy>
        de.sne.attr = ep->attribute;
    80208cb0:	100b4783          	lbu	a5,256(s6)
    80208cb4:	f6f40da3          	sb	a5,-133(s0)
            (uint16)(ep->first_clus >> 16);  // first clus high 16 bits
    80208cb8:	104b2783          	lw	a5,260(s6)
    80208cbc:	0107d71b          	srliw	a4,a5,0x10
    80208cc0:	f8e41223          	sh	a4,-124(s0)
        de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff);  // low 16 bits
    80208cc4:	f8f41523          	sh	a5,-118(s0)
        de.sne.file_size = ep->file_size;  // filesize is updated in eupdate()
    80208cc8:	108b2783          	lw	a5,264(s6)
    80208ccc:	f8f42623          	sw	a5,-116(s0)
        de.sne._nt_res = ep->_nt_res;
    80208cd0:	114b4783          	lbu	a5,276(s6)
    80208cd4:	f6f40e23          	sb	a5,-132(s0)
        off = reloc_clus(fs, dp, off, 1);
    80208cd8:	4685                	li	a3,1
    80208cda:	8666                	mv	a2,s9
    80208cdc:	85d2                	mv	a1,s4
    80208cde:	855e                	mv	a0,s7
    80208ce0:	fffff097          	auipc	ra,0xfffff
    80208ce4:	494080e7          	jalr	1172(ra) # 80208174 <reloc_clus>
        rw_clus(fs, dp->cur_clus, 1, 0, (u64)&de, off, sizeof(de));
    80208ce8:	02000813          	li	a6,32
    80208cec:	0005079b          	sext.w	a5,a0
    80208cf0:	f7040713          	addi	a4,s0,-144
    80208cf4:	4681                	li	a3,0
    80208cf6:	4605                	li	a2,1
    80208cf8:	10ca2583          	lw	a1,268(s4)
    80208cfc:	855e                	mv	a0,s7
    80208cfe:	fffff097          	auipc	ra,0xfffff
    80208d02:	59a080e7          	jalr	1434(ra) # 80208298 <rw_clus>
}
    80208d06:	b385                	j	80208a66 <emake+0xe4>
                        w = (uint8*)de.lne.name2;
    80208d08:	f7e40793          	addi	a5,s0,-130
    80208d0c:	a019                	j	80208d12 <emake+0x390>
                switch (j) {
    80208d0e:	f8c40793          	addi	a5,s0,-116
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    80208d12:	2705                	addiw	a4,a4,1
    80208d14:	fff7061b          	addiw	a2,a4,-1
                if (end) {
    80208d18:	d2b1                	beqz	a3,80208c5c <emake+0x2da>
                    *w++ = 0xff;  // on k210, unaligned reading is illegal
    80208d1a:	01278023          	sb	s2,0(a5)
                    *w++ = 0xff;
    80208d1e:	012780a3          	sb	s2,1(a5)
    80208d22:	0789                	addi	a5,a5,2
                switch (j) {
    80208d24:	fea602e3          	beq	a2,a0,80208d08 <emake+0x386>
    80208d28:	fe9603e3          	beq	a2,s1,80208d0e <emake+0x38c>
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    80208d2c:	0007061b          	sext.w	a2,a4
    80208d30:	fec851e3          	bge	a6,a2,80208d12 <emake+0x390>
            uint off2 = reloc_clus(fs, dp, off, 1);
    80208d34:	4685                	li	a3,1
    80208d36:	8662                	mv	a2,s8
    80208d38:	85d2                	mv	a1,s4
    80208d3a:	855e                	mv	a0,s7
    80208d3c:	fffff097          	auipc	ra,0xfffff
    80208d40:	438080e7          	jalr	1080(ra) # 80208174 <reloc_clus>
            rw_clus(fs, dp->cur_clus, 1, 0, (u64)&de, off2, sizeof(de));
    80208d44:	02000813          	li	a6,32
    80208d48:	0005079b          	sext.w	a5,a0
    80208d4c:	f7040713          	addi	a4,s0,-144
    80208d50:	86ea                	mv	a3,s10
    80208d52:	4605                	li	a2,1
    80208d54:	10ca2583          	lw	a1,268(s4)
    80208d58:	855e                	mv	a0,s7
    80208d5a:	fffff097          	auipc	ra,0xfffff
    80208d5e:	53e080e7          	jalr	1342(ra) # 80208298 <rw_clus>
            off += sizeof(de);
    80208d62:	020c0c1b          	addiw	s8,s8,32
        for (int i = entcnt; i > 0; i--) {
    80208d66:	1acd                	addi	s5,s5,-13
    80208d68:	f13055e3          	blez	s3,80208c72 <emake+0x2f0>
            if ((de.lne.order = i) == entcnt) {
    80208d6c:	0ff9f793          	andi	a5,s3,255
    80208d70:	eefd81e3          	beq	s11,a5,80208c52 <emake+0x2d0>
    80208d74:	f6f40823          	sb	a5,-144(s0)
            char* p = ep->filename + (i - 1) * CHAR_LONG_NAME;
    80208d78:	39fd                	addiw	s3,s3,-1
    80208d7a:	85d6                	mv	a1,s5
    80208d7c:	4709                	li	a4,2
            int end = 0;
    80208d7e:	86ea                	mv	a3,s10
            uint8* w = (uint8*)de.lne.name1;
    80208d80:	f7140793          	addi	a5,s0,-143
                switch (j) {
    80208d84:	4515                	li	a0,5
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    80208d86:	4835                	li	a6,13
    80208d88:	b771                	j	80208d14 <emake+0x392>
        if (c == ' ') {
    80208d8a:	02000793          	li	a5,32
    80208d8e:	e8f91fe3          	bne	s2,a5,80208c2c <emake+0x2aa>
    80208d92:	b541                	j	80208c12 <emake+0x290>

0000000080208d94 <edup>:
struct dirent* edup(struct dirent* entry) {
    80208d94:	1101                	addi	sp,sp,-32
    80208d96:	ec06                	sd	ra,24(sp)
    80208d98:	e822                	sd	s0,16(sp)
    80208d9a:	e426                	sd	s1,8(sp)
    80208d9c:	1000                	addi	s0,sp,32
    80208d9e:	84aa                	mv	s1,a0
    if (entry != 0) {
    80208da0:	c515                	beqz	a0,80208dcc <edup+0x38>
        acquireLock(&direntCache.lock);
    80208da2:	00415517          	auipc	a0,0x415
    80208da6:	a2e50513          	addi	a0,a0,-1490 # 8061d7d0 <direntCache>
    80208daa:	ffffd097          	auipc	ra,0xffffd
    80208dae:	3ba080e7          	jalr	954(ra) # 80206164 <acquireLock>
        entry->ref++;
    80208db2:	1304a783          	lw	a5,304(s1)
    80208db6:	2785                	addiw	a5,a5,1
    80208db8:	12f4a823          	sw	a5,304(s1)
        releaseLock(&direntCache.lock);
    80208dbc:	00415517          	auipc	a0,0x415
    80208dc0:	a1450513          	addi	a0,a0,-1516 # 8061d7d0 <direntCache>
    80208dc4:	ffffd097          	auipc	ra,0xffffd
    80208dc8:	41c080e7          	jalr	1052(ra) # 802061e0 <releaseLock>
}
    80208dcc:	8526                	mv	a0,s1
    80208dce:	60e2                	ld	ra,24(sp)
    80208dd0:	6442                	ld	s0,16(sp)
    80208dd2:	64a2                	ld	s1,8(sp)
    80208dd4:	6105                	addi	sp,sp,32
    80208dd6:	8082                	ret

0000000080208dd8 <eupdate>:
    if (!entry->dirty || entry->valid != 1) {
    80208dd8:	12154783          	lbu	a5,289(a0)
    80208ddc:	cbfd                	beqz	a5,80208ed2 <eupdate+0xfa>
void eupdate(struct dirent* entry) {
    80208dde:	711d                	addi	sp,sp,-96
    80208de0:	ec86                	sd	ra,88(sp)
    80208de2:	e8a2                	sd	s0,80(sp)
    80208de4:	e4a6                	sd	s1,72(sp)
    80208de6:	e0ca                	sd	s2,64(sp)
    80208de8:	fc4e                	sd	s3,56(sp)
    80208dea:	1080                	addi	s0,sp,96
    80208dec:	84aa                	mv	s1,a0
    if (!entry->dirty || entry->valid != 1) {
    80208dee:	12251703          	lh	a4,290(a0)
    80208df2:	4785                	li	a5,1
    80208df4:	00f70963          	beq	a4,a5,80208e06 <eupdate+0x2e>
}
    80208df8:	60e6                	ld	ra,88(sp)
    80208dfa:	6446                	ld	s0,80(sp)
    80208dfc:	64a6                	ld	s1,72(sp)
    80208dfe:	6906                	ld	s2,64(sp)
    80208e00:	79e2                	ld	s3,56(sp)
    80208e02:	6125                	addi	sp,sp,96
    80208e04:	8082                	ret
    uint entcnt = 0;
    80208e06:	fc042623          	sw	zero,-52(s0)
    FileSystem *fs = entry->fileSystem;
    80208e0a:	11853903          	ld	s2,280(a0)
    uint32 off = reloc_clus(fs, entry->parent, entry->off, 0);
    80208e0e:	4681                	li	a3,0
    80208e10:	13452603          	lw	a2,308(a0)
    80208e14:	13853583          	ld	a1,312(a0)
    80208e18:	854a                	mv	a0,s2
    80208e1a:	fffff097          	auipc	ra,0xfffff
    80208e1e:	35a080e7          	jalr	858(ra) # 80208174 <reloc_clus>
    rw_clus(fs, entry->parent->cur_clus, 0, 0, (u64)&entcnt, off, 1);
    80208e22:	1384b583          	ld	a1,312(s1)
    80208e26:	4805                	li	a6,1
    80208e28:	0005079b          	sext.w	a5,a0
    80208e2c:	fcc40713          	addi	a4,s0,-52
    80208e30:	4681                	li	a3,0
    80208e32:	4601                	li	a2,0
    80208e34:	10c5a583          	lw	a1,268(a1)
    80208e38:	854a                	mv	a0,s2
    80208e3a:	fffff097          	auipc	ra,0xfffff
    80208e3e:	45e080e7          	jalr	1118(ra) # 80208298 <rw_clus>
    entcnt &= ~LAST_LONG_ENTRY;
    80208e42:	fcc42603          	lw	a2,-52(s0)
    80208e46:	fbf67613          	andi	a2,a2,-65
    80208e4a:	fcc42623          	sw	a2,-52(s0)
    off = reloc_clus(fs, entry->parent, entry->off + (entcnt << 5), 0);
    80208e4e:	0056161b          	slliw	a2,a2,0x5
    80208e52:	1344a783          	lw	a5,308(s1)
    80208e56:	4681                	li	a3,0
    80208e58:	9e3d                	addw	a2,a2,a5
    80208e5a:	1384b583          	ld	a1,312(s1)
    80208e5e:	854a                	mv	a0,s2
    80208e60:	fffff097          	auipc	ra,0xfffff
    80208e64:	314080e7          	jalr	788(ra) # 80208174 <reloc_clus>
    80208e68:	0005099b          	sext.w	s3,a0
    rw_clus(fs, entry->parent->cur_clus, 0, 0, (u64)&de, off, sizeof(de));
    80208e6c:	1384b583          	ld	a1,312(s1)
    80208e70:	02000813          	li	a6,32
    80208e74:	87ce                	mv	a5,s3
    80208e76:	fa840713          	addi	a4,s0,-88
    80208e7a:	4681                	li	a3,0
    80208e7c:	4601                	li	a2,0
    80208e7e:	10c5a583          	lw	a1,268(a1)
    80208e82:	854a                	mv	a0,s2
    80208e84:	fffff097          	auipc	ra,0xfffff
    80208e88:	414080e7          	jalr	1044(ra) # 80208298 <rw_clus>
    de.sne.fst_clus_hi = (uint16)(entry->first_clus >> 16);
    80208e8c:	1044a783          	lw	a5,260(s1)
    80208e90:	0107d71b          	srliw	a4,a5,0x10
    80208e94:	fae41e23          	sh	a4,-68(s0)
    de.sne.fst_clus_lo = (uint16)(entry->first_clus & 0xffff);
    80208e98:	fcf41123          	sh	a5,-62(s0)
    de.sne.file_size = entry->file_size;
    80208e9c:	1084a783          	lw	a5,264(s1)
    80208ea0:	fcf42223          	sw	a5,-60(s0)
    de.sne._nt_res = entry->_nt_res;
    80208ea4:	1144c783          	lbu	a5,276(s1)
    80208ea8:	faf40a23          	sb	a5,-76(s0)
    rw_clus(fs, entry->parent->cur_clus, 1, 0, (u64)&de, off, sizeof(de));
    80208eac:	1384b583          	ld	a1,312(s1)
    80208eb0:	02000813          	li	a6,32
    80208eb4:	87ce                	mv	a5,s3
    80208eb6:	fa840713          	addi	a4,s0,-88
    80208eba:	4681                	li	a3,0
    80208ebc:	4605                	li	a2,1
    80208ebe:	10c5a583          	lw	a1,268(a1)
    80208ec2:	854a                	mv	a0,s2
    80208ec4:	fffff097          	auipc	ra,0xfffff
    80208ec8:	3d4080e7          	jalr	980(ra) # 80208298 <rw_clus>
    entry->dirty = 0;
    80208ecc:	120480a3          	sb	zero,289(s1)
    80208ed0:	b725                	j	80208df8 <eupdate+0x20>
    80208ed2:	8082                	ret

0000000080208ed4 <eremove>:
    if (entry->valid != 1) {
    80208ed4:	12251703          	lh	a4,290(a0)
    80208ed8:	4785                	li	a5,1
    80208eda:	00f70363          	beq	a4,a5,80208ee0 <eremove+0xc>
    80208ede:	8082                	ret
void eremove(struct dirent* entry) {
    80208ee0:	715d                	addi	sp,sp,-80
    80208ee2:	e486                	sd	ra,72(sp)
    80208ee4:	e0a2                	sd	s0,64(sp)
    80208ee6:	fc26                	sd	s1,56(sp)
    80208ee8:	f84a                	sd	s2,48(sp)
    80208eea:	f44e                	sd	s3,40(sp)
    80208eec:	f052                	sd	s4,32(sp)
    80208eee:	ec56                	sd	s5,24(sp)
    80208ef0:	0880                	addi	s0,sp,80
    80208ef2:	89aa                	mv	s3,a0
    FileSystem *fs = entry->fileSystem;
    80208ef4:	11853a83          	ld	s5,280(a0)
    uint entcnt = 0;
    80208ef8:	fa042e23          	sw	zero,-68(s0)
    uint32 off = entry->off;
    80208efc:	13452a03          	lw	s4,308(a0)
    uint32 off2 = reloc_clus(fs, entry->parent, off, 0);
    80208f00:	4681                	li	a3,0
    80208f02:	8652                	mv	a2,s4
    80208f04:	13853583          	ld	a1,312(a0)
    80208f08:	8556                	mv	a0,s5
    80208f0a:	fffff097          	auipc	ra,0xfffff
    80208f0e:	26a080e7          	jalr	618(ra) # 80208174 <reloc_clus>
    80208f12:	0005049b          	sext.w	s1,a0
    rw_clus(fs, entry->parent->cur_clus, 0, 0, (u64)&entcnt, off2, 1);
    80208f16:	1389b583          	ld	a1,312(s3)
    80208f1a:	4805                	li	a6,1
    80208f1c:	87a6                	mv	a5,s1
    80208f1e:	fbc40713          	addi	a4,s0,-68
    80208f22:	4681                	li	a3,0
    80208f24:	4601                	li	a2,0
    80208f26:	10c5a583          	lw	a1,268(a1)
    80208f2a:	8556                	mv	a0,s5
    80208f2c:	fffff097          	auipc	ra,0xfffff
    80208f30:	36c080e7          	jalr	876(ra) # 80208298 <rw_clus>
    entcnt &= ~LAST_LONG_ENTRY;
    80208f34:	fbc42783          	lw	a5,-68(s0)
    80208f38:	fbf7f793          	andi	a5,a5,-65
    80208f3c:	faf42e23          	sw	a5,-68(s0)
    uint8 flag = EMPTY_ENTRY;
    80208f40:	5795                	li	a5,-27
    80208f42:	faf40da3          	sb	a5,-69(s0)
    for (int i = 0; i <= entcnt; i++) {
    80208f46:	4901                	li	s2,0
        rw_clus(fs, entry->parent->cur_clus, 1, 0, (u64)&flag, off2, 1);
    80208f48:	1389b583          	ld	a1,312(s3)
    80208f4c:	4805                	li	a6,1
    80208f4e:	87a6                	mv	a5,s1
    80208f50:	fbb40713          	addi	a4,s0,-69
    80208f54:	4681                	li	a3,0
    80208f56:	4605                	li	a2,1
    80208f58:	10c5a583          	lw	a1,268(a1)
    80208f5c:	8556                	mv	a0,s5
    80208f5e:	fffff097          	auipc	ra,0xfffff
    80208f62:	33a080e7          	jalr	826(ra) # 80208298 <rw_clus>
        off += 32;
    80208f66:	020a0a1b          	addiw	s4,s4,32
        off2 = reloc_clus(fs, entry->parent, off, 0);
    80208f6a:	4681                	li	a3,0
    80208f6c:	8652                	mv	a2,s4
    80208f6e:	1389b583          	ld	a1,312(s3)
    80208f72:	8556                	mv	a0,s5
    80208f74:	fffff097          	auipc	ra,0xfffff
    80208f78:	200080e7          	jalr	512(ra) # 80208174 <reloc_clus>
    80208f7c:	0005049b          	sext.w	s1,a0
    for (int i = 0; i <= entcnt; i++) {
    80208f80:	0019079b          	addiw	a5,s2,1
    80208f84:	0007891b          	sext.w	s2,a5
    80208f88:	fbc42703          	lw	a4,-68(s0)
    80208f8c:	fb277ee3          	bgeu	a4,s2,80208f48 <eremove+0x74>
    entry->valid = -1;
    80208f90:	57fd                	li	a5,-1
    80208f92:	12f99123          	sh	a5,290(s3)
}
    80208f96:	60a6                	ld	ra,72(sp)
    80208f98:	6406                	ld	s0,64(sp)
    80208f9a:	74e2                	ld	s1,56(sp)
    80208f9c:	7942                	ld	s2,48(sp)
    80208f9e:	79a2                	ld	s3,40(sp)
    80208fa0:	7a02                	ld	s4,32(sp)
    80208fa2:	6ae2                	ld	s5,24(sp)
    80208fa4:	6161                	addi	sp,sp,80
    80208fa6:	8082                	ret

0000000080208fa8 <etrunc>:
void etrunc(struct dirent* entry) {
    80208fa8:	7139                	addi	sp,sp,-64
    80208faa:	fc06                	sd	ra,56(sp)
    80208fac:	f822                	sd	s0,48(sp)
    80208fae:	f426                	sd	s1,40(sp)
    80208fb0:	f04a                	sd	s2,32(sp)
    80208fb2:	ec4e                	sd	s3,24(sp)
    80208fb4:	e852                	sd	s4,16(sp)
    80208fb6:	e456                	sd	s5,8(sp)
    80208fb8:	0080                	addi	s0,sp,64
    80208fba:	8aaa                	mv	s5,a0
    FileSystem *fs = entry->fileSystem;
    80208fbc:	11853903          	ld	s2,280(a0)
    for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC;) {
    80208fc0:	10452483          	lw	s1,260(a0)
    80208fc4:	ffe4871b          	addiw	a4,s1,-2
    80208fc8:	100007b7          	lui	a5,0x10000
    80208fcc:	17d5                	addi	a5,a5,-11
    80208fce:	02e7e863          	bltu	a5,a4,80208ffe <etrunc+0x56>
    80208fd2:	8a3e                	mv	s4,a5
        uint32 next = read_fat(fs, clus);
    80208fd4:	0004899b          	sext.w	s3,s1
    80208fd8:	85a6                	mv	a1,s1
    80208fda:	854a                	mv	a0,s2
    80208fdc:	fffff097          	auipc	ra,0xfffff
    80208fe0:	000080e7          	jalr	ra # 80207fdc <read_fat>
    80208fe4:	0005049b          	sext.w	s1,a0
    write_fat(fs, cluster, 0);
    80208fe8:	4601                	li	a2,0
    80208fea:	85ce                	mv	a1,s3
    80208fec:	854a                	mv	a0,s2
    80208fee:	fffff097          	auipc	ra,0xfffff
    80208ff2:	f7a080e7          	jalr	-134(ra) # 80207f68 <write_fat>
    for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC;) {
    80208ff6:	ffe4879b          	addiw	a5,s1,-2
    80208ffa:	fcfa7de3          	bgeu	s4,a5,80208fd4 <etrunc+0x2c>
    entry->file_size = 0;
    80208ffe:	100aa423          	sw	zero,264(s5)
    entry->first_clus = 0;
    80209002:	100aa223          	sw	zero,260(s5)
    entry->dirty = 1;
    80209006:	4785                	li	a5,1
    80209008:	12fa80a3          	sb	a5,289(s5)
}
    8020900c:	70e2                	ld	ra,56(sp)
    8020900e:	7442                	ld	s0,48(sp)
    80209010:	74a2                	ld	s1,40(sp)
    80209012:	7902                	ld	s2,32(sp)
    80209014:	69e2                	ld	s3,24(sp)
    80209016:	6a42                	ld	s4,16(sp)
    80209018:	6aa2                	ld	s5,8(sp)
    8020901a:	6121                	addi	sp,sp,64
    8020901c:	8082                	ret

000000008020901e <elock>:
void elock(struct dirent* entry) {
    8020901e:	1141                	addi	sp,sp,-16
    80209020:	e406                	sd	ra,8(sp)
    80209022:	e022                	sd	s0,0(sp)
    80209024:	0800                	addi	s0,sp,16
    if (entry == 0 || entry->ref < 1)
    80209026:	cd19                	beqz	a0,80209044 <elock+0x26>
    80209028:	13052783          	lw	a5,304(a0)
    8020902c:	00f05c63          	blez	a5,80209044 <elock+0x26>
    acquiresleep(&entry->lock);
    80209030:	14050513          	addi	a0,a0,320
    80209034:	ffffd097          	auipc	ra,0xffffd
    80209038:	ff2080e7          	jalr	-14(ra) # 80206026 <acquiresleep>
}
    8020903c:	60a2                	ld	ra,8(sp)
    8020903e:	6402                	ld	s0,0(sp)
    80209040:	0141                	addi	sp,sp,16
    80209042:	8082                	ret
        panic("elock");
    80209044:	00005697          	auipc	a3,0x5
    80209048:	21c68693          	addi	a3,a3,540 # 8020e260 <__func__.1368+0xb8>
    8020904c:	00005617          	auipc	a2,0x5
    80209050:	4ec60613          	addi	a2,a2,1260 # 8020e538 <__func__.1920>
    80209054:	2e300593          	li	a1,739
    80209058:	00005517          	auipc	a0,0x5
    8020905c:	17050513          	addi	a0,a0,368 # 8020e1c8 <__func__.1368+0x20>
    80209060:	ffff8097          	auipc	ra,0xffff8
    80209064:	af6080e7          	jalr	-1290(ra) # 80200b56 <_panic_>

0000000080209068 <eunlock>:
void eunlock(struct dirent* entry) {
    80209068:	1101                	addi	sp,sp,-32
    8020906a:	ec06                	sd	ra,24(sp)
    8020906c:	e822                	sd	s0,16(sp)
    8020906e:	e426                	sd	s1,8(sp)
    80209070:	e04a                	sd	s2,0(sp)
    80209072:	1000                	addi	s0,sp,32
    if (entry == 0 || !holdingsleep(&entry->lock) || entry->ref < 1)
    80209074:	c90d                	beqz	a0,802090a6 <eunlock+0x3e>
    80209076:	84aa                	mv	s1,a0
    80209078:	14050913          	addi	s2,a0,320
    8020907c:	854a                	mv	a0,s2
    8020907e:	ffffd097          	auipc	ra,0xffffd
    80209082:	044080e7          	jalr	68(ra) # 802060c2 <holdingsleep>
    80209086:	c105                	beqz	a0,802090a6 <eunlock+0x3e>
    80209088:	1304a783          	lw	a5,304(s1)
    8020908c:	00f05d63          	blez	a5,802090a6 <eunlock+0x3e>
    releasesleep(&entry->lock);
    80209090:	854a                	mv	a0,s2
    80209092:	ffffd097          	auipc	ra,0xffffd
    80209096:	fec080e7          	jalr	-20(ra) # 8020607e <releasesleep>
}
    8020909a:	60e2                	ld	ra,24(sp)
    8020909c:	6442                	ld	s0,16(sp)
    8020909e:	64a2                	ld	s1,8(sp)
    802090a0:	6902                	ld	s2,0(sp)
    802090a2:	6105                	addi	sp,sp,32
    802090a4:	8082                	ret
        panic("eunlock");
    802090a6:	00005697          	auipc	a3,0x5
    802090aa:	1c268693          	addi	a3,a3,450 # 8020e268 <__func__.1368+0xc0>
    802090ae:	00005617          	auipc	a2,0x5
    802090b2:	48260613          	addi	a2,a2,1154 # 8020e530 <__func__.1924>
    802090b6:	2e900593          	li	a1,745
    802090ba:	00005517          	auipc	a0,0x5
    802090be:	10e50513          	addi	a0,a0,270 # 8020e1c8 <__func__.1368+0x20>
    802090c2:	ffff8097          	auipc	ra,0xffff8
    802090c6:	a94080e7          	jalr	-1388(ra) # 80200b56 <_panic_>

00000000802090ca <eput>:
void eput(struct dirent* entry) {
    802090ca:	1101                	addi	sp,sp,-32
    802090cc:	ec06                	sd	ra,24(sp)
    802090ce:	e822                	sd	s0,16(sp)
    802090d0:	e426                	sd	s1,8(sp)
    802090d2:	e04a                	sd	s2,0(sp)
    802090d4:	1000                	addi	s0,sp,32
    802090d6:	84aa                	mv	s1,a0
    acquireLock(&direntCache.lock);
    802090d8:	00414517          	auipc	a0,0x414
    802090dc:	6f850513          	addi	a0,a0,1784 # 8061d7d0 <direntCache>
    802090e0:	ffffd097          	auipc	ra,0xffffd
    802090e4:	084080e7          	jalr	132(ra) # 80206164 <acquireLock>
    if ((entry >= direntCache.entries && entry < direntCache.entries + ENTRY_CACHE_NUM) && entry->valid != 0 && entry->ref == 1) {
    802090e8:	00414797          	auipc	a5,0x414
    802090ec:	70078793          	addi	a5,a5,1792 # 8061d7e8 <direntCache+0x18>
    802090f0:	02f4e063          	bltu	s1,a5,80209110 <eput+0x46>
    802090f4:	00419797          	auipc	a5,0x419
    802090f8:	ed478793          	addi	a5,a5,-300 # 80621fc8 <fileSystem>
    802090fc:	00f4fa63          	bgeu	s1,a5,80209110 <eput+0x46>
    80209100:	12249783          	lh	a5,290(s1)
    80209104:	c791                	beqz	a5,80209110 <eput+0x46>
    80209106:	1304a703          	lw	a4,304(s1)
    8020910a:	4785                	li	a5,1
    8020910c:	02f70563          	beq	a4,a5,80209136 <eput+0x6c>
    entry->ref--;
    80209110:	1304a783          	lw	a5,304(s1)
    80209114:	37fd                	addiw	a5,a5,-1
    80209116:	12f4a823          	sw	a5,304(s1)
    releaseLock(&direntCache.lock);
    8020911a:	00414517          	auipc	a0,0x414
    8020911e:	6b650513          	addi	a0,a0,1718 # 8061d7d0 <direntCache>
    80209122:	ffffd097          	auipc	ra,0xffffd
    80209126:	0be080e7          	jalr	190(ra) # 802061e0 <releaseLock>
}
    8020912a:	60e2                	ld	ra,24(sp)
    8020912c:	6442                	ld	s0,16(sp)
    8020912e:	64a2                	ld	s1,8(sp)
    80209130:	6902                	ld	s2,0(sp)
    80209132:	6105                	addi	sp,sp,32
    80209134:	8082                	ret
        acquiresleep(&entry->lock);
    80209136:	14048913          	addi	s2,s1,320
    8020913a:	854a                	mv	a0,s2
    8020913c:	ffffd097          	auipc	ra,0xffffd
    80209140:	eea080e7          	jalr	-278(ra) # 80206026 <acquiresleep>
        releaseLock(&direntCache.lock);
    80209144:	00414517          	auipc	a0,0x414
    80209148:	68c50513          	addi	a0,a0,1676 # 8061d7d0 <direntCache>
    8020914c:	ffffd097          	auipc	ra,0xffffd
    80209150:	094080e7          	jalr	148(ra) # 802061e0 <releaseLock>
        if (entry->valid == -1) {  // this means some one has called eremove()
    80209154:	12249703          	lh	a4,290(s1)
    80209158:	57fd                	li	a5,-1
    8020915a:	06f70863          	beq	a4,a5,802091ca <eput+0x100>
            elock(entry->parent);
    8020915e:	1384b503          	ld	a0,312(s1)
    80209162:	00000097          	auipc	ra,0x0
    80209166:	ebc080e7          	jalr	-324(ra) # 8020901e <elock>
            eupdate(entry);
    8020916a:	8526                	mv	a0,s1
    8020916c:	00000097          	auipc	ra,0x0
    80209170:	c6c080e7          	jalr	-916(ra) # 80208dd8 <eupdate>
            eunlock(entry->parent);
    80209174:	1384b503          	ld	a0,312(s1)
    80209178:	00000097          	auipc	ra,0x0
    8020917c:	ef0080e7          	jalr	-272(ra) # 80209068 <eunlock>
        releasesleep(&entry->lock);
    80209180:	854a                	mv	a0,s2
    80209182:	ffffd097          	auipc	ra,0xffffd
    80209186:	efc080e7          	jalr	-260(ra) # 8020607e <releasesleep>
        struct dirent* eparent = entry->parent;
    8020918a:	1384b903          	ld	s2,312(s1)
        acquireLock(&direntCache.lock);
    8020918e:	00414517          	auipc	a0,0x414
    80209192:	64250513          	addi	a0,a0,1602 # 8061d7d0 <direntCache>
    80209196:	ffffd097          	auipc	ra,0xffffd
    8020919a:	fce080e7          	jalr	-50(ra) # 80206164 <acquireLock>
        entry->ref--;
    8020919e:	1304a783          	lw	a5,304(s1)
    802091a2:	37fd                	addiw	a5,a5,-1
    802091a4:	12f4a823          	sw	a5,304(s1)
        releaseLock(&direntCache.lock);
    802091a8:	00414517          	auipc	a0,0x414
    802091ac:	62850513          	addi	a0,a0,1576 # 8061d7d0 <direntCache>
    802091b0:	ffffd097          	auipc	ra,0xffffd
    802091b4:	030080e7          	jalr	48(ra) # 802061e0 <releaseLock>
        if (entry->ref == 0) {
    802091b8:	1304a783          	lw	a5,304(s1)
    802091bc:	f7bd                	bnez	a5,8020912a <eput+0x60>
            eput(eparent);
    802091be:	854a                	mv	a0,s2
    802091c0:	00000097          	auipc	ra,0x0
    802091c4:	f0a080e7          	jalr	-246(ra) # 802090ca <eput>
    802091c8:	b78d                	j	8020912a <eput+0x60>
            etrunc(entry);
    802091ca:	8526                	mv	a0,s1
    802091cc:	00000097          	auipc	ra,0x0
    802091d0:	ddc080e7          	jalr	-548(ra) # 80208fa8 <etrunc>
    802091d4:	b775                	j	80209180 <eput+0xb6>

00000000802091d6 <estat>:
void estat(struct dirent* de, struct stat* st) {
    802091d6:	1141                	addi	sp,sp,-16
    802091d8:	e422                	sd	s0,8(sp)
    802091da:	0800                	addi	s0,sp,16
    st->st_dev = de->dev;
    802091dc:	12054783          	lbu	a5,288(a0)
    802091e0:	e19c                	sd	a5,0(a1)
    st->st_size = de->file_size;
    802091e2:	10856703          	lwu	a4,264(a0)
    802091e6:	f998                	sd	a4,48(a1)
    st->st_ino = (de - direntCache.entries);
    802091e8:	00414797          	auipc	a5,0x414
    802091ec:	60078793          	addi	a5,a5,1536 # 8061d7e8 <direntCache+0x18>
    802091f0:	40f507b3          	sub	a5,a0,a5
    802091f4:	8791                	srai	a5,a5,0x4
    802091f6:	00005697          	auipc	a3,0x5
    802091fa:	3926b683          	ld	a3,914(a3) # 8020e588 <__func__.1590+0x20>
    802091fe:	02d787b3          	mul	a5,a5,a3
    80209202:	e59c                	sd	a5,8(a1)
    st->st_mode = de->attribute;
    80209204:	10054783          	lbu	a5,256(a0)
    80209208:	c99c                	sw	a5,16(a1)
    st->st_nlink = 1;
    8020920a:	4785                	li	a5,1
    8020920c:	c9dc                	sw	a5,20(a1)
    st->st_uid = 0;
    8020920e:	0005ac23          	sw	zero,24(a1)
    st->st_gid = 0;
    80209212:	0005ae23          	sw	zero,28(a1)
    st->st_rdev = 0;  // What's this?
    80209216:	0205b023          	sd	zero,32(a1)
    st->st_blksize = de->fileSystem->superBlock.bpb.byts_per_sec;
    8020921a:	11853783          	ld	a5,280(a0)
    8020921e:	0547d783          	lhu	a5,84(a5)
    80209222:	dd9c                	sw	a5,56(a1)
    st->st_blocks = st->st_size / st->st_blksize;
    80209224:	02f74733          	div	a4,a4,a5
    80209228:	e1b8                	sd	a4,64(a1)
    st->st_atime_sec = 0;
    8020922a:	0405b423          	sd	zero,72(a1)
    st->st_atime_nsec = 0;
    8020922e:	0405b823          	sd	zero,80(a1)
    st->st_mtime_sec = 0;
    80209232:	0405bc23          	sd	zero,88(a1)
    st->st_mtime_nsec = 0;
    80209236:	0605b023          	sd	zero,96(a1)
    st->st_ctime_sec = 0;
    8020923a:	0605b423          	sd	zero,104(a1)
    st->st_ctime_nsec = 0;
    8020923e:	0605b823          	sd	zero,112(a1)
}
    80209242:	6422                	ld	s0,8(sp)
    80209244:	0141                	addi	sp,sp,16
    80209246:	8082                	ret

0000000080209248 <enext>:
 * @param   count   to write the count of entries
 * @return  -1      meet the end of dir
 *          0       find empty slots
 *          1       find a file with all its entries
 */
int enext(struct dirent* dp, struct dirent* ep, uint off, int* count) {
    80209248:	7119                	addi	sp,sp,-128
    8020924a:	fc86                	sd	ra,120(sp)
    8020924c:	f8a2                	sd	s0,112(sp)
    8020924e:	f4a6                	sd	s1,104(sp)
    80209250:	f0ca                	sd	s2,96(sp)
    80209252:	ecce                	sd	s3,88(sp)
    80209254:	e8d2                	sd	s4,80(sp)
    80209256:	e4d6                	sd	s5,72(sp)
    80209258:	e0da                	sd	s6,64(sp)
    8020925a:	fc5e                	sd	s7,56(sp)
    8020925c:	f862                	sd	s8,48(sp)
    8020925e:	f466                	sd	s9,40(sp)
    80209260:	f06a                	sd	s10,32(sp)
    80209262:	0100                	addi	s0,sp,128
    // assert(dp->fileSystem == ep->fileSystem);
    if (!(dp->attribute & ATTR_DIRECTORY))
    80209264:	10054783          	lbu	a5,256(a0)
    80209268:	8bc1                	andi	a5,a5,16
    8020926a:	cf9d                	beqz	a5,802092a8 <enext+0x60>
    8020926c:	892a                	mv	s2,a0
    8020926e:	8aae                	mv	s5,a1
    80209270:	84b2                	mv	s1,a2
    80209272:	8a36                	mv	s4,a3
        panic("enext not dir");
    if (ep->valid)
    80209274:	12259783          	lh	a5,290(a1)
    80209278:	ebb1                	bnez	a5,802092cc <enext+0x84>
        panic("enext ep valid");
    if (off % 32)
    8020927a:	01f67793          	andi	a5,a2,31
    8020927e:	ebad                	bnez	a5,802092f0 <enext+0xa8>
        panic("enext not align");
    if (dp->valid != 1) {
    80209280:	12251703          	lh	a4,290(a0)
    80209284:	4785                	li	a5,1
        return -1;
    80209286:	557d                	li	a0,-1
    if (dp->valid != 1) {
    80209288:	08f70663          	beq	a4,a5,80209314 <enext+0xcc>
            read_entry_info(ep, &de);
            return 1;
        }
    }
    return -1;
}
    8020928c:	70e6                	ld	ra,120(sp)
    8020928e:	7446                	ld	s0,112(sp)
    80209290:	74a6                	ld	s1,104(sp)
    80209292:	7906                	ld	s2,96(sp)
    80209294:	69e6                	ld	s3,88(sp)
    80209296:	6a46                	ld	s4,80(sp)
    80209298:	6aa6                	ld	s5,72(sp)
    8020929a:	6b06                	ld	s6,64(sp)
    8020929c:	7be2                	ld	s7,56(sp)
    8020929e:	7c42                	ld	s8,48(sp)
    802092a0:	7ca2                	ld	s9,40(sp)
    802092a2:	7d02                	ld	s10,32(sp)
    802092a4:	6109                	addi	sp,sp,128
    802092a6:	8082                	ret
        panic("enext not dir");
    802092a8:	00005697          	auipc	a3,0x5
    802092ac:	fc868693          	addi	a3,a3,-56 # 8020e270 <__func__.1368+0xc8>
    802092b0:	00005617          	auipc	a2,0x5
    802092b4:	27860613          	addi	a2,a2,632 # 8020e528 <__func__.1956>
    802092b8:	36a00593          	li	a1,874
    802092bc:	00005517          	auipc	a0,0x5
    802092c0:	f0c50513          	addi	a0,a0,-244 # 8020e1c8 <__func__.1368+0x20>
    802092c4:	ffff8097          	auipc	ra,0xffff8
    802092c8:	892080e7          	jalr	-1902(ra) # 80200b56 <_panic_>
        panic("enext ep valid");
    802092cc:	00005697          	auipc	a3,0x5
    802092d0:	fb468693          	addi	a3,a3,-76 # 8020e280 <__func__.1368+0xd8>
    802092d4:	00005617          	auipc	a2,0x5
    802092d8:	25460613          	addi	a2,a2,596 # 8020e528 <__func__.1956>
    802092dc:	36c00593          	li	a1,876
    802092e0:	00005517          	auipc	a0,0x5
    802092e4:	ee850513          	addi	a0,a0,-280 # 8020e1c8 <__func__.1368+0x20>
    802092e8:	ffff8097          	auipc	ra,0xffff8
    802092ec:	86e080e7          	jalr	-1938(ra) # 80200b56 <_panic_>
        panic("enext not align");
    802092f0:	00005697          	auipc	a3,0x5
    802092f4:	fa068693          	addi	a3,a3,-96 # 8020e290 <__func__.1368+0xe8>
    802092f8:	00005617          	auipc	a2,0x5
    802092fc:	23060613          	addi	a2,a2,560 # 8020e528 <__func__.1956>
    80209300:	36e00593          	li	a1,878
    80209304:	00005517          	auipc	a0,0x5
    80209308:	ec450513          	addi	a0,a0,-316 # 8020e1c8 <__func__.1368+0x20>
    8020930c:	ffff8097          	auipc	ra,0xffff8
    80209310:	84a080e7          	jalr	-1974(ra) # 80200b56 <_panic_>
    memset(ep->filename, 0, FAT32_MAX_FILENAME + 1);
    80209314:	8d2e                	mv	s10,a1
    80209316:	10000613          	li	a2,256
    8020931a:	4581                	li	a1,0
    8020931c:	8556                	mv	a0,s5
    8020931e:	ffffd097          	auipc	ra,0xffffd
    80209322:	0fc080e7          	jalr	252(ra) # 8020641a <memset>
    FileSystem *fs = dp->fileSystem;
    80209326:	11893983          	ld	s3,280(s2)
    int cnt = 0;
    8020932a:	4b01                	li	s6,0
    for (int off2; (off2 = reloc_clus(fs, dp, off, 0)) != -1; off += 32) {
    8020932c:	5bfd                	li	s7,-1
        if (de.lne.order == EMPTY_ENTRY) {
    8020932e:	0e500c13          	li	s8,229
        if (de.lne.attr == ATTR_LONG_NAME) {
    80209332:	4cbd                	li	s9,15
    for (int off2; (off2 = reloc_clus(fs, dp, off, 0)) != -1; off += 32) {
    80209334:	a805                	j	80209364 <enext+0x11c>
            cnt++;
    80209336:	2b05                	addiw	s6,s6,1
            continue;
    80209338:	a025                	j	80209360 <enext+0x118>
            *count = cnt;
    8020933a:	016a2023          	sw	s6,0(s4)
            return 0;
    8020933e:	4501                	li	a0,0
    80209340:	b7b1                	j	8020928c <enext+0x44>
            read_entry_name(ep->filename + (lcnt - 1) * CHAR_LONG_NAME, &de);
    80209342:	fff5079b          	addiw	a5,a0,-1
    80209346:	0017951b          	slliw	a0,a5,0x1
    8020934a:	9d3d                	addw	a0,a0,a5
    8020934c:	0025151b          	slliw	a0,a0,0x2
    80209350:	9d3d                	addw	a0,a0,a5
    80209352:	f8040593          	addi	a1,s0,-128
    80209356:	956a                	add	a0,a0,s10
    80209358:	fffff097          	auipc	ra,0xfffff
    8020935c:	1f8080e7          	jalr	504(ra) # 80208550 <read_entry_name>
    for (int off2; (off2 = reloc_clus(fs, dp, off, 0)) != -1; off += 32) {
    80209360:	0204849b          	addiw	s1,s1,32
    80209364:	4681                	li	a3,0
    80209366:	8626                	mv	a2,s1
    80209368:	85ca                	mv	a1,s2
    8020936a:	854e                	mv	a0,s3
    8020936c:	fffff097          	auipc	ra,0xfffff
    80209370:	e08080e7          	jalr	-504(ra) # 80208174 <reloc_clus>
    80209374:	f1750ce3          	beq	a0,s7,8020928c <enext+0x44>
        if (rw_clus(fs, dp->cur_clus, 0, 0, (u64)&de, off2, 32) != 32 ||
    80209378:	02000813          	li	a6,32
    8020937c:	0005079b          	sext.w	a5,a0
    80209380:	f8040713          	addi	a4,s0,-128
    80209384:	4681                	li	a3,0
    80209386:	4601                	li	a2,0
    80209388:	10c92583          	lw	a1,268(s2)
    8020938c:	854e                	mv	a0,s3
    8020938e:	fffff097          	auipc	ra,0xfffff
    80209392:	f0a080e7          	jalr	-246(ra) # 80208298 <rw_clus>
    80209396:	2501                	sext.w	a0,a0
    80209398:	02000793          	li	a5,32
    8020939c:	08f51063          	bne	a0,a5,8020941c <enext+0x1d4>
            de.lne.order == END_OF_ENTRY) {
    802093a0:	f8044783          	lbu	a5,-128(s0)
        if (rw_clus(fs, dp->cur_clus, 0, 0, (u64)&de, off2, 32) != 32 ||
    802093a4:	cfb5                	beqz	a5,80209420 <enext+0x1d8>
        if (de.lne.order == EMPTY_ENTRY) {
    802093a6:	f98788e3          	beq	a5,s8,80209336 <enext+0xee>
        } else if (cnt) {
    802093aa:	f80b18e3          	bnez	s6,8020933a <enext+0xf2>
        if (de.lne.attr == ATTR_LONG_NAME) {
    802093ae:	f8b44703          	lbu	a4,-117(s0)
    802093b2:	01971d63          	bne	a4,s9,802093cc <enext+0x184>
            int lcnt = de.lne.order & ~LAST_LONG_ENTRY;
    802093b6:	0bf7f513          	andi	a0,a5,191
            if (de.lne.order & LAST_LONG_ENTRY) {
    802093ba:	0407f793          	andi	a5,a5,64
    802093be:	d3d1                	beqz	a5,80209342 <enext+0xfa>
                *count = lcnt + 1;  // plus the s-n-e;
    802093c0:	0015079b          	addiw	a5,a0,1
    802093c4:	00fa2023          	sw	a5,0(s4)
                count = 0;
    802093c8:	4a01                	li	s4,0
    802093ca:	bfa5                	j	80209342 <enext+0xfa>
            if (count) {
    802093cc:	000a0c63          	beqz	s4,802093e4 <enext+0x19c>
                *count = 1;
    802093d0:	4785                	li	a5,1
    802093d2:	00fa2023          	sw	a5,0(s4)
                read_entry_name(ep->filename, &de);
    802093d6:	f8040593          	addi	a1,s0,-128
    802093da:	8556                	mv	a0,s5
    802093dc:	fffff097          	auipc	ra,0xfffff
    802093e0:	174080e7          	jalr	372(ra) # 80208550 <read_entry_name>
    entry->attribute = d->sne.attr;
    802093e4:	f8b44783          	lbu	a5,-117(s0)
    802093e8:	10fa8023          	sb	a5,256(s5)
    entry->first_clus = ((uint32)d->sne.fst_clus_hi << 16) | d->sne.fst_clus_lo;
    802093ec:	f9445783          	lhu	a5,-108(s0)
    802093f0:	0107979b          	slliw	a5,a5,0x10
    802093f4:	f9a45703          	lhu	a4,-102(s0)
    802093f8:	8fd9                	or	a5,a5,a4
    802093fa:	2781                	sext.w	a5,a5
    802093fc:	10faa223          	sw	a5,260(s5)
    entry->file_size = d->sne.file_size;
    80209400:	f9c42703          	lw	a4,-100(s0)
    80209404:	10eaa423          	sw	a4,264(s5)
    entry->cur_clus = entry->first_clus;
    80209408:	10faa623          	sw	a5,268(s5)
    entry->clus_cnt = 0;
    8020940c:	100aa823          	sw	zero,272(s5)
    entry->_nt_res = d->sne._nt_res;
    80209410:	f8c44783          	lbu	a5,-116(s0)
    80209414:	10fa8a23          	sb	a5,276(s5)
            return 1;
    80209418:	4505                	li	a0,1
}
    8020941a:	bd8d                	j	8020928c <enext+0x44>
            return -1;
    8020941c:	557d                	li	a0,-1
    8020941e:	b5bd                	j	8020928c <enext+0x44>
    80209420:	557d                	li	a0,-1
    80209422:	b5ad                	j	8020928c <enext+0x44>

0000000080209424 <dirlookup>:
 * @param   dp          entry of a directory file
 * @param   filename    target filename
 * @param   poff        offset of proper empty entry slots from the beginning of
 * the dir
 */
struct dirent* dirlookup(struct dirent* dp, char* filename, uint* poff) {
    80209424:	715d                	addi	sp,sp,-80
    80209426:	e486                	sd	ra,72(sp)
    80209428:	e0a2                	sd	s0,64(sp)
    8020942a:	fc26                	sd	s1,56(sp)
    8020942c:	f84a                	sd	s2,48(sp)
    8020942e:	f44e                	sd	s3,40(sp)
    80209430:	f052                	sd	s4,32(sp)
    80209432:	ec56                	sd	s5,24(sp)
    80209434:	e85a                	sd	s6,16(sp)
    80209436:	0880                	addi	s0,sp,80
    if (!(dp->attribute & ATTR_DIRECTORY))
    80209438:	10054783          	lbu	a5,256(a0)
    8020943c:	8bc1                	andi	a5,a5,16
    8020943e:	cbb1                	beqz	a5,80209492 <dirlookup+0x6e>
    80209440:	84aa                	mv	s1,a0
    80209442:	89ae                	mv	s3,a1
    80209444:	8ab2                	mv	s5,a2
        panic("dirlookup not DIR");
    
    if (strncmp(filename, ".", FAT32_MAX_FILENAME) == 0) {
    80209446:	0ff00613          	li	a2,255
    8020944a:	00005597          	auipc	a1,0x5
    8020944e:	e6e58593          	addi	a1,a1,-402 # 8020e2b8 <__func__.1368+0x110>
    80209452:	854e                	mv	a0,s3
    80209454:	ffffd097          	auipc	ra,0xffffd
    80209458:	09e080e7          	jalr	158(ra) # 802064f2 <strncmp>
    8020945c:	cd29                	beqz	a0,802094b6 <dirlookup+0x92>
        return edup(dp);
    } else if (strncmp(filename, "..", FAT32_MAX_FILENAME) == 0) {
    8020945e:	0ff00613          	li	a2,255
    80209462:	00005597          	auipc	a1,0x5
    80209466:	e5e58593          	addi	a1,a1,-418 # 8020e2c0 <__func__.1368+0x118>
    8020946a:	854e                	mv	a0,s3
    8020946c:	ffffd097          	auipc	ra,0xffffd
    80209470:	086080e7          	jalr	134(ra) # 802064f2 <strncmp>
    80209474:	e925                	bnez	a0,802094e4 <dirlookup+0xc0>
        if (dp == &dp->fileSystem->root) {
    80209476:	1184b503          	ld	a0,280(s1)
    8020947a:	07050513          	addi	a0,a0,112
    8020947e:	04950d63          	beq	a0,s1,802094d8 <dirlookup+0xb4>
            return edup(&dp->fileSystem->root);
        }
        return edup(dp->parent);
    80209482:	1384b503          	ld	a0,312(s1)
    80209486:	00000097          	auipc	ra,0x0
    8020948a:	90e080e7          	jalr	-1778(ra) # 80208d94 <edup>
    8020948e:	892a                	mv	s2,a0
    80209490:	a80d                	j	802094c2 <dirlookup+0x9e>
        panic("dirlookup not DIR");
    80209492:	00005697          	auipc	a3,0x5
    80209496:	e0e68693          	addi	a3,a3,-498 # 8020e2a0 <__func__.1368+0xf8>
    8020949a:	00005617          	auipc	a2,0x5
    8020949e:	e5e60613          	addi	a2,a2,-418 # 8020e2f8 <__func__.1971>
    802094a2:	3a100593          	li	a1,929
    802094a6:	00005517          	auipc	a0,0x5
    802094aa:	d2250513          	addi	a0,a0,-734 # 8020e1c8 <__func__.1368+0x20>
    802094ae:	ffff7097          	auipc	ra,0xffff7
    802094b2:	6a8080e7          	jalr	1704(ra) # 80200b56 <_panic_>
        return edup(dp);
    802094b6:	8526                	mv	a0,s1
    802094b8:	00000097          	auipc	ra,0x0
    802094bc:	8dc080e7          	jalr	-1828(ra) # 80208d94 <edup>
    802094c0:	892a                	mv	s2,a0
    if (poff) {
        *poff = off;
    }
    eput(ep);
    return NULL;
}
    802094c2:	854a                	mv	a0,s2
    802094c4:	60a6                	ld	ra,72(sp)
    802094c6:	6406                	ld	s0,64(sp)
    802094c8:	74e2                	ld	s1,56(sp)
    802094ca:	7942                	ld	s2,48(sp)
    802094cc:	79a2                	ld	s3,40(sp)
    802094ce:	7a02                	ld	s4,32(sp)
    802094d0:	6ae2                	ld	s5,24(sp)
    802094d2:	6b42                	ld	s6,16(sp)
    802094d4:	6161                	addi	sp,sp,80
    802094d6:	8082                	ret
            return edup(&dp->fileSystem->root);
    802094d8:	00000097          	auipc	ra,0x0
    802094dc:	8bc080e7          	jalr	-1860(ra) # 80208d94 <edup>
    802094e0:	892a                	mv	s2,a0
    802094e2:	b7c5                	j	802094c2 <dirlookup+0x9e>
    if (dp->valid != 1) {
    802094e4:	12249703          	lh	a4,290(s1)
    802094e8:	4785                	li	a5,1
        return NULL;
    802094ea:	4901                	li	s2,0
    if (dp->valid != 1) {
    802094ec:	fcf71be3          	bne	a4,a5,802094c2 <dirlookup+0x9e>
    struct dirent* ep = eget(dp, filename);
    802094f0:	85ce                	mv	a1,s3
    802094f2:	8526                	mv	a0,s1
    802094f4:	fffff097          	auipc	ra,0xfffff
    802094f8:	f00080e7          	jalr	-256(ra) # 802083f4 <eget>
    802094fc:	892a                	mv	s2,a0
    if (ep->valid == 1) {
    802094fe:	12251703          	lh	a4,290(a0)
    80209502:	4785                	li	a5,1
    80209504:	faf70fe3          	beq	a4,a5,802094c2 <dirlookup+0x9e>
    int len = strlen(filename);
    80209508:	854e                	mv	a0,s3
    8020950a:	ffffd097          	auipc	ra,0xffffd
    8020950e:	094080e7          	jalr	148(ra) # 8020659e <strlen>
    int count = 0;
    80209512:	fa042e23          	sw	zero,-68(s0)
    reloc_clus(fs, dp, 0, 0);
    80209516:	4681                	li	a3,0
    80209518:	4601                	li	a2,0
    8020951a:	85a6                	mv	a1,s1
    8020951c:	1184b503          	ld	a0,280(s1)
    80209520:	fffff097          	auipc	ra,0xfffff
    80209524:	c54080e7          	jalr	-940(ra) # 80208174 <reloc_clus>
    uint off = 0;
    80209528:	4a01                	li	s4,0
    while ((type = enext(dp, ep, off, &count) != -1)) {
    8020952a:	5b7d                	li	s6,-1
    8020952c:	fbc40693          	addi	a3,s0,-68
    80209530:	8652                	mv	a2,s4
    80209532:	85ca                	mv	a1,s2
    80209534:	8526                	mv	a0,s1
    80209536:	00000097          	auipc	ra,0x0
    8020953a:	d12080e7          	jalr	-750(ra) # 80209248 <enext>
    8020953e:	03650f63          	beq	a0,s6,8020957c <dirlookup+0x158>
        } else if (strncmp(filename, ep->filename, FAT32_MAX_FILENAME) == 0) {
    80209542:	0ff00613          	li	a2,255
    80209546:	85ca                	mv	a1,s2
    80209548:	854e                	mv	a0,s3
    8020954a:	ffffd097          	auipc	ra,0xffffd
    8020954e:	fa8080e7          	jalr	-88(ra) # 802064f2 <strncmp>
    80209552:	c901                	beqz	a0,80209562 <dirlookup+0x13e>
        off += count << 5;
    80209554:	fbc42783          	lw	a5,-68(s0)
    80209558:	0057979b          	slliw	a5,a5,0x5
    8020955c:	01478a3b          	addw	s4,a5,s4
    80209560:	b7f1                	j	8020952c <dirlookup+0x108>
            ep->parent = edup(dp);
    80209562:	8526                	mv	a0,s1
    80209564:	00000097          	auipc	ra,0x0
    80209568:	830080e7          	jalr	-2000(ra) # 80208d94 <edup>
    8020956c:	12a93c23          	sd	a0,312(s2)
            ep->off = off;
    80209570:	13492a23          	sw	s4,308(s2)
            ep->valid = 1;
    80209574:	4785                	li	a5,1
    80209576:	12f91123          	sh	a5,290(s2)
            return ep;
    8020957a:	b7a1                	j	802094c2 <dirlookup+0x9e>
    if (poff) {
    8020957c:	000a8463          	beqz	s5,80209584 <dirlookup+0x160>
        *poff = off;
    80209580:	014aa023          	sw	s4,0(s5)
    eput(ep);
    80209584:	854a                	mv	a0,s2
    80209586:	00000097          	auipc	ra,0x0
    8020958a:	b44080e7          	jalr	-1212(ra) # 802090ca <eput>
    return NULL;
    8020958e:	4901                	li	s2,0
    80209590:	bf0d                	j	802094c2 <dirlookup+0x9e>

0000000080209592 <ealloc>:
struct dirent* ealloc(struct dirent* dp, char* name, int attr) {
    80209592:	7139                	addi	sp,sp,-64
    80209594:	fc06                	sd	ra,56(sp)
    80209596:	f822                	sd	s0,48(sp)
    80209598:	f426                	sd	s1,40(sp)
    8020959a:	f04a                	sd	s2,32(sp)
    8020959c:	ec4e                	sd	s3,24(sp)
    8020959e:	e852                	sd	s4,16(sp)
    802095a0:	0080                	addi	s0,sp,64
    802095a2:	892a                	mv	s2,a0
    if (!(dp->attribute & ATTR_DIRECTORY)) {
    802095a4:	10054783          	lbu	a5,256(a0)
    802095a8:	8bc1                	andi	a5,a5,16
    802095aa:	c7a9                	beqz	a5,802095f4 <ealloc+0x62>
    802095ac:	852e                	mv	a0,a1
    802095ae:	8a32                	mv	s4,a2
    if (dp->valid != 1 ||
    802095b0:	12291703          	lh	a4,290(s2)
    802095b4:	4785                	li	a5,1
        return NULL;
    802095b6:	4481                	li	s1,0
    if (dp->valid != 1 ||
    802095b8:	02f71563          	bne	a4,a5,802095e2 <ealloc+0x50>
        !(name = formatname(name))) {  // detect illegal character
    802095bc:	fffff097          	auipc	ra,0xfffff
    802095c0:	30e080e7          	jalr	782(ra) # 802088ca <formatname>
    802095c4:	89aa                	mv	s3,a0
    if (dp->valid != 1 ||
    802095c6:	16050d63          	beqz	a0,80209740 <ealloc+0x1ae>
    uint off = 0;
    802095ca:	fc042623          	sw	zero,-52(s0)
    if ((ep = dirlookup(dp, name, &off)) != 0) {  // entry exists
    802095ce:	fcc40613          	addi	a2,s0,-52
    802095d2:	85aa                	mv	a1,a0
    802095d4:	854a                	mv	a0,s2
    802095d6:	00000097          	auipc	ra,0x0
    802095da:	e4e080e7          	jalr	-434(ra) # 80209424 <dirlookup>
    802095de:	84aa                	mv	s1,a0
    802095e0:	cd05                	beqz	a0,80209618 <ealloc+0x86>
}
    802095e2:	8526                	mv	a0,s1
    802095e4:	70e2                	ld	ra,56(sp)
    802095e6:	7442                	ld	s0,48(sp)
    802095e8:	74a2                	ld	s1,40(sp)
    802095ea:	7902                	ld	s2,32(sp)
    802095ec:	69e2                	ld	s3,24(sp)
    802095ee:	6a42                	ld	s4,16(sp)
    802095f0:	6121                	addi	sp,sp,64
    802095f2:	8082                	ret
        panic("ealloc not dir");
    802095f4:	00005697          	auipc	a3,0x5
    802095f8:	cd468693          	addi	a3,a3,-812 # 8020e2c8 <__func__.1368+0x120>
    802095fc:	00005617          	auipc	a2,0x5
    80209600:	f4c60613          	addi	a2,a2,-180 # 8020e548 <__func__.1882>
    80209604:	26d00593          	li	a1,621
    80209608:	00005517          	auipc	a0,0x5
    8020960c:	bc050513          	addi	a0,a0,-1088 # 8020e1c8 <__func__.1368+0x20>
    80209610:	ffff7097          	auipc	ra,0xffff7
    80209614:	546080e7          	jalr	1350(ra) # 80200b56 <_panic_>
    ep = eget(dp, name);
    80209618:	85ce                	mv	a1,s3
    8020961a:	854a                	mv	a0,s2
    8020961c:	fffff097          	auipc	ra,0xfffff
    80209620:	dd8080e7          	jalr	-552(ra) # 802083f4 <eget>
    80209624:	84aa                	mv	s1,a0
    elock(ep);
    80209626:	00000097          	auipc	ra,0x0
    8020962a:	9f8080e7          	jalr	-1544(ra) # 8020901e <elock>
    if (attr == ATTR_LINK) {
    8020962e:	04000793          	li	a5,64
    80209632:	06fa0f63          	beq	s4,a5,802096b0 <ealloc+0x11e>
        ep->attribute = attr;
    80209636:	11448023          	sb	s4,256(s1)
        ep->_nt_res = 0;
    8020963a:	10048a23          	sb	zero,276(s1)
    ep->file_size = 0;
    8020963e:	1004a423          	sw	zero,264(s1)
    ep->first_clus = 0;
    80209642:	1004a223          	sw	zero,260(s1)
    ep->parent = edup(dp);
    80209646:	854a                	mv	a0,s2
    80209648:	fffff097          	auipc	ra,0xfffff
    8020964c:	74c080e7          	jalr	1868(ra) # 80208d94 <edup>
    80209650:	12a4bc23          	sd	a0,312(s1)
    ep->off = off;
    80209654:	fcc42783          	lw	a5,-52(s0)
    80209658:	12f4aa23          	sw	a5,308(s1)
    ep->clus_cnt = 0;
    8020965c:	1004a823          	sw	zero,272(s1)
    ep->cur_clus = 0;
    80209660:	1004a623          	sw	zero,268(s1)
    ep->dirty = 0;
    80209664:	120480a3          	sb	zero,289(s1)
    strncpy(ep->filename, name, FAT32_MAX_FILENAME);
    80209668:	0ff00613          	li	a2,255
    8020966c:	85ce                	mv	a1,s3
    8020966e:	8526                	mv	a0,s1
    80209670:	ffffd097          	auipc	ra,0xffffd
    80209674:	ebe080e7          	jalr	-322(ra) # 8020652e <strncpy>
    ep->filename[FAT32_MAX_FILENAME] = '\0';
    80209678:	0e048fa3          	sb	zero,255(s1)
    if (attr == ATTR_DIRECTORY) {  // generate "." and ".." for ep
    8020967c:	47c1                	li	a5,16
    8020967e:	06fa0e63          	beq	s4,a5,802096fa <ealloc+0x168>
        ep->attribute |= ATTR_ARCHIVE;
    80209682:	1004c783          	lbu	a5,256(s1)
    80209686:	0207e793          	ori	a5,a5,32
    8020968a:	10f48023          	sb	a5,256(s1)
    emake(dp, ep, off);
    8020968e:	fcc42603          	lw	a2,-52(s0)
    80209692:	85a6                	mv	a1,s1
    80209694:	854a                	mv	a0,s2
    80209696:	fffff097          	auipc	ra,0xfffff
    8020969a:	2ec080e7          	jalr	748(ra) # 80208982 <emake>
    ep->valid = 1;
    8020969e:	4785                	li	a5,1
    802096a0:	12f49123          	sh	a5,290(s1)
    eunlock(ep);
    802096a4:	8526                	mv	a0,s1
    802096a6:	00000097          	auipc	ra,0x0
    802096aa:	9c2080e7          	jalr	-1598(ra) # 80209068 <eunlock>
    return ep;
    802096ae:	bf15                	j	802095e2 <ealloc+0x50>
        ep->attribute = 0;
    802096b0:	10048023          	sb	zero,256(s1)
        ep->_nt_res = DT_LNK;
    802096b4:	47a9                	li	a5,10
    802096b6:	10f48a23          	sb	a5,276(s1)
    ep->file_size = 0;
    802096ba:	1004a423          	sw	zero,264(s1)
    ep->first_clus = 0;
    802096be:	1004a223          	sw	zero,260(s1)
    ep->parent = edup(dp);
    802096c2:	854a                	mv	a0,s2
    802096c4:	fffff097          	auipc	ra,0xfffff
    802096c8:	6d0080e7          	jalr	1744(ra) # 80208d94 <edup>
    802096cc:	12a4bc23          	sd	a0,312(s1)
    ep->off = off;
    802096d0:	fcc42783          	lw	a5,-52(s0)
    802096d4:	12f4aa23          	sw	a5,308(s1)
    ep->clus_cnt = 0;
    802096d8:	1004a823          	sw	zero,272(s1)
    ep->cur_clus = 0;
    802096dc:	1004a623          	sw	zero,268(s1)
    ep->dirty = 0;
    802096e0:	120480a3          	sb	zero,289(s1)
    strncpy(ep->filename, name, FAT32_MAX_FILENAME);
    802096e4:	0ff00613          	li	a2,255
    802096e8:	85ce                	mv	a1,s3
    802096ea:	8526                	mv	a0,s1
    802096ec:	ffffd097          	auipc	ra,0xffffd
    802096f0:	e42080e7          	jalr	-446(ra) # 8020652e <strncpy>
    ep->filename[FAT32_MAX_FILENAME] = '\0';
    802096f4:	0e048fa3          	sb	zero,255(s1)
    if (attr == ATTR_DIRECTORY) {  // generate "." and ".." for ep
    802096f8:	b769                	j	80209682 <ealloc+0xf0>
        ep->attribute |= ATTR_DIRECTORY;
    802096fa:	1004c783          	lbu	a5,256(s1)
    802096fe:	0107e793          	ori	a5,a5,16
    80209702:	10f48023          	sb	a5,256(s1)
        ep->cur_clus = ep->first_clus = alloc_clus(fs, dp->dev);
    80209706:	12094583          	lbu	a1,288(s2)
    8020970a:	1184b503          	ld	a0,280(s1)
    8020970e:	fffff097          	auipc	ra,0xfffff
    80209712:	934080e7          	jalr	-1740(ra) # 80208042 <alloc_clus>
    80209716:	2501                	sext.w	a0,a0
    80209718:	10a4a223          	sw	a0,260(s1)
    8020971c:	10a4a623          	sw	a0,268(s1)
        emake(ep, ep, 0);
    80209720:	4601                	li	a2,0
    80209722:	85a6                	mv	a1,s1
    80209724:	8526                	mv	a0,s1
    80209726:	fffff097          	auipc	ra,0xfffff
    8020972a:	25c080e7          	jalr	604(ra) # 80208982 <emake>
        emake(ep, dp, 32);
    8020972e:	02000613          	li	a2,32
    80209732:	85ca                	mv	a1,s2
    80209734:	8526                	mv	a0,s1
    80209736:	fffff097          	auipc	ra,0xfffff
    8020973a:	24c080e7          	jalr	588(ra) # 80208982 <emake>
    8020973e:	bf81                	j	8020968e <ealloc+0xfc>
        return NULL;
    80209740:	84aa                	mv	s1,a0
    80209742:	b545                	j	802095e2 <ealloc+0x50>

0000000080209744 <ename>:
        return NULL;
    }
    return entry;
}

struct dirent* ename(int fd, char* path) {
    80209744:	716d                	addi	sp,sp,-272
    80209746:	e606                	sd	ra,264(sp)
    80209748:	e222                	sd	s0,256(sp)
    8020974a:	0a00                	addi	s0,sp,272
    char name[FAT32_MAX_FILENAME + 1];
    return lookup_path(fd, path, 0, name);
    8020974c:	ef040693          	addi	a3,s0,-272
    80209750:	4601                	li	a2,0
    80209752:	00000097          	auipc	ra,0x0
    80209756:	082080e7          	jalr	130(ra) # 802097d4 <lookup_path>
}
    8020975a:	60b2                	ld	ra,264(sp)
    8020975c:	6412                	ld	s0,256(sp)
    8020975e:	6151                	addi	sp,sp,272
    80209760:	8082                	ret

0000000080209762 <jumpToLinkDirent>:
static struct dirent* jumpToLinkDirent(struct dirent* link) {
    80209762:	712d                	addi	sp,sp,-288
    80209764:	ee06                	sd	ra,280(sp)
    80209766:	ea22                	sd	s0,272(sp)
    80209768:	e626                	sd	s1,264(sp)
    8020976a:	1200                	addi	s0,sp,288
    while (link && link->_nt_res == DT_LNK) {
    8020976c:	44a9                	li	s1,10
    8020976e:	c915                	beqz	a0,802097a2 <jumpToLinkDirent+0x40>
    80209770:	11454783          	lbu	a5,276(a0)
    80209774:	02979963          	bne	a5,s1,802097a6 <jumpToLinkDirent+0x44>
        eread(link, 0, (u64)buf, 0, FAT32_MAX_FILENAME);
    80209778:	0ff00713          	li	a4,255
    8020977c:	4681                	li	a3,0
    8020977e:	ee040613          	addi	a2,s0,-288
    80209782:	4581                	li	a1,0
    80209784:	fffff097          	auipc	ra,0xfffff
    80209788:	f1e080e7          	jalr	-226(ra) # 802086a2 <eread>
        link = ename(AT_FDCWD, buf);
    8020978c:	ee040593          	addi	a1,s0,-288
    80209790:	f9c00513          	li	a0,-100
    80209794:	00000097          	auipc	ra,0x0
    80209798:	fb0080e7          	jalr	-80(ra) # 80209744 <ename>
    while (link && link->_nt_res == DT_LNK) {
    8020979c:	f971                	bnez	a0,80209770 <jumpToLinkDirent+0xe>
        link = ename(AT_FDCWD, buf);
    8020979e:	84aa                	mv	s1,a0
    802097a0:	a021                	j	802097a8 <jumpToLinkDirent+0x46>
    while (link && link->_nt_res == DT_LNK) {
    802097a2:	84aa                	mv	s1,a0
    802097a4:	a011                	j	802097a8 <jumpToLinkDirent+0x46>
    802097a6:	84aa                	mv	s1,a0
    assert(link != NULL);
    802097a8:	009036b3          	snez	a3,s1
    802097ac:	00005617          	auipc	a2,0x5
    802097b0:	b5c60613          	addi	a2,a2,-1188 # 8020e308 <__func__.2004>
    802097b4:	3f100593          	li	a1,1009
    802097b8:	00005517          	auipc	a0,0x5
    802097bc:	a1050513          	addi	a0,a0,-1520 # 8020e1c8 <__func__.1368+0x20>
    802097c0:	ffff7097          	auipc	ra,0xffff7
    802097c4:	40c080e7          	jalr	1036(ra) # 80200bcc <_assert_>
}
    802097c8:	8526                	mv	a0,s1
    802097ca:	60f2                	ld	ra,280(sp)
    802097cc:	6452                	ld	s0,272(sp)
    802097ce:	64b2                	ld	s1,264(sp)
    802097d0:	6115                	addi	sp,sp,288
    802097d2:	8082                	ret

00000000802097d4 <lookup_path>:
static struct dirent* lookup_path(int fd, char* path, int parent, char* name) {
    802097d4:	715d                	addi	sp,sp,-80
    802097d6:	e486                	sd	ra,72(sp)
    802097d8:	e0a2                	sd	s0,64(sp)
    802097da:	fc26                	sd	s1,56(sp)
    802097dc:	f84a                	sd	s2,48(sp)
    802097de:	f44e                	sd	s3,40(sp)
    802097e0:	f052                	sd	s4,32(sp)
    802097e2:	ec56                	sd	s5,24(sp)
    802097e4:	e85a                	sd	s6,16(sp)
    802097e6:	e45e                	sd	s7,8(sp)
    802097e8:	e062                	sd	s8,0(sp)
    802097ea:	0880                	addi	s0,sp,80
    802097ec:	84ae                	mv	s1,a1
    802097ee:	8b32                	mv	s6,a2
    802097f0:	8ab6                	mv	s5,a3
    if (*path != '/' && fd != AT_FDCWD && fd >= 0 && fd < NOFILE) {
    802097f2:	0005c783          	lbu	a5,0(a1)
    802097f6:	02f00713          	li	a4,47
    802097fa:	06e78e63          	beq	a5,a4,80209876 <lookup_path+0xa2>
    802097fe:	892a                	mv	s2,a0
    80209800:	0005071b          	sext.w	a4,a0
    80209804:	07f00693          	li	a3,127
    80209808:	02e6fb63          	bgeu	a3,a4,8020983e <lookup_path+0x6a>
    } else if (*path != '\0' && fd == AT_FDCWD) {
    8020980c:	1a078263          	beqz	a5,802099b0 <lookup_path+0x1dc>
    80209810:	f9c00793          	li	a5,-100
        return NULL;
    80209814:	4a01                	li	s4,0
    } else if (*path != '\0' && fd == AT_FDCWD) {
    80209816:	08f51563          	bne	a0,a5,802098a0 <lookup_path+0xcc>
        entry = edup(myproc()->cwd);
    8020981a:	ffff9097          	auipc	ra,0xffff9
    8020981e:	232080e7          	jalr	562(ra) # 80202a4c <myproc>
    80209822:	1a853503          	ld	a0,424(a0)
    80209826:	fffff097          	auipc	ra,0xfffff
    8020982a:	56e080e7          	jalr	1390(ra) # 80208d94 <edup>
    8020982e:	8a2a                	mv	s4,a0
    while (*path == '/') {
    80209830:	02f00993          	li	s3,47
    80209834:	0ff00b93          	li	s7,255
    80209838:	0ff00c13          	li	s8,255
    8020983c:	a2b1                	j	80209988 <lookup_path+0x1b4>
        if (myproc()->ofile[fd] == 0) {
    8020983e:	ffff9097          	auipc	ra,0xffff9
    80209842:	20e080e7          	jalr	526(ra) # 80202a4c <myproc>
    80209846:	03690793          	addi	a5,s2,54
    8020984a:	078e                	slli	a5,a5,0x3
    8020984c:	97aa                	add	a5,a5,a0
    8020984e:	0007ba03          	ld	s4,0(a5)
    80209852:	040a0763          	beqz	s4,802098a0 <lookup_path+0xcc>
        entry = edup(myproc()->ofile[fd]->ep);
    80209856:	ffff9097          	auipc	ra,0xffff9
    8020985a:	1f6080e7          	jalr	502(ra) # 80202a4c <myproc>
    8020985e:	03690793          	addi	a5,s2,54
    80209862:	078e                	slli	a5,a5,0x3
    80209864:	97aa                	add	a5,a5,a0
    80209866:	639c                	ld	a5,0(a5)
    80209868:	6f88                	ld	a0,24(a5)
    8020986a:	fffff097          	auipc	ra,0xfffff
    8020986e:	52a080e7          	jalr	1322(ra) # 80208d94 <edup>
    80209872:	8a2a                	mv	s4,a0
    80209874:	bf75                	j	80209830 <lookup_path+0x5c>
        entry = edup(&rootFileSystem.root);
    80209876:	00414517          	auipc	a0,0x414
    8020987a:	dca50513          	addi	a0,a0,-566 # 8061d640 <rootFileSystem+0x70>
    8020987e:	fffff097          	auipc	ra,0xfffff
    80209882:	516080e7          	jalr	1302(ra) # 80208d94 <edup>
    80209886:	8a2a                	mv	s4,a0
    80209888:	b765                	j	80209830 <lookup_path+0x5c>
            eunlock(entry);
    8020988a:	854a                	mv	a0,s2
    8020988c:	fffff097          	auipc	ra,0xfffff
    80209890:	7dc080e7          	jalr	2012(ra) # 80209068 <eunlock>
            eput(entry);
    80209894:	854a                	mv	a0,s2
    80209896:	00000097          	auipc	ra,0x0
    8020989a:	834080e7          	jalr	-1996(ra) # 802090ca <eput>
            return NULL;
    8020989e:	4a01                	li	s4,0
}
    802098a0:	8552                	mv	a0,s4
    802098a2:	60a6                	ld	ra,72(sp)
    802098a4:	6406                	ld	s0,64(sp)
    802098a6:	74e2                	ld	s1,56(sp)
    802098a8:	7942                	ld	s2,48(sp)
    802098aa:	79a2                	ld	s3,40(sp)
    802098ac:	7a02                	ld	s4,32(sp)
    802098ae:	6ae2                	ld	s5,24(sp)
    802098b0:	6b42                	ld	s6,16(sp)
    802098b2:	6ba2                	ld	s7,8(sp)
    802098b4:	6c02                	ld	s8,0(sp)
    802098b6:	6161                	addi	sp,sp,80
    802098b8:	8082                	ret
            eunlock(entry);
    802098ba:	854a                	mv	a0,s2
    802098bc:	fffff097          	auipc	ra,0xfffff
    802098c0:	7ac080e7          	jalr	1964(ra) # 80209068 <eunlock>
            return entry;
    802098c4:	8a4a                	mv	s4,s2
    802098c6:	bfe9                	j	802098a0 <lookup_path+0xcc>
            eunlock(entry);
    802098c8:	854a                	mv	a0,s2
    802098ca:	fffff097          	auipc	ra,0xfffff
    802098ce:	79e080e7          	jalr	1950(ra) # 80209068 <eunlock>
            eput(entry);
    802098d2:	854a                	mv	a0,s2
    802098d4:	fffff097          	auipc	ra,0xfffff
    802098d8:	7f6080e7          	jalr	2038(ra) # 802090ca <eput>
            return NULL;
    802098dc:	b7d1                	j	802098a0 <lookup_path+0xcc>
    int len = path - s;
    802098de:	40b487bb          	subw	a5,s1,a1
    if (len > FAT32_MAX_FILENAME) {
    802098e2:	863e                	mv	a2,a5
    802098e4:	00fbd363          	bge	s7,a5,802098ea <lookup_path+0x116>
    802098e8:	8662                	mv	a2,s8
    802098ea:	0006079b          	sext.w	a5,a2
    name[len] = 0;
    802098ee:	97d6                	add	a5,a5,s5
    802098f0:	00078023          	sb	zero,0(a5)
    memmove(name, s, len);
    802098f4:	2601                	sext.w	a2,a2
    802098f6:	8556                	mv	a0,s5
    802098f8:	ffffd097          	auipc	ra,0xffffd
    802098fc:	b82080e7          	jalr	-1150(ra) # 8020647a <memmove>
    while (*path == '/') {
    80209900:	0004c783          	lbu	a5,0(s1)
    80209904:	01379763          	bne	a5,s3,80209912 <lookup_path+0x13e>
        path++;
    80209908:	0485                	addi	s1,s1,1
    while (*path == '/') {
    8020990a:	0004c783          	lbu	a5,0(s1)
    8020990e:	ff378de3          	beq	a5,s3,80209908 <lookup_path+0x134>
        entry = jumpToLinkDirent(entry);
    80209912:	8552                	mv	a0,s4
    80209914:	00000097          	auipc	ra,0x0
    80209918:	e4e080e7          	jalr	-434(ra) # 80209762 <jumpToLinkDirent>
    8020991c:	892a                	mv	s2,a0
        elock(entry);
    8020991e:	fffff097          	auipc	ra,0xfffff
    80209922:	700080e7          	jalr	1792(ra) # 8020901e <elock>
        if (!(entry->attribute & ATTR_DIRECTORY)) {
    80209926:	10094783          	lbu	a5,256(s2)
    8020992a:	8bc1                	andi	a5,a5,16
    8020992c:	dfb9                	beqz	a5,8020988a <lookup_path+0xb6>
        if (entry->head != NULL) {
    8020992e:	12893503          	ld	a0,296(s2)
    80209932:	c11d                	beqz	a0,80209958 <lookup_path+0x184>
            struct dirent* mountDirent = &entry->head->root;
    80209934:	07050a13          	addi	s4,a0,112
            eunlock(entry);
    80209938:	854a                	mv	a0,s2
    8020993a:	fffff097          	auipc	ra,0xfffff
    8020993e:	72e080e7          	jalr	1838(ra) # 80209068 <eunlock>
            elock(mountDirent);
    80209942:	8552                	mv	a0,s4
    80209944:	fffff097          	auipc	ra,0xfffff
    80209948:	6da080e7          	jalr	1754(ra) # 8020901e <elock>
            entry = edup(mountDirent);
    8020994c:	8552                	mv	a0,s4
    8020994e:	fffff097          	auipc	ra,0xfffff
    80209952:	446080e7          	jalr	1094(ra) # 80208d94 <edup>
    80209956:	892a                	mv	s2,a0
        if (parent && *path == '\0') {
    80209958:	000b0563          	beqz	s6,80209962 <lookup_path+0x18e>
    8020995c:	0004c783          	lbu	a5,0(s1)
    80209960:	dfa9                	beqz	a5,802098ba <lookup_path+0xe6>
        if ((next = dirlookup(entry, name, 0)) == 0) {
    80209962:	4601                	li	a2,0
    80209964:	85d6                	mv	a1,s5
    80209966:	854a                	mv	a0,s2
    80209968:	00000097          	auipc	ra,0x0
    8020996c:	abc080e7          	jalr	-1348(ra) # 80209424 <dirlookup>
    80209970:	8a2a                	mv	s4,a0
    80209972:	d939                	beqz	a0,802098c8 <lookup_path+0xf4>
        eunlock(entry);
    80209974:	854a                	mv	a0,s2
    80209976:	fffff097          	auipc	ra,0xfffff
    8020997a:	6f2080e7          	jalr	1778(ra) # 80209068 <eunlock>
        eput(entry);
    8020997e:	854a                	mv	a0,s2
    80209980:	fffff097          	auipc	ra,0xfffff
    80209984:	74a080e7          	jalr	1866(ra) # 802090ca <eput>
    while (*path == '/') {
    80209988:	0004c783          	lbu	a5,0(s1)
    8020998c:	05379363          	bne	a5,s3,802099d2 <lookup_path+0x1fe>
        path++;
    80209990:	0485                	addi	s1,s1,1
    while (*path == '/') {
    80209992:	0004c783          	lbu	a5,0(s1)
    80209996:	ff378de3          	beq	a5,s3,80209990 <lookup_path+0x1bc>
    if (*path == 0) {
    8020999a:	cf89                	beqz	a5,802099b4 <lookup_path+0x1e0>
        path++;
    8020999c:	85a6                	mv	a1,s1
    while (*path != '/' && *path != 0) {
    8020999e:	f53780e3          	beq	a5,s3,802098de <lookup_path+0x10a>
    802099a2:	df95                	beqz	a5,802098de <lookup_path+0x10a>
        path++;
    802099a4:	0485                	addi	s1,s1,1
    while (*path != '/' && *path != 0) {
    802099a6:	0004c783          	lbu	a5,0(s1)
    802099aa:	ff379ce3          	bne	a5,s3,802099a2 <lookup_path+0x1ce>
    802099ae:	bf05                	j	802098de <lookup_path+0x10a>
        return NULL;
    802099b0:	4a01                	li	s4,0
    802099b2:	b5fd                	j	802098a0 <lookup_path+0xcc>
    entry = jumpToLinkDirent(entry);
    802099b4:	8552                	mv	a0,s4
    802099b6:	00000097          	auipc	ra,0x0
    802099ba:	dac080e7          	jalr	-596(ra) # 80209762 <jumpToLinkDirent>
    802099be:	8a2a                	mv	s4,a0
    if (parent) {
    802099c0:	ee0b00e3          	beqz	s6,802098a0 <lookup_path+0xcc>
        eput(entry);
    802099c4:	8552                	mv	a0,s4
    802099c6:	fffff097          	auipc	ra,0xfffff
    802099ca:	704080e7          	jalr	1796(ra) # 802090ca <eput>
        return NULL;
    802099ce:	4a01                	li	s4,0
    802099d0:	bdc1                	j	802098a0 <lookup_path+0xcc>
    if (*path == 0) {
    802099d2:	d3ed                	beqz	a5,802099b4 <lookup_path+0x1e0>
    while (*path != '/' && *path != 0) {
    802099d4:	0004c783          	lbu	a5,0(s1)
    802099d8:	85a6                	mv	a1,s1
    802099da:	b7e1                	j	802099a2 <lookup_path+0x1ce>

00000000802099dc <enameparent>:

struct dirent* enameparent(int fd, char* path, char* name) {
    802099dc:	1141                	addi	sp,sp,-16
    802099de:	e406                	sd	ra,8(sp)
    802099e0:	e022                	sd	s0,0(sp)
    802099e2:	0800                	addi	s0,sp,16
    802099e4:	86b2                	mv	a3,a2
    return lookup_path(fd, path, 1, name);
    802099e6:	4605                	li	a2,1
    802099e8:	00000097          	auipc	ra,0x0
    802099ec:	dec080e7          	jalr	-532(ra) # 802097d4 <lookup_path>
}
    802099f0:	60a2                	ld	ra,8(sp)
    802099f2:	6402                	ld	s0,0(sp)
    802099f4:	0141                	addi	sp,sp,16
    802099f6:	8082                	ret

00000000802099f8 <create>:
struct dirent* create(int fd, char* path, short type, int mode) {
    802099f8:	7169                	addi	sp,sp,-304
    802099fa:	f606                	sd	ra,296(sp)
    802099fc:	f222                	sd	s0,288(sp)
    802099fe:	ee26                	sd	s1,280(sp)
    80209a00:	ea4a                	sd	s2,272(sp)
    80209a02:	e64e                	sd	s3,264(sp)
    80209a04:	1a00                	addi	s0,sp,304
    80209a06:	89b2                	mv	s3,a2
    if ((dp = enameparent(fd, path, name)) == NULL) {
    80209a08:	ed040613          	addi	a2,s0,-304
    80209a0c:	00000097          	auipc	ra,0x0
    80209a10:	fd0080e7          	jalr	-48(ra) # 802099dc <enameparent>
    80209a14:	84aa                	mv	s1,a0
    80209a16:	c535                	beqz	a0,80209a82 <create+0x8a>
    if (type == T_DIR) {
    80209a18:	0009879b          	sext.w	a5,s3
    80209a1c:	4705                	li	a4,1
    80209a1e:	06e78463          	beq	a5,a4,80209a86 <create+0x8e>
    }  else if (type == T_LINK) {
    80209a22:	4711                	li	a4,4
    80209a24:	0ae78463          	beq	a5,a4,80209acc <create+0xd4>
    elock(dp);
    80209a28:	fffff097          	auipc	ra,0xfffff
    80209a2c:	5f6080e7          	jalr	1526(ra) # 8020901e <elock>
    if ((ep = ealloc(dp, name, mode)) == NULL) {
    80209a30:	4601                	li	a2,0
    80209a32:	ed040593          	addi	a1,s0,-304
    80209a36:	8526                	mv	a0,s1
    80209a38:	00000097          	auipc	ra,0x0
    80209a3c:	b5a080e7          	jalr	-1190(ra) # 80209592 <ealloc>
    80209a40:	892a                	mv	s2,a0
    80209a42:	c545                	beqz	a0,80209aea <create+0xf2>
    if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
    80209a44:	2981                	sext.w	s3,s3
    80209a46:	4789                	li	a5,2
    80209a48:	00f99663          	bne	s3,a5,80209a54 <create+0x5c>
        (type == T_FILE && (ep->attribute & ATTR_DIRECTORY))) {
    80209a4c:	10094783          	lbu	a5,256(s2)
    80209a50:	8bc1                	andi	a5,a5,16
    80209a52:	efa1                	bnez	a5,80209aaa <create+0xb2>
    eunlock(dp);
    80209a54:	8526                	mv	a0,s1
    80209a56:	fffff097          	auipc	ra,0xfffff
    80209a5a:	612080e7          	jalr	1554(ra) # 80209068 <eunlock>
    eput(dp);
    80209a5e:	8526                	mv	a0,s1
    80209a60:	fffff097          	auipc	ra,0xfffff
    80209a64:	66a080e7          	jalr	1642(ra) # 802090ca <eput>
    elock(ep);
    80209a68:	854a                	mv	a0,s2
    80209a6a:	fffff097          	auipc	ra,0xfffff
    80209a6e:	5b4080e7          	jalr	1460(ra) # 8020901e <elock>
}
    80209a72:	854a                	mv	a0,s2
    80209a74:	70b2                	ld	ra,296(sp)
    80209a76:	7412                	ld	s0,288(sp)
    80209a78:	64f2                	ld	s1,280(sp)
    80209a7a:	6952                	ld	s2,272(sp)
    80209a7c:	69b2                	ld	s3,264(sp)
    80209a7e:	6155                	addi	sp,sp,304
    80209a80:	8082                	ret
        return NULL;
    80209a82:	892a                	mv	s2,a0
    80209a84:	b7fd                	j	80209a72 <create+0x7a>
    elock(dp);
    80209a86:	fffff097          	auipc	ra,0xfffff
    80209a8a:	598080e7          	jalr	1432(ra) # 8020901e <elock>
    if ((ep = ealloc(dp, name, mode)) == NULL) {
    80209a8e:	4641                	li	a2,16
    80209a90:	ed040593          	addi	a1,s0,-304
    80209a94:	8526                	mv	a0,s1
    80209a96:	00000097          	auipc	ra,0x0
    80209a9a:	afc080e7          	jalr	-1284(ra) # 80209592 <ealloc>
    80209a9e:	892a                	mv	s2,a0
    80209aa0:	c529                	beqz	a0,80209aea <create+0xf2>
    if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
    80209aa2:	10094783          	lbu	a5,256(s2)
    80209aa6:	8bc1                	andi	a5,a5,16
    80209aa8:	f7d5                	bnez	a5,80209a54 <create+0x5c>
        eunlock(dp);
    80209aaa:	8526                	mv	a0,s1
    80209aac:	fffff097          	auipc	ra,0xfffff
    80209ab0:	5bc080e7          	jalr	1468(ra) # 80209068 <eunlock>
        eput(ep);
    80209ab4:	854a                	mv	a0,s2
    80209ab6:	fffff097          	auipc	ra,0xfffff
    80209aba:	614080e7          	jalr	1556(ra) # 802090ca <eput>
        eput(dp);
    80209abe:	8526                	mv	a0,s1
    80209ac0:	fffff097          	auipc	ra,0xfffff
    80209ac4:	60a080e7          	jalr	1546(ra) # 802090ca <eput>
        return NULL;
    80209ac8:	4901                	li	s2,0
    80209aca:	b765                	j	80209a72 <create+0x7a>
    elock(dp);
    80209acc:	fffff097          	auipc	ra,0xfffff
    80209ad0:	552080e7          	jalr	1362(ra) # 8020901e <elock>
    if ((ep = ealloc(dp, name, mode)) == NULL) {
    80209ad4:	04000613          	li	a2,64
    80209ad8:	ed040593          	addi	a1,s0,-304
    80209adc:	8526                	mv	a0,s1
    80209ade:	00000097          	auipc	ra,0x0
    80209ae2:	ab4080e7          	jalr	-1356(ra) # 80209592 <ealloc>
    80209ae6:	892a                	mv	s2,a0
    80209ae8:	f535                	bnez	a0,80209a54 <create+0x5c>
        eunlock(dp);
    80209aea:	8526                	mv	a0,s1
    80209aec:	fffff097          	auipc	ra,0xfffff
    80209af0:	57c080e7          	jalr	1404(ra) # 80209068 <eunlock>
        eput(dp);
    80209af4:	8526                	mv	a0,s1
    80209af6:	fffff097          	auipc	ra,0xfffff
    80209afa:	5d4080e7          	jalr	1492(ra) # 802090ca <eput>
        return NULL;
    80209afe:	4901                	li	s2,0
    80209b00:	bf8d                	j	80209a72 <create+0x7a>

0000000080209b02 <fileinit>:
struct {
    struct Spinlock lock;
    struct file file[NFILE];
} ftable;

void fileinit(void) {
    80209b02:	1101                	addi	sp,sp,-32
    80209b04:	ec06                	sd	ra,24(sp)
    80209b06:	e822                	sd	s0,16(sp)
    80209b08:	e426                	sd	s1,8(sp)
    80209b0a:	e04a                	sd	s2,0(sp)
    80209b0c:	1000                	addi	s0,sp,32
    initLock(&ftable.lock, "ftable");
    80209b0e:	00005597          	auipc	a1,0x5
    80209b12:	81258593          	addi	a1,a1,-2030 # 8020e320 <__func__.2004+0x18>
    80209b16:	0042f517          	auipc	a0,0x42f
    80209b1a:	56250513          	addi	a0,a0,1378 # 80639078 <ftable>
    80209b1e:	ffffc097          	auipc	ra,0xffffc
    80209b22:	5fc080e7          	jalr	1532(ra) # 8020611a <initLock>
    struct file* f;
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
    80209b26:	0042f497          	auipc	s1,0x42f
    80209b2a:	56a48493          	addi	s1,s1,1386 # 80639090 <ftable+0x18>
    80209b2e:	00430917          	auipc	s2,0x430
    80209b32:	f6290913          	addi	s2,s2,-158 # 80639a90 <test_content_to_read>
        memset(f, 0, sizeof(struct file));
    80209b36:	02800613          	li	a2,40
    80209b3a:	4581                	li	a1,0
    80209b3c:	8526                	mv	a0,s1
    80209b3e:	ffffd097          	auipc	ra,0xffffd
    80209b42:	8dc080e7          	jalr	-1828(ra) # 8020641a <memset>
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
    80209b46:	02848493          	addi	s1,s1,40
    80209b4a:	ff2496e3          	bne	s1,s2,80209b36 <fileinit+0x34>
    }
}
    80209b4e:	60e2                	ld	ra,24(sp)
    80209b50:	6442                	ld	s0,16(sp)
    80209b52:	64a2                	ld	s1,8(sp)
    80209b54:	6902                	ld	s2,0(sp)
    80209b56:	6105                	addi	sp,sp,32
    80209b58:	8082                	ret

0000000080209b5a <filealloc>:

// Allocate a file structure.
struct file* filealloc(void) {
    80209b5a:	1101                	addi	sp,sp,-32
    80209b5c:	ec06                	sd	ra,24(sp)
    80209b5e:	e822                	sd	s0,16(sp)
    80209b60:	e426                	sd	s1,8(sp)
    80209b62:	1000                	addi	s0,sp,32
    struct file* f;

    acquireLock(&ftable.lock);
    80209b64:	0042f517          	auipc	a0,0x42f
    80209b68:	51450513          	addi	a0,a0,1300 # 80639078 <ftable>
    80209b6c:	ffffc097          	auipc	ra,0xffffc
    80209b70:	5f8080e7          	jalr	1528(ra) # 80206164 <acquireLock>
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
    80209b74:	0042f497          	auipc	s1,0x42f
    80209b78:	51c48493          	addi	s1,s1,1308 # 80639090 <ftable+0x18>
    80209b7c:	00430717          	auipc	a4,0x430
    80209b80:	f1470713          	addi	a4,a4,-236 # 80639a90 <test_content_to_read>
        if (f->ref == 0) {
    80209b84:	40dc                	lw	a5,4(s1)
    80209b86:	cf99                	beqz	a5,80209ba4 <filealloc+0x4a>
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
    80209b88:	02848493          	addi	s1,s1,40
    80209b8c:	fee49ce3          	bne	s1,a4,80209b84 <filealloc+0x2a>
            f->ref = 1;
            releaseLock(&ftable.lock);
            return f;
        }
    }
    releaseLock(&ftable.lock);
    80209b90:	0042f517          	auipc	a0,0x42f
    80209b94:	4e850513          	addi	a0,a0,1256 # 80639078 <ftable>
    80209b98:	ffffc097          	auipc	ra,0xffffc
    80209b9c:	648080e7          	jalr	1608(ra) # 802061e0 <releaseLock>
    return NULL;
    80209ba0:	4481                	li	s1,0
    80209ba2:	a819                	j	80209bb8 <filealloc+0x5e>
            f->ref = 1;
    80209ba4:	4785                	li	a5,1
    80209ba6:	c0dc                	sw	a5,4(s1)
            releaseLock(&ftable.lock);
    80209ba8:	0042f517          	auipc	a0,0x42f
    80209bac:	4d050513          	addi	a0,a0,1232 # 80639078 <ftable>
    80209bb0:	ffffc097          	auipc	ra,0xffffc
    80209bb4:	630080e7          	jalr	1584(ra) # 802061e0 <releaseLock>
}
    80209bb8:	8526                	mv	a0,s1
    80209bba:	60e2                	ld	ra,24(sp)
    80209bbc:	6442                	ld	s0,16(sp)
    80209bbe:	64a2                	ld	s1,8(sp)
    80209bc0:	6105                	addi	sp,sp,32
    80209bc2:	8082                	ret

0000000080209bc4 <filedup>:

// Increment ref count for file f.
struct file* filedup(struct file* f) {
    80209bc4:	1101                	addi	sp,sp,-32
    80209bc6:	ec06                	sd	ra,24(sp)
    80209bc8:	e822                	sd	s0,16(sp)
    80209bca:	e426                	sd	s1,8(sp)
    80209bcc:	1000                	addi	s0,sp,32
    80209bce:	84aa                	mv	s1,a0
    acquireLock(&ftable.lock);
    80209bd0:	0042f517          	auipc	a0,0x42f
    80209bd4:	4a850513          	addi	a0,a0,1192 # 80639078 <ftable>
    80209bd8:	ffffc097          	auipc	ra,0xffffc
    80209bdc:	58c080e7          	jalr	1420(ra) # 80206164 <acquireLock>
    if (f->ref < 1)
    80209be0:	40dc                	lw	a5,4(s1)
    80209be2:	02f05263          	blez	a5,80209c06 <filedup+0x42>
        panic("filedup");
    f->ref++;
    80209be6:	2785                	addiw	a5,a5,1
    80209be8:	c0dc                	sw	a5,4(s1)
    releaseLock(&ftable.lock);
    80209bea:	0042f517          	auipc	a0,0x42f
    80209bee:	48e50513          	addi	a0,a0,1166 # 80639078 <ftable>
    80209bf2:	ffffc097          	auipc	ra,0xffffc
    80209bf6:	5ee080e7          	jalr	1518(ra) # 802061e0 <releaseLock>
    return f;
}
    80209bfa:	8526                	mv	a0,s1
    80209bfc:	60e2                	ld	ra,24(sp)
    80209bfe:	6442                	ld	s0,16(sp)
    80209c00:	64a2                	ld	s1,8(sp)
    80209c02:	6105                	addi	sp,sp,32
    80209c04:	8082                	ret
        panic("filedup");
    80209c06:	00004697          	auipc	a3,0x4
    80209c0a:	72268693          	addi	a3,a3,1826 # 8020e328 <__func__.2004+0x20>
    80209c0e:	00005617          	auipc	a2,0x5
    80209c12:	95260613          	addi	a2,a2,-1710 # 8020e560 <__func__.1640>
    80209c16:	03000593          	li	a1,48
    80209c1a:	00004517          	auipc	a0,0x4
    80209c1e:	71650513          	addi	a0,a0,1814 # 8020e330 <__func__.2004+0x28>
    80209c22:	ffff7097          	auipc	ra,0xffff7
    80209c26:	f34080e7          	jalr	-204(ra) # 80200b56 <_panic_>

0000000080209c2a <fileclose>:

// Close file f.  (Decrement ref count, close when reaches 0.)
void fileclose(struct file* f) {
    80209c2a:	7139                	addi	sp,sp,-64
    80209c2c:	fc06                	sd	ra,56(sp)
    80209c2e:	f822                	sd	s0,48(sp)
    80209c30:	f426                	sd	s1,40(sp)
    80209c32:	f04a                	sd	s2,32(sp)
    80209c34:	ec4e                	sd	s3,24(sp)
    80209c36:	e852                	sd	s4,16(sp)
    80209c38:	e456                	sd	s5,8(sp)
    80209c3a:	0080                	addi	s0,sp,64
    80209c3c:	84aa                	mv	s1,a0
    struct file ff;

    // printf("[FILE CLOSE]%x %x\n", f, f->ref);
    acquireLock(&ftable.lock);
    80209c3e:	0042f517          	auipc	a0,0x42f
    80209c42:	43a50513          	addi	a0,a0,1082 # 80639078 <ftable>
    80209c46:	ffffc097          	auipc	ra,0xffffc
    80209c4a:	51e080e7          	jalr	1310(ra) # 80206164 <acquireLock>
    if (f->ref < 1)
    80209c4e:	40dc                	lw	a5,4(s1)
    80209c50:	04f05863          	blez	a5,80209ca0 <fileclose+0x76>
        panic("fileclose");
    if (--f->ref > 0) {
    80209c54:	37fd                	addiw	a5,a5,-1
    80209c56:	0007871b          	sext.w	a4,a5
    80209c5a:	c0dc                	sw	a5,4(s1)
    80209c5c:	06e04463          	bgtz	a4,80209cc4 <fileclose+0x9a>
        releaseLock(&ftable.lock);
        return;
    }
    ff = *f;
    80209c60:	0004a903          	lw	s2,0(s1)
    80209c64:	0094ca03          	lbu	s4,9(s1)
    80209c68:	0104b983          	ld	s3,16(s1)
    80209c6c:	0184ba83          	ld	s5,24(s1)
    f->ref = 0;
    80209c70:	0004a223          	sw	zero,4(s1)
    f->type = FD_NONE;
    80209c74:	0004a023          	sw	zero,0(s1)
    releaseLock(&ftable.lock);
    80209c78:	0042f517          	auipc	a0,0x42f
    80209c7c:	40050513          	addi	a0,a0,1024 # 80639078 <ftable>
    80209c80:	ffffc097          	auipc	ra,0xffffc
    80209c84:	560080e7          	jalr	1376(ra) # 802061e0 <releaseLock>

    // printf("FILECLOSE %x\n", ff.type);
    if (ff.type == FD_PIPE) {
    80209c88:	4785                	li	a5,1
    80209c8a:	04f90e63          	beq	s2,a5,80209ce6 <fileclose+0xbc>
        pipeclose(ff.pipe, ff.writable);
    } else if (ff.type == FD_ENTRY) {
    80209c8e:	4789                	li	a5,2
    80209c90:	04f91263          	bne	s2,a5,80209cd4 <fileclose+0xaa>
        eput(ff.ep);
    80209c94:	8556                	mv	a0,s5
    80209c96:	fffff097          	auipc	ra,0xfffff
    80209c9a:	434080e7          	jalr	1076(ra) # 802090ca <eput>
    80209c9e:	a81d                	j	80209cd4 <fileclose+0xaa>
        panic("fileclose");
    80209ca0:	00004697          	auipc	a3,0x4
    80209ca4:	69868693          	addi	a3,a3,1688 # 8020e338 <__func__.2004+0x30>
    80209ca8:	00004617          	auipc	a2,0x4
    80209cac:	6f060613          	addi	a2,a2,1776 # 8020e398 <__func__.1645>
    80209cb0:	03d00593          	li	a1,61
    80209cb4:	00004517          	auipc	a0,0x4
    80209cb8:	67c50513          	addi	a0,a0,1660 # 8020e330 <__func__.2004+0x28>
    80209cbc:	ffff7097          	auipc	ra,0xffff7
    80209cc0:	e9a080e7          	jalr	-358(ra) # 80200b56 <_panic_>
        releaseLock(&ftable.lock);
    80209cc4:	0042f517          	auipc	a0,0x42f
    80209cc8:	3b450513          	addi	a0,a0,948 # 80639078 <ftable>
    80209ccc:	ffffc097          	auipc	ra,0xffffc
    80209cd0:	514080e7          	jalr	1300(ra) # 802061e0 <releaseLock>
    } else if (ff.type == FD_DEVICE) {
    }
}
    80209cd4:	70e2                	ld	ra,56(sp)
    80209cd6:	7442                	ld	s0,48(sp)
    80209cd8:	74a2                	ld	s1,40(sp)
    80209cda:	7902                	ld	s2,32(sp)
    80209cdc:	69e2                	ld	s3,24(sp)
    80209cde:	6a42                	ld	s4,16(sp)
    80209ce0:	6aa2                	ld	s5,8(sp)
    80209ce2:	6121                	addi	sp,sp,64
    80209ce4:	8082                	ret
        pipeclose(ff.pipe, ff.writable);
    80209ce6:	85d2                	mv	a1,s4
    80209ce8:	854e                	mv	a0,s3
    80209cea:	00000097          	auipc	ra,0x0
    80209cee:	5fa080e7          	jalr	1530(ra) # 8020a2e4 <pipeclose>
    80209cf2:	b7cd                	j	80209cd4 <fileclose+0xaa>

0000000080209cf4 <filestat>:

// Get metadata about file f.
// addr is a user virtual address, pointing to a struct stat.
int filestat(struct file* f, u64 addr) {
    80209cf4:	7171                	addi	sp,sp,-176
    80209cf6:	f506                	sd	ra,168(sp)
    80209cf8:	f122                	sd	s0,160(sp)
    80209cfa:	ed26                	sd	s1,152(sp)
    80209cfc:	e94a                	sd	s2,144(sp)
    80209cfe:	e54e                	sd	s3,136(sp)
    80209d00:	1900                	addi	s0,sp,176
    80209d02:	84aa                	mv	s1,a0
    80209d04:	89ae                	mv	s3,a1
    struct Process *p = myproc();
    80209d06:	ffff9097          	auipc	ra,0xffff9
    80209d0a:	d46080e7          	jalr	-698(ra) # 80202a4c <myproc>
    struct stat st;

    if (f->type == FD_ENTRY) {
    80209d0e:	4098                	lw	a4,0(s1)
    80209d10:	4789                	li	a5,2
    80209d12:	04f71863          	bne	a4,a5,80209d62 <filestat+0x6e>
    80209d16:	892a                	mv	s2,a0
        elock(f->ep);
    80209d18:	6c88                	ld	a0,24(s1)
    80209d1a:	fffff097          	auipc	ra,0xfffff
    80209d1e:	304080e7          	jalr	772(ra) # 8020901e <elock>
        estat(f->ep, &st);
    80209d22:	f5040593          	addi	a1,s0,-176
    80209d26:	6c88                	ld	a0,24(s1)
    80209d28:	fffff097          	auipc	ra,0xfffff
    80209d2c:	4ae080e7          	jalr	1198(ra) # 802091d6 <estat>
        eunlock(f->ep);
    80209d30:	6c88                	ld	a0,24(s1)
    80209d32:	fffff097          	auipc	ra,0xfffff
    80209d36:	336080e7          	jalr	822(ra) # 80209068 <eunlock>
        if(copyout(p->pgdir, addr, (char *)&st, sizeof(st)) < 0)
    80209d3a:	08000693          	li	a3,128
    80209d3e:	f5040613          	addi	a2,s0,-176
    80209d42:	85ce                	mv	a1,s3
    80209d44:	16893503          	ld	a0,360(s2)
    80209d48:	ffff8097          	auipc	ra,0xffff8
    80209d4c:	702080e7          	jalr	1794(ra) # 8020244a <copyout>
    80209d50:	41f5551b          	sraiw	a0,a0,0x1f
            return -1;
        return 0;
    }
    return -1;
}
    80209d54:	70aa                	ld	ra,168(sp)
    80209d56:	740a                	ld	s0,160(sp)
    80209d58:	64ea                	ld	s1,152(sp)
    80209d5a:	694a                	ld	s2,144(sp)
    80209d5c:	69aa                	ld	s3,136(sp)
    80209d5e:	614d                	addi	sp,sp,176
    80209d60:	8082                	ret
    return -1;
    80209d62:	557d                	li	a0,-1
    80209d64:	bfc5                	j	80209d54 <filestat+0x60>

0000000080209d66 <fileread>:

// Read from file f.
// addr is a user virtual address.
int fileread(struct file* f, u64 addr, int n) {
    80209d66:	7179                	addi	sp,sp,-48
    80209d68:	f406                	sd	ra,40(sp)
    80209d6a:	f022                	sd	s0,32(sp)
    80209d6c:	ec26                	sd	s1,24(sp)
    80209d6e:	e84a                	sd	s2,16(sp)
    80209d70:	e44e                	sd	s3,8(sp)
    80209d72:	1800                	addi	s0,sp,48
    int r = 0;

    if (f->readable == 0)
    80209d74:	00854783          	lbu	a5,8(a0)
    80209d78:	cfd5                	beqz	a5,80209e34 <fileread+0xce>
    80209d7a:	84aa                	mv	s1,a0
    80209d7c:	89ae                	mv	s3,a1
    80209d7e:	8932                	mv	s2,a2
        return -1;

    switch (f->type) {
    80209d80:	411c                	lw	a5,0(a0)
    80209d82:	4709                	li	a4,2
    80209d84:	06e78e63          	beq	a5,a4,80209e00 <fileread+0x9a>
    80209d88:	470d                	li	a4,3
    80209d8a:	04e78563          	beq	a5,a4,80209dd4 <fileread+0x6e>
    80209d8e:	4705                	li	a4,1
    80209d90:	02e78463          	beq	a5,a4,80209db8 <fileread+0x52>
            if ((r = eread(f->ep, 1, addr, f->off, n)) > 0)
                f->off += r;
            eunlock(f->ep);
            break;
        default:
            panic("fileread");
    80209d94:	00004697          	auipc	a3,0x4
    80209d98:	5b468693          	addi	a3,a3,1460 # 8020e348 <__func__.2004+0x40>
    80209d9c:	00004617          	auipc	a2,0x4
    80209da0:	60c60613          	addi	a2,a2,1548 # 8020e3a8 <__func__.1663>
    80209da4:	07900593          	li	a1,121
    80209da8:	00004517          	auipc	a0,0x4
    80209dac:	58850513          	addi	a0,a0,1416 # 8020e330 <__func__.2004+0x28>
    80209db0:	ffff7097          	auipc	ra,0xffff7
    80209db4:	da6080e7          	jalr	-602(ra) # 80200b56 <_panic_>
            r = piperead(f->pipe, addr, n);
    80209db8:	6908                	ld	a0,16(a0)
    80209dba:	00000097          	auipc	ra,0x0
    80209dbe:	6aa080e7          	jalr	1706(ra) # 8020a464 <piperead>
    80209dc2:	892a                	mv	s2,a0
    }

    return r;
}
    80209dc4:	854a                	mv	a0,s2
    80209dc6:	70a2                	ld	ra,40(sp)
    80209dc8:	7402                	ld	s0,32(sp)
    80209dca:	64e2                	ld	s1,24(sp)
    80209dcc:	6942                	ld	s2,16(sp)
    80209dce:	69a2                	ld	s3,8(sp)
    80209dd0:	6145                	addi	sp,sp,48
    80209dd2:	8082                	ret
            if (f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
    80209dd4:	02451783          	lh	a5,36(a0)
    80209dd8:	03079693          	slli	a3,a5,0x30
    80209ddc:	92c1                	srli	a3,a3,0x30
    80209dde:	470d                	li	a4,3
    80209de0:	04d76c63          	bltu	a4,a3,80209e38 <fileread+0xd2>
    80209de4:	0792                	slli	a5,a5,0x4
    80209de6:	0042f717          	auipc	a4,0x42f
    80209dea:	25270713          	addi	a4,a4,594 # 80639038 <devsw>
    80209dee:	97ba                	add	a5,a5,a4
    80209df0:	639c                	ld	a5,0(a5)
    80209df2:	c7a9                	beqz	a5,80209e3c <fileread+0xd6>
            r = devsw[f->major].read(1, addr, 0, n);
    80209df4:	86b2                	mv	a3,a2
    80209df6:	4601                	li	a2,0
    80209df8:	4505                	li	a0,1
    80209dfa:	9782                	jalr	a5
    80209dfc:	892a                	mv	s2,a0
            break;
    80209dfe:	b7d9                	j	80209dc4 <fileread+0x5e>
            elock(f->ep);
    80209e00:	6d08                	ld	a0,24(a0)
    80209e02:	fffff097          	auipc	ra,0xfffff
    80209e06:	21c080e7          	jalr	540(ra) # 8020901e <elock>
            if ((r = eread(f->ep, 1, addr, f->off, n)) > 0)
    80209e0a:	874a                	mv	a4,s2
    80209e0c:	5094                	lw	a3,32(s1)
    80209e0e:	864e                	mv	a2,s3
    80209e10:	4585                	li	a1,1
    80209e12:	6c88                	ld	a0,24(s1)
    80209e14:	fffff097          	auipc	ra,0xfffff
    80209e18:	88e080e7          	jalr	-1906(ra) # 802086a2 <eread>
    80209e1c:	892a                	mv	s2,a0
    80209e1e:	00a05563          	blez	a0,80209e28 <fileread+0xc2>
                f->off += r;
    80209e22:	509c                	lw	a5,32(s1)
    80209e24:	9fa9                	addw	a5,a5,a0
    80209e26:	d09c                	sw	a5,32(s1)
            eunlock(f->ep);
    80209e28:	6c88                	ld	a0,24(s1)
    80209e2a:	fffff097          	auipc	ra,0xfffff
    80209e2e:	23e080e7          	jalr	574(ra) # 80209068 <eunlock>
            break;
    80209e32:	bf49                	j	80209dc4 <fileread+0x5e>
        return -1;
    80209e34:	597d                	li	s2,-1
    80209e36:	b779                	j	80209dc4 <fileread+0x5e>
                return -1;
    80209e38:	597d                	li	s2,-1
    80209e3a:	b769                	j	80209dc4 <fileread+0x5e>
    80209e3c:	597d                	li	s2,-1
    80209e3e:	b759                	j	80209dc4 <fileread+0x5e>

0000000080209e40 <filewrite>:

// Write to file f.
// addr is a user virtual address.
int filewrite(struct file* f, u64 addr, int n) {
    80209e40:	7179                	addi	sp,sp,-48
    80209e42:	f406                	sd	ra,40(sp)
    80209e44:	f022                	sd	s0,32(sp)
    80209e46:	ec26                	sd	s1,24(sp)
    80209e48:	e84a                	sd	s2,16(sp)
    80209e4a:	e44e                	sd	s3,8(sp)
    80209e4c:	e052                	sd	s4,0(sp)
    80209e4e:	1800                	addi	s0,sp,48
    int ret = 0;

    if (f->writable == 0)
    80209e50:	00954783          	lbu	a5,9(a0)
    80209e54:	c7e5                	beqz	a5,80209f3c <filewrite+0xfc>
    80209e56:	84aa                	mv	s1,a0
    80209e58:	892e                	mv	s2,a1
    80209e5a:	89b2                	mv	s3,a2
        return -1;

    if (f->type == FD_PIPE) {
    80209e5c:	411c                	lw	a5,0(a0)
    80209e5e:	4705                	li	a4,1
    80209e60:	04e78963          	beq	a5,a4,80209eb2 <filewrite+0x72>
        ret = pipewrite(f->pipe, addr, n);
        assert(ret != 0);
    } else if (f->type == FD_DEVICE) {
    80209e64:	470d                	li	a4,3
    80209e66:	06e78d63          	beq	a5,a4,80209ee0 <filewrite+0xa0>
        if (f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
            return -1;
        ret = devsw[f->major].write(1, addr, 0, n);
    } else if (f->type == FD_ENTRY) {
    80209e6a:	4709                	li	a4,2
    80209e6c:	0ae79663          	bne	a5,a4,80209f18 <filewrite+0xd8>
        elock(f->ep);
    80209e70:	6d08                	ld	a0,24(a0)
    80209e72:	fffff097          	auipc	ra,0xfffff
    80209e76:	1ac080e7          	jalr	428(ra) # 8020901e <elock>
        if (ewrite(f->ep, 1, addr, f->off, n) == n) {
    80209e7a:	00098a1b          	sext.w	s4,s3
    80209e7e:	8752                	mv	a4,s4
    80209e80:	5094                	lw	a3,32(s1)
    80209e82:	864a                	mv	a2,s2
    80209e84:	4585                	li	a1,1
    80209e86:	6c88                	ld	a0,24(s1)
    80209e88:	fffff097          	auipc	ra,0xfffff
    80209e8c:	912080e7          	jalr	-1774(ra) # 8020879a <ewrite>
            ret = n;
            f->off += n;
        } else {
            ret = -1;
    80209e90:	597d                	li	s2,-1
        if (ewrite(f->ep, 1, addr, f->off, n) == n) {
    80209e92:	07350c63          	beq	a0,s3,80209f0a <filewrite+0xca>
        }
        eunlock(f->ep);
    80209e96:	6c88                	ld	a0,24(s1)
    80209e98:	fffff097          	auipc	ra,0xfffff
    80209e9c:	1d0080e7          	jalr	464(ra) # 80209068 <eunlock>
    } else {
        panic("filewrite");
    }

    return ret;
}
    80209ea0:	854a                	mv	a0,s2
    80209ea2:	70a2                	ld	ra,40(sp)
    80209ea4:	7402                	ld	s0,32(sp)
    80209ea6:	64e2                	ld	s1,24(sp)
    80209ea8:	6942                	ld	s2,16(sp)
    80209eaa:	69a2                	ld	s3,8(sp)
    80209eac:	6a02                	ld	s4,0(sp)
    80209eae:	6145                	addi	sp,sp,48
    80209eb0:	8082                	ret
        ret = pipewrite(f->pipe, addr, n);
    80209eb2:	6908                	ld	a0,16(a0)
    80209eb4:	00000097          	auipc	ra,0x0
    80209eb8:	4bc080e7          	jalr	1212(ra) # 8020a370 <pipewrite>
    80209ebc:	892a                	mv	s2,a0
        assert(ret != 0);
    80209ebe:	00a036b3          	snez	a3,a0
    80209ec2:	00004617          	auipc	a2,0x4
    80209ec6:	4f660613          	addi	a2,a2,1270 # 8020e3b8 <__func__.1670>
    80209eca:	08900593          	li	a1,137
    80209ece:	00004517          	auipc	a0,0x4
    80209ed2:	46250513          	addi	a0,a0,1122 # 8020e330 <__func__.2004+0x28>
    80209ed6:	ffff7097          	auipc	ra,0xffff7
    80209eda:	cf6080e7          	jalr	-778(ra) # 80200bcc <_assert_>
    80209ede:	b7c9                	j	80209ea0 <filewrite+0x60>
        if (f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
    80209ee0:	02451783          	lh	a5,36(a0)
    80209ee4:	03079693          	slli	a3,a5,0x30
    80209ee8:	92c1                	srli	a3,a3,0x30
    80209eea:	04d76b63          	bltu	a4,a3,80209f40 <filewrite+0x100>
    80209eee:	0792                	slli	a5,a5,0x4
    80209ef0:	0042f717          	auipc	a4,0x42f
    80209ef4:	14870713          	addi	a4,a4,328 # 80639038 <devsw>
    80209ef8:	97ba                	add	a5,a5,a4
    80209efa:	679c                	ld	a5,8(a5)
    80209efc:	c7a1                	beqz	a5,80209f44 <filewrite+0x104>
        ret = devsw[f->major].write(1, addr, 0, n);
    80209efe:	86b2                	mv	a3,a2
    80209f00:	4601                	li	a2,0
    80209f02:	4505                	li	a0,1
    80209f04:	9782                	jalr	a5
    80209f06:	892a                	mv	s2,a0
    80209f08:	bf61                	j	80209ea0 <filewrite+0x60>
            f->off += n;
    80209f0a:	509c                	lw	a5,32(s1)
    80209f0c:	01478a3b          	addw	s4,a5,s4
    80209f10:	0344a023          	sw	s4,32(s1)
            ret = n;
    80209f14:	894e                	mv	s2,s3
    80209f16:	b741                	j	80209e96 <filewrite+0x56>
        panic("filewrite");
    80209f18:	00004697          	auipc	a3,0x4
    80209f1c:	44068693          	addi	a3,a3,1088 # 8020e358 <__func__.2004+0x50>
    80209f20:	00004617          	auipc	a2,0x4
    80209f24:	49860613          	addi	a2,a2,1176 # 8020e3b8 <__func__.1670>
    80209f28:	09800593          	li	a1,152
    80209f2c:	00004517          	auipc	a0,0x4
    80209f30:	40450513          	addi	a0,a0,1028 # 8020e330 <__func__.2004+0x28>
    80209f34:	ffff7097          	auipc	ra,0xffff7
    80209f38:	c22080e7          	jalr	-990(ra) # 80200b56 <_panic_>
        return -1;
    80209f3c:	597d                	li	s2,-1
    80209f3e:	b78d                	j	80209ea0 <filewrite+0x60>
            return -1;
    80209f40:	597d                	li	s2,-1
    80209f42:	bfb9                	j	80209ea0 <filewrite+0x60>
    80209f44:	597d                	li	s2,-1
    80209f46:	bfa9                	j	80209ea0 <filewrite+0x60>

0000000080209f48 <dirnext>:

// Read from dir f.
// addr is a user virtual address.
int dirnext(struct file* f, u64 addr) {
    80209f48:	dd010113          	addi	sp,sp,-560
    80209f4c:	22113423          	sd	ra,552(sp)
    80209f50:	22813023          	sd	s0,544(sp)
    80209f54:	20913c23          	sd	s1,536(sp)
    80209f58:	21213823          	sd	s2,528(sp)
    80209f5c:	21313423          	sd	s3,520(sp)
    80209f60:	21413023          	sd	s4,512(sp)
    80209f64:	1c00                	addi	s0,sp,560
    80209f66:	84aa                	mv	s1,a0
    80209f68:	8a2e                	mv	s4,a1
    struct Process* p = myproc();
    80209f6a:	ffff9097          	auipc	ra,0xffff9
    80209f6e:	ae2080e7          	jalr	-1310(ra) # 80202a4c <myproc>

    if (f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    80209f72:	0084c783          	lbu	a5,8(s1)
    80209f76:	cfc1                	beqz	a5,8020a00e <dirnext+0xc6>
    80209f78:	89aa                	mv	s3,a0
    80209f7a:	6c98                	ld	a4,24(s1)
    80209f7c:	10074783          	lbu	a5,256(a4)
    80209f80:	8bc1                	andi	a5,a5,16
        return -1;
    80209f82:	557d                	li	a0,-1
    if (f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    80209f84:	c7d1                	beqz	a5,8020a010 <dirnext+0xc8>

    struct dirent de;
    struct stat st;
    int count = 0;
    80209f86:	dc042e23          	sw	zero,-548(s0)
    int ret;
    elock(f->ep);
    80209f8a:	853a                	mv	a0,a4
    80209f8c:	fffff097          	auipc	ra,0xfffff
    80209f90:	092080e7          	jalr	146(ra) # 8020901e <elock>
    while ((ret = enext(f->ep, &de, f->off, &count)) ==
    80209f94:	a801                	j	80209fa4 <dirnext+0x5c>
           0) {  // skip empty entry
        f->off += count * 32;
    80209f96:	ddc42783          	lw	a5,-548(s0)
    80209f9a:	0057971b          	slliw	a4,a5,0x5
    80209f9e:	509c                	lw	a5,32(s1)
    80209fa0:	9fb9                	addw	a5,a5,a4
    80209fa2:	d09c                	sw	a5,32(s1)
    while ((ret = enext(f->ep, &de, f->off, &count)) ==
    80209fa4:	ddc40693          	addi	a3,s0,-548
    80209fa8:	5090                	lw	a2,32(s1)
    80209faa:	e6040593          	addi	a1,s0,-416
    80209fae:	6c88                	ld	a0,24(s1)
    80209fb0:	fffff097          	auipc	ra,0xfffff
    80209fb4:	298080e7          	jalr	664(ra) # 80209248 <enext>
    80209fb8:	892a                	mv	s2,a0
    80209fba:	dd71                	beqz	a0,80209f96 <dirnext+0x4e>
    }
    eunlock(f->ep);
    80209fbc:	6c88                	ld	a0,24(s1)
    80209fbe:	fffff097          	auipc	ra,0xfffff
    80209fc2:	0aa080e7          	jalr	170(ra) # 80209068 <eunlock>
    if (ret == -1)
    80209fc6:	57fd                	li	a5,-1
        return 0;
    80209fc8:	4501                	li	a0,0
    if (ret == -1)
    80209fca:	04f90363          	beq	s2,a5,8020a010 <dirnext+0xc8>

    f->off += count * 32;
    80209fce:	ddc42783          	lw	a5,-548(s0)
    80209fd2:	0057971b          	slliw	a4,a5,0x5
    80209fd6:	509c                	lw	a5,32(s1)
    80209fd8:	9fb9                	addw	a5,a5,a4
    80209fda:	d09c                	sw	a5,32(s1)
    estat(&de, &st);
    80209fdc:	de040593          	addi	a1,s0,-544
    80209fe0:	e6040513          	addi	a0,s0,-416
    80209fe4:	fffff097          	auipc	ra,0xfffff
    80209fe8:	1f2080e7          	jalr	498(ra) # 802091d6 <estat>
    if (copyout(p->pgdir, addr, (char*)&st, sizeof(st)) < 0)
    80209fec:	08000693          	li	a3,128
    80209ff0:	de040613          	addi	a2,s0,-544
    80209ff4:	85d2                	mv	a1,s4
    80209ff6:	1689b503          	ld	a0,360(s3)
    80209ffa:	ffff8097          	auipc	ra,0xffff8
    80209ffe:	450080e7          	jalr	1104(ra) # 8020244a <copyout>
    8020a002:	87aa                	mv	a5,a0
        return -1;

    return 1;
    8020a004:	4505                	li	a0,1
    if (copyout(p->pgdir, addr, (char*)&st, sizeof(st)) < 0)
    8020a006:	0007d563          	bgez	a5,8020a010 <dirnext+0xc8>
        return -1;
    8020a00a:	557d                	li	a0,-1
    8020a00c:	a011                	j	8020a010 <dirnext+0xc8>
        return -1;
    8020a00e:	557d                	li	a0,-1
}
    8020a010:	22813083          	ld	ra,552(sp)
    8020a014:	22013403          	ld	s0,544(sp)
    8020a018:	21813483          	ld	s1,536(sp)
    8020a01c:	21013903          	ld	s2,528(sp)
    8020a020:	20813983          	ld	s3,520(sp)
    8020a024:	20013a03          	ld	s4,512(sp)
    8020a028:	23010113          	addi	sp,sp,560
    8020a02c:	8082                	ret

000000008020a02e <do_mmap>:
u64 do_mmap(struct file* fd, u64 start, u64 len, int perm, int type, u64 off) {
    8020a02e:	7119                	addi	sp,sp,-128
    8020a030:	fc86                	sd	ra,120(sp)
    8020a032:	f8a2                	sd	s0,112(sp)
    8020a034:	f4a6                	sd	s1,104(sp)
    8020a036:	f0ca                	sd	s2,96(sp)
    8020a038:	ecce                	sd	s3,88(sp)
    8020a03a:	e8d2                	sd	s4,80(sp)
    8020a03c:	e4d6                	sd	s5,72(sp)
    8020a03e:	e0da                	sd	s6,64(sp)
    8020a040:	fc5e                	sd	s7,56(sp)
    8020a042:	f862                	sd	s8,48(sp)
    8020a044:	f466                	sd	s9,40(sp)
    8020a046:	f06a                	sd	s10,32(sp)
    8020a048:	ec6e                	sd	s11,24(sp)
    8020a04a:	0100                	addi	s0,sp,128
    8020a04c:	8d2a                	mv	s10,a0
    8020a04e:	8a2e                	mv	s4,a1
    8020a050:	8c32                	mv	s8,a2
    8020a052:	8cb6                	mv	s9,a3
    8020a054:	8dbe                	mv	s11,a5
    bool alloc = (start == 0);
    printf("heapBottom = %x\n", myproc()->heapBottom);
    8020a056:	ffff9097          	auipc	ra,0xffff9
    8020a05a:	9f6080e7          	jalr	-1546(ra) # 80202a4c <myproc>
    8020a05e:	5d053583          	ld	a1,1488(a0)
    8020a062:	00004517          	auipc	a0,0x4
    8020a066:	30650513          	addi	a0,a0,774 # 8020e368 <__func__.2004+0x60>
    8020a06a:	ffff7097          	auipc	ra,0xffff7
    8020a06e:	a60080e7          	jalr	-1440(ra) # 80200aca <printf>
    if (alloc) {
    8020a072:	020a0563          	beqz	s4,8020a09c <do_mmap+0x6e>
        myproc()->heapBottom = UP_ALIGN(myproc()->heapBottom, PAGE_SIZE);
        start = myproc()->heapBottom;
        myproc()->heapBottom = UP_ALIGN(myproc()->heapBottom + len, PAGE_SIZE);
    }
    u64 addr = start, end = start + len;
    8020a076:	018a09b3          	add	s3,s4,s8
    start = DOWN_ALIGN(start, 12);
    8020a07a:	ff4a7493          	andi	s1,s4,-12
    while (start < end) {
    8020a07e:	1134ff63          	bgeu	s1,s3,8020a19c <do_mmap+0x16e>
        }
        PhysicalPage* page;
        if (pageAlloc(&page) < 0) {
            return -1;
        }
        pageInsert(myproc()->pgdir, start, page2pa(page), perm | PTE_USER);
    8020a082:	010ceb93          	ori	s7,s9,16
    int hartId;
} PhysicalPage;

inline u32 page2PPN(PhysicalPage *page) {
    extern PhysicalPage pages[];
    return page - pages;
    8020a086:	001d8b17          	auipc	s6,0x1d8
    8020a08a:	3f2b0b13          	addi	s6,s6,1010 # 803e2478 <pages>
    8020a08e:	00004a97          	auipc	s5,0x4
    8020a092:	4e2a8a93          	addi	s5,s5,1250 # 8020e570 <__func__.1590+0x8>
    return pages + ppn;
}


inline u64 page2pa(PhysicalPage *page) {
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020a096:	4905                	li	s2,1
    8020a098:	097e                	slli	s2,s2,0x1f
    8020a09a:	a865                	j	8020a152 <do_mmap+0x124>
        myproc()->heapBottom = UP_ALIGN(myproc()->heapBottom, PAGE_SIZE);
    8020a09c:	ffff9097          	auipc	ra,0xffff9
    8020a0a0:	9b0080e7          	jalr	-1616(ra) # 80202a4c <myproc>
    8020a0a4:	5d053903          	ld	s2,1488(a0)
    8020a0a8:	197d                	addi	s2,s2,-1
    8020a0aa:	74fd                	lui	s1,0xfffff
    8020a0ac:	00997933          	and	s2,s2,s1
    8020a0b0:	ffff9097          	auipc	ra,0xffff9
    8020a0b4:	99c080e7          	jalr	-1636(ra) # 80202a4c <myproc>
    8020a0b8:	6985                	lui	s3,0x1
    8020a0ba:	994e                	add	s2,s2,s3
    8020a0bc:	5d253823          	sd	s2,1488(a0)
        start = myproc()->heapBottom;
    8020a0c0:	ffff9097          	auipc	ra,0xffff9
    8020a0c4:	98c080e7          	jalr	-1652(ra) # 80202a4c <myproc>
    8020a0c8:	5d053a03          	ld	s4,1488(a0)
        myproc()->heapBottom = UP_ALIGN(myproc()->heapBottom + len, PAGE_SIZE);
    8020a0cc:	ffff9097          	auipc	ra,0xffff9
    8020a0d0:	980080e7          	jalr	-1664(ra) # 80202a4c <myproc>
    8020a0d4:	fffc0793          	addi	a5,s8,-1
    8020a0d8:	5d053703          	ld	a4,1488(a0)
    8020a0dc:	97ba                	add	a5,a5,a4
    8020a0de:	8cfd                	and	s1,s1,a5
    8020a0e0:	ffff9097          	auipc	ra,0xffff9
    8020a0e4:	96c080e7          	jalr	-1684(ra) # 80202a4c <myproc>
    8020a0e8:	94ce                	add	s1,s1,s3
    8020a0ea:	5c953823          	sd	s1,1488(a0)
    8020a0ee:	b761                	j	8020a076 <do_mmap+0x48>
            cowHandler(myproc()->pgdir, start);
    8020a0f0:	ffff9097          	auipc	ra,0xffff9
    8020a0f4:	95c080e7          	jalr	-1700(ra) # 80202a4c <myproc>
    8020a0f8:	85a6                	mv	a1,s1
    8020a0fa:	16853503          	ld	a0,360(a0)
    8020a0fe:	ffff8097          	auipc	ra,0xffff8
    8020a102:	0e8080e7          	jalr	232(ra) # 802021e6 <cowHandler>
        if (pageAlloc(&page) < 0) {
    8020a106:	f8840513          	addi	a0,s0,-120
    8020a10a:	ffff8097          	auipc	ra,0xffff8
    8020a10e:	b74080e7          	jalr	-1164(ra) # 80201c7e <pageAlloc>
    8020a112:	06054563          	bltz	a0,8020a17c <do_mmap+0x14e>
        pageInsert(myproc()->pgdir, start, page2pa(page), perm | PTE_USER);
    8020a116:	ffff9097          	auipc	ra,0xffff9
    8020a11a:	936080e7          	jalr	-1738(ra) # 80202a4c <myproc>
    return page - pages;
    8020a11e:	f8843603          	ld	a2,-120(s0)
    8020a122:	41660633          	sub	a2,a2,s6
    8020a126:	860d                	srai	a2,a2,0x3
    8020a128:	000ab783          	ld	a5,0(s5)
    8020a12c:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020a130:	00c6161b          	slliw	a2,a2,0xc
    8020a134:	1602                	slli	a2,a2,0x20
    8020a136:	9201                	srli	a2,a2,0x20
    8020a138:	86de                	mv	a3,s7
    8020a13a:	964a                	add	a2,a2,s2
    8020a13c:	85a6                	mv	a1,s1
    8020a13e:	16853503          	ld	a0,360(a0)
    8020a142:	ffff8097          	auipc	ra,0xffff8
    8020a146:	ed8080e7          	jalr	-296(ra) # 8020201a <pageInsert>
        start += PGSIZE;
    8020a14a:	6785                	lui	a5,0x1
    8020a14c:	94be                	add	s1,s1,a5
    while (start < end) {
    8020a14e:	0534f763          	bgeu	s1,s3,8020a19c <do_mmap+0x16e>
        u64 pa = pageLookup(myproc()->pgdir, start, &pte);
    8020a152:	ffff9097          	auipc	ra,0xffff9
    8020a156:	8fa080e7          	jalr	-1798(ra) # 80202a4c <myproc>
    8020a15a:	f8040613          	addi	a2,s0,-128
    8020a15e:	85a6                	mv	a1,s1
    8020a160:	16853503          	ld	a0,360(a0)
    8020a164:	ffff8097          	auipc	ra,0xffff8
    8020a168:	cac080e7          	jalr	-852(ra) # 80201e10 <pageLookup>
        if (pa > 0 && (*pte & PTE_COW)) {
    8020a16c:	dd49                	beqz	a0,8020a106 <do_mmap+0xd8>
    8020a16e:	f8043783          	ld	a5,-128(s0)
    8020a172:	639c                	ld	a5,0(a5)
    8020a174:	1007f793          	andi	a5,a5,256
    8020a178:	d7d9                	beqz	a5,8020a106 <do_mmap+0xd8>
    8020a17a:	bf9d                	j	8020a0f0 <do_mmap+0xc2>
            return -1;
    8020a17c:	557d                	li	a0,-1
    if (fileread(fd, addr, len)) {
        return addr;
    } else {
        return -1;
    }
    8020a17e:	70e6                	ld	ra,120(sp)
    8020a180:	7446                	ld	s0,112(sp)
    8020a182:	74a6                	ld	s1,104(sp)
    8020a184:	7906                	ld	s2,96(sp)
    8020a186:	69e6                	ld	s3,88(sp)
    8020a188:	6a46                	ld	s4,80(sp)
    8020a18a:	6aa6                	ld	s5,72(sp)
    8020a18c:	6b06                	ld	s6,64(sp)
    8020a18e:	7be2                	ld	s7,56(sp)
    8020a190:	7c42                	ld	s8,48(sp)
    8020a192:	7ca2                	ld	s9,40(sp)
    8020a194:	7d02                	ld	s10,32(sp)
    8020a196:	6de2                	ld	s11,24(sp)
    8020a198:	6109                	addi	sp,sp,128
    8020a19a:	8082                	ret
    printf("mapping %lx %lx %lx\n", addr, len, perm);
    8020a19c:	86e6                	mv	a3,s9
    8020a19e:	8662                	mv	a2,s8
    8020a1a0:	85d2                	mv	a1,s4
    8020a1a2:	00004517          	auipc	a0,0x4
    8020a1a6:	1de50513          	addi	a0,a0,478 # 8020e380 <__func__.2004+0x78>
    8020a1aa:	ffff7097          	auipc	ra,0xffff7
    8020a1ae:	920080e7          	jalr	-1760(ra) # 80200aca <printf>
    fd->off = off;
    8020a1b2:	03bd2023          	sw	s11,32(s10)
    if (fileread(fd, addr, len)) {
    8020a1b6:	000c061b          	sext.w	a2,s8
    8020a1ba:	85d2                	mv	a1,s4
    8020a1bc:	856a                	mv	a0,s10
    8020a1be:	00000097          	auipc	ra,0x0
    8020a1c2:	ba8080e7          	jalr	-1112(ra) # 80209d66 <fileread>
    8020a1c6:	87aa                	mv	a5,a0
        return addr;
    8020a1c8:	8552                	mv	a0,s4
    if (fileread(fd, addr, len)) {
    8020a1ca:	fbd5                	bnez	a5,8020a17e <do_mmap+0x150>
        return -1;
    8020a1cc:	557d                	li	a0,-1
    8020a1ce:	bf45                	j	8020a17e <do_mmap+0x150>

000000008020a1d0 <pipealloc>:
#include "Type.h"
#include "file.h"
#include "string.h"
#include "Riscv.h"

int pipealloc(struct file** f0, struct file** f1) {
    8020a1d0:	715d                	addi	sp,sp,-80
    8020a1d2:	e486                	sd	ra,72(sp)
    8020a1d4:	e0a2                	sd	s0,64(sp)
    8020a1d6:	fc26                	sd	s1,56(sp)
    8020a1d8:	f84a                	sd	s2,48(sp)
    8020a1da:	f44e                	sd	s3,40(sp)
    8020a1dc:	f052                	sd	s4,32(sp)
    8020a1de:	ec56                	sd	s5,24(sp)
    8020a1e0:	0880                	addi	s0,sp,80
    8020a1e2:	84aa                	mv	s1,a0
    8020a1e4:	892e                	mv	s2,a1
    struct pipe* pi;

    pi = 0;
    *f0 = *f1 = 0;
    8020a1e6:	0005b023          	sd	zero,0(a1)
    8020a1ea:	00053023          	sd	zero,0(a0)
    if ((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
    8020a1ee:	00000097          	auipc	ra,0x0
    8020a1f2:	96c080e7          	jalr	-1684(ra) # 80209b5a <filealloc>
    8020a1f6:	e088                	sd	a0,0(s1)
    8020a1f8:	c905                	beqz	a0,8020a228 <pipealloc+0x58>
    8020a1fa:	00000097          	auipc	ra,0x0
    8020a1fe:	960080e7          	jalr	-1696(ra) # 80209b5a <filealloc>
    8020a202:	00a93023          	sd	a0,0(s2)
    8020a206:	c979                	beqz	a0,8020a2dc <pipealloc+0x10c>
        goto bad;
    PhysicalPage* pp = NULL;
    8020a208:	fa043c23          	sd	zero,-72(s0)
    if (pageAlloc(&pp) != 0)
    8020a20c:	fb840513          	addi	a0,s0,-72
    8020a210:	ffff8097          	auipc	ra,0xffff8
    8020a214:	a6e080e7          	jalr	-1426(ra) # 80201c7e <pageAlloc>
    8020a218:	8a2a                	mv	s4,a0
    8020a21a:	c90d                	beqz	a0,8020a24c <pipealloc+0x7c>
    return 0;

bad:
    if (pi)
        pageFree(pa2page((u64)pi));
    if (*f0)
    8020a21c:	6088                	ld	a0,0(s1)
    8020a21e:	c509                	beqz	a0,8020a228 <pipealloc+0x58>
        fileclose(*f0);
    8020a220:	00000097          	auipc	ra,0x0
    8020a224:	a0a080e7          	jalr	-1526(ra) # 80209c2a <fileclose>
    if (*f1)
    8020a228:	00093503          	ld	a0,0(s2)
        fileclose(*f1);
    return -1;
    8020a22c:	5a7d                	li	s4,-1
    if (*f1)
    8020a22e:	c509                	beqz	a0,8020a238 <pipealloc+0x68>
        fileclose(*f1);
    8020a230:	00000097          	auipc	ra,0x0
    8020a234:	9fa080e7          	jalr	-1542(ra) # 80209c2a <fileclose>
}
    8020a238:	8552                	mv	a0,s4
    8020a23a:	60a6                	ld	ra,72(sp)
    8020a23c:	6406                	ld	s0,64(sp)
    8020a23e:	74e2                	ld	s1,56(sp)
    8020a240:	7942                	ld	s2,48(sp)
    8020a242:	79a2                	ld	s3,40(sp)
    8020a244:	7a02                	ld	s4,32(sp)
    8020a246:	6ae2                	ld	s5,24(sp)
    8020a248:	6161                	addi	sp,sp,80
    8020a24a:	8082                	ret
    return page - pages;
    8020a24c:	fb843983          	ld	s3,-72(s0)
    8020a250:	001d8797          	auipc	a5,0x1d8
    8020a254:	22878793          	addi	a5,a5,552 # 803e2478 <pages>
    8020a258:	40f989b3          	sub	s3,s3,a5
    8020a25c:	4039d993          	srai	s3,s3,0x3
    8020a260:	00004797          	auipc	a5,0x4
    8020a264:	3107b783          	ld	a5,784(a5) # 8020e570 <__func__.1590+0x8>
    8020a268:	02f989b3          	mul	s3,s3,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020a26c:	00c9999b          	slliw	s3,s3,0xc
    8020a270:	1982                	slli	s3,s3,0x20
    8020a272:	0209d993          	srli	s3,s3,0x20
    8020a276:	4785                	li	a5,1
    8020a278:	01f79713          	slli	a4,a5,0x1f
    8020a27c:	99ba                	add	s3,s3,a4
    pi->readopen = 1;
    8020a27e:	4a85                	li	s5,1
    8020a280:	22f9a023          	sw	a5,544(s3) # 1220 <_start-0x801fede0>
    pi->writeopen = 1;
    8020a284:	2359a223          	sw	s5,548(s3)
    pi->nwrite = 0;
    8020a288:	2009ae23          	sw	zero,540(s3)
    pi->nread = 0;
    8020a28c:	2009ac23          	sw	zero,536(s3)
    initLock(&pi->lock, "pipe");
    8020a290:	00004597          	auipc	a1,0x4
    8020a294:	13858593          	addi	a1,a1,312 # 8020e3c8 <__func__.1670+0x10>
    8020a298:	854e                	mv	a0,s3
    8020a29a:	ffffc097          	auipc	ra,0xffffc
    8020a29e:	e80080e7          	jalr	-384(ra) # 8020611a <initLock>
    (*f0)->type = FD_PIPE;
    8020a2a2:	609c                	ld	a5,0(s1)
    8020a2a4:	0157a023          	sw	s5,0(a5)
    (*f0)->readable = 1;
    8020a2a8:	609c                	ld	a5,0(s1)
    8020a2aa:	01578423          	sb	s5,8(a5)
    (*f0)->writable = 0;
    8020a2ae:	609c                	ld	a5,0(s1)
    8020a2b0:	000784a3          	sb	zero,9(a5)
    (*f0)->pipe = pi;
    8020a2b4:	609c                	ld	a5,0(s1)
    8020a2b6:	0137b823          	sd	s3,16(a5)
    (*f1)->type = FD_PIPE;
    8020a2ba:	00093783          	ld	a5,0(s2)
    8020a2be:	0157a023          	sw	s5,0(a5)
    (*f1)->readable = 0;
    8020a2c2:	00093783          	ld	a5,0(s2)
    8020a2c6:	00078423          	sb	zero,8(a5)
    (*f1)->writable = 1;
    8020a2ca:	00093783          	ld	a5,0(s2)
    8020a2ce:	015784a3          	sb	s5,9(a5)
    (*f1)->pipe = pi;
    8020a2d2:	00093783          	ld	a5,0(s2)
    8020a2d6:	0137b823          	sd	s3,16(a5)
    return 0;
    8020a2da:	bfb9                	j	8020a238 <pipealloc+0x68>
    if (*f0)
    8020a2dc:	6088                	ld	a0,0(s1)
    8020a2de:	f129                	bnez	a0,8020a220 <pipealloc+0x50>
    return -1;
    8020a2e0:	5a7d                	li	s4,-1
    8020a2e2:	bf99                	j	8020a238 <pipealloc+0x68>

000000008020a2e4 <pipeclose>:

void pipeclose(struct pipe* pi, int writable) {
    8020a2e4:	1101                	addi	sp,sp,-32
    8020a2e6:	ec06                	sd	ra,24(sp)
    8020a2e8:	e822                	sd	s0,16(sp)
    8020a2ea:	e426                	sd	s1,8(sp)
    8020a2ec:	e04a                	sd	s2,0(sp)
    8020a2ee:	1000                	addi	s0,sp,32
    8020a2f0:	84aa                	mv	s1,a0
    8020a2f2:	892e                	mv	s2,a1
    acquireLock(&pi->lock);
    8020a2f4:	ffffc097          	auipc	ra,0xffffc
    8020a2f8:	e70080e7          	jalr	-400(ra) # 80206164 <acquireLock>
    // printf("%x %x %x\n", pi->writeopen, pi->readopen, writable);
    if (writable) {
    8020a2fc:	04090b63          	beqz	s2,8020a352 <pipeclose+0x6e>
        pi->writeopen = 0;
    8020a300:	2204a223          	sw	zero,548(s1) # fffffffffffff224 <bssEnd+0xffffffff7f9c4224>
        wakeup(&pi->nread);
    8020a304:	21848513          	addi	a0,s1,536
    8020a308:	ffff9097          	auipc	ra,0xffff9
    8020a30c:	f46080e7          	jalr	-186(ra) # 8020324e <wakeup>
    } else {
        pi->readopen = 0;
        wakeup(&pi->nwrite);
    }
    if (pi->readopen == 0 && pi->writeopen == 0) {
    8020a310:	2204b783          	ld	a5,544(s1)
    8020a314:	eba1                	bnez	a5,8020a364 <pipeclose+0x80>
        releaseLock(&pi->lock);
    8020a316:	8526                	mv	a0,s1
    8020a318:	ffffc097          	auipc	ra,0xffffc
    8020a31c:	ec8080e7          	jalr	-312(ra) # 802061e0 <releaseLock>
}

inline PhysicalPage* pa2page(u64 pa) {
    if (pa == 0)
        return NULL;
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    8020a320:	80000537          	lui	a0,0x80000
    8020a324:	9526                	add	a0,a0,s1
    8020a326:	8131                	srli	a0,a0,0xc
    return pages + ppn;
    8020a328:	1502                	slli	a0,a0,0x20
    8020a32a:	9101                	srli	a0,a0,0x20
    8020a32c:	00151493          	slli	s1,a0,0x1
    8020a330:	9526                	add	a0,a0,s1
    8020a332:	050e                	slli	a0,a0,0x3
        pageFree(pa2page((u64)pi));
    8020a334:	001d8797          	auipc	a5,0x1d8
    8020a338:	14478793          	addi	a5,a5,324 # 803e2478 <pages>
    8020a33c:	953e                	add	a0,a0,a5
    8020a33e:	ffff8097          	auipc	ra,0xffff8
    8020a342:	b16080e7          	jalr	-1258(ra) # 80201e54 <pageFree>
    } else
        releaseLock(&pi->lock);
}
    8020a346:	60e2                	ld	ra,24(sp)
    8020a348:	6442                	ld	s0,16(sp)
    8020a34a:	64a2                	ld	s1,8(sp)
    8020a34c:	6902                	ld	s2,0(sp)
    8020a34e:	6105                	addi	sp,sp,32
    8020a350:	8082                	ret
        pi->readopen = 0;
    8020a352:	2204a023          	sw	zero,544(s1)
        wakeup(&pi->nwrite);
    8020a356:	21c48513          	addi	a0,s1,540
    8020a35a:	ffff9097          	auipc	ra,0xffff9
    8020a35e:	ef4080e7          	jalr	-268(ra) # 8020324e <wakeup>
    8020a362:	b77d                	j	8020a310 <pipeclose+0x2c>
        releaseLock(&pi->lock);
    8020a364:	8526                	mv	a0,s1
    8020a366:	ffffc097          	auipc	ra,0xffffc
    8020a36a:	e7a080e7          	jalr	-390(ra) # 802061e0 <releaseLock>
}
    8020a36e:	bfe1                	j	8020a346 <pipeclose+0x62>

000000008020a370 <pipewrite>:

int pipewrite(struct pipe* pi, u64 addr, int n) {
    8020a370:	7159                	addi	sp,sp,-112
    8020a372:	f486                	sd	ra,104(sp)
    8020a374:	f0a2                	sd	s0,96(sp)
    8020a376:	eca6                	sd	s1,88(sp)
    8020a378:	e8ca                	sd	s2,80(sp)
    8020a37a:	e4ce                	sd	s3,72(sp)
    8020a37c:	e0d2                	sd	s4,64(sp)
    8020a37e:	fc56                	sd	s5,56(sp)
    8020a380:	f85a                	sd	s6,48(sp)
    8020a382:	f45e                	sd	s7,40(sp)
    8020a384:	f062                	sd	s8,32(sp)
    8020a386:	ec66                	sd	s9,24(sp)
    8020a388:	1880                	addi	s0,sp,112
    8020a38a:	84aa                	mv	s1,a0
    8020a38c:	8aae                	mv	s5,a1
    8020a38e:	89b2                	mv	s3,a2
    int i = 0;
    struct Process* pr = myproc();
    8020a390:	ffff8097          	auipc	ra,0xffff8
    8020a394:	6bc080e7          	jalr	1724(ra) # 80202a4c <myproc>
    8020a398:	8a2a                	mv	s4,a0

    // printf("%d WWWW pipe addr %x\n", r_hartid(), pi);
    acquireLock(&pi->lock);
    8020a39a:	8526                	mv	a0,s1
    8020a39c:	ffffc097          	auipc	ra,0xffffc
    8020a3a0:	dc8080e7          	jalr	-568(ra) # 80206164 <acquireLock>
    while (i < n) {
    8020a3a4:	0b305e63          	blez	s3,8020a460 <pipewrite+0xf0>
    8020a3a8:	8ba6                	mv	s7,s1
    int i = 0;
    8020a3aa:	4901                	li	s2,0
            sleep(&pi->nwrite, &pi->lock);
            // printf("Write %x Stop sleep\n", r_hartid());
        } else {
            // printf("%d %d\n", i, n);
            char ch;
            if (copyin(pr->pgdir, &ch, addr + i, 1) == -1)
    8020a3ac:	5b7d                	li	s6,-1
            wakeup(&pi->nread);
    8020a3ae:	21848c93          	addi	s9,s1,536
            sleep(&pi->nwrite, &pi->lock);
    8020a3b2:	21c48c13          	addi	s8,s1,540
    8020a3b6:	a0a1                	j	8020a3fe <pipewrite+0x8e>
            releaseLock(&pi->lock);
    8020a3b8:	8526                	mv	a0,s1
    8020a3ba:	ffffc097          	auipc	ra,0xffffc
    8020a3be:	e26080e7          	jalr	-474(ra) # 802061e0 <releaseLock>
            return -1;
    8020a3c2:	597d                	li	s2,-1
    8020a3c4:	a041                	j	8020a444 <pipewrite+0xd4>
            wakeup(&pi->nread);
    8020a3c6:	8566                	mv	a0,s9
    8020a3c8:	ffff9097          	auipc	ra,0xffff9
    8020a3cc:	e86080e7          	jalr	-378(ra) # 8020324e <wakeup>
            sleep(&pi->nwrite, &pi->lock);
    8020a3d0:	85de                	mv	a1,s7
    8020a3d2:	8562                	mv	a0,s8
    8020a3d4:	ffff9097          	auipc	ra,0xffff9
    8020a3d8:	5ac080e7          	jalr	1452(ra) # 80203980 <sleep>
    8020a3dc:	a839                	j	8020a3fa <pipewrite+0x8a>
                break;
            pi->data[pi->nwrite++ % PIPESIZE] = ch;
    8020a3de:	21c4a783          	lw	a5,540(s1)
    8020a3e2:	0017871b          	addiw	a4,a5,1
    8020a3e6:	20e4ae23          	sw	a4,540(s1)
    8020a3ea:	1ff7f793          	andi	a5,a5,511
    8020a3ee:	97a6                	add	a5,a5,s1
    8020a3f0:	f9f44703          	lbu	a4,-97(s0)
    8020a3f4:	00e78c23          	sb	a4,24(a5)
            i++;
    8020a3f8:	2905                	addiw	s2,s2,1
    while (i < n) {
    8020a3fa:	03395a63          	bge	s2,s3,8020a42e <pipewrite+0xbe>
        if (pi->readopen == 0 /*|| pr->killed*/) {
    8020a3fe:	2204a783          	lw	a5,544(s1)
    8020a402:	dbdd                	beqz	a5,8020a3b8 <pipewrite+0x48>
        if (pi->nwrite == pi->nread + PIPESIZE) {  // DOC: pipewrite-full
    8020a404:	2184a783          	lw	a5,536(s1)
    8020a408:	21c4a703          	lw	a4,540(s1)
    8020a40c:	2007879b          	addiw	a5,a5,512
    8020a410:	faf70be3          	beq	a4,a5,8020a3c6 <pipewrite+0x56>
            if (copyin(pr->pgdir, &ch, addr + i, 1) == -1)
    8020a414:	4685                	li	a3,1
    8020a416:	01590633          	add	a2,s2,s5
    8020a41a:	f9f40593          	addi	a1,s0,-97
    8020a41e:	168a3503          	ld	a0,360(s4)
    8020a422:	ffff8097          	auipc	ra,0xffff8
    8020a426:	f98080e7          	jalr	-104(ra) # 802023ba <copyin>
    8020a42a:	fb651ae3          	bne	a0,s6,8020a3de <pipewrite+0x6e>
        }
    }
    wakeup(&pi->nread);
    8020a42e:	21848513          	addi	a0,s1,536
    8020a432:	ffff9097          	auipc	ra,0xffff9
    8020a436:	e1c080e7          	jalr	-484(ra) # 8020324e <wakeup>
    // printf("%d %d\n", pi->nread, pi->nwrite);
    releaseLock(&pi->lock);
    8020a43a:	8526                	mv	a0,s1
    8020a43c:	ffffc097          	auipc	ra,0xffffc
    8020a440:	da4080e7          	jalr	-604(ra) # 802061e0 <releaseLock>
    return i;
}
    8020a444:	854a                	mv	a0,s2
    8020a446:	70a6                	ld	ra,104(sp)
    8020a448:	7406                	ld	s0,96(sp)
    8020a44a:	64e6                	ld	s1,88(sp)
    8020a44c:	6946                	ld	s2,80(sp)
    8020a44e:	69a6                	ld	s3,72(sp)
    8020a450:	6a06                	ld	s4,64(sp)
    8020a452:	7ae2                	ld	s5,56(sp)
    8020a454:	7b42                	ld	s6,48(sp)
    8020a456:	7ba2                	ld	s7,40(sp)
    8020a458:	7c02                	ld	s8,32(sp)
    8020a45a:	6ce2                	ld	s9,24(sp)
    8020a45c:	6165                	addi	sp,sp,112
    8020a45e:	8082                	ret
    int i = 0;
    8020a460:	4901                	li	s2,0
    8020a462:	b7f1                	j	8020a42e <pipewrite+0xbe>

000000008020a464 <piperead>:

int piperead(struct pipe* pi, u64 addr, int n) {
    8020a464:	715d                	addi	sp,sp,-80
    8020a466:	e486                	sd	ra,72(sp)
    8020a468:	e0a2                	sd	s0,64(sp)
    8020a46a:	fc26                	sd	s1,56(sp)
    8020a46c:	f84a                	sd	s2,48(sp)
    8020a46e:	f44e                	sd	s3,40(sp)
    8020a470:	f052                	sd	s4,32(sp)
    8020a472:	ec56                	sd	s5,24(sp)
    8020a474:	e85a                	sd	s6,16(sp)
    8020a476:	0880                	addi	s0,sp,80
    8020a478:	84aa                	mv	s1,a0
    8020a47a:	892e                	mv	s2,a1
    8020a47c:	8a32                	mv	s4,a2
    int i;
    struct Process* pr = myproc();
    8020a47e:	ffff8097          	auipc	ra,0xffff8
    8020a482:	5ce080e7          	jalr	1486(ra) # 80202a4c <myproc>
    8020a486:	8aaa                	mv	s5,a0
    char ch;

    // printf("%d RRRR pipe addr %x\n", r_hartid(), pi);
    acquireLock(&pi->lock);
    8020a488:	8b26                	mv	s6,s1
    8020a48a:	8526                	mv	a0,s1
    8020a48c:	ffffc097          	auipc	ra,0xffffc
    8020a490:	cd8080e7          	jalr	-808(ra) # 80206164 <acquireLock>
    while (pi->nread == pi->nwrite && pi->writeopen) {  // DOC: pipe-empty
    8020a494:	2184a703          	lw	a4,536(s1)
    8020a498:	21c4a783          	lw	a5,540(s1)
        if (0 /*pr->killed*/) {
            releaseLock(&pi->lock);
            return -1;
        }
        // printf("Read %x Sleep?\n", r_hartid());
        sleep(&pi->nread, &pi->lock);  // DOC: piperead-sleep
    8020a49c:	21848993          	addi	s3,s1,536
    while (pi->nread == pi->nwrite && pi->writeopen) {  // DOC: pipe-empty
    8020a4a0:	02f71163          	bne	a4,a5,8020a4c2 <piperead+0x5e>
    8020a4a4:	2244a783          	lw	a5,548(s1)
    8020a4a8:	cf89                	beqz	a5,8020a4c2 <piperead+0x5e>
        sleep(&pi->nread, &pi->lock);  // DOC: piperead-sleep
    8020a4aa:	85da                	mv	a1,s6
    8020a4ac:	854e                	mv	a0,s3
    8020a4ae:	ffff9097          	auipc	ra,0xffff9
    8020a4b2:	4d2080e7          	jalr	1234(ra) # 80203980 <sleep>
    while (pi->nread == pi->nwrite && pi->writeopen) {  // DOC: pipe-empty
    8020a4b6:	2184a703          	lw	a4,536(s1)
    8020a4ba:	21c4a783          	lw	a5,540(s1)
    8020a4be:	fef703e3          	beq	a4,a5,8020a4a4 <piperead+0x40>
        // printf("Read %x Stop sleep\n", r_hartid());
    }
    for (i = 0; i < n; i++) {  // DOC: piperead-copy
    8020a4c2:	07405b63          	blez	s4,8020a538 <piperead+0xd4>
    8020a4c6:	4981                	li	s3,0
        if (pi->nread == pi->nwrite)
            break;
        // printf("hart id %x, now read %d\n", r_hartid(), i);
        ch = pi->data[pi->nread++ % PIPESIZE];
        // printf("%x %x\n", r_hartid(), ch);
        if (copyout(pr->pgdir, addr + i, &ch, 1) == -1) {
    8020a4c8:	5b7d                	li	s6,-1
        if (pi->nread == pi->nwrite)
    8020a4ca:	2184a783          	lw	a5,536(s1)
    8020a4ce:	21c4a703          	lw	a4,540(s1)
    8020a4d2:	02f70d63          	beq	a4,a5,8020a50c <piperead+0xa8>
        ch = pi->data[pi->nread++ % PIPESIZE];
    8020a4d6:	0017871b          	addiw	a4,a5,1
    8020a4da:	20e4ac23          	sw	a4,536(s1)
    8020a4de:	1ff7f793          	andi	a5,a5,511
    8020a4e2:	97a6                	add	a5,a5,s1
    8020a4e4:	0187c783          	lbu	a5,24(a5)
    8020a4e8:	faf40fa3          	sb	a5,-65(s0)
        if (copyout(pr->pgdir, addr + i, &ch, 1) == -1) {
    8020a4ec:	4685                	li	a3,1
    8020a4ee:	fbf40613          	addi	a2,s0,-65
    8020a4f2:	85ca                	mv	a1,s2
    8020a4f4:	168ab503          	ld	a0,360(s5)
    8020a4f8:	ffff8097          	auipc	ra,0xffff8
    8020a4fc:	f52080e7          	jalr	-174(ra) # 8020244a <copyout>
    8020a500:	01650663          	beq	a0,s6,8020a50c <piperead+0xa8>
    for (i = 0; i < n; i++) {  // DOC: piperead-copy
    8020a504:	2985                	addiw	s3,s3,1
    8020a506:	0905                	addi	s2,s2,1
    8020a508:	fd3a11e3          	bne	s4,s3,8020a4ca <piperead+0x66>
            break;
        }
    }
    // printf("%x wake up %x, start %x, end %x\n", r_hartid(), &pi->nwrite, pi->nread, pi->nwrite);
    wakeup(&pi->nwrite);  // DOC: piperead-wakeup
    8020a50c:	21c48513          	addi	a0,s1,540
    8020a510:	ffff9097          	auipc	ra,0xffff9
    8020a514:	d3e080e7          	jalr	-706(ra) # 8020324e <wakeup>
    releaseLock(&pi->lock);
    8020a518:	8526                	mv	a0,s1
    8020a51a:	ffffc097          	auipc	ra,0xffffc
    8020a51e:	cc6080e7          	jalr	-826(ra) # 802061e0 <releaseLock>
    return i;
    8020a522:	854e                	mv	a0,s3
    8020a524:	60a6                	ld	ra,72(sp)
    8020a526:	6406                	ld	s0,64(sp)
    8020a528:	74e2                	ld	s1,56(sp)
    8020a52a:	7942                	ld	s2,48(sp)
    8020a52c:	79a2                	ld	s3,40(sp)
    8020a52e:	7a02                	ld	s4,32(sp)
    8020a530:	6ae2                	ld	s5,24(sp)
    8020a532:	6b42                	ld	s6,16(sp)
    8020a534:	6161                	addi	sp,sp,80
    8020a536:	8082                	ret
    for (i = 0; i < n; i++) {  // DOC: piperead-copy
    8020a538:	4981                	li	s3,0
    8020a53a:	bfc9                	j	8020a50c <piperead+0xa8>

000000008020a53c <testfat>:
#include <Debug.h>

char test_content_to_write[10] = "abcdefghi";
char test_content_to_read[10] = {0};

void testfat() {
    8020a53c:	1101                	addi	sp,sp,-32
    8020a53e:	ec06                	sd	ra,24(sp)
    8020a540:	e822                	sd	s0,16(sp)
    8020a542:	e426                	sd	s1,8(sp)
    8020a544:	e04a                	sd	s2,0(sp)
    8020a546:	1000                	addi	s0,sp,32
    printf("[testfat] testing fat.......\n");
    8020a548:	00004517          	auipc	a0,0x4
    8020a54c:	e8850513          	addi	a0,a0,-376 # 8020e3d0 <__func__.1670+0x18>
    8020a550:	ffff6097          	auipc	ra,0xffff6
    8020a554:	57a080e7          	jalr	1402(ra) # 80200aca <printf>
    struct dirent* testfile = create(AT_FDCWD, "/testfile", T_FILE, O_CREATE | O_RDWR);
    8020a558:	04200693          	li	a3,66
    8020a55c:	4609                	li	a2,2
    8020a55e:	00004597          	auipc	a1,0x4
    8020a562:	e9258593          	addi	a1,a1,-366 # 8020e3f0 <__func__.1670+0x38>
    8020a566:	f9c00513          	li	a0,-100
    8020a56a:	fffff097          	auipc	ra,0xfffff
    8020a56e:	48e080e7          	jalr	1166(ra) # 802099f8 <create>
    if (testfile == NULL) {
    8020a572:	cd51                	beqz	a0,8020a60e <testfat+0xd2>
    8020a574:	84aa                	mv	s1,a0
        panic("[testfat] create file error\n");
    }
    MSG_PRINT("create file finish");
    int ret = ewrite(testfile, 0, (u64)test_content_to_write, 0, 9);
    8020a576:	4725                	li	a4,9
    8020a578:	4681                	li	a3,0
    8020a57a:	00005617          	auipc	a2,0x5
    8020a57e:	2d660613          	addi	a2,a2,726 # 8020f850 <test_content_to_write>
    8020a582:	4581                	li	a1,0
    8020a584:	ffffe097          	auipc	ra,0xffffe
    8020a588:	216080e7          	jalr	534(ra) # 8020879a <ewrite>
    if (ret != 9) {
    8020a58c:	47a5                	li	a5,9
    8020a58e:	0af51163          	bne	a0,a5,8020a630 <testfat+0xf4>
        panic("[testfat] write file error\n");
    }

    MSG_PRINT("write file finish");
    eunlock(testfile);
    8020a592:	8526                	mv	a0,s1
    8020a594:	fffff097          	auipc	ra,0xfffff
    8020a598:	ad4080e7          	jalr	-1324(ra) # 80209068 <eunlock>
    eput(testfile);
    8020a59c:	8526                	mv	a0,s1
    8020a59e:	fffff097          	auipc	ra,0xfffff
    8020a5a2:	b2c080e7          	jalr	-1236(ra) # 802090ca <eput>
    MSG_PRINT("eput file finish");
    testfile = ename(AT_FDCWD, "/testfile");
    8020a5a6:	00004597          	auipc	a1,0x4
    8020a5aa:	e4a58593          	addi	a1,a1,-438 # 8020e3f0 <__func__.1670+0x38>
    8020a5ae:	f9c00513          	li	a0,-100
    8020a5b2:	fffff097          	auipc	ra,0xfffff
    8020a5b6:	192080e7          	jalr	402(ra) # 80209744 <ename>
    8020a5ba:	84aa                	mv	s1,a0
    if (testfile == NULL) {
    8020a5bc:	c959                	beqz	a0,8020a652 <testfat+0x116>
        printf("[testfat] open file error\n");
    }
    DEC_PRINT(testfile->ref);
    eread(testfile, 0, (u64)test_content_to_read, 0, 9);
    8020a5be:	0042f917          	auipc	s2,0x42f
    8020a5c2:	4d290913          	addi	s2,s2,1234 # 80639a90 <test_content_to_read>
    8020a5c6:	4725                	li	a4,9
    8020a5c8:	4681                	li	a3,0
    8020a5ca:	864a                	mv	a2,s2
    8020a5cc:	4581                	li	a1,0
    8020a5ce:	8526                	mv	a0,s1
    8020a5d0:	ffffe097          	auipc	ra,0xffffe
    8020a5d4:	0d2080e7          	jalr	210(ra) # 802086a2 <eread>
    if (strncmp(test_content_to_write, test_content_to_read, 114514)==0) {
    8020a5d8:	6671                	lui	a2,0x1c
    8020a5da:	f5260613          	addi	a2,a2,-174 # 1bf52 <_start-0x801e40ae>
    8020a5de:	85ca                	mv	a1,s2
    8020a5e0:	00005517          	auipc	a0,0x5
    8020a5e4:	27050513          	addi	a0,a0,624 # 8020f850 <test_content_to_write>
    8020a5e8:	ffffc097          	auipc	ra,0xffffc
    8020a5ec:	f0a080e7          	jalr	-246(ra) # 802064f2 <strncmp>
    8020a5f0:	e935                	bnez	a0,8020a664 <testfat+0x128>
        printf("[testfat]  testfat passed\n");
    8020a5f2:	00004517          	auipc	a0,0x4
    8020a5f6:	e7e50513          	addi	a0,a0,-386 # 8020e470 <__func__.1670+0xb8>
    8020a5fa:	ffff6097          	auipc	ra,0xffff6
    8020a5fe:	4d0080e7          	jalr	1232(ra) # 80200aca <printf>
    } else {
        printf("[testfat]  testfat failed\n");
    }
    8020a602:	60e2                	ld	ra,24(sp)
    8020a604:	6442                	ld	s0,16(sp)
    8020a606:	64a2                	ld	s1,8(sp)
    8020a608:	6902                	ld	s2,0(sp)
    8020a60a:	6105                	addi	sp,sp,32
    8020a60c:	8082                	ret
        panic("[testfat] create file error\n");
    8020a60e:	00004697          	auipc	a3,0x4
    8020a612:	df268693          	addi	a3,a3,-526 # 8020e400 <__func__.1670+0x48>
    8020a616:	00004617          	auipc	a2,0x4
    8020a61a:	f5260613          	addi	a2,a2,-174 # 8020e568 <__func__.1590>
    8020a61e:	45b5                	li	a1,13
    8020a620:	00004517          	auipc	a0,0x4
    8020a624:	e0050513          	addi	a0,a0,-512 # 8020e420 <__func__.1670+0x68>
    8020a628:	ffff6097          	auipc	ra,0xffff6
    8020a62c:	52e080e7          	jalr	1326(ra) # 80200b56 <_panic_>
        panic("[testfat] write file error\n");
    8020a630:	00004697          	auipc	a3,0x4
    8020a634:	e0068693          	addi	a3,a3,-512 # 8020e430 <__func__.1670+0x78>
    8020a638:	00004617          	auipc	a2,0x4
    8020a63c:	f3060613          	addi	a2,a2,-208 # 8020e568 <__func__.1590>
    8020a640:	45c9                	li	a1,18
    8020a642:	00004517          	auipc	a0,0x4
    8020a646:	dde50513          	addi	a0,a0,-546 # 8020e420 <__func__.1670+0x68>
    8020a64a:	ffff6097          	auipc	ra,0xffff6
    8020a64e:	50c080e7          	jalr	1292(ra) # 80200b56 <_panic_>
        printf("[testfat] open file error\n");
    8020a652:	00004517          	auipc	a0,0x4
    8020a656:	dfe50513          	addi	a0,a0,-514 # 8020e450 <__func__.1670+0x98>
    8020a65a:	ffff6097          	auipc	ra,0xffff6
    8020a65e:	470080e7          	jalr	1136(ra) # 80200aca <printf>
    8020a662:	bfb1                	j	8020a5be <testfat+0x82>
        printf("[testfat]  testfat failed\n");
    8020a664:	00004517          	auipc	a0,0x4
    8020a668:	e2c50513          	addi	a0,a0,-468 # 8020e490 <__func__.1670+0xd8>
    8020a66c:	ffff6097          	auipc	ra,0xffff6
    8020a670:	45e080e7          	jalr	1118(ra) # 80200aca <printf>
    8020a674:	b779                	j	8020a602 <testfat+0xc6>
	...

000000008020b000 <_trampoline>:
    # mapped into user space, at TRAPFRAME.
    #
        
	# swap a0 and sscratch
    # so that a0 is TRAPFRAME
    csrrw a0, sscratch, a0
    8020b000:	14051573          	csrrw	a0,sscratch,a0

    # save the user registers in TRAPFRAME
    sd ra, REG_RA(a0)
    8020b004:	02153423          	sd	ra,40(a0)
    sd sp, REG_SP(a0)
    8020b008:	02253823          	sd	sp,48(a0)
    sd gp, REG_GP(a0)
    8020b00c:	02353c23          	sd	gp,56(a0)
    sd tp, REG_TP(a0)
    8020b010:	04453023          	sd	tp,64(a0)
    sd t0, REG_T0(a0)
    8020b014:	04553423          	sd	t0,72(a0)
    sd t1, REG_T1(a0)
    8020b018:	04653823          	sd	t1,80(a0)
    sd t2, REG_T2(a0)
    8020b01c:	04753c23          	sd	t2,88(a0)
    sd s0, REG_S0(a0)
    8020b020:	f120                	sd	s0,96(a0)
    sd s1, REG_S1(a0)
    8020b022:	f524                	sd	s1,104(a0)
    sd a1, REG_A1(a0)
    8020b024:	fd2c                	sd	a1,120(a0)
    sd a2, REG_A2(a0)
    8020b026:	e150                	sd	a2,128(a0)
    sd a3, REG_A3(a0)
    8020b028:	e554                	sd	a3,136(a0)
    sd a4, REG_A4(a0)
    8020b02a:	e958                	sd	a4,144(a0)
    sd a5, REG_A5(a0)
    8020b02c:	ed5c                	sd	a5,152(a0)
    sd a6, REG_A6(a0)
    8020b02e:	0b053023          	sd	a6,160(a0)
    sd a7, REG_A7(a0)
    8020b032:	0b153423          	sd	a7,168(a0)
    sd s2, REG_S2(a0)
    8020b036:	0b253823          	sd	s2,176(a0)
    sd s3, REG_S3(a0)
    8020b03a:	0b353c23          	sd	s3,184(a0)
    sd s4, REG_S4(a0)
    8020b03e:	0d453023          	sd	s4,192(a0)
    sd s5, REG_S5(a0)
    8020b042:	0d553423          	sd	s5,200(a0)
    sd s6, REG_S6(a0)
    8020b046:	0d653823          	sd	s6,208(a0)
    sd s7, REG_S7(a0)
    8020b04a:	0d753c23          	sd	s7,216(a0)
    sd s8, REG_S8(a0)
    8020b04e:	0f853023          	sd	s8,224(a0)
    sd s9, REG_S9(a0)
    8020b052:	0f953423          	sd	s9,232(a0)
    sd s10, REG_S10(a0)
    8020b056:	0fa53823          	sd	s10,240(a0)
    sd s11, REG_S11(a0)
    8020b05a:	0fb53c23          	sd	s11,248(a0)
    sd t3, REG_T3(a0)
    8020b05e:	11c53023          	sd	t3,256(a0)
    sd t4, REG_T4(a0)
    8020b062:	11d53423          	sd	t4,264(a0)
    sd t5, REG_T5(a0)
    8020b066:	11e53823          	sd	t5,272(a0)
    sd t6, REG_T6(a0)
    8020b06a:	11f53c23          	sd	t6,280(a0)

	# save the user a0 in p->trapframe->a0
    csrr t0, sscratch
    8020b06e:	140022f3          	csrr	t0,sscratch
    sd t0, REG_A0(a0)
    8020b072:	06553823          	sd	t0,112(a0)
    # restore kernel stack pointer from p->trapframe->kernel_sp
    ld sp, KERNEL_SP(a0)
    8020b076:	00853103          	ld	sp,8(a0)
    # make tp hold the current hartid, from p->trapframe->kernel_hartid
    ld tp, KERNEL_HART_ID(a0)
    8020b07a:	02053203          	ld	tp,32(a0)
    # load the address of usertrap(), p->trapframe->kernel_trap
    ld t0, TRAP_HANDLER(a0)
    8020b07e:	01053283          	ld	t0,16(a0)
    csrr t1, sepc
    8020b082:	14102373          	csrr	t1,sepc
    sd t1, EPC(a0)
    8020b086:	00653c23          	sd	t1,24(a0)
    # restore kernel page table from p->trapframe->kernel_satp
    ld t1, KERNEL_SATP(a0)
    8020b08a:	00053303          	ld	t1,0(a0)
    csrw satp, t1
    8020b08e:	18031073          	csrw	satp,t1

    # sfence.vma zero, zero
    sfence.vma
    8020b092:	12000073          	sfence.vma
    # a0 is no longer valid, since the kernel page
    # table does not specially map p->tf.
    # jump to usertrap(), which does not return
    jr t0
    8020b096:	8282                	jr	t0

000000008020b098 <userReturn>:
    # usertrapret() calls here.
    # a0: TRAPFRAME, in user page table.
    # a1: user page table, for satp.
    # switch to the user page table.

    csrw satp, a1
    8020b098:	18059073          	csrw	satp,a1
    # sfence.vma zero, zero
    sfence.vma
    8020b09c:	12000073          	sfence.vma

    # put the saved user a0 in sscratch, so we
    # can swap it with our a0 (TRAPFRAME) in the last step.
    ld t0, REG_A0(a0)
    8020b0a0:	07053283          	ld	t0,112(a0)
    csrw sscratch, t0
    8020b0a4:	14029073          	csrw	sscratch,t0
    ld t1, EPC(a0)
    8020b0a8:	01853303          	ld	t1,24(a0)
    csrw sepc, t1
    8020b0ac:	14131073          	csrw	sepc,t1
    # restore all but a0 from TRAPFRAME
    ld ra, REG_RA(a0)
    8020b0b0:	02853083          	ld	ra,40(a0)
    ld sp, REG_SP(a0)
    8020b0b4:	03053103          	ld	sp,48(a0)
    ld gp, REG_GP(a0)
    8020b0b8:	03853183          	ld	gp,56(a0)
    ld tp, REG_TP(a0)
    8020b0bc:	04053203          	ld	tp,64(a0)
    ld t0, REG_T0(a0)
    8020b0c0:	04853283          	ld	t0,72(a0)
    ld t1, REG_T1(a0)
    8020b0c4:	05053303          	ld	t1,80(a0)
    ld t2, REG_T2(a0)
    8020b0c8:	05853383          	ld	t2,88(a0)
    ld s0, REG_S0(a0)
    8020b0cc:	7120                	ld	s0,96(a0)
    ld s1, REG_S1(a0)
    8020b0ce:	7524                	ld	s1,104(a0)
    ld a1, REG_A1(a0)
    8020b0d0:	7d2c                	ld	a1,120(a0)
    ld a2, REG_A2(a0)
    8020b0d2:	6150                	ld	a2,128(a0)
    ld a3, REG_A3(a0)
    8020b0d4:	6554                	ld	a3,136(a0)
    ld a4, REG_A4(a0)
    8020b0d6:	6958                	ld	a4,144(a0)
    ld a5, REG_A5(a0)
    8020b0d8:	6d5c                	ld	a5,152(a0)
    ld a6, REG_A6(a0)
    8020b0da:	0a053803          	ld	a6,160(a0)
    ld a7, REG_A7(a0)
    8020b0de:	0a853883          	ld	a7,168(a0)
    ld s2, REG_S2(a0)
    8020b0e2:	0b053903          	ld	s2,176(a0)
    ld s3, REG_S3(a0)
    8020b0e6:	0b853983          	ld	s3,184(a0)
    ld s4, REG_S4(a0)
    8020b0ea:	0c053a03          	ld	s4,192(a0)
    ld s5, REG_S5(a0)
    8020b0ee:	0c853a83          	ld	s5,200(a0)
    ld s6, REG_S6(a0)
    8020b0f2:	0d053b03          	ld	s6,208(a0)
    ld s7, REG_S7(a0)
    8020b0f6:	0d853b83          	ld	s7,216(a0)
    ld s8, REG_S8(a0)
    8020b0fa:	0e053c03          	ld	s8,224(a0)
    ld s9, REG_S9(a0)
    8020b0fe:	0e853c83          	ld	s9,232(a0)
    ld s10, REG_S10(a0)
    8020b102:	0f053d03          	ld	s10,240(a0)
    ld s11, REG_S11(a0)
    8020b106:	0f853d83          	ld	s11,248(a0)
    ld t3, REG_T3(a0)
    8020b10a:	10053e03          	ld	t3,256(a0)
    ld t4, REG_T4(a0)
    8020b10e:	10853e83          	ld	t4,264(a0)
    ld t5, REG_T5(a0)
    8020b112:	11053f03          	ld	t5,272(a0)
    ld t6, REG_T6(a0)
    8020b116:	11853f83          	ld	t6,280(a0)
	# restore user a0, and save TRAPFRAME in sscratch
    csrrw a0, sscratch, a0
    8020b11a:	14051573          	csrrw	a0,sscratch,a0
    # return to user mode and user pc.
    # usertrapret() set up sstatus and sepc.
    sret
    8020b11e:	10200073          	sret
	...

000000008020c000 <trapframe>:
	...
