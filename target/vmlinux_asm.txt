
target/vmlinux.img：     文件格式 elf64-littleriscv


Disassembly of section .text:

0000000080200000 <_start>:
    80200000:	82aa                	mv	t0,a0
    80200002:	0285                	addi	t0,t0,1
    80200004:	02c2                	slli	t0,t0,0x10
    80200006:	00171117          	auipc	sp,0x171
    8020000a:	ffa10113          	addi	sp,sp,-6 # 80371000 <_stack>
    8020000e:	9116                	add	sp,sp,t0
    80200010:	006000ef          	jal	ra,80200016 <main>

0000000080200014 <loop>:
    80200014:	a001                	j	80200014 <loop>

0000000080200016 <main>:
    asm volatile("mv tp, %0" : : "r" (hartId & 0x7));
}

extern struct superblock *fat;

void main(u64 hartId) {
    80200016:	7179                	addi	sp,sp,-48
    80200018:	f406                	sd	ra,40(sp)
    8020001a:	f022                	sd	s0,32(sp)
    8020001c:	ec26                	sd	s1,24(sp)
    8020001e:	1800                	addi	s0,sp,48
    80200020:	84aa                	mv	s1,a0
    asm volatile("mv tp, %0" : : "r" (hartId & 0x7));
    80200022:	00757793          	andi	a5,a0,7
    80200026:	823e                	mv	tp,a5
    initHartId(hartId);

    if (mainCount == 1000) {
    80200028:	001c1697          	auipc	a3,0x1c1
    8020002c:	fd86a683          	lw	a3,-40(a3) # 803c1000 <mainCount>
    80200030:	3e800793          	li	a5,1000
        PROCESS_CREATE_PRIORITY(SyscallTest, 1);
        // PROCESS_CREATE_PRIORITY(MountTest, 1);
        // PROCESS_CREATE_PRIORITY(WaitTest, 1);

    } else {
        while (initFinish == 0);
    80200034:	001c2717          	auipc	a4,0x1c2
    80200038:	fcc70713          	addi	a4,a4,-52 # 803c2000 <initFinish>
    if (mainCount == 1000) {
    8020003c:	04f68163          	beq	a3,a5,8020007e <main+0x68>
        while (initFinish == 0);
    80200040:	431c                	lw	a5,0(a4)
    80200042:	2781                	sext.w	a5,a5
    80200044:	dff5                	beqz	a5,80200040 <main+0x2a>
        __sync_synchronize();
    80200046:	0ff0000f          	fence

        printf("Hello, risc-v!\nCurrent hartId: %ld \n\n", hartId);
    8020004a:	85a6                	mv	a1,s1
    8020004c:	0000c517          	auipc	a0,0xc
    80200050:	fdc50513          	addi	a0,a0,-36 # 8020c028 <textEnd+0x28>
    80200054:	00001097          	auipc	ra,0x1
    80200058:	a6c080e7          	jalr	-1428(ra) # 80200ac0 <printf>

        startPage();
    8020005c:	00001097          	auipc	ra,0x1
    80200060:	538080e7          	jalr	1336(ra) # 80201594 <startPage>
        trapInit();
    80200064:	00005097          	auipc	ra,0x5
    80200068:	85e080e7          	jalr	-1954(ra) # 802048c2 <trapInit>
        //PROCESS_CREATE_PRIORITY(ForkTest, 1);
        //PROCESS_CREATE_PRIORITY(ProcessB, 3);
        //printf("Reach this place\n");
    }

    yield();
    8020006c:	00003097          	auipc	ra,0x3
    80200070:	26c080e7          	jalr	620(ra) # 802032d8 <yield>
    80200074:	70a2                	ld	ra,40(sp)
    80200076:	7402                	ld	s0,32(sp)
    80200078:	64e2                	ld	s1,24(sp)
    8020007a:	6145                	addi	sp,sp,48
    8020007c:	8082                	ret
        for (u64 *i = bssStart; i < bssEnd; i++) {
    8020007e:	001c2717          	auipc	a4,0x1c2
    80200082:	f8270713          	addi	a4,a4,-126 # 803c2000 <initFinish>
    80200086:	0041b797          	auipc	a5,0x41b
    8020008a:	f7a78793          	addi	a5,a5,-134 # 8061b000 <bssEnd>
    8020008e:	02f77063          	bgeu	a4,a5,802000ae <main+0x98>
    80200092:	87ba                	mv	a5,a4
    80200094:	0041b717          	auipc	a4,0x41b
    80200098:	f6b70713          	addi	a4,a4,-149 # 8061afff <_pgdir+0xfff>
    8020009c:	8f1d                	sub	a4,a4,a5
    8020009e:	9b61                	andi	a4,a4,-8
    802000a0:	0721                	addi	a4,a4,8
    802000a2:	973e                	add	a4,a4,a5
            *i = 0;
    802000a4:	0007b023          	sd	zero,0(a5)
        for (u64 *i = bssStart; i < bssEnd; i++) {
    802000a8:	07a1                	addi	a5,a5,8
    802000aa:	fee79de3          	bne	a5,a4,802000a4 <main+0x8e>
        mainCount = mainCount + 1;
    802000ae:	001c1717          	auipc	a4,0x1c1
    802000b2:	f5270713          	addi	a4,a4,-174 # 803c1000 <mainCount>
    802000b6:	431c                	lw	a5,0(a4)
    802000b8:	2785                	addiw	a5,a5,1
    802000ba:	c31c                	sw	a5,0(a4)
        consoleInit();
    802000bc:	00000097          	auipc	ra,0x0
    802000c0:	2b8080e7          	jalr	696(ra) # 80200374 <consoleInit>
        printLockInit();
    802000c4:	00000097          	auipc	ra,0x0
    802000c8:	2f4080e7          	jalr	756(ra) # 802003b8 <printLockInit>
        pageLockInit();
    802000cc:	00002097          	auipc	ra,0x2
    802000d0:	ab6080e7          	jalr	-1354(ra) # 80201b82 <pageLockInit>
        printf("Hello, risc-v!\nBoot hartId: %ld \n\n", hartId);
    802000d4:	85a6                	mv	a1,s1
    802000d6:	0000c517          	auipc	a0,0xc
    802000da:	f2a50513          	addi	a0,a0,-214 # 8020c000 <textEnd>
    802000de:	00001097          	auipc	ra,0x1
    802000e2:	9e2080e7          	jalr	-1566(ra) # 80200ac0 <printf>
        memoryInit();
    802000e6:	00001097          	auipc	ra,0x1
    802000ea:	4d2080e7          	jalr	1234(ra) # 802015b8 <memoryInit>
        processInit();
    802000ee:	00003097          	auipc	ra,0x3
    802000f2:	97e080e7          	jalr	-1666(ra) # 80202a6c <processInit>
        sdInit();
    802000f6:	00001097          	auipc	ra,0x1
    802000fa:	184080e7          	jalr	388(ra) # 8020127a <sdInit>
        binit();
    802000fe:	00007097          	auipc	ra,0x7
    80200102:	45e080e7          	jalr	1118(ra) # 8020755c <binit>
        fileinit();
    80200106:	00009097          	auipc	ra,0x9
    8020010a:	3a8080e7          	jalr	936(ra) # 802094ae <fileinit>
    8020010e:	4785                	li	a5,1
                unsigned long mask = 1 << i;
    80200110:	4f85                	li	t6,1
    asm volatile ("ecall" : "+r" (a0) : "r" (a7) : "memory");
    return a0;
}

inline void setMode(int hartId) {
	register u64 a7 asm ("a7") = 0x48534D;
    80200112:	00485eb7          	lui	t4,0x485
    80200116:	34de8e93          	addi	t4,t4,845 # 48534d <_start-0x7fd7acb3>
	register u64 a0 asm ("a0") = hartId;
	register u64 a1 asm ("a1") = 0x80200000;
    8020011a:	40100e13          	li	t3,1025
    8020011e:	0e56                	slli	t3,t3,0x15
	register u64 a2 asm ("a2") = 19260817; // priv
    80200120:	0125e337          	lui	t1,0x125e
    80200124:	59130313          	addi	t1,t1,1425 # 125e591 <_start-0x7efa1a6f>
        for (int i = 1; i < 5; ++ i) {
    80200128:	4f15                	li	t5,5
    8020012a:	a021                	j	80200132 <main+0x11c>
    8020012c:	0785                	addi	a5,a5,1
    8020012e:	03e78a63          	beq	a5,t5,80200162 <main+0x14c>
    80200132:	0007871b          	sext.w	a4,a5
            if (i != hartId) {
    80200136:	fe978be3          	beq	a5,s1,8020012c <main+0x116>
                unsigned long mask = 1 << i;
    8020013a:	00ef973b          	sllw	a4,t6,a4
    8020013e:	fce43c23          	sd	a4,-40(s0)
	register u64 a7 asm ("a7") = 0x48534D;
    80200142:	88f6                	mv	a7,t4
	register u64 a0 asm ("a0") = hartId;
    80200144:	853e                	mv	a0,a5
	register u64 a1 asm ("a1") = 0x80200000;
    80200146:	85f2                	mv	a1,t3
	register u64 a2 asm ("a2") = 19260817; // priv
    80200148:	861a                	mv	a2,t1
	register u64 a6 asm ("a6") = 0; // funcid
    8020014a:	4801                	li	a6,0
	asm volatile ("ecall" : "+r" (a0) : "r"(a0), "r"(a1), "r"(a2), "r"(a6), "r" (a7) : "memory");
    8020014c:	00000073          	ecall
		SBI_CALL(which, arg0, arg1, arg2, 0)
#define SBI_CALL_4(which, arg0, arg1, arg2, arg3) \
		SBI_CALL(which, arg0, arg1, arg2, arg3)

static inline void sbi_send_ipi(const unsigned long* hart_mask) {
    SBI_CALL_1(SBI_SEND_IPI, hart_mask);
    80200150:	fd840513          	addi	a0,s0,-40
    80200154:	4581                	li	a1,0
    80200156:	4601                	li	a2,0
    80200158:	4681                	li	a3,0
    8020015a:	4891                	li	a7,4
    8020015c:	00000073          	ecall
    80200160:	b7f1                	j	8020012c <main+0x116>
        trapInit();
    80200162:	00004097          	auipc	ra,0x4
    80200166:	760080e7          	jalr	1888(ra) # 802048c2 <trapInit>
        __sync_synchronize();     
    8020016a:	0ff0000f          	fence
        initFinish = 0;
    8020016e:	001c2797          	auipc	a5,0x1c2
    80200172:	e807a923          	sw	zero,-366(a5) # 803c2000 <initFinish>
        PROCESS_CREATE_PRIORITY(SyscallTest, 1);
    80200176:	4605                	li	a2,1
    80200178:	001c1597          	auipc	a1,0x1c1
    8020017c:	ec05a583          	lw	a1,-320(a1) # 803c1038 <binarySyscallTestSize>
    80200180:	000b5517          	auipc	a0,0xb5
    80200184:	37050513          	addi	a0,a0,880 # 802b54f0 <binarySyscallTestStart>
    80200188:	00003097          	auipc	ra,0x3
    8020018c:	d68080e7          	jalr	-664(ra) # 80202ef0 <processCreatePriority>
    80200190:	bdf1                	j	8020006c <main+0x56>

0000000080200192 <consoleWrite>:
    if ((ret & UART_RXFIFO_DATA) == '\r')
        return '\n';
    return ret & UART_RXFIFO_DATA;
}

int consoleWrite(int user_src, u64 src, u64 start, u64 n) {
    80200192:	711d                	addi	sp,sp,-96
    80200194:	ec86                	sd	ra,88(sp)
    80200196:	e8a2                	sd	s0,80(sp)
    80200198:	e4a6                	sd	s1,72(sp)
    8020019a:	e0ca                	sd	s2,64(sp)
    8020019c:	fc4e                	sd	s3,56(sp)
    8020019e:	f852                	sd	s4,48(sp)
    802001a0:	f456                	sd	s5,40(sp)
    802001a2:	f05a                	sd	s6,32(sp)
    802001a4:	ec5e                	sd	s7,24(sp)
    802001a6:	e862                	sd	s8,16(sp)
    802001a8:	1080                	addi	s0,sp,96
    int i;
    for (i = 0; i < n; i++) {
    802001aa:	c6ad                	beqz	a3,80200214 <consoleWrite+0x82>
    802001ac:	8aaa                	mv	s5,a0
    802001ae:	892e                	mv	s2,a1
    802001b0:	00b68a33          	add	s4,a3,a1
    802001b4:	4981                	li	s3,0
        char c;
        if(either_copyin(&c, user_src, src+i, 1) == -1)
    802001b6:	5b7d                	li	s6,-1
            break;
        if (c == '\n')
    802001b8:	4ba9                	li	s7,10
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    802001ba:	100104b7          	lui	s1,0x10010
	asm volatile("sw %0, 0(%1)" : : "r"(val), "r"(addr));
    802001be:	4c35                	li	s8,13
    802001c0:	a005                	j	802001e0 <consoleWrite+0x4e>
            putchar('\r');
        putchar(c);
    802001c2:	faf44703          	lbu	a4,-81(s0)
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    802001c6:	409c                	lw	a5,0(s1)
	while (readl(uartRegTXFIFO) & UART_TXFIFO_FULL);
    802001c8:	0820000f          	fence	i,r
    802001cc:	2781                	sext.w	a5,a5
    802001ce:	fe07cce3          	bltz	a5,802001c6 <consoleWrite+0x34>
    writel(ch, uartRegTXFIFO);
    802001d2:	0140000f          	fence	w,o
	asm volatile("sw %0, 0(%1)" : : "r"(val), "r"(addr));
    802001d6:	c098                	sw	a4,0(s1)
    for (i = 0; i < n; i++) {
    802001d8:	2985                	addiw	s3,s3,1
    802001da:	0905                	addi	s2,s2,1
    802001dc:	03490d63          	beq	s2,s4,80200216 <consoleWrite+0x84>
        if(either_copyin(&c, user_src, src+i, 1) == -1)
    802001e0:	4685                	li	a3,1
    802001e2:	864a                	mv	a2,s2
    802001e4:	85d6                	mv	a1,s5
    802001e6:	faf40513          	addi	a0,s0,-81
    802001ea:	00003097          	auipc	ra,0x3
    802001ee:	098080e7          	jalr	152(ra) # 80203282 <either_copyin>
    802001f2:	03650263          	beq	a0,s6,80200216 <consoleWrite+0x84>
        if (c == '\n')
    802001f6:	faf44783          	lbu	a5,-81(s0)
    802001fa:	fd7794e3          	bne	a5,s7,802001c2 <consoleWrite+0x30>
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    802001fe:	409c                	lw	a5,0(s1)
	while (readl(uartRegTXFIFO) & UART_TXFIFO_FULL);
    80200200:	0820000f          	fence	i,r
    80200204:	2781                	sext.w	a5,a5
    80200206:	fe07cce3          	bltz	a5,802001fe <consoleWrite+0x6c>
    writel(ch, uartRegTXFIFO);
    8020020a:	0140000f          	fence	w,o
	asm volatile("sw %0, 0(%1)" : : "r"(val), "r"(addr));
    8020020e:	0184a023          	sw	s8,0(s1) # 10010000 <_start-0x701f0000>
}
    80200212:	bf45                	j	802001c2 <consoleWrite+0x30>
    for (i = 0; i < n; i++) {
    80200214:	4981                	li	s3,0
    }
    return i;
}
    80200216:	854e                	mv	a0,s3
    80200218:	60e6                	ld	ra,88(sp)
    8020021a:	6446                	ld	s0,80(sp)
    8020021c:	64a6                	ld	s1,72(sp)
    8020021e:	6906                	ld	s2,64(sp)
    80200220:	79e2                	ld	s3,56(sp)
    80200222:	7a42                	ld	s4,48(sp)
    80200224:	7aa2                	ld	s5,40(sp)
    80200226:	7b02                	ld	s6,32(sp)
    80200228:	6be2                	ld	s7,24(sp)
    8020022a:	6c42                	ld	s8,16(sp)
    8020022c:	6125                	addi	sp,sp,96
    8020022e:	8082                	ret

0000000080200230 <consoleRead>:

//TODO, 未考虑多进程
//没有回显
#define GET_BUF_LEN 64
char buf[GET_BUF_LEN];
int consoleRead(int isUser, u64 dst, u64 start, u64 n) {
    80200230:	7159                	addi	sp,sp,-112
    80200232:	f486                	sd	ra,104(sp)
    80200234:	f0a2                	sd	s0,96(sp)
    80200236:	eca6                	sd	s1,88(sp)
    80200238:	e8ca                	sd	s2,80(sp)
    8020023a:	e4ce                	sd	s3,72(sp)
    8020023c:	e0d2                	sd	s4,64(sp)
    8020023e:	fc56                	sd	s5,56(sp)
    80200240:	f85a                	sd	s6,48(sp)
    80200242:	f45e                	sd	s7,40(sp)
    80200244:	f062                	sd	s8,32(sp)
    80200246:	ec66                	sd	s9,24(sp)
    80200248:	e86a                	sd	s10,16(sp)
    8020024a:	1880                	addi	s0,sp,112
    int i;
    for (i = 0; i < n; i++) {
    8020024c:	ce99                	beqz	a3,8020026a <consoleRead+0x3a>
    8020024e:	8b2a                	mv	s6,a0
    80200250:	892e                	mv	s2,a1
    80200252:	00b68ab3          	add	s5,a3,a1
    80200256:	4981                	li	s3,0
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    80200258:	10010a37          	lui	s4,0x10010
    8020025c:	004a0493          	addi	s1,s4,4 # 10010004 <_start-0x701efffc>
    if ((ret & UART_RXFIFO_DATA) == '\r')
    80200260:	4c35                	li	s8,13
        char c = getchar();
    80200262:	4ca9                	li	s9,10
	asm volatile("sw %0, 0(%1)" : : "r"(val), "r"(addr));
    80200264:	4d35                	li	s10,13
        if (c == '\n')
            putchar('\r');
        if (either_copyout(isUser, dst + i, &c, 1) == -1)
    80200266:	5bfd                	li	s7,-1
    80200268:	a8a9                	j	802002c2 <consoleRead+0x92>
    for (i = 0; i < n; i++) {
    8020026a:	4981                	li	s3,0
            break;
    }
    return i;
}
    8020026c:	854e                	mv	a0,s3
    8020026e:	70a6                	ld	ra,104(sp)
    80200270:	7406                	ld	s0,96(sp)
    80200272:	64e6                	ld	s1,88(sp)
    80200274:	6946                	ld	s2,80(sp)
    80200276:	69a6                	ld	s3,72(sp)
    80200278:	6a06                	ld	s4,64(sp)
    8020027a:	7ae2                	ld	s5,56(sp)
    8020027c:	7b42                	ld	s6,48(sp)
    8020027e:	7ba2                	ld	s7,40(sp)
    80200280:	7c02                	ld	s8,32(sp)
    80200282:	6ce2                	ld	s9,24(sp)
    80200284:	6d42                	ld	s10,16(sp)
    80200286:	6165                	addi	sp,sp,112
    80200288:	8082                	ret
        char c = getchar();
    8020028a:	f9940fa3          	sb	s9,-97(s0)
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    8020028e:	000a2783          	lw	a5,0(s4)
	while (readl(uartRegTXFIFO) & UART_TXFIFO_FULL);
    80200292:	0820000f          	fence	i,r
    80200296:	2781                	sext.w	a5,a5
    80200298:	fe07cbe3          	bltz	a5,8020028e <consoleRead+0x5e>
    writel(ch, uartRegTXFIFO);
    8020029c:	0140000f          	fence	w,o
	asm volatile("sw %0, 0(%1)" : : "r"(val), "r"(addr));
    802002a0:	01aa2023          	sw	s10,0(s4)
        if (either_copyout(isUser, dst + i, &c, 1) == -1)
    802002a4:	4685                	li	a3,1
    802002a6:	f9f40613          	addi	a2,s0,-97
    802002aa:	85ca                	mv	a1,s2
    802002ac:	855a                	mv	a0,s6
    802002ae:	00003097          	auipc	ra,0x3
    802002b2:	f7c080e7          	jalr	-132(ra) # 8020322a <either_copyout>
    802002b6:	fb750be3          	beq	a0,s7,8020026c <consoleRead+0x3c>
    for (i = 0; i < n; i++) {
    802002ba:	2985                	addiw	s3,s3,1
    802002bc:	0905                	addi	s2,s2,1
    802002be:	fb2a87e3          	beq	s5,s2,8020026c <consoleRead+0x3c>
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    802002c2:	409c                	lw	a5,0(s1)
    802002c4:	0007871b          	sext.w	a4,a5
	u32 ret = readl(uartRegRXFIFO);
    802002c8:	0820000f          	fence	i,r
    while (ret & UART_RXFIFO_EMPTY) {
    802002cc:	87ba                	mv	a5,a4
    802002ce:	00075a63          	bgez	a4,802002e2 <consoleRead+0xb2>
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    802002d2:	409c                	lw	a5,0(s1)
    802002d4:	0007871b          	sext.w	a4,a5
        ret = readl(uartRegRXFIFO);
    802002d8:	0820000f          	fence	i,r
    while (ret & UART_RXFIFO_EMPTY) {
    802002dc:	87ba                	mv	a5,a4
    802002de:	fe074ae3          	bltz	a4,802002d2 <consoleRead+0xa2>
    if ((ret & UART_RXFIFO_DATA) == '\r')
    802002e2:	0ff77713          	zext.b	a4,a4
    802002e6:	fb8702e3          	beq	a4,s8,8020028a <consoleRead+0x5a>
        char c = getchar();
    802002ea:	0ff7f793          	zext.b	a5,a5
    802002ee:	f8f40fa3          	sb	a5,-97(s0)
        if (c == '\n')
    802002f2:	fb9799e3          	bne	a5,s9,802002a4 <consoleRead+0x74>
    802002f6:	bf61                	j	8020028e <consoleRead+0x5e>

00000000802002f8 <consoleInterrupt>:
void consoleInterrupt(int c) {
    802002f8:	1141                	addi	sp,sp,-16
    802002fa:	e422                	sd	s0,8(sp)
    802002fc:	0800                	addi	s0,sp,16
}
    802002fe:	6422                	ld	s0,8(sp)
    80200300:	0141                	addi	sp,sp,16
    80200302:	8082                	ret

0000000080200304 <putchar>:
{
    80200304:	1141                	addi	sp,sp,-16
    80200306:	e422                	sd	s0,8(sp)
    80200308:	0800                	addi	s0,sp,16
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    8020030a:	10010737          	lui	a4,0x10010
    8020030e:	431c                	lw	a5,0(a4)
	while (readl(uartRegTXFIFO) & UART_TXFIFO_FULL);
    80200310:	0820000f          	fence	i,r
    80200314:	2781                	sext.w	a5,a5
    80200316:	fe07cce3          	bltz	a5,8020030e <putchar+0xa>
    writel(ch, uartRegTXFIFO);
    8020031a:	0140000f          	fence	w,o
	asm volatile("sw %0, 0(%1)" : : "r"(val), "r"(addr));
    8020031e:	100107b7          	lui	a5,0x10010
    80200322:	c388                	sw	a0,0(a5)
}
    80200324:	6422                	ld	s0,8(sp)
    80200326:	0141                	addi	sp,sp,16
    80200328:	8082                	ret

000000008020032a <getchar>:
{
    8020032a:	1141                	addi	sp,sp,-16
    8020032c:	e422                	sd	s0,8(sp)
    8020032e:	0800                	addi	s0,sp,16
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    80200330:	10010537          	lui	a0,0x10010
    80200334:	0511                	addi	a0,a0,4
    80200336:	4108                	lw	a0,0(a0)
    80200338:	0005079b          	sext.w	a5,a0
	u32 ret = readl(uartRegRXFIFO);
    8020033c:	0820000f          	fence	i,r
    while (ret & UART_RXFIFO_EMPTY) {
    80200340:	853e                	mv	a0,a5
    80200342:	0007dd63          	bgez	a5,8020035c <getchar+0x32>
	asm volatile("lw %0, 0(%1)" : "=r"(val) : "r"(addr));
    80200346:	10010737          	lui	a4,0x10010
    8020034a:	0711                	addi	a4,a4,4
    8020034c:	4308                	lw	a0,0(a4)
    8020034e:	0005079b          	sext.w	a5,a0
        ret = readl(uartRegRXFIFO);
    80200352:	0820000f          	fence	i,r
    while (ret & UART_RXFIFO_EMPTY) {
    80200356:	853e                	mv	a0,a5
    80200358:	fe07cae3          	bltz	a5,8020034c <getchar+0x22>
    if ((ret & UART_RXFIFO_DATA) == '\r')
    8020035c:	0ff7f793          	zext.b	a5,a5
    80200360:	4735                	li	a4,13
    80200362:	00e78763          	beq	a5,a4,80200370 <getchar+0x46>
    return ret & UART_RXFIFO_DATA;
    80200366:	0ff57513          	zext.b	a0,a0
}
    8020036a:	6422                	ld	s0,8(sp)
    8020036c:	0141                	addi	sp,sp,16
    8020036e:	8082                	ret
        return '\n';
    80200370:	4529                	li	a0,10
    80200372:	bfe5                	j	8020036a <getchar+0x40>

0000000080200374 <consoleInit>:

void consoleInit() {
    80200374:	1141                	addi	sp,sp,-16
    80200376:	e406                	sd	ra,8(sp)
    80200378:	e022                	sd	s0,0(sp)
    8020037a:	0800                	addi	s0,sp,16
    initLock(&consoleLock, "console");
    8020037c:	0000c597          	auipc	a1,0xc
    80200380:	cd458593          	addi	a1,a1,-812 # 8020c050 <textEnd+0x50>
    80200384:	001c2517          	auipc	a0,0x1c2
    80200388:	c8450513          	addi	a0,a0,-892 # 803c2008 <consoleLock>
    8020038c:	00005097          	auipc	ra,0x5
    80200390:	6d8080e7          	jalr	1752(ra) # 80205a64 <initLock>

    devsw[DEV_CONSOLE].read = consoleRead;
    80200394:	00419797          	auipc	a5,0x419
    80200398:	ca478793          	addi	a5,a5,-860 # 80619038 <devsw>
    8020039c:	00000717          	auipc	a4,0x0
    802003a0:	e9470713          	addi	a4,a4,-364 # 80200230 <consoleRead>
    802003a4:	eb98                	sd	a4,16(a5)
    devsw[DEV_CONSOLE].write = consoleWrite;
    802003a6:	00000717          	auipc	a4,0x0
    802003aa:	dec70713          	addi	a4,a4,-532 # 80200192 <consoleWrite>
    802003ae:	ef98                	sd	a4,24(a5)
    802003b0:	60a2                	ld	ra,8(sp)
    802003b2:	6402                	ld	s0,0(sp)
    802003b4:	0141                	addi	sp,sp,16
    802003b6:	8082                	ret

00000000802003b8 <printLockInit>:

struct Spinlock printLock;

#define IsDigit(x)  (((x) >= '0') && ((x) <= '9'))

inline void printLockInit(void) {
    802003b8:	1141                	addi	sp,sp,-16
    802003ba:	e406                	sd	ra,8(sp)
    802003bc:	e022                	sd	s0,0(sp)
    802003be:	0800                	addi	s0,sp,16
    initLock(&printLock, "printLock");
    802003c0:	0000c597          	auipc	a1,0xc
    802003c4:	c9858593          	addi	a1,a1,-872 # 8020c058 <textEnd+0x58>
    802003c8:	001c2517          	auipc	a0,0x1c2
    802003cc:	c9850513          	addi	a0,a0,-872 # 803c2060 <printLock>
    802003d0:	00005097          	auipc	ra,0x5
    802003d4:	694080e7          	jalr	1684(ra) # 80205a64 <initLock>
}
    802003d8:	60a2                	ld	ra,8(sp)
    802003da:	6402                	ld	s0,0(sp)
    802003dc:	0141                	addi	sp,sp,16
    802003de:	8082                	ret

00000000802003e0 <printChar>:
    print(fmt, ap);
    va_end(ap);
    releaseLock(&printLock);
}

void printChar(char *buf, char c, int length, int ladjust) {
    802003e0:	1141                	addi	sp,sp,-16
    802003e2:	e422                	sd	s0,8(sp)
    802003e4:	0800                	addi	s0,sp,16
    int i;

    if (length < 1)
    802003e6:	8732                	mv	a4,a2
    802003e8:	04c05063          	blez	a2,80200428 <printChar+0x48>
    802003ec:	2701                	sext.w	a4,a4
        length = 1;
    if (ladjust)
    802003ee:	ee9d                	bnez	a3,8020042c <printChar+0x4c>
        for (i = 1; i < length; i++)
            buf[i] = ' ';
    }
    else
    {
        for (i = 0; i < length - 1; i++)
    802003f0:	4785                	li	a5,1
    802003f2:	02c7d163          	bge	a5,a2,80200414 <printChar+0x34>
    802003f6:	87aa                	mv	a5,a0
    802003f8:	00150693          	addi	a3,a0,1
    802003fc:	ffe7061b          	addiw	a2,a4,-2
    80200400:	1602                	slli	a2,a2,0x20
    80200402:	9201                	srli	a2,a2,0x20
    80200404:	96b2                	add	a3,a3,a2
            buf[i] = ' ';
    80200406:	02000613          	li	a2,32
    8020040a:	00c78023          	sb	a2,0(a5)
        for (i = 0; i < length - 1; i++)
    8020040e:	0785                	addi	a5,a5,1
    80200410:	fed79de3          	bne	a5,a3,8020040a <printChar+0x2a>
        buf[length - 1] = c;
    80200414:	00e507b3          	add	a5,a0,a4
    80200418:	feb78fa3          	sb	a1,-1(a5)
    }
    buf[length] = '\0';
    8020041c:	953a                	add	a0,a0,a4
    8020041e:	00050023          	sb	zero,0(a0)
}
    80200422:	6422                	ld	s0,8(sp)
    80200424:	0141                	addi	sp,sp,16
    80200426:	8082                	ret
    80200428:	4705                	li	a4,1
    8020042a:	b7c9                	j	802003ec <printChar+0xc>
        *buf = c;
    8020042c:	00b50023          	sb	a1,0(a0)
        for (i = 1; i < length; i++)
    80200430:	4785                	li	a5,1
    80200432:	fec7d5e3          	bge	a5,a2,8020041c <printChar+0x3c>
            buf[i] = ' ';
    80200436:	02000613          	li	a2,32
    8020043a:	00f506b3          	add	a3,a0,a5
    8020043e:	00c68023          	sb	a2,0(a3)
        for (i = 1; i < length; i++)
    80200442:	0785                	addi	a5,a5,1
    80200444:	0007869b          	sext.w	a3,a5
    80200448:	fee6c9e3          	blt	a3,a4,8020043a <printChar+0x5a>
    8020044c:	bfc1                	j	8020041c <printChar+0x3c>

000000008020044e <printString>:

void printString(char * buf, char* s, int length, int ladjust) {
    8020044e:	1141                	addi	sp,sp,-16
    80200450:	e422                	sd	s0,8(sp)
    80200452:	0800                	addi	s0,sp,16
    int i;
    int len = 0;
    char *s1 = s;
    while (*s1++)
    80200454:	0005c783          	lbu	a5,0(a1)
    80200458:	c3f9                	beqz	a5,8020051e <printString+0xd0>
    8020045a:	00158713          	addi	a4,a1,1
    int len = 0;
    8020045e:	4781                	li	a5,0
        len++;
    80200460:	88be                	mv	a7,a5
    80200462:	2785                	addiw	a5,a5,1
    while (*s1++)
    80200464:	0705                	addi	a4,a4,1
    80200466:	fff74803          	lbu	a6,-1(a4)
    8020046a:	fe081be3          	bnez	a6,80200460 <printString+0x12>
    if (length < len)
    8020046e:	8732                	mv	a4,a2
    80200470:	00f65363          	bge	a2,a5,80200476 <printString+0x28>
    80200474:	873e                	mv	a4,a5
    80200476:	0007081b          	sext.w	a6,a4
        length = len;

    if (ladjust)
    8020047a:	e6b9                	bnez	a3,802004c8 <printString+0x7a>
        for (i = len; i < length; i++)
            buf[i] = ' ';
    }
    else
    {
        for (i = 0; i < length - len; i++)
    8020047c:	9f1d                	subw	a4,a4,a5
    8020047e:	02e05263          	blez	a4,802004a2 <printString+0x54>
    80200482:	86aa                	mv	a3,a0
    80200484:	00150613          	addi	a2,a0,1
    80200488:	fff7089b          	addiw	a7,a4,-1
    8020048c:	1882                	slli	a7,a7,0x20
    8020048e:	0208d893          	srli	a7,a7,0x20
    80200492:	9646                	add	a2,a2,a7
            buf[i] = ' ';
    80200494:	02000893          	li	a7,32
    80200498:	01168023          	sb	a7,0(a3)
        for (i = 0; i < length - len; i++)
    8020049c:	0685                	addi	a3,a3,1
    8020049e:	fec69de3          	bne	a3,a2,80200498 <printString+0x4a>
        for (i = length - len; i < length; i++)
    802004a2:	07075663          	bge	a4,a6,8020050e <printString+0xc0>
            buf[i] = s[i - length + len];
    802004a6:	410787b3          	sub	a5,a5,a6
    802004aa:	00e786b3          	add	a3,a5,a4
    802004ae:	96ae                	add	a3,a3,a1
    802004b0:	0006c603          	lbu	a2,0(a3)
    802004b4:	00e506b3          	add	a3,a0,a4
    802004b8:	00c68023          	sb	a2,0(a3)
        for (i = length - len; i < length; i++)
    802004bc:	0705                	addi	a4,a4,1
    802004be:	0007069b          	sext.w	a3,a4
    802004c2:	ff06c4e3          	blt	a3,a6,802004aa <printString+0x5c>
    802004c6:	a0a1                	j	8020050e <printString+0xc0>
        for (i = 0; i < len; i++)
    802004c8:	00f05f63          	blez	a5,802004e6 <printString+0x98>
    802004cc:	862a                	mv	a2,a0
    802004ce:	872e                	mv	a4,a1
            buf[i] = s[i];
    802004d0:	00074683          	lbu	a3,0(a4)
    802004d4:	00d60023          	sb	a3,0(a2)
        for (i = 0; i < len; i++)
    802004d8:	0705                	addi	a4,a4,1
    802004da:	0605                	addi	a2,a2,1
    802004dc:	40b706bb          	subw	a3,a4,a1
    802004e0:	36fd                	addiw	a3,a3,-1
    802004e2:	ff16c7e3          	blt	a3,a7,802004d0 <printString+0x82>
        for (i = len; i < length; i++)
    802004e6:	0307d463          	bge	a5,a6,8020050e <printString+0xc0>
    802004ea:	00f50733          	add	a4,a0,a5
    802004ee:	fff8069b          	addiw	a3,a6,-1
    802004f2:	9e9d                	subw	a3,a3,a5
    802004f4:	1682                	slli	a3,a3,0x20
    802004f6:	9281                	srli	a3,a3,0x20
    802004f8:	00150613          	addi	a2,a0,1
    802004fc:	97b2                	add	a5,a5,a2
    802004fe:	97b6                	add	a5,a5,a3
            buf[i] = ' ';
    80200500:	02000693          	li	a3,32
    80200504:	00d70023          	sb	a3,0(a4)
        for (i = len; i < length; i++)
    80200508:	0705                	addi	a4,a4,1
    8020050a:	fef71de3          	bne	a4,a5,80200504 <printString+0xb6>
    }
    buf[length] = '\0';
    8020050e:	982a                	add	a6,a6,a0
    80200510:	00080023          	sb	zero,0(a6)
}
    80200514:	6422                	ld	s0,8(sp)
    80200516:	0141                	addi	sp,sp,16
    80200518:	8082                	ret
    int len = 0;
    8020051a:	4781                	li	a5,0
    8020051c:	b7e9                	j	802004e6 <printString+0x98>
    if (length < len)
    8020051e:	fff64813          	not	a6,a2
    80200522:	43f85813          	srai	a6,a6,0x3f
    80200526:	00c87833          	and	a6,a6,a2
    if (ladjust)
    8020052a:	fae5                	bnez	a3,8020051a <printString+0xcc>
        for (i = 0; i < length - len; i++)
    8020052c:	8742                	mv	a4,a6
    int len = 0;
    8020052e:	87b6                	mv	a5,a3
        for (i = 0; i < length - len; i++)
    80200530:	f4c049e3          	bgtz	a2,80200482 <printString+0x34>
    80200534:	bfe9                	j	8020050e <printString+0xc0>

0000000080200536 <printNum>:

void printNum(char * buf, unsigned long u, int base, int negFlag, 
	 int length, int ladjust, char padc, int upcase)
{
    80200536:	1141                	addi	sp,sp,-16
    80200538:	e422                	sd	s0,8(sp)
    8020053a:	0800                	addi	s0,sp,16
    int actualLength = 0;
    char *p = buf;
    8020053c:	00150e13          	addi	t3,a0,1
    int i;

    do
    {
        int tmp = u % base;
    80200540:	8fb2                	mv	t6,a2
        if (tmp <= 9)
    80200542:	4f25                	li	t5,9
    80200544:	a005                	j	80200564 <printNum+0x2e>
        {
            *p++ = '0' + tmp;
        }
        else if (upcase)
    80200546:	02088b63          	beqz	a7,8020057c <printNum+0x46>
        {
            *p++ = 'A' + tmp - 10;
    8020054a:	8ef2                	mv	t4,t3
    8020054c:	0373031b          	addiw	t1,t1,55
    80200550:	0ff37313          	zext.b	t1,t1
            *p++ = '0' + tmp;
    80200554:	fe6e0fa3          	sb	t1,-1(t3)
        }
        else
        {
            *p++ = 'a' + tmp - 10;
        }
        u /= base;
    80200558:	02c5d333          	divu	t1,a1,a2
    } while (u != 0);
    8020055c:	0e05                	addi	t3,t3,1
    8020055e:	03f5e563          	bltu	a1,t6,80200588 <printNum+0x52>
        u /= base;
    80200562:	859a                	mv	a1,t1
        int tmp = u % base;
    80200564:	02c5f333          	remu	t1,a1,a2
        if (tmp <= 9)
    80200568:	00030e9b          	sext.w	t4,t1
    8020056c:	fddf4de3          	blt	t5,t4,80200546 <printNum+0x10>
            *p++ = '0' + tmp;
    80200570:	8ef2                	mv	t4,t3
    80200572:	0303031b          	addiw	t1,t1,48
    80200576:	0ff37313          	zext.b	t1,t1
    8020057a:	bfe9                	j	80200554 <printNum+0x1e>
            *p++ = 'a' + tmp - 10;
    8020057c:	8ef2                	mv	t4,t3
    8020057e:	0573031b          	addiw	t1,t1,87
    80200582:	0ff37313          	zext.b	t1,t1
    80200586:	b7f9                	j	80200554 <printNum+0x1e>

    if (negFlag)
    80200588:	c685                	beqz	a3,802005b0 <printNum+0x7a>
    {
        *p++ = '-';
    8020058a:	02d00613          	li	a2,45
    8020058e:	00ce8023          	sb	a2,0(t4)
    80200592:	0e85                	addi	t4,t4,1
    }

    /* figure out actual length and adjust the maximum length */
    actualLength = p - buf;
    80200594:	40ae8eb3          	sub	t4,t4,a0
    80200598:	000e859b          	sext.w	a1,t4
    if (length < actualLength)
    8020059c:	88ae                	mv	a7,a1
    8020059e:	00e5d363          	bge	a1,a4,802005a4 <printNum+0x6e>
    802005a2:	88ba                	mv	a7,a4
    802005a4:	2881                	sext.w	a7,a7
        length = actualLength;

    /* add padding */
    if (ladjust)
    802005a6:	e78d                	bnez	a5,802005d0 <printNum+0x9a>
    {
        padc = ' ';
    }
    if (negFlag && !ladjust && (padc == '0'))
    802005a8:	e2d1                	bnez	a3,8020062c <printNum+0xf6>
            buf[i] = padc;
        buf[length - 1] = '-';
    }
    else
    {
        for (i = actualLength; i < length; i++)
    802005aa:	0315c763          	blt	a1,a7,802005d8 <printNum+0xa2>
    802005ae:	a87d                	j	8020066c <printNum+0x136>
    actualLength = p - buf;
    802005b0:	40ae8eb3          	sub	t4,t4,a0
    802005b4:	000e859b          	sext.w	a1,t4
    if (length < actualLength)
    802005b8:	88ae                	mv	a7,a1
    802005ba:	00e5d363          	bge	a1,a4,802005c0 <printNum+0x8a>
    802005be:	88ba                	mv	a7,a4
    802005c0:	2881                	sext.w	a7,a7
    if (ladjust)
    802005c2:	d3fd                	beqz	a5,802005a8 <printNum+0x72>
    if (negFlag && !ladjust && (padc == '0'))
    802005c4:	e691                	bnez	a3,802005d0 <printNum+0x9a>
        padc = ' ';
    802005c6:	02000813          	li	a6,32
        for (i = actualLength; i < length; i++)
    802005ca:	0115c763          	blt	a1,a7,802005d8 <printNum+0xa2>
    802005ce:	a005                	j	802005ee <printNum+0xb8>
        padc = ' ';
    802005d0:	02000813          	li	a6,32
        for (i = actualLength; i < length; i++)
    802005d4:	0115dd63          	bge	a1,a7,802005ee <printNum+0xb8>
    802005d8:	872e                	mv	a4,a1
            buf[i] = padc;
    802005da:	00e506b3          	add	a3,a0,a4
    802005de:	01068023          	sb	a6,0(a3)
        for (i = actualLength; i < length; i++)
    802005e2:	0705                	addi	a4,a4,1
    802005e4:	0007069b          	sext.w	a3,a4
    802005e8:	ff16c9e3          	blt	a3,a7,802005da <printNum+0xa4>

    /* prepare to reverse the string */
    {
        int begin = 0;
        int end;
        if (ladjust)
    802005ec:	c3c1                	beqz	a5,8020066c <printNum+0x136>
        {
            end = actualLength - 1;
    802005ee:	35fd                	addiw	a1,a1,-1
        else
        {
            end = length - 1;
        }

        while (end > begin)
    802005f0:	02b05863          	blez	a1,80200620 <printNum+0xea>
    802005f4:	86aa                	mv	a3,a0
    802005f6:	00b50733          	add	a4,a0,a1
    802005fa:	4601                	li	a2,0
        {
            char tmp = buf[begin];
    802005fc:	0006c783          	lbu	a5,0(a3)
            buf[begin] = buf[end];
    80200600:	00074803          	lbu	a6,0(a4)
    80200604:	01068023          	sb	a6,0(a3)
            buf[end] = tmp;
    80200608:	00f70023          	sb	a5,0(a4)
            begin++;
    8020060c:	0016079b          	addiw	a5,a2,1
    80200610:	0007861b          	sext.w	a2,a5
        while (end > begin)
    80200614:	0685                	addi	a3,a3,1
    80200616:	177d                	addi	a4,a4,-1
    80200618:	40f587bb          	subw	a5,a1,a5
    8020061c:	fef640e3          	blt	a2,a5,802005fc <printNum+0xc6>
            end--;
        }
    }

    /* adjust the string pointer */
    buf[length] = '\0';
    80200620:	98aa                	add	a7,a7,a0
    80200622:	00088023          	sb	zero,0(a7)
}
    80200626:	6422                	ld	s0,8(sp)
    80200628:	0141                	addi	sp,sp,16
    8020062a:	8082                	ret
    if (negFlag && !ladjust && (padc == '0'))
    8020062c:	03000713          	li	a4,48
    80200630:	00e80563          	beq	a6,a4,8020063a <printNum+0x104>
        for (i = actualLength; i < length; i++)
    80200634:	fb15c2e3          	blt	a1,a7,802005d8 <printNum+0xa2>
    80200638:	a815                	j	8020066c <printNum+0x136>
        for (i = actualLength - 1; i < length - 1; i++)
    8020063a:	fff5871b          	addiw	a4,a1,-1
    8020063e:	0315d163          	bge	a1,a7,80200660 <printNum+0x12a>
    80200642:	972a                	add	a4,a4,a0
    80200644:	41d887bb          	subw	a5,a7,t4
    80200648:	37fd                	addiw	a5,a5,-1
    8020064a:	1782                	slli	a5,a5,0x20
    8020064c:	9381                	srli	a5,a5,0x20
    8020064e:	95aa                	add	a1,a1,a0
    80200650:	97ae                	add	a5,a5,a1
            buf[i] = padc;
    80200652:	03000693          	li	a3,48
    80200656:	00d70023          	sb	a3,0(a4)
        for (i = actualLength - 1; i < length - 1; i++)
    8020065a:	0705                	addi	a4,a4,1
    8020065c:	fef71de3          	bne	a4,a5,80200656 <printNum+0x120>
        buf[length - 1] = '-';
    80200660:	011507b3          	add	a5,a0,a7
    80200664:	02d00713          	li	a4,45
    80200668:	fee78fa3          	sb	a4,-1(a5)
            end = length - 1;
    8020066c:	fff8859b          	addiw	a1,a7,-1
    80200670:	b741                	j	802005f0 <printNum+0xba>

0000000080200672 <print>:
    for (i = 0; fmt[i]; i++) {
    80200672:	00054783          	lbu	a5,0(a0)
    80200676:	44078463          	beqz	a5,80200abe <print+0x44c>
static void print(const char *fmt, va_list ap) {
    8020067a:	7151                	addi	sp,sp,-240
    8020067c:	f586                	sd	ra,232(sp)
    8020067e:	f1a2                	sd	s0,224(sp)
    80200680:	eda6                	sd	s1,216(sp)
    80200682:	e9ca                	sd	s2,208(sp)
    80200684:	e5ce                	sd	s3,200(sp)
    80200686:	e1d2                	sd	s4,192(sp)
    80200688:	fd56                	sd	s5,184(sp)
    8020068a:	f95a                	sd	s6,176(sp)
    8020068c:	f55e                	sd	s7,168(sp)
    8020068e:	f162                	sd	s8,160(sp)
    80200690:	ed66                	sd	s9,152(sp)
    80200692:	e96a                	sd	s10,144(sp)
    80200694:	e56e                	sd	s11,136(sp)
    80200696:	1980                	addi	s0,sp,240
    80200698:	84aa                	mv	s1,a0
    8020069a:	8aae                	mv	s5,a1
    for (i = 0; fmt[i]; i++) {
    8020069c:	8a2a                	mv	s4,a0
    8020069e:	4901                	li	s2,0
        if (fmt[i] != '%'){
    802006a0:	02500993          	li	s3,37
        if (c == '-') {
    802006a4:	02d00c13          	li	s8,45
            ladjust = 0;
    802006a8:	4b01                	li	s6,0
        if (c == '0') {
    802006aa:	03000b93          	li	s7,48
        switch (c) {
    802006ae:	0000cc97          	auipc	s9,0xc
    802006b2:	9fac8c93          	addi	s9,s9,-1542 # 8020c0a8 <textEnd+0xa8>
    802006b6:	0000cd17          	auipc	s10,0xc
    802006ba:	ac6d0d13          	addi	s10,s10,-1338 # 8020c17c <textEnd+0x17c>
    802006be:	a831                	j	802006da <print+0x68>
            putchar(fmt[i]);
    802006c0:	000a4503          	lbu	a0,0(s4)
    802006c4:	00000097          	auipc	ra,0x0
    802006c8:	c40080e7          	jalr	-960(ra) # 80200304 <putchar>
    for (i = 0; fmt[i]; i++) {
    802006cc:	2905                	addiw	s2,s2,1
    802006ce:	01248a33          	add	s4,s1,s2
    802006d2:	000a4783          	lbu	a5,0(s4)
    802006d6:	3c078563          	beqz	a5,80200aa0 <print+0x42e>
        if (fmt[i] != '%'){
    802006da:	01378b63          	beq	a5,s3,802006f0 <print+0x7e>
            if (fmt[i] == '\n') {
    802006de:	4729                	li	a4,10
    802006e0:	fee790e3          	bne	a5,a4,802006c0 <print+0x4e>
                putchar('\r');
    802006e4:	4535                	li	a0,13
    802006e6:	00000097          	auipc	ra,0x0
    802006ea:	c1e080e7          	jalr	-994(ra) # 80200304 <putchar>
    802006ee:	bfc9                	j	802006c0 <print+0x4e>
        c = fmt[++i];
    802006f0:	00190a1b          	addiw	s4,s2,1
    802006f4:	014487b3          	add	a5,s1,s4
    802006f8:	0007c503          	lbu	a0,0(a5)
            ladjust = 0;
    802006fc:	87da                	mv	a5,s6
        if (c == '-') {
    802006fe:	09850263          	beq	a0,s8,80200782 <print+0x110>
            padc = ' ';
    80200702:	02000813          	li	a6,32
        if (c == '0') {
    80200706:	09750663          	beq	a0,s7,80200792 <print+0x120>
        while (IsDigit(c)) {
    8020070a:	fd05071b          	addiw	a4,a0,-48
    8020070e:	46a5                	li	a3,9
    80200710:	08e6e863          	bltu	a3,a4,802007a0 <print+0x12e>
    80200714:	001a089b          	addiw	a7,s4,1
        width = 0;
    80200718:	875a                	mv	a4,s6
        while (IsDigit(c)) {
    8020071a:	4325                	li	t1,9
            width = (width << 3) + (width << 1) + c - '0';
    8020071c:	0027159b          	slliw	a1,a4,0x2
    80200720:	9db9                	addw	a1,a1,a4
    80200722:	0015959b          	slliw	a1,a1,0x1
    80200726:	9da9                	addw	a1,a1,a0
    80200728:	fd05871b          	addiw	a4,a1,-48
            c = fmt[++i];
    8020072c:	00088a1b          	sext.w	s4,a7
    80200730:	01148633          	add	a2,s1,a7
    80200734:	00064583          	lbu	a1,0(a2)
    80200738:	0005851b          	sext.w	a0,a1
        while (IsDigit(c)) {
    8020073c:	0885                	addi	a7,a7,1
    8020073e:	fd05859b          	addiw	a1,a1,-48
    80200742:	fcb37de3          	bgeu	t1,a1,8020071c <print+0xaa>
        if (c == '.') {
    80200746:	02e00693          	li	a3,46
    8020074a:	04d50d63          	beq	a0,a3,802007a4 <print+0x132>
        if (c == 'l') {
    8020074e:	06c00693          	li	a3,108
    80200752:	08d50663          	beq	a0,a3,802007de <print+0x16c>
        switch (c) {
    80200756:	32050963          	beqz	a0,80200a88 <print+0x416>
    8020075a:	fbc5069b          	addiw	a3,a0,-68
    8020075e:	03400613          	li	a2,52
    80200762:	32d66763          	bltu	a2,a3,80200a90 <print+0x41e>
    80200766:	fbc5069b          	addiw	a3,a0,-68
    8020076a:	0006859b          	sext.w	a1,a3
    8020076e:	32b66163          	bltu	a2,a1,80200a90 <print+0x41e>
    80200772:	02069613          	slli	a2,a3,0x20
    80200776:	01e65693          	srli	a3,a2,0x1e
    8020077a:	96e6                	add	a3,a3,s9
    8020077c:	4294                	lw	a3,0(a3)
    8020077e:	96e6                	add	a3,a3,s9
    80200780:	8682                	jr	a3
            c = fmt[++i];
    80200782:	00290a1b          	addiw	s4,s2,2
    80200786:	014487b3          	add	a5,s1,s4
    8020078a:	0007c503          	lbu	a0,0(a5)
            ladjust = 1;
    8020078e:	4785                	li	a5,1
    80200790:	bf8d                	j	80200702 <print+0x90>
            c = fmt[++i];
    80200792:	2a05                	addiw	s4,s4,1
    80200794:	01448733          	add	a4,s1,s4
    80200798:	00074503          	lbu	a0,0(a4)
            padc = '0';
    8020079c:	885e                	mv	a6,s7
    8020079e:	b7b5                	j	8020070a <print+0x98>
        width = 0;
    802007a0:	875a                	mv	a4,s6
    802007a2:	b755                	j	80200746 <print+0xd4>
            c = fmt[++i];
    802007a4:	001a069b          	addiw	a3,s4,1
    802007a8:	00d48633          	add	a2,s1,a3
    802007ac:	00064503          	lbu	a0,0(a2)
            while (IsDigit(c)) {
    802007b0:	fd05031b          	addiw	t1,a0,-48
    802007b4:	48a5                	li	a7,9
    802007b6:	002a061b          	addiw	a2,s4,2
    802007ba:	45a5                	li	a1,9
            c = fmt[++i];
    802007bc:	2501                	sext.w	a0,a0
    802007be:	8a36                	mv	s4,a3
            while (IsDigit(c)) {
    802007c0:	f868e7e3          	bltu	a7,t1,8020074e <print+0xdc>
                c = fmt[++i];
    802007c4:	00060a1b          	sext.w	s4,a2
    802007c8:	00c486b3          	add	a3,s1,a2
    802007cc:	0006c503          	lbu	a0,0(a3)
            while (IsDigit(c)) {
    802007d0:	0605                	addi	a2,a2,1
    802007d2:	fd05069b          	addiw	a3,a0,-48
    802007d6:	fed5f7e3          	bgeu	a1,a3,802007c4 <print+0x152>
                c = fmt[++i];
    802007da:	2501                	sext.w	a0,a0
    802007dc:	bf8d                	j	8020074e <print+0xdc>
            c = fmt[++i];
    802007de:	2a05                	addiw	s4,s4,1
    802007e0:	014486b3          	add	a3,s1,s4
    802007e4:	0006c503          	lbu	a0,0(a3)
        switch (c) {
    802007e8:	2a050063          	beqz	a0,80200a88 <print+0x416>
    802007ec:	fbc5069b          	addiw	a3,a0,-68
    802007f0:	0ff6f693          	zext.b	a3,a3
    802007f4:	03400613          	li	a2,52
    802007f8:	28d66b63          	bltu	a2,a3,80200a8e <print+0x41c>
    802007fc:	fbc5069b          	addiw	a3,a0,-68
    80200800:	0ff6f593          	zext.b	a1,a3
    80200804:	28b66563          	bltu	a2,a1,80200a8e <print+0x41c>
    80200808:	00259693          	slli	a3,a1,0x2
    8020080c:	96ea                	add	a3,a3,s10
    8020080e:	4294                	lw	a3,0(a3)
    80200810:	96ea                	add	a3,a3,s10
    80200812:	8682                	jr	a3
    80200814:	8952                	mv	s2,s4
    80200816:	a011                	j	8020081a <print+0x1a8>
    80200818:	8952                	mv	s2,s4
                c = (char)va_arg(ap, u32);
    8020081a:	008a8a13          	addi	s4,s5,8
    8020081e:	000aca83          	lbu	s5,0(s5)
            	printChar(buf, c, width, ladjust);
    80200822:	86be                	mv	a3,a5
    80200824:	863a                	mv	a2,a4
    80200826:	85d6                	mv	a1,s5
    80200828:	f1040513          	addi	a0,s0,-240
    8020082c:	00000097          	auipc	ra,0x0
    80200830:	bb4080e7          	jalr	-1100(ra) # 802003e0 <printChar>
                putchar(c);
    80200834:	8556                	mv	a0,s5
    80200836:	00000097          	auipc	ra,0x0
    8020083a:	ace080e7          	jalr	-1330(ra) # 80200304 <putchar>
                c = (char)va_arg(ap, u32);
    8020083e:	8ad2                	mv	s5,s4
                break;
    80200840:	b571                	j	802006cc <print+0x5a>
                    num = va_arg(ap, i64);
    80200842:	000ab583          	ld	a1,0(s5)
    80200846:	8952                	mv	s2,s4
    80200848:	0aa1                	addi	s5,s5,8
        negFlag = 0;
    8020084a:	86da                	mv	a3,s6
                if (num < 0) {
    8020084c:	0205c763          	bltz	a1,8020087a <print+0x208>
	            printNum(buf, num, 10, negFlag, width, ladjust, padc, 0);
    80200850:	88da                	mv	a7,s6
    80200852:	4629                	li	a2,10
    80200854:	f1040513          	addi	a0,s0,-240
    80200858:	00000097          	auipc	ra,0x0
    8020085c:	cde080e7          	jalr	-802(ra) # 80200536 <printNum>
    while (*s) {
    80200860:	f1044783          	lbu	a5,-240(s0)
    80200864:	e60784e3          	beqz	a5,802006cc <print+0x5a>
    80200868:	f1040a13          	addi	s4,s0,-240
        if (*s == '\n') {
    8020086c:	4da9                	li	s11,10
    8020086e:	a02d                	j	80200898 <print+0x226>
                    num = va_arg(ap, i32);
    80200870:	000aa583          	lw	a1,0(s5)
    80200874:	8952                	mv	s2,s4
    80200876:	0aa1                	addi	s5,s5,8
    80200878:	bfc9                	j	8020084a <print+0x1d8>
                    num = -num;
    8020087a:	40b005b3          	neg	a1,a1
                    negFlag = 1;
    8020087e:	4685                	li	a3,1
    80200880:	bfc1                	j	80200850 <print+0x1de>
        putchar(*s++);
    80200882:	0a05                	addi	s4,s4,1
    80200884:	fffa4503          	lbu	a0,-1(s4)
    80200888:	00000097          	auipc	ra,0x0
    8020088c:	a7c080e7          	jalr	-1412(ra) # 80200304 <putchar>
    while (*s) {
    80200890:	000a4783          	lbu	a5,0(s4)
    80200894:	e2078ce3          	beqz	a5,802006cc <print+0x5a>
        if (*s == '\n') {
    80200898:	ffb795e3          	bne	a5,s11,80200882 <print+0x210>
            putchar('\r');
    8020089c:	4535                	li	a0,13
    8020089e:	00000097          	auipc	ra,0x0
    802008a2:	a66080e7          	jalr	-1434(ra) # 80200304 <putchar>
    802008a6:	bff1                	j	80200882 <print+0x210>
        switch (c) {
    802008a8:	8952                	mv	s2,s4
    802008aa:	4685                	li	a3,1
    802008ac:	a019                	j	802008b2 <print+0x240>
    802008ae:	8952                	mv	s2,s4
    802008b0:	86da                	mv	a3,s6
                if (longFlag) {
    802008b2:	c68d                	beqz	a3,802008dc <print+0x26a>
                    num = va_arg(ap, i64);
    802008b4:	000ab583          	ld	a1,0(s5)
    802008b8:	0aa1                	addi	s5,s5,8
                printNum(buf, num, 8, 0, width, ladjust, padc, 0);
    802008ba:	88da                	mv	a7,s6
    802008bc:	86da                	mv	a3,s6
    802008be:	4621                	li	a2,8
    802008c0:	f1040513          	addi	a0,s0,-240
    802008c4:	00000097          	auipc	ra,0x0
    802008c8:	c72080e7          	jalr	-910(ra) # 80200536 <printNum>
    while (*s) {
    802008cc:	f1044783          	lbu	a5,-240(s0)
    802008d0:	de078ee3          	beqz	a5,802006cc <print+0x5a>
    802008d4:	f1040a13          	addi	s4,s0,-240
        if (*s == '\n') {
    802008d8:	4da9                	li	s11,10
    802008da:	a005                	j	802008fa <print+0x288>
                    num = va_arg(ap, i32);
    802008dc:	000aa583          	lw	a1,0(s5)
    802008e0:	0aa1                	addi	s5,s5,8
    802008e2:	bfe1                	j	802008ba <print+0x248>
        putchar(*s++);
    802008e4:	0a05                	addi	s4,s4,1
    802008e6:	fffa4503          	lbu	a0,-1(s4)
    802008ea:	00000097          	auipc	ra,0x0
    802008ee:	a1a080e7          	jalr	-1510(ra) # 80200304 <putchar>
    while (*s) {
    802008f2:	000a4783          	lbu	a5,0(s4)
    802008f6:	dc078be3          	beqz	a5,802006cc <print+0x5a>
        if (*s == '\n') {
    802008fa:	ffb795e3          	bne	a5,s11,802008e4 <print+0x272>
            putchar('\r');
    802008fe:	4535                	li	a0,13
    80200900:	00000097          	auipc	ra,0x0
    80200904:	a04080e7          	jalr	-1532(ra) # 80200304 <putchar>
    80200908:	bff1                	j	802008e4 <print+0x272>
        switch (c) {
    8020090a:	8952                	mv	s2,s4
    8020090c:	4685                	li	a3,1
    8020090e:	a019                	j	80200914 <print+0x2a2>
    80200910:	8952                	mv	s2,s4
    80200912:	86da                	mv	a3,s6
                if (longFlag) {
    80200914:	c68d                	beqz	a3,8020093e <print+0x2cc>
                    num = va_arg(ap, i64);
    80200916:	000ab583          	ld	a1,0(s5)
    8020091a:	0aa1                	addi	s5,s5,8
	            printNum(buf, num, 10, 0, width, ladjust, padc, 0);
    8020091c:	88da                	mv	a7,s6
    8020091e:	86da                	mv	a3,s6
    80200920:	4629                	li	a2,10
    80200922:	f1040513          	addi	a0,s0,-240
    80200926:	00000097          	auipc	ra,0x0
    8020092a:	c10080e7          	jalr	-1008(ra) # 80200536 <printNum>
    while (*s) {
    8020092e:	f1044783          	lbu	a5,-240(s0)
    80200932:	d8078de3          	beqz	a5,802006cc <print+0x5a>
    80200936:	f1040a13          	addi	s4,s0,-240
        if (*s == '\n') {
    8020093a:	4da9                	li	s11,10
    8020093c:	a005                	j	8020095c <print+0x2ea>
                    num = va_arg(ap, i32);
    8020093e:	000aa583          	lw	a1,0(s5)
    80200942:	0aa1                	addi	s5,s5,8
    80200944:	bfe1                	j	8020091c <print+0x2aa>
        putchar(*s++);
    80200946:	0a05                	addi	s4,s4,1
    80200948:	fffa4503          	lbu	a0,-1(s4)
    8020094c:	00000097          	auipc	ra,0x0
    80200950:	9b8080e7          	jalr	-1608(ra) # 80200304 <putchar>
    while (*s) {
    80200954:	000a4783          	lbu	a5,0(s4)
    80200958:	d6078ae3          	beqz	a5,802006cc <print+0x5a>
        if (*s == '\n') {
    8020095c:	ffb795e3          	bne	a5,s11,80200946 <print+0x2d4>
            putchar('\r');
    80200960:	4535                	li	a0,13
    80200962:	00000097          	auipc	ra,0x0
    80200966:	9a2080e7          	jalr	-1630(ra) # 80200304 <putchar>
    8020096a:	bff1                	j	80200946 <print+0x2d4>
        switch (c) {
    8020096c:	8952                	mv	s2,s4
    8020096e:	4685                	li	a3,1
    80200970:	a019                	j	80200976 <print+0x304>
    80200972:	8952                	mv	s2,s4
    80200974:	86da                	mv	a3,s6
                if (longFlag) {
    80200976:	c68d                	beqz	a3,802009a0 <print+0x32e>
                    num = va_arg(ap, i64);
    80200978:	000ab583          	ld	a1,0(s5)
    8020097c:	0aa1                	addi	s5,s5,8
                printNum(buf, num, 16, 0, width, ladjust, padc, 0);
    8020097e:	88da                	mv	a7,s6
    80200980:	86da                	mv	a3,s6
    80200982:	4641                	li	a2,16
    80200984:	f1040513          	addi	a0,s0,-240
    80200988:	00000097          	auipc	ra,0x0
    8020098c:	bae080e7          	jalr	-1106(ra) # 80200536 <printNum>
    while (*s) {
    80200990:	f1044783          	lbu	a5,-240(s0)
    80200994:	d2078ce3          	beqz	a5,802006cc <print+0x5a>
    80200998:	f1040a13          	addi	s4,s0,-240
        if (*s == '\n') {
    8020099c:	4da9                	li	s11,10
    8020099e:	a005                	j	802009be <print+0x34c>
                    num = va_arg(ap, i32);
    802009a0:	000aa583          	lw	a1,0(s5)
    802009a4:	0aa1                	addi	s5,s5,8
    802009a6:	bfe1                	j	8020097e <print+0x30c>
        putchar(*s++);
    802009a8:	0a05                	addi	s4,s4,1
    802009aa:	fffa4503          	lbu	a0,-1(s4)
    802009ae:	00000097          	auipc	ra,0x0
    802009b2:	956080e7          	jalr	-1706(ra) # 80200304 <putchar>
    while (*s) {
    802009b6:	000a4783          	lbu	a5,0(s4)
    802009ba:	d00789e3          	beqz	a5,802006cc <print+0x5a>
        if (*s == '\n') {
    802009be:	ffb795e3          	bne	a5,s11,802009a8 <print+0x336>
            putchar('\r');
    802009c2:	4535                	li	a0,13
    802009c4:	00000097          	auipc	ra,0x0
    802009c8:	940080e7          	jalr	-1728(ra) # 80200304 <putchar>
    802009cc:	bff1                	j	802009a8 <print+0x336>
                    num = va_arg(ap, i64);
    802009ce:	000ab583          	ld	a1,0(s5)
            c = fmt[++i];
    802009d2:	8952                	mv	s2,s4
                    num = va_arg(ap, i64);
    802009d4:	0aa1                	addi	s5,s5,8
                printNum(buf, num, 16, 0, width, ladjust, padc, 1);
    802009d6:	4885                	li	a7,1
    802009d8:	86da                	mv	a3,s6
    802009da:	4641                	li	a2,16
    802009dc:	f1040513          	addi	a0,s0,-240
    802009e0:	00000097          	auipc	ra,0x0
    802009e4:	b56080e7          	jalr	-1194(ra) # 80200536 <printNum>
    while (*s) {
    802009e8:	f1044783          	lbu	a5,-240(s0)
    802009ec:	ce0780e3          	beqz	a5,802006cc <print+0x5a>
    802009f0:	f1040a13          	addi	s4,s0,-240
        if (*s == '\n') {
    802009f4:	4da9                	li	s11,10
    802009f6:	a00d                	j	80200a18 <print+0x3a6>
                    num = va_arg(ap, i32);
    802009f8:	000aa583          	lw	a1,0(s5)
    802009fc:	8952                	mv	s2,s4
    802009fe:	0aa1                	addi	s5,s5,8
    80200a00:	bfd9                	j	802009d6 <print+0x364>
        putchar(*s++);
    80200a02:	0a05                	addi	s4,s4,1
    80200a04:	fffa4503          	lbu	a0,-1(s4)
    80200a08:	00000097          	auipc	ra,0x0
    80200a0c:	8fc080e7          	jalr	-1796(ra) # 80200304 <putchar>
    while (*s) {
    80200a10:	000a4783          	lbu	a5,0(s4)
    80200a14:	ca078ce3          	beqz	a5,802006cc <print+0x5a>
        if (*s == '\n') {
    80200a18:	ffb795e3          	bne	a5,s11,80200a02 <print+0x390>
            putchar('\r');
    80200a1c:	4535                	li	a0,13
    80200a1e:	00000097          	auipc	ra,0x0
    80200a22:	8e6080e7          	jalr	-1818(ra) # 80200304 <putchar>
    80200a26:	bff1                	j	80200a02 <print+0x390>
        switch (c) {
    80200a28:	8952                	mv	s2,s4
    80200a2a:	a011                	j	80200a2e <print+0x3bc>
    80200a2c:	8952                	mv	s2,s4
                if ((s = va_arg(ap, char*)) == 0) {
    80200a2e:	008a8d93          	addi	s11,s5,8
    80200a32:	000ab583          	ld	a1,0(s5)
    80200a36:	c185                	beqz	a1,80200a56 <print+0x3e4>
                printString(buf, s, width, ladjust);
    80200a38:	86be                	mv	a3,a5
    80200a3a:	863a                	mv	a2,a4
    80200a3c:	f1040513          	addi	a0,s0,-240
    80200a40:	00000097          	auipc	ra,0x0
    80200a44:	a0e080e7          	jalr	-1522(ra) # 8020044e <printString>
    while (*s) {
    80200a48:	f1044783          	lbu	a5,-240(s0)
    80200a4c:	cba1                	beqz	a5,80200a9c <print+0x42a>
    80200a4e:	f1040a13          	addi	s4,s0,-240
        if (*s == '\n') {
    80200a52:	4aa9                	li	s5,10
    80200a54:	a005                	j	80200a74 <print+0x402>
                    s = "(null)";
    80200a56:	0000b597          	auipc	a1,0xb
    80200a5a:	61258593          	addi	a1,a1,1554 # 8020c068 <textEnd+0x68>
    80200a5e:	bfe9                	j	80200a38 <print+0x3c6>
        putchar(*s++);
    80200a60:	0a05                	addi	s4,s4,1
    80200a62:	fffa4503          	lbu	a0,-1(s4)
    80200a66:	00000097          	auipc	ra,0x0
    80200a6a:	89e080e7          	jalr	-1890(ra) # 80200304 <putchar>
    while (*s) {
    80200a6e:	000a4783          	lbu	a5,0(s4)
    80200a72:	cb89                	beqz	a5,80200a84 <print+0x412>
        if (*s == '\n') {
    80200a74:	ff5796e3          	bne	a5,s5,80200a60 <print+0x3ee>
            putchar('\r');
    80200a78:	4535                	li	a0,13
    80200a7a:	00000097          	auipc	ra,0x0
    80200a7e:	88a080e7          	jalr	-1910(ra) # 80200304 <putchar>
    80200a82:	bff9                	j	80200a60 <print+0x3ee>
                if ((s = va_arg(ap, char*)) == 0) {
    80200a84:	8aee                	mv	s5,s11
    80200a86:	b199                	j	802006cc <print+0x5a>
                i--;
    80200a88:	fffa091b          	addiw	s2,s4,-1
                break;
    80200a8c:	b181                	j	802006cc <print+0x5a>
            c = fmt[++i];
    80200a8e:	2501                	sext.w	a0,a0
                putchar(c);
    80200a90:	00000097          	auipc	ra,0x0
    80200a94:	874080e7          	jalr	-1932(ra) # 80200304 <putchar>
                break;
    80200a98:	8952                	mv	s2,s4
    80200a9a:	b90d                	j	802006cc <print+0x5a>
                if ((s = va_arg(ap, char*)) == 0) {
    80200a9c:	8aee                	mv	s5,s11
    80200a9e:	b13d                	j	802006cc <print+0x5a>
}
    80200aa0:	70ae                	ld	ra,232(sp)
    80200aa2:	740e                	ld	s0,224(sp)
    80200aa4:	64ee                	ld	s1,216(sp)
    80200aa6:	694e                	ld	s2,208(sp)
    80200aa8:	69ae                	ld	s3,200(sp)
    80200aaa:	6a0e                	ld	s4,192(sp)
    80200aac:	7aea                	ld	s5,184(sp)
    80200aae:	7b4a                	ld	s6,176(sp)
    80200ab0:	7baa                	ld	s7,168(sp)
    80200ab2:	7c0a                	ld	s8,160(sp)
    80200ab4:	6cea                	ld	s9,152(sp)
    80200ab6:	6d4a                	ld	s10,144(sp)
    80200ab8:	6daa                	ld	s11,136(sp)
    80200aba:	616d                	addi	sp,sp,240
    80200abc:	8082                	ret
    80200abe:	8082                	ret

0000000080200ac0 <printf>:
void printf(const char *fmt, ...) {
    80200ac0:	7159                	addi	sp,sp,-112
    80200ac2:	f406                	sd	ra,40(sp)
    80200ac4:	f022                	sd	s0,32(sp)
    80200ac6:	ec26                	sd	s1,24(sp)
    80200ac8:	e84a                	sd	s2,16(sp)
    80200aca:	1800                	addi	s0,sp,48
    80200acc:	84aa                	mv	s1,a0
    80200ace:	e40c                	sd	a1,8(s0)
    80200ad0:	e810                	sd	a2,16(s0)
    80200ad2:	ec14                	sd	a3,24(s0)
    80200ad4:	f018                	sd	a4,32(s0)
    80200ad6:	f41c                	sd	a5,40(s0)
    80200ad8:	03043823          	sd	a6,48(s0)
    80200adc:	03143c23          	sd	a7,56(s0)
    acquireLock(&printLock);
    80200ae0:	001c1917          	auipc	s2,0x1c1
    80200ae4:	58090913          	addi	s2,s2,1408 # 803c2060 <printLock>
    80200ae8:	854a                	mv	a0,s2
    80200aea:	00005097          	auipc	ra,0x5
    80200aee:	fc4080e7          	jalr	-60(ra) # 80205aae <acquireLock>
    va_start(ap, fmt);
    80200af2:	00840593          	addi	a1,s0,8
    80200af6:	fcb43c23          	sd	a1,-40(s0)
    print(fmt, ap);
    80200afa:	8526                	mv	a0,s1
    80200afc:	00000097          	auipc	ra,0x0
    80200b00:	b76080e7          	jalr	-1162(ra) # 80200672 <print>
    releaseLock(&printLock);
    80200b04:	854a                	mv	a0,s2
    80200b06:	00005097          	auipc	ra,0x5
    80200b0a:	024080e7          	jalr	36(ra) # 80205b2a <releaseLock>
}
    80200b0e:	70a2                	ld	ra,40(sp)
    80200b10:	7402                	ld	s0,32(sp)
    80200b12:	64e2                	ld	s1,24(sp)
    80200b14:	6942                	ld	s2,16(sp)
    80200b16:	6165                	addi	sp,sp,112
    80200b18:	8082                	ret

0000000080200b1a <panicPrintf>:

void panicPrintf(const char *fmt, ...) {
    80200b1a:	711d                	addi	sp,sp,-96
    80200b1c:	ec06                	sd	ra,24(sp)
    80200b1e:	e822                	sd	s0,16(sp)
    80200b20:	1000                	addi	s0,sp,32
    80200b22:	e40c                	sd	a1,8(s0)
    80200b24:	e810                	sd	a2,16(s0)
    80200b26:	ec14                	sd	a3,24(s0)
    80200b28:	f018                	sd	a4,32(s0)
    80200b2a:	f41c                	sd	a5,40(s0)
    80200b2c:	03043823          	sd	a6,48(s0)
    80200b30:	03143c23          	sd	a7,56(s0)
    va_list ap;
    va_start(ap, fmt);
    80200b34:	00840593          	addi	a1,s0,8
    80200b38:	feb43423          	sd	a1,-24(s0)
    print(fmt, ap);
    80200b3c:	00000097          	auipc	ra,0x0
    80200b40:	b36080e7          	jalr	-1226(ra) # 80200672 <print>
    va_end(ap);
}
    80200b44:	60e2                	ld	ra,24(sp)
    80200b46:	6442                	ld	s0,16(sp)
    80200b48:	6125                	addi	sp,sp,96
    80200b4a:	8082                	ret

0000000080200b4c <_panic_>:

void _panic_(const char *file, int line, const char *func,const char *fmt, ...) {
    80200b4c:	7159                	addi	sp,sp,-112
    80200b4e:	e486                	sd	ra,72(sp)
    80200b50:	e0a2                	sd	s0,64(sp)
    80200b52:	fc26                	sd	s1,56(sp)
    80200b54:	f84a                	sd	s2,48(sp)
    80200b56:	f44e                	sd	s3,40(sp)
    80200b58:	f052                	sd	s4,32(sp)
    80200b5a:	ec56                	sd	s5,24(sp)
    80200b5c:	0880                	addi	s0,sp,80
    80200b5e:	892a                	mv	s2,a0
    80200b60:	89ae                	mv	s3,a1
    80200b62:	8a32                	mv	s4,a2
    80200b64:	84b6                	mv	s1,a3
    80200b66:	e018                	sd	a4,0(s0)
    80200b68:	e41c                	sd	a5,8(s0)
    80200b6a:	01043823          	sd	a6,16(s0)
    80200b6e:	01143c23          	sd	a7,24(s0)
    acquireLock(&printLock);
    80200b72:	001c1a97          	auipc	s5,0x1c1
    80200b76:	4eea8a93          	addi	s5,s5,1262 # 803c2060 <printLock>
    80200b7a:	8556                	mv	a0,s5
    80200b7c:	00005097          	auipc	ra,0x5
    80200b80:	f32080e7          	jalr	-206(ra) # 80205aae <acquireLock>
#define HART_TOTAL_NUMBER 5

// which hart (core) is this?
static inline u64 r_hartid() {
    u64 x;
    asm volatile("mv %0, tp" : "=r" (x) );
    80200b84:	8592                	mv	a1,tp
    panicPrintf("hartId %d panic at %s: %d in %s(): ", r_hartid(), file, line, func);
    80200b86:	8752                	mv	a4,s4
    80200b88:	86ce                	mv	a3,s3
    80200b8a:	864a                	mv	a2,s2
    80200b8c:	0000b517          	auipc	a0,0xb
    80200b90:	4e450513          	addi	a0,a0,1252 # 8020c070 <textEnd+0x70>
    80200b94:	00000097          	auipc	ra,0x0
    80200b98:	f86080e7          	jalr	-122(ra) # 80200b1a <panicPrintf>
    va_list ap;
    va_start(ap, fmt);
    80200b9c:	fa843c23          	sd	s0,-72(s0)
    print(fmt, ap);
    80200ba0:	85a2                	mv	a1,s0
    80200ba2:	8526                	mv	a0,s1
    80200ba4:	00000097          	auipc	ra,0x0
    80200ba8:	ace080e7          	jalr	-1330(ra) # 80200672 <print>
    va_end(ap);
    putchar('\n');
    80200bac:	4529                	li	a0,10
    80200bae:	fffff097          	auipc	ra,0xfffff
    80200bb2:	756080e7          	jalr	1878(ra) # 80200304 <putchar>
    releaseLock(&printLock);
    80200bb6:	8556                	mv	a0,s5
    80200bb8:	00005097          	auipc	ra,0x5
    80200bbc:	f72080e7          	jalr	-142(ra) # 80205b2a <releaseLock>
    //timerTick();
    //w_sstatus(r_sstatus() | SSTATUS_SIE);
    while (true);
    80200bc0:	a001                	j	80200bc0 <_panic_+0x74>

0000000080200bc2 <_assert_>:
}

void _assert_(const char* file, int line, const char *func, int statement) {
    if (!statement) {
    80200bc2:	c291                	beqz	a3,80200bc6 <_assert_+0x4>
    80200bc4:	8082                	ret
void _assert_(const char* file, int line, const char *func, int statement) {
    80200bc6:	1141                	addi	sp,sp,-16
    80200bc8:	e406                	sd	ra,8(sp)
    80200bca:	e022                	sd	s0,0(sp)
    80200bcc:	0800                	addi	s0,sp,16
        _panic_(file, line, func, "assert failed\n");
    80200bce:	0000b697          	auipc	a3,0xb
    80200bd2:	4ca68693          	addi	a3,a3,1226 # 8020c098 <textEnd+0x98>
    80200bd6:	00000097          	auipc	ra,0x0
    80200bda:	f76080e7          	jalr	-138(ra) # 80200b4c <_panic_>

0000000080200bde <sd_cmd>:
{
	return spi_xfer(0xFF);
}

static u8 sd_cmd(u8 cmd, u32 arg, u8 crc)
{
    80200bde:	1101                	addi	sp,sp,-32
    80200be0:	ec06                	sd	ra,24(sp)
    80200be2:	e822                	sd	s0,16(sp)
    80200be4:	e426                	sd	s1,8(sp)
    80200be6:	1000                	addi	s0,sp,32
	unsigned long n;
	u8 r;

	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_HOLD;
    80200be8:	100507b7          	lui	a5,0x10050
    80200bec:	4709                	li	a4,2
    80200bee:	cf98                	sw	a4,24(a5)
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200bf0:	0ff00713          	li	a4,255
    80200bf4:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200bf6:	10050737          	lui	a4,0x10050
    80200bfa:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200bfc:	fe07cfe3          	bltz	a5,80200bfa <sd_cmd+0x1c>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c00:	2501                	sext.w	a0,a0
    80200c02:	100507b7          	lui	a5,0x10050
    80200c06:	c7a8                	sw	a0,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c08:	10050737          	lui	a4,0x10050
    80200c0c:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c0e:	fe07cfe3          	bltz	a5,80200c0c <sd_cmd+0x2e>
	sd_dummy();
	spi_xfer(cmd);
	spi_xfer(arg >> 24);
    80200c12:	0185d79b          	srliw	a5,a1,0x18
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c16:	10050737          	lui	a4,0x10050
    80200c1a:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c1c:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c1e:	fe07cfe3          	bltz	a5,80200c1c <sd_cmd+0x3e>
	spi_xfer(arg >> 16);
    80200c22:	0105d79b          	srliw	a5,a1,0x10
    80200c26:	0ff7f793          	zext.b	a5,a5
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c2a:	10050737          	lui	a4,0x10050
    80200c2e:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c30:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c32:	fe07cfe3          	bltz	a5,80200c30 <sd_cmd+0x52>
	spi_xfer(arg >> 8);
    80200c36:	0085d79b          	srliw	a5,a1,0x8
    80200c3a:	0ff7f793          	zext.b	a5,a5
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c3e:	10050737          	lui	a4,0x10050
    80200c42:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c44:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c46:	fe07cfe3          	bltz	a5,80200c44 <sd_cmd+0x66>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c4a:	0ff5f593          	zext.b	a1,a1
    80200c4e:	100507b7          	lui	a5,0x10050
    80200c52:	c7ac                	sw	a1,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c54:	10050737          	lui	a4,0x10050
    80200c58:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c5a:	fe07cfe3          	bltz	a5,80200c58 <sd_cmd+0x7a>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c5e:	0006079b          	sext.w	a5,a2
    80200c62:	10050737          	lui	a4,0x10050
    80200c66:	c73c                	sw	a5,72(a4)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c68:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80200c6a:	fe07cfe3          	bltz	a5,80200c68 <sd_cmd+0x8a>
    80200c6e:	3e800693          	li	a3,1000
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200c72:	10050737          	lui	a4,0x10050
    80200c76:	04870593          	addi	a1,a4,72 # 10050048 <_start-0x701affb8>
    80200c7a:	0ff00613          	li	a2,255
    80200c7e:	c190                	sw	a2,0(a1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200c80:	477c                	lw	a5,76(a4)
    80200c82:	0007849b          	sext.w	s1,a5
	} while (r < 0);
    80200c86:	fe07cde3          	bltz	a5,80200c80 <sd_cmd+0xa2>
	spi_xfer(crc);

	n = 1000;
	do {
		r = sd_dummy();
		if (!(r & 0x80)) {
    80200c8a:	0184979b          	slliw	a5,s1,0x18
    80200c8e:	4187d79b          	sraiw	a5,a5,0x18
    80200c92:	0007dc63          	bgez	a5,80200caa <sd_cmd+0xcc>
			//printf("sd:cmd: %x\r\n", r);
			goto done;
		}
	} while (--n > 0);
    80200c96:	16fd                	addi	a3,a3,-1
    80200c98:	f2fd                	bnez	a3,80200c7e <sd_cmd+0xa0>
	printf("sd_cmd: timeout\n");
    80200c9a:	0000b517          	auipc	a0,0xb
    80200c9e:	5b650513          	addi	a0,a0,1462 # 8020c250 <textEnd+0x250>
    80200ca2:	00000097          	auipc	ra,0x0
    80200ca6:	e1e080e7          	jalr	-482(ra) # 80200ac0 <printf>
done:
	return (r & 0xFF);
}
    80200caa:	0ff4f513          	zext.b	a0,s1
    80200cae:	60e2                	ld	ra,24(sp)
    80200cb0:	6442                	ld	s0,16(sp)
    80200cb2:	64a2                	ld	s1,8(sp)
    80200cb4:	6105                	addi	sp,sp,32
    80200cb6:	8082                	ret

0000000080200cb8 <sdRead>:
#define SPIN_INDEX(i)	(((i) >> SPIN_SHIFT) & 0x3)

//static const char spinner[] = { '-', '/', '|', '\\' };


int sdRead(u8 *buf, u64 startSector, u32 sectorNumber) {
    80200cb8:	711d                	addi	sp,sp,-96
    80200cba:	ec86                	sd	ra,88(sp)
    80200cbc:	e8a2                	sd	s0,80(sp)
    80200cbe:	e4a6                	sd	s1,72(sp)
    80200cc0:	e0ca                	sd	s2,64(sp)
    80200cc2:	fc4e                	sd	s3,56(sp)
    80200cc4:	f852                	sd	s4,48(sp)
    80200cc6:	f456                	sd	s5,40(sp)
    80200cc8:	f05a                	sd	s6,32(sp)
    80200cca:	ec5e                	sd	s7,24(sp)
    80200ccc:	e862                	sd	s8,16(sp)
    80200cce:	e466                	sd	s9,8(sp)
    80200cd0:	1080                	addi	s0,sp,96
    80200cd2:	8caa                	mv	s9,a0
    80200cd4:	8c32                	mv	s8,a2
	volatile u8 *p = (void *)buf;
	int rc = 0;
	int timeout;
	u8 x;
	#ifdef QEMU
	if (sd_cmd(0x52, startSector * 512, 0xE1) != 0x00) {
    80200cd6:	00959b9b          	slliw	s7,a1,0x9
	int readTimes = 0;
    80200cda:	4a01                	li	s4,0
    80200cdc:	6909                	lui	s2,0x2
    80200cde:	70f90b13          	addi	s6,s2,1807 # 270f <_start-0x801fd8f1>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200ce2:	0ff00993          	li	s3,255
    80200ce6:	84ce                	mv	s1,s3
	crc ^= (crc & 0xff) << 5;
    80200ce8:	1901                	addi	s2,s2,-32
    80200cea:	aa19                	j	80200e00 <sdRead+0x148>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200cec:	100507b7          	lui	a5,0x10050
    80200cf0:	0ff00713          	li	a4,255
    80200cf4:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200cf6:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200cf8:	fe074fe3          	bltz	a4,80200cf6 <sdRead+0x3e>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200cfc:	100507b7          	lui	a5,0x10050
    80200d00:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	#else
	if (sd_cmd(0x52, startSector, 0xE1) != 0x00) {
	#endif
		sd_cmd_end();
		panic("[SD Read]Read Error, retry times %x\n", readTimes);
    80200d04:	8752                	mv	a4,s4
    80200d06:	0000b697          	auipc	a3,0xb
    80200d0a:	56268693          	addi	a3,a3,1378 # 8020c268 <textEnd+0x268>
    80200d0e:	0000c617          	auipc	a2,0xc
    80200d12:	52a60613          	addi	a2,a2,1322 # 8020d238 <__func__.2>
    80200d16:	0bd00593          	li	a1,189
    80200d1a:	0000b517          	auipc	a0,0xb
    80200d1e:	57650513          	addi	a0,a0,1398 # 8020c290 <textEnd+0x290>
    80200d22:	00000097          	auipc	ra,0x0
    80200d26:	e2a080e7          	jalr	-470(ra) # 80200b4c <_panic_>
    80200d2a:	8746                	mv	a4,a7
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200d2c:	04860513          	addi	a0,a2,72
    80200d30:	a011                	j	80200d34 <sdRead+0x7c>
			goto retry;
		}

		do {
			u8 x = sd_dummy();
			*p++ = x;
    80200d32:	8e1a                	mv	t3,t1
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200d34:	c104                	sw	s1,0(a0)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200d36:	467c                	lw	a5,76(a2)
    80200d38:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    80200d3c:	fe07cde3          	bltz	a5,80200d36 <sdRead+0x7e>
	return (r & 0xFF);
    80200d40:	0ff6f693          	zext.b	a3,a3
			*p++ = x;
    80200d44:	001e0313          	addi	t1,t3,1
    80200d48:	00de0023          	sb	a3,0(t3)
	crc = (u8)(crc >> 8) | (crc << 8);
    80200d4c:	0087579b          	srliw	a5,a4,0x8
    80200d50:	0087171b          	slliw	a4,a4,0x8
    80200d54:	8fd9                	or	a5,a5,a4
    80200d56:	17c2                	slli	a5,a5,0x30
    80200d58:	93c1                	srli	a5,a5,0x30
	crc ^= data;
    80200d5a:	8fb5                	xor	a5,a5,a3
	crc ^= (u8)(crc >> 4) & 0xf;
    80200d5c:	0047d71b          	srliw	a4,a5,0x4
    80200d60:	8b3d                	andi	a4,a4,15
    80200d62:	8f3d                	xor	a4,a4,a5
	crc ^= crc << 12;
    80200d64:	00c7179b          	slliw	a5,a4,0xc
    80200d68:	8f3d                	xor	a4,a4,a5
	crc ^= (crc & 0xff) << 5;
    80200d6a:	0107179b          	slliw	a5,a4,0x10
    80200d6e:	0107d79b          	srliw	a5,a5,0x10
    80200d72:	0057979b          	slliw	a5,a5,0x5
    80200d76:	00f977b3          	and	a5,s2,a5
    80200d7a:	8f3d                	xor	a4,a4,a5
    80200d7c:	1742                	slli	a4,a4,0x30
    80200d7e:	9341                	srli	a4,a4,0x30
			crc = crc16_round(crc, x);
		} while (--n > 0);
    80200d80:	fab319e3          	bne	t1,a1,80200d32 <sdRead+0x7a>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200d84:	05362423          	sw	s3,72(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200d88:	467c                	lw	a5,76(a2)
    80200d8a:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    80200d8e:	fe07cde3          	bltz	a5,80200d88 <sdRead+0xd0>

		crc_exp = ((u16)sd_dummy() << 8);
    80200d92:	0ff6f693          	zext.b	a3,a3
    80200d96:	0086969b          	slliw	a3,a3,0x8
    80200d9a:	16c2                	slli	a3,a3,0x30
    80200d9c:	92c1                	srli	a3,a3,0x30
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200d9e:	05362423          	sw	s3,72(a2)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200da2:	467c                	lw	a5,76(a2)
    80200da4:	0007851b          	sext.w	a0,a5
	} while (r < 0);
    80200da8:	fe07cde3          	bltz	a5,80200da2 <sdRead+0xea>
		crc_exp |= sd_dummy();
    80200dac:	0ff57793          	zext.b	a5,a0

		if (crc != crc_exp) {
    80200db0:	8fd5                	or	a5,a5,a3
    80200db2:	06e79c63          	bne	a5,a4,80200e2a <sdRead+0x172>
			printf("\b- CRC mismatch ");
			rc = 1;
			break;
		}
	} while (--tot > 0);
    80200db6:	3afd                	addiw	s5,s5,-1
    80200db8:	20058593          	addi	a1,a1,512
    80200dbc:	0b505a63          	blez	s5,80200e70 <sdRead+0x1b8>
    80200dc0:	e0058e13          	addi	t3,a1,-512
	int readTimes = 0;
    80200dc4:	86da                	mv	a3,s6
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200dc6:	04860513          	addi	a0,a2,72
    80200dca:	c104                	sw	s1,0(a0)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200dcc:	467c                	lw	a5,76(a2)
    80200dce:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    80200dd2:	fe07cde3          	bltz	a5,80200dcc <sdRead+0x114>
			if (x == 0xFE)
    80200dd6:	0ff77713          	zext.b	a4,a4
    80200dda:	f50708e3          	beq	a4,a6,80200d2a <sdRead+0x72>
		while (--timeout) {
    80200dde:	36fd                	addiw	a3,a3,-1
    80200de0:	f6ed                	bnez	a3,80200dca <sdRead+0x112>
	// printf("\nread end\n");
	// printf("[SD Read]Finish\n");
	return rc;

retry:
	readTimes++;
    80200de2:	2a05                	addiw	s4,s4,1
	if (readTimes > 10) {
    80200de4:	47ad                	li	a5,11
    80200de6:	08fa0763          	beq	s4,a5,80200e74 <sdRead+0x1bc>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200dea:	100507b7          	lui	a5,0x10050
    80200dee:	0537a423          	sw	s3,72(a5) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    80200df2:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200df4:	fe074fe3          	bltz	a4,80200df2 <sdRead+0x13a>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200df8:	100507b7          	lui	a5,0x10050
    80200dfc:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	tot = sectorNumber;
    80200e00:	000c0a9b          	sext.w	s5,s8
	if (sd_cmd(0x52, startSector * 512, 0xE1) != 0x00) {
    80200e04:	0e100613          	li	a2,225
    80200e08:	85de                	mv	a1,s7
    80200e0a:	05200513          	li	a0,82
    80200e0e:	00000097          	auipc	ra,0x0
    80200e12:	dd0080e7          	jalr	-560(ra) # 80200bde <sd_cmd>
    80200e16:	ec051be3          	bnez	a0,80200cec <sdRead+0x34>
    80200e1a:	200c8593          	addi	a1,s9,512
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200e1e:	10050637          	lui	a2,0x10050
			if (x == 0xFE)
    80200e22:	0fe00813          	li	a6,254
    80200e26:	4881                	li	a7,0
    80200e28:	bf61                	j	80200dc0 <sdRead+0x108>
			printf("\b- CRC mismatch ");
    80200e2a:	0000b517          	auipc	a0,0xb
    80200e2e:	46e50513          	addi	a0,a0,1134 # 8020c298 <textEnd+0x298>
    80200e32:	00000097          	auipc	ra,0x0
    80200e36:	c8e080e7          	jalr	-882(ra) # 80200ac0 <printf>
			rc = 1;
    80200e3a:	4a85                	li	s5,1
	sd_cmd(0x4C, 0, 0x01);
    80200e3c:	4605                	li	a2,1
    80200e3e:	4581                	li	a1,0
    80200e40:	04c00513          	li	a0,76
    80200e44:	00000097          	auipc	ra,0x0
    80200e48:	d9a080e7          	jalr	-614(ra) # 80200bde <sd_cmd>
    80200e4c:	865a                	mv	a2,s6
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200e4e:	100506b7          	lui	a3,0x10050
    80200e52:	04868593          	addi	a1,a3,72 # 10050048 <_start-0x701affb8>
    80200e56:	c184                	sw	s1,0(a1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200e58:	46fc                	lw	a5,76(a3)
    80200e5a:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    80200e5e:	fe07cde3          	bltz	a5,80200e58 <sdRead+0x1a0>
		if (x == 0xFF) {
    80200e62:	0ff77713          	zext.b	a4,a4
    80200e66:	03370963          	beq	a4,s3,80200e98 <sdRead+0x1e0>
	while (--timeout) {
    80200e6a:	367d                	addiw	a2,a2,-1
    80200e6c:	f66d                	bnez	a2,80200e56 <sdRead+0x19e>
    80200e6e:	bf95                	j	80200de2 <sdRead+0x12a>
	int rc = 0;
    80200e70:	4a81                	li	s5,0
    80200e72:	b7e9                	j	80200e3c <sdRead+0x184>
		panic("[SD Read]There must be some error in sd read");
    80200e74:	0000b697          	auipc	a3,0xb
    80200e78:	43c68693          	addi	a3,a3,1084 # 8020c2b0 <textEnd+0x2b0>
    80200e7c:	0000c617          	auipc	a2,0xc
    80200e80:	3bc60613          	addi	a2,a2,956 # 8020d238 <__func__.2>
    80200e84:	0f800593          	li	a1,248
    80200e88:	0000b517          	auipc	a0,0xb
    80200e8c:	40850513          	addi	a0,a0,1032 # 8020c290 <textEnd+0x290>
    80200e90:	00000097          	auipc	ra,0x0
    80200e94:	cbc080e7          	jalr	-836(ra) # 80200b4c <_panic_>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200e98:	100507b7          	lui	a5,0x10050
    80200e9c:	0ff00713          	li	a4,255
    80200ea0:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80200ea2:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    80200ea4:	fe074fe3          	bltz	a4,80200ea2 <sdRead+0x1ea>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80200ea8:	100507b7          	lui	a5,0x10050
    80200eac:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	}
	sd_cmd_end();
	goto start;
}
    80200eb0:	8556                	mv	a0,s5
    80200eb2:	60e6                	ld	ra,88(sp)
    80200eb4:	6446                	ld	s0,80(sp)
    80200eb6:	64a6                	ld	s1,72(sp)
    80200eb8:	6906                	ld	s2,64(sp)
    80200eba:	79e2                	ld	s3,56(sp)
    80200ebc:	7a42                	ld	s4,48(sp)
    80200ebe:	7aa2                	ld	s5,40(sp)
    80200ec0:	7b02                	ld	s6,32(sp)
    80200ec2:	6be2                	ld	s7,24(sp)
    80200ec4:	6c42                	ld	s8,16(sp)
    80200ec6:	6ca2                	ld	s9,8(sp)
    80200ec8:	6125                	addi	sp,sp,96
    80200eca:	8082                	ret

0000000080200ecc <sdCardRead>:
	}
	sd_cmd_end();
	goto start;
}

int sdCardRead(int isUser, u64 dst, u64 startAddr, u64 n) {
    80200ecc:	dd010113          	addi	sp,sp,-560
    80200ed0:	22113423          	sd	ra,552(sp)
    80200ed4:	22813023          	sd	s0,544(sp)
    80200ed8:	20913c23          	sd	s1,536(sp)
    80200edc:	21213823          	sd	s2,528(sp)
    80200ee0:	21313423          	sd	s3,520(sp)
    80200ee4:	21413023          	sd	s4,512(sp)
    80200ee8:	1c00                	addi	s0,sp,560
	if (n & ((1 << 9) - 1)) {
    80200eea:	1ff6f793          	andi	a5,a3,511
    80200eee:	eba9                	bnez	a5,80200f40 <sdCardRead+0x74>
    80200ef0:	8a2a                	mv	s4,a0
    80200ef2:	84ae                	mv	s1,a1
		printf("[SD] Card Read error\n");
		return -1;
	}
	if (startAddr & ((1 << 9) - 1)) {
    80200ef4:	1ff67793          	andi	a5,a2,511
    80200ef8:	efb1                	bnez	a5,80200f54 <sdCardRead+0x88>
		printf("[SD] Card Read error\n");
		return -1;	
	}

	if (isUser) {
    80200efa:	e53d                	bnez	a0,80200f68 <sdCardRead+0x9c>
			dst += 512;
			st++;
		}
		return 0;
	}
	int st = (startAddr) >> 9;
    80200efc:	00965993          	srli	s3,a2,0x9
    80200f00:	2981                	sext.w	s3,s3
	for (int i = 0; i < n; i++) {
    80200f02:	ce99                	beqz	a3,80200f20 <sdCardRead+0x54>
    80200f04:	894e                	mv	s2,s3
    80200f06:	99b6                	add	s3,s3,a3
		sdRead((u8*)dst, st, 1);
    80200f08:	4605                	li	a2,1
    80200f0a:	85ca                	mv	a1,s2
    80200f0c:	8526                	mv	a0,s1
    80200f0e:	00000097          	auipc	ra,0x0
    80200f12:	daa080e7          	jalr	-598(ra) # 80200cb8 <sdRead>
		dst += 512;
    80200f16:	20048493          	addi	s1,s1,512
	for (int i = 0; i < n; i++) {
    80200f1a:	0905                	addi	s2,s2,1
    80200f1c:	ff3916e3          	bne	s2,s3,80200f08 <sdCardRead+0x3c>
		st++;
	}
	return 0;
}
    80200f20:	8552                	mv	a0,s4
    80200f22:	22813083          	ld	ra,552(sp)
    80200f26:	22013403          	ld	s0,544(sp)
    80200f2a:	21813483          	ld	s1,536(sp)
    80200f2e:	21013903          	ld	s2,528(sp)
    80200f32:	20813983          	ld	s3,520(sp)
    80200f36:	20013a03          	ld	s4,512(sp)
    80200f3a:	23010113          	addi	sp,sp,560
    80200f3e:	8082                	ret
		printf("[SD] Card Read error\n");
    80200f40:	0000b517          	auipc	a0,0xb
    80200f44:	3a050513          	addi	a0,a0,928 # 8020c2e0 <textEnd+0x2e0>
    80200f48:	00000097          	auipc	ra,0x0
    80200f4c:	b78080e7          	jalr	-1160(ra) # 80200ac0 <printf>
		return -1;
    80200f50:	5a7d                	li	s4,-1
    80200f52:	b7f9                	j	80200f20 <sdCardRead+0x54>
		printf("[SD] Card Read error\n");
    80200f54:	0000b517          	auipc	a0,0xb
    80200f58:	38c50513          	addi	a0,a0,908 # 8020c2e0 <textEnd+0x2e0>
    80200f5c:	00000097          	auipc	ra,0x0
    80200f60:	b64080e7          	jalr	-1180(ra) # 80200ac0 <printf>
		return -1;	
    80200f64:	5a7d                	li	s4,-1
    80200f66:	bf6d                	j	80200f20 <sdCardRead+0x54>
		int st = (startAddr) >> 9;
    80200f68:	00965913          	srli	s2,a2,0x9
    80200f6c:	2901                	sext.w	s2,s2
		for (int i = 0; i < n; i++) {
    80200f6e:	ce9d                	beqz	a3,80200fac <sdCardRead+0xe0>
    80200f70:	89ca                	mv	s3,s2
    80200f72:	9936                	add	s2,s2,a3
			sdRead((u8*)buf, st, 1);
    80200f74:	4605                	li	a2,1
    80200f76:	85ce                	mv	a1,s3
    80200f78:	dd040513          	addi	a0,s0,-560
    80200f7c:	00000097          	auipc	ra,0x0
    80200f80:	d3c080e7          	jalr	-708(ra) # 80200cb8 <sdRead>
			copyout(myproc()->pgdir, dst, buf, 512);
    80200f84:	00002097          	auipc	ra,0x2
    80200f88:	a2c080e7          	jalr	-1492(ra) # 802029b0 <myproc>
    80200f8c:	20000693          	li	a3,512
    80200f90:	dd040613          	addi	a2,s0,-560
    80200f94:	85a6                	mv	a1,s1
    80200f96:	16853503          	ld	a0,360(a0)
    80200f9a:	00001097          	auipc	ra,0x1
    80200f9e:	414080e7          	jalr	1044(ra) # 802023ae <copyout>
			dst += 512;
    80200fa2:	20048493          	addi	s1,s1,512
		for (int i = 0; i < n; i++) {
    80200fa6:	0985                	addi	s3,s3,1
    80200fa8:	fd2996e3          	bne	s3,s2,80200f74 <sdCardRead+0xa8>
		return 0;
    80200fac:	4a01                	li	s4,0
    80200fae:	bf8d                	j	80200f20 <sdCardRead+0x54>

0000000080200fb0 <sdWrite>:
	for (int i = 0; i < sectorNumber; i++) {
    80200fb0:	1e060163          	beqz	a2,80201192 <sdWrite+0x1e2>
int sdWrite(u8 *buf, u64 startSector, u32 sectorNumber) {
    80200fb4:	7119                	addi	sp,sp,-128
    80200fb6:	fc86                	sd	ra,120(sp)
    80200fb8:	f8a2                	sd	s0,112(sp)
    80200fba:	f4a6                	sd	s1,104(sp)
    80200fbc:	f0ca                	sd	s2,96(sp)
    80200fbe:	ecce                	sd	s3,88(sp)
    80200fc0:	e8d2                	sd	s4,80(sp)
    80200fc2:	e4d6                	sd	s5,72(sp)
    80200fc4:	e0da                	sd	s6,64(sp)
    80200fc6:	fc5e                	sd	s7,56(sp)
    80200fc8:	f862                	sd	s8,48(sp)
    80200fca:	f466                	sd	s9,40(sp)
    80200fcc:	f06a                	sd	s10,32(sp)
    80200fce:	ec6e                	sd	s11,24(sp)
    80200fd0:	0100                	addi	s0,sp,128
    80200fd2:	20050913          	addi	s2,a0,512
    80200fd6:	fff6079b          	addiw	a5,a2,-1
    80200fda:	02079693          	slli	a3,a5,0x20
    80200fde:	0176d793          	srli	a5,a3,0x17
    80200fe2:	40078793          	addi	a5,a5,1024
    80200fe6:	00f50b33          	add	s6,a0,a5
    80200fea:	0095971b          	slliw	a4,a1,0x9
    80200fee:	41270abb          	subw	s5,a4,s2
	REG32(spi, SPI_REG_TXFIFO) = d;
    80200ff2:	100504b7          	lui	s1,0x10050
    80200ff6:	0ff00993          	li	s3,255
    80200ffa:	6c09                	lui	s8,0x2
    80200ffc:	70fc0793          	addi	a5,s8,1807 # 270f <_start-0x801fd8f1>
    80201000:	f8f43023          	sd	a5,-128(s0)
    80201004:	8a4e                	mv	s4,s3
    80201006:	e0090793          	addi	a5,s2,-512
    8020100a:	f8f43423          	sd	a5,-120(s0)
		if (sd_cmd(24 | 0x40, now * 512, 0) != 0) {
    8020100e:	01590d3b          	addw	s10,s2,s5
		writeTimes = 0;
    80201012:	4b81                	li	s7,0
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201014:	0fe00c93          	li	s9,254
	return (r & 0xFF);
    80201018:	710c0d93          	addi	s11,s8,1808
    8020101c:	a8c5                	j	8020110c <sdWrite+0x15c>
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020101e:	100507b7          	lui	a5,0x10050
    80201022:	0ff00713          	li	a4,255
    80201026:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201028:	47f8                	lw	a4,76(a5)
	} while (r < 0);
    8020102a:	fe074fe3          	bltz	a4,80201028 <sdWrite+0x78>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    8020102e:	100507b7          	lui	a5,0x10050
    80201032:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
			panic("[SD Write]Write Error, can't use cmd24, retry times %x\n", writeTimes);
    80201036:	875e                	mv	a4,s7
    80201038:	0000b697          	auipc	a3,0xb
    8020103c:	2c068693          	addi	a3,a3,704 # 8020c2f8 <textEnd+0x2f8>
    80201040:	0000c617          	auipc	a2,0xc
    80201044:	1f060613          	addi	a2,a2,496 # 8020d230 <__func__.1>
    80201048:	19d00593          	li	a1,413
    8020104c:	0000b517          	auipc	a0,0xb
    80201050:	24450513          	addi	a0,a0,580 # 8020c290 <textEnd+0x290>
    80201054:	00000097          	auipc	ra,0x0
    80201058:	af8080e7          	jalr	-1288(ra) # 80200b4c <_panic_>
	return (r & 0xFF);
    8020105c:	0ff77593          	zext.b	a1,a4
    80201060:	86ee                	mv	a3,s11
		while (--timeout) {
    80201062:	36fd                	addiw	a3,a3,-1
    80201064:	caad                	beqz	a3,802010d6 <sdWrite+0x126>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201066:	0534a423          	sw	s3,72(s1) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    8020106a:	44f8                	lw	a4,76(s1)
    8020106c:	0007079b          	sext.w	a5,a4
	} while (r < 0);
    80201070:	fe074de3          	bltz	a4,8020106a <sdWrite+0xba>
	return (r & 0xFF);
    80201074:	0ff7f593          	zext.b	a1,a5
			if (x == 0xFF) {
    80201078:	ff3595e3          	bne	a1,s3,80201062 <sdWrite+0xb2>
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020107c:	0534a423          	sw	s3,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201080:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80201082:	fe07cfe3          	bltz	a5,80201080 <sdWrite+0xd0>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80201086:	0004ac23          	sw	zero,24(s1)
	for (int i = 0; i < sectorNumber; i++) {
    8020108a:	20090913          	addi	s2,s2,512
    8020108e:	f7691ce3          	bne	s2,s6,80201006 <sdWrite+0x56>
}
    80201092:	4501                	li	a0,0
    80201094:	70e6                	ld	ra,120(sp)
    80201096:	7446                	ld	s0,112(sp)
    80201098:	74a6                	ld	s1,104(sp)
    8020109a:	7906                	ld	s2,96(sp)
    8020109c:	69e6                	ld	s3,88(sp)
    8020109e:	6a46                	ld	s4,80(sp)
    802010a0:	6aa6                	ld	s5,72(sp)
    802010a2:	6b06                	ld	s6,64(sp)
    802010a4:	7be2                	ld	s7,56(sp)
    802010a6:	7c42                	ld	s8,48(sp)
    802010a8:	7ca2                	ld	s9,40(sp)
    802010aa:	7d02                	ld	s10,32(sp)
    802010ac:	6de2                	ld	s11,24(sp)
    802010ae:	6109                	addi	sp,sp,128
    802010b0:	8082                	ret
		panic("[SD Write]There must be some error in sd write");
    802010b2:	0000b697          	auipc	a3,0xb
    802010b6:	27e68693          	addi	a3,a3,638 # 8020c330 <textEnd+0x330>
    802010ba:	0000c617          	auipc	a2,0xc
    802010be:	17660613          	addi	a2,a2,374 # 8020d230 <__func__.1>
    802010c2:	1c800593          	li	a1,456
    802010c6:	0000b517          	auipc	a0,0xb
    802010ca:	1ca50513          	addi	a0,a0,458 # 8020c290 <textEnd+0x290>
    802010ce:	00000097          	auipc	ra,0x0
    802010d2:	a7e080e7          	jalr	-1410(ra) # 80200b4c <_panic_>
			printf("%x \n", x);
    802010d6:	0000b517          	auipc	a0,0xb
    802010da:	28a50513          	addi	a0,a0,650 # 8020c360 <textEnd+0x360>
    802010de:	00000097          	auipc	ra,0x0
    802010e2:	9e2080e7          	jalr	-1566(ra) # 80200ac0 <printf>
			printf("keep busy\n");
    802010e6:	0000b517          	auipc	a0,0xb
    802010ea:	28250513          	addi	a0,a0,642 # 8020c368 <textEnd+0x368>
    802010ee:	00000097          	auipc	ra,0x0
    802010f2:	9d2080e7          	jalr	-1582(ra) # 80200ac0 <printf>
	writeTimes++;
    802010f6:	2b85                	addiw	s7,s7,1
	if (writeTimes > 10) {
    802010f8:	47ad                	li	a5,11
    802010fa:	fafb8ce3          	beq	s7,a5,802010b2 <sdWrite+0x102>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802010fe:	0534a423          	sw	s3,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201102:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80201104:	fe07cfe3          	bltz	a5,80201102 <sdWrite+0x152>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80201108:	0004ac23          	sw	zero,24(s1)
		if (sd_cmd(24 | 0x40, now * 512, 0) != 0) {
    8020110c:	4601                	li	a2,0
    8020110e:	85ea                	mv	a1,s10
    80201110:	05800513          	li	a0,88
    80201114:	00000097          	auipc	ra,0x0
    80201118:	aca080e7          	jalr	-1334(ra) # 80200bde <sd_cmd>
    8020111c:	f109                	bnez	a0,8020101e <sdWrite+0x6e>
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020111e:	0534a423          	sw	s3,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201122:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80201124:	fe07cfe3          	bltz	a5,80201122 <sdWrite+0x172>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201128:	0534a423          	sw	s3,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020112c:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    8020112e:	fe07cfe3          	bltz	a5,8020112c <sdWrite+0x17c>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201132:	0534a423          	sw	s3,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201136:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80201138:	fe07cfe3          	bltz	a5,80201136 <sdWrite+0x186>
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020113c:	0594a423          	sw	s9,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201140:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80201142:	fe07cfe3          	bltz	a5,80201140 <sdWrite+0x190>
    80201146:	f8843703          	ld	a4,-120(s0)
			spi_xfer(*p++);
    8020114a:	0705                	addi	a4,a4,1
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020114c:	fff74783          	lbu	a5,-1(a4)
    80201150:	c4bc                	sw	a5,72(s1)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201152:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    80201154:	fe07cfe3          	bltz	a5,80201152 <sdWrite+0x1a2>
		} while (--n > 0);
    80201158:	ff2719e3          	bne	a4,s2,8020114a <sdWrite+0x19a>
    8020115c:	f8043683          	ld	a3,-128(s0)
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201160:	04848593          	addi	a1,s1,72
			if (5 == (x & 0x1f)) {
    80201164:	4615                	li	a2,5
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201166:	0145a023          	sw	s4,0(a1)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020116a:	44fc                	lw	a5,76(s1)
    8020116c:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    80201170:	fe07cde3          	bltz	a5,8020116a <sdWrite+0x1ba>
			if (5 == (x & 0x1f)) {
    80201174:	01f77793          	andi	a5,a4,31
    80201178:	eec782e3          	beq	a5,a2,8020105c <sdWrite+0xac>
		while (--timeout) {
    8020117c:	36fd                	addiw	a3,a3,-1
    8020117e:	f6e5                	bnez	a3,80201166 <sdWrite+0x1b6>
			printf("not receive 5\n");
    80201180:	0000b517          	auipc	a0,0xb
    80201184:	1f850513          	addi	a0,a0,504 # 8020c378 <textEnd+0x378>
    80201188:	00000097          	auipc	ra,0x0
    8020118c:	938080e7          	jalr	-1736(ra) # 80200ac0 <printf>
			goto retry;
    80201190:	b79d                	j	802010f6 <sdWrite+0x146>
}
    80201192:	4501                	li	a0,0
    80201194:	8082                	ret

0000000080201196 <sdCardWrite>:

int sdCardWrite(int isUser, u64 src, u64 startAddr, u64 n) {
    80201196:	dd010113          	addi	sp,sp,-560
    8020119a:	22113423          	sd	ra,552(sp)
    8020119e:	22813023          	sd	s0,544(sp)
    802011a2:	20913c23          	sd	s1,536(sp)
    802011a6:	21213823          	sd	s2,528(sp)
    802011aa:	21313423          	sd	s3,520(sp)
    802011ae:	21413023          	sd	s4,512(sp)
    802011b2:	1c00                	addi	s0,sp,560
	if (n & ((1 << 9) - 1)) {
    802011b4:	1ff6f793          	andi	a5,a3,511
    802011b8:	eba9                	bnez	a5,8020120a <sdCardWrite+0x74>
    802011ba:	8a2a                	mv	s4,a0
    802011bc:	84ae                	mv	s1,a1
		printf("[SD] Card Write error\n");
		return -1;
	}
	if (startAddr & ((1 << 9) - 1)) {
    802011be:	1ff67793          	andi	a5,a2,511
    802011c2:	efb1                	bnez	a5,8020121e <sdCardWrite+0x88>
		printf("[SD] Card Write error\n");
		return -1;	
	}

	if (isUser) {
    802011c4:	e53d                	bnez	a0,80201232 <sdCardWrite+0x9c>
			src += 512;
			st++;
		}
		return 0;
	}
	int st = (startAddr) >> 9;
    802011c6:	00965993          	srli	s3,a2,0x9
    802011ca:	2981                	sext.w	s3,s3
	for (int i = 0; i < n; i++) {
    802011cc:	ce99                	beqz	a3,802011ea <sdCardWrite+0x54>
    802011ce:	894e                	mv	s2,s3
    802011d0:	99b6                	add	s3,s3,a3
		sdWrite((u8*)src, st, 1);
    802011d2:	4605                	li	a2,1
    802011d4:	85ca                	mv	a1,s2
    802011d6:	8526                	mv	a0,s1
    802011d8:	00000097          	auipc	ra,0x0
    802011dc:	dd8080e7          	jalr	-552(ra) # 80200fb0 <sdWrite>
		src += 512;
    802011e0:	20048493          	addi	s1,s1,512
	for (int i = 0; i < n; i++) {
    802011e4:	0905                	addi	s2,s2,1
    802011e6:	ff3916e3          	bne	s2,s3,802011d2 <sdCardWrite+0x3c>
		st++;
	}
	return 0;
}
    802011ea:	8552                	mv	a0,s4
    802011ec:	22813083          	ld	ra,552(sp)
    802011f0:	22013403          	ld	s0,544(sp)
    802011f4:	21813483          	ld	s1,536(sp)
    802011f8:	21013903          	ld	s2,528(sp)
    802011fc:	20813983          	ld	s3,520(sp)
    80201200:	20013a03          	ld	s4,512(sp)
    80201204:	23010113          	addi	sp,sp,560
    80201208:	8082                	ret
		printf("[SD] Card Write error\n");
    8020120a:	0000b517          	auipc	a0,0xb
    8020120e:	17e50513          	addi	a0,a0,382 # 8020c388 <textEnd+0x388>
    80201212:	00000097          	auipc	ra,0x0
    80201216:	8ae080e7          	jalr	-1874(ra) # 80200ac0 <printf>
		return -1;
    8020121a:	5a7d                	li	s4,-1
    8020121c:	b7f9                	j	802011ea <sdCardWrite+0x54>
		printf("[SD] Card Write error\n");
    8020121e:	0000b517          	auipc	a0,0xb
    80201222:	16a50513          	addi	a0,a0,362 # 8020c388 <textEnd+0x388>
    80201226:	00000097          	auipc	ra,0x0
    8020122a:	89a080e7          	jalr	-1894(ra) # 80200ac0 <printf>
		return -1;	
    8020122e:	5a7d                	li	s4,-1
    80201230:	bf6d                	j	802011ea <sdCardWrite+0x54>
		int st = (startAddr) >> 9;
    80201232:	00965913          	srli	s2,a2,0x9
    80201236:	2901                	sext.w	s2,s2
		for (int i = 0; i < n; i++) {
    80201238:	ce9d                	beqz	a3,80201276 <sdCardWrite+0xe0>
    8020123a:	89ca                	mv	s3,s2
    8020123c:	9936                	add	s2,s2,a3
        	copyin(myproc()->pgdir, buf, src, 512);
    8020123e:	00001097          	auipc	ra,0x1
    80201242:	772080e7          	jalr	1906(ra) # 802029b0 <myproc>
    80201246:	20000693          	li	a3,512
    8020124a:	8626                	mv	a2,s1
    8020124c:	dd040593          	addi	a1,s0,-560
    80201250:	16853503          	ld	a0,360(a0)
    80201254:	00001097          	auipc	ra,0x1
    80201258:	0c8080e7          	jalr	200(ra) # 8020231c <copyin>
			sdWrite((u8*)buf, st, 1);
    8020125c:	4605                	li	a2,1
    8020125e:	85ce                	mv	a1,s3
    80201260:	dd040513          	addi	a0,s0,-560
    80201264:	00000097          	auipc	ra,0x0
    80201268:	d4c080e7          	jalr	-692(ra) # 80200fb0 <sdWrite>
			src += 512;
    8020126c:	20048493          	addi	s1,s1,512
		for (int i = 0; i < n; i++) {
    80201270:	0985                	addi	s3,s3,1
    80201272:	fd2996e3          	bne	s3,s2,8020123e <sdCardWrite+0xa8>
		return 0;
    80201276:	4a01                	li	s4,0
    80201278:	bf8d                	j	802011ea <sdCardWrite+0x54>

000000008020127a <sdInit>:


int sdInit(void) {
    8020127a:	7179                	addi	sp,sp,-48
    8020127c:	f406                	sd	ra,40(sp)
    8020127e:	f022                	sd	s0,32(sp)
    80201280:	ec26                	sd	s1,24(sp)
    80201282:	e84a                	sd	s2,16(sp)
    80201284:	e44e                	sd	s3,8(sp)
    80201286:	e052                	sd	s4,0(sp)
    80201288:	1800                	addi	s0,sp,48
	REG32(uart, UART_REG_TXCTRL) = UART_TXEN;
    8020128a:	100107b7          	lui	a5,0x10010
    8020128e:	4705                	li	a4,1
    80201290:	c798                	sw	a4,8(a5)
	REG32(spi, SPI_REG_FMT) = 0x80000;
    80201292:	100507b7          	lui	a5,0x10050
    80201296:	00080737          	lui	a4,0x80
    8020129a:	c3b8                	sw	a4,64(a5)
	REG32(spi, SPI_REG_CSDEF) |= 1;
    8020129c:	4bd8                	lw	a4,20(a5)
    8020129e:	00176713          	ori	a4,a4,1
    802012a2:	cbd8                	sw	a4,20(a5)
	REG32(spi, SPI_REG_CSID) = 0;
    802012a4:	0007a823          	sw	zero,16(a5) # 10050010 <_start-0x701afff0>
	REG32(spi, SPI_REG_SCKDIV) = f;
    802012a8:	6705                	lui	a4,0x1
    802012aa:	bb870713          	addi	a4,a4,-1096 # bb8 <_start-0x801ff448>
    802012ae:	c398                	sw	a4,0(a5)
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_OFF;
    802012b0:	470d                	li	a4,3
    802012b2:	cf98                	sw	a4,24(a5)
    802012b4:	46a9                	li	a3,10
	REG32(spi, SPI_REG_TXFIFO) = d;
    802012b6:	10050737          	lui	a4,0x10050
    802012ba:	04870593          	addi	a1,a4,72 # 10050048 <_start-0x701affb8>
    802012be:	0ff00613          	li	a2,255
    802012c2:	c190                	sw	a2,0(a1)
		r = REG32(spi, SPI_REG_RXFIFO);
    802012c4:	477c                	lw	a5,76(a4)
	} while (r < 0);
    802012c6:	fe07cfe3          	bltz	a5,802012c4 <sdInit+0x4a>
	for (i = 10; i > 0; i--) {
    802012ca:	16fd                	addi	a3,a3,-1
    802012cc:	fafd                	bnez	a3,802012c2 <sdInit+0x48>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    802012ce:	100507b7          	lui	a5,0x10050
    802012d2:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>

	sd_poweron(3000);

	int initTimes = 10;
    802012d6:	4929                	li	s2,10
	REG32(spi, SPI_REG_TXFIFO) = d;
    802012d8:	100504b7          	lui	s1,0x10050
    802012dc:	0ff00a13          	li	s4,255
	while (initTimes > 0 && sd_cmd0()) {
    802012e0:	4985                	li	s3,1
	rc = (sd_cmd(0x40, 0, 0x95) != 0x01);
    802012e2:	09500613          	li	a2,149
    802012e6:	4581                	li	a1,0
    802012e8:	04000513          	li	a0,64
    802012ec:	00000097          	auipc	ra,0x0
    802012f0:	8f2080e7          	jalr	-1806(ra) # 80200bde <sd_cmd>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802012f4:	0544a423          	sw	s4,72(s1) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    802012f8:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    802012fa:	fe07cfe3          	bltz	a5,802012f8 <sdInit+0x7e>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    802012fe:	0004ac23          	sw	zero,24(s1)
	while (initTimes > 0 && sd_cmd0()) {
    80201302:	03350763          	beq	a0,s3,80201330 <sdInit+0xb6>
		initTimes--;
    80201306:	397d                	addiw	s2,s2,-1
	while (initTimes > 0 && sd_cmd0()) {
    80201308:	fc091de3          	bnez	s2,802012e2 <sdInit+0x68>
	}

	if (!initTimes) {
		panic("[SD card]CMD0 error!\n");
    8020130c:	0000b697          	auipc	a3,0xb
    80201310:	09468693          	addi	a3,a3,148 # 8020c3a0 <textEnd+0x3a0>
    80201314:	0000c617          	auipc	a2,0xc
    80201318:	f1460613          	addi	a2,a2,-236 # 8020d228 <__func__.0>
    8020131c:	21600593          	li	a1,534
    80201320:	0000b517          	auipc	a0,0xb
    80201324:	f7050513          	addi	a0,a0,-144 # 8020c290 <textEnd+0x290>
    80201328:	00000097          	auipc	ra,0x0
    8020132c:	824080e7          	jalr	-2012(ra) # 80200b4c <_panic_>
	if (!initTimes) {
    80201330:	fc090ee3          	beqz	s2,8020130c <sdInit+0x92>
	rc = (sd_cmd(0x48, 0x000001AA, 0x87) != 0x01);
    80201334:	08700613          	li	a2,135
    80201338:	1aa00593          	li	a1,426
    8020133c:	04800513          	li	a0,72
    80201340:	00000097          	auipc	ra,0x0
    80201344:	89e080e7          	jalr	-1890(ra) # 80200bde <sd_cmd>
    80201348:	0005071b          	sext.w	a4,a0
    8020134c:	177d                	addi	a4,a4,-1
    8020134e:	00e03633          	snez	a2,a4
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201352:	100507b7          	lui	a5,0x10050
    80201356:	0ff00713          	li	a4,255
    8020135a:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    8020135c:	10050737          	lui	a4,0x10050
    80201360:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80201362:	fe07cfe3          	bltz	a5,80201360 <sdInit+0xe6>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201366:	100507b7          	lui	a5,0x10050
    8020136a:	0ff00713          	li	a4,255
    8020136e:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201370:	10050737          	lui	a4,0x10050
    80201374:	477c                	lw	a5,76(a4)
	} while (r < 0);
    80201376:	fe07cfe3          	bltz	a5,80201374 <sdInit+0xfa>
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020137a:	100507b7          	lui	a5,0x10050
    8020137e:	0ff00713          	li	a4,255
    80201382:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201384:	100506b7          	lui	a3,0x10050
    80201388:	46fc                	lw	a5,76(a3)
    8020138a:	0007871b          	sext.w	a4,a5
	} while (r < 0);
    8020138e:	fe07cde3          	bltz	a5,80201388 <sdInit+0x10e>
	rc |= ((sd_dummy() & 0xF) != 0x1); /* voltage */
    80201392:	8b3d                	andi	a4,a4,15
    80201394:	fff70793          	addi	a5,a4,-1 # 1004ffff <_start-0x701b0001>
    80201398:	00f03733          	snez	a4,a5
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020139c:	100507b7          	lui	a5,0x10050
    802013a0:	0ff00693          	li	a3,255
    802013a4:	c7b4                	sw	a3,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802013a6:	100505b7          	lui	a1,0x10050
    802013aa:	45fc                	lw	a5,76(a1)
    802013ac:	0007869b          	sext.w	a3,a5
	} while (r < 0);
    802013b0:	fe07cde3          	bltz	a5,802013aa <sdInit+0x130>
	rc |= (sd_dummy() != 0xAA); /* check pattern */
    802013b4:	0ff6f793          	zext.b	a5,a3
    802013b8:	f5678793          	addi	a5,a5,-170 # 1004ff56 <_start-0x701b00aa>
    802013bc:	00f037b3          	snez	a5,a5
    802013c0:	8fd9                	or	a5,a5,a4
    802013c2:	00f66733          	or	a4,a2,a5
    802013c6:	0ff77713          	zext.b	a4,a4
	REG32(spi, SPI_REG_TXFIFO) = d;
    802013ca:	100507b7          	lui	a5,0x10050
    802013ce:	0ff00693          	li	a3,255
    802013d2:	c7b4                	sw	a3,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    802013d4:	100506b7          	lui	a3,0x10050
    802013d8:	46fc                	lw	a5,76(a3)
	} while (r < 0);
    802013da:	fe07cfe3          	bltz	a5,802013d8 <sdInit+0x15e>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    802013de:	100507b7          	lui	a5,0x10050
    802013e2:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>
	}

	if (sd_cmd8()) {
    802013e6:	e36d                	bnez	a4,802014c8 <sdInit+0x24e>
	printf("ACMD41");
    802013e8:	0000b517          	auipc	a0,0xb
    802013ec:	fe850513          	addi	a0,a0,-24 # 8020c3d0 <textEnd+0x3d0>
    802013f0:	fffff097          	auipc	ra,0xfffff
    802013f4:	6d0080e7          	jalr	1744(ra) # 80200ac0 <printf>
	REG32(spi, SPI_REG_TXFIFO) = d;
    802013f8:	100504b7          	lui	s1,0x10050
    802013fc:	0ff00993          	li	s3,255
	} while (r == 0x01);
    80201400:	4905                	li	s2,1
	sd_cmd(0x77, 0, 0x65);
    80201402:	06500613          	li	a2,101
    80201406:	4581                	li	a1,0
    80201408:	07700513          	li	a0,119
    8020140c:	fffff097          	auipc	ra,0xfffff
    80201410:	7d2080e7          	jalr	2002(ra) # 80200bde <sd_cmd>
	REG32(spi, SPI_REG_TXFIFO) = d;
    80201414:	0534a423          	sw	s3,72(s1) # 10050048 <_start-0x701affb8>
		r = REG32(spi, SPI_REG_RXFIFO);
    80201418:	44fc                	lw	a5,76(s1)
	} while (r < 0);
    8020141a:	fe07cfe3          	bltz	a5,80201418 <sdInit+0x19e>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    8020141e:	0004ac23          	sw	zero,24(s1)
		r = sd_cmd(0x69, 0x40000000, 0x77); /* HCS = 1 */
    80201422:	07700613          	li	a2,119
    80201426:	400005b7          	lui	a1,0x40000
    8020142a:	06900513          	li	a0,105
    8020142e:	fffff097          	auipc	ra,0xfffff
    80201432:	7b0080e7          	jalr	1968(ra) # 80200bde <sd_cmd>
	} while (r == 0x01);
    80201436:	fd2506e3          	beq	a0,s2,80201402 <sdInit+0x188>
		panic("[SD card]CMD8 error!\n");
	}

	if (sd_acmd41()) {
    8020143a:	e94d                	bnez	a0,802014ec <sdInit+0x272>
	printf("CMD16");
    8020143c:	0000b517          	auipc	a0,0xb
    80201440:	fb450513          	addi	a0,a0,-76 # 8020c3f0 <textEnd+0x3f0>
    80201444:	fffff097          	auipc	ra,0xfffff
    80201448:	67c080e7          	jalr	1660(ra) # 80200ac0 <printf>
	rc = (sd_cmd(0x50, 0x200, 0x15) != 0x00);
    8020144c:	4655                	li	a2,21
    8020144e:	20000593          	li	a1,512
    80201452:	05000513          	li	a0,80
    80201456:	fffff097          	auipc	ra,0xfffff
    8020145a:	788080e7          	jalr	1928(ra) # 80200bde <sd_cmd>
	REG32(spi, SPI_REG_TXFIFO) = d;
    8020145e:	100507b7          	lui	a5,0x10050
    80201462:	0ff00713          	li	a4,255
    80201466:	c7b8                	sw	a4,72(a5)
		r = REG32(spi, SPI_REG_RXFIFO);
    80201468:	10050737          	lui	a4,0x10050
    8020146c:	477c                	lw	a5,76(a4)
	} while (r < 0);
    8020146e:	fe07cfe3          	bltz	a5,8020146c <sdInit+0x1f2>
	REG32(spi, SPI_REG_CSMODE) = SPI_CSMODE_AUTO;
    80201472:	100507b7          	lui	a5,0x10050
    80201476:	0007ac23          	sw	zero,24(a5) # 10050018 <_start-0x701affe8>

	if (sd_cmd58()) {
		panic("[SD card]CMD58 error!\n");
	}

	if (sd_cmd16()) {
    8020147a:	e959                	bnez	a0,80201510 <sdInit+0x296>
		panic("[SD card]CMD16 error!\n");
	}

	printf("[SD card]SD card init finish!\n");
    8020147c:	0000b517          	auipc	a0,0xb
    80201480:	f9450513          	addi	a0,a0,-108 # 8020c410 <textEnd+0x410>
    80201484:	fffff097          	auipc	ra,0xfffff
    80201488:	63c080e7          	jalr	1596(ra) # 80200ac0 <printf>

	REG32(spi, SPI_REG_SCKDIV) = (F_CLK / 16666666UL);
    8020148c:	100507b7          	lui	a5,0x10050
    80201490:	03c00713          	li	a4,60
    80201494:	c398                	sw	a4,0(a5)
	__asm__ __volatile__ ("fence.i" : : : "memory");
    80201496:	0000100f          	fence.i
	
	devsw[DEV_SD].read = sdCardRead;
    8020149a:	00418797          	auipc	a5,0x418
    8020149e:	b9e78793          	addi	a5,a5,-1122 # 80619038 <devsw>
    802014a2:	00000717          	auipc	a4,0x0
    802014a6:	a2a70713          	addi	a4,a4,-1494 # 80200ecc <sdCardRead>
    802014aa:	e398                	sd	a4,0(a5)
	devsw[DEV_SD].write = sdCardWrite;
    802014ac:	00000717          	auipc	a4,0x0
    802014b0:	cea70713          	addi	a4,a4,-790 # 80201196 <sdCardWrite>
    802014b4:	e798                	sd	a4,8(a5)
	return 0;
}
    802014b6:	4501                	li	a0,0
    802014b8:	70a2                	ld	ra,40(sp)
    802014ba:	7402                	ld	s0,32(sp)
    802014bc:	64e2                	ld	s1,24(sp)
    802014be:	6942                	ld	s2,16(sp)
    802014c0:	69a2                	ld	s3,8(sp)
    802014c2:	6a02                	ld	s4,0(sp)
    802014c4:	6145                	addi	sp,sp,48
    802014c6:	8082                	ret
		panic("[SD card]CMD8 error!\n");
    802014c8:	0000b697          	auipc	a3,0xb
    802014cc:	ef068693          	addi	a3,a3,-272 # 8020c3b8 <textEnd+0x3b8>
    802014d0:	0000c617          	auipc	a2,0xc
    802014d4:	d5860613          	addi	a2,a2,-680 # 8020d228 <__func__.0>
    802014d8:	21a00593          	li	a1,538
    802014dc:	0000b517          	auipc	a0,0xb
    802014e0:	db450513          	addi	a0,a0,-588 # 8020c290 <textEnd+0x290>
    802014e4:	fffff097          	auipc	ra,0xfffff
    802014e8:	668080e7          	jalr	1640(ra) # 80200b4c <_panic_>
		panic("[SD card]ACMD41 error!\n");
    802014ec:	0000b697          	auipc	a3,0xb
    802014f0:	eec68693          	addi	a3,a3,-276 # 8020c3d8 <textEnd+0x3d8>
    802014f4:	0000c617          	auipc	a2,0xc
    802014f8:	d3460613          	addi	a2,a2,-716 # 8020d228 <__func__.0>
    802014fc:	21e00593          	li	a1,542
    80201500:	0000b517          	auipc	a0,0xb
    80201504:	d9050513          	addi	a0,a0,-624 # 8020c290 <textEnd+0x290>
    80201508:	fffff097          	auipc	ra,0xfffff
    8020150c:	644080e7          	jalr	1604(ra) # 80200b4c <_panic_>
		panic("[SD card]CMD16 error!\n");
    80201510:	0000b697          	auipc	a3,0xb
    80201514:	ee868693          	addi	a3,a3,-280 # 8020c3f8 <textEnd+0x3f8>
    80201518:	0000c617          	auipc	a2,0xc
    8020151c:	d1060613          	addi	a2,a2,-752 # 8020d228 <__func__.0>
    80201520:	22600593          	li	a1,550
    80201524:	0000b517          	auipc	a0,0xb
    80201528:	d6c50513          	addi	a0,a0,-660 # 8020c290 <textEnd+0x290>
    8020152c:	fffff097          	auipc	ra,0xfffff
    80201530:	620080e7          	jalr	1568(ra) # 80200b4c <_panic_>

0000000080201534 <sdTest>:

u8 binary[1024];
int sdTest(void) {
    80201534:	7179                	addi	sp,sp,-48
    80201536:	f406                	sd	ra,40(sp)
    80201538:	f022                	sd	s0,32(sp)
    8020153a:	ec26                	sd	s1,24(sp)
    8020153c:	e84a                	sd	s2,16(sp)
    8020153e:	e44e                	sd	s3,8(sp)
    80201540:	e052                	sd	s4,0(sp)
    80201542:	1800                	addi	s0,sp,48
	sdInit();
    80201544:	00000097          	auipc	ra,0x0
    80201548:	d36080e7          	jalr	-714(ra) # 8020127a <sdInit>
    8020154c:	4481                	li	s1,0
        // }
        // sdWrite(binary, j, 2);
        // for (int i = 0; i < 1024; i++) {
        //     binary[i] = 0;
        // }
        sdRead(binary, j, 2);
    8020154e:	001c1a17          	auipc	s4,0x1c1
    80201552:	b2aa0a13          	addi	s4,s4,-1238 # 803c2078 <binary>
        //     if (binary[i] != (i & 7)) {
        //         panic("gg: %d ", j);
        //         break;
        //     }
        // }
        printf("finish %d\n", j);
    80201556:	0000b997          	auipc	s3,0xb
    8020155a:	eda98993          	addi	s3,s3,-294 # 8020c430 <textEnd+0x430>
    for (int j = 0; j < 20; j += 2) {
    8020155e:	4951                	li	s2,20
        sdRead(binary, j, 2);
    80201560:	4609                	li	a2,2
    80201562:	85a6                	mv	a1,s1
    80201564:	8552                	mv	a0,s4
    80201566:	fffff097          	auipc	ra,0xfffff
    8020156a:	752080e7          	jalr	1874(ra) # 80200cb8 <sdRead>
        printf("finish %d\n", j);
    8020156e:	0004859b          	sext.w	a1,s1
    80201572:	854e                	mv	a0,s3
    80201574:	fffff097          	auipc	ra,0xfffff
    80201578:	54c080e7          	jalr	1356(ra) # 80200ac0 <printf>
    for (int j = 0; j < 20; j += 2) {
    8020157c:	0489                	addi	s1,s1,2
    8020157e:	ff2491e3          	bne	s1,s2,80201560 <sdTest+0x2c>
    }
	return 0;
    80201582:	4501                	li	a0,0
    80201584:	70a2                	ld	ra,40(sp)
    80201586:	7402                	ld	s0,32(sp)
    80201588:	64e2                	ld	s1,24(sp)
    8020158a:	6942                	ld	s2,16(sp)
    8020158c:	69a2                	ld	s3,8(sp)
    8020158e:	6a02                	ld	s4,0(sp)
    80201590:	6145                	addi	sp,sp,48
    80201592:	8082                	ret

0000000080201594 <startPage>:
        PTE_READ | PTE_WRITE | PTE_EXECUTE | PTE_ACCESSED | PTE_DIRTY);
    pageInsert(kernelPageDirectory, TRAMPOLINE_BASE + PAGE_SIZE, (u64)trampoline + PAGE_SIZE, 
        PTE_READ | PTE_WRITE | PTE_EXECUTE | PTE_ACCESSED | PTE_DIRTY);
}

void startPage() {
    80201594:	1141                	addi	sp,sp,-16
    80201596:	e422                	sd	s0,8(sp)
    80201598:	0800                	addi	s0,sp,16
    w_satp(MAKE_SATP(kernelPageDirectory));
    8020159a:	00419797          	auipc	a5,0x419
    8020159e:	a6678793          	addi	a5,a5,-1434 # 8061a000 <_pgdir>
    802015a2:	83b1                	srli	a5,a5,0xc
    802015a4:	577d                	li	a4,-1
    802015a6:	177e                	slli	a4,a4,0x3f
    802015a8:	8fd9                	or	a5,a5,a4
#define MAKE_SATP(pagetable) (SATP_SV39 | (((u64)pagetable) >> 12))

// supervisor address translation and protection;
// holds the address of the page table.
static inline void w_satp(u64 x) {
	asm volatile("csrw satp, %0" : : "r" (x));
    802015aa:	18079073          	csrw	satp,a5

// flush the TLB.
static inline void sfence_vma() {
	// the zero, zero means flush all TLB entries.
	// asm volatile("sfence.vma zero, zero");
	asm volatile("sfence.vma");
    802015ae:	12000073          	sfence.vma
    sfence_vma();
}
    802015b2:	6422                	ld	s0,8(sp)
    802015b4:	0141                	addi	sp,sp,16
    802015b6:	8082                	ret

00000000802015b8 <memoryInit>:
    pageInsert(kernelPageDirectory, 1ll << 35, page2pa(p), PTE_READ | PTE_WRITE);
    *((u32*)page2pa(p)) = 65536;
    printf("value1 of %lx:  %d\n", 1ll << 35, *((u32*)(1ll<<35)));
}

void memoryInit() {
    802015b8:	711d                	addi	sp,sp,-96
    802015ba:	ec86                	sd	ra,88(sp)
    802015bc:	e8a2                	sd	s0,80(sp)
    802015be:	e4a6                	sd	s1,72(sp)
    802015c0:	e0ca                	sd	s2,64(sp)
    802015c2:	fc4e                	sd	s3,56(sp)
    802015c4:	f852                	sd	s4,48(sp)
    802015c6:	f456                	sd	s5,40(sp)
    802015c8:	f05a                	sd	s6,32(sp)
    802015ca:	ec5e                	sd	s7,24(sp)
    802015cc:	1080                	addi	s0,sp,96
    printf("Memory init start...\n");
    802015ce:	0000b517          	auipc	a0,0xb
    802015d2:	e7250513          	addi	a0,a0,-398 # 8020c440 <textEnd+0x440>
    802015d6:	fffff097          	auipc	ra,0xfffff
    802015da:	4ea080e7          	jalr	1258(ra) # 80200ac0 <printf>
    u32 n = PA2PPN(kernelEnd);
    802015de:	0041a917          	auipc	s2,0x41a
    802015e2:	a2290913          	addi	s2,s2,-1502 # 8061b000 <bssEnd>
    802015e6:	00c95913          	srli	s2,s2,0xc
    802015ea:	0009099b          	sext.w	s3,s2
    802015ee:	1942                	slli	s2,s2,0x30
    802015f0:	03095913          	srli	s2,s2,0x30
    for (i = 0; i < n; i++) {
    802015f4:	44090763          	beqz	s2,80201a42 <memoryInit+0x48a>
    802015f8:	001c1797          	auipc	a5,0x1c1
    802015fc:	e9078793          	addi	a5,a5,-368 # 803c2488 <pages+0x10>
    80201600:	fff9069b          	addiw	a3,s2,-1
    80201604:	1682                	slli	a3,a3,0x20
    80201606:	9281                	srli	a3,a3,0x20
    80201608:	00169713          	slli	a4,a3,0x1
    8020160c:	9736                	add	a4,a4,a3
    8020160e:	070e                	slli	a4,a4,0x3
    80201610:	001c1697          	auipc	a3,0x1c1
    80201614:	e9068693          	addi	a3,a3,-368 # 803c24a0 <pages+0x28>
    80201618:	9736                	add	a4,a4,a3
        pages[i].ref = 1;
    8020161a:	4685                	li	a3,1
    8020161c:	c394                	sw	a3,0(a5)
    for (i = 0; i < n; i++) {
    8020161e:	07e1                	addi	a5,a5,24
    80201620:	fee79ee3          	bne	a5,a4,8020161c <memoryInit+0x64>
    LIST_INIT(&freePages);
    80201624:	00281797          	auipc	a5,0x281
    80201628:	e407ba23          	sd	zero,-428(a5) # 80482478 <freePages>
    for (; i < n; i++) {
    8020162c:	00f9d793          	srli	a5,s3,0xf
    80201630:	8b85                	andi	a5,a5,1
    80201632:	e3c5                	bnez	a5,802016d2 <memoryInit+0x11a>
    for (i = 0; i < n; i++) {
    80201634:	834a                	mv	t1,s2
    80201636:	00281717          	auipc	a4,0x281
    8020163a:	e4273703          	ld	a4,-446(a4) # 80482478 <freePages>
    8020163e:	861a                	mv	a2,t1
        pages[i].ref = 0;
    80201640:	001c1597          	auipc	a1,0x1c1
    80201644:	e3858593          	addi	a1,a1,-456 # 803c2478 <pages>
        LIST_INSERT_HEAD(&freePages, &pages[i], link);
    80201648:	00281897          	auipc	a7,0x281
    8020164c:	e3088893          	addi	a7,a7,-464 # 80482478 <freePages>
    for (; i < n; i++) {
    80201650:	6821                	lui	a6,0x8
    80201652:	a02d                	j	8020167c <memoryInit+0xc4>
        LIST_INSERT_HEAD(&freePages, &pages[i], link);
    80201654:	00151793          	slli	a5,a0,0x1
    80201658:	97aa                	add	a5,a5,a0
    8020165a:	078e                	slli	a5,a5,0x3
    8020165c:	97ae                	add	a5,a5,a1
    8020165e:	e71c                	sd	a5,8(a4)
    80201660:	02061693          	slli	a3,a2,0x20
    80201664:	9281                	srli	a3,a3,0x20
    80201666:	00169793          	slli	a5,a3,0x1
    8020166a:	00d78733          	add	a4,a5,a3
    8020166e:	070e                	slli	a4,a4,0x3
    80201670:	972e                	add	a4,a4,a1
    80201672:	01173423          	sd	a7,8(a4)
    for (; i < n; i++) {
    80201676:	2605                	addiw	a2,a2,1
    80201678:	03067063          	bgeu	a2,a6,80201698 <memoryInit+0xe0>
        pages[i].ref = 0;
    8020167c:	02061513          	slli	a0,a2,0x20
    80201680:	9101                	srli	a0,a0,0x20
    80201682:	00151793          	slli	a5,a0,0x1
    80201686:	00a786b3          	add	a3,a5,a0
    8020168a:	068e                	slli	a3,a3,0x3
    8020168c:	96ae                	add	a3,a3,a1
    8020168e:	0006a823          	sw	zero,16(a3)
        LIST_INSERT_HEAD(&freePages, &pages[i], link);
    80201692:	e298                	sd	a4,0(a3)
    80201694:	f361                	bnez	a4,80201654 <memoryInit+0x9c>
    80201696:	b7e9                	j	80201660 <memoryInit+0xa8>
    80201698:	0013069b          	addiw	a3,t1,1
    8020169c:	6621                	lui	a2,0x8
    8020169e:	4781                	li	a5,0
    802016a0:	00d66663          	bltu	a2,a3,802016ac <memoryInit+0xf4>
    802016a4:	67a1                	lui	a5,0x8
    802016a6:	37fd                	addiw	a5,a5,-1
    802016a8:	406787bb          	subw	a5,a5,t1
    802016ac:	00281697          	auipc	a3,0x281
    802016b0:	dcc68693          	addi	a3,a3,-564 # 80482478 <freePages>
    802016b4:	e298                	sd	a4,0(a3)
    802016b6:	006787bb          	addw	a5,a5,t1
    802016ba:	1782                	slli	a5,a5,0x20
    802016bc:	9381                	srli	a5,a5,0x20
    802016be:	00179713          	slli	a4,a5,0x1
    802016c2:	97ba                	add	a5,a5,a4
    802016c4:	078e                	slli	a5,a5,0x3
    802016c6:	001c1717          	auipc	a4,0x1c1
    802016ca:	db270713          	addi	a4,a4,-590 # 803c2478 <pages>
    802016ce:	97ba                	add	a5,a5,a4
    802016d0:	e794                	sd	a3,8(a5)
    pageInsert(kernelPageDirectory, UART_V, UART, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    802016d2:	0c600693          	li	a3,198
    802016d6:	10000637          	lui	a2,0x10000
    802016da:	3f100593          	li	a1,1009
    802016de:	05f2                	slli	a1,a1,0x1c
    802016e0:	00419517          	auipc	a0,0x419
    802016e4:	92050513          	addi	a0,a0,-1760 # 8061a000 <_pgdir>
    802016e8:	00001097          	auipc	ra,0x1
    802016ec:	8b2080e7          	jalr	-1870(ra) # 80201f9a <pageInsert>
    802016f0:	01f814b7          	lui	s1,0x1f81
    802016f4:	04b6                	slli	s1,s1,0xd
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    802016f6:	fc100a93          	li	s5,-63
    802016fa:	1a82                	slli	s5,s5,0x20
    802016fc:	00419b97          	auipc	s7,0x419
    80201700:	904b8b93          	addi	s7,s7,-1788 # 8061a000 <_pgdir>
    for (u64 i = 0; i < 0x10000; i += PAGE_SIZE) {
    80201704:	6b05                	lui	s6,0x1
    80201706:	003f0a37          	lui	s4,0x3f0
    8020170a:	201a0a13          	addi	s4,s4,513 # 3f0201 <_start-0x7fe0fdff>
    8020170e:	0a42                	slli	s4,s4,0x10
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201710:	0c600693          	li	a3,198
    80201714:	01548633          	add	a2,s1,s5
    80201718:	85a6                	mv	a1,s1
    8020171a:	855e                	mv	a0,s7
    8020171c:	00001097          	auipc	ra,0x1
    80201720:	87e080e7          	jalr	-1922(ra) # 80201f9a <pageInsert>
    for (u64 i = 0; i < 0x10000; i += PAGE_SIZE) {
    80201724:	94da                	add	s1,s1,s6
    80201726:	ff4495e3          	bne	s1,s4,80201710 <memoryInit+0x158>
    8020172a:	00fc34b7          	lui	s1,0xfc3
    8020172e:	04ba                	slli	s1,s1,0xe
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201730:	fc100a93          	li	s5,-63
    80201734:	1a82                	slli	s5,s5,0x20
    80201736:	00419b97          	auipc	s7,0x419
    8020173a:	8cab8b93          	addi	s7,s7,-1846 # 8061a000 <_pgdir>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    8020173e:	6b05                	lui	s6,0x1
    80201740:	00fc3a37          	lui	s4,0xfc3
    80201744:	0a05                	addi	s4,s4,1
    80201746:	0a3a                	slli	s4,s4,0xe
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201748:	0c600693          	li	a3,198
    8020174c:	01548633          	add	a2,s1,s5
    80201750:	85a6                	mv	a1,s1
    80201752:	855e                	mv	a0,s7
    80201754:	00001097          	auipc	ra,0x1
    80201758:	846080e7          	jalr	-1978(ra) # 80201f9a <pageInsert>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    8020175c:	94da                	add	s1,s1,s6
    8020175e:	ff4495e3          	bne	s1,s4,80201748 <memoryInit+0x190>
    80201762:	1f8614b7          	lui	s1,0x1f861
    80201766:	04a6                	slli	s1,s1,0x9
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201768:	fc100a93          	li	s5,-63
    8020176c:	1a82                	slli	s5,s5,0x20
    8020176e:	00419b97          	auipc	s7,0x419
    80201772:	892b8b93          	addi	s7,s7,-1902 # 8061a000 <_pgdir>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    80201776:	6b05                	lui	s6,0x1
    80201778:	00fc3a37          	lui	s4,0xfc3
    8020177c:	081a0a13          	addi	s4,s4,129 # fc3081 <_start-0x7f23cf7f>
    80201780:	0a3a                	slli	s4,s4,0xe
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201782:	0c600693          	li	a3,198
    80201786:	01548633          	add	a2,s1,s5
    8020178a:	85a6                	mv	a1,s1
    8020178c:	855e                	mv	a0,s7
    8020178e:	00001097          	auipc	ra,0x1
    80201792:	80c080e7          	jalr	-2036(ra) # 80201f9a <pageInsert>
    for (u64 i = 0; i < 0x4000; i += PAGE_SIZE) {
    80201796:	94da                	add	s1,s1,s6
    80201798:	ff4495e3          	bne	s1,s4,80201782 <memoryInit+0x1ca>
    pageInsert(kernelPageDirectory, SPI_CTRL_ADDR, SPI_CTRL_ADDR, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    8020179c:	0c600693          	li	a3,198
    802017a0:	10050637          	lui	a2,0x10050
    802017a4:	100505b7          	lui	a1,0x10050
    802017a8:	00419517          	auipc	a0,0x419
    802017ac:	85850513          	addi	a0,a0,-1960 # 8061a000 <_pgdir>
    802017b0:	00000097          	auipc	ra,0x0
    802017b4:	7ea080e7          	jalr	2026(ra) # 80201f9a <pageInsert>
    pageInsert(kernelPageDirectory, UART_CTRL_ADDR, UART_CTRL_ADDR, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    802017b8:	0c600693          	li	a3,198
    802017bc:	10010637          	lui	a2,0x10010
    802017c0:	100105b7          	lui	a1,0x10010
    802017c4:	00419517          	auipc	a0,0x419
    802017c8:	83c50513          	addi	a0,a0,-1988 # 8061a000 <_pgdir>
    802017cc:	00000097          	auipc	ra,0x0
    802017d0:	7ce080e7          	jalr	1998(ra) # 80201f9a <pageInsert>
    va = pa = (u64)kernelStart;
    802017d4:	fffffa17          	auipc	s4,0xfffff
    802017d8:	82ca0a13          	addi	s4,s4,-2004 # 80200000 <_start>
    for (u64 i = 0; va + i < (u64)textEnd; i += PAGE_SIZE) {
    802017dc:	0000b497          	auipc	s1,0xb
    802017e0:	82448493          	addi	s1,s1,-2012 # 8020c000 <textEnd>
    802017e4:	029a7363          	bgeu	s4,s1,8020180a <memoryInit+0x252>
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_EXECUTE | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    802017e8:	00419b17          	auipc	s6,0x419
    802017ec:	818b0b13          	addi	s6,s6,-2024 # 8061a000 <_pgdir>
    for (u64 i = 0; va + i < (u64)textEnd; i += PAGE_SIZE) {
    802017f0:	6a85                	lui	s5,0x1
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_EXECUTE | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    802017f2:	0ce00693          	li	a3,206
    802017f6:	8652                	mv	a2,s4
    802017f8:	85d2                	mv	a1,s4
    802017fa:	855a                	mv	a0,s6
    802017fc:	00000097          	auipc	ra,0x0
    80201800:	79e080e7          	jalr	1950(ra) # 80201f9a <pageInsert>
    for (u64 i = 0; va + i < (u64)textEnd; i += PAGE_SIZE) {
    80201804:	9a56                	add	s4,s4,s5
    80201806:	fe9a66e3          	bltu	s4,s1,802017f2 <memoryInit+0x23a>
    for (u64 i = 0; va + i < PHYSICAL_MEMORY_TOP; i += PAGE_SIZE) {
    8020180a:	47c5                	li	a5,17
    8020180c:	07ee                	slli	a5,a5,0x1b
    8020180e:	02f4f463          	bgeu	s1,a5,80201836 <memoryInit+0x27e>
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    80201812:	00418b17          	auipc	s6,0x418
    80201816:	7eeb0b13          	addi	s6,s6,2030 # 8061a000 <_pgdir>
    for (u64 i = 0; va + i < PHYSICAL_MEMORY_TOP; i += PAGE_SIZE) {
    8020181a:	6a85                	lui	s5,0x1
    8020181c:	8a3e                	mv	s4,a5
        pageInsert(kernelPageDirectory, va + i, pa + i, PTE_READ | PTE_WRITE | PTE_ACCESSED | PTE_DIRTY);
    8020181e:	0c600693          	li	a3,198
    80201822:	8626                	mv	a2,s1
    80201824:	85a6                	mv	a1,s1
    80201826:	855a                	mv	a0,s6
    80201828:	00000097          	auipc	ra,0x0
    8020182c:	772080e7          	jalr	1906(ra) # 80201f9a <pageInsert>
    for (u64 i = 0; va + i < PHYSICAL_MEMORY_TOP; i += PAGE_SIZE) {
    80201830:	94d6                	add	s1,s1,s5
    80201832:	ff44e6e3          	bltu	s1,s4,8020181e <memoryInit+0x266>
    pageInsert(kernelPageDirectory, TRAMPOLINE_BASE, (u64)trampoline, 
    80201836:	0ce00693          	li	a3,206
    8020183a:	00008617          	auipc	a2,0x8
    8020183e:	7c660613          	addi	a2,a2,1990 # 8020a000 <_trampoline>
    80201842:	020005b7          	lui	a1,0x2000
    80201846:	15fd                	addi	a1,a1,-1
    80201848:	05b6                	slli	a1,a1,0xd
    8020184a:	00418517          	auipc	a0,0x418
    8020184e:	7b650513          	addi	a0,a0,1974 # 8061a000 <_pgdir>
    80201852:	00000097          	auipc	ra,0x0
    80201856:	748080e7          	jalr	1864(ra) # 80201f9a <pageInsert>
    pageInsert(kernelPageDirectory, TRAMPOLINE_BASE + PAGE_SIZE, (u64)trampoline + PAGE_SIZE, 
    8020185a:	0ce00693          	li	a3,206
    8020185e:	00009617          	auipc	a2,0x9
    80201862:	7a260613          	addi	a2,a2,1954 # 8020b000 <trapframe>
    80201866:	040005b7          	lui	a1,0x4000
    8020186a:	15fd                	addi	a1,a1,-1
    8020186c:	05b2                	slli	a1,a1,0xc
    8020186e:	00418517          	auipc	a0,0x418
    80201872:	79250513          	addi	a0,a0,1938 # 8061a000 <_pgdir>
    80201876:	00000097          	auipc	ra,0x0
    8020187a:	724080e7          	jalr	1828(ra) # 80201f9a <pageInsert>
    for (; i < n; i++) {
    8020187e:	00f9d993          	srli	s3,s3,0xf
    80201882:	0019f993          	andi	s3,s3,1
    80201886:	02099563          	bnez	s3,802018b0 <memoryInit+0x2f8>
    8020188a:	02091713          	slli	a4,s2,0x20
    8020188e:	9301                	srli	a4,a4,0x20
    80201890:	00171793          	slli	a5,a4,0x1
    80201894:	97ba                	add	a5,a5,a4
    80201896:	078e                	slli	a5,a5,0x3
    80201898:	001c1717          	auipc	a4,0x1c1
    8020189c:	be070713          	addi	a4,a4,-1056 # 803c2478 <pages>
    802018a0:	97ba                	add	a5,a5,a4
    802018a2:	6721                	lui	a4,0x8
        pages[i].ref = 0;
    802018a4:	0007a823          	sw	zero,16(a5) # 8010 <_start-0x801f7ff0>
    for (; i < n; i++) {
    802018a8:	2905                	addiw	s2,s2,1
    802018aa:	07e1                	addi	a5,a5,24
    802018ac:	fee96ce3          	bltu	s2,a4,802018a4 <memoryInit+0x2ec>
    initFreePages();
    virtualMemory();
    resetRef();
    startPage();
    802018b0:	00000097          	auipc	ra,0x0
    802018b4:	ce4080e7          	jalr	-796(ra) # 80201594 <startPage>
    printf("Memory init finish!\n");
    802018b8:	0000b517          	auipc	a0,0xb
    802018bc:	ba050513          	addi	a0,a0,-1120 # 8020c458 <textEnd+0x458>
    802018c0:	fffff097          	auipc	ra,0xfffff
    802018c4:	200080e7          	jalr	512(ra) # 80200ac0 <printf>
    printf("Test memory start...\n");
    802018c8:	0000b517          	auipc	a0,0xb
    802018cc:	ba850513          	addi	a0,a0,-1112 # 8020c470 <textEnd+0x470>
    802018d0:	fffff097          	auipc	ra,0xfffff
    802018d4:	1f0080e7          	jalr	496(ra) # 80200ac0 <printf>
    pageAlloc(&p);
    802018d8:	fa840513          	addi	a0,s0,-88
    802018dc:	00000097          	auipc	ra,0x0
    802018e0:	332080e7          	jalr	818(ra) # 80201c0e <pageAlloc>
    int hartId;
} PhysicalPage;

inline u32 page2PPN(PhysicalPage *page) {
    extern PhysicalPage pages[];
    return page - pages;
    802018e4:	001c1997          	auipc	s3,0x1c1
    802018e8:	b9498993          	addi	s3,s3,-1132 # 803c2478 <pages>
    802018ec:	fa843583          	ld	a1,-88(s0)
    802018f0:	413585b3          	sub	a1,a1,s3
    802018f4:	858d                	srai	a1,a1,0x3
    802018f6:	0000c917          	auipc	s2,0xc
    802018fa:	9e293903          	ld	s2,-1566(s2) # 8020d2d8 <__func__.0+0x8>
    802018fe:	032585b3          	mul	a1,a1,s2
    return pages + ppn;
}


inline u64 page2pa(PhysicalPage *page) {
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201902:	00c5959b          	slliw	a1,a1,0xc
    80201906:	1582                	slli	a1,a1,0x20
    80201908:	9181                	srli	a1,a1,0x20
    8020190a:	4a05                	li	s4,1
    8020190c:	01fa1493          	slli	s1,s4,0x1f
    printf("alloced page1:  %lx\n", page2pa(p));
    80201910:	95a6                	add	a1,a1,s1
    80201912:	0000b517          	auipc	a0,0xb
    80201916:	b7650513          	addi	a0,a0,-1162 # 8020c488 <textEnd+0x488>
    8020191a:	fffff097          	auipc	ra,0xfffff
    8020191e:	1a6080e7          	jalr	422(ra) # 80200ac0 <printf>
    return page - pages;
    80201922:	fa843603          	ld	a2,-88(s0)
    80201926:	41360633          	sub	a2,a2,s3
    8020192a:	860d                	srai	a2,a2,0x3
    8020192c:	03260633          	mul	a2,a2,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201930:	00c6161b          	slliw	a2,a2,0xc
    80201934:	1602                	slli	a2,a2,0x20
    80201936:	9201                	srli	a2,a2,0x20
    pageInsert(kernelPageDirectory, 1ll << 35, page2pa(p), PTE_READ | PTE_WRITE);
    80201938:	4699                	li	a3,6
    8020193a:	9626                	add	a2,a2,s1
    8020193c:	023a1593          	slli	a1,s4,0x23
    80201940:	00418517          	auipc	a0,0x418
    80201944:	6c050513          	addi	a0,a0,1728 # 8061a000 <_pgdir>
    80201948:	00000097          	auipc	ra,0x0
    8020194c:	652080e7          	jalr	1618(ra) # 80201f9a <pageInsert>
    return page - pages;
    80201950:	fa843783          	ld	a5,-88(s0)
    80201954:	413787b3          	sub	a5,a5,s3
    80201958:	878d                	srai	a5,a5,0x3
    8020195a:	032787b3          	mul	a5,a5,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020195e:	00c7979b          	slliw	a5,a5,0xc
    80201962:	1782                	slli	a5,a5,0x20
    80201964:	9381                	srli	a5,a5,0x20
    *((u32*)page2pa(p)) = 147893;
    80201966:	97a6                	add	a5,a5,s1
    80201968:	00024737          	lui	a4,0x24
    8020196c:	1b570713          	addi	a4,a4,437 # 241b5 <_start-0x801dbe4b>
    80201970:	c398                	sw	a4,0(a5)
    printf("value1 of %lx:  %d\n", 1ll << 35, *((u32*)(1ll<<35)));
    80201972:	1a0e                	slli	s4,s4,0x23
    80201974:	000a2603          	lw	a2,0(s4)
    80201978:	85d2                	mv	a1,s4
    8020197a:	0000b517          	auipc	a0,0xb
    8020197e:	b2650513          	addi	a0,a0,-1242 # 8020c4a0 <textEnd+0x4a0>
    80201982:	fffff097          	auipc	ra,0xfffff
    80201986:	13e080e7          	jalr	318(ra) # 80200ac0 <printf>
    pageAlloc(&p);
    8020198a:	fa840513          	addi	a0,s0,-88
    8020198e:	00000097          	auipc	ra,0x0
    80201992:	280080e7          	jalr	640(ra) # 80201c0e <pageAlloc>
    return page - pages;
    80201996:	fa843583          	ld	a1,-88(s0)
    8020199a:	413585b3          	sub	a1,a1,s3
    8020199e:	858d                	srai	a1,a1,0x3
    802019a0:	032585b3          	mul	a1,a1,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802019a4:	00c5959b          	slliw	a1,a1,0xc
    802019a8:	1582                	slli	a1,a1,0x20
    802019aa:	9181                	srli	a1,a1,0x20
    printf("alloced page2:  %lx\n", page2pa(p));
    802019ac:	95a6                	add	a1,a1,s1
    802019ae:	0000b517          	auipc	a0,0xb
    802019b2:	b0a50513          	addi	a0,a0,-1270 # 8020c4b8 <textEnd+0x4b8>
    802019b6:	fffff097          	auipc	ra,0xfffff
    802019ba:	10a080e7          	jalr	266(ra) # 80200ac0 <printf>
    return page - pages;
    802019be:	fa843603          	ld	a2,-88(s0)
    802019c2:	41360633          	sub	a2,a2,s3
    802019c6:	860d                	srai	a2,a2,0x3
    802019c8:	03260633          	mul	a2,a2,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802019cc:	00c6161b          	slliw	a2,a2,0xc
    802019d0:	1602                	slli	a2,a2,0x20
    802019d2:	9201                	srli	a2,a2,0x20
    pageInsert(kernelPageDirectory, 1ll << 35, page2pa(p), PTE_READ | PTE_WRITE);
    802019d4:	4699                	li	a3,6
    802019d6:	9626                	add	a2,a2,s1
    802019d8:	85d2                	mv	a1,s4
    802019da:	00418517          	auipc	a0,0x418
    802019de:	62650513          	addi	a0,a0,1574 # 8061a000 <_pgdir>
    802019e2:	00000097          	auipc	ra,0x0
    802019e6:	5b8080e7          	jalr	1464(ra) # 80201f9a <pageInsert>
    return page - pages;
    802019ea:	fa843783          	ld	a5,-88(s0)
    802019ee:	413787b3          	sub	a5,a5,s3
    802019f2:	878d                	srai	a5,a5,0x3
    802019f4:	032787b3          	mul	a5,a5,s2
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802019f8:	00c7979b          	slliw	a5,a5,0xc
    802019fc:	1782                	slli	a5,a5,0x20
    802019fe:	9381                	srli	a5,a5,0x20
    *((u32*)page2pa(p)) = 65536;
    80201a00:	94be                	add	s1,s1,a5
    80201a02:	67c1                	lui	a5,0x10
    80201a04:	c09c                	sw	a5,0(s1)
    printf("value1 of %lx:  %d\n", 1ll << 35, *((u32*)(1ll<<35)));
    80201a06:	000a2603          	lw	a2,0(s4)
    80201a0a:	85d2                	mv	a1,s4
    80201a0c:	0000b517          	auipc	a0,0xb
    80201a10:	a9450513          	addi	a0,a0,-1388 # 8020c4a0 <textEnd+0x4a0>
    80201a14:	fffff097          	auipc	ra,0xfffff
    80201a18:	0ac080e7          	jalr	172(ra) # 80200ac0 <printf>
    testMemory();
    printf("Test memory finish!\n");
    80201a1c:	0000b517          	auipc	a0,0xb
    80201a20:	ab450513          	addi	a0,a0,-1356 # 8020c4d0 <textEnd+0x4d0>
    80201a24:	fffff097          	auipc	ra,0xfffff
    80201a28:	09c080e7          	jalr	156(ra) # 80200ac0 <printf>
}
    80201a2c:	60e6                	ld	ra,88(sp)
    80201a2e:	6446                	ld	s0,80(sp)
    80201a30:	64a6                	ld	s1,72(sp)
    80201a32:	6906                	ld	s2,64(sp)
    80201a34:	79e2                	ld	s3,56(sp)
    80201a36:	7a42                	ld	s4,48(sp)
    80201a38:	7aa2                	ld	s5,40(sp)
    80201a3a:	7b02                	ld	s6,32(sp)
    80201a3c:	6be2                	ld	s7,24(sp)
    80201a3e:	6125                	addi	sp,sp,96
    80201a40:	8082                	ret
    LIST_INIT(&freePages);
    80201a42:	00281797          	auipc	a5,0x281
    80201a46:	a207bb23          	sd	zero,-1482(a5) # 80482478 <freePages>
    for (i = 0; i < n; i++) {
    80201a4a:	834a                	mv	t1,s2
    80201a4c:	b6ed                	j	80201636 <memoryInit+0x7e>

0000000080201a4e <bcopy>:

void bcopy(void *src, void *dst, u32 len) {
    80201a4e:	1141                	addi	sp,sp,-16
    80201a50:	e422                	sd	s0,8(sp)
    80201a52:	0800                	addi	s0,sp,16
    void *finish = src + len;
    80201a54:	1602                	slli	a2,a2,0x20
    80201a56:	9201                	srli	a2,a2,0x20
    80201a58:	962a                	add	a2,a2,a0

    while (src < finish) {
    80201a5a:	00c57a63          	bgeu	a0,a2,80201a6e <bcopy+0x20>
        *(u8*)dst = *(u8*)src;
    80201a5e:	00054783          	lbu	a5,0(a0)
    80201a62:	00f58023          	sb	a5,0(a1) # 4000000 <_start-0x7c200000>
        src++;
    80201a66:	0505                	addi	a0,a0,1
        dst++;
    80201a68:	0585                	addi	a1,a1,1
    while (src < finish) {
    80201a6a:	fea61ae3          	bne	a2,a0,80201a5e <bcopy+0x10>
    }
}
    80201a6e:	6422                	ld	s0,8(sp)
    80201a70:	0141                	addi	sp,sp,16
    80201a72:	8082                	ret

0000000080201a74 <bzero>:

void bzero(void *start, u32 len) {
    80201a74:	1141                	addi	sp,sp,-16
    80201a76:	e422                	sd	s0,8(sp)
    80201a78:	0800                	addi	s0,sp,16
    void *finish = start + len;
    80201a7a:	02059713          	slli	a4,a1,0x20
    80201a7e:	9301                	srli	a4,a4,0x20
    80201a80:	972a                	add	a4,a4,a0

    if (len <= 7) {
    80201a82:	479d                	li	a5,7
    80201a84:	04b7f463          	bgeu	a5,a1,80201acc <bzero+0x58>
        while (start < finish) {
            *(u8*)start++ = 0;
        }
        return;
    }
    while (((u64) start) & 7) {
    80201a88:	00757793          	andi	a5,a0,7
    80201a8c:	c799                	beqz	a5,80201a9a <bzero+0x26>
        *(u8*)start++ = 0;
    80201a8e:	0505                	addi	a0,a0,1
    80201a90:	fe050fa3          	sb	zero,-1(a0)
    while (((u64) start) & 7) {
    80201a94:	00757793          	andi	a5,a0,7
    80201a98:	fbfd                	bnez	a5,80201a8e <bzero+0x1a>
    }
    while (start + 7 < finish) {
    80201a9a:	00750793          	addi	a5,a0,7
    80201a9e:	02e7ff63          	bgeu	a5,a4,80201adc <bzero+0x68>
    80201aa2:	ff870793          	addi	a5,a4,-8
    80201aa6:	8f89                	sub	a5,a5,a0
    80201aa8:	9be1                	andi	a5,a5,-8
    80201aaa:	07a1                	addi	a5,a5,8
    80201aac:	97aa                	add	a5,a5,a0
        *(u64*)start = 0;
    80201aae:	00053023          	sd	zero,0(a0)
        start += 8;
    80201ab2:	0521                	addi	a0,a0,8
    while (start + 7 < finish) {
    80201ab4:	fef51de3          	bne	a0,a5,80201aae <bzero+0x3a>
    }
    while (start < finish) {
    80201ab8:	00e7f763          	bgeu	a5,a4,80201ac6 <bzero+0x52>
        *(u8*)start++ = 0;
    80201abc:	0785                	addi	a5,a5,1
    80201abe:	fe078fa3          	sb	zero,-1(a5)
    while (start < finish) {
    80201ac2:	fef71de3          	bne	a4,a5,80201abc <bzero+0x48>
    }
    80201ac6:	6422                	ld	s0,8(sp)
    80201ac8:	0141                	addi	sp,sp,16
    80201aca:	8082                	ret
        while (start < finish) {
    80201acc:	fee57de3          	bgeu	a0,a4,80201ac6 <bzero+0x52>
            *(u8*)start++ = 0;
    80201ad0:	0505                	addi	a0,a0,1
    80201ad2:	fe050fa3          	sb	zero,-1(a0)
        while (start < finish) {
    80201ad6:	fea71de3          	bne	a4,a0,80201ad0 <bzero+0x5c>
    80201ada:	b7f5                	j	80201ac6 <bzero+0x52>
    while (start + 7 < finish) {
    80201adc:	87aa                	mv	a5,a0
    80201ade:	bfe9                	j	80201ab8 <bzero+0x44>

0000000080201ae0 <paDecreaseRef>:
        LIST_INSERT_HEAD(&freePages, page, link);
        releaseLock(&pageListLock);
    }
}

static void paDecreaseRef(u64 pa) {
    80201ae0:	1101                	addi	sp,sp,-32
    80201ae2:	ec06                	sd	ra,24(sp)
    80201ae4:	e822                	sd	s0,16(sp)
    80201ae6:	e426                	sd	s1,8(sp)
    80201ae8:	1000                	addi	s0,sp,32
}

inline PhysicalPage* pa2page(u64 pa) {
    if (pa == 0)
    80201aea:	cd21                	beqz	a0,80201b42 <paDecreaseRef+0x62>
        return NULL;
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80201aec:	800007b7          	lui	a5,0x80000
    80201af0:	953e                	add	a0,a0,a5
    80201af2:	8131                	srli	a0,a0,0xc
    return pages + ppn;
    80201af4:	1502                	slli	a0,a0,0x20
    80201af6:	9101                	srli	a0,a0,0x20
    80201af8:	00151493          	slli	s1,a0,0x1
    80201afc:	94aa                	add	s1,s1,a0
    80201afe:	048e                	slli	s1,s1,0x3
    80201b00:	001c1797          	auipc	a5,0x1c1
    80201b04:	97878793          	addi	a5,a5,-1672 # 803c2478 <pages>
    80201b08:	94be                	add	s1,s1,a5
    PhysicalPage *page = pa2page(pa);
    page->ref--;
    80201b0a:	489c                	lw	a5,16(s1)
    80201b0c:	37fd                	addiw	a5,a5,-1
    80201b0e:	0007869b          	sext.w	a3,a5
    80201b12:	c89c                	sw	a5,16(s1)
    assert(page->ref==0);
    80201b14:	0016b693          	seqz	a3,a3
    80201b18:	0000b617          	auipc	a2,0xb
    80201b1c:	aa860613          	addi	a2,a2,-1368 # 8020c5c0 <__func__.3>
    80201b20:	07400593          	li	a1,116
    80201b24:	0000b517          	auipc	a0,0xb
    80201b28:	9c450513          	addi	a0,a0,-1596 # 8020c4e8 <textEnd+0x4e8>
    80201b2c:	fffff097          	auipc	ra,0xfffff
    80201b30:	096080e7          	jalr	150(ra) # 80200bc2 <_assert_>
    if (page->ref == 0) {
    80201b34:	489c                	lw	a5,16(s1)
    80201b36:	cb81                	beqz	a5,80201b46 <paDecreaseRef+0x66>
        acquireLock(&pageListLock);
        LIST_INSERT_HEAD(&freePages, page, link);
        releaseLock(&pageListLock);
    }
}
    80201b38:	60e2                	ld	ra,24(sp)
    80201b3a:	6442                	ld	s0,16(sp)
    80201b3c:	64a2                	ld	s1,8(sp)
    80201b3e:	6105                	addi	sp,sp,32
    80201b40:	8082                	ret
        return NULL;
    80201b42:	4481                	li	s1,0
    80201b44:	b7d9                	j	80201b0a <paDecreaseRef+0x2a>
        acquireLock(&pageListLock);
    80201b46:	00281517          	auipc	a0,0x281
    80201b4a:	93a50513          	addi	a0,a0,-1734 # 80482480 <pageListLock>
    80201b4e:	00004097          	auipc	ra,0x4
    80201b52:	f60080e7          	jalr	-160(ra) # 80205aae <acquireLock>
        LIST_INSERT_HEAD(&freePages, page, link);
    80201b56:	00281797          	auipc	a5,0x281
    80201b5a:	9227b783          	ld	a5,-1758(a5) # 80482478 <freePages>
    80201b5e:	e09c                	sd	a5,0(s1)
    80201b60:	c391                	beqz	a5,80201b64 <paDecreaseRef+0x84>
    80201b62:	e784                	sd	s1,8(a5)
    80201b64:	00281797          	auipc	a5,0x281
    80201b68:	91478793          	addi	a5,a5,-1772 # 80482478 <freePages>
    80201b6c:	e384                	sd	s1,0(a5)
    80201b6e:	e49c                	sd	a5,8(s1)
        releaseLock(&pageListLock);
    80201b70:	00281517          	auipc	a0,0x281
    80201b74:	91050513          	addi	a0,a0,-1776 # 80482480 <pageListLock>
    80201b78:	00004097          	auipc	ra,0x4
    80201b7c:	fb2080e7          	jalr	-78(ra) # 80205b2a <releaseLock>
}
    80201b80:	bf65                	j	80201b38 <paDecreaseRef+0x58>

0000000080201b82 <pageLockInit>:
inline void pageLockInit(void) {
    80201b82:	1141                	addi	sp,sp,-16
    80201b84:	e406                	sd	ra,8(sp)
    80201b86:	e022                	sd	s0,0(sp)
    80201b88:	0800                	addi	s0,sp,16
    initLock(&pageListLock, "pageListLock");
    80201b8a:	0000b597          	auipc	a1,0xb
    80201b8e:	96658593          	addi	a1,a1,-1690 # 8020c4f0 <textEnd+0x4f0>
    80201b92:	00281517          	auipc	a0,0x281
    80201b96:	8ee50513          	addi	a0,a0,-1810 # 80482480 <pageListLock>
    80201b9a:	00004097          	auipc	ra,0x4
    80201b9e:	eca080e7          	jalr	-310(ra) # 80205a64 <initLock>
    initLock(&cowBufferLock, "cowBufferLock");
    80201ba2:	0000b597          	auipc	a1,0xb
    80201ba6:	95e58593          	addi	a1,a1,-1698 # 8020c500 <textEnd+0x500>
    80201baa:	00281517          	auipc	a0,0x281
    80201bae:	8ee50513          	addi	a0,a0,-1810 # 80482498 <cowBufferLock>
    80201bb2:	00004097          	auipc	ra,0x4
    80201bb6:	eb2080e7          	jalr	-334(ra) # 80205a64 <initLock>
}
    80201bba:	60a2                	ld	ra,8(sp)
    80201bbc:	6402                	ld	s0,0(sp)
    80201bbe:	0141                	addi	sp,sp,16
    80201bc0:	8082                	ret

0000000080201bc2 <countFreePages>:
int countFreePages() {
    80201bc2:	1101                	addi	sp,sp,-32
    80201bc4:	ec06                	sd	ra,24(sp)
    80201bc6:	e822                	sd	s0,16(sp)
    80201bc8:	e426                	sd	s1,8(sp)
    80201bca:	1000                	addi	s0,sp,32
    acquireLock(&pageListLock);
    80201bcc:	00281517          	auipc	a0,0x281
    80201bd0:	8b450513          	addi	a0,a0,-1868 # 80482480 <pageListLock>
    80201bd4:	00004097          	auipc	ra,0x4
    80201bd8:	eda080e7          	jalr	-294(ra) # 80205aae <acquireLock>
    LIST_FOREACH(page, &freePages, link)
    80201bdc:	00281797          	auipc	a5,0x281
    80201be0:	89c7b783          	ld	a5,-1892(a5) # 80482478 <freePages>
    80201be4:	c39d                	beqz	a5,80201c0a <countFreePages+0x48>
    int count = 0;
    80201be6:	4481                	li	s1,0
        count++;
    80201be8:	2485                	addiw	s1,s1,1
    LIST_FOREACH(page, &freePages, link)
    80201bea:	639c                	ld	a5,0(a5)
    80201bec:	fff5                	bnez	a5,80201be8 <countFreePages+0x26>
    releaseLock(&pageListLock);
    80201bee:	00281517          	auipc	a0,0x281
    80201bf2:	89250513          	addi	a0,a0,-1902 # 80482480 <pageListLock>
    80201bf6:	00004097          	auipc	ra,0x4
    80201bfa:	f34080e7          	jalr	-204(ra) # 80205b2a <releaseLock>
}
    80201bfe:	8526                	mv	a0,s1
    80201c00:	60e2                	ld	ra,24(sp)
    80201c02:	6442                	ld	s0,16(sp)
    80201c04:	64a2                	ld	s1,8(sp)
    80201c06:	6105                	addi	sp,sp,32
    80201c08:	8082                	ret
    int count = 0;
    80201c0a:	4481                	li	s1,0
    80201c0c:	b7cd                	j	80201bee <countFreePages+0x2c>

0000000080201c0e <pageAlloc>:
int pageAlloc(PhysicalPage **pp) {
    80201c0e:	1101                	addi	sp,sp,-32
    80201c10:	ec06                	sd	ra,24(sp)
    80201c12:	e822                	sd	s0,16(sp)
    80201c14:	e426                	sd	s1,8(sp)
    80201c16:	e04a                	sd	s2,0(sp)
    80201c18:	1000                	addi	s0,sp,32
    80201c1a:	892a                	mv	s2,a0
    acquireLock(&pageListLock);
    80201c1c:	00281517          	auipc	a0,0x281
    80201c20:	86450513          	addi	a0,a0,-1948 # 80482480 <pageListLock>
    80201c24:	00004097          	auipc	ra,0x4
    80201c28:	e8a080e7          	jalr	-374(ra) # 80205aae <acquireLock>
    if ((page = LIST_FIRST(&freePages)) != NULL) {
    80201c2c:	00281497          	auipc	s1,0x281
    80201c30:	84c4b483          	ld	s1,-1972(s1) # 80482478 <freePages>
    80201c34:	c4a5                	beqz	s1,80201c9c <pageAlloc+0x8e>
        *pp = page;
    80201c36:	00993023          	sd	s1,0(s2)
    asm volatile("mv %0, tp" : "=r" (x) );
    80201c3a:	8792                	mv	a5,tp
        page->hartId = r_hartid();
    80201c3c:	c8dc                	sw	a5,20(s1)
        LIST_REMOVE(page, link);
    80201c3e:	609c                	ld	a5,0(s1)
    80201c40:	c399                	beqz	a5,80201c46 <pageAlloc+0x38>
    80201c42:	6498                	ld	a4,8(s1)
    80201c44:	e798                	sd	a4,8(a5)
    80201c46:	649c                	ld	a5,8(s1)
    80201c48:	6098                	ld	a4,0(s1)
    80201c4a:	e398                	sd	a4,0(a5)
        releaseLock(&pageListLock);
    80201c4c:	00281517          	auipc	a0,0x281
    80201c50:	83450513          	addi	a0,a0,-1996 # 80482480 <pageListLock>
    80201c54:	00004097          	auipc	ra,0x4
    80201c58:	ed6080e7          	jalr	-298(ra) # 80205b2a <releaseLock>
    return page - pages;
    80201c5c:	001c1797          	auipc	a5,0x1c1
    80201c60:	81c78793          	addi	a5,a5,-2020 # 803c2478 <pages>
    80201c64:	40f487b3          	sub	a5,s1,a5
    80201c68:	878d                	srai	a5,a5,0x3
    80201c6a:	0000b717          	auipc	a4,0xb
    80201c6e:	66e73703          	ld	a4,1646(a4) # 8020d2d8 <__func__.0+0x8>
    80201c72:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201c76:	00c7979b          	slliw	a5,a5,0xc
    80201c7a:	1782                	slli	a5,a5,0x20
    80201c7c:	9381                	srli	a5,a5,0x20
        bzero((void*)page2pa(page), PAGE_SIZE);
    80201c7e:	6585                	lui	a1,0x1
    80201c80:	4505                	li	a0,1
    80201c82:	057e                	slli	a0,a0,0x1f
    80201c84:	953e                	add	a0,a0,a5
    80201c86:	00000097          	auipc	ra,0x0
    80201c8a:	dee080e7          	jalr	-530(ra) # 80201a74 <bzero>
        return 0;
    80201c8e:	4501                	li	a0,0
}
    80201c90:	60e2                	ld	ra,24(sp)
    80201c92:	6442                	ld	s0,16(sp)
    80201c94:	64a2                	ld	s1,8(sp)
    80201c96:	6902                	ld	s2,0(sp)
    80201c98:	6105                	addi	sp,sp,32
    80201c9a:	8082                	ret
    releaseLock(&pageListLock);
    80201c9c:	00280517          	auipc	a0,0x280
    80201ca0:	7e450513          	addi	a0,a0,2020 # 80482480 <pageListLock>
    80201ca4:	00004097          	auipc	ra,0x4
    80201ca8:	e86080e7          	jalr	-378(ra) # 80205b2a <releaseLock>
    printf("there's no physical page left!\n");
    80201cac:	0000b517          	auipc	a0,0xb
    80201cb0:	86450513          	addi	a0,a0,-1948 # 8020c510 <textEnd+0x510>
    80201cb4:	fffff097          	auipc	ra,0xfffff
    80201cb8:	e0c080e7          	jalr	-500(ra) # 80200ac0 <printf>
    *pp = NULL;
    80201cbc:	00093023          	sd	zero,0(s2)
    return -NO_FREE_MEMORY;
    80201cc0:	5571                	li	a0,-4
    80201cc2:	b7f9                	j	80201c90 <pageAlloc+0x82>

0000000080201cc4 <pageWalk>:
static int pageWalk(u64 *pgdir, u64 va, bool create, u64 **pte) {
    80201cc4:	7159                	addi	sp,sp,-112
    80201cc6:	f486                	sd	ra,104(sp)
    80201cc8:	f0a2                	sd	s0,96(sp)
    80201cca:	eca6                	sd	s1,88(sp)
    80201ccc:	e8ca                	sd	s2,80(sp)
    80201cce:	e4ce                	sd	s3,72(sp)
    80201cd0:	e0d2                	sd	s4,64(sp)
    80201cd2:	fc56                	sd	s5,56(sp)
    80201cd4:	f85a                	sd	s6,48(sp)
    80201cd6:	f45e                	sd	s7,40(sp)
    80201cd8:	f062                	sd	s8,32(sp)
    80201cda:	ec66                	sd	s9,24(sp)
    80201cdc:	e86a                	sd	s10,16(sp)
    80201cde:	1880                	addi	s0,sp,112
    80201ce0:	892e                	mv	s2,a1
    80201ce2:	8b32                	mv	s6,a2
    80201ce4:	8ab6                	mv	s5,a3
    80201ce6:	49f9                	li	s3,30
    return page - pages;
    80201ce8:	001c0d17          	auipc	s10,0x1c0
    80201cec:	790d0d13          	addi	s10,s10,1936 # 803c2478 <pages>
    80201cf0:	0000bc97          	auipc	s9,0xb
    80201cf4:	5e8c8c93          	addi	s9,s9,1512 # 8020d2d8 <__func__.0+0x8>
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201cf8:	4b85                	li	s7,1
    80201cfa:	0bfe                	slli	s7,s7,0x1f
        addr = (u64*)PTE2PA(*addr);
    80201cfc:	fff00a37          	lui	s4,0xfff00
    80201d00:	008a5a13          	srli	s4,s4,0x8
    for (level = 2; level > 0; level--) {
    80201d04:	4c31                	li	s8,12
    80201d06:	a821                	j	80201d1e <pageWalk+0x5a>
                *pte = NULL;
    80201d08:	000ab023          	sd	zero,0(s5) # 1000 <_start-0x801ff000>
                return 0;
    80201d0c:	4501                	li	a0,0
    80201d0e:	a895                	j	80201d82 <pageWalk+0xbe>
        addr = (u64*)PTE2PA(*addr);
    80201d10:	6088                	ld	a0,0(s1)
    80201d12:	050a                	slli	a0,a0,0x2
    80201d14:	01457533          	and	a0,a0,s4
    for (level = 2; level > 0; level--) {
    80201d18:	39dd                	addiw	s3,s3,-9
    80201d1a:	05898b63          	beq	s3,s8,80201d70 <pageWalk+0xac>
        addr += GET_PAGE_TABLE_INDEX(va, level);
    80201d1e:	013957b3          	srl	a5,s2,s3
    80201d22:	1ff7f793          	andi	a5,a5,511
    80201d26:	078e                	slli	a5,a5,0x3
    80201d28:	00f504b3          	add	s1,a0,a5
        if (!(*addr) & PTE_VALID) {
    80201d2c:	609c                	ld	a5,0(s1)
    80201d2e:	f3ed                	bnez	a5,80201d10 <pageWalk+0x4c>
            if (!create) {
    80201d30:	fc0b0ce3          	beqz	s6,80201d08 <pageWalk+0x44>
            int ret = pageAlloc(&pp);
    80201d34:	f9840513          	addi	a0,s0,-104
    80201d38:	00000097          	auipc	ra,0x0
    80201d3c:	ed6080e7          	jalr	-298(ra) # 80201c0e <pageAlloc>
            if (ret < 0) {
    80201d40:	04054163          	bltz	a0,80201d82 <pageWalk+0xbe>
            (*addr) = page2pte(pp) | PTE_VALID;
    80201d44:	f9843703          	ld	a4,-104(s0)
    return page - pages;
    80201d48:	41a707b3          	sub	a5,a4,s10
    80201d4c:	878d                	srai	a5,a5,0x3
    80201d4e:	000cb683          	ld	a3,0(s9)
    80201d52:	02d787b3          	mul	a5,a5,a3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80201d56:	00c7979b          	slliw	a5,a5,0xc
    80201d5a:	1782                	slli	a5,a5,0x20
    80201d5c:	9381                	srli	a5,a5,0x20
    80201d5e:	97de                	add	a5,a5,s7
#define PTE2PERM(pte) (((u64)(pte)) & ~((1ull << 54) - (1ull << 10)))
#define PTE2PA(pte) (((((u64)(pte)) & ((1ull << 54) - (1ull << 10))) >> PERM_WIDTH) << PAGE_SHIFT)
#define PA2PTE(pa) ((((u64)(pa)) >> PAGE_SHIFT) << PERM_WIDTH)

inline u64 page2pte(PhysicalPage *page) {
    return (page2pa(page) >> PAGE_SHIFT) << PERM_WIDTH;
    80201d60:	8389                	srli	a5,a5,0x2
    80201d62:	0017e793          	ori	a5,a5,1
    80201d66:	e09c                	sd	a5,0(s1)
            pp->ref++;
    80201d68:	4b1c                	lw	a5,16(a4)
    80201d6a:	2785                	addiw	a5,a5,1
    80201d6c:	cb1c                	sw	a5,16(a4)
    80201d6e:	b74d                	j	80201d10 <pageWalk+0x4c>
    *pte = addr + GET_PAGE_TABLE_INDEX(va, 0);
    80201d70:	00c95913          	srli	s2,s2,0xc
    80201d74:	1ff97913          	andi	s2,s2,511
    80201d78:	090e                	slli	s2,s2,0x3
    80201d7a:	954a                	add	a0,a0,s2
    80201d7c:	00aab023          	sd	a0,0(s5)
    return 0;
    80201d80:	4501                	li	a0,0
}
    80201d82:	70a6                	ld	ra,104(sp)
    80201d84:	7406                	ld	s0,96(sp)
    80201d86:	64e6                	ld	s1,88(sp)
    80201d88:	6946                	ld	s2,80(sp)
    80201d8a:	69a6                	ld	s3,72(sp)
    80201d8c:	6a06                	ld	s4,64(sp)
    80201d8e:	7ae2                	ld	s5,56(sp)
    80201d90:	7b42                	ld	s6,48(sp)
    80201d92:	7ba2                	ld	s7,40(sp)
    80201d94:	7c02                	ld	s8,32(sp)
    80201d96:	6ce2                	ld	s9,24(sp)
    80201d98:	6d42                	ld	s10,16(sp)
    80201d9a:	6165                	addi	sp,sp,112
    80201d9c:	8082                	ret

0000000080201d9e <pageLookup>:
u64 pageLookup(u64 *pgdir, u64 va, u64 **pte) {
    80201d9e:	7179                	addi	sp,sp,-48
    80201da0:	f406                	sd	ra,40(sp)
    80201da2:	f022                	sd	s0,32(sp)
    80201da4:	ec26                	sd	s1,24(sp)
    80201da6:	1800                	addi	s0,sp,48
    80201da8:	84b2                	mv	s1,a2
    pageWalk(pgdir, va, false, &entry);
    80201daa:	fd840693          	addi	a3,s0,-40
    80201dae:	4601                	li	a2,0
    80201db0:	00000097          	auipc	ra,0x0
    80201db4:	f14080e7          	jalr	-236(ra) # 80201cc4 <pageWalk>
    if (entry == NULL || !(*entry & PTE_VALID)) {
    80201db8:	fd843783          	ld	a5,-40(s0)
    80201dbc:	c38d                	beqz	a5,80201dde <pageLookup+0x40>
    80201dbe:	6388                	ld	a0,0(a5)
    80201dc0:	8905                	andi	a0,a0,1
    80201dc2:	c909                	beqz	a0,80201dd4 <pageLookup+0x36>
    if (pte) {
    80201dc4:	c091                	beqz	s1,80201dc8 <pageLookup+0x2a>
        *pte = entry;
    80201dc6:	e09c                	sd	a5,0(s1)
    return PTE2PA(*entry);
    80201dc8:	6388                	ld	a0,0(a5)
    80201dca:	050a                	slli	a0,a0,0x2
    80201dcc:	fff007b7          	lui	a5,0xfff00
    80201dd0:	83a1                	srli	a5,a5,0x8
    80201dd2:	8d7d                	and	a0,a0,a5
}
    80201dd4:	70a2                	ld	ra,40(sp)
    80201dd6:	7402                	ld	s0,32(sp)
    80201dd8:	64e2                	ld	s1,24(sp)
    80201dda:	6145                	addi	sp,sp,48
    80201ddc:	8082                	ret
        return 0;
    80201dde:	4501                	li	a0,0
    80201de0:	bfd5                	j	80201dd4 <pageLookup+0x36>

0000000080201de2 <pageFree>:
    if (page->ref > 0) {
    80201de2:	491c                	lw	a5,16(a0)
    80201de4:	c391                	beqz	a5,80201de8 <pageFree+0x6>
    80201de6:	8082                	ret
void pageFree(PhysicalPage *page) {
    80201de8:	1101                	addi	sp,sp,-32
    80201dea:	ec06                	sd	ra,24(sp)
    80201dec:	e822                	sd	s0,16(sp)
    80201dee:	e426                	sd	s1,8(sp)
    80201df0:	1000                	addi	s0,sp,32
    80201df2:	84aa                	mv	s1,a0
        acquireLock(&pageListLock);
    80201df4:	00280517          	auipc	a0,0x280
    80201df8:	68c50513          	addi	a0,a0,1676 # 80482480 <pageListLock>
    80201dfc:	00004097          	auipc	ra,0x4
    80201e00:	cb2080e7          	jalr	-846(ra) # 80205aae <acquireLock>
        LIST_INSERT_HEAD(&freePages, page, link);
    80201e04:	00280797          	auipc	a5,0x280
    80201e08:	6747b783          	ld	a5,1652(a5) # 80482478 <freePages>
    80201e0c:	e09c                	sd	a5,0(s1)
    80201e0e:	c391                	beqz	a5,80201e12 <pageFree+0x30>
    80201e10:	e784                	sd	s1,8(a5)
    80201e12:	00280797          	auipc	a5,0x280
    80201e16:	66678793          	addi	a5,a5,1638 # 80482478 <freePages>
    80201e1a:	e384                	sd	s1,0(a5)
    80201e1c:	e49c                	sd	a5,8(s1)
        releaseLock(&pageListLock);
    80201e1e:	00280517          	auipc	a0,0x280
    80201e22:	66250513          	addi	a0,a0,1634 # 80482480 <pageListLock>
    80201e26:	00004097          	auipc	ra,0x4
    80201e2a:	d04080e7          	jalr	-764(ra) # 80205b2a <releaseLock>
}
    80201e2e:	60e2                	ld	ra,24(sp)
    80201e30:	6442                	ld	s0,16(sp)
    80201e32:	64a2                	ld	s1,8(sp)
    80201e34:	6105                	addi	sp,sp,32
    80201e36:	8082                	ret

0000000080201e38 <pageRemove>:
int pageRemove(u64 *pgdir, u64 va) {
    80201e38:	7179                	addi	sp,sp,-48
    80201e3a:	f406                	sd	ra,40(sp)
    80201e3c:	f022                	sd	s0,32(sp)
    80201e3e:	ec26                	sd	s1,24(sp)
    80201e40:	1800                	addi	s0,sp,48
    u64 pa = pageLookup(pgdir, va, &pte);
    80201e42:	fd840613          	addi	a2,s0,-40
    80201e46:	00000097          	auipc	ra,0x0
    80201e4a:	f58080e7          	jalr	-168(ra) # 80201d9e <pageLookup>
    if (!pte) {
    80201e4e:	fd843483          	ld	s1,-40(s0)
    80201e52:	c0b9                	beqz	s1,80201e98 <pageRemove+0x60>
    if (pa < PHYSICAL_ADDRESS_BASE || pa >= PHYSICAL_MEMORY_TOP) {
    80201e54:	800007b7          	lui	a5,0x80000
    80201e58:	953e                	add	a0,a0,a5
    80201e5a:	080007b7          	lui	a5,0x8000
    80201e5e:	02f57f63          	bgeu	a0,a5,80201e9c <pageRemove+0x64>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80201e62:	8131                	srli	a0,a0,0xc
    return pages + ppn;
    80201e64:	00151793          	slli	a5,a0,0x1
    80201e68:	953e                	add	a0,a0,a5
    80201e6a:	050e                	slli	a0,a0,0x3
    80201e6c:	001c0797          	auipc	a5,0x1c0
    80201e70:	60c78793          	addi	a5,a5,1548 # 803c2478 <pages>
    80201e74:	953e                	add	a0,a0,a5
    page->ref--;
    80201e76:	491c                	lw	a5,16(a0)
    80201e78:	37fd                	addiw	a5,a5,-1
    80201e7a:	c91c                	sw	a5,16(a0)
    pageFree(page);
    80201e7c:	00000097          	auipc	ra,0x0
    80201e80:	f66080e7          	jalr	-154(ra) # 80201de2 <pageFree>
    *pte = 0;
    80201e84:	0004b023          	sd	zero,0(s1)
	asm volatile("sfence.vma");
    80201e88:	12000073          	sfence.vma
    return 0;
    80201e8c:	4501                	li	a0,0
}
    80201e8e:	70a2                	ld	ra,40(sp)
    80201e90:	7402                	ld	s0,32(sp)
    80201e92:	64e2                	ld	s1,24(sp)
    80201e94:	6145                	addi	sp,sp,48
    80201e96:	8082                	ret
        return -1;
    80201e98:	557d                	li	a0,-1
    80201e9a:	bfd5                	j	80201e8e <pageRemove+0x56>
        return -1;
    80201e9c:	557d                	li	a0,-1
    80201e9e:	bfc5                	j	80201e8e <pageRemove+0x56>

0000000080201ea0 <pgdirFree>:

void pgdirFree(u64* pgdir) {
    80201ea0:	7119                	addi	sp,sp,-128
    80201ea2:	fc86                	sd	ra,120(sp)
    80201ea4:	f8a2                	sd	s0,112(sp)
    80201ea6:	f4a6                	sd	s1,104(sp)
    80201ea8:	f0ca                	sd	s2,96(sp)
    80201eaa:	ecce                	sd	s3,88(sp)
    80201eac:	e8d2                	sd	s4,80(sp)
    80201eae:	e4d6                	sd	s5,72(sp)
    80201eb0:	e0da                	sd	s6,64(sp)
    80201eb2:	fc5e                	sd	s7,56(sp)
    80201eb4:	f862                	sd	s8,48(sp)
    80201eb6:	f466                	sd	s9,40(sp)
    80201eb8:	f06a                	sd	s10,32(sp)
    80201eba:	ec6e                	sd	s11,24(sp)
    80201ebc:	0100                	addi	s0,sp,128
    80201ebe:	8b2a                	mv	s6,a0
   // printf("jaoeifherigh   %lx\n", (u64)pgdir);
    u64 i, j, k;
    u64* pageTable;
    for (i = 0; i < PTE2PT; i++) {
    80201ec0:	6785                	lui	a5,0x1
    80201ec2:	97aa                	add	a5,a5,a0
    80201ec4:	f8f43023          	sd	a5,-128(s0)
void pgdirFree(u64* pgdir) {
    80201ec8:	f8a43423          	sd	a0,-120(s0)
    80201ecc:	4d81                	li	s11,0
        if (!(pgdir[i] & PTE_VALID))
            continue;
        pageTable = pgdir + i;
        u64* pa = (u64*) PTE2PA(*pageTable);
    80201ece:	fff00d37          	lui	s10,0xfff00
    80201ed2:	008d5d13          	srli	s10,s10,0x8
        for (j = 0; j < PTE2PT; j++) {
            if (!(pa[j] & PTE_VALID)) 
                continue;
            pageTable = (u64*) pa + j;
            u64* pa2 = (u64*) PTE2PA(*pageTable);
            for (k = 0; k < PTE2PT; k++) {
    80201ed6:	6985                	lui	s3,0x1
    80201ed8:	00200a37          	lui	s4,0x200
    80201edc:	a041                	j	80201f5c <pgdirFree+0xbc>
    80201ede:	0921                	addi	s2,s2,8
    80201ee0:	94ce                	add	s1,s1,s3
    80201ee2:	01448e63          	beq	s1,s4,80201efe <pgdirFree+0x5e>
                if (!(pa2[k] & PTE_VALID)) 
    80201ee6:	00093783          	ld	a5,0(s2)
    80201eea:	8b85                	andi	a5,a5,1
    80201eec:	dbed                	beqz	a5,80201ede <pgdirFree+0x3e>
                    continue;
                u64 addr = (i << 30) | (j << 21) | (k << 12);
                pageRemove(pgdir, addr);
    80201eee:	009ae5b3          	or	a1,s5,s1
    80201ef2:	855a                	mv	a0,s6
    80201ef4:	00000097          	auipc	ra,0x0
    80201ef8:	f44080e7          	jalr	-188(ra) # 80201e38 <pageRemove>
    80201efc:	b7cd                	j	80201ede <pgdirFree+0x3e>
            }
            pa2[j] = 0;
    80201efe:	018b87b3          	add	a5,s7,s8
    80201f02:	0007b023          	sd	zero,0(a5) # 1000 <_start-0x801ff000>
            paDecreaseRef((u64) pa2);
    80201f06:	855e                	mv	a0,s7
    80201f08:	00000097          	auipc	ra,0x0
    80201f0c:	bd8080e7          	jalr	-1064(ra) # 80201ae0 <paDecreaseRef>
        for (j = 0; j < PTE2PT; j++) {
    80201f10:	0c21                	addi	s8,s8,8
    80201f12:	033c0263          	beq	s8,s3,80201f36 <pgdirFree+0x96>
            if (!(pa[j] & PTE_VALID)) 
    80201f16:	018c87b3          	add	a5,s9,s8
    80201f1a:	639c                	ld	a5,0(a5)
    80201f1c:	0017f713          	andi	a4,a5,1
    80201f20:	db65                	beqz	a4,80201f10 <pgdirFree+0x70>
            u64* pa2 = (u64*) PTE2PA(*pageTable);
    80201f22:	078a                	slli	a5,a5,0x2
    80201f24:	01a7fbb3          	and	s7,a5,s10
                u64 addr = (i << 30) | (j << 21) | (k << 12);
    80201f28:	012c1a93          	slli	s5,s8,0x12
    80201f2c:	01baeab3          	or	s5,s5,s11
    80201f30:	895e                	mv	s2,s7
    80201f32:	4481                	li	s1,0
    80201f34:	bf4d                	j	80201ee6 <pgdirFree+0x46>
        }
        paDecreaseRef((u64) pa);
    80201f36:	8566                	mv	a0,s9
    80201f38:	00000097          	auipc	ra,0x0
    80201f3c:	ba8080e7          	jalr	-1112(ra) # 80201ae0 <paDecreaseRef>
    for (i = 0; i < PTE2PT; i++) {
    80201f40:	f8843783          	ld	a5,-120(s0)
    80201f44:	07a1                	addi	a5,a5,8
    80201f46:	873e                	mv	a4,a5
    80201f48:	f8f43423          	sd	a5,-120(s0)
    80201f4c:	400007b7          	lui	a5,0x40000
    80201f50:	9dbe                	add	s11,s11,a5
    80201f52:	87ba                	mv	a5,a4
    80201f54:	f8043703          	ld	a4,-128(s0)
    80201f58:	00e78d63          	beq	a5,a4,80201f72 <pgdirFree+0xd2>
        if (!(pgdir[i] & PTE_VALID))
    80201f5c:	f8843783          	ld	a5,-120(s0)
    80201f60:	639c                	ld	a5,0(a5)
    80201f62:	0017f713          	andi	a4,a5,1
    80201f66:	df69                	beqz	a4,80201f40 <pgdirFree+0xa0>
        u64* pa = (u64*) PTE2PA(*pageTable);
    80201f68:	078a                	slli	a5,a5,0x2
    80201f6a:	01a7fcb3          	and	s9,a5,s10
    80201f6e:	4c01                	li	s8,0
    80201f70:	b75d                	j	80201f16 <pgdirFree+0x76>
    }
    paDecreaseRef((u64) pgdir);
    80201f72:	855a                	mv	a0,s6
    80201f74:	00000097          	auipc	ra,0x0
    80201f78:	b6c080e7          	jalr	-1172(ra) # 80201ae0 <paDecreaseRef>
}
    80201f7c:	70e6                	ld	ra,120(sp)
    80201f7e:	7446                	ld	s0,112(sp)
    80201f80:	74a6                	ld	s1,104(sp)
    80201f82:	7906                	ld	s2,96(sp)
    80201f84:	69e6                	ld	s3,88(sp)
    80201f86:	6a46                	ld	s4,80(sp)
    80201f88:	6aa6                	ld	s5,72(sp)
    80201f8a:	6b06                	ld	s6,64(sp)
    80201f8c:	7be2                	ld	s7,56(sp)
    80201f8e:	7c42                	ld	s8,48(sp)
    80201f90:	7ca2                	ld	s9,40(sp)
    80201f92:	7d02                	ld	s10,32(sp)
    80201f94:	6de2                	ld	s11,24(sp)
    80201f96:	6109                	addi	sp,sp,128
    80201f98:	8082                	ret

0000000080201f9a <pageInsert>:

int pageInsert(u64 *pgdir, u64 va, u64 pa, u64 perm) {
    80201f9a:	7139                	addi	sp,sp,-64
    80201f9c:	fc06                	sd	ra,56(sp)
    80201f9e:	f822                	sd	s0,48(sp)
    80201fa0:	f426                	sd	s1,40(sp)
    80201fa2:	f04a                	sd	s2,32(sp)
    80201fa4:	ec4e                	sd	s3,24(sp)
    80201fa6:	e852                	sd	s4,16(sp)
    80201fa8:	0080                	addi	s0,sp,64
    80201faa:	89aa                	mv	s3,a0
    80201fac:	84b2                	mv	s1,a2
    80201fae:	8a36                	mv	s4,a3
    u64 *pte;
    va = DOWN_ALIGN(va, PAGE_SIZE);
    80201fb0:	77fd                	lui	a5,0xfffff
    80201fb2:	00f5f933          	and	s2,a1,a5
    pa = DOWN_ALIGN(pa, PAGE_SIZE);
    perm |= PTE_ACCESSED | PTE_DIRTY;
    int ret = pageWalk(pgdir, va, false, &pte);
    80201fb6:	fc840693          	addi	a3,s0,-56
    80201fba:	4601                	li	a2,0
    80201fbc:	85ca                	mv	a1,s2
    80201fbe:	00000097          	auipc	ra,0x0
    80201fc2:	d06080e7          	jalr	-762(ra) # 80201cc4 <pageWalk>
    if (ret < 0) {
    80201fc6:	06054663          	bltz	a0,80202032 <pageInsert+0x98>
        return ret;
    }
    if (pte != NULL && (*pte & PTE_VALID)) {
    80201fca:	fc843783          	ld	a5,-56(s0)
    80201fce:	c781                	beqz	a5,80201fd6 <pageInsert+0x3c>
    80201fd0:	639c                	ld	a5,0(a5)
    80201fd2:	8b85                	andi	a5,a5,1
    80201fd4:	e7bd                	bnez	a5,80202042 <pageInsert+0xa8>
        pageRemove(pgdir, va);
    }
    ret = pageWalk(pgdir, va, true, &pte);
    80201fd6:	fc840693          	addi	a3,s0,-56
    80201fda:	4605                	li	a2,1
    80201fdc:	85ca                	mv	a1,s2
    80201fde:	854e                	mv	a0,s3
    80201fe0:	00000097          	auipc	ra,0x0
    80201fe4:	ce4080e7          	jalr	-796(ra) # 80201cc4 <pageWalk>
    if (ret < 0) {
    80201fe8:	04054563          	bltz	a0,80202032 <pageInsert+0x98>
    pa = DOWN_ALIGN(pa, PAGE_SIZE);
    80201fec:	77fd                	lui	a5,0xfffff
    80201fee:	00f4f633          	and	a2,s1,a5
        return ret;
    }
    *pte = PA2PTE(pa) | perm | PTE_VALID;
    80201ff2:	00265793          	srli	a5,a2,0x2
    80201ff6:	0147e7b3          	or	a5,a5,s4
    80201ffa:	0c17e793          	ori	a5,a5,193
    80201ffe:	fc843703          	ld	a4,-56(s0)
    80202002:	e31c                	sd	a5,0(a4)
    if (pa >= PHYSICAL_ADDRESS_BASE && pa < PHYSICAL_MEMORY_TOP)
    80202004:	800007b7          	lui	a5,0x80000
    80202008:	963e                	add	a2,a2,a5
    8020200a:	080007b7          	lui	a5,0x8000
    8020200e:	00f67f63          	bgeu	a2,a5,8020202c <pageInsert+0x92>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80202012:	00c65793          	srli	a5,a2,0xc
    return pages + ppn;
    80202016:	822d                	srli	a2,a2,0xb
    80202018:	963e                	add	a2,a2,a5
    8020201a:	060e                	slli	a2,a2,0x3
    8020201c:	001c0797          	auipc	a5,0x1c0
    80202020:	45c78793          	addi	a5,a5,1116 # 803c2478 <pages>
    80202024:	963e                	add	a2,a2,a5
        pa2page(pa)->ref++;
    80202026:	4a1c                	lw	a5,16(a2)
    80202028:	2785                	addiw	a5,a5,1
    8020202a:	ca1c                	sw	a5,16(a2)
    8020202c:	12000073          	sfence.vma
    sfence_vma();
    return 0;
    80202030:	4501                	li	a0,0
}
    80202032:	70e2                	ld	ra,56(sp)
    80202034:	7442                	ld	s0,48(sp)
    80202036:	74a2                	ld	s1,40(sp)
    80202038:	7902                	ld	s2,32(sp)
    8020203a:	69e2                	ld	s3,24(sp)
    8020203c:	6a42                	ld	s4,16(sp)
    8020203e:	6121                	addi	sp,sp,64
    80202040:	8082                	ret
        pageRemove(pgdir, va);
    80202042:	85ca                	mv	a1,s2
    80202044:	854e                	mv	a0,s3
    80202046:	00000097          	auipc	ra,0x0
    8020204a:	df2080e7          	jalr	-526(ra) # 80201e38 <pageRemove>
    8020204e:	b761                	j	80201fd6 <pageInsert+0x3c>

0000000080202050 <allocPgdir>:

int allocPgdir(PhysicalPage **page) {
    80202050:	1101                	addi	sp,sp,-32
    80202052:	ec06                	sd	ra,24(sp)
    80202054:	e822                	sd	s0,16(sp)
    80202056:	e426                	sd	s1,8(sp)
    80202058:	1000                	addi	s0,sp,32
    8020205a:	84aa                	mv	s1,a0
    int r;
    if ((r = pageAlloc(page)) < 0) {
    8020205c:	00000097          	auipc	ra,0x0
    80202060:	bb2080e7          	jalr	-1102(ra) # 80201c0e <pageAlloc>
    80202064:	00054763          	bltz	a0,80202072 <allocPgdir+0x22>
        return r;
    }
    (*page)->ref++;
    80202068:	6098                	ld	a4,0(s1)
    8020206a:	4b1c                	lw	a5,16(a4)
    8020206c:	2785                	addiw	a5,a5,1
    8020206e:	cb1c                	sw	a5,16(a4)
    return 0;
    80202070:	4501                	li	a0,0
}
    80202072:	60e2                	ld	ra,24(sp)
    80202074:	6442                	ld	s0,16(sp)
    80202076:	64a2                	ld	s1,8(sp)
    80202078:	6105                	addi	sp,sp,32
    8020207a:	8082                	ret

000000008020207c <pageout>:

void pageout(u64 *pgdir, u64 badAddr) {
    8020207c:	7179                	addi	sp,sp,-48
    8020207e:	f406                	sd	ra,40(sp)
    80202080:	f022                	sd	s0,32(sp)
    80202082:	ec26                	sd	s1,24(sp)
    80202084:	e84a                	sd	s2,16(sp)
    80202086:	1800                	addi	s0,sp,48
    if (badAddr <= PAGE_SIZE) {
    80202088:	6785                	lui	a5,0x1
    8020208a:	06b7f863          	bgeu	a5,a1,802020fa <pageout+0x7e>
    8020208e:	892a                	mv	s2,a0
    80202090:	84ae                	mv	s1,a1
        panic("^^^^^^^^^^TOO LOW^^^^^^^^^^^\n");
    }
    printf("[Page out]pageout at %lx\n", badAddr);
    80202092:	0000a517          	auipc	a0,0xa
    80202096:	4be50513          	addi	a0,a0,1214 # 8020c550 <textEnd+0x550>
    8020209a:	fffff097          	auipc	ra,0xfffff
    8020209e:	a26080e7          	jalr	-1498(ra) # 80200ac0 <printf>
    PhysicalPage *page;
    if (pageAlloc(&page) < 0) {
    802020a2:	fd840513          	addi	a0,s0,-40
    802020a6:	00000097          	auipc	ra,0x0
    802020aa:	b68080e7          	jalr	-1176(ra) # 80201c0e <pageAlloc>
    802020ae:	06054863          	bltz	a0,8020211e <pageout+0xa2>
    return page - pages;
    802020b2:	fd843783          	ld	a5,-40(s0)
    802020b6:	001c0717          	auipc	a4,0x1c0
    802020ba:	3c270713          	addi	a4,a4,962 # 803c2478 <pages>
    802020be:	8f99                	sub	a5,a5,a4
    802020c0:	878d                	srai	a5,a5,0x3
    802020c2:	0000b717          	auipc	a4,0xb
    802020c6:	21673703          	ld	a4,534(a4) # 8020d2d8 <__func__.0+0x8>
    802020ca:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802020ce:	00c7979b          	slliw	a5,a5,0xc
    802020d2:	1782                	slli	a5,a5,0x20
    802020d4:	9381                	srli	a5,a5,0x20
        panic("");
    }
    if (pageInsert(pgdir, badAddr, page2pa(page), 
    802020d6:	46d9                	li	a3,22
    802020d8:	4605                	li	a2,1
    802020da:	067e                	slli	a2,a2,0x1f
    802020dc:	963e                	add	a2,a2,a5
    802020de:	85a6                	mv	a1,s1
    802020e0:	854a                	mv	a0,s2
    802020e2:	00000097          	auipc	ra,0x0
    802020e6:	eb8080e7          	jalr	-328(ra) # 80201f9a <pageInsert>
    802020ea:	04054c63          	bltz	a0,80202142 <pageout+0xc6>
        PTE_USER | PTE_READ | PTE_WRITE) < 0) {
        panic("");
    }
}
    802020ee:	70a2                	ld	ra,40(sp)
    802020f0:	7402                	ld	s0,32(sp)
    802020f2:	64e2                	ld	s1,24(sp)
    802020f4:	6942                	ld	s2,16(sp)
    802020f6:	6145                	addi	sp,sp,48
    802020f8:	8082                	ret
        panic("^^^^^^^^^^TOO LOW^^^^^^^^^^^\n");
    802020fa:	0000a697          	auipc	a3,0xa
    802020fe:	43668693          	addi	a3,a3,1078 # 8020c530 <textEnd+0x530>
    80202102:	0000b617          	auipc	a2,0xb
    80202106:	14660613          	addi	a2,a2,326 # 8020d248 <__func__.2>
    8020210a:	0ba00593          	li	a1,186
    8020210e:	0000a517          	auipc	a0,0xa
    80202112:	3da50513          	addi	a0,a0,986 # 8020c4e8 <textEnd+0x4e8>
    80202116:	fffff097          	auipc	ra,0xfffff
    8020211a:	a36080e7          	jalr	-1482(ra) # 80200b4c <_panic_>
        panic("");
    8020211e:	0000a697          	auipc	a3,0xa
    80202122:	5b268693          	addi	a3,a3,1458 # 8020c6d0 <__func__.1+0x100>
    80202126:	0000b617          	auipc	a2,0xb
    8020212a:	12260613          	addi	a2,a2,290 # 8020d248 <__func__.2>
    8020212e:	0bf00593          	li	a1,191
    80202132:	0000a517          	auipc	a0,0xa
    80202136:	3b650513          	addi	a0,a0,950 # 8020c4e8 <textEnd+0x4e8>
    8020213a:	fffff097          	auipc	ra,0xfffff
    8020213e:	a12080e7          	jalr	-1518(ra) # 80200b4c <_panic_>
        panic("");
    80202142:	0000a697          	auipc	a3,0xa
    80202146:	58e68693          	addi	a3,a3,1422 # 8020c6d0 <__func__.1+0x100>
    8020214a:	0000b617          	auipc	a2,0xb
    8020214e:	0fe60613          	addi	a2,a2,254 # 8020d248 <__func__.2>
    80202152:	0c300593          	li	a1,195
    80202156:	0000a517          	auipc	a0,0xa
    8020215a:	39250513          	addi	a0,a0,914 # 8020c4e8 <textEnd+0x4e8>
    8020215e:	fffff097          	auipc	ra,0xfffff
    80202162:	9ee080e7          	jalr	-1554(ra) # 80200b4c <_panic_>

0000000080202166 <cowHandler>:

u8 cowBuffer[PAGE_SIZE];
void cowHandler(u64 *pgdir, u64 badAddr) {
    80202166:	7139                	addi	sp,sp,-64
    80202168:	fc06                	sd	ra,56(sp)
    8020216a:	f822                	sd	s0,48(sp)
    8020216c:	f426                	sd	s1,40(sp)
    8020216e:	f04a                	sd	s2,32(sp)
    80202170:	ec4e                	sd	s3,24(sp)
    80202172:	e852                	sd	s4,16(sp)
    80202174:	0080                	addi	s0,sp,64
    80202176:	892a                	mv	s2,a0
    80202178:	89ae                	mv	s3,a1
    u64 pa;
    u64 *pte;
    pa = pageLookup(pgdir, badAddr, &pte);
    8020217a:	fc840613          	addi	a2,s0,-56
    8020217e:	00000097          	auipc	ra,0x0
    80202182:	c20080e7          	jalr	-992(ra) # 80201d9e <pageLookup>
    // printf("[COW] %x to cow %lx %lx\n", myproc()->id, badAddr, pa);
    if (!(*pte & PTE_COW)) {
    80202186:	fc843783          	ld	a5,-56(s0)
    8020218a:	639c                	ld	a5,0(a5)
    8020218c:	1007f793          	andi	a5,a5,256
    80202190:	c3e1                	beqz	a5,80202250 <cowHandler+0xea>
        printf("access denied");
        return;
    }
    PhysicalPage *page;
    int r = pageAlloc(&page);
    80202192:	fc040513          	addi	a0,s0,-64
    80202196:	00000097          	auipc	ra,0x0
    8020219a:	a78080e7          	jalr	-1416(ra) # 80201c0e <pageAlloc>
    if (r < 0) {
    8020219e:	0c054263          	bltz	a0,80202262 <cowHandler+0xfc>
        panic("cow handler error");
        return;
    }
    acquireLock(&cowBufferLock);
    802021a2:	00280a17          	auipc	s4,0x280
    802021a6:	2f6a0a13          	addi	s4,s4,758 # 80482498 <cowBufferLock>
    802021aa:	8552                	mv	a0,s4
    802021ac:	00004097          	auipc	ra,0x4
    802021b0:	902080e7          	jalr	-1790(ra) # 80205aae <acquireLock>
    pa = pageLookup(pgdir, badAddr, &pte);
    802021b4:	fc840613          	addi	a2,s0,-56
    802021b8:	85ce                	mv	a1,s3
    802021ba:	854a                	mv	a0,s2
    802021bc:	00000097          	auipc	ra,0x0
    802021c0:	be2080e7          	jalr	-1054(ra) # 80201d9e <pageLookup>
    bcopy((void *)pa, (void*)cowBuffer, PAGE_SIZE);
    802021c4:	6605                	lui	a2,0x1
    802021c6:	00280597          	auipc	a1,0x280
    802021ca:	2ea58593          	addi	a1,a1,746 # 804824b0 <cowBuffer>
    802021ce:	00000097          	auipc	ra,0x0
    802021d2:	880080e7          	jalr	-1920(ra) # 80201a4e <bcopy>
    return page - pages;
    802021d6:	fc043483          	ld	s1,-64(s0)
    802021da:	001c0797          	auipc	a5,0x1c0
    802021de:	29e78793          	addi	a5,a5,670 # 803c2478 <pages>
    802021e2:	8c9d                	sub	s1,s1,a5
    802021e4:	848d                	srai	s1,s1,0x3
    802021e6:	0000b797          	auipc	a5,0xb
    802021ea:	0f27b783          	ld	a5,242(a5) # 8020d2d8 <__func__.0+0x8>
    802021ee:	02f484b3          	mul	s1,s1,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802021f2:	00c4949b          	slliw	s1,s1,0xc
    802021f6:	1482                	slli	s1,s1,0x20
    802021f8:	9081                	srli	s1,s1,0x20
    802021fa:	4785                	li	a5,1
    802021fc:	07fe                	slli	a5,a5,0x1f
    802021fe:	94be                	add	s1,s1,a5
    pageInsert(pgdir, badAddr, page2pa(page), (PTE2PERM(*pte) | PTE_WRITE) & ~PTE_COW);
    80202200:	fc843783          	ld	a5,-56(s0)
    80202204:	6394                	ld	a3,0(a5)
    80202206:	57fd                	li	a5,-1
    80202208:	17da                	slli	a5,a5,0x36
    8020220a:	2fb78793          	addi	a5,a5,763
    8020220e:	8efd                	and	a3,a3,a5
    80202210:	0046e693          	ori	a3,a3,4
    80202214:	8626                	mv	a2,s1
    80202216:	85ce                	mv	a1,s3
    80202218:	854a                	mv	a0,s2
    8020221a:	00000097          	auipc	ra,0x0
    8020221e:	d80080e7          	jalr	-640(ra) # 80201f9a <pageInsert>
    bcopy((void*) cowBuffer, (void*) page2pa(page), PAGE_SIZE);
    80202222:	6605                	lui	a2,0x1
    80202224:	85a6                	mv	a1,s1
    80202226:	00280517          	auipc	a0,0x280
    8020222a:	28a50513          	addi	a0,a0,650 # 804824b0 <cowBuffer>
    8020222e:	00000097          	auipc	ra,0x0
    80202232:	820080e7          	jalr	-2016(ra) # 80201a4e <bcopy>
    releaseLock(&cowBufferLock);
    80202236:	8552                	mv	a0,s4
    80202238:	00004097          	auipc	ra,0x4
    8020223c:	8f2080e7          	jalr	-1806(ra) # 80205b2a <releaseLock>
}
    80202240:	70e2                	ld	ra,56(sp)
    80202242:	7442                	ld	s0,48(sp)
    80202244:	74a2                	ld	s1,40(sp)
    80202246:	7902                	ld	s2,32(sp)
    80202248:	69e2                	ld	s3,24(sp)
    8020224a:	6a42                	ld	s4,16(sp)
    8020224c:	6121                	addi	sp,sp,64
    8020224e:	8082                	ret
        printf("access denied");
    80202250:	0000a517          	auipc	a0,0xa
    80202254:	32050513          	addi	a0,a0,800 # 8020c570 <textEnd+0x570>
    80202258:	fffff097          	auipc	ra,0xfffff
    8020225c:	868080e7          	jalr	-1944(ra) # 80200ac0 <printf>
        return;
    80202260:	b7c5                	j	80202240 <cowHandler+0xda>
        panic("cow handler error");
    80202262:	0000a697          	auipc	a3,0xa
    80202266:	31e68693          	addi	a3,a3,798 # 8020c580 <textEnd+0x580>
    8020226a:	0000a617          	auipc	a2,0xa
    8020226e:	36660613          	addi	a2,a2,870 # 8020c5d0 <__func__.1>
    80202272:	0d400593          	li	a1,212
    80202276:	0000a517          	auipc	a0,0xa
    8020227a:	27250513          	addi	a0,a0,626 # 8020c4e8 <textEnd+0x4e8>
    8020227e:	fffff097          	auipc	ra,0xfffff
    80202282:	8ce080e7          	jalr	-1842(ra) # 80200b4c <_panic_>

0000000080202286 <vir2phy>:
// Can only be used to look up user pages.
u64 vir2phy(u64* pagetable, u64 va, int* cow) {
    u64* pte;
    u64 pa;

    if (va >= MAXVA)
    80202286:	57fd                	li	a5,-1
    80202288:	83e9                	srli	a5,a5,0x1a
    8020228a:	00b7f463          	bgeu	a5,a1,80202292 <vir2phy+0xc>
        return NULL;
    8020228e:	4501                	li	a0,0
        return NULL;
    if (cow)
        *cow = (*pte & PTE_COW) > 0;
    pa = PTE2PA(*pte) + (va&0xfff);
    return pa;
}
    80202290:	8082                	ret
u64 vir2phy(u64* pagetable, u64 va, int* cow) {
    80202292:	7179                	addi	sp,sp,-48
    80202294:	f406                	sd	ra,40(sp)
    80202296:	f022                	sd	s0,32(sp)
    80202298:	ec26                	sd	s1,24(sp)
    8020229a:	e84a                	sd	s2,16(sp)
    8020229c:	1800                	addi	s0,sp,48
    8020229e:	84ae                	mv	s1,a1
    802022a0:	8932                	mv	s2,a2
    int ret = pageWalk(pagetable, va, 0, &pte);
    802022a2:	fd840693          	addi	a3,s0,-40
    802022a6:	4601                	li	a2,0
    802022a8:	00000097          	auipc	ra,0x0
    802022ac:	a1c080e7          	jalr	-1508(ra) # 80201cc4 <pageWalk>
    if (ret < 0) {
    802022b0:	02054263          	bltz	a0,802022d4 <vir2phy+0x4e>
    if (pte == 0)
    802022b4:	fd843783          	ld	a5,-40(s0)
    802022b8:	c3a5                	beqz	a5,80202318 <vir2phy+0x92>
    if ((*pte & PTE_VALID) == 0)
    802022ba:	6398                	ld	a4,0(a5)
    if ((*pte & PTE_USER) == 0)
    802022bc:	01177613          	andi	a2,a4,17
    802022c0:	46c5                	li	a3,17
        return NULL;
    802022c2:	4501                	li	a0,0
    if ((*pte & PTE_USER) == 0)
    802022c4:	02d60a63          	beq	a2,a3,802022f8 <vir2phy+0x72>
}
    802022c8:	70a2                	ld	ra,40(sp)
    802022ca:	7402                	ld	s0,32(sp)
    802022cc:	64e2                	ld	s1,24(sp)
    802022ce:	6942                	ld	s2,16(sp)
    802022d0:	6145                	addi	sp,sp,48
    802022d2:	8082                	ret
        panic("pageWalk error in vir2phy function!");
    802022d4:	0000a697          	auipc	a3,0xa
    802022d8:	2c468693          	addi	a3,a3,708 # 8020c598 <textEnd+0x598>
    802022dc:	0000b617          	auipc	a2,0xb
    802022e0:	f6460613          	addi	a2,a2,-156 # 8020d240 <__func__.0>
    802022e4:	0eb00593          	li	a1,235
    802022e8:	0000a517          	auipc	a0,0xa
    802022ec:	20050513          	addi	a0,a0,512 # 8020c4e8 <textEnd+0x4e8>
    802022f0:	fffff097          	auipc	ra,0xfffff
    802022f4:	85c080e7          	jalr	-1956(ra) # 80200b4c <_panic_>
    if (cow)
    802022f8:	00090663          	beqz	s2,80202304 <vir2phy+0x7e>
        *cow = (*pte & PTE_COW) > 0;
    802022fc:	8321                	srli	a4,a4,0x8
    802022fe:	8b05                	andi	a4,a4,1
    80202300:	00e92023          	sw	a4,0(s2)
    pa = PTE2PA(*pte) + (va&0xfff);
    80202304:	6388                	ld	a0,0(a5)
    80202306:	050a                	slli	a0,a0,0x2
    80202308:	fff007b7          	lui	a5,0xfff00
    8020230c:	83a1                	srli	a5,a5,0x8
    8020230e:	8d7d                	and	a0,a0,a5
    80202310:	14d2                	slli	s1,s1,0x34
    80202312:	90d1                	srli	s1,s1,0x34
    80202314:	8d45                	or	a0,a0,s1
    return pa;
    80202316:	bf4d                	j	802022c8 <vir2phy+0x42>
        return NULL;
    80202318:	4501                	li	a0,0
    8020231a:	b77d                	j	802022c8 <vir2phy+0x42>

000000008020231c <copyin>:
// Return 0 on success, -1 on error.
int copyin(u64* pagetable, char* dst, u64 srcva, u64 len) {
    u64 n, va0, pa0;
    int cow;

    while (len > 0) {
    8020231c:	cab5                	beqz	a3,80202390 <copyin+0x74>
int copyin(u64* pagetable, char* dst, u64 srcva, u64 len) {
    8020231e:	711d                	addi	sp,sp,-96
    80202320:	ec86                	sd	ra,88(sp)
    80202322:	e8a2                	sd	s0,80(sp)
    80202324:	e4a6                	sd	s1,72(sp)
    80202326:	e0ca                	sd	s2,64(sp)
    80202328:	fc4e                	sd	s3,56(sp)
    8020232a:	f852                	sd	s4,48(sp)
    8020232c:	f456                	sd	s5,40(sp)
    8020232e:	f05a                	sd	s6,32(sp)
    80202330:	ec5e                	sd	s7,24(sp)
    80202332:	e862                	sd	s8,16(sp)
    80202334:	1080                	addi	s0,sp,96
    80202336:	8b2a                	mv	s6,a0
    80202338:	8a2e                	mv	s4,a1
    8020233a:	8c32                	mv	s8,a2
    8020233c:	89b6                	mv	s3,a3
        va0 = DOWN_ALIGN(srcva, PGSIZE);
    8020233e:	7bfd                	lui	s7,0xfffff
        pa0 = vir2phy(pagetable, va0, &cow);
        if (pa0 == NULL)
            return -1;
        n = PGSIZE - (srcva - va0);
    80202340:	6a85                	lui	s5,0x1
    80202342:	a01d                	j	80202368 <copyin+0x4c>
        if (n > len)
            n = len;
        memmove(dst, (void*)(pa0 + (srcva - va0)), n);
    80202344:	018505b3          	add	a1,a0,s8
    80202348:	0004861b          	sext.w	a2,s1
    8020234c:	412585b3          	sub	a1,a1,s2
    80202350:	8552                	mv	a0,s4
    80202352:	00004097          	auipc	ra,0x4
    80202356:	a6e080e7          	jalr	-1426(ra) # 80205dc0 <memmove>

        len -= n;
    8020235a:	409989b3          	sub	s3,s3,s1
        dst += n;
    8020235e:	9a26                	add	s4,s4,s1
        srcva = va0 + PGSIZE;
    80202360:	01590c33          	add	s8,s2,s5
    while (len > 0) {
    80202364:	02098463          	beqz	s3,8020238c <copyin+0x70>
        va0 = DOWN_ALIGN(srcva, PGSIZE);
    80202368:	017c7933          	and	s2,s8,s7
        pa0 = vir2phy(pagetable, va0, &cow);
    8020236c:	fac40613          	addi	a2,s0,-84
    80202370:	85ca                	mv	a1,s2
    80202372:	855a                	mv	a0,s6
    80202374:	00000097          	auipc	ra,0x0
    80202378:	f12080e7          	jalr	-238(ra) # 80202286 <vir2phy>
        if (pa0 == NULL)
    8020237c:	cd01                	beqz	a0,80202394 <copyin+0x78>
        n = PGSIZE - (srcva - va0);
    8020237e:	418904b3          	sub	s1,s2,s8
    80202382:	94d6                	add	s1,s1,s5
    80202384:	fc99f0e3          	bgeu	s3,s1,80202344 <copyin+0x28>
    80202388:	84ce                	mv	s1,s3
    8020238a:	bf6d                	j	80202344 <copyin+0x28>
    }
    return 0;
    8020238c:	4501                	li	a0,0
    8020238e:	a021                	j	80202396 <copyin+0x7a>
    80202390:	4501                	li	a0,0
}
    80202392:	8082                	ret
            return -1;
    80202394:	557d                	li	a0,-1
}
    80202396:	60e6                	ld	ra,88(sp)
    80202398:	6446                	ld	s0,80(sp)
    8020239a:	64a6                	ld	s1,72(sp)
    8020239c:	6906                	ld	s2,64(sp)
    8020239e:	79e2                	ld	s3,56(sp)
    802023a0:	7a42                	ld	s4,48(sp)
    802023a2:	7aa2                	ld	s5,40(sp)
    802023a4:	7b02                	ld	s6,32(sp)
    802023a6:	6be2                	ld	s7,24(sp)
    802023a8:	6c42                	ld	s8,16(sp)
    802023aa:	6125                	addi	sp,sp,96
    802023ac:	8082                	ret

00000000802023ae <copyout>:
// Return 0 on success, -1 on error.
int copyout(u64* pagetable, u64 dstva, char* src, u64 len) {
    u64 n, va0, pa0;
    int cow;

    while (len > 0) {
    802023ae:	cad9                	beqz	a3,80202444 <copyout+0x96>
int copyout(u64* pagetable, u64 dstva, char* src, u64 len) {
    802023b0:	711d                	addi	sp,sp,-96
    802023b2:	ec86                	sd	ra,88(sp)
    802023b4:	e8a2                	sd	s0,80(sp)
    802023b6:	e4a6                	sd	s1,72(sp)
    802023b8:	e0ca                	sd	s2,64(sp)
    802023ba:	fc4e                	sd	s3,56(sp)
    802023bc:	f852                	sd	s4,48(sp)
    802023be:	f456                	sd	s5,40(sp)
    802023c0:	f05a                	sd	s6,32(sp)
    802023c2:	ec5e                	sd	s7,24(sp)
    802023c4:	e862                	sd	s8,16(sp)
    802023c6:	1080                	addi	s0,sp,96
    802023c8:	8b2a                	mv	s6,a0
    802023ca:	89ae                	mv	s3,a1
    802023cc:	8ab2                	mv	s5,a2
    802023ce:	8a36                	mv	s4,a3
        va0 = DOWN_ALIGN(dstva, PGSIZE);
    802023d0:	7c7d                	lui	s8,0xfffff
        if (cow) {
            // printf("COW?\n");
            cowHandler(pagetable, va0);
        }
        pa0 = vir2phy(pagetable, va0, &cow);
        n = PGSIZE - (dstva - va0);
    802023d2:	6b85                	lui	s7,0x1
    802023d4:	a80d                	j	80202406 <copyout+0x58>
            cowHandler(pagetable, va0);
    802023d6:	85ca                	mv	a1,s2
    802023d8:	855a                	mv	a0,s6
    802023da:	00000097          	auipc	ra,0x0
    802023de:	d8c080e7          	jalr	-628(ra) # 80202166 <cowHandler>
    802023e2:	a081                	j	80202422 <copyout+0x74>
        if (n > len)
            n = len;
        memmove((void*)(pa0 + (dstva - va0)), src, n);
    802023e4:	412989b3          	sub	s3,s3,s2
    802023e8:	0004861b          	sext.w	a2,s1
    802023ec:	85d6                	mv	a1,s5
    802023ee:	954e                	add	a0,a0,s3
    802023f0:	00004097          	auipc	ra,0x4
    802023f4:	9d0080e7          	jalr	-1584(ra) # 80205dc0 <memmove>
        len -= n;
    802023f8:	409a0a33          	sub	s4,s4,s1
        src += n;
    802023fc:	9aa6                	add	s5,s5,s1
        dstva = va0 + PGSIZE;
    802023fe:	017909b3          	add	s3,s2,s7
    while (len > 0) {
    80202402:	020a0f63          	beqz	s4,80202440 <copyout+0x92>
        va0 = DOWN_ALIGN(dstva, PGSIZE);
    80202406:	0189f933          	and	s2,s3,s8
        pa0 = vir2phy(pagetable, va0, &cow);
    8020240a:	fac40613          	addi	a2,s0,-84
    8020240e:	85ca                	mv	a1,s2
    80202410:	855a                	mv	a0,s6
    80202412:	00000097          	auipc	ra,0x0
    80202416:	e74080e7          	jalr	-396(ra) # 80202286 <vir2phy>
        if (pa0 == NULL)
    8020241a:	c51d                	beqz	a0,80202448 <copyout+0x9a>
        if (cow) {
    8020241c:	fac42783          	lw	a5,-84(s0)
    80202420:	fbdd                	bnez	a5,802023d6 <copyout+0x28>
        pa0 = vir2phy(pagetable, va0, &cow);
    80202422:	fac40613          	addi	a2,s0,-84
    80202426:	85ca                	mv	a1,s2
    80202428:	855a                	mv	a0,s6
    8020242a:	00000097          	auipc	ra,0x0
    8020242e:	e5c080e7          	jalr	-420(ra) # 80202286 <vir2phy>
        n = PGSIZE - (dstva - va0);
    80202432:	413904b3          	sub	s1,s2,s3
    80202436:	94de                	add	s1,s1,s7
    80202438:	fa9a76e3          	bgeu	s4,s1,802023e4 <copyout+0x36>
    8020243c:	84d2                	mv	s1,s4
    8020243e:	b75d                	j	802023e4 <copyout+0x36>
    }
    return 0;
    80202440:	4501                	li	a0,0
    80202442:	a021                	j	8020244a <copyout+0x9c>
    80202444:	4501                	li	a0,0
}
    80202446:	8082                	ret
            return -1;
    80202448:	557d                	li	a0,-1
}
    8020244a:	60e6                	ld	ra,88(sp)
    8020244c:	6446                	ld	s0,80(sp)
    8020244e:	64a6                	ld	s1,72(sp)
    80202450:	6906                	ld	s2,64(sp)
    80202452:	79e2                	ld	s3,56(sp)
    80202454:	7a42                	ld	s4,48(sp)
    80202456:	7aa2                	ld	s5,40(sp)
    80202458:	7b02                	ld	s6,32(sp)
    8020245a:	6be2                	ld	s7,24(sp)
    8020245c:	6c42                	ld	s8,16(sp)
    8020245e:	6125                	addi	sp,sp,96
    80202460:	8082                	ret

0000000080202462 <growproc>:

int growproc(int n) {
    80202462:	1101                	addi	sp,sp,-32
    80202464:	ec06                	sd	ra,24(sp)
    80202466:	e822                	sd	s0,16(sp)
    80202468:	e426                	sd	s1,8(sp)
    8020246a:	1000                	addi	s0,sp,32
    8020246c:	84aa                	mv	s1,a0
    if (myproc()->heapBottom + n >= USER_HEAP_TOP)
    8020246e:	00000097          	auipc	ra,0x0
    80202472:	542080e7          	jalr	1346(ra) # 802029b0 <myproc>
    80202476:	5d053783          	ld	a5,1488(a0)
    8020247a:	97a6                	add	a5,a5,s1
    8020247c:	0000b717          	auipc	a4,0xb
    80202480:	e6473703          	ld	a4,-412(a4) # 8020d2e0 <__func__.0+0x10>
    80202484:	02f76163          	bltu	a4,a5,802024a6 <growproc+0x44>
        return -1;
    myproc()->heapBottom += n;
    80202488:	00000097          	auipc	ra,0x0
    8020248c:	528080e7          	jalr	1320(ra) # 802029b0 <myproc>
    80202490:	5d053783          	ld	a5,1488(a0)
    80202494:	97a6                	add	a5,a5,s1
    80202496:	5cf53823          	sd	a5,1488(a0)
    return 0;
    8020249a:	4501                	li	a0,0
}
    8020249c:	60e2                	ld	ra,24(sp)
    8020249e:	6442                	ld	s0,16(sp)
    802024a0:	64a2                	ld	s1,8(sp)
    802024a2:	6105                	addi	sp,sp,32
    802024a4:	8082                	ret
        return -1;
    802024a6:	557d                	li	a0,-1
    802024a8:	bfd5                	j	8020249c <growproc+0x3a>

00000000802024aa <sys_sbrk>:

u64 sys_sbrk(u32 len) {
    802024aa:	1101                	addi	sp,sp,-32
    802024ac:	ec06                	sd	ra,24(sp)
    802024ae:	e822                	sd	s0,16(sp)
    802024b0:	e426                	sd	s1,8(sp)
    802024b2:	e04a                	sd	s2,0(sp)
    802024b4:	1000                	addi	s0,sp,32
    802024b6:	84aa                	mv	s1,a0
    u64 addr = myproc()->heapBottom;
    802024b8:	00000097          	auipc	ra,0x0
    802024bc:	4f8080e7          	jalr	1272(ra) # 802029b0 <myproc>
    802024c0:	5d053903          	ld	s2,1488(a0)
    if (growproc(len) < 0)
    802024c4:	8526                	mv	a0,s1
    802024c6:	00000097          	auipc	ra,0x0
    802024ca:	f9c080e7          	jalr	-100(ra) # 80202462 <growproc>
    802024ce:	00054963          	bltz	a0,802024e0 <sys_sbrk+0x36>
        return -1;
    return addr;
    802024d2:	854a                	mv	a0,s2
    802024d4:	60e2                	ld	ra,24(sp)
    802024d6:	6442                	ld	s0,16(sp)
    802024d8:	64a2                	ld	s1,8(sp)
    802024da:	6902                	ld	s2,0(sp)
    802024dc:	6105                	addi	sp,sp,32
    802024de:	8082                	ret
        return -1;
    802024e0:	597d                	li	s2,-1
    802024e2:	bfc5                	j	802024d2 <sys_sbrk+0x28>

00000000802024e4 <loadElf>:
    u8 *ph_table = 0;
    u16 entry_cnt;
    u16 entry_size;
    int r;

    if (size < 4 || !is_elf_format(binary)) {
    802024e4:	478d                	li	a5,3
    802024e6:	0cb7d863          	bge	a5,a1,802025b6 <loadElf+0xd2>
    int (*map)(u64 va, u32 segmentSize, u8 *bin, u32 binSize, void *userData)) {
    802024ea:	711d                	addi	sp,sp,-96
    802024ec:	ec86                	sd	ra,88(sp)
    802024ee:	e8a2                	sd	s0,80(sp)
    802024f0:	e4a6                	sd	s1,72(sp)
    802024f2:	e0ca                	sd	s2,64(sp)
    802024f4:	fc4e                	sd	s3,56(sp)
    802024f6:	f852                	sd	s4,48(sp)
    802024f8:	f456                	sd	s5,40(sp)
    802024fa:	f05a                	sd	s6,32(sp)
    802024fc:	ec5e                	sd	s7,24(sp)
    802024fe:	e862                	sd	s8,16(sp)
    80202500:	e466                	sd	s9,8(sp)
    80202502:	1080                	addi	s0,sp,96
    80202504:	8b2a                	mv	s6,a0
    80202506:	8cb2                	mv	s9,a2
    80202508:	8bb6                	mv	s7,a3
    8020250a:	8c3a                	mv	s8,a4
int loadElf(u8 *binary, int size, u64 *entry, void *userData, 
    int (*map)(u64, u32, u8*, u32, void*));

inline bool is_elf_format(u8 *binary) {
    u8 *magic = ((Indent*) binary)->magic;
    if (magic[0] == ELF_MAGIC0 &&
    8020250c:	00054703          	lbu	a4,0(a0)
    80202510:	07f00793          	li	a5,127
        return -NOT_ELF_FILE;
    80202514:	5569                	li	a0,-6
    80202516:	08f71363          	bne	a4,a5,8020259c <loadElf+0xb8>
    8020251a:	001b4703          	lbu	a4,1(s6)
    8020251e:	04500793          	li	a5,69
    80202522:	06f71d63          	bne	a4,a5,8020259c <loadElf+0xb8>
        magic[1] == ELF_MAGIC1 &&
    80202526:	002b4703          	lbu	a4,2(s6)
    8020252a:	04c00793          	li	a5,76
    8020252e:	06f71763          	bne	a4,a5,8020259c <loadElf+0xb8>
    if (size < 4 || !is_elf_format(binary)) {
    80202532:	003b4703          	lbu	a4,3(s6)
    80202536:	04600793          	li	a5,70
    8020253a:	08f71063          	bne	a4,a5,802025ba <loadElf+0xd6>
    }

    ph_table = binary + ehdr->phoff;
    8020253e:	020b3903          	ld	s2,32(s6)
    80202542:	995a                	add	s2,s2,s6
    entry_cnt = ehdr->phnum;
    80202544:	038b5783          	lhu	a5,56(s6)
    entry_size = ehdr->phentsize;
    80202548:	036b5a83          	lhu	s5,54(s6)

    while (entry_cnt--) {
    8020254c:	fff7849b          	addiw	s1,a5,-1
    80202550:	14c2                	slli	s1,s1,0x30
    80202552:	90c1                	srli	s1,s1,0x30
    80202554:	cf9d                	beqz	a5,80202592 <loadElf+0xae>
        phdr = (Phdr*)ph_table;
        if (phdr->type == PT_LOAD) {
    80202556:	4a05                	li	s4,1
    while (entry_cnt--) {
    80202558:	69c1                	lui	s3,0x10
    8020255a:	19fd                	addi	s3,s3,-1
    8020255c:	a809                	j	8020256e <loadElf+0x8a>
            r = map(phdr->vaddr, phdr->memsz, binary + phdr->offset, phdr->filesz, userData);
            if (r < 0) {
                return r;
            }
        }
        ph_table += entry_size;
    8020255e:	9956                	add	s2,s2,s5
    while (entry_cnt--) {
    80202560:	34fd                	addiw	s1,s1,-1
    80202562:	14c2                	slli	s1,s1,0x30
    80202564:	90c1                	srli	s1,s1,0x30
    80202566:	0004879b          	sext.w	a5,s1
    8020256a:	03378463          	beq	a5,s3,80202592 <loadElf+0xae>
        if (phdr->type == PT_LOAD) {
    8020256e:	00092783          	lw	a5,0(s2)
    80202572:	ff4796e3          	bne	a5,s4,8020255e <loadElf+0x7a>
            r = map(phdr->vaddr, phdr->memsz, binary + phdr->offset, phdr->filesz, userData);
    80202576:	00893603          	ld	a2,8(s2)
    8020257a:	875e                	mv	a4,s7
    8020257c:	02092683          	lw	a3,32(s2)
    80202580:	965a                	add	a2,a2,s6
    80202582:	02892583          	lw	a1,40(s2)
    80202586:	01093503          	ld	a0,16(s2)
    8020258a:	9c02                	jalr	s8
            if (r < 0) {
    8020258c:	fc0559e3          	bgez	a0,8020255e <loadElf+0x7a>
    80202590:	a031                	j	8020259c <loadElf+0xb8>
    }
    
    *entry = ehdr->entry;
    80202592:	018b3783          	ld	a5,24(s6)
    80202596:	00fcb023          	sd	a5,0(s9)
    return 0;
    8020259a:	4501                	li	a0,0
    8020259c:	60e6                	ld	ra,88(sp)
    8020259e:	6446                	ld	s0,80(sp)
    802025a0:	64a6                	ld	s1,72(sp)
    802025a2:	6906                	ld	s2,64(sp)
    802025a4:	79e2                	ld	s3,56(sp)
    802025a6:	7a42                	ld	s4,48(sp)
    802025a8:	7aa2                	ld	s5,40(sp)
    802025aa:	7b02                	ld	s6,32(sp)
    802025ac:	6be2                	ld	s7,24(sp)
    802025ae:	6c42                	ld	s8,16(sp)
    802025b0:	6ca2                	ld	s9,8(sp)
    802025b2:	6125                	addi	sp,sp,96
    802025b4:	8082                	ret
        return -NOT_ELF_FILE;
    802025b6:	5569                	li	a0,-6
    802025b8:	8082                	ret
        return -NOT_ELF_FILE;
    802025ba:	5569                	li	a0,-6
    802025bc:	b7c5                	j	8020259c <loadElf+0xb8>
	...

00000000802025c0 <kernelVector>:
.globl kernelTrap
.section .text
.globl kernelVector
.align 2
kernelVector:
    addi sp, sp, -256
    802025c0:	7111                	addi	sp,sp,-256

    sd ra, 0(sp)
    802025c2:	e006                	sd	ra,0(sp)
    sd sp, 8(sp)
    802025c4:	e40a                	sd	sp,8(sp)
    sd gp, 16(sp)
    802025c6:	e80e                	sd	gp,16(sp)
    sd tp, 24(sp)
    802025c8:	ec12                	sd	tp,24(sp)
    sd t0, 32(sp)
    802025ca:	f016                	sd	t0,32(sp)
    sd t1, 40(sp)
    802025cc:	f41a                	sd	t1,40(sp)
    sd t2, 48(sp)
    802025ce:	f81e                	sd	t2,48(sp)
    sd s0, 56(sp)
    802025d0:	fc22                	sd	s0,56(sp)
    sd s1, 64(sp)
    802025d2:	e0a6                	sd	s1,64(sp)
    sd a0, 72(sp)
    802025d4:	e4aa                	sd	a0,72(sp)
    sd a1, 80(sp)
    802025d6:	e8ae                	sd	a1,80(sp)
    sd a2, 88(sp)
    802025d8:	ecb2                	sd	a2,88(sp)
    sd a3, 96(sp)
    802025da:	f0b6                	sd	a3,96(sp)
    sd a4, 104(sp)
    802025dc:	f4ba                	sd	a4,104(sp)
    sd a5, 112(sp)
    802025de:	f8be                	sd	a5,112(sp)
    sd a6, 120(sp)
    802025e0:	fcc2                	sd	a6,120(sp)
    sd a7, 128(sp)
    802025e2:	e146                	sd	a7,128(sp)
    sd s2, 136(sp)
    802025e4:	e54a                	sd	s2,136(sp)
    sd s3, 144(sp)
    802025e6:	e94e                	sd	s3,144(sp)
    sd s4, 152(sp)
    802025e8:	ed52                	sd	s4,152(sp)
    sd s5, 160(sp)
    802025ea:	f156                	sd	s5,160(sp)
    sd s6, 168(sp)
    802025ec:	f55a                	sd	s6,168(sp)
    sd s7, 176(sp)
    802025ee:	f95e                	sd	s7,176(sp)
    sd s8, 184(sp)
    802025f0:	fd62                	sd	s8,184(sp)
    sd s9, 192(sp)
    802025f2:	e1e6                	sd	s9,192(sp)
    sd s10, 200(sp)
    802025f4:	e5ea                	sd	s10,200(sp)
    sd s11, 208(sp)
    802025f6:	e9ee                	sd	s11,208(sp)
    sd t3, 216(sp)
    802025f8:	edf2                	sd	t3,216(sp)
    sd t4, 224(sp)
    802025fa:	f1f6                	sd	t4,224(sp)
    sd t5, 232(sp)
    802025fc:	f5fa                	sd	t5,232(sp)
    sd t6, 240(sp)
    802025fe:	f9fe                	sd	t6,240(sp)

	// call the C trap handler in trap.c
    call kernelTrap
    80202600:	554020ef          	jal	ra,80204b54 <kernelTrap>
    ld ra, 0(sp)
    80202604:	6082                	ld	ra,0(sp)
    ld sp, 8(sp)
    80202606:	6122                	ld	sp,8(sp)
    ld gp, 16(sp)
    80202608:	61c2                	ld	gp,16(sp)
    // not this, in case we moved CPUs: ld tp, 24(sp)
    ld t0, 32(sp)
    8020260a:	7282                	ld	t0,32(sp)
    ld t1, 40(sp)
    8020260c:	7322                	ld	t1,40(sp)
    ld t2, 48(sp)
    8020260e:	73c2                	ld	t2,48(sp)
    ld s0, 56(sp)
    80202610:	7462                	ld	s0,56(sp)
    ld s1, 64(sp)
    80202612:	6486                	ld	s1,64(sp)
    ld a0, 72(sp)
    80202614:	6526                	ld	a0,72(sp)
    ld a1, 80(sp)
    80202616:	65c6                	ld	a1,80(sp)
    ld a2, 88(sp)
    80202618:	6666                	ld	a2,88(sp)
    ld a3, 96(sp)
    8020261a:	7686                	ld	a3,96(sp)
    ld a4, 104(sp)
    8020261c:	7726                	ld	a4,104(sp)
    ld a5, 112(sp)
    8020261e:	77c6                	ld	a5,112(sp)
    ld a6, 120(sp)
    80202620:	7866                	ld	a6,120(sp)
    ld a7, 128(sp)
    80202622:	688a                	ld	a7,128(sp)
    ld s2, 136(sp)
    80202624:	692a                	ld	s2,136(sp)
    ld s3, 144(sp)
    80202626:	69ca                	ld	s3,144(sp)
    ld s4, 152(sp)
    80202628:	6a6a                	ld	s4,152(sp)
    ld s5, 160(sp)
    8020262a:	7a8a                	ld	s5,160(sp)
    ld s6, 168(sp)
    8020262c:	7b2a                	ld	s6,168(sp)
    ld s7, 176(sp)
    8020262e:	7bca                	ld	s7,176(sp)
    ld s8, 184(sp)
    80202630:	7c6a                	ld	s8,184(sp)
    ld s9, 192(sp)
    80202632:	6c8e                	ld	s9,192(sp)
    ld s10, 200(sp)
    80202634:	6d2e                	ld	s10,200(sp)
    ld s11, 208(sp)
    80202636:	6dce                	ld	s11,208(sp)
    ld t3, 216(sp)
    80202638:	6e6e                	ld	t3,216(sp)
    ld t4, 224(sp)
    8020263a:	7e8e                	ld	t4,224(sp)
    ld t5, 232(sp)
    8020263c:	7f2e                	ld	t5,232(sp)
    ld t6, 240(sp)
    8020263e:	7fce                	ld	t6,240(sp)

    addi sp, sp, 256
    80202640:	6111                	addi	sp,sp,256
    sret
    80202642:	10200073          	sret

0000000080202646 <codeMapper>:

    *new = p;
    return 0;
}

int codeMapper(u64 va, u32 segmentSize, u8 *binary, u32 binSize, void *userData) {
    80202646:	7119                	addi	sp,sp,-128
    80202648:	fc86                	sd	ra,120(sp)
    8020264a:	f8a2                	sd	s0,112(sp)
    8020264c:	f4a6                	sd	s1,104(sp)
    8020264e:	f0ca                	sd	s2,96(sp)
    80202650:	ecce                	sd	s3,88(sp)
    80202652:	e8d2                	sd	s4,80(sp)
    80202654:	e4d6                	sd	s5,72(sp)
    80202656:	e0da                	sd	s6,64(sp)
    80202658:	fc5e                	sd	s7,56(sp)
    8020265a:	f862                	sd	s8,48(sp)
    8020265c:	f466                	sd	s9,40(sp)
    8020265e:	f06a                	sd	s10,32(sp)
    80202660:	ec6e                	sd	s11,24(sp)
    80202662:	0100                	addi	s0,sp,128
    80202664:	8baa                	mv	s7,a0
    80202666:	8d2e                	mv	s10,a1
    80202668:	8db2                	mv	s11,a2
    8020266a:	89b6                	mv	s3,a3
    8020266c:	8c3a                	mv	s8,a4
    Process *process = (Process*)userData;
    PhysicalPage *p = NULL;
    8020266e:	f8043423          	sd	zero,-120(s0)
    u64 i;
    int r = 0;
    u64 offset = va - DOWN_ALIGN(va, PAGE_SIZE);
    80202672:	03451793          	slli	a5,a0,0x34
    80202676:	0347d913          	srli	s2,a5,0x34
    u64* j;

    if (offset > 0) {
    8020267a:	e39d                	bnez	a5,802026a0 <codeMapper+0x5a>
                PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        }
        r = MIN(binSize, PAGE_SIZE - offset);
        bcopy(binary, (void*) page2pa(p) + offset, r);
    }
    for (i = r; i < binSize; i += r) {
    8020267c:	02069993          	slli	s3,a3,0x20
    80202680:	0209d993          	srli	s3,s3,0x20
    80202684:	2c098b63          	beqz	s3,8020295a <codeMapper+0x314>
    int hartId;
} PhysicalPage;

inline u32 page2PPN(PhysicalPage *page) {
    extern PhysicalPage pages[];
    return page - pages;
    80202688:	001c0b17          	auipc	s6,0x1c0
    8020268c:	df0b0b13          	addi	s6,s6,-528 # 803c2478 <pages>
    80202690:	0000ba97          	auipc	s5,0xb
    80202694:	c48a8a93          	addi	s5,s5,-952 # 8020d2d8 <__func__.0+0x8>
    return pages + ppn;
}


inline u64 page2pa(PhysicalPage *page) {
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202698:	4a05                	li	s4,1
    8020269a:	0a7e                	slli	s4,s4,0x1f
        if (pageAlloc(&p) != 0) {
            return -1;
        }
        pageInsert(process->pgdir, va + i, page2pa(p), 
            PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        r = MIN(PAGE_SIZE, binSize - i);
    8020269c:	6c85                	lui	s9,0x1
    8020269e:	a8c5                	j	8020278e <codeMapper+0x148>
        p = pa2page(pageLookup(process->pgdir, va, &j));
    802026a0:	f8040613          	addi	a2,s0,-128
    802026a4:	85aa                	mv	a1,a0
    802026a6:	16873503          	ld	a0,360(a4)
    802026aa:	fffff097          	auipc	ra,0xfffff
    802026ae:	6f4080e7          	jalr	1780(ra) # 80201d9e <pageLookup>
}

inline PhysicalPage* pa2page(u64 pa) {
    if (pa == 0)
    802026b2:	2a050763          	beqz	a0,80202960 <codeMapper+0x31a>
        return NULL;
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    802026b6:	800007b7          	lui	a5,0x80000
    802026ba:	97aa                	add	a5,a5,a0
    802026bc:	83b1                	srli	a5,a5,0xc
    return pages + ppn;
    802026be:	1782                	slli	a5,a5,0x20
    802026c0:	9381                	srli	a5,a5,0x20
    802026c2:	00179713          	slli	a4,a5,0x1
    802026c6:	97ba                	add	a5,a5,a4
    802026c8:	078e                	slli	a5,a5,0x3
    802026ca:	001c0717          	auipc	a4,0x1c0
    802026ce:	dae70713          	addi	a4,a4,-594 # 803c2478 <pages>
    802026d2:	97ba                	add	a5,a5,a4
    802026d4:	f8f43423          	sd	a5,-120(s0)
        r = MIN(binSize, PAGE_SIZE - offset);
    802026d8:	1982                	slli	s3,s3,0x20
    802026da:	0209d993          	srli	s3,s3,0x20
    802026de:	6485                	lui	s1,0x1
    802026e0:	412484b3          	sub	s1,s1,s2
    802026e4:	0099f363          	bgeu	s3,s1,802026ea <codeMapper+0xa4>
    802026e8:	84ce                	mv	s1,s3
    802026ea:	2481                	sext.w	s1,s1
    return page - pages;
    802026ec:	f8843583          	ld	a1,-120(s0)
    802026f0:	001c0797          	auipc	a5,0x1c0
    802026f4:	d8878793          	addi	a5,a5,-632 # 803c2478 <pages>
    802026f8:	8d9d                	sub	a1,a1,a5
    802026fa:	858d                	srai	a1,a1,0x3
    802026fc:	0000b797          	auipc	a5,0xb
    80202700:	bdc7b783          	ld	a5,-1060(a5) # 8020d2d8 <__func__.0+0x8>
    80202704:	02f585b3          	mul	a1,a1,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202708:	00c5959b          	slliw	a1,a1,0xc
    8020270c:	1582                	slli	a1,a1,0x20
    8020270e:	9181                	srli	a1,a1,0x20
    80202710:	4785                	li	a5,1
    80202712:	07fe                	slli	a5,a5,0x1f
    80202714:	95be                	add	a1,a1,a5
        bcopy(binary, (void*) page2pa(p) + offset, r);
    80202716:	8626                	mv	a2,s1
    80202718:	95ca                	add	a1,a1,s2
    8020271a:	856e                	mv	a0,s11
    8020271c:	fffff097          	auipc	ra,0xfffff
    80202720:	332080e7          	jalr	818(ra) # 80201a4e <bcopy>
    for (i = r; i < binSize; i += r) {
    80202724:	8926                	mv	s2,s1
    80202726:	f734e1e3          	bltu	s1,s3,80202688 <codeMapper+0x42>
        bcopy(binary + i, (void*) page2pa(p), r);
    }

    offset = va + i - DOWN_ALIGN(va + i, PAGE_SIZE);
    8020272a:	012b8a33          	add	s4,s7,s2
    8020272e:	034a1793          	slli	a5,s4,0x34
    80202732:	0347d993          	srli	s3,a5,0x34
    if (offset > 0) {
    80202736:	e3cd                	bnez	a5,802027d8 <codeMapper+0x192>
                PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        }
        r = MIN(segmentSize - i, PAGE_SIZE - offset);
        bzero((void*) page2pa(p) + offset, r);
    }
    for (i += r; i < segmentSize; i += r) {
    80202738:	94ca                	add	s1,s1,s2
    8020273a:	1d02                	slli	s10,s10,0x20
    8020273c:	020d5d13          	srli	s10,s10,0x20
    80202740:	1ba4fe63          	bgeu	s1,s10,802028fc <codeMapper+0x2b6>
    return page - pages;
    80202744:	001c0b17          	auipc	s6,0x1c0
    80202748:	d34b0b13          	addi	s6,s6,-716 # 803c2478 <pages>
    8020274c:	0000ba97          	auipc	s5,0xb
    80202750:	b8ca8a93          	addi	s5,s5,-1140 # 8020d2d8 <__func__.0+0x8>
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202754:	4a05                	li	s4,1
    80202756:	0a7e                	slli	s4,s4,0x1f
        if (pageAlloc(&p) != 0) {
            return -1;
        }
        pageInsert(process->pgdir, va + i, page2pa(p), 
            PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
        r = MIN(PAGE_SIZE, segmentSize - i);
    80202758:	6c85                	lui	s9,0x1
    8020275a:	aa1d                	j	80202890 <codeMapper+0x24a>
        r = MIN(PAGE_SIZE, binSize - i);
    8020275c:	2481                	sext.w	s1,s1
    return page - pages;
    8020275e:	f8843583          	ld	a1,-120(s0)
    80202762:	416585b3          	sub	a1,a1,s6
    80202766:	858d                	srai	a1,a1,0x3
    80202768:	000ab783          	ld	a5,0(s5)
    8020276c:	02f585b3          	mul	a1,a1,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202770:	00c5959b          	slliw	a1,a1,0xc
    80202774:	1582                	slli	a1,a1,0x20
    80202776:	9181                	srli	a1,a1,0x20
        bcopy(binary + i, (void*) page2pa(p), r);
    80202778:	8626                	mv	a2,s1
    8020277a:	95d2                	add	a1,a1,s4
    8020277c:	012d8533          	add	a0,s11,s2
    80202780:	fffff097          	auipc	ra,0xfffff
    80202784:	2ce080e7          	jalr	718(ra) # 80201a4e <bcopy>
    for (i = r; i < binSize; i += r) {
    80202788:	9926                	add	s2,s2,s1
    8020278a:	fb3970e3          	bgeu	s2,s3,8020272a <codeMapper+0xe4>
        if (pageAlloc(&p) != 0) {
    8020278e:	f8840513          	addi	a0,s0,-120
    80202792:	fffff097          	auipc	ra,0xfffff
    80202796:	47c080e7          	jalr	1148(ra) # 80201c0e <pageAlloc>
    8020279a:	14051063          	bnez	a0,802028da <codeMapper+0x294>
    return page - pages;
    8020279e:	f8843603          	ld	a2,-120(s0)
    802027a2:	41660633          	sub	a2,a2,s6
    802027a6:	860d                	srai	a2,a2,0x3
    802027a8:	000ab783          	ld	a5,0(s5)
    802027ac:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802027b0:	00c6161b          	slliw	a2,a2,0xc
    802027b4:	1602                	slli	a2,a2,0x20
    802027b6:	9201                	srli	a2,a2,0x20
        pageInsert(process->pgdir, va + i, page2pa(p), 
    802027b8:	46f9                	li	a3,30
    802027ba:	9652                	add	a2,a2,s4
    802027bc:	012b85b3          	add	a1,s7,s2
    802027c0:	168c3503          	ld	a0,360(s8) # fffffffffffff168 <bssEnd+0xffffffff7f9e4168>
    802027c4:	fffff097          	auipc	ra,0xfffff
    802027c8:	7d6080e7          	jalr	2006(ra) # 80201f9a <pageInsert>
        r = MIN(PAGE_SIZE, binSize - i);
    802027cc:	412984b3          	sub	s1,s3,s2
    802027d0:	f89cf6e3          	bgeu	s9,s1,8020275c <codeMapper+0x116>
    802027d4:	84e6                	mv	s1,s9
    802027d6:	b759                	j	8020275c <codeMapper+0x116>
        p = pa2page(pageLookup(process->pgdir, va + i, &j));
    802027d8:	f8040613          	addi	a2,s0,-128
    802027dc:	85d2                	mv	a1,s4
    802027de:	168c3503          	ld	a0,360(s8)
    802027e2:	fffff097          	auipc	ra,0xfffff
    802027e6:	5bc080e7          	jalr	1468(ra) # 80201d9e <pageLookup>
    if (pa == 0)
    802027ea:	12050163          	beqz	a0,8020290c <codeMapper+0x2c6>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    802027ee:	800007b7          	lui	a5,0x80000
    802027f2:	97aa                	add	a5,a5,a0
    802027f4:	83b1                	srli	a5,a5,0xc
    return pages + ppn;
    802027f6:	1782                	slli	a5,a5,0x20
    802027f8:	9381                	srli	a5,a5,0x20
    802027fa:	00179713          	slli	a4,a5,0x1
    802027fe:	97ba                	add	a5,a5,a4
    80202800:	078e                	slli	a5,a5,0x3
    80202802:	001c0717          	auipc	a4,0x1c0
    80202806:	c7670713          	addi	a4,a4,-906 # 803c2478 <pages>
    8020280a:	97ba                	add	a5,a5,a4
    8020280c:	f8f43423          	sd	a5,-120(s0)
        r = MIN(segmentSize - i, PAGE_SIZE - offset);
    80202810:	020d1493          	slli	s1,s10,0x20
    80202814:	9081                	srli	s1,s1,0x20
    80202816:	6785                	lui	a5,0x1
    80202818:	413787b3          	sub	a5,a5,s3
    8020281c:	412484b3          	sub	s1,s1,s2
    80202820:	0097f363          	bgeu	a5,s1,80202826 <codeMapper+0x1e0>
    80202824:	84be                	mv	s1,a5
    80202826:	2481                	sext.w	s1,s1
    return page - pages;
    80202828:	f8843503          	ld	a0,-120(s0)
    8020282c:	001c0797          	auipc	a5,0x1c0
    80202830:	c4c78793          	addi	a5,a5,-948 # 803c2478 <pages>
    80202834:	8d1d                	sub	a0,a0,a5
    80202836:	850d                	srai	a0,a0,0x3
    80202838:	0000b797          	auipc	a5,0xb
    8020283c:	aa07b783          	ld	a5,-1376(a5) # 8020d2d8 <__func__.0+0x8>
    80202840:	02f50533          	mul	a0,a0,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202844:	00c5151b          	slliw	a0,a0,0xc
    80202848:	1502                	slli	a0,a0,0x20
    8020284a:	9101                	srli	a0,a0,0x20
    8020284c:	4785                	li	a5,1
    8020284e:	07fe                	slli	a5,a5,0x1f
    80202850:	953e                	add	a0,a0,a5
        bzero((void*) page2pa(p) + offset, r);
    80202852:	85a6                	mv	a1,s1
    80202854:	954e                	add	a0,a0,s3
    80202856:	fffff097          	auipc	ra,0xfffff
    8020285a:	21e080e7          	jalr	542(ra) # 80201a74 <bzero>
    8020285e:	bde9                	j	80202738 <codeMapper+0xf2>
        bzero((void*) page2pa(p), r);
    80202860:	2901                	sext.w	s2,s2
    return page - pages;
    80202862:	f8843783          	ld	a5,-120(s0)
    80202866:	416787b3          	sub	a5,a5,s6
    8020286a:	878d                	srai	a5,a5,0x3
    8020286c:	000ab703          	ld	a4,0(s5)
    80202870:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202874:	00c7979b          	slliw	a5,a5,0xc
    80202878:	1782                	slli	a5,a5,0x20
    8020287a:	9381                	srli	a5,a5,0x20
    8020287c:	85ca                	mv	a1,s2
    8020287e:	01478533          	add	a0,a5,s4
    80202882:	fffff097          	auipc	ra,0xfffff
    80202886:	1f2080e7          	jalr	498(ra) # 80201a74 <bzero>
    for (i += r; i < segmentSize; i += r) {
    8020288a:	94ca                	add	s1,s1,s2
    8020288c:	05a4f863          	bgeu	s1,s10,802028dc <codeMapper+0x296>
        if (pageAlloc(&p) != 0) {
    80202890:	f8840513          	addi	a0,s0,-120
    80202894:	fffff097          	auipc	ra,0xfffff
    80202898:	37a080e7          	jalr	890(ra) # 80201c0e <pageAlloc>
    8020289c:	89aa                	mv	s3,a0
    8020289e:	e12d                	bnez	a0,80202900 <codeMapper+0x2ba>
    return page - pages;
    802028a0:	f8843603          	ld	a2,-120(s0)
    802028a4:	41660633          	sub	a2,a2,s6
    802028a8:	860d                	srai	a2,a2,0x3
    802028aa:	000ab783          	ld	a5,0(s5)
    802028ae:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802028b2:	00c6161b          	slliw	a2,a2,0xc
    802028b6:	1602                	slli	a2,a2,0x20
    802028b8:	9201                	srli	a2,a2,0x20
        pageInsert(process->pgdir, va + i, page2pa(p), 
    802028ba:	46f9                	li	a3,30
    802028bc:	9652                	add	a2,a2,s4
    802028be:	009b85b3          	add	a1,s7,s1
    802028c2:	168c3503          	ld	a0,360(s8)
    802028c6:	fffff097          	auipc	ra,0xfffff
    802028ca:	6d4080e7          	jalr	1748(ra) # 80201f9a <pageInsert>
        r = MIN(PAGE_SIZE, segmentSize - i);
    802028ce:	409d0933          	sub	s2,s10,s1
    802028d2:	f92cf7e3          	bgeu	s9,s2,80202860 <codeMapper+0x21a>
    802028d6:	8966                	mv	s2,s9
    802028d8:	b761                	j	80202860 <codeMapper+0x21a>
            return -1;
    802028da:	59fd                	li	s3,-1
    }
    return 0;
}
    802028dc:	854e                	mv	a0,s3
    802028de:	70e6                	ld	ra,120(sp)
    802028e0:	7446                	ld	s0,112(sp)
    802028e2:	74a6                	ld	s1,104(sp)
    802028e4:	7906                	ld	s2,96(sp)
    802028e6:	69e6                	ld	s3,88(sp)
    802028e8:	6a46                	ld	s4,80(sp)
    802028ea:	6aa6                	ld	s5,72(sp)
    802028ec:	6b06                	ld	s6,64(sp)
    802028ee:	7be2                	ld	s7,56(sp)
    802028f0:	7c42                	ld	s8,48(sp)
    802028f2:	7ca2                	ld	s9,40(sp)
    802028f4:	7d02                	ld	s10,32(sp)
    802028f6:	6de2                	ld	s11,24(sp)
    802028f8:	6109                	addi	sp,sp,128
    802028fa:	8082                	ret
    return 0;
    802028fc:	4981                	li	s3,0
    802028fe:	bff9                	j	802028dc <codeMapper+0x296>
            return -1;
    80202900:	59fd                	li	s3,-1
    80202902:	bfe9                	j	802028dc <codeMapper+0x296>
                return -1;
    80202904:	59fd                	li	s3,-1
    80202906:	bfd9                	j	802028dc <codeMapper+0x296>
                return -1;
    80202908:	59fd                	li	s3,-1
    8020290a:	bfc9                	j	802028dc <codeMapper+0x296>
        p = pa2page(pageLookup(process->pgdir, va + i, &j));
    8020290c:	f8043423          	sd	zero,-120(s0)
            if (pageAlloc(&p) != 0) {
    80202910:	f8840513          	addi	a0,s0,-120
    80202914:	fffff097          	auipc	ra,0xfffff
    80202918:	2fa080e7          	jalr	762(ra) # 80201c0e <pageAlloc>
    8020291c:	f565                	bnez	a0,80202904 <codeMapper+0x2be>
    return page - pages;
    8020291e:	f8843783          	ld	a5,-120(s0)
    80202922:	001c0717          	auipc	a4,0x1c0
    80202926:	b5670713          	addi	a4,a4,-1194 # 803c2478 <pages>
    8020292a:	8f99                	sub	a5,a5,a4
    8020292c:	878d                	srai	a5,a5,0x3
    8020292e:	0000b717          	auipc	a4,0xb
    80202932:	9aa73703          	ld	a4,-1622(a4) # 8020d2d8 <__func__.0+0x8>
    80202936:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020293a:	00c7979b          	slliw	a5,a5,0xc
    8020293e:	1782                	slli	a5,a5,0x20
    80202940:	9381                	srli	a5,a5,0x20
            pageInsert(process->pgdir, va + i, page2pa(p), 
    80202942:	46f9                	li	a3,30
    80202944:	4605                	li	a2,1
    80202946:	067e                	slli	a2,a2,0x1f
    80202948:	963e                	add	a2,a2,a5
    8020294a:	85d2                	mv	a1,s4
    8020294c:	168c3503          	ld	a0,360(s8)
    80202950:	fffff097          	auipc	ra,0xfffff
    80202954:	64a080e7          	jalr	1610(ra) # 80201f9a <pageInsert>
    80202958:	bd65                	j	80202810 <codeMapper+0x1ca>
    for (i = r; i < binSize; i += r) {
    8020295a:	894e                	mv	s2,s3
    int r = 0;
    8020295c:	4481                	li	s1,0
    8020295e:	bbe9                	j	80202738 <codeMapper+0xf2>
        p = pa2page(pageLookup(process->pgdir, va, &j));
    80202960:	f8043423          	sd	zero,-120(s0)
            if (pageAlloc(&p) < 0) {
    80202964:	f8840513          	addi	a0,s0,-120
    80202968:	fffff097          	auipc	ra,0xfffff
    8020296c:	2a6080e7          	jalr	678(ra) # 80201c0e <pageAlloc>
    80202970:	f8054ce3          	bltz	a0,80202908 <codeMapper+0x2c2>
    return page - pages;
    80202974:	f8843783          	ld	a5,-120(s0)
    80202978:	001c0717          	auipc	a4,0x1c0
    8020297c:	b0070713          	addi	a4,a4,-1280 # 803c2478 <pages>
    80202980:	8f99                	sub	a5,a5,a4
    80202982:	878d                	srai	a5,a5,0x3
    80202984:	0000b717          	auipc	a4,0xb
    80202988:	95473703          	ld	a4,-1708(a4) # 8020d2d8 <__func__.0+0x8>
    8020298c:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202990:	00c7979b          	slliw	a5,a5,0xc
    80202994:	1782                	slli	a5,a5,0x20
    80202996:	9381                	srli	a5,a5,0x20
            pageInsert(process->pgdir, va, page2pa(p), 
    80202998:	46f9                	li	a3,30
    8020299a:	4605                	li	a2,1
    8020299c:	067e                	slli	a2,a2,0x1f
    8020299e:	963e                	add	a2,a2,a5
    802029a0:	85de                	mv	a1,s7
    802029a2:	168c3503          	ld	a0,360(s8)
    802029a6:	fffff097          	auipc	ra,0xfffff
    802029aa:	5f4080e7          	jalr	1524(ra) # 80201f9a <pageInsert>
    802029ae:	b32d                	j	802026d8 <codeMapper+0x92>

00000000802029b0 <myproc>:
Process* myproc() {
    802029b0:	1101                	addi	sp,sp,-32
    802029b2:	ec06                	sd	ra,24(sp)
    802029b4:	e822                	sd	s0,16(sp)
    802029b6:	e426                	sd	s1,8(sp)
    802029b8:	1000                	addi	s0,sp,32
    interruptPush();
    802029ba:	00003097          	auipc	ra,0x3
    802029be:	ec0080e7          	jalr	-320(ra) # 8020587a <interruptPush>
#define HART_TOTAL_NUMBER 5

// which hart (core) is this?
static inline u64 r_hartid() {
    u64 x;
    asm volatile("mv %0, tp" : "=r" (x) );
    802029c2:	8792                	mv	a5,tp
    if (currentProcess[hartId] == NULL)
    802029c4:	2781                	sext.w	a5,a5
    802029c6:	078e                	slli	a5,a5,0x3
    802029c8:	00281717          	auipc	a4,0x281
    802029cc:	ae870713          	addi	a4,a4,-1304 # 804834b0 <currentProcess>
    802029d0:	97ba                	add	a5,a5,a4
    802029d2:	6384                	ld	s1,0(a5)
    802029d4:	c899                	beqz	s1,802029ea <myproc+0x3a>
    interruptPop();
    802029d6:	00003097          	auipc	ra,0x3
    802029da:	edc080e7          	jalr	-292(ra) # 802058b2 <interruptPop>
}
    802029de:	8526                	mv	a0,s1
    802029e0:	60e2                	ld	ra,24(sp)
    802029e2:	6442                	ld	s0,16(sp)
    802029e4:	64a2                	ld	s1,8(sp)
    802029e6:	6105                	addi	sp,sp,32
    802029e8:	8082                	ret
        panic("get current process error");
    802029ea:	0000a697          	auipc	a3,0xa
    802029ee:	bf668693          	addi	a3,a3,-1034 # 8020c5e0 <__func__.1+0x10>
    802029f2:	0000b617          	auipc	a2,0xb
    802029f6:	86660613          	addi	a2,a2,-1946 # 8020d258 <__func__.4>
    802029fa:	45e9                	li	a1,26
    802029fc:	0000a517          	auipc	a0,0xa
    80202a00:	c0450513          	addi	a0,a0,-1020 # 8020c600 <__func__.1+0x30>
    80202a04:	ffffe097          	auipc	ra,0xffffe
    80202a08:	148080e7          	jalr	328(ra) # 80200b4c <_panic_>

0000000080202a0c <getProcessTopSp>:
u64 getProcessTopSp(Process* p) {
    80202a0c:	1141                	addi	sp,sp,-16
    80202a0e:	e422                	sd	s0,8(sp)
    80202a10:	0800                	addi	s0,sp,16
    return KERNEL_PROCESS_SP_TOP - (u64)(p - processes) * 10 * PAGE_SIZE;
    80202a12:	00281797          	auipc	a5,0x281
    80202a16:	b7e78793          	addi	a5,a5,-1154 # 80483590 <processes>
    80202a1a:	40f507b3          	sub	a5,a0,a5
    80202a1e:	878d                	srai	a5,a5,0x3
    80202a20:	0000b717          	auipc	a4,0xb
    80202a24:	8c873703          	ld	a4,-1848(a4) # 8020d2e8 <__func__.0+0x18>
    80202a28:	02e787b3          	mul	a5,a5,a4
    80202a2c:	00279513          	slli	a0,a5,0x2
    80202a30:	97aa                	add	a5,a5,a0
    80202a32:	07b6                	slli	a5,a5,0xd
}
    80202a34:	4505                	li	a0,1
    80202a36:	1512                	slli	a0,a0,0x24
    80202a38:	8d1d                	sub	a0,a0,a5
    80202a3a:	6422                	ld	s0,8(sp)
    80202a3c:	0141                	addi	sp,sp,16
    80202a3e:	8082                	ret

0000000080202a40 <getSignalHandler>:
SignalAction *getSignalHandler(Process *p) {
    80202a40:	1141                	addi	sp,sp,-16
    80202a42:	e422                	sd	s0,8(sp)
    80202a44:	0800                	addi	s0,sp,16
    return (SignalAction*)(PROCESS_SIGNAL_BASE + (u64)(p - processes) * PAGE_SIZE);
    80202a46:	00281797          	auipc	a5,0x281
    80202a4a:	b4a78793          	addi	a5,a5,-1206 # 80483590 <processes>
    80202a4e:	8d1d                	sub	a0,a0,a5
    80202a50:	850d                	srai	a0,a0,0x3
    80202a52:	0000b797          	auipc	a5,0xb
    80202a56:	8967b783          	ld	a5,-1898(a5) # 8020d2e8 <__func__.0+0x18>
    80202a5a:	02f50533          	mul	a0,a0,a5
    80202a5e:	010407b7          	lui	a5,0x1040
    80202a62:	953e                	add	a0,a0,a5
}
    80202a64:	0532                	slli	a0,a0,0xc
    80202a66:	6422                	ld	s0,8(sp)
    80202a68:	0141                	addi	sp,sp,16
    80202a6a:	8082                	ret

0000000080202a6c <processInit>:
void processInit() {
    80202a6c:	1101                	addi	sp,sp,-32
    80202a6e:	ec06                	sd	ra,24(sp)
    80202a70:	e822                	sd	s0,16(sp)
    80202a72:	e426                	sd	s1,8(sp)
    80202a74:	1000                	addi	s0,sp,32
    printf("Process init start...\n");
    80202a76:	0000a517          	auipc	a0,0xa
    80202a7a:	b9a50513          	addi	a0,a0,-1126 # 8020c610 <__func__.1+0x40>
    80202a7e:	ffffe097          	auipc	ra,0xffffe
    80202a82:	042080e7          	jalr	66(ra) # 80200ac0 <printf>
    initLock(&freeProcessesLock, "freeProcess");
    80202a86:	00281497          	auipc	s1,0x281
    80202a8a:	a2a48493          	addi	s1,s1,-1494 # 804834b0 <currentProcess>
    80202a8e:	0000a597          	auipc	a1,0xa
    80202a92:	b9a58593          	addi	a1,a1,-1126 # 8020c628 <__func__.1+0x58>
    80202a96:	00281517          	auipc	a0,0x281
    80202a9a:	a4250513          	addi	a0,a0,-1470 # 804834d8 <freeProcessesLock>
    80202a9e:	00003097          	auipc	ra,0x3
    80202aa2:	fc6080e7          	jalr	-58(ra) # 80205a64 <initLock>
    initLock(&scheduleListLock, "scheduleList");
    80202aa6:	0000a597          	auipc	a1,0xa
    80202aaa:	b9258593          	addi	a1,a1,-1134 # 8020c638 <__func__.1+0x68>
    80202aae:	00281517          	auipc	a0,0x281
    80202ab2:	a4250513          	addi	a0,a0,-1470 # 804834f0 <scheduleListLock>
    80202ab6:	00003097          	auipc	ra,0x3
    80202aba:	fae080e7          	jalr	-82(ra) # 80205a64 <initLock>
    initLock(&processIdLock, "processId");
    80202abe:	0000a597          	auipc	a1,0xa
    80202ac2:	b8a58593          	addi	a1,a1,-1142 # 8020c648 <__func__.1+0x78>
    80202ac6:	00281517          	auipc	a0,0x281
    80202aca:	a4250513          	addi	a0,a0,-1470 # 80483508 <processIdLock>
    80202ace:	00003097          	auipc	ra,0x3
    80202ad2:	f96080e7          	jalr	-106(ra) # 80205a64 <initLock>
    initLock(&waitLock, "waitProcess");
    80202ad6:	0000a597          	auipc	a1,0xa
    80202ada:	b8258593          	addi	a1,a1,-1150 # 8020c658 <__func__.1+0x88>
    80202ade:	00281517          	auipc	a0,0x281
    80202ae2:	a4250513          	addi	a0,a0,-1470 # 80483520 <waitLock>
    80202ae6:	00003097          	auipc	ra,0x3
    80202aea:	f7e080e7          	jalr	-130(ra) # 80205a64 <initLock>
    initLock(&currentProcessLock, "currentProcess");
    80202aee:	0000a597          	auipc	a1,0xa
    80202af2:	b7a58593          	addi	a1,a1,-1158 # 8020c668 <__func__.1+0x98>
    80202af6:	00281517          	auipc	a0,0x281
    80202afa:	a4250513          	addi	a0,a0,-1470 # 80483538 <currentProcessLock>
    80202afe:	00003097          	auipc	ra,0x3
    80202b02:	f66080e7          	jalr	-154(ra) # 80205a64 <initLock>
    LIST_INIT(&scheduleList[0]);
    80202b06:	0a04b023          	sd	zero,160(s1)
    LIST_INIT(&scheduleList[1]);
    80202b0a:	0a04b423          	sd	zero,168(s1)
        processes[i].trapframe.kernelSatp = MAKE_SATP(kernelPageDirectory);
    80202b0e:	00417597          	auipc	a1,0x417
    80202b12:	4f258593          	addi	a1,a1,1266 # 8061a000 <_pgdir>
    80202b16:	81b1                	srli	a1,a1,0xc
    80202b18:	57fd                	li	a5,-1
    80202b1a:	17fe                	slli	a5,a5,0x3f
    80202b1c:	8ddd                	or	a1,a1,a5
    80202b1e:	003fa797          	auipc	a5,0x3fa
    80202b22:	48a78793          	addi	a5,a5,1162 # 805fcfa8 <processes+0x179a18>
    80202b26:	00281817          	auipc	a6,0x281
    80202b2a:	a6a80813          	addi	a6,a6,-1430 # 80483590 <processes>
    80202b2e:	4681                	li	a3,0
        LIST_INSERT_HEAD(&freeProcesses, &processes[i], link);
    80202b30:	003fb517          	auipc	a0,0x3fb
    80202b34:	a6850513          	addi	a0,a0,-1432 # 805fd598 <freeProcesses>
    80202b38:	a801                	j	80202b48 <processInit+0xdc>
    80202b3a:	14a6bc23          	sd	a0,344(a3)
    for (i = PROCESS_TOTAL_NUMBER - 1; i >= 0; i--) {
    80202b3e:	a1878713          	addi	a4,a5,-1512
    80202b42:	03078063          	beq	a5,a6,80202b62 <processInit+0xf6>
    80202b46:	87ba                	mv	a5,a4
        processes[i].state = UNUSED;
    80202b48:	8736                	mv	a4,a3
    80202b4a:	86be                	mv	a3,a5
    80202b4c:	1807a623          	sw	zero,396(a5)
        processes[i].trapframe.kernelSatp = MAKE_SATP(kernelPageDirectory);
    80202b50:	e38c                	sd	a1,0(a5)
        LIST_INSERT_HEAD(&freeProcesses, &processes[i], link);
    80202b52:	14e7b823          	sd	a4,336(a5)
    80202b56:	d375                	beqz	a4,80202b3a <processInit+0xce>
    80202b58:	15078613          	addi	a2,a5,336
    80202b5c:	14c73c23          	sd	a2,344(a4)
    80202b60:	bfe9                	j	80202b3a <processInit+0xce>
    80202b62:	003fb717          	auipc	a4,0x3fb
    80202b66:	a3670713          	addi	a4,a4,-1482 # 805fd598 <freeProcesses>
    80202b6a:	00281797          	auipc	a5,0x281
    80202b6e:	a2678793          	addi	a5,a5,-1498 # 80483590 <processes>
    80202b72:	e31c                	sd	a5,0(a4)
    80202b74:	14e7bc23          	sd	a4,344(a5)
    w_sscratch((u64)getHartTrapFrame());
    80202b78:	00003097          	auipc	ra,0x3
    80202b7c:	02c080e7          	jalr	44(ra) # 80205ba4 <getHartTrapFrame>
	return x;
}

// Supervisor Scratch register, for early trap handler in trampoline.S.
static inline void w_sscratch(u64 x) {
	asm volatile("csrw sscratch, %0" : : "r" (x));
    80202b80:	14051073          	csrw	sscratch,a0
    printf("Process init finish!\n");
    80202b84:	0000a517          	auipc	a0,0xa
    80202b88:	af450513          	addi	a0,a0,-1292 # 8020c678 <__func__.1+0xa8>
    80202b8c:	ffffe097          	auipc	ra,0xffffe
    80202b90:	f34080e7          	jalr	-204(ra) # 80200ac0 <printf>
}
    80202b94:	60e2                	ld	ra,24(sp)
    80202b96:	6442                	ld	s0,16(sp)
    80202b98:	64a2                	ld	s1,8(sp)
    80202b9a:	6105                	addi	sp,sp,32
    80202b9c:	8082                	ret

0000000080202b9e <generateProcessId>:
u32 generateProcessId(Process *p) {
    80202b9e:	1101                	addi	sp,sp,-32
    80202ba0:	ec06                	sd	ra,24(sp)
    80202ba2:	e822                	sd	s0,16(sp)
    80202ba4:	e426                	sd	s1,8(sp)
    80202ba6:	e04a                	sd	s2,0(sp)
    80202ba8:	1000                	addi	s0,sp,32
    80202baa:	84aa                	mv	s1,a0
    acquireLock(&processIdLock);
    80202bac:	00281917          	auipc	s2,0x281
    80202bb0:	95c90913          	addi	s2,s2,-1700 # 80483508 <processIdLock>
    80202bb4:	854a                	mv	a0,s2
    80202bb6:	00003097          	auipc	ra,0x3
    80202bba:	ef8080e7          	jalr	-264(ra) # 80205aae <acquireLock>
    u32 processId = (++nextId << (1 + LOG_PROCESS_NUM)) | (u32)(p - processes);
    80202bbe:	003fb717          	auipc	a4,0x3fb
    80202bc2:	9d670713          	addi	a4,a4,-1578 # 805fd594 <nextId.3>
    80202bc6:	431c                	lw	a5,0(a4)
    80202bc8:	2785                	addiw	a5,a5,1
    80202bca:	c31c                	sw	a5,0(a4)
    80202bcc:	00281717          	auipc	a4,0x281
    80202bd0:	9c470713          	addi	a4,a4,-1596 # 80483590 <processes>
    80202bd4:	8c99                	sub	s1,s1,a4
    80202bd6:	848d                	srai	s1,s1,0x3
    80202bd8:	0000a717          	auipc	a4,0xa
    80202bdc:	71073703          	ld	a4,1808(a4) # 8020d2e8 <__func__.0+0x18>
    80202be0:	02e484b3          	mul	s1,s1,a4
    80202be4:	00b7979b          	slliw	a5,a5,0xb
    80202be8:	8cdd                	or	s1,s1,a5
    80202bea:	2481                	sext.w	s1,s1
    releaseLock(&processIdLock);
    80202bec:	854a                	mv	a0,s2
    80202bee:	00003097          	auipc	ra,0x3
    80202bf2:	f3c080e7          	jalr	-196(ra) # 80205b2a <releaseLock>
}
    80202bf6:	8526                	mv	a0,s1
    80202bf8:	60e2                	ld	ra,24(sp)
    80202bfa:	6442                	ld	s0,16(sp)
    80202bfc:	64a2                	ld	s1,8(sp)
    80202bfe:	6902                	ld	s2,0(sp)
    80202c00:	6105                	addi	sp,sp,32
    80202c02:	8082                	ret

0000000080202c04 <pid2Process>:
int pid2Process(u32 processId, struct Process **process, int checkPerm) {
    80202c04:	1141                	addi	sp,sp,-16
    80202c06:	e422                	sd	s0,8(sp)
    80202c08:	0800                	addi	s0,sp,16
    asm volatile("mv %0, tp" : "=r" (x) );
    80202c0a:	8792                	mv	a5,tp
    int hartId = r_hartid();
    80202c0c:	0007871b          	sext.w	a4,a5
    if (processId == 0) {
    80202c10:	c921                	beqz	a0,80202c60 <pid2Process+0x5c>
    p = processes + PROCESS_OFFSET(processId);
    80202c12:	3ff57793          	andi	a5,a0,1023
    80202c16:	5e800693          	li	a3,1512
    80202c1a:	02d787b3          	mul	a5,a5,a3
    80202c1e:	00281697          	auipc	a3,0x281
    80202c22:	97268693          	addi	a3,a3,-1678 # 80483590 <processes>
    80202c26:	97b6                	add	a5,a5,a3
    if (p->state == UNUSED || p->id != processId) {
    80202c28:	18c7a683          	lw	a3,396(a5)
    80202c2c:	c6b1                	beqz	a3,80202c78 <pid2Process+0x74>
    80202c2e:	1707a683          	lw	a3,368(a5)
    80202c32:	04a69663          	bne	a3,a0,80202c7e <pid2Process+0x7a>
    return 0;
    80202c36:	8532                	mv	a0,a2
    if (checkPerm) {
    80202c38:	ce05                	beqz	a2,80202c70 <pid2Process+0x6c>
        if (p != currentProcess[hartId] && p->parentId != currentProcess[hartId]->id) {
    80202c3a:	070e                	slli	a4,a4,0x3
    80202c3c:	00281697          	auipc	a3,0x281
    80202c40:	87468693          	addi	a3,a3,-1932 # 804834b0 <currentProcess>
    80202c44:	9736                	add	a4,a4,a3
    80202c46:	6318                	ld	a4,0(a4)
    return 0;
    80202c48:	4501                	li	a0,0
        if (p != currentProcess[hartId] && p->parentId != currentProcess[hartId]->id) {
    80202c4a:	02f70363          	beq	a4,a5,80202c70 <pid2Process+0x6c>
    80202c4e:	1747a683          	lw	a3,372(a5)
    80202c52:	17072703          	lw	a4,368(a4)
    80202c56:	00e68d63          	beq	a3,a4,80202c70 <pid2Process+0x6c>
    80202c5a:	4781                	li	a5,0
            return -INVALID_PERM;
    80202c5c:	5561                	li	a0,-8
    80202c5e:	a809                	j	80202c70 <pid2Process+0x6c>
        *process = currentProcess[hartId];
    80202c60:	00371793          	slli	a5,a4,0x3
    80202c64:	00281717          	auipc	a4,0x281
    80202c68:	84c70713          	addi	a4,a4,-1972 # 804834b0 <currentProcess>
    80202c6c:	97ba                	add	a5,a5,a4
    80202c6e:	639c                	ld	a5,0(a5)
    80202c70:	e19c                	sd	a5,0(a1)
}
    80202c72:	6422                	ld	s0,8(sp)
    80202c74:	0141                	addi	sp,sp,16
    80202c76:	8082                	ret
    80202c78:	4781                	li	a5,0
        return -INVALID_PROCESS_STATUS;
    80202c7a:	5565                	li	a0,-7
    80202c7c:	bfd5                	j	80202c70 <pid2Process+0x6c>
    80202c7e:	4781                	li	a5,0
    80202c80:	5565                	li	a0,-7
    80202c82:	b7fd                	j	80202c70 <pid2Process+0x6c>

0000000080202c84 <setup>:
int setup(Process *p) {
    80202c84:	7139                	addi	sp,sp,-64
    80202c86:	fc06                	sd	ra,56(sp)
    80202c88:	f822                	sd	s0,48(sp)
    80202c8a:	f426                	sd	s1,40(sp)
    80202c8c:	f04a                	sd	s2,32(sp)
    80202c8e:	ec4e                	sd	s3,24(sp)
    80202c90:	e852                	sd	s4,16(sp)
    80202c92:	0080                	addi	s0,sp,64
    80202c94:	84aa                	mv	s1,a0
    r = allocPgdir(&page);
    80202c96:	fc840513          	addi	a0,s0,-56
    80202c9a:	fffff097          	auipc	ra,0xfffff
    80202c9e:	3b6080e7          	jalr	950(ra) # 80202050 <allocPgdir>
    if (r < 0) {
    80202ca2:	16054763          	bltz	a0,80202e10 <setup+0x18c>
    return page - pages;
    80202ca6:	001bfa17          	auipc	s4,0x1bf
    80202caa:	7d2a0a13          	addi	s4,s4,2002 # 803c2478 <pages>
    80202cae:	fc843783          	ld	a5,-56(s0)
    80202cb2:	414787b3          	sub	a5,a5,s4
    80202cb6:	878d                	srai	a5,a5,0x3
    80202cb8:	0000a997          	auipc	s3,0xa
    80202cbc:	6209b983          	ld	s3,1568(s3) # 8020d2d8 <__func__.0+0x8>
    80202cc0:	033787b3          	mul	a5,a5,s3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202cc4:	00c7979b          	slliw	a5,a5,0xc
    80202cc8:	1782                	slli	a5,a5,0x20
    80202cca:	9381                	srli	a5,a5,0x20
    80202ccc:	4905                	li	s2,1
    80202cce:	097e                	slli	s2,s2,0x1f
    80202cd0:	97ca                	add	a5,a5,s2
    p->pgdir = (u64*) page2pa(page);
    80202cd2:	16f4b423          	sd	a5,360(s1)
    p->chan = 0;
    80202cd6:	5a04b823          	sd	zero,1456(s1)
    p->retValue = 0;
    80202cda:	5c04b423          	sd	zero,1480(s1)
    p->state = UNUSED;
    80202cde:	1804a623          	sw	zero,396(s1)
    p->parentId = 0;
    80202ce2:	1604aa23          	sw	zero,372(s1)
    p->heapBottom = USER_HEAP_BOTTOM;
    80202ce6:	01f007b7          	lui	a5,0x1f00
    80202cea:	17fd                	addi	a5,a5,-1
    80202cec:	07b6                	slli	a5,a5,0xd
    80202cee:	5cf4b823          	sd	a5,1488(s1)
    p->awakeTime = 0;
    80202cf2:	1604b023          	sd	zero,352(s1)
    p->cwd = &rootFileSystem.root;
    80202cf6:	003fb797          	auipc	a5,0x3fb
    80202cfa:	94a78793          	addi	a5,a5,-1718 # 805fd640 <rootFileSystem+0x70>
    80202cfe:	1af4b423          	sd	a5,424(s1)
    r = pageAlloc(&page);
    80202d02:	fc840513          	addi	a0,s0,-56
    80202d06:	fffff097          	auipc	ra,0xfffff
    80202d0a:	f08080e7          	jalr	-248(ra) # 80201c0e <pageAlloc>
    pageInsert(kernelPageDirectory, getProcessTopSp(p) - PGSIZE, page2pa(page), PTE_READ | PTE_WRITE | PTE_EXECUTE);
    80202d0e:	8526                	mv	a0,s1
    80202d10:	00000097          	auipc	ra,0x0
    80202d14:	cfc080e7          	jalr	-772(ra) # 80202a0c <getProcessTopSp>
    return page - pages;
    80202d18:	fc843603          	ld	a2,-56(s0)
    80202d1c:	41460633          	sub	a2,a2,s4
    80202d20:	860d                	srai	a2,a2,0x3
    80202d22:	03360633          	mul	a2,a2,s3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202d26:	00c6161b          	slliw	a2,a2,0xc
    80202d2a:	1602                	slli	a2,a2,0x20
    80202d2c:	9201                	srli	a2,a2,0x20
    80202d2e:	46b9                	li	a3,14
    80202d30:	964a                	add	a2,a2,s2
    80202d32:	75fd                	lui	a1,0xfffff
    80202d34:	95aa                	add	a1,a1,a0
    80202d36:	00417517          	auipc	a0,0x417
    80202d3a:	2ca50513          	addi	a0,a0,714 # 8061a000 <_pgdir>
    80202d3e:	fffff097          	auipc	ra,0xfffff
    80202d42:	25c080e7          	jalr	604(ra) # 80201f9a <pageInsert>
    r = pageAlloc(&page);
    80202d46:	fc840513          	addi	a0,s0,-56
    80202d4a:	fffff097          	auipc	ra,0xfffff
    80202d4e:	ec4080e7          	jalr	-316(ra) # 80201c0e <pageAlloc>
    pageInsert(kernelPageDirectory, (u64)getSignalHandler(p), page2pa(page), PTE_READ | PTE_WRITE);
    80202d52:	8526                	mv	a0,s1
    80202d54:	00000097          	auipc	ra,0x0
    80202d58:	cec080e7          	jalr	-788(ra) # 80202a40 <getSignalHandler>
    80202d5c:	85aa                	mv	a1,a0
    return page - pages;
    80202d5e:	fc843603          	ld	a2,-56(s0)
    80202d62:	41460633          	sub	a2,a2,s4
    80202d66:	860d                	srai	a2,a2,0x3
    80202d68:	03360633          	mul	a2,a2,s3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202d6c:	00c6161b          	slliw	a2,a2,0xc
    80202d70:	1602                	slli	a2,a2,0x20
    80202d72:	9201                	srli	a2,a2,0x20
    80202d74:	4699                	li	a3,6
    80202d76:	964a                	add	a2,a2,s2
    80202d78:	00417517          	auipc	a0,0x417
    80202d7c:	28850513          	addi	a0,a0,648 # 8061a000 <_pgdir>
    80202d80:	fffff097          	auipc	ra,0xfffff
    80202d84:	21a080e7          	jalr	538(ra) # 80201f9a <pageInsert>
    r = pageAlloc(&page);
    80202d88:	fc840513          	addi	a0,s0,-56
    80202d8c:	fffff097          	auipc	ra,0xfffff
    80202d90:	e82080e7          	jalr	-382(ra) # 80201c0e <pageAlloc>
    return page - pages;
    80202d94:	fc843603          	ld	a2,-56(s0)
    80202d98:	41460633          	sub	a2,a2,s4
    80202d9c:	860d                	srai	a2,a2,0x3
    80202d9e:	03360633          	mul	a2,a2,s3
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80202da2:	00c6161b          	slliw	a2,a2,0xc
    80202da6:	1602                	slli	a2,a2,0x20
    80202da8:	9201                	srli	a2,a2,0x20
    pageInsert(p->pgdir, USER_STACK_TOP - PGSIZE, page2pa(page), PTE_USER | PTE_READ | PTE_WRITE | PTE_EXECUTE); // We must alloc the stack
    80202daa:	46f9                	li	a3,30
    80202dac:	964a                	add	a2,a2,s2
    80202dae:	04000937          	lui	s2,0x4000
    80202db2:	ffd90593          	addi	a1,s2,-3 # 3fffffd <_start-0x7c200003>
    80202db6:	05b2                	slli	a1,a1,0xc
    80202db8:	1684b503          	ld	a0,360(s1)
    80202dbc:	fffff097          	auipc	ra,0xfffff
    80202dc0:	1de080e7          	jalr	478(ra) # 80201f9a <pageInsert>
    pageInsert(p->pgdir, TRAMPOLINE_BASE, (u64)trampoline, 
    80202dc4:	46b9                	li	a3,14
    80202dc6:	00007617          	auipc	a2,0x7
    80202dca:	23a60613          	addi	a2,a2,570 # 8020a000 <_trampoline>
    80202dce:	020005b7          	lui	a1,0x2000
    80202dd2:	15fd                	addi	a1,a1,-1
    80202dd4:	05b6                	slli	a1,a1,0xd
    80202dd6:	1684b503          	ld	a0,360(s1)
    80202dda:	fffff097          	auipc	ra,0xfffff
    80202dde:	1c0080e7          	jalr	448(ra) # 80201f9a <pageInsert>
    pageInsert(p->pgdir, TRAMPOLINE_BASE + PAGE_SIZE, ((u64)trampoline) + PAGE_SIZE, 
    80202de2:	46b9                	li	a3,14
    80202de4:	00008617          	auipc	a2,0x8
    80202de8:	21c60613          	addi	a2,a2,540 # 8020b000 <trapframe>
    80202dec:	fff90593          	addi	a1,s2,-1
    80202df0:	05b2                	slli	a1,a1,0xc
    80202df2:	1684b503          	ld	a0,360(s1)
    80202df6:	fffff097          	auipc	ra,0xfffff
    80202dfa:	1a4080e7          	jalr	420(ra) # 80201f9a <pageInsert>
}
    80202dfe:	4501                	li	a0,0
    80202e00:	70e2                	ld	ra,56(sp)
    80202e02:	7442                	ld	s0,48(sp)
    80202e04:	74a2                	ld	s1,40(sp)
    80202e06:	7902                	ld	s2,32(sp)
    80202e08:	69e2                	ld	s3,24(sp)
    80202e0a:	6a42                	ld	s4,16(sp)
    80202e0c:	6121                	addi	sp,sp,64
    80202e0e:	8082                	ret
        panic("setup page alloc error\n");
    80202e10:	0000a697          	auipc	a3,0xa
    80202e14:	88068693          	addi	a3,a3,-1920 # 8020c690 <__func__.1+0xc0>
    80202e18:	0000a617          	auipc	a2,0xa
    80202e1c:	43860613          	addi	a2,a2,1080 # 8020d250 <__func__.2>
    80202e20:	09400593          	li	a1,148
    80202e24:	00009517          	auipc	a0,0x9
    80202e28:	7dc50513          	addi	a0,a0,2012 # 8020c600 <__func__.1+0x30>
    80202e2c:	ffffe097          	auipc	ra,0xffffe
    80202e30:	d20080e7          	jalr	-736(ra) # 80200b4c <_panic_>

0000000080202e34 <processAlloc>:
int processAlloc(Process **new, u64 parentId) {
    80202e34:	7179                	addi	sp,sp,-48
    80202e36:	f406                	sd	ra,40(sp)
    80202e38:	f022                	sd	s0,32(sp)
    80202e3a:	ec26                	sd	s1,24(sp)
    80202e3c:	e84a                	sd	s2,16(sp)
    80202e3e:	e44e                	sd	s3,8(sp)
    80202e40:	1800                	addi	s0,sp,48
    80202e42:	89aa                	mv	s3,a0
    80202e44:	892e                	mv	s2,a1
    acquireLock(&freeProcessesLock);
    80202e46:	00280517          	auipc	a0,0x280
    80202e4a:	69250513          	addi	a0,a0,1682 # 804834d8 <freeProcessesLock>
    80202e4e:	00003097          	auipc	ra,0x3
    80202e52:	c60080e7          	jalr	-928(ra) # 80205aae <acquireLock>
    if (LIST_EMPTY(&freeProcesses)) {
    80202e56:	003fa497          	auipc	s1,0x3fa
    80202e5a:	7424b483          	ld	s1,1858(s1) # 805fd598 <freeProcesses>
    80202e5e:	ccad                	beqz	s1,80202ed8 <processAlloc+0xa4>
    LIST_REMOVE(p, link);
    80202e60:	1504b783          	ld	a5,336(s1)
    80202e64:	c789                	beqz	a5,80202e6e <processAlloc+0x3a>
    80202e66:	1584b703          	ld	a4,344(s1)
    80202e6a:	14e7bc23          	sd	a4,344(a5)
    80202e6e:	1584b783          	ld	a5,344(s1)
    80202e72:	1504b703          	ld	a4,336(s1)
    80202e76:	e398                	sd	a4,0(a5)
    releaseLock(&freeProcessesLock);
    80202e78:	00280517          	auipc	a0,0x280
    80202e7c:	66050513          	addi	a0,a0,1632 # 804834d8 <freeProcessesLock>
    80202e80:	00003097          	auipc	ra,0x3
    80202e84:	caa080e7          	jalr	-854(ra) # 80205b2a <releaseLock>
    if ((r = setup(p)) < 0) {
    80202e88:	8526                	mv	a0,s1
    80202e8a:	00000097          	auipc	ra,0x0
    80202e8e:	dfa080e7          	jalr	-518(ra) # 80202c84 <setup>
    80202e92:	02054c63          	bltz	a0,80202eca <processAlloc+0x96>
    p->id = generateProcessId(p);
    80202e96:	8526                	mv	a0,s1
    80202e98:	00000097          	auipc	ra,0x0
    80202e9c:	d06080e7          	jalr	-762(ra) # 80202b9e <generateProcessId>
    80202ea0:	16a4a823          	sw	a0,368(s1)
    p->state = RUNNABLE;
    80202ea4:	4789                	li	a5,2
    80202ea6:	18f4a623          	sw	a5,396(s1)
    p->parentId = parentId;
    80202eaa:	1724aa23          	sw	s2,372(s1)
    p->trapframe.kernelSp = getProcessTopSp(p);
    80202eae:	8526                	mv	a0,s1
    80202eb0:	00000097          	auipc	ra,0x0
    80202eb4:	b5c080e7          	jalr	-1188(ra) # 80202a0c <getProcessTopSp>
    80202eb8:	e488                	sd	a0,8(s1)
    p->trapframe.sp = USER_STACK_TOP - 24; //argc = 0, argv = 0, envp = 0
    80202eba:	bfd00793          	li	a5,-1027
    80202ebe:	07f6                	slli	a5,a5,0x1d
    80202ec0:	83e9                	srli	a5,a5,0x1a
    80202ec2:	f89c                	sd	a5,48(s1)
    *new = p;
    80202ec4:	0099b023          	sd	s1,0(s3)
    return 0;
    80202ec8:	4501                	li	a0,0
}
    80202eca:	70a2                	ld	ra,40(sp)
    80202ecc:	7402                	ld	s0,32(sp)
    80202ece:	64e2                	ld	s1,24(sp)
    80202ed0:	6942                	ld	s2,16(sp)
    80202ed2:	69a2                	ld	s3,8(sp)
    80202ed4:	6145                	addi	sp,sp,48
    80202ed6:	8082                	ret
        releaseLock(&freeProcessesLock);
    80202ed8:	00280517          	auipc	a0,0x280
    80202edc:	60050513          	addi	a0,a0,1536 # 804834d8 <freeProcessesLock>
    80202ee0:	00003097          	auipc	ra,0x3
    80202ee4:	c4a080e7          	jalr	-950(ra) # 80205b2a <releaseLock>
        *new = NULL;
    80202ee8:	0009b023          	sd	zero,0(s3)
        return -NO_FREE_PROCESS;
    80202eec:	556d                	li	a0,-5
    80202eee:	bff1                	j	80202eca <processAlloc+0x96>

0000000080202ef0 <processCreatePriority>:

void processCreatePriority(u8 *binary, u32 size, u32 priority) {
    80202ef0:	7139                	addi	sp,sp,-64
    80202ef2:	fc06                	sd	ra,56(sp)
    80202ef4:	f822                	sd	s0,48(sp)
    80202ef6:	f426                	sd	s1,40(sp)
    80202ef8:	f04a                	sd	s2,32(sp)
    80202efa:	ec4e                	sd	s3,24(sp)
    80202efc:	e852                	sd	s4,16(sp)
    80202efe:	0080                	addi	s0,sp,64
    80202f00:	892a                	mv	s2,a0
    80202f02:	89ae                	mv	s3,a1
    80202f04:	8a32                	mv	s4,a2
    Process *p;
    int r = processAlloc(&p, 0);
    80202f06:	4581                	li	a1,0
    80202f08:	fc840513          	addi	a0,s0,-56
    80202f0c:	00000097          	auipc	ra,0x0
    80202f10:	f28080e7          	jalr	-216(ra) # 80202e34 <processAlloc>
    if (r < 0) {
    80202f14:	08054263          	bltz	a0,80202f98 <processCreatePriority+0xa8>
        return;
    }
    p->priority = priority;
    80202f18:	fc843483          	ld	s1,-56(s0)
    80202f1c:	1944a423          	sw	s4,392(s1)
    u64 entryPoint;
    if (loadElf(binary, size, &entryPoint, p, codeMapper) < 0) {
    80202f20:	fffff717          	auipc	a4,0xfffff
    80202f24:	72670713          	addi	a4,a4,1830 # 80202646 <codeMapper>
    80202f28:	86a6                	mv	a3,s1
    80202f2a:	fc040613          	addi	a2,s0,-64
    80202f2e:	85ce                	mv	a1,s3
    80202f30:	854a                	mv	a0,s2
    80202f32:	fffff097          	auipc	ra,0xfffff
    80202f36:	5b2080e7          	jalr	1458(ra) # 802024e4 <loadElf>
    80202f3a:	06054763          	bltz	a0,80202fa8 <processCreatePriority+0xb8>
        panic("process create error\n");
    }
    p->trapframe.epc = entryPoint;
    80202f3e:	fc043783          	ld	a5,-64(s0)
    80202f42:	ec9c                	sd	a5,24(s1)

    acquireLock(&scheduleListLock);
    80202f44:	00280517          	auipc	a0,0x280
    80202f48:	5ac50513          	addi	a0,a0,1452 # 804834f0 <scheduleListLock>
    80202f4c:	00003097          	auipc	ra,0x3
    80202f50:	b62080e7          	jalr	-1182(ra) # 80205aae <acquireLock>
    LIST_INSERT_TAIL(&scheduleList[0], p, scheduleLink);
    80202f54:	00280717          	auipc	a4,0x280
    80202f58:	5fc73703          	ld	a4,1532(a4) # 80483550 <scheduleList>
    80202f5c:	cb25                	beqz	a4,80202fcc <processCreatePriority+0xdc>
    80202f5e:	16e4bc23          	sd	a4,376(s1)
    80202f62:	17873783          	ld	a5,376(a4)
    80202f66:	c799                	beqz	a5,80202f74 <processCreatePriority+0x84>
    80202f68:	16f4bc23          	sd	a5,376(s1)
    80202f6c:	873e                	mv	a4,a5
    80202f6e:	1787b783          	ld	a5,376(a5)
    80202f72:	fbfd                	bnez	a5,80202f68 <processCreatePriority+0x78>
    80202f74:	16973c23          	sd	s1,376(a4)
    80202f78:	1784b783          	ld	a5,376(s1)
    80202f7c:	17878793          	addi	a5,a5,376
    80202f80:	18f4b023          	sd	a5,384(s1)
    80202f84:	1604bc23          	sd	zero,376(s1)
    releaseLock(&scheduleListLock);
    80202f88:	00280517          	auipc	a0,0x280
    80202f8c:	56850513          	addi	a0,a0,1384 # 804834f0 <scheduleListLock>
    80202f90:	00003097          	auipc	ra,0x3
    80202f94:	b9a080e7          	jalr	-1126(ra) # 80205b2a <releaseLock>
}
    80202f98:	70e2                	ld	ra,56(sp)
    80202f9a:	7442                	ld	s0,48(sp)
    80202f9c:	74a2                	ld	s1,40(sp)
    80202f9e:	7902                	ld	s2,32(sp)
    80202fa0:	69e2                	ld	s3,24(sp)
    80202fa2:	6a42                	ld	s4,16(sp)
    80202fa4:	6121                	addi	sp,sp,64
    80202fa6:	8082                	ret
        panic("process create error\n");
    80202fa8:	00009697          	auipc	a3,0x9
    80202fac:	70068693          	addi	a3,a3,1792 # 8020c6a8 <__func__.1+0xd8>
    80202fb0:	00009617          	auipc	a2,0x9
    80202fb4:	74060613          	addi	a2,a2,1856 # 8020c6f0 <__func__.1>
    80202fb8:	10d00593          	li	a1,269
    80202fbc:	00009517          	auipc	a0,0x9
    80202fc0:	64450513          	addi	a0,a0,1604 # 8020c600 <__func__.1+0x30>
    80202fc4:	ffffe097          	auipc	ra,0xffffe
    80202fc8:	b88080e7          	jalr	-1144(ra) # 80200b4c <_panic_>
    LIST_INSERT_TAIL(&scheduleList[0], p, scheduleLink);
    80202fcc:	1604bc23          	sd	zero,376(s1)
    80202fd0:	00280797          	auipc	a5,0x280
    80202fd4:	5897b023          	sd	s1,1408(a5) # 80483550 <scheduleList>
    80202fd8:	00280797          	auipc	a5,0x280
    80202fdc:	57878793          	addi	a5,a5,1400 # 80483550 <scheduleList>
    80202fe0:	18f4b023          	sd	a5,384(s1)
    80202fe4:	b755                	j	80202f88 <processCreatePriority+0x98>

0000000080202fe6 <processRun>:

void sleepRec();
void processRun(Process* p) {
    80202fe6:	7139                	addi	sp,sp,-64
    80202fe8:	fc06                	sd	ra,56(sp)
    80202fea:	f822                	sd	s0,48(sp)
    80202fec:	f426                	sd	s1,40(sp)
    80202fee:	f04a                	sd	s2,32(sp)
    80202ff0:	ec4e                	sd	s3,24(sp)
    80202ff2:	e852                	sd	s4,16(sp)
    80202ff4:	0080                	addi	s0,sp,64
    80202ff6:	84aa                	mv	s1,a0
    static volatile int first = 0;
    Trapframe* trapframe = getHartTrapFrame();
    80202ff8:	00003097          	auipc	ra,0x3
    80202ffc:	bac080e7          	jalr	-1108(ra) # 80205ba4 <getHartTrapFrame>
    80203000:	892a                	mv	s2,a0
    80203002:	8712                	mv	a4,tp
    if (currentProcess[r_hartid()]) {
    80203004:	070e                	slli	a4,a4,0x3
    80203006:	00280797          	auipc	a5,0x280
    8020300a:	4aa78793          	addi	a5,a5,1194 # 804834b0 <currentProcess>
    8020300e:	97ba                	add	a5,a5,a4
    80203010:	639c                	ld	a5,0(a5)
    80203012:	cf99                	beqz	a5,80203030 <processRun+0x4a>
    80203014:	8712                	mv	a4,tp
        bcopy(trapframe, &(currentProcess[r_hartid()]->trapframe),
    80203016:	070e                	slli	a4,a4,0x3
    80203018:	00280797          	auipc	a5,0x280
    8020301c:	49878793          	addi	a5,a5,1176 # 804834b0 <currentProcess>
    80203020:	97ba                	add	a5,a5,a4
    80203022:	12000613          	li	a2,288
    80203026:	638c                	ld	a1,0(a5)
    80203028:	fffff097          	auipc	ra,0xfffff
    8020302c:	a26080e7          	jalr	-1498(ra) # 80201a4e <bcopy>
              sizeof(Trapframe));
    }

    p->state = RUNNING;
    80203030:	478d                	li	a5,3
    80203032:	18f4a623          	sw	a5,396(s1)
    if (p->reason == 1) {
    80203036:	5c04a703          	lw	a4,1472(s1)
    8020303a:	4785                	li	a5,1
    8020303c:	06f70563          	beq	a4,a5,802030a6 <processRun+0xc0>
    80203040:	8712                	mv	a4,tp
        asm volatile("ld sp, 0(%0)" : : "r"(&p->currentKernelSp));
        // releaseLock(&currentProcessLock);
        sleepRec();
    } else {
        // acquireLock(&currentProcessLock);
        currentProcess[r_hartid()] = p;
    80203042:	070e                	slli	a4,a4,0x3
    80203044:	00280797          	auipc	a5,0x280
    80203048:	46c78793          	addi	a5,a5,1132 # 804834b0 <currentProcess>
    8020304c:	97ba                	add	a5,a5,a4
    8020304e:	e384                	sd	s1,0(a5)
        if (first == 0) {
    80203050:	003fa797          	auipc	a5,0x3fa
    80203054:	5407a783          	lw	a5,1344(a5) # 805fd590 <first.0>
    80203058:	c7c9                	beqz	a5,802030e2 <processRun+0xfc>
    8020305a:	8712                	mv	a4,tp
            eput(ep);
            ep = create(AT_FDCWD, "/dev/vda2", T_DIR, O_RDONLY);
            ep->head = &rootFileSystem;            
            eunlock(ep);
        }
        bcopy(&(currentProcess[r_hartid()]->trapframe), trapframe, sizeof(Trapframe));
    8020305c:	070e                	slli	a4,a4,0x3
    8020305e:	00280797          	auipc	a5,0x280
    80203062:	45278793          	addi	a5,a5,1106 # 804834b0 <currentProcess>
    80203066:	97ba                	add	a5,a5,a4
    80203068:	12000613          	li	a2,288
    8020306c:	85ca                	mv	a1,s2
    8020306e:	6388                	ld	a0,0(a5)
    80203070:	fffff097          	auipc	ra,0xfffff
    80203074:	9de080e7          	jalr	-1570(ra) # 80201a4e <bcopy>
        u64 sp = getHartKernelTopSp(p);
    80203078:	8526                	mv	a0,s1
    8020307a:	00003097          	auipc	ra,0x3
    8020307e:	b4a080e7          	jalr	-1206(ra) # 80205bc4 <getHartKernelTopSp>
    80203082:	fca43423          	sd	a0,-56(s0)
        asm volatile("ld sp, 0(%0)" : :"r"(&sp): "memory");
    80203086:	fc840793          	addi	a5,s0,-56
    8020308a:	0007b103          	ld	sp,0(a5)
        // releaseLock(&currentProcessLock);
        userTrapReturn();
    8020308e:	00002097          	auipc	ra,0x2
    80203092:	942080e7          	jalr	-1726(ra) # 802049d0 <userTrapReturn>
    }
}
    80203096:	70e2                	ld	ra,56(sp)
    80203098:	7442                	ld	s0,48(sp)
    8020309a:	74a2                	ld	s1,40(sp)
    8020309c:	7902                	ld	s2,32(sp)
    8020309e:	69e2                	ld	s3,24(sp)
    802030a0:	6a42                	ld	s4,16(sp)
    802030a2:	6121                	addi	sp,sp,64
    802030a4:	8082                	ret
        p->reason = 0;
    802030a6:	5c04a023          	sw	zero,1472(s1)
    802030aa:	8792                	mv	a5,tp
        currentProcess[r_hartid()] = p;
    802030ac:	00280717          	auipc	a4,0x280
    802030b0:	40470713          	addi	a4,a4,1028 # 804834b0 <currentProcess>
    802030b4:	078e                	slli	a5,a5,0x3
    802030b6:	97ba                	add	a5,a5,a4
    802030b8:	e384                	sd	s1,0(a5)
    802030ba:	8792                	mv	a5,tp
        bcopy(&currentProcess[r_hartid()]->trapframe, trapframe, sizeof(Trapframe));
    802030bc:	078e                	slli	a5,a5,0x3
    802030be:	973e                	add	a4,a4,a5
    802030c0:	12000613          	li	a2,288
    802030c4:	85ca                	mv	a1,s2
    802030c6:	6308                	ld	a0,0(a4)
    802030c8:	fffff097          	auipc	ra,0xfffff
    802030cc:	986080e7          	jalr	-1658(ra) # 80201a4e <bcopy>
        asm volatile("ld sp, 0(%0)" : : "r"(&p->currentKernelSp));
    802030d0:	5b848493          	addi	s1,s1,1464
    802030d4:	0004b103          	ld	sp,0(s1)
        sleepRec();
    802030d8:	00001097          	auipc	ra,0x1
    802030dc:	b18080e7          	jalr	-1256(ra) # 80203bf0 <sleepRec>
    802030e0:	bf5d                	j	80203096 <processRun+0xb0>
            first = 1;
    802030e2:	4785                	li	a5,1
    802030e4:	003fa717          	auipc	a4,0x3fa
    802030e8:	4af72623          	sw	a5,1196(a4) # 805fd590 <first.0>
            rootFileSystem.name[0] = 'f';
    802030ec:	003fa997          	auipc	s3,0x3fa
    802030f0:	4e498993          	addi	s3,s3,1252 # 805fd5d0 <rootFileSystem>
    802030f4:	06600793          	li	a5,102
    802030f8:	00f980a3          	sb	a5,1(s3)
            rootFileSystem.name[1] = 'a';
    802030fc:	06100793          	li	a5,97
    80203100:	00f98123          	sb	a5,2(s3)
            rootFileSystem.name[2] = 't';
    80203104:	07400793          	li	a5,116
    80203108:	00f981a3          	sb	a5,3(s3)
            rootFileSystem.name[3] = '3';
    8020310c:	03300793          	li	a5,51
    80203110:	00f98223          	sb	a5,4(s3)
            rootFileSystem.name[4] = '2';
    80203114:	03200793          	li	a5,50
    80203118:	00f982a3          	sb	a5,5(s3)
            rootFileSystem.read = blockRead;
    8020311c:	00004797          	auipc	a5,0x4
    80203120:	66078793          	addi	a5,a5,1632 # 8020777c <blockRead>
    80203124:	1ef9bc23          	sd	a5,504(s3)
            fatInit(&rootFileSystem);
    80203128:	854e                	mv	a0,s3
    8020312a:	00003097          	auipc	ra,0x3
    8020312e:	ea8080e7          	jalr	-344(ra) # 80205fd2 <fatInit>
            initDirentCache();
    80203132:	00003097          	auipc	ra,0x3
    80203136:	008080e7          	jalr	8(ra) # 8020613a <initDirentCache>
            printf("init dirent end\n");
    8020313a:	00009517          	auipc	a0,0x9
    8020313e:	58650513          	addi	a0,a0,1414 # 8020c6c0 <__func__.1+0xf0>
    80203142:	ffffe097          	auipc	ra,0xffffe
    80203146:	97e080e7          	jalr	-1666(ra) # 80200ac0 <printf>
            testfat();
    8020314a:	00007097          	auipc	ra,0x7
    8020314e:	bee080e7          	jalr	-1042(ra) # 80209d38 <testfat>
            struct dirent* ep = create(AT_FDCWD, "/dev", T_DIR, O_RDONLY);
    80203152:	4681                	li	a3,0
    80203154:	4605                	li	a2,1
    80203156:	00009597          	auipc	a1,0x9
    8020315a:	58258593          	addi	a1,a1,1410 # 8020c6d8 <__func__.1+0x108>
    8020315e:	f9c00513          	li	a0,-100
    80203162:	00006097          	auipc	ra,0x6
    80203166:	25c080e7          	jalr	604(ra) # 802093be <create>
    8020316a:	8a2a                	mv	s4,a0
            eunlock(ep);
    8020316c:	00006097          	auipc	ra,0x6
    80203170:	8c2080e7          	jalr	-1854(ra) # 80208a2e <eunlock>
            eput(ep);
    80203174:	8552                	mv	a0,s4
    80203176:	00006097          	auipc	ra,0x6
    8020317a:	91a080e7          	jalr	-1766(ra) # 80208a90 <eput>
            ep = create(AT_FDCWD, "/dev/vda2", T_DIR, O_RDONLY);
    8020317e:	4681                	li	a3,0
    80203180:	4605                	li	a2,1
    80203182:	00009597          	auipc	a1,0x9
    80203186:	55e58593          	addi	a1,a1,1374 # 8020c6e0 <__func__.1+0x110>
    8020318a:	f9c00513          	li	a0,-100
    8020318e:	00006097          	auipc	ra,0x6
    80203192:	230080e7          	jalr	560(ra) # 802093be <create>
            ep->head = &rootFileSystem;            
    80203196:	13353423          	sd	s3,296(a0)
            eunlock(ep);
    8020319a:	00006097          	auipc	ra,0x6
    8020319e:	894080e7          	jalr	-1900(ra) # 80208a2e <eunlock>
    802031a2:	bd65                	j	8020305a <processRun+0x74>

00000000802031a4 <wakeup>:
        // printf("[WAIT]porcess id %x wait for %x\n", p->id, p);
        sleep(p, &waitLock);
    }
}

void wakeup(void* channel) {
    802031a4:	715d                	addi	sp,sp,-80
    802031a6:	e486                	sd	ra,72(sp)
    802031a8:	e0a2                	sd	s0,64(sp)
    802031aa:	fc26                	sd	s1,56(sp)
    802031ac:	f84a                	sd	s2,48(sp)
    802031ae:	f44e                	sd	s3,40(sp)
    802031b0:	f052                	sd	s4,32(sp)
    802031b2:	ec56                	sd	s5,24(sp)
    802031b4:	e85a                	sd	s6,16(sp)
    802031b6:	e45e                	sd	s7,8(sp)
    802031b8:	0880                	addi	s0,sp,80
    802031ba:	8b2a                	mv	s6,a0
    for (int i = 0; i < PROCESS_TOTAL_NUMBER; ++i) {
    802031bc:	00280497          	auipc	s1,0x280
    802031c0:	3d448493          	addi	s1,s1,980 # 80483590 <processes>
    802031c4:	003faa17          	auipc	s4,0x3fa
    802031c8:	3cca0a13          	addi	s4,s4,972 # 805fd590 <first.0>
        if (&processes[i] != myproc()) {
            acquireLock(&processes[i].lock);
            // printf("%d %x %x\n", i, processes[i].state, processes[i].chan);
            if (processes[i].state == SLEEPING &&
    802031cc:	4a85                	li	s5,1
                processes[i].chan == (u64)channel) {
                processes[i].state = RUNNABLE;
    802031ce:	4b89                	li	s7,2
    802031d0:	a811                	j	802031e4 <wakeup+0x40>
                // printf("[wake up]%x\n", processes[i].id);
            }
            releaseLock(&processes[i].lock);
    802031d2:	854a                	mv	a0,s2
    802031d4:	00003097          	auipc	ra,0x3
    802031d8:	956080e7          	jalr	-1706(ra) # 80205b2a <releaseLock>
    for (int i = 0; i < PROCESS_TOTAL_NUMBER; ++i) {
    802031dc:	5e848493          	addi	s1,s1,1512
    802031e0:	03448a63          	beq	s1,s4,80203214 <wakeup+0x70>
        if (&processes[i] != myproc()) {
    802031e4:	fffff097          	auipc	ra,0xfffff
    802031e8:	7cc080e7          	jalr	1996(ra) # 802029b0 <myproc>
    802031ec:	fe9508e3          	beq	a0,s1,802031dc <wakeup+0x38>
            acquireLock(&processes[i].lock);
    802031f0:	19048913          	addi	s2,s1,400
    802031f4:	854a                	mv	a0,s2
    802031f6:	00003097          	auipc	ra,0x3
    802031fa:	8b8080e7          	jalr	-1864(ra) # 80205aae <acquireLock>
            if (processes[i].state == SLEEPING &&
    802031fe:	18c4a783          	lw	a5,396(s1)
    80203202:	fd5798e3          	bne	a5,s5,802031d2 <wakeup+0x2e>
    80203206:	5b04b783          	ld	a5,1456(s1)
    8020320a:	fcfb14e3          	bne	s6,a5,802031d2 <wakeup+0x2e>
                processes[i].state = RUNNABLE;
    8020320e:	1974a623          	sw	s7,396(s1)
    80203212:	b7c1                	j	802031d2 <wakeup+0x2e>
        }
    }
}
    80203214:	60a6                	ld	ra,72(sp)
    80203216:	6406                	ld	s0,64(sp)
    80203218:	74e2                	ld	s1,56(sp)
    8020321a:	7942                	ld	s2,48(sp)
    8020321c:	79a2                	ld	s3,40(sp)
    8020321e:	7a02                	ld	s4,32(sp)
    80203220:	6ae2                	ld	s5,24(sp)
    80203222:	6b42                	ld	s6,16(sp)
    80203224:	6ba2                	ld	s7,8(sp)
    80203226:	6161                	addi	sp,sp,80
    80203228:	8082                	ret

000000008020322a <either_copyout>:
static int processTimeCount[HART_TOTAL_NUMBER] = {0, 0, 0, 0, 0};
static int processBelongList[HART_TOTAL_NUMBER] = {0, 0, 0, 0, 0};
// Copy to either a user address, or kernel address,
// depending on usr_dst.
// Returns 0 on success, -1 on error.
int either_copyout(int user_dst, u64 dst, void* src, u64 len) {
    8020322a:	7179                	addi	sp,sp,-48
    8020322c:	f406                	sd	ra,40(sp)
    8020322e:	f022                	sd	s0,32(sp)
    80203230:	ec26                	sd	s1,24(sp)
    80203232:	e84a                	sd	s2,16(sp)
    80203234:	e44e                	sd	s3,8(sp)
    80203236:	e052                	sd	s4,0(sp)
    80203238:	1800                	addi	s0,sp,48
    8020323a:	892e                	mv	s2,a1
    8020323c:	89b2                	mv	s3,a2
    8020323e:	8a36                	mv	s4,a3
    if (user_dst) {
    80203240:	c515                	beqz	a0,8020326c <either_copyout+0x42>
        struct Process* p = myproc();//because only this branch uses p->pgdir, so it need call myproc
    80203242:	fffff097          	auipc	ra,0xfffff
    80203246:	76e080e7          	jalr	1902(ra) # 802029b0 <myproc>
        return copyout(p->pgdir, dst, src, len);
    8020324a:	86d2                	mv	a3,s4
    8020324c:	864e                	mv	a2,s3
    8020324e:	85ca                	mv	a1,s2
    80203250:	16853503          	ld	a0,360(a0)
    80203254:	fffff097          	auipc	ra,0xfffff
    80203258:	15a080e7          	jalr	346(ra) # 802023ae <copyout>
    } else {
        memmove((char*)dst, src, len);
        return 0;
    }
}
    8020325c:	70a2                	ld	ra,40(sp)
    8020325e:	7402                	ld	s0,32(sp)
    80203260:	64e2                	ld	s1,24(sp)
    80203262:	6942                	ld	s2,16(sp)
    80203264:	69a2                	ld	s3,8(sp)
    80203266:	6a02                	ld	s4,0(sp)
    80203268:	6145                	addi	sp,sp,48
    8020326a:	8082                	ret
    8020326c:	84aa                	mv	s1,a0
        memmove((char*)dst, src, len);
    8020326e:	0006861b          	sext.w	a2,a3
    80203272:	85ce                	mv	a1,s3
    80203274:	854a                	mv	a0,s2
    80203276:	00003097          	auipc	ra,0x3
    8020327a:	b4a080e7          	jalr	-1206(ra) # 80205dc0 <memmove>
        return 0;
    8020327e:	8526                	mv	a0,s1
    80203280:	bff1                	j	8020325c <either_copyout+0x32>

0000000080203282 <either_copyin>:

// Copy from either a user address, or kernel address,
// depending on usr_src.
// Returns 0 on success, -1 on error.
int either_copyin(void* dst, int user_src, u64 src, u64 len) {
    80203282:	7179                	addi	sp,sp,-48
    80203284:	f406                	sd	ra,40(sp)
    80203286:	f022                	sd	s0,32(sp)
    80203288:	ec26                	sd	s1,24(sp)
    8020328a:	e84a                	sd	s2,16(sp)
    8020328c:	e44e                	sd	s3,8(sp)
    8020328e:	e052                	sd	s4,0(sp)
    80203290:	1800                	addi	s0,sp,48
    80203292:	892a                	mv	s2,a0
    80203294:	89b2                	mv	s3,a2
    80203296:	8a36                	mv	s4,a3
    if (user_src) {
    80203298:	c595                	beqz	a1,802032c4 <either_copyin+0x42>
        struct Process* p = myproc();//because only this branch uses p->pgdir, so it need call myproc
    8020329a:	fffff097          	auipc	ra,0xfffff
    8020329e:	716080e7          	jalr	1814(ra) # 802029b0 <myproc>
        return copyin(p->pgdir, dst, src, len);
    802032a2:	86d2                	mv	a3,s4
    802032a4:	864e                	mv	a2,s3
    802032a6:	85ca                	mv	a1,s2
    802032a8:	16853503          	ld	a0,360(a0)
    802032ac:	fffff097          	auipc	ra,0xfffff
    802032b0:	070080e7          	jalr	112(ra) # 8020231c <copyin>
    } else {
        memmove(dst, (char*)src, len);
        return 0;
    }
}
    802032b4:	70a2                	ld	ra,40(sp)
    802032b6:	7402                	ld	s0,32(sp)
    802032b8:	64e2                	ld	s1,24(sp)
    802032ba:	6942                	ld	s2,16(sp)
    802032bc:	69a2                	ld	s3,8(sp)
    802032be:	6a02                	ld	s4,0(sp)
    802032c0:	6145                	addi	sp,sp,48
    802032c2:	8082                	ret
    802032c4:	84ae                	mv	s1,a1
        memmove(dst, (char*)src, len);
    802032c6:	0006861b          	sext.w	a2,a3
    802032ca:	85ce                	mv	a1,s3
    802032cc:	00003097          	auipc	ra,0x3
    802032d0:	af4080e7          	jalr	-1292(ra) # 80205dc0 <memmove>
        return 0;
    802032d4:	8526                	mv	a0,s1
    802032d6:	bff9                	j	802032b4 <either_copyin+0x32>

00000000802032d8 <yield>:

void yield() {
    802032d8:	711d                	addi	sp,sp,-96
    802032da:	ec86                	sd	ra,88(sp)
    802032dc:	e8a2                	sd	s0,80(sp)
    802032de:	e4a6                	sd	s1,72(sp)
    802032e0:	e0ca                	sd	s2,64(sp)
    802032e2:	fc4e                	sd	s3,56(sp)
    802032e4:	f852                	sd	s4,48(sp)
    802032e6:	f456                	sd	s5,40(sp)
    802032e8:	f05a                	sd	s6,32(sp)
    802032ea:	ec5e                	sd	s7,24(sp)
    802032ec:	e862                	sd	s8,16(sp)
    802032ee:	e466                	sd	s9,8(sp)
    802032f0:	1080                	addi	s0,sp,96
    802032f2:	8c12                	mv	s8,tp
    int hartId = r_hartid();
    802032f4:	2c01                	sext.w	s8,s8
    int count = processTimeCount[hartId];
    802032f6:	00280797          	auipc	a5,0x280
    802032fa:	1ba78793          	addi	a5,a5,442 # 804834b0 <currentProcess>
    802032fe:	002c1713          	slli	a4,s8,0x2
    80203302:	973e                	add	a4,a4,a5
    80203304:	0b072c83          	lw	s9,176(a4)
    int point = processBelongList[hartId];
    80203308:	0c872903          	lw	s2,200(a4)
    Process* process = currentProcess[hartId];
    8020330c:	003c1713          	slli	a4,s8,0x3
    80203310:	97ba                	add	a5,a5,a4
    80203312:	6384                	ld	s1,0(a5)
    acquireLock(&scheduleListLock);
    80203314:	00280517          	auipc	a0,0x280
    80203318:	1dc50513          	addi	a0,a0,476 # 804834f0 <scheduleListLock>
    8020331c:	00002097          	auipc	ra,0x2
    80203320:	792080e7          	jalr	1938(ra) # 80205aae <acquireLock>
    if (process && process->state == RUNNING) {
    80203324:	c491                	beqz	s1,80203330 <yield+0x58>
    80203326:	18c4a703          	lw	a4,396(s1)
    8020332a:	478d                	li	a5,3
    8020332c:	02f70163          	beq	a4,a5,8020334e <yield+0x76>
        if(process->reason==1){
            bcopy(getHartTrapFrame(), &process->trapframe, sizeof(Trapframe));
        }
        process->state = RUNNABLE;
    }
    while ((count == 0) || !process || (process->state != RUNNABLE) || process->awakeTime > r_time()) {
    80203330:	4b89                	li	s7,2
            point ^= 1;
        // printf("[POS1]now hart id %x: %x\n", hartId, process);
        if (!(LIST_EMPTY(&scheduleList[point]))) {
            process = LIST_FIRST(&scheduleList[point]);
            LIST_REMOVE(process, scheduleLink);
            count = 1;
    80203332:	4a85                	li	s5,1
        if (LIST_EMPTY(&scheduleList[point]))
    80203334:	00280997          	auipc	s3,0x280
    80203338:	17c98993          	addi	s3,s3,380 # 804834b0 <currentProcess>
            LIST_INSERT_TAIL(&scheduleList[point ^ 1], process, scheduleLink);
    8020333c:	00280b17          	auipc	s6,0x280
    80203340:	214b0b13          	addi	s6,s6,532 # 80483550 <scheduleList>
        }
        releaseLock(&scheduleListLock);
    80203344:	00280a17          	auipc	s4,0x280
    80203348:	1aca0a13          	addi	s4,s4,428 # 804834f0 <scheduleListLock>
    8020334c:	a059                	j	802033d2 <yield+0xfa>
        if(process->reason==1){
    8020334e:	5c04a703          	lw	a4,1472(s1)
    80203352:	4785                	li	a5,1
    80203354:	00f70663          	beq	a4,a5,80203360 <yield+0x88>
        process->state = RUNNABLE;
    80203358:	4789                	li	a5,2
    8020335a:	18f4a623          	sw	a5,396(s1)
    8020335e:	bfc9                	j	80203330 <yield+0x58>
            bcopy(getHartTrapFrame(), &process->trapframe, sizeof(Trapframe));
    80203360:	00003097          	auipc	ra,0x3
    80203364:	844080e7          	jalr	-1980(ra) # 80205ba4 <getHartTrapFrame>
    80203368:	12000613          	li	a2,288
    8020336c:	85a6                	mv	a1,s1
    8020336e:	ffffe097          	auipc	ra,0xffffe
    80203372:	6e0080e7          	jalr	1760(ra) # 80201a4e <bcopy>
    80203376:	b7cd                	j	80203358 <yield+0x80>
        if (process)
    80203378:	c8e5                	beqz	s1,80203468 <yield+0x190>
            LIST_INSERT_TAIL(&scheduleList[point ^ 1], process, scheduleLink);
    8020337a:	00194793          	xori	a5,s2,1
    8020337e:	00379713          	slli	a4,a5,0x3
    80203382:	974e                	add	a4,a4,s3
    80203384:	7358                	ld	a4,160(a4)
    80203386:	eb5d                	bnez	a4,8020343c <yield+0x164>
    80203388:	1604bc23          	sd	zero,376(s1)
    8020338c:	078e                	slli	a5,a5,0x3
    8020338e:	00f98733          	add	a4,s3,a5
    80203392:	f344                	sd	s1,160(a4)
    80203394:	97da                	add	a5,a5,s6
    80203396:	18f4b023          	sd	a5,384(s1)
        if (LIST_EMPTY(&scheduleList[point]))
    8020339a:	00391793          	slli	a5,s2,0x3
    8020339e:	97ce                	add	a5,a5,s3
    802033a0:	73c4                	ld	s1,160(a5)
    802033a2:	cce5                	beqz	s1,8020349a <yield+0x1c2>
            LIST_REMOVE(process, scheduleLink);
    802033a4:	1784b783          	ld	a5,376(s1)
    802033a8:	c789                	beqz	a5,802033b2 <yield+0xda>
    802033aa:	1804b703          	ld	a4,384(s1)
    802033ae:	18e7b023          	sd	a4,384(a5)
    802033b2:	1804b783          	ld	a5,384(s1)
    802033b6:	1784b703          	ld	a4,376(s1)
    802033ba:	e398                	sd	a4,0(a5)
            count = 1;
    802033bc:	8cd6                	mv	s9,s5
        releaseLock(&scheduleListLock);
    802033be:	8552                	mv	a0,s4
    802033c0:	00002097          	auipc	ra,0x2
    802033c4:	76a080e7          	jalr	1898(ra) # 80205b2a <releaseLock>
        acquireLock(&scheduleListLock);
    802033c8:	8552                	mv	a0,s4
    802033ca:	00002097          	auipc	ra,0x2
    802033ce:	6e4080e7          	jalr	1764(ra) # 80205aae <acquireLock>
    while ((count == 0) || !process || (process->state != RUNNABLE) || process->awakeTime > r_time()) {
    802033d2:	fa0c83e3          	beqz	s9,80203378 <yield+0xa0>
    802033d6:	c8c9                	beqz	s1,80203468 <yield+0x190>
    802033d8:	18c4a783          	lw	a5,396(s1)
    802033dc:	f9779fe3          	bne	a5,s7,8020337a <yield+0xa2>
// supervisor-mode cycle counter
static inline u64 r_time() {
	u64 x;
  	// asm volatile("csrr %0, time" : "=r" (x) );
  	// this instruction will trap in SBI
	asm volatile("rdtime %0" : "=r" (x) );
    802033e0:	c01027f3          	rdtime	a5
    802033e4:	1604b703          	ld	a4,352(s1)
    802033e8:	f8e7e9e3          	bltu	a5,a4,8020337a <yield+0xa2>
    }
    releaseLock(&scheduleListLock);
    802033ec:	00280517          	auipc	a0,0x280
    802033f0:	10450513          	addi	a0,a0,260 # 804834f0 <scheduleListLock>
    802033f4:	00002097          	auipc	ra,0x2
    802033f8:	736080e7          	jalr	1846(ra) # 80205b2a <releaseLock>
    count--;
    processTimeCount[hartId] = count;
    802033fc:	0c0a                	slli	s8,s8,0x2
    802033fe:	00280797          	auipc	a5,0x280
    80203402:	0b278793          	addi	a5,a5,178 # 804834b0 <currentProcess>
    80203406:	97e2                	add	a5,a5,s8
    count--;
    80203408:	3cfd                	addiw	s9,s9,-1
    processTimeCount[hartId] = count;
    8020340a:	0b97a823          	sw	s9,176(a5)
    processBelongList[hartId] = point;
    8020340e:	0d27a423          	sw	s2,200(a5)
    // printf("hartID %d yield process %lx\n", hartId, process->id);
    if (process->awakeTime > 0) {
    80203412:	1604b783          	ld	a5,352(s1)
    80203416:	e7bd                	bnez	a5,80203484 <yield+0x1ac>
        getHartTrapFrame()->a0 = 0;
        process->awakeTime = 0;
    }
    processRun(process);
    80203418:	8526                	mv	a0,s1
    8020341a:	00000097          	auipc	ra,0x0
    8020341e:	bcc080e7          	jalr	-1076(ra) # 80202fe6 <processRun>
}
    80203422:	60e6                	ld	ra,88(sp)
    80203424:	6446                	ld	s0,80(sp)
    80203426:	64a6                	ld	s1,72(sp)
    80203428:	6906                	ld	s2,64(sp)
    8020342a:	79e2                	ld	s3,56(sp)
    8020342c:	7a42                	ld	s4,48(sp)
    8020342e:	7aa2                	ld	s5,40(sp)
    80203430:	7b02                	ld	s6,32(sp)
    80203432:	6be2                	ld	s7,24(sp)
    80203434:	6c42                	ld	s8,16(sp)
    80203436:	6ca2                	ld	s9,8(sp)
    80203438:	6125                	addi	sp,sp,96
    8020343a:	8082                	ret
            LIST_INSERT_TAIL(&scheduleList[point ^ 1], process, scheduleLink);
    8020343c:	16e4bc23          	sd	a4,376(s1)
    80203440:	17873783          	ld	a5,376(a4)
    80203444:	c799                	beqz	a5,80203452 <yield+0x17a>
    80203446:	16f4bc23          	sd	a5,376(s1)
    8020344a:	873e                	mv	a4,a5
    8020344c:	1787b783          	ld	a5,376(a5)
    80203450:	fbfd                	bnez	a5,80203446 <yield+0x16e>
    80203452:	16973c23          	sd	s1,376(a4)
    80203456:	1784b783          	ld	a5,376(s1)
    8020345a:	17878793          	addi	a5,a5,376
    8020345e:	18f4b023          	sd	a5,384(s1)
    80203462:	1604bc23          	sd	zero,376(s1)
    80203466:	bf15                	j	8020339a <yield+0xc2>
        if (LIST_EMPTY(&scheduleList[point]))
    80203468:	00391793          	slli	a5,s2,0x3
    8020346c:	97ce                	add	a5,a5,s3
    8020346e:	73dc                	ld	a5,160(a5)
    80203470:	e39d                	bnez	a5,80203496 <yield+0x1be>
            point ^= 1;
    80203472:	00194913          	xori	s2,s2,1
        if (!(LIST_EMPTY(&scheduleList[point]))) {
    80203476:	00391793          	slli	a5,s2,0x3
    8020347a:	97ce                	add	a5,a5,s3
    8020347c:	73dc                	ld	a5,160(a5)
    8020347e:	d3a1                	beqz	a5,802033be <yield+0xe6>
    80203480:	84be                	mv	s1,a5
    80203482:	b70d                	j	802033a4 <yield+0xcc>
        getHartTrapFrame()->a0 = 0;
    80203484:	00002097          	auipc	ra,0x2
    80203488:	720080e7          	jalr	1824(ra) # 80205ba4 <getHartTrapFrame>
    8020348c:	06053823          	sd	zero,112(a0)
        process->awakeTime = 0;
    80203490:	1604b023          	sd	zero,352(s1)
    80203494:	b751                	j	80203418 <yield+0x140>
        if (LIST_EMPTY(&scheduleList[point]))
    80203496:	84be                	mv	s1,a5
        if (!(LIST_EMPTY(&scheduleList[point]))) {
    80203498:	b731                	j	802033a4 <yield+0xcc>
            point ^= 1;
    8020349a:	00194913          	xori	s2,s2,1
        if (!(LIST_EMPTY(&scheduleList[point]))) {
    8020349e:	00391793          	slli	a5,s2,0x3
    802034a2:	97ce                	add	a5,a5,s3
    802034a4:	73c4                	ld	s1,160(a5)
    802034a6:	bdfd                	j	802033a4 <yield+0xcc>

00000000802034a8 <processFork>:

void processFork(u32 flags, u64 stackVa, u64 parentThreadId, u64 tls, u64 childThreadId) {
    if (flags != START_FORK) {
    802034a8:	47c5                	li	a5,17
    802034aa:	00f50d63          	beq	a0,a5,802034c4 <processFork+0x1c>
    asm volatile("mv %0, tp" : "=r" (x) );
    802034ae:	8712                	mv	a4,tp
        currentProcess[r_hartid()]->trapframe.a0 = -1;
    802034b0:	070e                	slli	a4,a4,0x3
    802034b2:	00280797          	auipc	a5,0x280
    802034b6:	ffe78793          	addi	a5,a5,-2 # 804834b0 <currentProcess>
    802034ba:	97ba                	add	a5,a5,a4
    802034bc:	639c                	ld	a5,0(a5)
    802034be:	577d                	li	a4,-1
    802034c0:	fbb8                	sd	a4,112(a5)
        return;
    802034c2:	8082                	ret
void processFork(u32 flags, u64 stackVa, u64 parentThreadId, u64 tls, u64 childThreadId) {
    802034c4:	7175                	addi	sp,sp,-144
    802034c6:	e506                	sd	ra,136(sp)
    802034c8:	e122                	sd	s0,128(sp)
    802034ca:	fca6                	sd	s1,120(sp)
    802034cc:	f8ca                	sd	s2,112(sp)
    802034ce:	f4ce                	sd	s3,104(sp)
    802034d0:	f0d2                	sd	s4,96(sp)
    802034d2:	ecd6                	sd	s5,88(sp)
    802034d4:	e8da                	sd	s6,80(sp)
    802034d6:	e4de                	sd	s7,72(sp)
    802034d8:	e0e2                	sd	s8,64(sp)
    802034da:	fc66                	sd	s9,56(sp)
    802034dc:	f86a                	sd	s10,48(sp)
    802034de:	f46e                	sd	s11,40(sp)
    802034e0:	0900                	addi	s0,sp,144
    802034e2:	8aae                	mv	s5,a1
    802034e4:	8a32                	mv	s4,a2
    802034e6:	89ba                	mv	s3,a4
    802034e8:	8492                	mv	s1,tp
    }
    Process *process;
    int hartId = r_hartid();
    802034ea:	2481                	sext.w	s1,s1
    int r = processAlloc(&process, currentProcess[hartId]->id);
    802034ec:	00349713          	slli	a4,s1,0x3
    802034f0:	00280797          	auipc	a5,0x280
    802034f4:	fc078793          	addi	a5,a5,-64 # 804834b0 <currentProcess>
    802034f8:	97ba                	add	a5,a5,a4
    802034fa:	639c                	ld	a5,0(a5)
    802034fc:	1707e583          	lwu	a1,368(a5)
    80203500:	f8840513          	addi	a0,s0,-120
    80203504:	00000097          	auipc	ra,0x0
    80203508:	930080e7          	jalr	-1744(ra) # 80202e34 <processAlloc>
    8020350c:	8b2a                	mv	s6,a0
    process->cwd = myproc()->cwd; //when we fork, we should keep cwd
    8020350e:	fffff097          	auipc	ra,0xfffff
    80203512:	4a2080e7          	jalr	1186(ra) # 802029b0 <myproc>
    80203516:	1a853703          	ld	a4,424(a0)
    8020351a:	f8843783          	ld	a5,-120(s0)
    8020351e:	1ae7b423          	sd	a4,424(a5)
    if (r < 0) {
        currentProcess[hartId]->trapframe.a0 = r;
        return;
    }

    for (int i = 0; i < NOFILE; i++)
    80203522:	4901                	li	s2,0
    80203524:	08000c13          	li	s8,128
    if (r < 0) {
    80203528:	000b5f63          	bgez	s6,80203546 <processFork+0x9e>
        currentProcess[hartId]->trapframe.a0 = r;
    8020352c:	048e                	slli	s1,s1,0x3
    8020352e:	00280797          	auipc	a5,0x280
    80203532:	f8278793          	addi	a5,a5,-126 # 804834b0 <currentProcess>
    80203536:	97a6                	add	a5,a5,s1
    80203538:	639c                	ld	a5,0(a5)
    8020353a:	0767b823          	sd	s6,112(a5)
        return;
    8020353e:	ac21                	j	80203756 <processFork+0x2ae>
    for (int i = 0; i < NOFILE; i++)
    80203540:	2905                	addiw	s2,s2,1
    80203542:	05890063          	beq	s2,s8,80203582 <processFork+0xda>
        if (myproc()->ofile[i])
    80203546:	fffff097          	auipc	ra,0xfffff
    8020354a:	46a080e7          	jalr	1130(ra) # 802029b0 <myproc>
    8020354e:	03690793          	addi	a5,s2,54
    80203552:	078e                	slli	a5,a5,0x3
    80203554:	97aa                	add	a5,a5,a0
    80203556:	639c                	ld	a5,0(a5)
    80203558:	d7e5                	beqz	a5,80203540 <processFork+0x98>
            process->ofile[i] = filedup(myproc()->ofile[i]);
    8020355a:	fffff097          	auipc	ra,0xfffff
    8020355e:	456080e7          	jalr	1110(ra) # 802029b0 <myproc>
    80203562:	f8843b83          	ld	s7,-120(s0)
    80203566:	03690b13          	addi	s6,s2,54
    8020356a:	0b0e                	slli	s6,s6,0x3
    8020356c:	016507b3          	add	a5,a0,s6
    80203570:	6388                	ld	a0,0(a5)
    80203572:	00006097          	auipc	ra,0x6
    80203576:	ffe080e7          	jalr	-2(ra) # 80209570 <filedup>
    8020357a:	9bda                	add	s7,s7,s6
    8020357c:	00abb023          	sd	a0,0(s7) # 1000 <_start-0x801ff000>
    80203580:	b7c1                	j	80203540 <processFork+0x98>

    process->priority = currentProcess[hartId]->priority;
    80203582:	00349713          	slli	a4,s1,0x3
    80203586:	00280797          	auipc	a5,0x280
    8020358a:	f2a78793          	addi	a5,a5,-214 # 804834b0 <currentProcess>
    8020358e:	97ba                	add	a5,a5,a4
    80203590:	639c                	ld	a5,0(a5)
    80203592:	1887a703          	lw	a4,392(a5)
    80203596:	f8843783          	ld	a5,-120(s0)
    8020359a:	18e7a423          	sw	a4,392(a5)
    Trapframe* trapframe = getHartTrapFrame();
    8020359e:	00002097          	auipc	ra,0x2
    802035a2:	606080e7          	jalr	1542(ra) # 80205ba4 <getHartTrapFrame>
    802035a6:	892a                	mv	s2,a0
    bcopy(trapframe, &process->trapframe, sizeof(Trapframe));
    802035a8:	12000613          	li	a2,288
    802035ac:	f8843583          	ld	a1,-120(s0)
    802035b0:	ffffe097          	auipc	ra,0xffffe
    802035b4:	49e080e7          	jalr	1182(ra) # 80201a4e <bcopy>
    process->trapframe.a0 = 0;
    802035b8:	f8843783          	ld	a5,-120(s0)
    802035bc:	0607b823          	sd	zero,112(a5)
    if (stackVa != 0) {
    802035c0:	000a8463          	beqz	s5,802035c8 <processFork+0x120>
        process->trapframe.sp = stackVa;
    802035c4:	0357b823          	sd	s5,48(a5)
    }
    if (parentThreadId != NULL) {
    802035c8:	020a1a63          	bnez	s4,802035fc <processFork+0x154>
        copyout(currentProcess[hartId]->pgdir, parentThreadId, (char*) &currentProcess[hartId]->id, sizeof(u32));
    }
    if (childThreadId != NULL) {
    802035cc:	04099b63          	bnez	s3,80203622 <processFork+0x17a>
        copyout(currentProcess[hartId]->pgdir, childThreadId, (char*) &process->id, sizeof(u32));
    }

    trapframe->a0 = process->id;
    802035d0:	f8843783          	ld	a5,-120(s0)
    802035d4:	1707e783          	lwu	a5,368(a5)
    802035d8:	06f93823          	sd	a5,112(s2)
    802035dc:	4d81                	li	s11,0
    u64 i, j, k;
    for (i = 0; i < 512; i++) {
        if (!(currentProcess[hartId]->pgdir[i] & PTE_VALID)) {
    802035de:	048e                	slli	s1,s1,0x3
    802035e0:	00280797          	auipc	a5,0x280
    802035e4:	ed078793          	addi	a5,a5,-304 # 804834b0 <currentProcess>
    802035e8:	97a6                	add	a5,a5,s1
    802035ea:	f6f43c23          	sd	a5,-136(s0)
            continue;
        }
        u64 *pa = (u64*) PTE2PA(currentProcess[hartId]->pgdir[i]);
    802035ee:	fff00b37          	lui	s6,0xfff00
            for (k = 0; k < 512; k++) {
                if (!(pa2[k] & PTE_VALID)) {
                    continue;
                }
                u64 va = (i << 30) + (j << 21) + (k << 12);
                if (va == TRAMPOLINE_BASE || va == TRAMPOLINE_BASE + PAGE_SIZE) {
    802035f2:	02000ab7          	lui	s5,0x2000
    802035f6:	1afd                	addi	s5,s5,-1
    802035f8:	0ab6                	slli	s5,s5,0xd
    802035fa:	a8d1                	j	802036ce <processFork+0x226>
        copyout(currentProcess[hartId]->pgdir, parentThreadId, (char*) &currentProcess[hartId]->id, sizeof(u32));
    802035fc:	00349713          	slli	a4,s1,0x3
    80203600:	00280797          	auipc	a5,0x280
    80203604:	eb078793          	addi	a5,a5,-336 # 804834b0 <currentProcess>
    80203608:	97ba                	add	a5,a5,a4
    8020360a:	639c                	ld	a5,0(a5)
    8020360c:	4691                	li	a3,4
    8020360e:	17078613          	addi	a2,a5,368
    80203612:	85d2                	mv	a1,s4
    80203614:	1687b503          	ld	a0,360(a5)
    80203618:	fffff097          	auipc	ra,0xfffff
    8020361c:	d96080e7          	jalr	-618(ra) # 802023ae <copyout>
    80203620:	b775                	j	802035cc <processFork+0x124>
        copyout(currentProcess[hartId]->pgdir, childThreadId, (char*) &process->id, sizeof(u32));
    80203622:	00349713          	slli	a4,s1,0x3
    80203626:	00280797          	auipc	a5,0x280
    8020362a:	e8a78793          	addi	a5,a5,-374 # 804834b0 <currentProcess>
    8020362e:	97ba                	add	a5,a5,a4
    80203630:	639c                	ld	a5,0(a5)
    80203632:	4691                	li	a3,4
    80203634:	f8843603          	ld	a2,-120(s0)
    80203638:	17060613          	addi	a2,a2,368
    8020363c:	85ce                	mv	a1,s3
    8020363e:	1687b503          	ld	a0,360(a5)
    80203642:	fffff097          	auipc	ra,0xfffff
    80203646:	d6c080e7          	jalr	-660(ra) # 802023ae <copyout>
    8020364a:	b759                	j	802035d0 <processFork+0x128>
                }
                if (pa2[k] & PTE_WRITE) {
                    pa2[k] |= PTE_COW;
                    pa2[k] &= ~PTE_WRITE;
                } 
                pageInsert(process->pgdir, va, PTE2PA(pa2[k]), PTE2PERM(pa2[k]));
    8020364c:	6294                	ld	a3,0(a3)
    8020364e:	00269613          	slli	a2,a3,0x2
    80203652:	008b5793          	srli	a5,s6,0x8
    80203656:	0176f6b3          	and	a3,a3,s7
    8020365a:	8e7d                	and	a2,a2,a5
    8020365c:	85ca                	mv	a1,s2
    8020365e:	f8843783          	ld	a5,-120(s0)
    80203662:	1687b503          	ld	a0,360(a5)
    80203666:	fffff097          	auipc	ra,0xfffff
    8020366a:	934080e7          	jalr	-1740(ra) # 80201f9a <pageInsert>
            for (k = 0; k < 512; k++) {
    8020366e:	04a1                	addi	s1,s1,8
    80203670:	6785                	lui	a5,0x1
    80203672:	993e                	add	s2,s2,a5
    80203674:	03348363          	beq	s1,s3,8020369a <processFork+0x1f2>
                if (!(pa2[k] & PTE_VALID)) {
    80203678:	86a6                	mv	a3,s1
    8020367a:	609c                	ld	a5,0(s1)
    8020367c:	0017f713          	andi	a4,a5,1
    80203680:	d77d                	beqz	a4,8020366e <processFork+0x1c6>
                if (va == TRAMPOLINE_BASE || va == TRAMPOLINE_BASE + PAGE_SIZE) {
    80203682:	01497733          	and	a4,s2,s4
    80203686:	ff5704e3          	beq	a4,s5,8020366e <processFork+0x1c6>
                if (pa2[k] & PTE_WRITE) {
    8020368a:	0047f713          	andi	a4,a5,4
    8020368e:	df5d                	beqz	a4,8020364c <processFork+0x1a4>
                    pa2[k] &= ~PTE_WRITE;
    80203690:	9bed                	andi	a5,a5,-5
    80203692:	1007e793          	ori	a5,a5,256
    80203696:	e09c                	sd	a5,0(s1)
    80203698:	bf55                	j	8020364c <processFork+0x1a4>
        for (j = 0; j < 512; j++) {
    8020369a:	0c21                	addi	s8,s8,8
    8020369c:	002007b7          	lui	a5,0x200
    802036a0:	9cbe                	add	s9,s9,a5
    802036a2:	03ac0263          	beq	s8,s10,802036c6 <processFork+0x21e>
            if (!(pa[j] & PTE_VALID)) {
    802036a6:	000c3783          	ld	a5,0(s8)
    802036aa:	0017f713          	andi	a4,a5,1
    802036ae:	d775                	beqz	a4,8020369a <processFork+0x1f2>
            u64 *pa2 = (u64*) PTE2PA(pa[j]);
    802036b0:	078a                	slli	a5,a5,0x2
    802036b2:	008b5713          	srli	a4,s6,0x8
    802036b6:	00e7f4b3          	and	s1,a5,a4
            for (k = 0; k < 512; k++) {
    802036ba:	6985                	lui	s3,0x1
    802036bc:	99a6                	add	s3,s3,s1
            u64 *pa2 = (u64*) PTE2PA(pa[j]);
    802036be:	8966                	mv	s2,s9
                if (va == TRAMPOLINE_BASE || va == TRAMPOLINE_BASE + PAGE_SIZE) {
    802036c0:	7a7d                	lui	s4,0xfffff
    802036c2:	1a7d                	addi	s4,s4,-1
    802036c4:	bf55                	j	80203678 <processFork+0x1d0>
    for (i = 0; i < 512; i++) {
    802036c6:	0da1                	addi	s11,s11,8
    802036c8:	6785                	lui	a5,0x1
    802036ca:	02fd8a63          	beq	s11,a5,802036fe <processFork+0x256>
        if (!(currentProcess[hartId]->pgdir[i] & PTE_VALID)) {
    802036ce:	f7843783          	ld	a5,-136(s0)
    802036d2:	639c                	ld	a5,0(a5)
    802036d4:	1687b783          	ld	a5,360(a5) # 1168 <_start-0x801fee98>
    802036d8:	97ee                	add	a5,a5,s11
    802036da:	639c                	ld	a5,0(a5)
    802036dc:	0017f713          	andi	a4,a5,1
    802036e0:	d37d                	beqz	a4,802036c6 <processFork+0x21e>
        u64 *pa = (u64*) PTE2PA(currentProcess[hartId]->pgdir[i]);
    802036e2:	078a                	slli	a5,a5,0x2
    802036e4:	008b5713          	srli	a4,s6,0x8
    802036e8:	00e7fc33          	and	s8,a5,a4
        for (j = 0; j < 512; j++) {
    802036ec:	01bd9c93          	slli	s9,s11,0x1b
    802036f0:	6d05                	lui	s10,0x1
    802036f2:	9d62                	add	s10,s10,s8
                pageInsert(process->pgdir, va, PTE2PA(pa2[k]), PTE2PERM(pa2[k]));
    802036f4:	5bfd                	li	s7,-1
    802036f6:	1bda                	slli	s7,s7,0x36
    802036f8:	3ffb8b93          	addi	s7,s7,1023
    802036fc:	b76d                	j	802036a6 <processFork+0x1fe>
            }
        }
    }

    acquireLock(&scheduleListLock);
    802036fe:	00280517          	auipc	a0,0x280
    80203702:	df250513          	addi	a0,a0,-526 # 804834f0 <scheduleListLock>
    80203706:	00002097          	auipc	ra,0x2
    8020370a:	3a8080e7          	jalr	936(ra) # 80205aae <acquireLock>
    LIST_INSERT_TAIL(&scheduleList[0], process, scheduleLink);
    8020370e:	00280697          	auipc	a3,0x280
    80203712:	e426b683          	ld	a3,-446(a3) # 80483550 <scheduleList>
    80203716:	ceb9                	beqz	a3,80203774 <processFork+0x2cc>
    80203718:	f8843783          	ld	a5,-120(s0)
    8020371c:	16d7bc23          	sd	a3,376(a5)
    80203720:	1786b703          	ld	a4,376(a3)
    80203724:	c719                	beqz	a4,80203732 <processFork+0x28a>
    80203726:	16e7bc23          	sd	a4,376(a5)
    8020372a:	86ba                	mv	a3,a4
    8020372c:	17873703          	ld	a4,376(a4)
    80203730:	fb7d                	bnez	a4,80203726 <processFork+0x27e>
    80203732:	16f6bc23          	sd	a5,376(a3)
    80203736:	1787b703          	ld	a4,376(a5)
    8020373a:	17870713          	addi	a4,a4,376
    8020373e:	18e7b023          	sd	a4,384(a5)
    80203742:	1607bc23          	sd	zero,376(a5)
    releaseLock(&scheduleListLock);
    80203746:	00280517          	auipc	a0,0x280
    8020374a:	daa50513          	addi	a0,a0,-598 # 804834f0 <scheduleListLock>
    8020374e:	00002097          	auipc	ra,0x2
    80203752:	3dc080e7          	jalr	988(ra) # 80205b2a <releaseLock>

    return;
}
    80203756:	60aa                	ld	ra,136(sp)
    80203758:	640a                	ld	s0,128(sp)
    8020375a:	74e6                	ld	s1,120(sp)
    8020375c:	7946                	ld	s2,112(sp)
    8020375e:	79a6                	ld	s3,104(sp)
    80203760:	7a06                	ld	s4,96(sp)
    80203762:	6ae6                	ld	s5,88(sp)
    80203764:	6b46                	ld	s6,80(sp)
    80203766:	6ba6                	ld	s7,72(sp)
    80203768:	6c06                	ld	s8,64(sp)
    8020376a:	7ce2                	ld	s9,56(sp)
    8020376c:	7d42                	ld	s10,48(sp)
    8020376e:	7da2                	ld	s11,40(sp)
    80203770:	6149                	addi	sp,sp,144
    80203772:	8082                	ret
    LIST_INSERT_TAIL(&scheduleList[0], process, scheduleLink);
    80203774:	f8843783          	ld	a5,-120(s0)
    80203778:	1607bc23          	sd	zero,376(a5)
    8020377c:	00280717          	auipc	a4,0x280
    80203780:	dcf73a23          	sd	a5,-556(a4) # 80483550 <scheduleList>
    80203784:	00280717          	auipc	a4,0x280
    80203788:	dcc70713          	addi	a4,a4,-564 # 80483550 <scheduleList>
    8020378c:	18e7b023          	sd	a4,384(a5)
    80203790:	bf5d                	j	80203746 <processFork+0x29e>

0000000080203792 <kernelProcessCpuTimeBegin>:

void kernelProcessCpuTimeBegin() {
    80203792:	1141                	addi	sp,sp,-16
    80203794:	e406                	sd	ra,8(sp)
    80203796:	e022                	sd	s0,0(sp)
    80203798:	0800                	addi	s0,sp,16
    //printf("enter kernel %s %d\n", __FILE__, __LINE__);
    Process *p = myproc();
    8020379a:	fffff097          	auipc	ra,0xfffff
    8020379e:	216080e7          	jalr	534(ra) # 802029b0 <myproc>
	asm volatile("rdtime %0" : "=r" (x) );
    802037a2:	c0102773          	rdtime	a4
    long currentTime = r_time();
    p->cpuTime.kernel += currentTime - p->processTime.lastKernelTime;
    802037a6:	12853783          	ld	a5,296(a0)
    802037aa:	8f1d                	sub	a4,a4,a5
    802037ac:	13853783          	ld	a5,312(a0)
    802037b0:	97ba                	add	a5,a5,a4
    802037b2:	12f53c23          	sd	a5,312(a0)
}
    802037b6:	60a2                	ld	ra,8(sp)
    802037b8:	6402                	ld	s0,0(sp)
    802037ba:	0141                	addi	sp,sp,16
    802037bc:	8082                	ret

00000000802037be <kernelProcessCpuTimeEnd>:

void kernelProcessCpuTimeEnd() {
    802037be:	1141                	addi	sp,sp,-16
    802037c0:	e406                	sd	ra,8(sp)
    802037c2:	e022                	sd	s0,0(sp)
    802037c4:	0800                	addi	s0,sp,16
    Process *p = myproc();
    802037c6:	fffff097          	auipc	ra,0xfffff
    802037ca:	1ea080e7          	jalr	490(ra) # 802029b0 <myproc>
    802037ce:	c01027f3          	rdtime	a5
    p->processTime.lastKernelTime = r_time();
    802037d2:	12f53423          	sd	a5,296(a0)
}
    802037d6:	60a2                	ld	ra,8(sp)
    802037d8:	6402                	ld	s0,0(sp)
    802037da:	0141                	addi	sp,sp,16
    802037dc:	8082                	ret

00000000802037de <processFree>:
void processFree(Process *p) {
    802037de:	7139                	addi	sp,sp,-64
    802037e0:	fc06                	sd	ra,56(sp)
    802037e2:	f822                	sd	s0,48(sp)
    802037e4:	f426                	sd	s1,40(sp)
    802037e6:	f04a                	sd	s2,32(sp)
    802037e8:	ec4e                	sd	s3,24(sp)
    802037ea:	0080                	addi	s0,sp,64
    802037ec:	89aa                	mv	s3,a0
    pgdirFree(p->pgdir);
    802037ee:	16853503          	ld	a0,360(a0)
    802037f2:	ffffe097          	auipc	ra,0xffffe
    802037f6:	6ae080e7          	jalr	1710(ra) # 80201ea0 <pgdirFree>
    p->state = ZOMBIE; // new
    802037fa:	4791                	li	a5,4
    802037fc:	18f9a623          	sw	a5,396(s3) # 118c <_start-0x801fee74>
    for (int fd = 0; fd < NOFILE; fd++) {
    80203800:	1b098493          	addi	s1,s3,432
    80203804:	5b098913          	addi	s2,s3,1456
    80203808:	a021                	j	80203810 <processFree+0x32>
    8020380a:	04a1                	addi	s1,s1,8
    8020380c:	01248b63          	beq	s1,s2,80203822 <processFree+0x44>
        if (p->ofile[fd]) {
    80203810:	6088                	ld	a0,0(s1)
    80203812:	dd65                	beqz	a0,8020380a <processFree+0x2c>
            fileclose(f);
    80203814:	00006097          	auipc	ra,0x6
    80203818:	dc2080e7          	jalr	-574(ra) # 802095d6 <fileclose>
            p->ofile[fd] = 0;
    8020381c:	0004b023          	sd	zero,0(s1)
    80203820:	b7ed                	j	8020380a <processFree+0x2c>
    kernelProcessCpuTimeEnd();
    80203822:	00000097          	auipc	ra,0x0
    80203826:	f9c080e7          	jalr	-100(ra) # 802037be <kernelProcessCpuTimeEnd>
    if (p->parentId > 0) {
    8020382a:	1749a503          	lw	a0,372(s3)
    8020382e:	e901                	bnez	a0,8020383e <processFree+0x60>
}
    80203830:	70e2                	ld	ra,56(sp)
    80203832:	7442                	ld	s0,48(sp)
    80203834:	74a2                	ld	s1,40(sp)
    80203836:	7902                	ld	s2,32(sp)
    80203838:	69e2                	ld	s3,24(sp)
    8020383a:	6121                	addi	sp,sp,64
    8020383c:	8082                	ret
        int r = pid2Process(p->parentId, &parentProcess, 0);
    8020383e:	4601                	li	a2,0
    80203840:	fc840593          	addi	a1,s0,-56
    80203844:	fffff097          	auipc	ra,0xfffff
    80203848:	3c0080e7          	jalr	960(ra) # 80202c04 <pid2Process>
        if (r == 0) {
    8020384c:	f175                	bnez	a0,80203830 <processFree+0x52>
            wakeup(parentProcess);
    8020384e:	fc843503          	ld	a0,-56(s0)
    80203852:	00000097          	auipc	ra,0x0
    80203856:	952080e7          	jalr	-1710(ra) # 802031a4 <wakeup>
}
    8020385a:	bfd9                	j	80203830 <processFree+0x52>

000000008020385c <processDestory>:
void processDestory(Process *p) {
    8020385c:	7179                	addi	sp,sp,-48
    8020385e:	f406                	sd	ra,40(sp)
    80203860:	f022                	sd	s0,32(sp)
    80203862:	ec26                	sd	s1,24(sp)
    80203864:	1800                	addi	s0,sp,48
    80203866:	84aa                	mv	s1,a0
    processFree(p);
    80203868:	00000097          	auipc	ra,0x0
    8020386c:	f76080e7          	jalr	-138(ra) # 802037de <processFree>
    asm volatile("mv %0, tp" : "=r" (x) );
    80203870:	8792                	mv	a5,tp
    int hartId = r_hartid();
    80203872:	2781                	sext.w	a5,a5
    if (currentProcess[hartId] == p) {
    80203874:	00379693          	slli	a3,a5,0x3
    80203878:	00280717          	auipc	a4,0x280
    8020387c:	c3870713          	addi	a4,a4,-968 # 804834b0 <currentProcess>
    80203880:	9736                	add	a4,a4,a3
    80203882:	6318                	ld	a4,0(a4)
    80203884:	00970763          	beq	a4,s1,80203892 <processDestory+0x36>
}
    80203888:	70a2                	ld	ra,40(sp)
    8020388a:	7402                	ld	s0,32(sp)
    8020388c:	64e2                	ld	s1,24(sp)
    8020388e:	6145                	addi	sp,sp,48
    80203890:	8082                	ret
        currentProcess[hartId] = NULL;
    80203892:	00280717          	auipc	a4,0x280
    80203896:	c1e70713          	addi	a4,a4,-994 # 804834b0 <currentProcess>
    8020389a:	9736                	add	a4,a4,a3
    8020389c:	00073023          	sd	zero,0(a4)
        u64 sp = (u64)kernelStack + (hartId + 1) * KERNEL_STACK_SIZE;
    802038a0:	2785                	addiw	a5,a5,1
    802038a2:	0107979b          	slliw	a5,a5,0x10
    802038a6:	0016d717          	auipc	a4,0x16d
    802038aa:	75a70713          	addi	a4,a4,1882 # 80371000 <_stack>
    802038ae:	97ba                	add	a5,a5,a4
    802038b0:	fcf43c23          	sd	a5,-40(s0)
        asm volatile("ld sp, 0(%0)" : :"r"(&sp): "memory");
    802038b4:	fd840793          	addi	a5,s0,-40
    802038b8:	0007b103          	ld	sp,0(a5)
        yield();
    802038bc:	00000097          	auipc	ra,0x0
    802038c0:	a1c080e7          	jalr	-1508(ra) # 802032d8 <yield>
}
    802038c4:	b7d1                	j	80203888 <processDestory+0x2c>

00000000802038c6 <sleep>:
void sleep(void* chan, struct Spinlock* lk) {//wait()
    802038c6:	7179                	addi	sp,sp,-48
    802038c8:	f406                	sd	ra,40(sp)
    802038ca:	f022                	sd	s0,32(sp)
    802038cc:	ec26                	sd	s1,24(sp)
    802038ce:	e84a                	sd	s2,16(sp)
    802038d0:	e44e                	sd	s3,8(sp)
    802038d2:	e052                	sd	s4,0(sp)
    802038d4:	1800                	addi	s0,sp,48
    802038d6:	8a2a                	mv	s4,a0
    802038d8:	892e                	mv	s2,a1
    struct Process* p = myproc();
    802038da:	fffff097          	auipc	ra,0xfffff
    802038de:	0d6080e7          	jalr	214(ra) # 802029b0 <myproc>
    802038e2:	84aa                	mv	s1,a0
    kernelProcessCpuTimeEnd();
    802038e4:	00000097          	auipc	ra,0x0
    802038e8:	eda080e7          	jalr	-294(ra) # 802037be <kernelProcessCpuTimeEnd>
    acquireLock(&p->lock);  // DOC: sleeplock1
    802038ec:	19048993          	addi	s3,s1,400
    802038f0:	854e                	mv	a0,s3
    802038f2:	00002097          	auipc	ra,0x2
    802038f6:	1bc080e7          	jalr	444(ra) # 80205aae <acquireLock>
    releaseLock(lk);
    802038fa:	854a                	mv	a0,s2
    802038fc:	00002097          	auipc	ra,0x2
    80203900:	22e080e7          	jalr	558(ra) # 80205b2a <releaseLock>
    p->chan = (u64)chan;
    80203904:	5b44b823          	sd	s4,1456(s1)
    p->state = SLEEPING;
    80203908:	4785                	li	a5,1
    8020390a:	18f4a623          	sw	a5,396(s1)
    p->reason = 1;
    8020390e:	5cf4a023          	sw	a5,1472(s1)
    releaseLock(&p->lock);
    80203912:	854e                	mv	a0,s3
    80203914:	00002097          	auipc	ra,0x2
    80203918:	216080e7          	jalr	534(ra) # 80205b2a <releaseLock>
	asm volatile("sd sp, 0(%0)" : :"r"(&p->currentKernelSp));
    8020391c:	5b848793          	addi	a5,s1,1464
    80203920:	0027b023          	sd	sp,0(a5)
    sleepSave();
    80203924:	00000097          	auipc	ra,0x0
    80203928:	26c080e7          	jalr	620(ra) # 80203b90 <sleepSave>
    acquireLock(&p->lock);  // DOC: sleeplock1
    8020392c:	854e                	mv	a0,s3
    8020392e:	00002097          	auipc	ra,0x2
    80203932:	180080e7          	jalr	384(ra) # 80205aae <acquireLock>
    p->chan = 0;
    80203936:	5a04b823          	sd	zero,1456(s1)
    releaseLock(&p->lock);
    8020393a:	854e                	mv	a0,s3
    8020393c:	00002097          	auipc	ra,0x2
    80203940:	1ee080e7          	jalr	494(ra) # 80205b2a <releaseLock>
    kernelProcessCpuTimeBegin();
    80203944:	00000097          	auipc	ra,0x0
    80203948:	e4e080e7          	jalr	-434(ra) # 80203792 <kernelProcessCpuTimeBegin>
    acquireLock(lk);
    8020394c:	854a                	mv	a0,s2
    8020394e:	00002097          	auipc	ra,0x2
    80203952:	160080e7          	jalr	352(ra) # 80205aae <acquireLock>
}
    80203956:	70a2                	ld	ra,40(sp)
    80203958:	7402                	ld	s0,32(sp)
    8020395a:	64e2                	ld	s1,24(sp)
    8020395c:	6942                	ld	s2,16(sp)
    8020395e:	69a2                	ld	s3,8(sp)
    80203960:	6a02                	ld	s4,0(sp)
    80203962:	6145                	addi	sp,sp,48
    80203964:	8082                	ret

0000000080203966 <wait>:
int wait(int targetProcessId, u64 addr) {
    80203966:	7175                	addi	sp,sp,-144
    80203968:	e506                	sd	ra,136(sp)
    8020396a:	e122                	sd	s0,128(sp)
    8020396c:	fca6                	sd	s1,120(sp)
    8020396e:	f8ca                	sd	s2,112(sp)
    80203970:	f4ce                	sd	s3,104(sp)
    80203972:	f0d2                	sd	s4,96(sp)
    80203974:	ecd6                	sd	s5,88(sp)
    80203976:	e8da                	sd	s6,80(sp)
    80203978:	e4de                	sd	s7,72(sp)
    8020397a:	e0e2                	sd	s8,64(sp)
    8020397c:	fc66                	sd	s9,56(sp)
    8020397e:	f86a                	sd	s10,48(sp)
    80203980:	f46e                	sd	s11,40(sp)
    80203982:	0900                	addi	s0,sp,144
    80203984:	8c2a                	mv	s8,a0
    80203986:	f6b43c23          	sd	a1,-136(s0)
    Process* p = myproc();
    8020398a:	fffff097          	auipc	ra,0xfffff
    8020398e:	026080e7          	jalr	38(ra) # 802029b0 <myproc>
    80203992:	8a2a                	mv	s4,a0
    acquireLock(&waitLock);
    80203994:	00280517          	auipc	a0,0x280
    80203998:	b8c50513          	addi	a0,a0,-1140 # 80483520 <waitLock>
    8020399c:	00002097          	auipc	ra,0x2
    802039a0:	112080e7          	jalr	274(ra) # 80205aae <acquireLock>
                if ((targetProcessId == -1 || np->id == targetProcessId) && np->state == ZOMBIE) {
    802039a4:	5cfd                	li	s9,-1
    802039a6:	4d91                	li	s11,4
    802039a8:	000c0d1b          	sext.w	s10,s8
        for (int i = 0; i < PROCESS_TOTAL_NUMBER; ++i) {
    802039ac:	00280497          	auipc	s1,0x280
    802039b0:	d7448493          	addi	s1,s1,-652 # 80483720 <processes+0x190>
    802039b4:	4901                	li	s2,0
        haveChildProcess = 0;
    802039b6:	4b01                	li	s6,0
                haveChildProcess = 1;
    802039b8:	4b85                	li	s7,1
        for (int i = 0; i < PROCESS_TOTAL_NUMBER; ++i) {
    802039ba:	40000a93          	li	s5,1024
    802039be:	a005                	j	802039de <wait+0x78>
                if ((targetProcessId == -1 || np->id == targetProcessId) && np->state == ZOMBIE) {
    802039c0:	ffc9a783          	lw	a5,-4(s3)
    802039c4:	05b78163          	beq	a5,s11,80203a06 <wait+0xa0>
                haveChildProcess = 1;
    802039c8:	8b5e                	mv	s6,s7
            releaseLock(&np->lock);
    802039ca:	854e                	mv	a0,s3
    802039cc:	00002097          	auipc	ra,0x2
    802039d0:	15e080e7          	jalr	350(ra) # 80205b2a <releaseLock>
        for (int i = 0; i < PROCESS_TOTAL_NUMBER; ++i) {
    802039d4:	2905                	addiw	s2,s2,1
    802039d6:	5e848493          	addi	s1,s1,1512
    802039da:	19590363          	beq	s2,s5,80203b60 <wait+0x1fa>
            acquireLock(&np->lock);
    802039de:	89a6                	mv	s3,s1
    802039e0:	8526                	mv	a0,s1
    802039e2:	00002097          	auipc	ra,0x2
    802039e6:	0cc080e7          	jalr	204(ra) # 80205aae <acquireLock>
            if (np->parentId == p->id) {
    802039ea:	fe44a703          	lw	a4,-28(s1)
    802039ee:	170a2783          	lw	a5,368(s4) # fffffffffffff170 <bssEnd+0xffffffff7f9e4170>
    802039f2:	fcf71ce3          	bne	a4,a5,802039ca <wait+0x64>
                if ((targetProcessId == -1 || np->id == targetProcessId) && np->state == ZOMBIE) {
    802039f6:	fd9c05e3          	beq	s8,s9,802039c0 <wait+0x5a>
    802039fa:	fe04a783          	lw	a5,-32(s1)
                haveChildProcess = 1;
    802039fe:	8b5e                	mv	s6,s7
                if ((targetProcessId == -1 || np->id == targetProcessId) && np->state == ZOMBIE) {
    80203a00:	fda795e3          	bne	a5,s10,802039ca <wait+0x64>
    80203a04:	bf75                	j	802039c0 <wait+0x5a>
                    pid = np->id;
    80203a06:	5e800713          	li	a4,1512
    80203a0a:	02e90733          	mul	a4,s2,a4
    80203a0e:	00280797          	auipc	a5,0x280
    80203a12:	b8278793          	addi	a5,a5,-1150 # 80483590 <processes>
    80203a16:	97ba                	add	a5,a5,a4
    80203a18:	1707a483          	lw	s1,368(a5)
                    if (addr != 0 && copyout(p->pgdir, addr, (char *)&np->retValue, sizeof(np->retValue)) < 0) {
    80203a1c:	f7843583          	ld	a1,-136(s0)
    80203a20:	cd99                	beqz	a1,80203a3e <wait+0xd8>
    80203a22:	46a1                	li	a3,8
    80203a24:	00280617          	auipc	a2,0x280
    80203a28:	13460613          	addi	a2,a2,308 # 80483b58 <processes+0x5c8>
    80203a2c:	963a                	add	a2,a2,a4
    80203a2e:	168a3503          	ld	a0,360(s4)
    80203a32:	fffff097          	auipc	ra,0xfffff
    80203a36:	97c080e7          	jalr	-1668(ra) # 802023ae <copyout>
    80203a3a:	10054463          	bltz	a0,80203b42 <wait+0x1dc>
    80203a3e:	5e800b13          	li	s6,1512
    80203a42:	03690b33          	mul	s6,s2,s6
            Process* np = &processes[i];
    80203a46:	00280a97          	auipc	s5,0x280
    80203a4a:	b4aa8a93          	addi	s5,s5,-1206 # 80483590 <processes>
    80203a4e:	9ada                	add	s5,s5,s6
                    acquireLock(&freeProcessesLock);
    80203a50:	00280517          	auipc	a0,0x280
    80203a54:	a8850513          	addi	a0,a0,-1400 # 804834d8 <freeProcessesLock>
    80203a58:	00002097          	auipc	ra,0x2
    80203a5c:	056080e7          	jalr	86(ra) # 80205aae <acquireLock>
    Process *pp = p;
    80203a60:	f9543423          	sd	s5,-120(s0)
    while (pp->parentId > 0 && pid2Process(pp->parentId, &pp, false) >= 0) {
    80203a64:	174aa503          	lw	a0,372(s5)
    80203a68:	cd15                	beqz	a0,80203aa4 <wait+0x13e>
        pp->cpuTime.deadChildrenKernel += p->cpuTime.kernel;
    80203a6a:	8a56                	mv	s4,s5
    while (pp->parentId > 0 && pid2Process(pp->parentId, &pp, false) >= 0) {
    80203a6c:	4601                	li	a2,0
    80203a6e:	f8840593          	addi	a1,s0,-120
    80203a72:	fffff097          	auipc	ra,0xfffff
    80203a76:	192080e7          	jalr	402(ra) # 80202c04 <pid2Process>
    80203a7a:	02054563          	bltz	a0,80203aa4 <wait+0x13e>
        pp->cpuTime.deadChildrenKernel += p->cpuTime.kernel;
    80203a7e:	f8843783          	ld	a5,-120(s0)
    80203a82:	1487b703          	ld	a4,328(a5)
    80203a86:	138a3683          	ld	a3,312(s4)
    80203a8a:	9736                	add	a4,a4,a3
    80203a8c:	14e7b423          	sd	a4,328(a5)
        pp->cpuTime.deadChildrenUser += p->cpuTime.user;
    80203a90:	1407b703          	ld	a4,320(a5)
    80203a94:	130a3683          	ld	a3,304(s4)
    80203a98:	9736                	add	a4,a4,a3
    80203a9a:	14e7b023          	sd	a4,320(a5)
    while (pp->parentId > 0 && pid2Process(pp->parentId, &pp, false) >= 0) {
    80203a9e:	1747a503          	lw	a0,372(a5)
    80203aa2:	f569                	bnez	a0,80203a6c <wait+0x106>
                    np->state = UNUSED;
    80203aa4:	5e800713          	li	a4,1512
    80203aa8:	02e90733          	mul	a4,s2,a4
    80203aac:	00280797          	auipc	a5,0x280
    80203ab0:	ae478793          	addi	a5,a5,-1308 # 80483590 <processes>
    80203ab4:	97ba                	add	a5,a5,a4
    80203ab6:	1807a623          	sw	zero,396(a5)
                    LIST_INSERT_HEAD(&freeProcesses, np, link); //test pipe
    80203aba:	003fa717          	auipc	a4,0x3fa
    80203abe:	ade73703          	ld	a4,-1314(a4) # 805fd598 <freeProcesses>
    80203ac2:	14e7b823          	sd	a4,336(a5)
    80203ac6:	cb01                	beqz	a4,80203ad6 <wait+0x170>
    80203ac8:	00280797          	auipc	a5,0x280
    80203acc:	c1878793          	addi	a5,a5,-1000 # 804836e0 <processes+0x150>
    80203ad0:	9b3e                	add	s6,s6,a5
    80203ad2:	15673c23          	sd	s6,344(a4)
    80203ad6:	003fa717          	auipc	a4,0x3fa
    80203ada:	ac270713          	addi	a4,a4,-1342 # 805fd598 <freeProcesses>
    80203ade:	01573023          	sd	s5,0(a4)
    80203ae2:	5e800793          	li	a5,1512
    80203ae6:	02f90933          	mul	s2,s2,a5
    80203aea:	00280797          	auipc	a5,0x280
    80203aee:	aa678793          	addi	a5,a5,-1370 # 80483590 <processes>
    80203af2:	97ca                	add	a5,a5,s2
    80203af4:	14e7bc23          	sd	a4,344(a5)
                    releaseLock(&freeProcessesLock);
    80203af8:	00280517          	auipc	a0,0x280
    80203afc:	9e050513          	addi	a0,a0,-1568 # 804834d8 <freeProcessesLock>
    80203b00:	00002097          	auipc	ra,0x2
    80203b04:	02a080e7          	jalr	42(ra) # 80205b2a <releaseLock>
                    releaseLock(&np->lock);
    80203b08:	854e                	mv	a0,s3
    80203b0a:	00002097          	auipc	ra,0x2
    80203b0e:	020080e7          	jalr	32(ra) # 80205b2a <releaseLock>
                    releaseLock(&waitLock);
    80203b12:	00280517          	auipc	a0,0x280
    80203b16:	a0e50513          	addi	a0,a0,-1522 # 80483520 <waitLock>
    80203b1a:	00002097          	auipc	ra,0x2
    80203b1e:	010080e7          	jalr	16(ra) # 80205b2a <releaseLock>
}
    80203b22:	8526                	mv	a0,s1
    80203b24:	60aa                	ld	ra,136(sp)
    80203b26:	640a                	ld	s0,128(sp)
    80203b28:	74e6                	ld	s1,120(sp)
    80203b2a:	7946                	ld	s2,112(sp)
    80203b2c:	79a6                	ld	s3,104(sp)
    80203b2e:	7a06                	ld	s4,96(sp)
    80203b30:	6ae6                	ld	s5,88(sp)
    80203b32:	6b46                	ld	s6,80(sp)
    80203b34:	6ba6                	ld	s7,72(sp)
    80203b36:	6c06                	ld	s8,64(sp)
    80203b38:	7ce2                	ld	s9,56(sp)
    80203b3a:	7d42                	ld	s10,48(sp)
    80203b3c:	7da2                	ld	s11,40(sp)
    80203b3e:	6149                	addi	sp,sp,144
    80203b40:	8082                	ret
                        releaseLock(&np->lock);
    80203b42:	854e                	mv	a0,s3
    80203b44:	00002097          	auipc	ra,0x2
    80203b48:	fe6080e7          	jalr	-26(ra) # 80205b2a <releaseLock>
                        releaseLock(&waitLock);
    80203b4c:	00280517          	auipc	a0,0x280
    80203b50:	9d450513          	addi	a0,a0,-1580 # 80483520 <waitLock>
    80203b54:	00002097          	auipc	ra,0x2
    80203b58:	fd6080e7          	jalr	-42(ra) # 80205b2a <releaseLock>
                        return -1;
    80203b5c:	54fd                	li	s1,-1
    80203b5e:	b7d1                	j	80203b22 <wait+0x1bc>
        if (!haveChildProcess) {
    80203b60:	000b1c63          	bnez	s6,80203b78 <wait+0x212>
            releaseLock(&waitLock);
    80203b64:	00280517          	auipc	a0,0x280
    80203b68:	9bc50513          	addi	a0,a0,-1604 # 80483520 <waitLock>
    80203b6c:	00002097          	auipc	ra,0x2
    80203b70:	fbe080e7          	jalr	-66(ra) # 80205b2a <releaseLock>
            return -1;
    80203b74:	54fd                	li	s1,-1
    80203b76:	b775                	j	80203b22 <wait+0x1bc>
        sleep(p, &waitLock);
    80203b78:	00280597          	auipc	a1,0x280
    80203b7c:	9a858593          	addi	a1,a1,-1624 # 80483520 <waitLock>
    80203b80:	8552                	mv	a0,s4
    80203b82:	00000097          	auipc	ra,0x0
    80203b86:	d44080e7          	jalr	-700(ra) # 802038c6 <sleep>
        haveChildProcess = 0;
    80203b8a:	b50d                	j	802039ac <wait+0x46>
    80203b8c:	0000                	unimp
	...

0000000080203b90 <sleepSave>:
#include <assembly/Trapframe.h>

    .globl sleepSave
    .align 4
sleepSave:
    sd ra, -8(sp)
    80203b90:	fe113c23          	sd	ra,-8(sp)
    sd gp, -16(sp)
    80203b94:	fe313823          	sd	gp,-16(sp)
    # sd tp, -24(sp)
    sd s0, -32(sp)
    80203b98:	fe813023          	sd	s0,-32(sp)
    sd s1, -40(sp)
    80203b9c:	fc913c23          	sd	s1,-40(sp)
    sd s2, -48(sp)
    80203ba0:	fd213823          	sd	s2,-48(sp)
    sd s3, -56(sp)
    80203ba4:	fd313423          	sd	s3,-56(sp)
    sd s4, -64(sp)
    80203ba8:	fd413023          	sd	s4,-64(sp)
    sd s5, -72(sp)
    80203bac:	fb513c23          	sd	s5,-72(sp)
    sd s6, -80(sp)
    80203bb0:	fb613823          	sd	s6,-80(sp)
    sd s7, -88(sp)
    80203bb4:	fb713423          	sd	s7,-88(sp)
    sd s8, -96(sp)
    80203bb8:	fb813023          	sd	s8,-96(sp)
    sd s9, -104(sp)
    80203bbc:	f9913c23          	sd	s9,-104(sp)
    sd s10, -112(sp)
    80203bc0:	f9a13823          	sd	s10,-112(sp)
    sd s11, -120(sp)
    80203bc4:	f9b13423          	sd	s11,-120(sp)
    sd a0, -128(sp)
    80203bc8:	f8a13023          	sd	a0,-128(sp)
    sd a1, -136(sp)
    80203bcc:	f6b13c23          	sd	a1,-136(sp)
    sd a2, -144(sp)
    80203bd0:	f6c13823          	sd	a2,-144(sp)
    sd a3, -152(sp)
    80203bd4:	f6d13423          	sd	a3,-152(sp)
    sd a4, -160(sp)
    80203bd8:	f6e13023          	sd	a4,-160(sp)
    sd a5, -168(sp)
    80203bdc:	f4f13c23          	sd	a5,-168(sp)
    sd a6, -176(sp)
    80203be0:	f5013823          	sd	a6,-176(sp)
    sd a7, -184(sp)
    80203be4:	f5113423          	sd	a7,-184(sp)
    add sp, sp, -184
    80203be8:	f4810113          	addi	sp,sp,-184
    jal yield
    80203bec:	eecff0ef          	jal	ra,802032d8 <yield>

0000000080203bf0 <sleepRec>:

    .globl sleepRec
    .align 4
sleepRec:
    ld ra, -8(sp)
    80203bf0:	ff813083          	ld	ra,-8(sp)
    ld gp, -16(sp)
    80203bf4:	ff013183          	ld	gp,-16(sp)
    # ld tp, -24(sp)
    ld s0, -32(sp)
    80203bf8:	fe013403          	ld	s0,-32(sp)
    ld s1, -40(sp)
    80203bfc:	fd813483          	ld	s1,-40(sp)
    ld s2, -48(sp)
    80203c00:	fd013903          	ld	s2,-48(sp)
    ld s3, -56(sp)
    80203c04:	fc813983          	ld	s3,-56(sp)
    ld s4, -64(sp)
    80203c08:	fc013a03          	ld	s4,-64(sp)
    ld s5, -72(sp)
    80203c0c:	fb813a83          	ld	s5,-72(sp)
    ld s6, -80(sp)
    80203c10:	fb013b03          	ld	s6,-80(sp)
    ld s7, -88(sp)
    80203c14:	fa813b83          	ld	s7,-88(sp)
    ld s8, -96(sp)
    80203c18:	fa013c03          	ld	s8,-96(sp)
    ld s9, -104(sp)
    80203c1c:	f9813c83          	ld	s9,-104(sp)
    ld s10, -112(sp)
    80203c20:	f9013d03          	ld	s10,-112(sp)
    ld s11, -120(sp)
    80203c24:	f8813d83          	ld	s11,-120(sp)
    ld a0, -128(sp)
    80203c28:	f8013503          	ld	a0,-128(sp)
    ld a1, -136(sp)
    80203c2c:	f7813583          	ld	a1,-136(sp)
    ld a2, -144(sp)
    80203c30:	f7013603          	ld	a2,-144(sp)
    ld a3, -152(sp)
    80203c34:	f6813683          	ld	a3,-152(sp)
    ld a4, -160(sp)
    80203c38:	f6013703          	ld	a4,-160(sp)
    ld a5, -168(sp)
    80203c3c:	f5813783          	ld	a5,-168(sp)
    ld a6, -176(sp)
    80203c40:	f5013803          	ld	a6,-176(sp)
    ld a7, -184(sp)
    80203c44:	f4813883          	ld	a7,-184(sp)
    80203c48:	8082                	ret
	...

0000000080203c54 <argraw>:
}




static u64 argraw(int n) {
    80203c54:	1101                	addi	sp,sp,-32
    80203c56:	ec06                	sd	ra,24(sp)
    80203c58:	e822                	sd	s0,16(sp)
    80203c5a:	e426                	sd	s1,8(sp)
    80203c5c:	1000                	addi	s0,sp,32
    80203c5e:	84aa                	mv	s1,a0
    Trapframe *trapframe = getHartTrapFrame();
    80203c60:	00002097          	auipc	ra,0x2
    80203c64:	f44080e7          	jalr	-188(ra) # 80205ba4 <getHartTrapFrame>
    switch (n) {
    80203c68:	4795                	li	a5,5
    80203c6a:	0297eb63          	bltu	a5,s1,80203ca0 <argraw+0x4c>
    80203c6e:	048a                	slli	s1,s1,0x2
    80203c70:	00009717          	auipc	a4,0x9
    80203c74:	ac470713          	addi	a4,a4,-1340 # 8020c734 <__func__.1+0x44>
    80203c78:	94ba                	add	s1,s1,a4
    80203c7a:	409c                	lw	a5,0(s1)
    80203c7c:	97ba                	add	a5,a5,a4
    80203c7e:	8782                	jr	a5
        case 0:
            return trapframe->a0;
    80203c80:	7928                	ld	a0,112(a0)
        case 5:
            return trapframe->a5;
    }
    panic("argraw");
    return -1;
}
    80203c82:	60e2                	ld	ra,24(sp)
    80203c84:	6442                	ld	s0,16(sp)
    80203c86:	64a2                	ld	s1,8(sp)
    80203c88:	6105                	addi	sp,sp,32
    80203c8a:	8082                	ret
            return trapframe->a1;
    80203c8c:	7d28                	ld	a0,120(a0)
    80203c8e:	bfd5                	j	80203c82 <argraw+0x2e>
            return trapframe->a2;
    80203c90:	6148                	ld	a0,128(a0)
    80203c92:	bfc5                	j	80203c82 <argraw+0x2e>
            return trapframe->a3;
    80203c94:	6548                	ld	a0,136(a0)
    80203c96:	b7f5                	j	80203c82 <argraw+0x2e>
            return trapframe->a4;
    80203c98:	6948                	ld	a0,144(a0)
    80203c9a:	b7e5                	j	80203c82 <argraw+0x2e>
            return trapframe->a5;
    80203c9c:	6d48                	ld	a0,152(a0)
    80203c9e:	b7d5                	j	80203c82 <argraw+0x2e>
    panic("argraw");
    80203ca0:	00009697          	auipc	a3,0x9
    80203ca4:	a6868693          	addi	a3,a3,-1432 # 8020c708 <__func__.1+0x18>
    80203ca8:	00009617          	auipc	a2,0x9
    80203cac:	5b860613          	addi	a2,a2,1464 # 8020d260 <__func__.0>
    80203cb0:	02f00593          	li	a1,47
    80203cb4:	00009517          	auipc	a0,0x9
    80203cb8:	a5c50513          	addi	a0,a0,-1444 # 8020c710 <__func__.1+0x20>
    80203cbc:	ffffd097          	auipc	ra,0xffffd
    80203cc0:	e90080e7          	jalr	-368(ra) # 80200b4c <_panic_>

0000000080203cc4 <fetchaddr>:
int fetchaddr(u64 addr, u64* ip) {
    80203cc4:	1101                	addi	sp,sp,-32
    80203cc6:	ec06                	sd	ra,24(sp)
    80203cc8:	e822                	sd	s0,16(sp)
    80203cca:	e426                	sd	s1,8(sp)
    80203ccc:	e04a                	sd	s2,0(sp)
    80203cce:	1000                	addi	s0,sp,32
    80203cd0:	892a                	mv	s2,a0
    80203cd2:	84ae                	mv	s1,a1
    struct Process* p = myproc();
    80203cd4:	fffff097          	auipc	ra,0xfffff
    80203cd8:	cdc080e7          	jalr	-804(ra) # 802029b0 <myproc>
    if (copyin(p->pgdir, (char*)ip, addr, sizeof(*ip)) != 0)
    80203cdc:	46a1                	li	a3,8
    80203cde:	864a                	mv	a2,s2
    80203ce0:	85a6                	mv	a1,s1
    80203ce2:	16853503          	ld	a0,360(a0)
    80203ce6:	ffffe097          	auipc	ra,0xffffe
    80203cea:	636080e7          	jalr	1590(ra) # 8020231c <copyin>
    80203cee:	00a03533          	snez	a0,a0
}
    80203cf2:	40a00533          	neg	a0,a0
    80203cf6:	60e2                	ld	ra,24(sp)
    80203cf8:	6442                	ld	s0,16(sp)
    80203cfa:	64a2                	ld	s1,8(sp)
    80203cfc:	6902                	ld	s2,0(sp)
    80203cfe:	6105                	addi	sp,sp,32
    80203d00:	8082                	ret

0000000080203d02 <argint>:

// Fetch the nth 32-bit system call argument.
int argint(int n, int* ip) {
    80203d02:	1101                	addi	sp,sp,-32
    80203d04:	ec06                	sd	ra,24(sp)
    80203d06:	e822                	sd	s0,16(sp)
    80203d08:	e426                	sd	s1,8(sp)
    80203d0a:	1000                	addi	s0,sp,32
    80203d0c:	84ae                	mv	s1,a1
    *ip = argraw(n);
    80203d0e:	00000097          	auipc	ra,0x0
    80203d12:	f46080e7          	jalr	-186(ra) # 80203c54 <argraw>
    80203d16:	c088                	sw	a0,0(s1)
    return 0;
}
    80203d18:	4501                	li	a0,0
    80203d1a:	60e2                	ld	ra,24(sp)
    80203d1c:	6442                	ld	s0,16(sp)
    80203d1e:	64a2                	ld	s1,8(sp)
    80203d20:	6105                	addi	sp,sp,32
    80203d22:	8082                	ret

0000000080203d24 <argaddr>:

// Retrieve an argument as a pointer.
// Doesn't check for legality, since
// copyin/copyout will do that.
int argaddr(int n, u64* ip) {
    80203d24:	1101                	addi	sp,sp,-32
    80203d26:	ec06                	sd	ra,24(sp)
    80203d28:	e822                	sd	s0,16(sp)
    80203d2a:	e426                	sd	s1,8(sp)
    80203d2c:	1000                	addi	s0,sp,32
    80203d2e:	84ae                	mv	s1,a1
    *ip = argraw(n);
    80203d30:	00000097          	auipc	ra,0x0
    80203d34:	f24080e7          	jalr	-220(ra) # 80203c54 <argraw>
    80203d38:	e088                	sd	a0,0(s1)
    return 0;
}
    80203d3a:	4501                	li	a0,0
    80203d3c:	60e2                	ld	ra,24(sp)
    80203d3e:	6442                	ld	s0,16(sp)
    80203d40:	64a2                	ld	s1,8(sp)
    80203d42:	6105                	addi	sp,sp,32
    80203d44:	8082                	ret

0000000080203d46 <copyinstr>:

// Copy a null-terminated string from user to kernel.
// Copy bytes to dst from virtual address srcva in a given page table,
// until a '\0', or max.
// Return 0 on success, -1 on error.
int copyinstr(u64* pagetable, char* dst, u64 srcva, u64 max) {
    80203d46:	711d                	addi	sp,sp,-96
    80203d48:	ec86                	sd	ra,88(sp)
    80203d4a:	e8a2                	sd	s0,80(sp)
    80203d4c:	e4a6                	sd	s1,72(sp)
    80203d4e:	e0ca                	sd	s2,64(sp)
    80203d50:	fc4e                	sd	s3,56(sp)
    80203d52:	f852                	sd	s4,48(sp)
    80203d54:	f456                	sd	s5,40(sp)
    80203d56:	f05a                	sd	s6,32(sp)
    80203d58:	ec5e                	sd	s7,24(sp)
    80203d5a:	1080                	addi	s0,sp,96
    u64 n, va0, pa0;
    int got_null = 0, cow;

    while (got_null == 0 && max > 0) {
    80203d5c:	cec9                	beqz	a3,80203df6 <copyinstr+0xb0>
    80203d5e:	8a2a                	mv	s4,a0
    80203d60:	8b2e                	mv	s6,a1
    80203d62:	8bb2                	mv	s7,a2
    80203d64:	84b6                	mv	s1,a3
        va0 = DOWN_ALIGN(srcva, PGSIZE);
    80203d66:	7afd                	lui	s5,0xfffff
        pa0 = vir2phy(pagetable, va0, &cow);
        if (pa0 == 0){
            printf("pa0=0!");
            return -1;
        }
        n = PGSIZE - (srcva - va0);
    80203d68:	6985                	lui	s3,0x1
    80203d6a:	a825                	j	80203da2 <copyinstr+0x5c>
            printf("pa0=0!");
    80203d6c:	00009517          	auipc	a0,0x9
    80203d70:	9b450513          	addi	a0,a0,-1612 # 8020c720 <__func__.1+0x30>
    80203d74:	ffffd097          	auipc	ra,0xffffd
    80203d78:	d4c080e7          	jalr	-692(ra) # 80200ac0 <printf>
            return -1;
    80203d7c:	557d                	li	a0,-1
    80203d7e:	a021                	j	80203d86 <copyinstr+0x40>
            n = max;

        char* p = (char*)(pa0 + (srcva - va0));
        while (n > 0) {
            if (*p == '\0') {
                *dst = '\0';
    80203d80:	00078023          	sb	zero,0(a5)
        }

        srcva = va0 + PGSIZE;
    }
    if (got_null) {
        return 0;
    80203d84:	4501                	li	a0,0
    } else {
        printf("ungot null\n");
        return -1;
    }
}
    80203d86:	60e6                	ld	ra,88(sp)
    80203d88:	6446                	ld	s0,80(sp)
    80203d8a:	64a6                	ld	s1,72(sp)
    80203d8c:	6906                	ld	s2,64(sp)
    80203d8e:	79e2                	ld	s3,56(sp)
    80203d90:	7a42                	ld	s4,48(sp)
    80203d92:	7aa2                	ld	s5,40(sp)
    80203d94:	7b02                	ld	s6,32(sp)
    80203d96:	6be2                	ld	s7,24(sp)
    80203d98:	6125                	addi	sp,sp,96
    80203d9a:	8082                	ret
        srcva = va0 + PGSIZE;
    80203d9c:	01390bb3          	add	s7,s2,s3
    while (got_null == 0 && max > 0) {
    80203da0:	c8b9                	beqz	s1,80203df6 <copyinstr+0xb0>
        va0 = DOWN_ALIGN(srcva, PGSIZE);
    80203da2:	015bf933          	and	s2,s7,s5
        pa0 = vir2phy(pagetable, va0, &cow);
    80203da6:	fac40613          	addi	a2,s0,-84
    80203daa:	85ca                	mv	a1,s2
    80203dac:	8552                	mv	a0,s4
    80203dae:	ffffe097          	auipc	ra,0xffffe
    80203db2:	4d8080e7          	jalr	1240(ra) # 80202286 <vir2phy>
        if (pa0 == 0){
    80203db6:	d95d                	beqz	a0,80203d6c <copyinstr+0x26>
        n = PGSIZE - (srcva - va0);
    80203db8:	417906b3          	sub	a3,s2,s7
    80203dbc:	96ce                	add	a3,a3,s3
    80203dbe:	00d4f363          	bgeu	s1,a3,80203dc4 <copyinstr+0x7e>
    80203dc2:	86a6                	mv	a3,s1
        char* p = (char*)(pa0 + (srcva - va0));
    80203dc4:	955e                	add	a0,a0,s7
    80203dc6:	41250533          	sub	a0,a0,s2
        while (n > 0) {
    80203dca:	dae9                	beqz	a3,80203d9c <copyinstr+0x56>
    80203dcc:	87da                	mv	a5,s6
            if (*p == '\0') {
    80203dce:	41650633          	sub	a2,a0,s6
    80203dd2:	fff48593          	addi	a1,s1,-1
    80203dd6:	95da                	add	a1,a1,s6
        while (n > 0) {
    80203dd8:	96da                	add	a3,a3,s6
            if (*p == '\0') {
    80203dda:	00f60733          	add	a4,a2,a5
    80203dde:	00074703          	lbu	a4,0(a4)
    80203de2:	df59                	beqz	a4,80203d80 <copyinstr+0x3a>
                *dst = *p;
    80203de4:	00e78023          	sb	a4,0(a5)
            --max;
    80203de8:	40f584b3          	sub	s1,a1,a5
            dst++;
    80203dec:	0785                	addi	a5,a5,1
        while (n > 0) {
    80203dee:	fed796e3          	bne	a5,a3,80203dda <copyinstr+0x94>
            dst++;
    80203df2:	8b3e                	mv	s6,a5
    80203df4:	b765                	j	80203d9c <copyinstr+0x56>
        printf("ungot null\n");
    80203df6:	00009517          	auipc	a0,0x9
    80203dfa:	93250513          	addi	a0,a0,-1742 # 8020c728 <__func__.1+0x38>
    80203dfe:	ffffd097          	auipc	ra,0xffffd
    80203e02:	cc2080e7          	jalr	-830(ra) # 80200ac0 <printf>
        return -1;
    80203e06:	557d                	li	a0,-1
    80203e08:	bfbd                	j	80203d86 <copyinstr+0x40>

0000000080203e0a <fetchstr>:
int fetchstr(u64 uva, char* buf, int max) {
    80203e0a:	7179                	addi	sp,sp,-48
    80203e0c:	f406                	sd	ra,40(sp)
    80203e0e:	f022                	sd	s0,32(sp)
    80203e10:	ec26                	sd	s1,24(sp)
    80203e12:	e84a                	sd	s2,16(sp)
    80203e14:	e44e                	sd	s3,8(sp)
    80203e16:	1800                	addi	s0,sp,48
    80203e18:	892a                	mv	s2,a0
    80203e1a:	84ae                	mv	s1,a1
    80203e1c:	89b2                	mv	s3,a2
    struct Process* p = myproc();
    80203e1e:	fffff097          	auipc	ra,0xfffff
    80203e22:	b92080e7          	jalr	-1134(ra) # 802029b0 <myproc>
    int err = copyinstr(p->pgdir, buf, uva, max);
    80203e26:	86ce                	mv	a3,s3
    80203e28:	864a                	mv	a2,s2
    80203e2a:	85a6                	mv	a1,s1
    80203e2c:	16853503          	ld	a0,360(a0)
    80203e30:	00000097          	auipc	ra,0x0
    80203e34:	f16080e7          	jalr	-234(ra) # 80203d46 <copyinstr>
    if (err < 0)
    80203e38:	00054763          	bltz	a0,80203e46 <fetchstr+0x3c>
    return strlen(buf);
    80203e3c:	8526                	mv	a0,s1
    80203e3e:	00002097          	auipc	ra,0x2
    80203e42:	0a2080e7          	jalr	162(ra) # 80205ee0 <strlen>
}
    80203e46:	70a2                	ld	ra,40(sp)
    80203e48:	7402                	ld	s0,32(sp)
    80203e4a:	64e2                	ld	s1,24(sp)
    80203e4c:	6942                	ld	s2,16(sp)
    80203e4e:	69a2                	ld	s3,8(sp)
    80203e50:	6145                	addi	sp,sp,48
    80203e52:	8082                	ret

0000000080203e54 <argstr>:
int argstr(int n, char* buf, int max) {
    80203e54:	1101                	addi	sp,sp,-32
    80203e56:	ec06                	sd	ra,24(sp)
    80203e58:	e822                	sd	s0,16(sp)
    80203e5a:	e426                	sd	s1,8(sp)
    80203e5c:	e04a                	sd	s2,0(sp)
    80203e5e:	1000                	addi	s0,sp,32
    80203e60:	84ae                	mv	s1,a1
    80203e62:	8932                	mv	s2,a2
    *ip = argraw(n);
    80203e64:	00000097          	auipc	ra,0x0
    80203e68:	df0080e7          	jalr	-528(ra) # 80203c54 <argraw>
    return fetchstr(addr, buf, max);
    80203e6c:	864a                	mv	a2,s2
    80203e6e:	85a6                	mv	a1,s1
    80203e70:	00000097          	auipc	ra,0x0
    80203e74:	f9a080e7          	jalr	-102(ra) # 80203e0a <fetchstr>
}
    80203e78:	60e2                	ld	ra,24(sp)
    80203e7a:	6442                	ld	s0,16(sp)
    80203e7c:	64a2                	ld	s1,8(sp)
    80203e7e:	6902                	ld	s2,0(sp)
    80203e80:	6105                	addi	sp,sp,32
    80203e82:	8082                	ret

0000000080203e84 <syscallGetProcessId>:
    acquireLock(&printLock);
    putchar(trapframe->a0);
    releaseLock(&printLock);
}

void syscallGetProcessId() {
    80203e84:	1141                	addi	sp,sp,-16
    80203e86:	e406                	sd	ra,8(sp)
    80203e88:	e022                	sd	s0,0(sp)
    80203e8a:	0800                	addi	s0,sp,16
    Trapframe* trapframe = getHartTrapFrame();
    80203e8c:	00002097          	auipc	ra,0x2
    80203e90:	d18080e7          	jalr	-744(ra) # 80205ba4 <getHartTrapFrame>
    80203e94:	8712                	mv	a4,tp
    trapframe->a0 = currentProcess[r_hartid()]->id;
    80203e96:	070e                	slli	a4,a4,0x3
    80203e98:	0027f797          	auipc	a5,0x27f
    80203e9c:	61878793          	addi	a5,a5,1560 # 804834b0 <currentProcess>
    80203ea0:	97ba                	add	a5,a5,a4
    80203ea2:	639c                	ld	a5,0(a5)
    80203ea4:	1707e783          	lwu	a5,368(a5)
    80203ea8:	f93c                	sd	a5,112(a0)
}
    80203eaa:	60a2                	ld	ra,8(sp)
    80203eac:	6402                	ld	s0,0(sp)
    80203eae:	0141                	addi	sp,sp,16
    80203eb0:	8082                	ret

0000000080203eb2 <syscallGetParentProcessId>:

void syscallGetParentProcessId() {
    80203eb2:	1141                	addi	sp,sp,-16
    80203eb4:	e406                	sd	ra,8(sp)
    80203eb6:	e022                	sd	s0,0(sp)
    80203eb8:	0800                	addi	s0,sp,16
    Trapframe* trapframe = getHartTrapFrame();
    80203eba:	00002097          	auipc	ra,0x2
    80203ebe:	cea080e7          	jalr	-790(ra) # 80205ba4 <getHartTrapFrame>
    80203ec2:	8712                	mv	a4,tp
    trapframe->a0 = currentProcess[r_hartid()]->parentId;
    80203ec4:	070e                	slli	a4,a4,0x3
    80203ec6:	0027f797          	auipc	a5,0x27f
    80203eca:	5ea78793          	addi	a5,a5,1514 # 804834b0 <currentProcess>
    80203ece:	97ba                	add	a5,a5,a4
    80203ed0:	639c                	ld	a5,0(a5)
    80203ed2:	1747e783          	lwu	a5,372(a5)
    80203ed6:	f93c                	sd	a5,112(a0)
}
    80203ed8:	60a2                	ld	ra,8(sp)
    80203eda:	6402                	ld	s0,0(sp)
    80203edc:	0141                	addi	sp,sp,16
    80203ede:	8082                	ret

0000000080203ee0 <syscallExitGroup>:
    Trapframe *tf = getHartTrapFrame();
    copyout(myproc()->pgdir, tf->a0, (char*)(&myproc()->id), sizeof(u64));
    tf->a0 = myproc()->id;
}

void syscallExitGroup() {
    80203ee0:	1141                	addi	sp,sp,-16
    80203ee2:	e406                	sd	ra,8(sp)
    80203ee4:	e022                	sd	s0,0(sp)
    80203ee6:	0800                	addi	s0,sp,16
    Trapframe *tf = getHartTrapFrame();
    80203ee8:	00002097          	auipc	ra,0x2
    80203eec:	cbc080e7          	jalr	-836(ra) # 80205ba4 <getHartTrapFrame>
    tf->a0 = 0;
    80203ef0:	06053823          	sd	zero,112(a0)
}
    80203ef4:	60a2                	ld	ra,8(sp)
    80203ef6:	6402                	ld	s0,0(sp)
    80203ef8:	0141                	addi	sp,sp,16
    80203efa:	8082                	ret

0000000080203efc <syscallProcessResourceLimit>:
void syscallGetTheardId() {
    Trapframe *tf = getHartTrapFrame();
    tf->a0 = myproc()->id;
}

void syscallProcessResourceLimit() {
    80203efc:	1141                	addi	sp,sp,-16
    80203efe:	e406                	sd	ra,8(sp)
    80203f00:	e022                	sd	s0,0(sp)
    80203f02:	0800                	addi	s0,sp,16
    Trapframe *tf = getHartTrapFrame();
    80203f04:	00002097          	auipc	ra,0x2
    80203f08:	ca0080e7          	jalr	-864(ra) # 80205ba4 <getHartTrapFrame>
    tf->a0 = 0;
    80203f0c:	06053823          	sd	zero,112(a0)
}
    80203f10:	60a2                	ld	ra,8(sp)
    80203f12:	6402                	ld	s0,0(sp)
    80203f14:	0141                	addi	sp,sp,16
    80203f16:	8082                	ret

0000000080203f18 <syscallPutchar>:
void syscallPutchar() {
    80203f18:	1101                	addi	sp,sp,-32
    80203f1a:	ec06                	sd	ra,24(sp)
    80203f1c:	e822                	sd	s0,16(sp)
    80203f1e:	e426                	sd	s1,8(sp)
    80203f20:	1000                	addi	s0,sp,32
    Trapframe* trapframe = getHartTrapFrame();
    80203f22:	00002097          	auipc	ra,0x2
    80203f26:	c82080e7          	jalr	-894(ra) # 80205ba4 <getHartTrapFrame>
    80203f2a:	84aa                	mv	s1,a0
    acquireLock(&printLock);
    80203f2c:	001be517          	auipc	a0,0x1be
    80203f30:	13450513          	addi	a0,a0,308 # 803c2060 <printLock>
    80203f34:	00002097          	auipc	ra,0x2
    80203f38:	b7a080e7          	jalr	-1158(ra) # 80205aae <acquireLock>
    putchar(trapframe->a0);
    80203f3c:	0704c503          	lbu	a0,112(s1)
    80203f40:	ffffc097          	auipc	ra,0xffffc
    80203f44:	3c4080e7          	jalr	964(ra) # 80200304 <putchar>
    releaseLock(&printLock);
    80203f48:	001be517          	auipc	a0,0x1be
    80203f4c:	11850513          	addi	a0,a0,280 # 803c2060 <printLock>
    80203f50:	00002097          	auipc	ra,0x2
    80203f54:	bda080e7          	jalr	-1062(ra) # 80205b2a <releaseLock>
}
    80203f58:	60e2                	ld	ra,24(sp)
    80203f5a:	6442                	ld	s0,16(sp)
    80203f5c:	64a2                	ld	s1,8(sp)
    80203f5e:	6105                	addi	sp,sp,32
    80203f60:	8082                	ret

0000000080203f62 <syscallProcessDestory>:
void syscallProcessDestory() {
    80203f62:	7179                	addi	sp,sp,-48
    80203f64:	f406                	sd	ra,40(sp)
    80203f66:	f022                	sd	s0,32(sp)
    80203f68:	ec26                	sd	s1,24(sp)
    80203f6a:	1800                	addi	s0,sp,48
    Trapframe* trapframe = getHartTrapFrame();
    80203f6c:	00002097          	auipc	ra,0x2
    80203f70:	c38080e7          	jalr	-968(ra) # 80205ba4 <getHartTrapFrame>
    80203f74:	84aa                	mv	s1,a0
    if ((ret = pid2Process(processId, &process, 1)) < 0) {
    80203f76:	4605                	li	a2,1
    80203f78:	fd840593          	addi	a1,s0,-40
    80203f7c:	5928                	lw	a0,112(a0)
    80203f7e:	fffff097          	auipc	ra,0xfffff
    80203f82:	c86080e7          	jalr	-890(ra) # 80202c04 <pid2Process>
    80203f86:	00054963          	bltz	a0,80203f98 <syscallProcessDestory+0x36>
    processDestory(process);
    80203f8a:	fd843503          	ld	a0,-40(s0)
    80203f8e:	00000097          	auipc	ra,0x0
    80203f92:	8ce080e7          	jalr	-1842(ra) # 8020385c <processDestory>
    return;
    80203f96:	4501                	li	a0,0
        trapframe->a0 = ret;
    80203f98:	f8a8                	sd	a0,112(s1)
}
    80203f9a:	70a2                	ld	ra,40(sp)
    80203f9c:	7402                	ld	s0,32(sp)
    80203f9e:	64e2                	ld	s1,24(sp)
    80203fa0:	6145                	addi	sp,sp,48
    80203fa2:	8082                	ret

0000000080203fa4 <syscallWait>:
void syscallWait() {
    80203fa4:	1101                	addi	sp,sp,-32
    80203fa6:	ec06                	sd	ra,24(sp)
    80203fa8:	e822                	sd	s0,16(sp)
    80203faa:	e426                	sd	s1,8(sp)
    80203fac:	1000                	addi	s0,sp,32
    Trapframe* trapframe = getHartTrapFrame();
    80203fae:	00002097          	auipc	ra,0x2
    80203fb2:	bf6080e7          	jalr	-1034(ra) # 80205ba4 <getHartTrapFrame>
    80203fb6:	84aa                	mv	s1,a0
    trapframe->a0 = wait(pid, addr);
    80203fb8:	7d2c                	ld	a1,120(a0)
    80203fba:	5928                	lw	a0,112(a0)
    80203fbc:	00000097          	auipc	ra,0x0
    80203fc0:	9aa080e7          	jalr	-1622(ra) # 80203966 <wait>
    80203fc4:	f8a8                	sd	a0,112(s1)
}
    80203fc6:	60e2                	ld	ra,24(sp)
    80203fc8:	6442                	ld	s0,16(sp)
    80203fca:	64a2                	ld	s1,8(sp)
    80203fcc:	6105                	addi	sp,sp,32
    80203fce:	8082                	ret

0000000080203fd0 <syscallYield>:
void syscallYield() {
    80203fd0:	1141                	addi	sp,sp,-16
    80203fd2:	e406                	sd	ra,8(sp)
    80203fd4:	e022                	sd	s0,0(sp)
    80203fd6:	0800                	addi	s0,sp,16
    kernelProcessCpuTimeEnd();
    80203fd8:	fffff097          	auipc	ra,0xfffff
    80203fdc:	7e6080e7          	jalr	2022(ra) # 802037be <kernelProcessCpuTimeEnd>
	yield();
    80203fe0:	fffff097          	auipc	ra,0xfffff
    80203fe4:	2f8080e7          	jalr	760(ra) # 802032d8 <yield>
}
    80203fe8:	60a2                	ld	ra,8(sp)
    80203fea:	6402                	ld	s0,0(sp)
    80203fec:	0141                	addi	sp,sp,16
    80203fee:	8082                	ret

0000000080203ff0 <syscallClone>:
void syscallClone() {
    80203ff0:	1141                	addi	sp,sp,-16
    80203ff2:	e406                	sd	ra,8(sp)
    80203ff4:	e022                	sd	s0,0(sp)
    80203ff6:	0800                	addi	s0,sp,16
    Trapframe *tf = getHartTrapFrame();
    80203ff8:	00002097          	auipc	ra,0x2
    80203ffc:	bac080e7          	jalr	-1108(ra) # 80205ba4 <getHartTrapFrame>
    processFork(tf->a0, tf->a1, tf->a2, tf->a3, tf->a4);
    80204000:	6958                	ld	a4,144(a0)
    80204002:	6554                	ld	a3,136(a0)
    80204004:	6150                	ld	a2,128(a0)
    80204006:	7d2c                	ld	a1,120(a0)
    80204008:	5928                	lw	a0,112(a0)
    8020400a:	fffff097          	auipc	ra,0xfffff
    8020400e:	49e080e7          	jalr	1182(ra) # 802034a8 <processFork>
}
    80204012:	60a2                	ld	ra,8(sp)
    80204014:	6402                	ld	s0,0(sp)
    80204016:	0141                	addi	sp,sp,16
    80204018:	8082                	ret

000000008020401a <syscallExit>:
void syscallExit() {
    8020401a:	7179                	addi	sp,sp,-48
    8020401c:	f406                	sd	ra,40(sp)
    8020401e:	f022                	sd	s0,32(sp)
    80204020:	ec26                	sd	s1,24(sp)
    80204022:	1800                	addi	s0,sp,48
    Trapframe* trapframe = getHartTrapFrame();
    80204024:	00002097          	auipc	ra,0x2
    80204028:	b80080e7          	jalr	-1152(ra) # 80205ba4 <getHartTrapFrame>
    int ret, ec = trapframe->a0;
    8020402c:	7924                	ld	s1,112(a0)
    if ((ret = pid2Process(0, &process, 1)) < 0) {
    8020402e:	4605                	li	a2,1
    80204030:	fd840593          	addi	a1,s0,-40
    80204034:	4501                	li	a0,0
    80204036:	fffff097          	auipc	ra,0xfffff
    8020403a:	bce080e7          	jalr	-1074(ra) # 80202c04 <pid2Process>
    8020403e:	02054e63          	bltz	a0,8020407a <syscallExit+0x60>
    process->retValue = (ec << 8); //todo
    80204042:	fd843503          	ld	a0,-40(s0)
    80204046:	0084949b          	slliw	s1,s1,0x8
    8020404a:	5c953423          	sd	s1,1480(a0)
    processDestory(process);
    8020404e:	00000097          	auipc	ra,0x0
    80204052:	80e080e7          	jalr	-2034(ra) # 8020385c <processDestory>
    panic("sycall exit error");
    80204056:	00008697          	auipc	a3,0x8
    8020405a:	72268693          	addi	a3,a3,1826 # 8020c778 <__func__.1+0x88>
    8020405e:	00008617          	auipc	a2,0x8
    80204062:	7e260613          	addi	a2,a2,2018 # 8020c840 <__func__.1>
    80204066:	08400593          	li	a1,132
    8020406a:	00008517          	auipc	a0,0x8
    8020406e:	6fe50513          	addi	a0,a0,1790 # 8020c768 <__func__.1+0x78>
    80204072:	ffffd097          	auipc	ra,0xffffd
    80204076:	ada080e7          	jalr	-1318(ra) # 80200b4c <_panic_>
        panic("Process exit error\n");
    8020407a:	00008697          	auipc	a3,0x8
    8020407e:	6d668693          	addi	a3,a3,1750 # 8020c750 <__func__.1+0x60>
    80204082:	00008617          	auipc	a2,0x8
    80204086:	7be60613          	addi	a2,a2,1982 # 8020c840 <__func__.1>
    8020408a:	07d00593          	li	a1,125
    8020408e:	00008517          	auipc	a0,0x8
    80204092:	6da50513          	addi	a0,a0,1754 # 8020c768 <__func__.1+0x78>
    80204096:	ffffd097          	auipc	ra,0xffffd
    8020409a:	ab6080e7          	jalr	-1354(ra) # 80200b4c <_panic_>

000000008020409e <syscallPutString>:
void syscallPutString() {
    8020409e:	7139                	addi	sp,sp,-64
    802040a0:	fc06                	sd	ra,56(sp)
    802040a2:	f822                	sd	s0,48(sp)
    802040a4:	f426                	sd	s1,40(sp)
    802040a6:	f04a                	sd	s2,32(sp)
    802040a8:	ec4e                	sd	s3,24(sp)
    802040aa:	e852                	sd	s4,16(sp)
    802040ac:	0080                	addi	s0,sp,64
    Trapframe* trapframe = getHartTrapFrame();
    802040ae:	00002097          	auipc	ra,0x2
    802040b2:	af6080e7          	jalr	-1290(ra) # 80205ba4 <getHartTrapFrame>
    802040b6:	8792                	mv	a5,tp
    u64 va = trapframe->a0;
    802040b8:	7924                	ld	s1,112(a0)
    int len = trapframe->a1;
    802040ba:	07853903          	ld	s2,120(a0)
    802040be:	00090a1b          	sext.w	s4,s2
    u64 pa = pageLookup(currentProcess[hartId]->pgdir, va, &pte) + (va & 0xfff);
    802040c2:	2781                	sext.w	a5,a5
    802040c4:	078e                	slli	a5,a5,0x3
    802040c6:	0027f717          	auipc	a4,0x27f
    802040ca:	3ea70713          	addi	a4,a4,1002 # 804834b0 <currentProcess>
    802040ce:	97ba                	add	a5,a5,a4
    802040d0:	639c                	ld	a5,0(a5)
    802040d2:	fc840613          	addi	a2,s0,-56
    802040d6:	85a6                	mv	a1,s1
    802040d8:	1687b503          	ld	a0,360(a5)
    802040dc:	ffffe097          	auipc	ra,0xffffe
    802040e0:	cc2080e7          	jalr	-830(ra) # 80201d9e <pageLookup>
    802040e4:	03449993          	slli	s3,s1,0x34
    802040e8:	0349d993          	srli	s3,s3,0x34
    802040ec:	99aa                	add	s3,s3,a0
    if (pa == 0) {
    802040ee:	04098c63          	beqz	s3,80204146 <syscallPutString+0xa8>
    char* start = (char*) pa;
    802040f2:	84ce                	mv	s1,s3
    acquireLock(&printLock);
    802040f4:	001be517          	auipc	a0,0x1be
    802040f8:	f6c50513          	addi	a0,a0,-148 # 803c2060 <printLock>
    802040fc:	00002097          	auipc	ra,0x2
    80204100:	9b2080e7          	jalr	-1614(ra) # 80205aae <acquireLock>
    while (len--) {
    80204104:	020a0163          	beqz	s4,80204126 <syscallPutString+0x88>
    80204108:	397d                	addiw	s2,s2,-1
    8020410a:	1902                	slli	s2,s2,0x20
    8020410c:	02095913          	srli	s2,s2,0x20
    80204110:	0985                	addi	s3,s3,1
    80204112:	994e                	add	s2,s2,s3
        putchar(*start);
    80204114:	0004c503          	lbu	a0,0(s1)
    80204118:	ffffc097          	auipc	ra,0xffffc
    8020411c:	1ec080e7          	jalr	492(ra) # 80200304 <putchar>
        start++;
    80204120:	0485                	addi	s1,s1,1
    while (len--) {
    80204122:	ff2499e3          	bne	s1,s2,80204114 <syscallPutString+0x76>
    releaseLock(&printLock);
    80204126:	001be517          	auipc	a0,0x1be
    8020412a:	f3a50513          	addi	a0,a0,-198 # 803c2060 <printLock>
    8020412e:	00002097          	auipc	ra,0x2
    80204132:	9fc080e7          	jalr	-1540(ra) # 80205b2a <releaseLock>
}
    80204136:	70e2                	ld	ra,56(sp)
    80204138:	7442                	ld	s0,48(sp)
    8020413a:	74a2                	ld	s1,40(sp)
    8020413c:	7902                	ld	s2,32(sp)
    8020413e:	69e2                	ld	s3,24(sp)
    80204140:	6a42                	ld	s4,16(sp)
    80204142:	6121                	addi	sp,sp,64
    80204144:	8082                	ret
        panic("Syscall put string address error!\nThe virtual address is %x, the length is %x\n", va, len);
    80204146:	87d2                	mv	a5,s4
    80204148:	8726                	mv	a4,s1
    8020414a:	00008697          	auipc	a3,0x8
    8020414e:	64668693          	addi	a3,a3,1606 # 8020c790 <__func__.1+0xa0>
    80204152:	00008617          	auipc	a2,0x8
    80204156:	6fe60613          	addi	a2,a2,1790 # 8020c850 <__func__.0>
    8020415a:	09100593          	li	a1,145
    8020415e:	00008517          	auipc	a0,0x8
    80204162:	60a50513          	addi	a0,a0,1546 # 8020c768 <__func__.1+0x78>
    80204166:	ffffd097          	auipc	ra,0xffffd
    8020416a:	9e6080e7          	jalr	-1562(ra) # 80200b4c <_panic_>

000000008020416e <syscallGetTheardId>:
void syscallGetTheardId() {
    8020416e:	1101                	addi	sp,sp,-32
    80204170:	ec06                	sd	ra,24(sp)
    80204172:	e822                	sd	s0,16(sp)
    80204174:	e426                	sd	s1,8(sp)
    80204176:	1000                	addi	s0,sp,32
    Trapframe *tf = getHartTrapFrame();
    80204178:	00002097          	auipc	ra,0x2
    8020417c:	a2c080e7          	jalr	-1492(ra) # 80205ba4 <getHartTrapFrame>
    80204180:	84aa                	mv	s1,a0
    tf->a0 = myproc()->id;
    80204182:	fffff097          	auipc	ra,0xfffff
    80204186:	82e080e7          	jalr	-2002(ra) # 802029b0 <myproc>
    8020418a:	17056783          	lwu	a5,368(a0)
    8020418e:	f8bc                	sd	a5,112(s1)
}
    80204190:	60e2                	ld	ra,24(sp)
    80204192:	6442                	ld	s0,16(sp)
    80204194:	64a2                	ld	s1,8(sp)
    80204196:	6105                	addi	sp,sp,32
    80204198:	8082                	ret

000000008020419a <syscallGetCpuTimes>:
void syscallGetCpuTimes() {
    8020419a:	7179                	addi	sp,sp,-48
    8020419c:	f406                	sd	ra,40(sp)
    8020419e:	f022                	sd	s0,32(sp)
    802041a0:	ec26                	sd	s1,24(sp)
    802041a2:	e84a                	sd	s2,16(sp)
    802041a4:	1800                	addi	s0,sp,48
    Trapframe *tf = getHartTrapFrame();
    802041a6:	00002097          	auipc	ra,0x2
    802041aa:	9fe080e7          	jalr	-1538(ra) # 80205ba4 <getHartTrapFrame>
    802041ae:	892a                	mv	s2,a0
    CpuTimes *ct = (CpuTimes*)vir2phy(myproc()->pgdir, tf->a0, &cow);
    802041b0:	fffff097          	auipc	ra,0xfffff
    802041b4:	800080e7          	jalr	-2048(ra) # 802029b0 <myproc>
    802041b8:	fdc40613          	addi	a2,s0,-36
    802041bc:	07093583          	ld	a1,112(s2)
    802041c0:	16853503          	ld	a0,360(a0)
    802041c4:	ffffe097          	auipc	ra,0xffffe
    802041c8:	0c2080e7          	jalr	194(ra) # 80202286 <vir2phy>
    802041cc:	84aa                	mv	s1,a0
    if (cow) {
    802041ce:	fdc42783          	lw	a5,-36(s0)
    802041d2:	ef8d                	bnez	a5,8020420c <syscallGetCpuTimes+0x72>
    *ct = myproc()->cpuTime;
    802041d4:	ffffe097          	auipc	ra,0xffffe
    802041d8:	7dc080e7          	jalr	2012(ra) # 802029b0 <myproc>
    802041dc:	13053603          	ld	a2,304(a0)
    802041e0:	13853683          	ld	a3,312(a0)
    802041e4:	14053703          	ld	a4,320(a0)
    802041e8:	14853783          	ld	a5,328(a0)
    802041ec:	e090                	sd	a2,0(s1)
    802041ee:	e494                	sd	a3,8(s1)
    802041f0:	e898                	sd	a4,16(s1)
    802041f2:	ec9c                	sd	a5,24(s1)
	return x;
}

static inline u64 r_cycle() {
	u64 x;
	asm volatile("rdcycle %0" : "=r" (x) );
    802041f4:	c00027f3          	rdcycle	a5
    tf->a0 = (r_cycle() & 0x3FFFFFFF);
    802041f8:	178a                	slli	a5,a5,0x22
    802041fa:	9389                	srli	a5,a5,0x22
    802041fc:	06f93823          	sd	a5,112(s2)
}
    80204200:	70a2                	ld	ra,40(sp)
    80204202:	7402                	ld	s0,32(sp)
    80204204:	64e2                	ld	s1,24(sp)
    80204206:	6942                	ld	s2,16(sp)
    80204208:	6145                	addi	sp,sp,48
    8020420a:	8082                	ret
        cowHandler(myproc()->pgdir, tf->a0);
    8020420c:	ffffe097          	auipc	ra,0xffffe
    80204210:	7a4080e7          	jalr	1956(ra) # 802029b0 <myproc>
    80204214:	07093583          	ld	a1,112(s2)
    80204218:	16853503          	ld	a0,360(a0)
    8020421c:	ffffe097          	auipc	ra,0xffffe
    80204220:	f4a080e7          	jalr	-182(ra) # 80202166 <cowHandler>
    80204224:	bf45                	j	802041d4 <syscallGetCpuTimes+0x3a>

0000000080204226 <syscallGetTime>:
void syscallGetTime() {
    80204226:	7179                	addi	sp,sp,-48
    80204228:	f406                	sd	ra,40(sp)
    8020422a:	f022                	sd	s0,32(sp)
    8020422c:	ec26                	sd	s1,24(sp)
    8020422e:	1800                	addi	s0,sp,48
    Trapframe *tf = getHartTrapFrame();
    80204230:	00002097          	auipc	ra,0x2
    80204234:	974080e7          	jalr	-1676(ra) # 80205ba4 <getHartTrapFrame>
    80204238:	84aa                	mv	s1,a0
	asm volatile("rdtime %0" : "=r" (x) );
    8020423a:	c01027f3          	rdtime	a5
    ts.second = time / 1000000;
    8020423e:	000f4737          	lui	a4,0xf4
    80204242:	24070713          	addi	a4,a4,576 # f4240 <_start-0x8010bdc0>
    80204246:	02e7d6b3          	divu	a3,a5,a4
    8020424a:	fcd43823          	sd	a3,-48(s0)
    ts.microSecond = time % 1000000;
    8020424e:	02e7f7b3          	remu	a5,a5,a4
    80204252:	fcf43c23          	sd	a5,-40(s0)
    copyout(myproc()->pgdir, tf->a0, (char*)&ts, sizeof(TimeSpec));
    80204256:	ffffe097          	auipc	ra,0xffffe
    8020425a:	75a080e7          	jalr	1882(ra) # 802029b0 <myproc>
    8020425e:	46c1                	li	a3,16
    80204260:	fd040613          	addi	a2,s0,-48
    80204264:	78ac                	ld	a1,112(s1)
    80204266:	16853503          	ld	a0,360(a0)
    8020426a:	ffffe097          	auipc	ra,0xffffe
    8020426e:	144080e7          	jalr	324(ra) # 802023ae <copyout>
    tf->a0 = 0;
    80204272:	0604b823          	sd	zero,112(s1)
}
    80204276:	70a2                	ld	ra,40(sp)
    80204278:	7402                	ld	s0,32(sp)
    8020427a:	64e2                	ld	s1,24(sp)
    8020427c:	6145                	addi	sp,sp,48
    8020427e:	8082                	ret

0000000080204280 <syscallSetTidAddress>:
void syscallSetTidAddress() {
    80204280:	7179                	addi	sp,sp,-48
    80204282:	f406                	sd	ra,40(sp)
    80204284:	f022                	sd	s0,32(sp)
    80204286:	ec26                	sd	s1,24(sp)
    80204288:	e84a                	sd	s2,16(sp)
    8020428a:	e44e                	sd	s3,8(sp)
    8020428c:	1800                	addi	s0,sp,48
    Trapframe *tf = getHartTrapFrame();
    8020428e:	00002097          	auipc	ra,0x2
    80204292:	916080e7          	jalr	-1770(ra) # 80205ba4 <getHartTrapFrame>
    80204296:	84aa                	mv	s1,a0
    copyout(myproc()->pgdir, tf->a0, (char*)(&myproc()->id), sizeof(u64));
    80204298:	ffffe097          	auipc	ra,0xffffe
    8020429c:	718080e7          	jalr	1816(ra) # 802029b0 <myproc>
    802042a0:	16853903          	ld	s2,360(a0)
    802042a4:	0704b983          	ld	s3,112(s1)
    802042a8:	ffffe097          	auipc	ra,0xffffe
    802042ac:	708080e7          	jalr	1800(ra) # 802029b0 <myproc>
    802042b0:	46a1                	li	a3,8
    802042b2:	17050613          	addi	a2,a0,368
    802042b6:	85ce                	mv	a1,s3
    802042b8:	854a                	mv	a0,s2
    802042ba:	ffffe097          	auipc	ra,0xffffe
    802042be:	0f4080e7          	jalr	244(ra) # 802023ae <copyout>
    tf->a0 = myproc()->id;
    802042c2:	ffffe097          	auipc	ra,0xffffe
    802042c6:	6ee080e7          	jalr	1774(ra) # 802029b0 <myproc>
    802042ca:	17056783          	lwu	a5,368(a0)
    802042ce:	f8bc                	sd	a5,112(s1)
}
    802042d0:	70a2                	ld	ra,40(sp)
    802042d2:	7402                	ld	s0,32(sp)
    802042d4:	64e2                	ld	s1,24(sp)
    802042d6:	6942                	ld	s2,16(sp)
    802042d8:	69a2                	ld	s3,8(sp)
    802042da:	6145                	addi	sp,sp,48
    802042dc:	8082                	ret

00000000802042de <syscallSleepTime>:
void syscallSleepTime() {
    802042de:	7179                	addi	sp,sp,-48
    802042e0:	f406                	sd	ra,40(sp)
    802042e2:	f022                	sd	s0,32(sp)
    802042e4:	ec26                	sd	s1,24(sp)
    802042e6:	e84a                	sd	s2,16(sp)
    802042e8:	1800                	addi	s0,sp,48
    Trapframe *tf = getHartTrapFrame();
    802042ea:	00002097          	auipc	ra,0x2
    802042ee:	8ba080e7          	jalr	-1862(ra) # 80205ba4 <getHartTrapFrame>
    802042f2:	84aa                	mv	s1,a0
    copyin(myproc()->pgdir, (char*)&ts, tf->a0, sizeof(TimeSpec));
    802042f4:	ffffe097          	auipc	ra,0xffffe
    802042f8:	6bc080e7          	jalr	1724(ra) # 802029b0 <myproc>
    802042fc:	46c1                	li	a3,16
    802042fe:	78b0                	ld	a2,112(s1)
    80204300:	fd040593          	addi	a1,s0,-48
    80204304:	16853503          	ld	a0,360(a0)
    80204308:	ffffe097          	auipc	ra,0xffffe
    8020430c:	014080e7          	jalr	20(ra) # 8020231c <copyin>
    80204310:	c0102973          	rdtime	s2
    myproc()->awakeTime = r_time() +  ts.second * 1000000 + ts.microSecond;
    80204314:	fd043483          	ld	s1,-48(s0)
    80204318:	000f47b7          	lui	a5,0xf4
    8020431c:	24078793          	addi	a5,a5,576 # f4240 <_start-0x8010bdc0>
    80204320:	02f484b3          	mul	s1,s1,a5
    80204324:	fd843783          	ld	a5,-40(s0)
    80204328:	94be                	add	s1,s1,a5
    8020432a:	ffffe097          	auipc	ra,0xffffe
    8020432e:	686080e7          	jalr	1670(ra) # 802029b0 <myproc>
    80204332:	9926                	add	s2,s2,s1
    80204334:	17253023          	sd	s2,352(a0)
    kernelProcessCpuTimeEnd();
    80204338:	fffff097          	auipc	ra,0xfffff
    8020433c:	486080e7          	jalr	1158(ra) # 802037be <kernelProcessCpuTimeEnd>
    yield();
    80204340:	fffff097          	auipc	ra,0xfffff
    80204344:	f98080e7          	jalr	-104(ra) # 802032d8 <yield>
}
    80204348:	70a2                	ld	ra,40(sp)
    8020434a:	7402                	ld	s0,32(sp)
    8020434c:	64e2                	ld	s1,24(sp)
    8020434e:	6942                	ld	s2,16(sp)
    80204350:	6145                	addi	sp,sp,48
    80204352:	8082                	ret

0000000080204354 <syscallBrk>:
void syscallBrk() {
    80204354:	1101                	addi	sp,sp,-32
    80204356:	ec06                	sd	ra,24(sp)
    80204358:	e822                	sd	s0,16(sp)
    8020435a:	e426                	sd	s1,8(sp)
    8020435c:	e04a                	sd	s2,0(sp)
    8020435e:	1000                	addi	s0,sp,32
    Trapframe *trapframe = getHartTrapFrame();
    80204360:	00002097          	auipc	ra,0x2
    80204364:	844080e7          	jalr	-1980(ra) # 80205ba4 <getHartTrapFrame>
    80204368:	84aa                	mv	s1,a0
    u64 addr = trapframe->a0;
    8020436a:	07053903          	ld	s2,112(a0)
    if (addr == 0) {
    8020436e:	00091f63          	bnez	s2,8020438c <syscallBrk+0x38>
        trapframe->a0 = myproc()->heapBottom;
    80204372:	ffffe097          	auipc	ra,0xffffe
    80204376:	63e080e7          	jalr	1598(ra) # 802029b0 <myproc>
    8020437a:	5d053503          	ld	a0,1488(a0)
    8020437e:	f8a8                	sd	a0,112(s1)
}
    80204380:	60e2                	ld	ra,24(sp)
    80204382:	6442                	ld	s0,16(sp)
    80204384:	64a2                	ld	s1,8(sp)
    80204386:	6902                	ld	s2,0(sp)
    80204388:	6105                	addi	sp,sp,32
    8020438a:	8082                	ret
    } else if (addr >= myproc()->heapBottom) {
    8020438c:	ffffe097          	auipc	ra,0xffffe
    80204390:	624080e7          	jalr	1572(ra) # 802029b0 <myproc>
    80204394:	5d053783          	ld	a5,1488(a0)
    80204398:	557d                	li	a0,-1
    8020439a:	fef962e3          	bltu	s2,a5,8020437e <syscallBrk+0x2a>
        trapframe->a0 = (sys_sbrk(addr - myproc()->heapBottom) != -1);
    8020439e:	ffffe097          	auipc	ra,0xffffe
    802043a2:	612080e7          	jalr	1554(ra) # 802029b0 <myproc>
    802043a6:	5d053503          	ld	a0,1488(a0)
    802043aa:	40a9053b          	subw	a0,s2,a0
    802043ae:	ffffe097          	auipc	ra,0xffffe
    802043b2:	0fc080e7          	jalr	252(ra) # 802024aa <sys_sbrk>
    802043b6:	0505                	addi	a0,a0,1
    802043b8:	00a03533          	snez	a0,a0
    802043bc:	b7c9                	j	8020437e <syscallBrk+0x2a>

00000000802043be <syscallSetBrk>:
void syscallSetBrk() {
    802043be:	1101                	addi	sp,sp,-32
    802043c0:	ec06                	sd	ra,24(sp)
    802043c2:	e822                	sd	s0,16(sp)
    802043c4:	e426                	sd	s1,8(sp)
    802043c6:	1000                	addi	s0,sp,32
    Trapframe *trapframe = getHartTrapFrame();
    802043c8:	00001097          	auipc	ra,0x1
    802043cc:	7dc080e7          	jalr	2012(ra) # 80205ba4 <getHartTrapFrame>
    802043d0:	84aa                	mv	s1,a0
    trapframe->a0 = sys_sbrk(len);
    802043d2:	5928                	lw	a0,112(a0)
    802043d4:	ffffe097          	auipc	ra,0xffffe
    802043d8:	0d6080e7          	jalr	214(ra) # 802024aa <sys_sbrk>
    802043dc:	f8a8                	sd	a0,112(s1)
}
    802043de:	60e2                	ld	ra,24(sp)
    802043e0:	6442                	ld	s0,16(sp)
    802043e2:	64a2                	ld	s1,8(sp)
    802043e4:	6105                	addi	sp,sp,32
    802043e6:	8082                	ret

00000000802043e8 <syscallMapMemory>:
void syscallMapMemory() {
    802043e8:	7175                	addi	sp,sp,-144
    802043ea:	e506                	sd	ra,136(sp)
    802043ec:	e122                	sd	s0,128(sp)
    802043ee:	fca6                	sd	s1,120(sp)
    802043f0:	f8ca                	sd	s2,112(sp)
    802043f2:	f4ce                	sd	s3,104(sp)
    802043f4:	f0d2                	sd	s4,96(sp)
    802043f6:	ecd6                	sd	s5,88(sp)
    802043f8:	e8da                	sd	s6,80(sp)
    802043fa:	e4de                	sd	s7,72(sp)
    802043fc:	e0e2                	sd	s8,64(sp)
    802043fe:	fc66                	sd	s9,56(sp)
    80204400:	f86a                	sd	s10,48(sp)
    80204402:	f46e                	sd	s11,40(sp)
    80204404:	0900                	addi	s0,sp,144
    Trapframe *trapframe = getHartTrapFrame();
    80204406:	00001097          	auipc	ra,0x1
    8020440a:	79e080e7          	jalr	1950(ra) # 80205ba4 <getHartTrapFrame>
    8020440e:	8c2a                	mv	s8,a0
    u64 start = trapframe->a0, len = trapframe->a1, perm = trapframe->a2, flags = trapframe->a3;
    80204410:	07053c83          	ld	s9,112(a0)
    80204414:	07853d83          	ld	s11,120(a0)
    80204418:	08053903          	ld	s2,128(a0)
    8020441c:	08853d03          	ld	s10,136(a0)
    if (alloc) {
    80204420:	020c8663          	beqz	s9,8020444c <syscallMapMemory+0x64>
    u64 addr = start, end = start + len;
    80204424:	01bc8a33          	add	s4,s9,s11
    start = DOWN_ALIGN(start, 12);
    80204428:	ff4cf493          	andi	s1,s9,-12
    while (start < end) {
    8020442c:	1144fe63          	bgeu	s1,s4,80204548 <syscallMapMemory+0x160>
        pageInsert(myproc()->pgdir, start, page2pa(page), perm | PTE_USER);
    80204430:	01096913          	ori	s2,s2,16
    return page - pages;
    80204434:	001beb97          	auipc	s7,0x1be
    80204438:	044b8b93          	addi	s7,s7,68 # 803c2478 <pages>
    8020443c:	00009b17          	auipc	s6,0x9
    80204440:	e9cb0b13          	addi	s6,s6,-356 # 8020d2d8 <__func__.0+0x8>
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80204444:	4985                	li	s3,1
    80204446:	09fe                	slli	s3,s3,0x1f
        start += PGSIZE;
    80204448:	6a85                	lui	s5,0x1
    8020444a:	a869                	j	802044e4 <syscallMapMemory+0xfc>
        myproc()->heapBottom = UP_ALIGN(myproc()->heapBottom, 12);
    8020444c:	ffffe097          	auipc	ra,0xffffe
    80204450:	564080e7          	jalr	1380(ra) # 802029b0 <myproc>
    80204454:	5d053483          	ld	s1,1488(a0)
    80204458:	14fd                	addi	s1,s1,-1
    8020445a:	98d1                	andi	s1,s1,-12
    8020445c:	ffffe097          	auipc	ra,0xffffe
    80204460:	554080e7          	jalr	1364(ra) # 802029b0 <myproc>
    80204464:	04b1                	addi	s1,s1,12
    80204466:	5c953823          	sd	s1,1488(a0)
        start = myproc()->heapBottom;
    8020446a:	ffffe097          	auipc	ra,0xffffe
    8020446e:	546080e7          	jalr	1350(ra) # 802029b0 <myproc>
    80204472:	5d053c83          	ld	s9,1488(a0)
        myproc()->heapBottom = UP_ALIGN(myproc()->heapBottom + len, 12); 
    80204476:	ffffe097          	auipc	ra,0xffffe
    8020447a:	53a080e7          	jalr	1338(ra) # 802029b0 <myproc>
    8020447e:	fffd8493          	addi	s1,s11,-1
    80204482:	5d053783          	ld	a5,1488(a0)
    80204486:	94be                	add	s1,s1,a5
    80204488:	98d1                	andi	s1,s1,-12
    8020448a:	ffffe097          	auipc	ra,0xffffe
    8020448e:	526080e7          	jalr	1318(ra) # 802029b0 <myproc>
    80204492:	04b1                	addi	s1,s1,12
    80204494:	5c953823          	sd	s1,1488(a0)
    80204498:	b771                	j	80204424 <syscallMapMemory+0x3c>
        if (pageAlloc(&page) < 0) {        
    8020449a:	f8040513          	addi	a0,s0,-128
    8020449e:	ffffd097          	auipc	ra,0xffffd
    802044a2:	770080e7          	jalr	1904(ra) # 80201c0e <pageAlloc>
    802044a6:	06054f63          	bltz	a0,80204524 <syscallMapMemory+0x13c>
        pageInsert(myproc()->pgdir, start, page2pa(page), perm | PTE_USER);
    802044aa:	ffffe097          	auipc	ra,0xffffe
    802044ae:	506080e7          	jalr	1286(ra) # 802029b0 <myproc>
    return page - pages;
    802044b2:	f8043603          	ld	a2,-128(s0)
    802044b6:	41760633          	sub	a2,a2,s7
    802044ba:	860d                	srai	a2,a2,0x3
    802044bc:	000b3783          	ld	a5,0(s6)
    802044c0:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802044c4:	00c6161b          	slliw	a2,a2,0xc
    802044c8:	1602                	slli	a2,a2,0x20
    802044ca:	9201                	srli	a2,a2,0x20
    802044cc:	86ca                	mv	a3,s2
    802044ce:	964e                	add	a2,a2,s3
    802044d0:	85a6                	mv	a1,s1
    802044d2:	16853503          	ld	a0,360(a0)
    802044d6:	ffffe097          	auipc	ra,0xffffe
    802044da:	ac4080e7          	jalr	-1340(ra) # 80201f9a <pageInsert>
        start += PGSIZE;
    802044de:	94d6                	add	s1,s1,s5
    while (start < end) {
    802044e0:	0744f463          	bgeu	s1,s4,80204548 <syscallMapMemory+0x160>
        u64 pa = pageLookup(myproc()->pgdir, start, &pte);
    802044e4:	ffffe097          	auipc	ra,0xffffe
    802044e8:	4cc080e7          	jalr	1228(ra) # 802029b0 <myproc>
    802044ec:	f7840613          	addi	a2,s0,-136
    802044f0:	85a6                	mv	a1,s1
    802044f2:	16853503          	ld	a0,360(a0)
    802044f6:	ffffe097          	auipc	ra,0xffffe
    802044fa:	8a8080e7          	jalr	-1880(ra) # 80201d9e <pageLookup>
        if (pa > 0 && (*pte & PTE_COW)) {
    802044fe:	dd51                	beqz	a0,8020449a <syscallMapMemory+0xb2>
    80204500:	f7843783          	ld	a5,-136(s0)
    80204504:	639c                	ld	a5,0(a5)
    80204506:	1007f793          	andi	a5,a5,256
    8020450a:	dbc1                	beqz	a5,8020449a <syscallMapMemory+0xb2>
            cowHandler(myproc()->pgdir, start);
    8020450c:	ffffe097          	auipc	ra,0xffffe
    80204510:	4a4080e7          	jalr	1188(ra) # 802029b0 <myproc>
    80204514:	85a6                	mv	a1,s1
    80204516:	16853503          	ld	a0,360(a0)
    8020451a:	ffffe097          	auipc	ra,0xffffe
    8020451e:	c4c080e7          	jalr	-948(ra) # 80202166 <cowHandler>
    80204522:	bfa5                	j	8020449a <syscallMapMemory+0xb2>
            trapframe->a0 = -1;
    80204524:	57fd                	li	a5,-1
    80204526:	06fc3823          	sd	a5,112(s8)
}
    8020452a:	60aa                	ld	ra,136(sp)
    8020452c:	640a                	ld	s0,128(sp)
    8020452e:	74e6                	ld	s1,120(sp)
    80204530:	7946                	ld	s2,112(sp)
    80204532:	79a6                	ld	s3,104(sp)
    80204534:	7a06                	ld	s4,96(sp)
    80204536:	6ae6                	ld	s5,88(sp)
    80204538:	6b46                	ld	s6,80(sp)
    8020453a:	6ba6                	ld	s7,72(sp)
    8020453c:	6c06                	ld	s8,64(sp)
    8020453e:	7ce2                	ld	s9,56(sp)
    80204540:	7d42                	ld	s10,48(sp)
    80204542:	7da2                	ld	s11,40(sp)
    80204544:	6149                	addi	sp,sp,144
    80204546:	8082                	ret
    if (flags & MAP_ANONYMOUS) {
    80204548:	020d7d13          	andi	s10,s10,32
    8020454c:	000d0563          	beqz	s10,80204556 <syscallMapMemory+0x16e>
        trapframe->a0 = addr;
    80204550:	079c3823          	sd	s9,112(s8)
        return;
    80204554:	bfd9                	j	8020452a <syscallMapMemory+0x142>
    if (argfd(4, 0, &fd)) {
    80204556:	f8840613          	addi	a2,s0,-120
    8020455a:	4581                	li	a1,0
    8020455c:	4511                	li	a0,4
    8020455e:	00002097          	auipc	ra,0x2
    80204562:	c72080e7          	jalr	-910(ra) # 802061d0 <argfd>
    80204566:	c509                	beqz	a0,80204570 <syscallMapMemory+0x188>
        trapframe->a0 = -1;
    80204568:	57fd                	li	a5,-1
    8020456a:	06fc3823          	sd	a5,112(s8)
        return ;
    8020456e:	bf75                	j	8020452a <syscallMapMemory+0x142>
    fd->off = trapframe->a5;
    80204570:	f8843503          	ld	a0,-120(s0)
    80204574:	098c3783          	ld	a5,152(s8)
    80204578:	d11c                	sw	a5,32(a0)
    if (fileread(fd, addr, len)) {
    8020457a:	000d861b          	sext.w	a2,s11
    8020457e:	85e6                	mv	a1,s9
    80204580:	00005097          	auipc	ra,0x5
    80204584:	192080e7          	jalr	402(ra) # 80209712 <fileread>
    80204588:	e111                	bnez	a0,8020458c <syscallMapMemory+0x1a4>
        trapframe->a0 = -1;
    8020458a:	5cfd                	li	s9,-1
    8020458c:	079c3823          	sd	s9,112(s8)
    80204590:	bf69                	j	8020452a <syscallMapMemory+0x142>

0000000080204592 <syscallUnMapMemory>:
void syscallUnMapMemory() {
    80204592:	7179                	addi	sp,sp,-48
    80204594:	f406                	sd	ra,40(sp)
    80204596:	f022                	sd	s0,32(sp)
    80204598:	ec26                	sd	s1,24(sp)
    8020459a:	e84a                	sd	s2,16(sp)
    8020459c:	e44e                	sd	s3,8(sp)
    8020459e:	e052                	sd	s4,0(sp)
    802045a0:	1800                	addi	s0,sp,48
    Trapframe *trapframe = getHartTrapFrame();
    802045a2:	00001097          	auipc	ra,0x1
    802045a6:	602080e7          	jalr	1538(ra) # 80205ba4 <getHartTrapFrame>
    802045aa:	8a2a                	mv	s4,a0
    u64 start = trapframe->a0, len = trapframe->a1, end = start + len;
    802045ac:	7924                	ld	s1,112(a0)
    802045ae:	07853903          	ld	s2,120(a0)
    802045b2:	9926                	add	s2,s2,s1
    start = DOWN_ALIGN(start, 12);
    802045b4:	98d1                	andi	s1,s1,-12
    while (start < end) {
    802045b6:	0324f363          	bgeu	s1,s2,802045dc <syscallUnMapMemory+0x4a>
        start += PGSIZE;
    802045ba:	6985                	lui	s3,0x1
        if (pageRemove(myproc()->pgdir, start) < 0) {
    802045bc:	ffffe097          	auipc	ra,0xffffe
    802045c0:	3f4080e7          	jalr	1012(ra) # 802029b0 <myproc>
    802045c4:	85a6                	mv	a1,s1
    802045c6:	16853503          	ld	a0,360(a0)
    802045ca:	ffffe097          	auipc	ra,0xffffe
    802045ce:	86e080e7          	jalr	-1938(ra) # 80201e38 <pageRemove>
    802045d2:	02054063          	bltz	a0,802045f2 <syscallUnMapMemory+0x60>
        start += PGSIZE;
    802045d6:	94ce                	add	s1,s1,s3
    while (start < end) {
    802045d8:	ff24e2e3          	bltu	s1,s2,802045bc <syscallUnMapMemory+0x2a>
    trapframe->a0 = 0;
    802045dc:	4781                	li	a5,0
            trapframe->a0 = -1;
    802045de:	06fa3823          	sd	a5,112(s4)
}
    802045e2:	70a2                	ld	ra,40(sp)
    802045e4:	7402                	ld	s0,32(sp)
    802045e6:	64e2                	ld	s1,24(sp)
    802045e8:	6942                	ld	s2,16(sp)
    802045ea:	69a2                	ld	s3,8(sp)
    802045ec:	6a02                	ld	s4,0(sp)
    802045ee:	6145                	addi	sp,sp,48
    802045f0:	8082                	ret
    802045f2:	57fd                	li	a5,-1
    802045f4:	b7ed                	j	802045de <syscallUnMapMemory+0x4c>

00000000802045f6 <syscallExec>:
void syscallExec() {
    802045f6:	1101                	addi	sp,sp,-32
    802045f8:	ec06                	sd	ra,24(sp)
    802045fa:	e822                	sd	s0,16(sp)
    802045fc:	e426                	sd	s1,8(sp)
    802045fe:	1000                	addi	s0,sp,32
    Trapframe *tf = getHartTrapFrame();
    80204600:	00001097          	auipc	ra,0x1
    80204604:	5a4080e7          	jalr	1444(ra) # 80205ba4 <getHartTrapFrame>
    80204608:	84aa                	mv	s1,a0
    tf->a0 = sys_exec();
    8020460a:	00001097          	auipc	ra,0x1
    8020460e:	0da080e7          	jalr	218(ra) # 802056e4 <sys_exec>
    80204612:	f8a8                	sd	a0,112(s1)
}
    80204614:	60e2                	ld	ra,24(sp)
    80204616:	6442                	ld	s0,16(sp)
    80204618:	64a2                	ld	s1,8(sp)
    8020461a:	6105                	addi	sp,sp,32
    8020461c:	8082                	ret

000000008020461e <syscallUname>:
void syscallUname() {
    8020461e:	7161                	addi	sp,sp,-432
    80204620:	f706                	sd	ra,424(sp)
    80204622:	f322                	sd	s0,416(sp)
    80204624:	ef26                	sd	s1,408(sp)
    80204626:	1b00                	addi	s0,sp,432
    strncpy(uname.sysname, "my_linux", 65);
    80204628:	04100613          	li	a2,65
    8020462c:	00008597          	auipc	a1,0x8
    80204630:	1b458593          	addi	a1,a1,436 # 8020c7e0 <__func__.1+0xf0>
    80204634:	e5840513          	addi	a0,s0,-424
    80204638:	00002097          	auipc	ra,0x2
    8020463c:	838080e7          	jalr	-1992(ra) # 80205e70 <strncpy>
    strncpy(uname.nodename, "my_node", 65);
    80204640:	04100613          	li	a2,65
    80204644:	00008597          	auipc	a1,0x8
    80204648:	1ac58593          	addi	a1,a1,428 # 8020c7f0 <__func__.1+0x100>
    8020464c:	e9940513          	addi	a0,s0,-359
    80204650:	00002097          	auipc	ra,0x2
    80204654:	820080e7          	jalr	-2016(ra) # 80205e70 <strncpy>
    strncpy(uname.release, "MIPS-OS", 65);
    80204658:	04100613          	li	a2,65
    8020465c:	00008597          	auipc	a1,0x8
    80204660:	19c58593          	addi	a1,a1,412 # 8020c7f8 <__func__.1+0x108>
    80204664:	eda40513          	addi	a0,s0,-294
    80204668:	00002097          	auipc	ra,0x2
    8020466c:	808080e7          	jalr	-2040(ra) # 80205e70 <strncpy>
    strncpy(uname.version, "0.1.0", 65);
    80204670:	04100613          	li	a2,65
    80204674:	00008597          	auipc	a1,0x8
    80204678:	18c58593          	addi	a1,a1,396 # 8020c800 <__func__.1+0x110>
    8020467c:	f1b40513          	addi	a0,s0,-229
    80204680:	00001097          	auipc	ra,0x1
    80204684:	7f0080e7          	jalr	2032(ra) # 80205e70 <strncpy>
    strncpy(uname.machine, "Risc-V sifive_u", 65);
    80204688:	04100613          	li	a2,65
    8020468c:	00008597          	auipc	a1,0x8
    80204690:	17c58593          	addi	a1,a1,380 # 8020c808 <__func__.1+0x118>
    80204694:	f5c40513          	addi	a0,s0,-164
    80204698:	00001097          	auipc	ra,0x1
    8020469c:	7d8080e7          	jalr	2008(ra) # 80205e70 <strncpy>
    strncpy(uname.domainname, "Beijing", 65);
    802046a0:	04100613          	li	a2,65
    802046a4:	00008597          	auipc	a1,0x8
    802046a8:	17458593          	addi	a1,a1,372 # 8020c818 <__func__.1+0x128>
    802046ac:	f9d40513          	addi	a0,s0,-99
    802046b0:	00001097          	auipc	ra,0x1
    802046b4:	7c0080e7          	jalr	1984(ra) # 80205e70 <strncpy>
    Trapframe *tf = getHartTrapFrame();
    802046b8:	00001097          	auipc	ra,0x1
    802046bc:	4ec080e7          	jalr	1260(ra) # 80205ba4 <getHartTrapFrame>
    802046c0:	84aa                	mv	s1,a0
    copyout(myproc()->pgdir, tf->a0, (char*)&uname, sizeof(struct utsname));
    802046c2:	ffffe097          	auipc	ra,0xffffe
    802046c6:	2ee080e7          	jalr	750(ra) # 802029b0 <myproc>
    802046ca:	18600693          	li	a3,390
    802046ce:	e5840613          	addi	a2,s0,-424
    802046d2:	78ac                	ld	a1,112(s1)
    802046d4:	16853503          	ld	a0,360(a0)
    802046d8:	ffffe097          	auipc	ra,0xffffe
    802046dc:	cd6080e7          	jalr	-810(ra) # 802023ae <copyout>
}
    802046e0:	70ba                	ld	ra,424(sp)
    802046e2:	741a                	ld	s0,416(sp)
    802046e4:	64fa                	ld	s1,408(sp)
    802046e6:	615d                	addi	sp,sp,432
    802046e8:	8082                	ret

00000000802046ea <syscallSignProccessMask>:
void syscallSignProccessMask() {
    802046ea:	7139                	addi	sp,sp,-64
    802046ec:	fc06                	sd	ra,56(sp)
    802046ee:	f822                	sd	s0,48(sp)
    802046f0:	f426                	sd	s1,40(sp)
    802046f2:	f04a                	sd	s2,32(sp)
    802046f4:	ec4e                	sd	s3,24(sp)
    802046f6:	e852                	sd	s4,16(sp)
    802046f8:	0080                	addi	s0,sp,64
    Trapframe *tf = getHartTrapFrame();
    802046fa:	00001097          	auipc	ra,0x1
    802046fe:	4aa080e7          	jalr	1194(ra) # 80205ba4 <getHartTrapFrame>
    80204702:	84aa                	mv	s1,a0
    u64 how = tf->a0;
    80204704:	07053903          	ld	s2,112(a0)
    copyin(myproc()->pgdir, (char*)&set, tf->a1, sizeof(SignalSet));
    80204708:	ffffe097          	auipc	ra,0xffffe
    8020470c:	2a8080e7          	jalr	680(ra) # 802029b0 <myproc>
    80204710:	46a1                	li	a3,8
    80204712:	7cb0                	ld	a2,120(s1)
    80204714:	fc840593          	addi	a1,s0,-56
    80204718:	16853503          	ld	a0,360(a0)
    8020471c:	ffffe097          	auipc	ra,0xffffe
    80204720:	c00080e7          	jalr	-1024(ra) # 8020231c <copyin>
    if (tf->a2 != 0) {
    80204724:	60dc                	ld	a5,128(s1)
    80204726:	e38d                	bnez	a5,80204748 <syscallSignProccessMask+0x5e>
    tf->a0 = signProccessMask(how, &set);
    80204728:	fc840593          	addi	a1,s0,-56
    8020472c:	854a                	mv	a0,s2
    8020472e:	00001097          	auipc	ra,0x1
    80204732:	4b2080e7          	jalr	1202(ra) # 80205be0 <signProccessMask>
    80204736:	f8a8                	sd	a0,112(s1)
}
    80204738:	70e2                	ld	ra,56(sp)
    8020473a:	7442                	ld	s0,48(sp)
    8020473c:	74a2                	ld	s1,40(sp)
    8020473e:	7902                	ld	s2,32(sp)
    80204740:	69e2                	ld	s3,24(sp)
    80204742:	6a42                	ld	s4,16(sp)
    80204744:	6121                	addi	sp,sp,64
    80204746:	8082                	ret
        copyout(myproc()->pgdir, tf->a2, (char*)(&myproc()->blocked), sizeof(SignalSet));
    80204748:	ffffe097          	auipc	ra,0xffffe
    8020474c:	268080e7          	jalr	616(ra) # 802029b0 <myproc>
    80204750:	16853983          	ld	s3,360(a0)
    80204754:	0804ba03          	ld	s4,128(s1)
    80204758:	ffffe097          	auipc	ra,0xffffe
    8020475c:	258080e7          	jalr	600(ra) # 802029b0 <myproc>
    80204760:	46a1                	li	a3,8
    80204762:	5d850613          	addi	a2,a0,1496
    80204766:	85d2                	mv	a1,s4
    80204768:	854e                	mv	a0,s3
    8020476a:	ffffe097          	auipc	ra,0xffffe
    8020476e:	c44080e7          	jalr	-956(ra) # 802023ae <copyout>
    80204772:	bf5d                	j	80204728 <syscallSignProccessMask+0x3e>

0000000080204774 <syscallSignalAction>:
void syscallSignalAction() {
    80204774:	1101                	addi	sp,sp,-32
    80204776:	ec06                	sd	ra,24(sp)
    80204778:	e822                	sd	s0,16(sp)
    8020477a:	e426                	sd	s1,8(sp)
    8020477c:	1000                	addi	s0,sp,32
    Trapframe *tf = getHartTrapFrame();
    8020477e:	00001097          	auipc	ra,0x1
    80204782:	426080e7          	jalr	1062(ra) # 80205ba4 <getHartTrapFrame>
    80204786:	84aa                	mv	s1,a0
    tf->a0 = doSignalAction(tf->a0, tf->a1, tf->a2);
    80204788:	6150                	ld	a2,128(a0)
    8020478a:	7d2c                	ld	a1,120(a0)
    8020478c:	5928                	lw	a0,112(a0)
    8020478e:	00001097          	auipc	ra,0x1
    80204792:	4ba080e7          	jalr	1210(ra) # 80205c48 <doSignalAction>
    80204796:	f8a8                	sd	a0,112(s1)
}
    80204798:	60e2                	ld	ra,24(sp)
    8020479a:	6442                	ld	s0,16(sp)
    8020479c:	64a2                	ld	s1,8(sp)
    8020479e:	6105                	addi	sp,sp,32
    802047a0:	8082                	ret

00000000802047a2 <syscallSignalTimedWait>:
void syscallSignalTimedWait() {
    802047a2:	7131                	addi	sp,sp,-192
    802047a4:	fd06                	sd	ra,184(sp)
    802047a6:	f922                	sd	s0,176(sp)
    802047a8:	f526                	sd	s1,168(sp)
    802047aa:	0180                	addi	s0,sp,192
    Trapframe *tf = getHartTrapFrame();
    802047ac:	00001097          	auipc	ra,0x1
    802047b0:	3f8080e7          	jalr	1016(ra) # 80205ba4 <getHartTrapFrame>
    802047b4:	84aa                	mv	s1,a0
    if (tf->a2) {
    802047b6:	615c                	ld	a5,128(a0)
    802047b8:	e7a5                	bnez	a5,80204820 <syscallSignalTimedWait+0x7e>
    copyin(myproc()->pgdir, (char*) &signalSet, tf->a0, sizeof(SignalSet));
    802047ba:	ffffe097          	auipc	ra,0xffffe
    802047be:	1f6080e7          	jalr	502(ra) # 802029b0 <myproc>
    802047c2:	46a1                	li	a3,8
    802047c4:	78b0                	ld	a2,112(s1)
    802047c6:	fc840593          	addi	a1,s0,-56
    802047ca:	16853503          	ld	a0,360(a0)
    802047ce:	ffffe097          	auipc	ra,0xffffe
    802047d2:	b4e080e7          	jalr	-1202(ra) # 8020231c <copyin>
    copyin(myproc()->pgdir, (char*) &info, tf->a0, sizeof(SignalInfo));
    802047d6:	ffffe097          	auipc	ra,0xffffe
    802047da:	1da080e7          	jalr	474(ra) # 802029b0 <myproc>
    802047de:	08000693          	li	a3,128
    802047e2:	78b0                	ld	a2,112(s1)
    802047e4:	f4840593          	addi	a1,s0,-184
    802047e8:	16853503          	ld	a0,360(a0)
    802047ec:	ffffe097          	auipc	ra,0xffffe
    802047f0:	b30080e7          	jalr	-1232(ra) # 8020231c <copyin>
    tf->a0 = doSignalTimedWait(&signalSet, &info, tf->a2 ? &ts: 0);
    802047f4:	60dc                	ld	a5,128(s1)
    802047f6:	00f037b3          	snez	a5,a5
    802047fa:	40f007b3          	neg	a5,a5
    802047fe:	fd040613          	addi	a2,s0,-48
    80204802:	8e7d                	and	a2,a2,a5
    80204804:	f4840593          	addi	a1,s0,-184
    80204808:	fc840513          	addi	a0,s0,-56
    8020480c:	00001097          	auipc	ra,0x1
    80204810:	508080e7          	jalr	1288(ra) # 80205d14 <doSignalTimedWait>
    80204814:	f8a8                	sd	a0,112(s1)
}
    80204816:	70ea                	ld	ra,184(sp)
    80204818:	744a                	ld	s0,176(sp)
    8020481a:	74aa                	ld	s1,168(sp)
    8020481c:	6129                	addi	sp,sp,192
    8020481e:	8082                	ret
        copyin(myproc()->pgdir, (char*) &ts, tf->a2, sizeof(TimeSpec));
    80204820:	ffffe097          	auipc	ra,0xffffe
    80204824:	190080e7          	jalr	400(ra) # 802029b0 <myproc>
    80204828:	46c1                	li	a3,16
    8020482a:	60d0                	ld	a2,128(s1)
    8020482c:	fd040593          	addi	a1,s0,-48
    80204830:	16853503          	ld	a0,360(a0)
    80204834:	ffffe097          	auipc	ra,0xffffe
    80204838:	ae8080e7          	jalr	-1304(ra) # 8020231c <copyin>
    8020483c:	bfbd                	j	802047ba <syscallSignalTimedWait+0x18>

000000008020483e <syscallIOControl>:

void syscallIOControl() {
    8020483e:	1101                	addi	sp,sp,-32
    80204840:	ec06                	sd	ra,24(sp)
    80204842:	e822                	sd	s0,16(sp)
    80204844:	e426                	sd	s1,8(sp)
    80204846:	1000                	addi	s0,sp,32
    Trapframe *tf = getHartTrapFrame();
    80204848:	00001097          	auipc	ra,0x1
    8020484c:	35c080e7          	jalr	860(ra) # 80205ba4 <getHartTrapFrame>
    80204850:	84aa                	mv	s1,a0
    printf("fd: %d, cmd: %d, argc: %d\n", tf->a0, tf->a1, tf->a2);
    80204852:	6154                	ld	a3,128(a0)
    80204854:	7d30                	ld	a2,120(a0)
    80204856:	792c                	ld	a1,112(a0)
    80204858:	00008517          	auipc	a0,0x8
    8020485c:	fc850513          	addi	a0,a0,-56 # 8020c820 <__func__.1+0x130>
    80204860:	ffffc097          	auipc	ra,0xffffc
    80204864:	260080e7          	jalr	608(ra) # 80200ac0 <printf>
    tf->a0 = 0;
    80204868:	0604b823          	sd	zero,112(s1)
}
    8020486c:	60e2                	ld	ra,24(sp)
    8020486e:	6442                	ld	s0,16(sp)
    80204870:	64a2                	ld	s1,8(sp)
    80204872:	6105                	addi	sp,sp,32
    80204874:	8082                	ret

0000000080204876 <setNextTimeout>:
#include <Process.h>
#include <Riscv.h>

static u32 ticks;

void setNextTimeout() {
    80204876:	1141                	addi	sp,sp,-16
    80204878:	e422                	sd	s0,8(sp)
    8020487a:	0800                	addi	s0,sp,16
    8020487c:	c0102573          	rdtime	a0
    SBI_CALL_1(SBI_SET_TIMER, r_time() + INTERVAL);
    80204880:	000317b7          	lui	a5,0x31
    80204884:	d4078793          	addi	a5,a5,-704 # 30d40 <_start-0x801cf2c0>
    80204888:	953e                	add	a0,a0,a5
    8020488a:	4581                	li	a1,0
    8020488c:	4601                	li	a2,0
    8020488e:	4681                	li	a3,0
    80204890:	4881                	li	a7,0
    80204892:	00000073          	ecall
}
    80204896:	6422                	ld	s0,8(sp)
    80204898:	0141                	addi	sp,sp,16
    8020489a:	8082                	ret

000000008020489c <timerTick>:

void timerTick() {
    8020489c:	1141                	addi	sp,sp,-16
    8020489e:	e406                	sd	ra,8(sp)
    802048a0:	e022                	sd	s0,0(sp)
    802048a2:	0800                	addi	s0,sp,16
    ticks++;
    802048a4:	003f9717          	auipc	a4,0x3f9
    802048a8:	cfc70713          	addi	a4,a4,-772 # 805fd5a0 <ticks>
    802048ac:	431c                	lw	a5,0(a4)
    802048ae:	2785                	addiw	a5,a5,1
    802048b0:	c31c                	sw	a5,0(a4)
    setNextTimeout();
    802048b2:	00000097          	auipc	ra,0x0
    802048b6:	fc4080e7          	jalr	-60(ra) # 80204876 <setNextTimeout>
    802048ba:	60a2                	ld	ra,8(sp)
    802048bc:	6402                	ld	s0,0(sp)
    802048be:	0141                	addi	sp,sp,16
    802048c0:	8082                	ret

00000000802048c2 <trapInit>:
#include <Sysfile.h>
#include <Debug.h>
#include <Defs.h>
#include <exec.h>

void trapInit() {
    802048c2:	1141                	addi	sp,sp,-16
    802048c4:	e406                	sd	ra,8(sp)
    802048c6:	e022                	sd	s0,0(sp)
    802048c8:	0800                	addi	s0,sp,16
    printf("Trap init start...\n");
    802048ca:	00008517          	auipc	a0,0x8
    802048ce:	f9e50513          	addi	a0,a0,-98 # 8020c868 <__func__.0+0x18>
    802048d2:	ffffc097          	auipc	ra,0xffffc
    802048d6:	1ee080e7          	jalr	494(ra) # 80200ac0 <printf>
	asm volatile("csrw stvec, %0" : : "r" (x));
    802048da:	ffffe797          	auipc	a5,0xffffe
    802048de:	ce678793          	addi	a5,a5,-794 # 802025c0 <kernelVector>
    802048e2:	10579073          	csrw	stvec,a5
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    802048e6:	100027f3          	csrr	a5,sstatus
    w_stvec((u64)kernelVector);
    w_sstatus(r_sstatus() | SSTATUS_SIE | SSTATUS_SPIE);
    802048ea:	0227e793          	ori	a5,a5,34
    asm volatile("csrw sstatus, %0" : : "r" (x));
    802048ee:	10079073          	csrw	sstatus,a5
    asm volatile("csrw sip, %0" : : "r" (x));
    802048f2:	4781                	li	a5,0
    802048f4:	14479073          	csrw	sip,a5
    asm volatile("csrr %0, sie" : "=r" (x) );
    802048f8:	104027f3          	csrr	a5,sie
    // setNextTimeout();
    w_sip(0); //todo
    w_sie(r_sie() | SIE_SEIE | SIE_SSIE | SIE_STIE);
    802048fc:	2227e793          	ori	a5,a5,546
	asm volatile("csrw sie, %0" : : "r" (x));
    80204900:	10479073          	csrw	sie,a5
    printf("Trap init finish!\n");
    80204904:	00008517          	auipc	a0,0x8
    80204908:	f7c50513          	addi	a0,a0,-132 # 8020c880 <__func__.0+0x30>
    8020490c:	ffffc097          	auipc	ra,0xffffc
    80204910:	1b4080e7          	jalr	436(ra) # 80200ac0 <printf>
}
    80204914:	60a2                	ld	ra,8(sp)
    80204916:	6402                	ld	s0,0(sp)
    80204918:	0141                	addi	sp,sp,16
    8020491a:	8082                	ret

000000008020491c <trapDevice>:
	asm volatile("csrr %0, scause" : "=r" (x) );
    8020491c:	142027f3          	csrr	a5,scause
    if ((scause & SCAUSE_INTERRUPT) &&
    ((scause & SCAUSE_EXCEPTION_CODE) == SCAUSE_SUPERVISOR_TIMER)) {
        timerTick();
        return TIMER_INTERRUPT;
    }
    return UNKNOWN_DEVICE;
    80204920:	4501                	li	a0,0
    if ((scause & SCAUSE_INTERRUPT) && 
    80204922:	0007c363          	bltz	a5,80204928 <trapDevice+0xc>
}
    80204926:	8082                	ret
int trapDevice() {
    80204928:	1101                	addi	sp,sp,-32
    8020492a:	ec06                	sd	ra,24(sp)
    8020492c:	e822                	sd	s0,16(sp)
    8020492e:	e426                	sd	s1,8(sp)
    80204930:	1000                	addi	s0,sp,32
    ((scause & SCAUSE_EXCEPTION_CODE) == SCAUSE_SUPERVISOR_EXTERNAL)) {
    80204932:	0786                	slli	a5,a5,0x1
    80204934:	8385                	srli	a5,a5,0x1
    if ((scause & SCAUSE_INTERRUPT) && 
    80204936:	4725                	li	a4,9
    80204938:	00e78b63          	beq	a5,a4,8020494e <trapDevice+0x32>
    if ((scause & SCAUSE_INTERRUPT) &&
    8020493c:	4715                	li	a4,5
    return UNKNOWN_DEVICE;
    8020493e:	4501                	li	a0,0
    if ((scause & SCAUSE_INTERRUPT) &&
    80204940:	08e78263          	beq	a5,a4,802049c4 <trapDevice+0xa8>
}
    80204944:	60e2                	ld	ra,24(sp)
    80204946:	6442                	ld	s0,16(sp)
    80204948:	64a2                	ld	s1,8(sp)
    8020494a:	6105                	addi	sp,sp,32
    8020494c:	8082                	ret

// read and write tp, the thread pointer, which holds
// this core's hartid (core number), the index into cpus[].
static inline u64 r_tp() {
	u64 x;
	asm volatile("mv %0, tp" : "=r" (x) );
    8020494e:	8712                	mv	a4,tp
void trapframeDump(Trapframe*);

inline static u32 interruptServed() {
    int hart = r_tp();
    #ifndef QEMU
    return *(u32*)PLIC_MCLAIM(hart);
    80204950:	00d7171b          	slliw	a4,a4,0xd
    80204954:	1f8617b7          	lui	a5,0x1f861
    80204958:	07a6                	slli	a5,a5,0x9
    8020495a:	97ba                	add	a5,a5,a4
    8020495c:	43c4                	lw	s1,4(a5)
        int irq = interruptServed();
    8020495e:	0004871b          	sext.w	a4,s1
        if (irq == UART_IRQ) {
    80204962:	02100793          	li	a5,33
    80204966:	02f70963          	beq	a4,a5,80204998 <trapDevice+0x7c>
        } else if (irq == DISK_IRQ) {
    8020496a:	47ed                	li	a5,27
    8020496c:	02f70d63          	beq	a4,a5,802049a6 <trapDevice+0x8a>
        return SOFTWARE_TRAP;
    80204970:	4505                	li	a0,1
        } else if (irq) {
    80204972:	db69                	beqz	a4,80204944 <trapDevice+0x28>
            panic("unexpected interrupt irq = %d\n", irq);
    80204974:	00008697          	auipc	a3,0x8
    80204978:	f2468693          	addi	a3,a3,-220 # 8020c898 <__func__.0+0x48>
    8020497c:	00008617          	auipc	a2,0x8
    80204980:	1bc60613          	addi	a2,a2,444 # 8020cb38 <__func__.2>
    80204984:	02b00593          	li	a1,43
    80204988:	00008517          	auipc	a0,0x8
    8020498c:	f3050513          	addi	a0,a0,-208 # 8020c8b8 <__func__.0+0x68>
    80204990:	ffffc097          	auipc	ra,0xffffc
    80204994:	1bc080e7          	jalr	444(ra) # 80200b4c <_panic_>
            int c = getchar();
    80204998:	ffffc097          	auipc	ra,0xffffc
    8020499c:	992080e7          	jalr	-1646(ra) # 8020032a <getchar>
            if (c != -1) {
    802049a0:	57fd                	li	a5,-1
    802049a2:	00f51c63          	bne	a0,a5,802049ba <trapDevice+0x9e>
    802049a6:	8712                	mv	a4,tp
}

inline static void interruptCompleted(int irq) {
    int hart = r_tp();
    #ifndef QEMU
    *(u32*)PLIC_MCLAIM(hart) = irq;
    802049a8:	00d7171b          	slliw	a4,a4,0xd
    802049ac:	1f8617b7          	lui	a5,0x1f861
    802049b0:	07a6                	slli	a5,a5,0x9
    802049b2:	97ba                	add	a5,a5,a4
    802049b4:	c3c4                	sw	s1,4(a5)
        return SOFTWARE_TRAP;
    802049b6:	4505                	li	a0,1
    #else
    *(u32*)PLIC_SCLAIM(hart) = irq;
    #endif
}
    802049b8:	b771                	j	80204944 <trapDevice+0x28>
                consoleInterrupt(c);
    802049ba:	ffffc097          	auipc	ra,0xffffc
    802049be:	93e080e7          	jalr	-1730(ra) # 802002f8 <consoleInterrupt>
    802049c2:	b7d5                	j	802049a6 <trapDevice+0x8a>
        timerTick();
    802049c4:	00000097          	auipc	ra,0x0
    802049c8:	ed8080e7          	jalr	-296(ra) # 8020489c <timerTick>
        return TIMER_INTERRUPT;
    802049cc:	4509                	li	a0,2
    802049ce:	bf9d                	j	80204944 <trapDevice+0x28>

00000000802049d0 <userTrapReturn>:
    //printf("leave kernel %s %d\n", __FILE__, __LINE__);
    Process *p = myproc();
    p->processTime.lastUserTime = r_time();
}

void userTrapReturn() {
    802049d0:	7139                	addi	sp,sp,-64
    802049d2:	fc06                	sd	ra,56(sp)
    802049d4:	f822                	sd	s0,48(sp)
    802049d6:	f426                	sd	s1,40(sp)
    802049d8:	f04a                	sd	s2,32(sp)
    802049da:	ec4e                	sd	s3,24(sp)
    802049dc:	e852                	sd	s4,16(sp)
    802049de:	0080                	addi	s0,sp,64
    Process *p = myproc();
    802049e0:	ffffe097          	auipc	ra,0xffffe
    802049e4:	fd0080e7          	jalr	-48(ra) # 802029b0 <myproc>
	asm volatile("rdtime %0" : "=r" (x) );
    802049e8:	c01027f3          	rdtime	a5
    p->processTime.lastUserTime = r_time();
    802049ec:	12f53023          	sd	a5,288(a0)
    userProcessCpuTimeBegin();
    extern char trampoline[];
    w_stvec(TRAMPOLINE_BASE + ((u64)userVector - (u64)trampoline));
    802049f0:	00005a17          	auipc	s4,0x5
    802049f4:	610a0a13          	addi	s4,s4,1552 # 8020a000 <_trampoline>
    802049f8:	02000937          	lui	s2,0x2000
    802049fc:	197d                	addi	s2,s2,-1
    802049fe:	0936                	slli	s2,s2,0xd
    80204a00:	00005797          	auipc	a5,0x5
    80204a04:	60078793          	addi	a5,a5,1536 # 8020a000 <_trampoline>
    80204a08:	97ca                	add	a5,a5,s2
    80204a0a:	414787b3          	sub	a5,a5,s4
	asm volatile("csrw stvec, %0" : : "r" (x));
    80204a0e:	10579073          	csrw	stvec,a5
    asm volatile("mv %0, tp" : "=r" (x) );
    80204a12:	8992                	mv	s3,tp
    int hartId = r_hartid();

    extern Process *currentProcess[HART_TOTAL_NUMBER];
    Trapframe* trapframe = getHartTrapFrame();
    80204a14:	00001097          	auipc	ra,0x1
    80204a18:	190080e7          	jalr	400(ra) # 80205ba4 <getHartTrapFrame>
    80204a1c:	84aa                	mv	s1,a0

    trapframe->kernelSp = getProcessTopSp(myproc());
    80204a1e:	ffffe097          	auipc	ra,0xffffe
    80204a22:	f92080e7          	jalr	-110(ra) # 802029b0 <myproc>
    80204a26:	ffffe097          	auipc	ra,0xffffe
    80204a2a:	fe6080e7          	jalr	-26(ra) # 80202a0c <getProcessTopSp>
    80204a2e:	e488                	sd	a0,8(s1)
    trapframe->trapHandler = (u64)userTrap;
    80204a30:	00000797          	auipc	a5,0x0
    80204a34:	24678793          	addi	a5,a5,582 # 80204c76 <userTrap>
    80204a38:	e89c                	sd	a5,16(s1)
	asm volatile("mv %0, tp" : "=r" (x) );
    80204a3a:	8792                	mv	a5,tp
    trapframe->kernelHartId = r_tp();
    80204a3c:	f09c                	sd	a5,32(s1)
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80204a3e:	100027f3          	csrr	a5,sstatus

    //bcopy(&(currentProcess->trapframe), trapframe, sizeof(Trapframe));

    u64 sstatus = r_sstatus();
    sstatus &= ~SSTATUS_SPP;
    80204a42:	eff7f793          	andi	a5,a5,-257
    sstatus |= SSTATUS_SPIE;
    80204a46:	0207e793          	ori	a5,a5,32
    asm volatile("csrw sstatus, %0" : : "r" (x));
    80204a4a:	10079073          	csrw	sstatus,a5
    w_sstatus(sstatus);
    u64 satp = MAKE_SATP(currentProcess[hartId]->pgdir);
    80204a4e:	2981                	sext.w	s3,s3
    80204a50:	098e                	slli	s3,s3,0x3
    80204a52:	0027f797          	auipc	a5,0x27f
    80204a56:	a5e78793          	addi	a5,a5,-1442 # 804834b0 <currentProcess>
    80204a5a:	97ce                	add	a5,a5,s3
    80204a5c:	639c                	ld	a5,0(a5)
    80204a5e:	1687b983          	ld	s3,360(a5)
    u64 fn = TRAMPOLINE_BASE + ((u64)userReturn - (u64)trampoline);
    80204a62:	00005797          	auipc	a5,0x5
    80204a66:	63678793          	addi	a5,a5,1590 # 8020a098 <userReturn>
    80204a6a:	993e                	add	s2,s2,a5
    80204a6c:	41490933          	sub	s2,s2,s4
    u64* pte;
    u64 pa = pageLookup(currentProcess[hartId]->pgdir, USER_STACK_TOP - PAGE_SIZE, &pte);
    80204a70:	fc840613          	addi	a2,s0,-56
    80204a74:	040005b7          	lui	a1,0x4000
    80204a78:	15f5                	addi	a1,a1,-3
    80204a7a:	05b2                	slli	a1,a1,0xc
    80204a7c:	854e                	mv	a0,s3
    80204a7e:	ffffd097          	auipc	ra,0xffffd
    80204a82:	320080e7          	jalr	800(ra) # 80201d9e <pageLookup>
    u64 satp = MAKE_SATP(currentProcess[hartId]->pgdir);
    80204a86:	00c9d993          	srli	s3,s3,0xc
#else
        //We must use 'tem', otherwise we will get compile error.
        use(tem);
#endif
    }
    ((void(*)(u64, u64))fn)((u64)trapframe, satp);
    80204a8a:	55fd                	li	a1,-1
    80204a8c:	15fe                	slli	a1,a1,0x3f
    80204a8e:	00b9e5b3          	or	a1,s3,a1
    80204a92:	8526                	mv	a0,s1
    80204a94:	9902                	jalr	s2
}
    80204a96:	70e2                	ld	ra,56(sp)
    80204a98:	7442                	ld	s0,48(sp)
    80204a9a:	74a2                	ld	s1,40(sp)
    80204a9c:	7902                	ld	s2,32(sp)
    80204a9e:	69e2                	ld	s3,24(sp)
    80204aa0:	6a42                	ld	s4,16(sp)
    80204aa2:	6121                	addi	sp,sp,64
    80204aa4:	8082                	ret

0000000080204aa6 <trapframeDump>:

void trapframeDump(Trapframe *tf)
{
    80204aa6:	7111                	addi	sp,sp,-256
    80204aa8:	fd86                	sd	ra,248(sp)
    80204aaa:	f9a2                	sd	s0,240(sp)
    80204aac:	0200                	addi	s0,sp,256
    printf(" a0: %lx\n \
    80204aae:	711c                	ld	a5,32(a0)
    80204ab0:	f1be                	sd	a5,224(sp)
    80204ab2:	691c                	ld	a5,16(a0)
    80204ab4:	edbe                	sd	a5,216(sp)
    80204ab6:	611c                	ld	a5,0(a0)
    80204ab8:	e9be                	sd	a5,208(sp)
    80204aba:	651c                	ld	a5,8(a0)
    80204abc:	e5be                	sd	a5,200(sp)
    80204abe:	6d1c                	ld	a5,24(a0)
    80204ac0:	e1be                	sd	a5,192(sp)
    80204ac2:	613c                	ld	a5,64(a0)
    80204ac4:	fd3e                	sd	a5,184(sp)
    80204ac6:	7d1c                	ld	a5,56(a0)
    80204ac8:	f93e                	sd	a5,176(sp)
    80204aca:	791c                	ld	a5,48(a0)
    80204acc:	f53e                	sd	a5,168(sp)
    80204ace:	751c                	ld	a5,40(a0)
    80204ad0:	f13e                	sd	a5,160(sp)
    80204ad2:	7d7c                	ld	a5,248(a0)
    80204ad4:	ed3e                	sd	a5,152(sp)
    80204ad6:	797c                	ld	a5,240(a0)
    80204ad8:	e93e                	sd	a5,144(sp)
    80204ada:	757c                	ld	a5,232(a0)
    80204adc:	e53e                	sd	a5,136(sp)
    80204ade:	717c                	ld	a5,224(a0)
    80204ae0:	e13e                	sd	a5,128(sp)
    80204ae2:	6d7c                	ld	a5,216(a0)
    80204ae4:	fcbe                	sd	a5,120(sp)
    80204ae6:	697c                	ld	a5,208(a0)
    80204ae8:	f8be                	sd	a5,112(sp)
    80204aea:	657c                	ld	a5,200(a0)
    80204aec:	f4be                	sd	a5,104(sp)
    80204aee:	617c                	ld	a5,192(a0)
    80204af0:	f0be                	sd	a5,96(sp)
    80204af2:	7d5c                	ld	a5,184(a0)
    80204af4:	ecbe                	sd	a5,88(sp)
    80204af6:	795c                	ld	a5,176(a0)
    80204af8:	e8be                	sd	a5,80(sp)
    80204afa:	753c                	ld	a5,104(a0)
    80204afc:	e4be                	sd	a5,72(sp)
    80204afe:	713c                	ld	a5,96(a0)
    80204b00:	e0be                	sd	a5,64(sp)
    80204b02:	11853783          	ld	a5,280(a0)
    80204b06:	fc3e                	sd	a5,56(sp)
    80204b08:	11053783          	ld	a5,272(a0)
    80204b0c:	f83e                	sd	a5,48(sp)
    80204b0e:	10853783          	ld	a5,264(a0)
    80204b12:	f43e                	sd	a5,40(sp)
    80204b14:	10053783          	ld	a5,256(a0)
    80204b18:	f03e                	sd	a5,32(sp)
    80204b1a:	6d3c                	ld	a5,88(a0)
    80204b1c:	ec3e                	sd	a5,24(sp)
    80204b1e:	693c                	ld	a5,80(a0)
    80204b20:	e83e                	sd	a5,16(sp)
    80204b22:	653c                	ld	a5,72(a0)
    80204b24:	e43e                	sd	a5,8(sp)
    80204b26:	755c                	ld	a5,168(a0)
    80204b28:	e03e                	sd	a5,0(sp)
    80204b2a:	0a053883          	ld	a7,160(a0)
    80204b2e:	09853803          	ld	a6,152(a0)
    80204b32:	695c                	ld	a5,144(a0)
    80204b34:	6558                	ld	a4,136(a0)
    80204b36:	6154                	ld	a3,128(a0)
    80204b38:	7d30                	ld	a2,120(a0)
    80204b3a:	792c                	ld	a1,112(a0)
    80204b3c:	00008517          	auipc	a0,0x8
    80204b40:	d8450513          	addi	a0,a0,-636 # 8020c8c0 <__func__.0+0x70>
    80204b44:	ffffc097          	auipc	ra,0xffffc
    80204b48:	f7c080e7          	jalr	-132(ra) # 80200ac0 <printf>
            tf->s0, tf->s1, tf->s2, tf->s3, tf->s4,
            tf->s5, tf->s6, tf->s7, tf->s8, tf->s9,
            tf->s10, tf->s11, tf->ra, tf->sp, tf->gp,
            tf->tp, tf->epc, tf->kernelSp, tf->kernelSatp,
            tf->trapHandler, tf->kernelHartId);
}
    80204b4c:	70ee                	ld	ra,248(sp)
    80204b4e:	744e                	ld	s0,240(sp)
    80204b50:	6111                	addi	sp,sp,256
    80204b52:	8082                	ret

0000000080204b54 <kernelTrap>:
void kernelTrap() {
    80204b54:	7139                	addi	sp,sp,-64
    80204b56:	fc06                	sd	ra,56(sp)
    80204b58:	f822                	sd	s0,48(sp)
    80204b5a:	f426                	sd	s1,40(sp)
    80204b5c:	f04a                	sd	s2,32(sp)
    80204b5e:	ec4e                	sd	s3,24(sp)
    80204b60:	e852                	sd	s4,16(sp)
    80204b62:	0080                	addi	s0,sp,64
    asm volatile("csrr %0, sepc" : "=r" (x) );
    80204b64:	14102973          	csrr	s2,sepc
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80204b68:	100024f3          	csrr	s1,sstatus
	asm volatile("csrr %0, scause" : "=r" (x) );
    80204b6c:	14202a73          	csrr	s4,scause
    asm volatile("mv %0, tp" : "=r" (x) );
    80204b70:	8992                	mv	s3,tp
	asm volatile("csrr %0, stval" : "=r" (x) );
    80204b72:	143027f3          	csrr	a5,stval
    printf("[Kernel Trap] hartId is %lx, status is %lx, spec is %lx, cause is %lx, stval is %lx\n", hartId, sstatus, sepc, scause, r_stval());
    80204b76:	8752                	mv	a4,s4
    80204b78:	86ca                	mv	a3,s2
    80204b7a:	8626                	mv	a2,s1
    80204b7c:	85ce                	mv	a1,s3
    80204b7e:	00008517          	auipc	a0,0x8
    80204b82:	eb250513          	addi	a0,a0,-334 # 8020ca30 <__func__.0+0x1e0>
    80204b86:	ffffc097          	auipc	ra,0xffffc
    80204b8a:	f3a080e7          	jalr	-198(ra) # 80200ac0 <printf>
    Trapframe* trapframe = getHartTrapFrame();
    80204b8e:	00001097          	auipc	ra,0x1
    80204b92:	016080e7          	jalr	22(ra) # 80205ba4 <getHartTrapFrame>
    trapframeDump(trapframe);
    80204b96:	00000097          	auipc	ra,0x0
    80204b9a:	f10080e7          	jalr	-240(ra) # 80204aa6 <trapframeDump>
    if (!(sstatus & SSTATUS_SPP)) {
    80204b9e:	1004f793          	andi	a5,s1,256
    80204ba2:	cb8d                	beqz	a5,80204bd4 <kernelTrap+0x80>
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80204ba4:	100027f3          	csrr	a5,sstatus
	return (x & SSTATUS_SIE) != 0;
    80204ba8:	8b89                	andi	a5,a5,2
    if (intr_get()) {
    80204baa:	e7b9                	bnez	a5,80204bf8 <kernelTrap+0xa4>
    int device = trapDevice();
    80204bac:	00000097          	auipc	ra,0x0
    80204bb0:	d70080e7          	jalr	-656(ra) # 8020491c <trapDevice>
    if (device == UNKNOWN_DEVICE) {
    80204bb4:	c525                	beqz	a0,80204c1c <kernelTrap+0xc8>
    if (device == TIMER_INTERRUPT) {
    80204bb6:	4789                	li	a5,2
    80204bb8:	0af50a63          	beq	a0,a5,80204c6c <kernelTrap+0x118>
  	asm volatile("csrw sepc, %0" : : "r" (x));
    80204bbc:	14191073          	csrw	sepc,s2
    asm volatile("csrw sstatus, %0" : : "r" (x));
    80204bc0:	10049073          	csrw	sstatus,s1
}
    80204bc4:	70e2                	ld	ra,56(sp)
    80204bc6:	7442                	ld	s0,48(sp)
    80204bc8:	74a2                	ld	s1,40(sp)
    80204bca:	7902                	ld	s2,32(sp)
    80204bcc:	69e2                	ld	s3,24(sp)
    80204bce:	6a42                	ld	s4,16(sp)
    80204bd0:	6121                	addi	sp,sp,64
    80204bd2:	8082                	ret
        panic("kernel trap not from supervisor mode");
    80204bd4:	00008697          	auipc	a3,0x8
    80204bd8:	eb468693          	addi	a3,a3,-332 # 8020ca88 <__func__.0+0x238>
    80204bdc:	00008617          	auipc	a2,0x8
    80204be0:	f6c60613          	addi	a2,a2,-148 # 8020cb48 <__func__.1>
    80204be4:	04d00593          	li	a1,77
    80204be8:	00008517          	auipc	a0,0x8
    80204bec:	cd050513          	addi	a0,a0,-816 # 8020c8b8 <__func__.0+0x68>
    80204bf0:	ffffc097          	auipc	ra,0xffffc
    80204bf4:	f5c080e7          	jalr	-164(ra) # 80200b4c <_panic_>
        panic("kernel trap while interrupts enbled");
    80204bf8:	00008697          	auipc	a3,0x8
    80204bfc:	eb868693          	addi	a3,a3,-328 # 8020cab0 <__func__.0+0x260>
    80204c00:	00008617          	auipc	a2,0x8
    80204c04:	f4860613          	addi	a2,a2,-184 # 8020cb48 <__func__.1>
    80204c08:	05000593          	li	a1,80
    80204c0c:	00008517          	auipc	a0,0x8
    80204c10:	cac50513          	addi	a0,a0,-852 # 8020c8b8 <__func__.0+0x68>
    80204c14:	ffffc097          	auipc	ra,0xffffc
    80204c18:	f38080e7          	jalr	-200(ra) # 80200b4c <_panic_>
	asm volatile("csrr %0, stval" : "=r" (x) );
    80204c1c:	143025f3          	csrr	a1,stval
        int pa = pageLookup(currentProcess[hartId]->pgdir, r_stval(), &pte);
    80204c20:	098e                	slli	s3,s3,0x3
    80204c22:	0027f797          	auipc	a5,0x27f
    80204c26:	88e78793          	addi	a5,a5,-1906 # 804834b0 <currentProcess>
    80204c2a:	97ce                	add	a5,a5,s3
    80204c2c:	639c                	ld	a5,0(a5)
    80204c2e:	fc840613          	addi	a2,s0,-56
    80204c32:	1687b503          	ld	a0,360(a5)
    80204c36:	ffffd097          	auipc	ra,0xffffd
    80204c3a:	168080e7          	jalr	360(ra) # 80201d9e <pageLookup>
    80204c3e:	143027f3          	csrr	a5,stval
        panic("unhandled error %d,  %lx, %lx\n", scause, r_stval(), pa);
    80204c42:	0005081b          	sext.w	a6,a0
    80204c46:	8752                	mv	a4,s4
    80204c48:	00008697          	auipc	a3,0x8
    80204c4c:	e9068693          	addi	a3,a3,-368 # 8020cad8 <__func__.0+0x288>
    80204c50:	00008617          	auipc	a2,0x8
    80204c54:	ef860613          	addi	a2,a2,-264 # 8020cb48 <__func__.1>
    80204c58:	05700593          	li	a1,87
    80204c5c:	00008517          	auipc	a0,0x8
    80204c60:	c5c50513          	addi	a0,a0,-932 # 8020c8b8 <__func__.0+0x68>
    80204c64:	ffffc097          	auipc	ra,0xffffc
    80204c68:	ee8080e7          	jalr	-280(ra) # 80200b4c <_panic_>
        yield();
    80204c6c:	ffffe097          	auipc	ra,0xffffe
    80204c70:	66c080e7          	jalr	1644(ra) # 802032d8 <yield>
    80204c74:	b7a1                	j	80204bbc <kernelTrap+0x68>

0000000080204c76 <userTrap>:
void userTrap() {
    80204c76:	7139                	addi	sp,sp,-64
    80204c78:	fc06                	sd	ra,56(sp)
    80204c7a:	f822                	sd	s0,48(sp)
    80204c7c:	f426                	sd	s1,40(sp)
    80204c7e:	f04a                	sd	s2,32(sp)
    80204c80:	ec4e                	sd	s3,24(sp)
    80204c82:	0080                	addi	s0,sp,64
    asm volatile("csrr %0, sepc" : "=r" (x) );
    80204c84:	141027f3          	csrr	a5,sepc
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80204c88:	100027f3          	csrr	a5,sstatus
	asm volatile("csrr %0, scause" : "=r" (x) );
    80204c8c:	14202973          	csrr	s2,scause
    asm volatile("mv %0, tp" : "=r" (x) );
    80204c90:	8992                	mv	s3,tp
    if (sstatus & SSTATUS_SPP) {
    80204c92:	1007f793          	andi	a5,a5,256
    80204c96:	e7c1                	bnez	a5,80204d1e <userTrap+0xa8>
	asm volatile("csrw stvec, %0" : : "r" (x));
    80204c98:	ffffe797          	auipc	a5,0xffffe
    80204c9c:	92878793          	addi	a5,a5,-1752 # 802025c0 <kernelVector>
    80204ca0:	10579073          	csrw	stvec,a5
    Process *p = myproc();
    80204ca4:	ffffe097          	auipc	ra,0xffffe
    80204ca8:	d0c080e7          	jalr	-756(ra) # 802029b0 <myproc>
	asm volatile("rdtime %0" : "=r" (x) );
    80204cac:	c0102773          	rdtime	a4
    p->cpuTime.user += currentTime - p->processTime.lastUserTime;
    80204cb0:	12053783          	ld	a5,288(a0)
    80204cb4:	8f1d                	sub	a4,a4,a5
    80204cb6:	13053783          	ld	a5,304(a0)
    80204cba:	97ba                	add	a5,a5,a4
    80204cbc:	12f53823          	sd	a5,304(a0)
    Trapframe* trapframe = getHartTrapFrame();
    80204cc0:	00001097          	auipc	ra,0x1
    80204cc4:	ee4080e7          	jalr	-284(ra) # 80205ba4 <getHartTrapFrame>
    80204cc8:	84aa                	mv	s1,a0
    if (scause & SCAUSE_INTERRUPT) {
    80204cca:	06094c63          	bltz	s2,80204d42 <userTrap+0xcc>
        kernelProcessCpuTimeBegin();
    80204cce:	fffff097          	auipc	ra,0xfffff
    80204cd2:	ac4080e7          	jalr	-1340(ra) # 80203792 <kernelProcessCpuTimeBegin>
        u64 *pte = NULL;
    80204cd6:	fc043423          	sd	zero,-56(s0)
        switch (scause & SCAUSE_EXCEPTION_CODE)
    80204cda:	00191713          	slli	a4,s2,0x1
    80204cde:	8305                	srli	a4,a4,0x1
    80204ce0:	57ed                	li	a5,-5
    80204ce2:	8385                	srli	a5,a5,0x1
    80204ce4:	00f977b3          	and	a5,s2,a5
    80204ce8:	46b5                	li	a3,13
    80204cea:	0ad78e63          	beq	a5,a3,80204da6 <userTrap+0x130>
    80204cee:	47a1                	li	a5,8
    80204cf0:	14f71663          	bne	a4,a5,80204e3c <userTrap+0x1c6>
            trapframe->epc += 4;
    80204cf4:	6c9c                	ld	a5,24(s1)
    80204cf6:	0791                	addi	a5,a5,4
    80204cf8:	ec9c                	sd	a5,24(s1)
            if (trapframe->a7 != 63 && trapframe->a7 != 64) {
    80204cfa:	74cc                	ld	a1,168(s1)
    80204cfc:	fc158713          	addi	a4,a1,-63 # 3ffffc1 <_start-0x7c20003f>
    80204d00:	4785                	li	a5,1
    80204d02:	06e7e763          	bltu	a5,a4,80204d70 <userTrap+0xfa>
            if (!syscallVector[trapframe->a7]) {
    80204d06:	74d8                	ld	a4,168(s1)
    80204d08:	00371693          	slli	a3,a4,0x3
    80204d0c:	00009797          	auipc	a5,0x9
    80204d10:	2f478793          	addi	a5,a5,756 # 8020e000 <syscallVector>
    80204d14:	97b6                	add	a5,a5,a3
    80204d16:	639c                	ld	a5,0(a5)
    80204d18:	c7ad                	beqz	a5,80204d82 <userTrap+0x10c>
            syscallVector[trapframe->a7]();
    80204d1a:	9782                	jalr	a5
            break;
    80204d1c:	a81d                	j	80204d52 <userTrap+0xdc>
        panic("usertrap: not from user mode\n");
    80204d1e:	00008697          	auipc	a3,0x8
    80204d22:	dda68693          	addi	a3,a3,-550 # 8020caf8 <__func__.0+0x2a8>
    80204d26:	00008617          	auipc	a2,0x8
    80204d2a:	e3260613          	addi	a2,a2,-462 # 8020cb58 <__func__.0>
    80204d2e:	07500593          	li	a1,117
    80204d32:	00008517          	auipc	a0,0x8
    80204d36:	b8650513          	addi	a0,a0,-1146 # 8020c8b8 <__func__.0+0x68>
    80204d3a:	ffffc097          	auipc	ra,0xffffc
    80204d3e:	e12080e7          	jalr	-494(ra) # 80200b4c <_panic_>
        trapDevice();
    80204d42:	00000097          	auipc	ra,0x0
    80204d46:	bda080e7          	jalr	-1062(ra) # 8020491c <trapDevice>
        yield();
    80204d4a:	ffffe097          	auipc	ra,0xffffe
    80204d4e:	58e080e7          	jalr	1422(ra) # 802032d8 <yield>
    kernelProcessCpuTimeEnd();
    80204d52:	fffff097          	auipc	ra,0xfffff
    80204d56:	a6c080e7          	jalr	-1428(ra) # 802037be <kernelProcessCpuTimeEnd>
    userTrapReturn();
    80204d5a:	00000097          	auipc	ra,0x0
    80204d5e:	c76080e7          	jalr	-906(ra) # 802049d0 <userTrapReturn>
}
    80204d62:	70e2                	ld	ra,56(sp)
    80204d64:	7442                	ld	s0,48(sp)
    80204d66:	74a2                	ld	s1,40(sp)
    80204d68:	7902                	ld	s2,32(sp)
    80204d6a:	69e2                	ld	s3,24(sp)
    80204d6c:	6121                	addi	sp,sp,64
    80204d6e:	8082                	ret
                printf("syscall: %d\n", trapframe->a7);
    80204d70:	00008517          	auipc	a0,0x8
    80204d74:	db050513          	addi	a0,a0,-592 # 8020cb20 <__func__.0+0x2d0>
    80204d78:	ffffc097          	auipc	ra,0xffffc
    80204d7c:	d48080e7          	jalr	-696(ra) # 80200ac0 <printf>
    80204d80:	b759                	j	80204d06 <userTrap+0x90>
                panic("unknown-syscall: %d\n", trapframe->a7);
    80204d82:	00008697          	auipc	a3,0x8
    80204d86:	d9668693          	addi	a3,a3,-618 # 8020cb18 <__func__.0+0x2c8>
    80204d8a:	00008617          	auipc	a2,0x8
    80204d8e:	dce60613          	addi	a2,a2,-562 # 8020cb58 <__func__.0>
    80204d92:	08a00593          	li	a1,138
    80204d96:	00008517          	auipc	a0,0x8
    80204d9a:	b2250513          	addi	a0,a0,-1246 # 8020c8b8 <__func__.0+0x68>
    80204d9e:	ffffc097          	auipc	ra,0xffffc
    80204da2:	dae080e7          	jalr	-594(ra) # 80200b4c <_panic_>
	asm volatile("csrr %0, stval" : "=r" (x) );
    80204da6:	143025f3          	csrr	a1,stval
            pa = pageLookup(currentProcess[hartId]->pgdir, r_stval(), &pte);
    80204daa:	00399713          	slli	a4,s3,0x3
    80204dae:	0027e797          	auipc	a5,0x27e
    80204db2:	70278793          	addi	a5,a5,1794 # 804834b0 <currentProcess>
    80204db6:	97ba                	add	a5,a5,a4
    80204db8:	639c                	ld	a5,0(a5)
    80204dba:	fc840613          	addi	a2,s0,-56
    80204dbe:	1687b503          	ld	a0,360(a5)
    80204dc2:	ffffd097          	auipc	ra,0xffffd
    80204dc6:	fdc080e7          	jalr	-36(ra) # 80201d9e <pageLookup>
            if (pa == 0) {
    80204dca:	c51d                	beqz	a0,80204df8 <userTrap+0x182>
            } else if (*pte & PTE_COW) {
    80204dcc:	fc843783          	ld	a5,-56(s0)
    80204dd0:	639c                	ld	a5,0(a5)
    80204dd2:	1007f793          	andi	a5,a5,256
    80204dd6:	c3a9                	beqz	a5,80204e18 <userTrap+0x1a2>
    80204dd8:	143025f3          	csrr	a1,stval
                cowHandler(currentProcess[hartId]->pgdir, r_stval());
    80204ddc:	098e                	slli	s3,s3,0x3
    80204dde:	0027e797          	auipc	a5,0x27e
    80204de2:	6d278793          	addi	a5,a5,1746 # 804834b0 <currentProcess>
    80204de6:	97ce                	add	a5,a5,s3
    80204de8:	639c                	ld	a5,0(a5)
    80204dea:	1687b503          	ld	a0,360(a5)
    80204dee:	ffffd097          	auipc	ra,0xffffd
    80204df2:	378080e7          	jalr	888(ra) # 80202166 <cowHandler>
    80204df6:	bfb1                	j	80204d52 <userTrap+0xdc>
    80204df8:	143025f3          	csrr	a1,stval
                pageout(currentProcess[hartId]->pgdir, r_stval());
    80204dfc:	098e                	slli	s3,s3,0x3
    80204dfe:	0027e797          	auipc	a5,0x27e
    80204e02:	6b278793          	addi	a5,a5,1714 # 804834b0 <currentProcess>
    80204e06:	97ce                	add	a5,a5,s3
    80204e08:	639c                	ld	a5,0(a5)
    80204e0a:	1687b503          	ld	a0,360(a5)
    80204e0e:	ffffd097          	auipc	ra,0xffffd
    80204e12:	26e080e7          	jalr	622(ra) # 8020207c <pageout>
    80204e16:	bf35                	j	80204d52 <userTrap+0xdc>
                panic("unknown");
    80204e18:	00008697          	auipc	a3,0x8
    80204e1c:	d1868693          	addi	a3,a3,-744 # 8020cb30 <__func__.0+0x2e0>
    80204e20:	00008617          	auipc	a2,0x8
    80204e24:	d3860613          	addi	a2,a2,-712 # 8020cb58 <__func__.0>
    80204e28:	09600593          	li	a1,150
    80204e2c:	00008517          	auipc	a0,0x8
    80204e30:	a8c50513          	addi	a0,a0,-1396 # 8020c8b8 <__func__.0+0x68>
    80204e34:	ffffc097          	auipc	ra,0xffffc
    80204e38:	d18080e7          	jalr	-744(ra) # 80200b4c <_panic_>
            trapframeDump(trapframe);
    80204e3c:	8526                	mv	a0,s1
    80204e3e:	00000097          	auipc	ra,0x0
    80204e42:	c68080e7          	jalr	-920(ra) # 80204aa6 <trapframeDump>
    80204e46:	143025f3          	csrr	a1,stval
            pageLookup(currentProcess[hartId]->pgdir, r_stval(), &pte);
    80204e4a:	098e                	slli	s3,s3,0x3
    80204e4c:	0027e797          	auipc	a5,0x27e
    80204e50:	66478793          	addi	a5,a5,1636 # 804834b0 <currentProcess>
    80204e54:	97ce                	add	a5,a5,s3
    80204e56:	639c                	ld	a5,0(a5)
    80204e58:	fc840613          	addi	a2,s0,-56
    80204e5c:	1687b503          	ld	a0,360(a5)
    80204e60:	ffffd097          	auipc	ra,0xffffd
    80204e64:	f3e080e7          	jalr	-194(ra) # 80201d9e <pageLookup>
    80204e68:	143027f3          	csrr	a5,stval
            panic("unhandled error %d,  %lx, %lx\n", scause, r_stval(), *pte);
    80204e6c:	fc843703          	ld	a4,-56(s0)
    80204e70:	00073803          	ld	a6,0(a4)
    80204e74:	874a                	mv	a4,s2
    80204e76:	00008697          	auipc	a3,0x8
    80204e7a:	c6268693          	addi	a3,a3,-926 # 8020cad8 <__func__.0+0x288>
    80204e7e:	00008617          	auipc	a2,0x8
    80204e82:	cda60613          	addi	a2,a2,-806 # 8020cb58 <__func__.0>
    80204e86:	09c00593          	li	a1,156
    80204e8a:	00008517          	auipc	a0,0x8
    80204e8e:	a2e50513          	addi	a0,a0,-1490 # 8020c8b8 <__func__.0+0x68>
    80204e92:	ffffc097          	auipc	ra,0xffffc
    80204e96:	cba080e7          	jalr	-838(ra) # 80200b4c <_panic_>

0000000080204e9a <exec>:
        bzero((void*)page2pa(page), r);
    }
    return 0;
}

int exec(char* path, char** argv) {
    80204e9a:	db010113          	addi	sp,sp,-592
    80204e9e:	24113423          	sd	ra,584(sp)
    80204ea2:	24813023          	sd	s0,576(sp)
    80204ea6:	22913c23          	sd	s1,568(sp)
    80204eaa:	23213823          	sd	s2,560(sp)
    80204eae:	23313423          	sd	s3,552(sp)
    80204eb2:	23413023          	sd	s4,544(sp)
    80204eb6:	21513c23          	sd	s5,536(sp)
    80204eba:	21613823          	sd	s6,528(sp)
    80204ebe:	21713423          	sd	s7,520(sp)
    80204ec2:	21813023          	sd	s8,512(sp)
    80204ec6:	ffe6                	sd	s9,504(sp)
    80204ec8:	fbea                	sd	s10,496(sp)
    80204eca:	f7ee                	sd	s11,488(sp)
    80204ecc:	0c80                	addi	s0,sp,592
    80204ece:	84aa                	mv	s1,a0
    80204ed0:	dcb43023          	sd	a1,-576(s0)
    MSG_PRINT("in exec");
    printf("Get in exec");    
    80204ed4:	00008517          	auipc	a0,0x8
    80204ed8:	c9450513          	addi	a0,a0,-876 # 8020cb68 <__func__.0+0x10>
    80204edc:	ffffc097          	auipc	ra,0xffffc
    80204ee0:	be4080e7          	jalr	-1052(ra) # 80200ac0 <printf>
    u64 argc,  sp, ustack[MAXARG], stackbase;
    Ehdr elf;
    struct dirent* de;
    Phdr ph;
    u64 *pagetable = 0;
    Process* p = myproc();
    80204ee4:	ffffe097          	auipc	ra,0xffffe
    80204ee8:	acc080e7          	jalr	-1332(ra) # 802029b0 <myproc>
    80204eec:	892a                	mv	s2,a0
    u64* oldpagetable = p->pgdir;
    80204eee:	16853783          	ld	a5,360(a0)
    80204ef2:	daf43c23          	sd	a5,-584(s0)

    PhysicalPage *page;
    int r = allocPgdir(&page);
    80204ef6:	e1040513          	addi	a0,s0,-496
    80204efa:	ffffd097          	auipc	ra,0xffffd
    80204efe:	156080e7          	jalr	342(ra) # 80202050 <allocPgdir>
    if (r < 0) {
    80204f02:	12054163          	bltz	a0,80205024 <exec+0x18a>
        panic("setup page alloc error\n");
        return r;
    }

    p->heapBottom = USER_HEAP_BOTTOM;// TODO,these code have writen twice
    80204f06:	01f007b7          	lui	a5,0x1f00
    80204f0a:	17fd                	addi	a5,a5,-1
    80204f0c:	07b6                	slli	a5,a5,0xd
    80204f0e:	5cf93823          	sd	a5,1488(s2) # 20005d0 <_start-0x7e1ffa30>
    return page - pages;
    80204f12:	e1043b03          	ld	s6,-496(s0)
    80204f16:	001bd797          	auipc	a5,0x1bd
    80204f1a:	56278793          	addi	a5,a5,1378 # 803c2478 <pages>
    80204f1e:	40fb0b33          	sub	s6,s6,a5
    80204f22:	403b5b13          	srai	s6,s6,0x3
    80204f26:	00008797          	auipc	a5,0x8
    80204f2a:	3b27b783          	ld	a5,946(a5) # 8020d2d8 <__func__.0+0x8>
    80204f2e:	02fb0b33          	mul	s6,s6,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80204f32:	00cb1b1b          	slliw	s6,s6,0xc
    80204f36:	1b02                	slli	s6,s6,0x20
    80204f38:	020b5b13          	srli	s6,s6,0x20
    80204f3c:	4785                	li	a5,1
    80204f3e:	07fe                	slli	a5,a5,0x1f
    80204f40:	9b3e                	add	s6,s6,a5
    pagetable = (u64*)page2pa(page);
    extern char trampoline[];
    pageInsert(pagetable, TRAMPOLINE_BASE, (u64)trampoline, 
    80204f42:	46b9                	li	a3,14
    80204f44:	00005617          	auipc	a2,0x5
    80204f48:	0bc60613          	addi	a2,a2,188 # 8020a000 <_trampoline>
    80204f4c:	020005b7          	lui	a1,0x2000
    80204f50:	15fd                	addi	a1,a1,-1
    80204f52:	05b6                	slli	a1,a1,0xd
    80204f54:	855a                	mv	a0,s6
    80204f56:	ffffd097          	auipc	ra,0xffffd
    80204f5a:	044080e7          	jalr	68(ra) # 80201f9a <pageInsert>
        PTE_READ | PTE_WRITE | PTE_EXECUTE);
    pageInsert(pagetable, TRAMPOLINE_BASE + PAGE_SIZE, ((u64)trampoline) + PAGE_SIZE, 
    80204f5e:	46b9                	li	a3,14
    80204f60:	00006617          	auipc	a2,0x6
    80204f64:	0a060613          	addi	a2,a2,160 # 8020b000 <trapframe>
    80204f68:	040005b7          	lui	a1,0x4000
    80204f6c:	15fd                	addi	a1,a1,-1
    80204f6e:	05b2                	slli	a1,a1,0xc
    80204f70:	855a                	mv	a0,s6
    80204f72:	ffffd097          	auipc	ra,0xffffd
    80204f76:	028080e7          	jalr	40(ra) # 80201f9a <pageInsert>
        PTE_READ | PTE_WRITE | PTE_EXECUTE);    
    
    MSG_PRINT("setup");

    if ((de = ename(AT_FDCWD, path)) == 0) {
    80204f7a:	85a6                	mv	a1,s1
    80204f7c:	f9c00513          	li	a0,-100
    80204f80:	00004097          	auipc	ra,0x4
    80204f84:	186080e7          	jalr	390(ra) # 80209106 <ename>
    80204f88:	84aa                	mv	s1,a0
    80204f8a:	dea43423          	sd	a0,-536(s0)
    80204f8e:	6a050c63          	beqz	a0,80205646 <exec+0x7ac>
        MSG_PRINT("find file error\n");
        return -1;
    }
    elock(de);
    80204f92:	00004097          	auipc	ra,0x4
    80204f96:	a52080e7          	jalr	-1454(ra) # 802089e4 <elock>

    MSG_PRINT("lock file success");
    // Check ELF header
    if (eread(de, 0, (u64)&elf, 0, sizeof(elf)) != sizeof(elf)){
    80204f9a:	04000713          	li	a4,64
    80204f9e:	4681                	li	a3,0
    80204fa0:	e5040613          	addi	a2,s0,-432
    80204fa4:	4581                	li	a1,0
    80204fa6:	8526                	mv	a0,s1
    80204fa8:	00003097          	auipc	ra,0x3
    80204fac:	0ae080e7          	jalr	174(ra) # 80208056 <eread>
    80204fb0:	04000793          	li	a5,64
    80204fb4:	00f51863          	bne	a0,a5,80204fc4 <exec+0x12a>
    if (magic[0] == ELF_MAGIC0 &&
    80204fb8:	e5044703          	lbu	a4,-432(s0)
    80204fbc:	07f00793          	li	a5,127
    80204fc0:	08f70463          	beq	a4,a5,80205048 <exec+0x1ae>
    printf("Get out exec");    
    return argc;  // this ends up in a0, the first argument to main(argc, argv)

bad:
    if (pagetable)
        pgdirFree((u64*)pagetable);
    80204fc4:	855a                	mv	a0,s6
    80204fc6:	ffffd097          	auipc	ra,0xffffd
    80204fca:	eda080e7          	jalr	-294(ra) # 80201ea0 <pgdirFree>
    if (de) {
        if(holdingsleep(&de->lock))
    80204fce:	de843783          	ld	a5,-536(s0)
    80204fd2:	14078513          	addi	a0,a5,320
    80204fd6:	00001097          	auipc	ra,0x1
    80204fda:	a36080e7          	jalr	-1482(ra) # 80205a0c <holdingsleep>
    80204fde:	64051d63          	bnez	a0,80205638 <exec+0x79e>
            eunlock(de);
        eput(de);
    80204fe2:	de843503          	ld	a0,-536(s0)
    80204fe6:	00004097          	auipc	ra,0x4
    80204fea:	aaa080e7          	jalr	-1366(ra) # 80208a90 <eput>
    }
    return -1;
    80204fee:	557d                	li	a0,-1
}
    80204ff0:	24813083          	ld	ra,584(sp)
    80204ff4:	24013403          	ld	s0,576(sp)
    80204ff8:	23813483          	ld	s1,568(sp)
    80204ffc:	23013903          	ld	s2,560(sp)
    80205000:	22813983          	ld	s3,552(sp)
    80205004:	22013a03          	ld	s4,544(sp)
    80205008:	21813a83          	ld	s5,536(sp)
    8020500c:	21013b03          	ld	s6,528(sp)
    80205010:	20813b83          	ld	s7,520(sp)
    80205014:	20013c03          	ld	s8,512(sp)
    80205018:	7cfe                	ld	s9,504(sp)
    8020501a:	7d5e                	ld	s10,496(sp)
    8020501c:	7dbe                	ld	s11,488(sp)
    8020501e:	25010113          	addi	sp,sp,592
    80205022:	8082                	ret
        panic("setup page alloc error\n");
    80205024:	00007697          	auipc	a3,0x7
    80205028:	66c68693          	addi	a3,a3,1644 # 8020c690 <__func__.1+0xc0>
    8020502c:	00008617          	auipc	a2,0x8
    80205030:	23c60613          	addi	a2,a2,572 # 8020d268 <__func__.1>
    80205034:	05c00593          	li	a1,92
    80205038:	00008517          	auipc	a0,0x8
    8020503c:	b4050513          	addi	a0,a0,-1216 # 8020cb78 <__func__.0+0x20>
    80205040:	ffffc097          	auipc	ra,0xffffc
    80205044:	b0c080e7          	jalr	-1268(ra) # 80200b4c <_panic_>
    80205048:	e5144703          	lbu	a4,-431(s0)
    8020504c:	04500793          	li	a5,69
    80205050:	f6f71ae3          	bne	a4,a5,80204fc4 <exec+0x12a>
        magic[1] == ELF_MAGIC1 &&
    80205054:	e5244703          	lbu	a4,-430(s0)
    80205058:	04c00793          	li	a5,76
    8020505c:	f6f714e3          	bne	a4,a5,80204fc4 <exec+0x12a>
    if (!is_elf_format((u8*) &elf)){
    80205060:	e5344703          	lbu	a4,-429(s0)
    80205064:	04600793          	li	a5,70
    80205068:	f4f71ee3          	bne	a4,a5,80204fc4 <exec+0x12a>
    for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
    8020506c:	e7042783          	lw	a5,-400(s0)
    80205070:	e8845703          	lhu	a4,-376(s0)
    80205074:	3a070263          	beqz	a4,80205418 <exec+0x57e>
    80205078:	de043023          	sd	zero,-544(s0)
    u64 offset = va - DOWN_ALIGN(va, PAGE_SIZE);
    8020507c:	6a05                	lui	s4,0x1
    8020507e:	fffa0713          	addi	a4,s4,-1 # fff <_start-0x801ff001>
    80205082:	dce43823          	sd	a4,-560(s0)
    80205086:	577d                	li	a4,-1
    80205088:	9301                	srli	a4,a4,0x20
    8020508a:	dce43423          	sd	a4,-568(s0)
    8020508e:	4705                	li	a4,1
    80205090:	01f71993          	slli	s3,a4,0x1f
    80205094:	ae09                	j	802053a6 <exec+0x50c>
        page = pa2page(pageLookup(pagetable, va, &entry));
    80205096:	df840613          	addi	a2,s0,-520
    8020509a:	85e6                	mv	a1,s9
    8020509c:	855a                	mv	a0,s6
    8020509e:	ffffd097          	auipc	ra,0xffffd
    802050a2:	d00080e7          	jalr	-768(ra) # 80201d9e <pageLookup>
    if (pa == 0)
    802050a6:	5e050a63          	beqz	a0,8020569a <exec+0x800>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    802050aa:	800007b7          	lui	a5,0x80000
    802050ae:	97aa                	add	a5,a5,a0
    802050b0:	83b1                	srli	a5,a5,0xc
    return pages + ppn;
    802050b2:	dc843703          	ld	a4,-568(s0)
    802050b6:	8ff9                	and	a5,a5,a4
    802050b8:	00179713          	slli	a4,a5,0x1
    802050bc:	97ba                	add	a5,a5,a4
    802050be:	078e                	slli	a5,a5,0x3
    802050c0:	001bd717          	auipc	a4,0x1bd
    802050c4:	3b870713          	addi	a4,a4,952 # 803c2478 <pages>
    802050c8:	97ba                	add	a5,a5,a4
    802050ca:	def43823          	sd	a5,-528(s0)
        r = MIN(binSize, PAGE_SIZE - offset);
    802050ce:	dc843783          	ld	a5,-568(s0)
    802050d2:	00fafab3          	and	s5,s5,a5
    802050d6:	409a07b3          	sub	a5,s4,s1
    802050da:	00faf363          	bgeu	s5,a5,802050e0 <exec+0x246>
    802050de:	87d6                	mv	a5,s5
        if (eread(de, 0, page2pa(page) + offset, fileOffset, r) != r) {
    802050e0:	00078b9b          	sext.w	s7,a5
    return page - pages;
    802050e4:	df043783          	ld	a5,-528(s0)
    802050e8:	001bd717          	auipc	a4,0x1bd
    802050ec:	39070713          	addi	a4,a4,912 # 803c2478 <pages>
    802050f0:	8f99                	sub	a5,a5,a4
    802050f2:	878d                	srai	a5,a5,0x3
    802050f4:	00008717          	auipc	a4,0x8
    802050f8:	1e473703          	ld	a4,484(a4) # 8020d2d8 <__func__.0+0x8>
    802050fc:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80205100:	00c7979b          	slliw	a5,a5,0xc
    80205104:	1782                	slli	a5,a5,0x20
    80205106:	9381                	srli	a5,a5,0x20
    80205108:	01348633          	add	a2,s1,s3
    8020510c:	875e                	mv	a4,s7
    8020510e:	86ee                	mv	a3,s11
    80205110:	963e                	add	a2,a2,a5
    80205112:	4581                	li	a1,0
    80205114:	de843503          	ld	a0,-536(s0)
    80205118:	00003097          	auipc	ra,0x3
    8020511c:	f3e080e7          	jalr	-194(ra) # 80208056 <eread>
    80205120:	892a                	mv	s2,a0
    80205122:	04ab9263          	bne	s7,a0,80205166 <exec+0x2cc>
    for (i = r; i < binSize; i += r) {
    80205126:	84aa                	mv	s1,a0
    80205128:	2d556f63          	bltu	a0,s5,80205406 <exec+0x56c>
    offset = va + i - DOWN_ALIGN(va + i, PAGE_SIZE);
    8020512c:	009c8bb3          	add	s7,s9,s1
    80205130:	dd043783          	ld	a5,-560(s0)
    80205134:	00fbfab3          	and	s5,s7,a5
    if (offset > 0) {
    80205138:	100a9d63          	bnez	s5,80205252 <exec+0x3b8>
    for (i += r; i < segmentSize; i += r) {
    8020513c:	94ca                	add	s1,s1,s2
    8020513e:	25a4f663          	bgeu	s1,s10,8020538a <exec+0x4f0>
    return page - pages;
    80205142:	001bdb97          	auipc	s7,0x1bd
    80205146:	336b8b93          	addi	s7,s7,822 # 803c2478 <pages>
    8020514a:	00008a97          	auipc	s5,0x8
    8020514e:	18ea8a93          	addi	s5,s5,398 # 8020d2d8 <__func__.0+0x8>
    80205152:	aacd                	j	80205344 <exec+0x4aa>
                printf("load segment error when we need to alloc a page!\n");
    80205154:	00008517          	auipc	a0,0x8
    80205158:	a2c50513          	addi	a0,a0,-1492 # 8020cb80 <__func__.0+0x28>
    8020515c:	ffffc097          	auipc	ra,0xffffc
    80205160:	964080e7          	jalr	-1692(ra) # 80200ac0 <printf>
    80205164:	a3a9                	j	802056ae <exec+0x814>
            panic("load segment error when eread on offset\n");
    80205166:	00008697          	auipc	a3,0x8
    8020516a:	a5268693          	addi	a3,a3,-1454 # 8020cbb8 <__func__.0+0x60>
    8020516e:	00008617          	auipc	a2,0x8
    80205172:	b7260613          	addi	a2,a2,-1166 # 8020cce0 <__func__.0>
    80205176:	45f9                	li	a1,30
    80205178:	00008517          	auipc	a0,0x8
    8020517c:	a0050513          	addi	a0,a0,-1536 # 8020cb78 <__func__.0+0x20>
    80205180:	ffffc097          	auipc	ra,0xffffc
    80205184:	9cc080e7          	jalr	-1588(ra) # 80200b4c <_panic_>
            panic("load segment error when we need to alloc a page 1!\n");
    80205188:	00008697          	auipc	a3,0x8
    8020518c:	a6068693          	addi	a3,a3,-1440 # 8020cbe8 <__func__.0+0x90>
    80205190:	00008617          	auipc	a2,0x8
    80205194:	b5060613          	addi	a2,a2,-1200 # 8020cce0 <__func__.0>
    80205198:	02400593          	li	a1,36
    8020519c:	00008517          	auipc	a0,0x8
    802051a0:	9dc50513          	addi	a0,a0,-1572 # 8020cb78 <__func__.0+0x20>
    802051a4:	ffffc097          	auipc	ra,0xffffc
    802051a8:	9a8080e7          	jalr	-1624(ra) # 80200b4c <_panic_>
        r = MIN(PAGE_SIZE, binSize - i);
    802051ac:	2901                	sext.w	s2,s2
    802051ae:	df043603          	ld	a2,-528(s0)
    802051b2:	41860633          	sub	a2,a2,s8
    802051b6:	860d                	srai	a2,a2,0x3
    802051b8:	000bb783          	ld	a5,0(s7)
    802051bc:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802051c0:	00c6161b          	slliw	a2,a2,0xc
    802051c4:	1602                	slli	a2,a2,0x20
    802051c6:	9201                	srli	a2,a2,0x20
        if (eread(de, 0, page2pa(page), fileOffset + i, r) != r) {
    802051c8:	874a                	mv	a4,s2
    802051ca:	01b486bb          	addw	a3,s1,s11
    802051ce:	964e                	add	a2,a2,s3
    802051d0:	4581                	li	a1,0
    802051d2:	de843503          	ld	a0,-536(s0)
    802051d6:	00003097          	auipc	ra,0x3
    802051da:	e80080e7          	jalr	-384(ra) # 80208056 <eread>
    802051de:	04a91863          	bne	s2,a0,8020522e <exec+0x394>
    for (i = r; i < binSize; i += r) {
    802051e2:	94ca                	add	s1,s1,s2
    802051e4:	f554f4e3          	bgeu	s1,s5,8020512c <exec+0x292>
        if (pageAlloc(&page) != 0) {
    802051e8:	df040513          	addi	a0,s0,-528
    802051ec:	ffffd097          	auipc	ra,0xffffd
    802051f0:	a22080e7          	jalr	-1502(ra) # 80201c0e <pageAlloc>
    802051f4:	f951                	bnez	a0,80205188 <exec+0x2ee>
    return page - pages;
    802051f6:	df043603          	ld	a2,-528(s0)
    802051fa:	41860633          	sub	a2,a2,s8
    802051fe:	860d                	srai	a2,a2,0x3
    80205200:	000bb783          	ld	a5,0(s7)
    80205204:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80205208:	00c6161b          	slliw	a2,a2,0xc
    8020520c:	1602                	slli	a2,a2,0x20
    8020520e:	9201                	srli	a2,a2,0x20
        pageInsert(pagetable, va + i, page2pa(page), PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
    80205210:	46f9                	li	a3,30
    80205212:	964e                	add	a2,a2,s3
    80205214:	009c85b3          	add	a1,s9,s1
    80205218:	855a                	mv	a0,s6
    8020521a:	ffffd097          	auipc	ra,0xffffd
    8020521e:	d80080e7          	jalr	-640(ra) # 80201f9a <pageInsert>
        r = MIN(PAGE_SIZE, binSize - i);
    80205222:	409a8933          	sub	s2,s5,s1
    80205226:	f92a73e3          	bgeu	s4,s2,802051ac <exec+0x312>
    8020522a:	8952                	mv	s2,s4
    8020522c:	b741                	j	802051ac <exec+0x312>
            panic("load segment error when eread on offset 1\n");
    8020522e:	00008697          	auipc	a3,0x8
    80205232:	9f268693          	addi	a3,a3,-1550 # 8020cc20 <__func__.0+0xc8>
    80205236:	00008617          	auipc	a2,0x8
    8020523a:	aaa60613          	addi	a2,a2,-1366 # 8020cce0 <__func__.0>
    8020523e:	02900593          	li	a1,41
    80205242:	00008517          	auipc	a0,0x8
    80205246:	93650513          	addi	a0,a0,-1738 # 8020cb78 <__func__.0+0x20>
    8020524a:	ffffc097          	auipc	ra,0xffffc
    8020524e:	902080e7          	jalr	-1790(ra) # 80200b4c <_panic_>
        page = pa2page(pageLookup(pagetable, va + i, &entry));
    80205252:	df840613          	addi	a2,s0,-520
    80205256:	85de                	mv	a1,s7
    80205258:	855a                	mv	a0,s6
    8020525a:	ffffd097          	auipc	ra,0xffffd
    8020525e:	b44080e7          	jalr	-1212(ra) # 80201d9e <pageLookup>
    if (pa == 0)
    80205262:	3e050463          	beqz	a0,8020564a <exec+0x7b0>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80205266:	800007b7          	lui	a5,0x80000
    8020526a:	97aa                	add	a5,a5,a0
    8020526c:	83b1                	srli	a5,a5,0xc
    return pages + ppn;
    8020526e:	dc843703          	ld	a4,-568(s0)
    80205272:	8ff9                	and	a5,a5,a4
    80205274:	00179713          	slli	a4,a5,0x1
    80205278:	97ba                	add	a5,a5,a4
    8020527a:	078e                	slli	a5,a5,0x3
    8020527c:	001bd717          	auipc	a4,0x1bd
    80205280:	1fc70713          	addi	a4,a4,508 # 803c2478 <pages>
    80205284:	97ba                	add	a5,a5,a4
    80205286:	def43823          	sd	a5,-528(s0)
        r = MIN(segmentSize - i, PAGE_SIZE - offset);
    8020528a:	415a07b3          	sub	a5,s4,s5
    8020528e:	409d0933          	sub	s2,s10,s1
    80205292:	0127f363          	bgeu	a5,s2,80205298 <exec+0x3fe>
    80205296:	893e                	mv	s2,a5
    80205298:	2901                	sext.w	s2,s2
    return page - pages;
    8020529a:	df043503          	ld	a0,-528(s0)
    8020529e:	001bd797          	auipc	a5,0x1bd
    802052a2:	1da78793          	addi	a5,a5,474 # 803c2478 <pages>
    802052a6:	8d1d                	sub	a0,a0,a5
    802052a8:	850d                	srai	a0,a0,0x3
    802052aa:	00008797          	auipc	a5,0x8
    802052ae:	02e7b783          	ld	a5,46(a5) # 8020d2d8 <__func__.0+0x8>
    802052b2:	02f50533          	mul	a0,a0,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802052b6:	00c5151b          	slliw	a0,a0,0xc
    802052ba:	1502                	slli	a0,a0,0x20
    802052bc:	9101                	srli	a0,a0,0x20
    802052be:	954e                	add	a0,a0,s3
        bzero((void*)page2pa(page) + offset, r);
    802052c0:	85ca                	mv	a1,s2
    802052c2:	9556                	add	a0,a0,s5
    802052c4:	ffffc097          	auipc	ra,0xffffc
    802052c8:	7b0080e7          	jalr	1968(ra) # 80201a74 <bzero>
    802052cc:	bd85                	j	8020513c <exec+0x2a2>
                panic("load segment error when we need to alloc a page 2!\n");
    802052ce:	00008697          	auipc	a3,0x8
    802052d2:	98268693          	addi	a3,a3,-1662 # 8020cc50 <__func__.0+0xf8>
    802052d6:	00008617          	auipc	a2,0x8
    802052da:	a0a60613          	addi	a2,a2,-1526 # 8020cce0 <__func__.0>
    802052de:	03200593          	li	a1,50
    802052e2:	00008517          	auipc	a0,0x8
    802052e6:	89650513          	addi	a0,a0,-1898 # 8020cb78 <__func__.0+0x20>
    802052ea:	ffffc097          	auipc	ra,0xffffc
    802052ee:	862080e7          	jalr	-1950(ra) # 80200b4c <_panic_>
            panic("load segment error when we need to alloc a page 3!\n");
    802052f2:	00008697          	auipc	a3,0x8
    802052f6:	99668693          	addi	a3,a3,-1642 # 8020cc88 <__func__.0+0x130>
    802052fa:	00008617          	auipc	a2,0x8
    802052fe:	9e660613          	addi	a2,a2,-1562 # 8020cce0 <__func__.0>
    80205302:	03c00593          	li	a1,60
    80205306:	00008517          	auipc	a0,0x8
    8020530a:	87250513          	addi	a0,a0,-1934 # 8020cb78 <__func__.0+0x20>
    8020530e:	ffffc097          	auipc	ra,0xffffc
    80205312:	83e080e7          	jalr	-1986(ra) # 80200b4c <_panic_>
        bzero((void*)page2pa(page), r);
    80205316:	2901                	sext.w	s2,s2
    return page - pages;
    80205318:	df043503          	ld	a0,-528(s0)
    8020531c:	41750533          	sub	a0,a0,s7
    80205320:	850d                	srai	a0,a0,0x3
    80205322:	000ab783          	ld	a5,0(s5)
    80205326:	02f50533          	mul	a0,a0,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020532a:	00c5151b          	slliw	a0,a0,0xc
    8020532e:	1502                	slli	a0,a0,0x20
    80205330:	9101                	srli	a0,a0,0x20
    80205332:	85ca                	mv	a1,s2
    80205334:	954e                	add	a0,a0,s3
    80205336:	ffffc097          	auipc	ra,0xffffc
    8020533a:	73e080e7          	jalr	1854(ra) # 80201a74 <bzero>
    for (i += r; i < segmentSize; i += r) {
    8020533e:	94ca                	add	s1,s1,s2
    80205340:	05a4f563          	bgeu	s1,s10,8020538a <exec+0x4f0>
        if (pageAlloc(&page) != 0) {
    80205344:	df040513          	addi	a0,s0,-528
    80205348:	ffffd097          	auipc	ra,0xffffd
    8020534c:	8c6080e7          	jalr	-1850(ra) # 80201c0e <pageAlloc>
    80205350:	f14d                	bnez	a0,802052f2 <exec+0x458>
    return page - pages;
    80205352:	df043603          	ld	a2,-528(s0)
    80205356:	41760633          	sub	a2,a2,s7
    8020535a:	860d                	srai	a2,a2,0x3
    8020535c:	000ab783          	ld	a5,0(s5)
    80205360:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80205364:	00c6161b          	slliw	a2,a2,0xc
    80205368:	1602                	slli	a2,a2,0x20
    8020536a:	9201                	srli	a2,a2,0x20
        pageInsert(pagetable, va + i, page2pa(page), PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
    8020536c:	46f9                	li	a3,30
    8020536e:	964e                	add	a2,a2,s3
    80205370:	009c85b3          	add	a1,s9,s1
    80205374:	855a                	mv	a0,s6
    80205376:	ffffd097          	auipc	ra,0xffffd
    8020537a:	c24080e7          	jalr	-988(ra) # 80201f9a <pageInsert>
        r = MIN(PAGE_SIZE, segmentSize - i);
    8020537e:	409d0933          	sub	s2,s10,s1
    80205382:	f92a7ae3          	bgeu	s4,s2,80205316 <exec+0x47c>
    80205386:	8952                	mv	s2,s4
    80205388:	b779                	j	80205316 <exec+0x47c>
    for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
    8020538a:	de043783          	ld	a5,-544(s0)
    8020538e:	0017869b          	addiw	a3,a5,1
    80205392:	ded43023          	sd	a3,-544(s0)
    80205396:	dd843783          	ld	a5,-552(s0)
    8020539a:	0387879b          	addiw	a5,a5,56
    8020539e:	e8845703          	lhu	a4,-376(s0)
    802053a2:	06e6db63          	bge	a3,a4,80205418 <exec+0x57e>
        if (eread(de, 0, (u64)&ph, off, sizeof(ph)) != sizeof(ph)) {
    802053a6:	2781                	sext.w	a5,a5
    802053a8:	dcf43c23          	sd	a5,-552(s0)
    802053ac:	03800713          	li	a4,56
    802053b0:	86be                	mv	a3,a5
    802053b2:	e1840613          	addi	a2,s0,-488
    802053b6:	4581                	li	a1,0
    802053b8:	de843503          	ld	a0,-536(s0)
    802053bc:	00003097          	auipc	ra,0x3
    802053c0:	c9a080e7          	jalr	-870(ra) # 80208056 <eread>
    802053c4:	03800793          	li	a5,56
    802053c8:	bef51ee3          	bne	a0,a5,80204fc4 <exec+0x12a>
        if (ph.type != PT_LOAD)
    802053cc:	e1842783          	lw	a5,-488(s0)
    802053d0:	4705                	li	a4,1
    802053d2:	fae79ce3          	bne	a5,a4,8020538a <exec+0x4f0>
        if (ph.memsz < ph.filesz)
    802053d6:	e4043d03          	ld	s10,-448(s0)
    802053da:	e3843a83          	ld	s5,-456(s0)
    802053de:	bf5d63e3          	bltu	s10,s5,80204fc4 <exec+0x12a>
        if (loadSegment(pagetable, ph.vaddr, ph.memsz, de, ph.offset, ph.filesz) < 0)
    802053e2:	e2843c83          	ld	s9,-472(s0)
    802053e6:	e2042d83          	lw	s11,-480(s0)
    u64 offset = va - DOWN_ALIGN(va, PAGE_SIZE);
    802053ea:	dd043783          	ld	a5,-560(s0)
    802053ee:	00fcf4b3          	and	s1,s9,a5
    PhysicalPage* page = NULL;
    802053f2:	de043823          	sd	zero,-528(s0)
    if (offset > 0) {
    802053f6:	ca0490e3          	bnez	s1,80205096 <exec+0x1fc>
    for (i = r; i < binSize; i += r) {
    802053fa:	dc843783          	ld	a5,-568(s0)
    802053fe:	00fafab3          	and	s5,s5,a5
    80205402:	280a8963          	beqz	s5,80205694 <exec+0x7fa>
    return page - pages;
    80205406:	001bdc17          	auipc	s8,0x1bd
    8020540a:	072c0c13          	addi	s8,s8,114 # 803c2478 <pages>
    8020540e:	00008b97          	auipc	s7,0x8
    80205412:	ecab8b93          	addi	s7,s7,-310 # 8020d2d8 <__func__.0+0x8>
    80205416:	bbc9                	j	802051e8 <exec+0x34e>
    eunlock(de);
    80205418:	de843483          	ld	s1,-536(s0)
    8020541c:	8526                	mv	a0,s1
    8020541e:	00003097          	auipc	ra,0x3
    80205422:	610080e7          	jalr	1552(ra) # 80208a2e <eunlock>
    eput(de);
    80205426:	8526                	mv	a0,s1
    80205428:	00003097          	auipc	ra,0x3
    8020542c:	668080e7          	jalr	1640(ra) # 80208a90 <eput>
    p = myproc();
    80205430:	ffffd097          	auipc	ra,0xffffd
    80205434:	580080e7          	jalr	1408(ra) # 802029b0 <myproc>
    80205438:	8a2a                	mv	s4,a0
    if (pageAlloc(&page)){
    8020543a:	e1040513          	addi	a0,s0,-496
    8020543e:	ffffc097          	auipc	ra,0xffffc
    80205442:	7d0080e7          	jalr	2000(ra) # 80201c0e <pageAlloc>
    80205446:	c901                	beqz	a0,80205456 <exec+0x5bc>
        pgdirFree((u64*)pagetable);
    80205448:	855a                	mv	a0,s6
    8020544a:	ffffd097          	auipc	ra,0xffffd
    8020544e:	a56080e7          	jalr	-1450(ra) # 80201ea0 <pgdirFree>
    return -1;
    80205452:	557d                	li	a0,-1
    80205454:	be71                	j	80204ff0 <exec+0x156>
    80205456:	e1043783          	ld	a5,-496(s0)
    8020545a:	001bd717          	auipc	a4,0x1bd
    8020545e:	01e70713          	addi	a4,a4,30 # 803c2478 <pages>
    80205462:	8f99                	sub	a5,a5,a4
    80205464:	878d                	srai	a5,a5,0x3
    80205466:	00008717          	auipc	a4,0x8
    8020546a:	e7273703          	ld	a4,-398(a4) # 8020d2d8 <__func__.0+0x8>
    8020546e:	02e787b3          	mul	a5,a5,a4
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80205472:	00c7979b          	slliw	a5,a5,0xc
    80205476:	1782                	slli	a5,a5,0x20
    80205478:	9381                	srli	a5,a5,0x20
    pageInsert(pagetable, stackbase, page2pa(page),
    8020547a:	46f9                	li	a3,30
    8020547c:	4605                	li	a2,1
    8020547e:	067e                	slli	a2,a2,0x1f
    80205480:	963e                	add	a2,a2,a5
    80205482:	040005b7          	lui	a1,0x4000
    80205486:	15f5                	addi	a1,a1,-3
    80205488:	05b2                	slli	a1,a1,0xc
    8020548a:	855a                	mv	a0,s6
    8020548c:	ffffd097          	auipc	ra,0xffffd
    80205490:	b0e080e7          	jalr	-1266(ra) # 80201f9a <pageInsert>
    for (argc = 0; argv[argc]; argc++) {
    80205494:	dc043783          	ld	a5,-576(s0)
    80205498:	6388                	ld	a0,0(a5)
    8020549a:	cd2d                	beqz	a0,80205514 <exec+0x67a>
    8020549c:	e9840993          	addi	s3,s0,-360
    802054a0:	f9840b93          	addi	s7,s0,-104
    sp = USER_STACK_TOP;
    802054a4:	020004b7          	lui	s1,0x2000
    802054a8:	14fd                	addi	s1,s1,-1
    802054aa:	04b6                	slli	s1,s1,0xd
    for (argc = 0; argv[argc]; argc++) {
    802054ac:	4901                	li	s2,0
        if (sp < stackbase)
    802054ae:	fcfffab7          	lui	s5,0xfcfff
    802054b2:	0aba                	slli	s5,s5,0xe
    802054b4:	01aada93          	srli	s5,s5,0x1a
        sp -= strlen(argv[argc]) + 1;
    802054b8:	00001097          	auipc	ra,0x1
    802054bc:	a28080e7          	jalr	-1496(ra) # 80205ee0 <strlen>
    802054c0:	0015079b          	addiw	a5,a0,1
    802054c4:	40f487b3          	sub	a5,s1,a5
        sp -= sp % 16;  // riscv sp must be 16-byte aligned
    802054c8:	ff07f493          	andi	s1,a5,-16
        if (sp < stackbase)
    802054cc:	f69afee3          	bgeu	s5,s1,80205448 <exec+0x5ae>
        if (copyout(pagetable, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
    802054d0:	dc043c83          	ld	s9,-576(s0)
    802054d4:	000cbc03          	ld	s8,0(s9) # 1000 <_start-0x801ff000>
    802054d8:	8562                	mv	a0,s8
    802054da:	00001097          	auipc	ra,0x1
    802054de:	a06080e7          	jalr	-1530(ra) # 80205ee0 <strlen>
    802054e2:	0015069b          	addiw	a3,a0,1
    802054e6:	8662                	mv	a2,s8
    802054e8:	85a6                	mv	a1,s1
    802054ea:	855a                	mv	a0,s6
    802054ec:	ffffd097          	auipc	ra,0xffffd
    802054f0:	ec2080e7          	jalr	-318(ra) # 802023ae <copyout>
    802054f4:	f4054ae3          	bltz	a0,80205448 <exec+0x5ae>
        ustack[argc + 1] = sp;
    802054f8:	0905                	addi	s2,s2,1
    802054fa:	0099b023          	sd	s1,0(s3) # 1000 <_start-0x801ff000>
    for (argc = 0; argv[argc]; argc++) {
    802054fe:	008c8793          	addi	a5,s9,8
    80205502:	dcf43023          	sd	a5,-576(s0)
    80205506:	008cb503          	ld	a0,8(s9)
    8020550a:	c911                	beqz	a0,8020551e <exec+0x684>
        if (argc >= MAXARG)
    8020550c:	09a1                	addi	s3,s3,8
    8020550e:	fb7995e3          	bne	s3,s7,802054b8 <exec+0x61e>
    80205512:	bf1d                	j	80205448 <exec+0x5ae>
    sp = USER_STACK_TOP;
    80205514:	020004b7          	lui	s1,0x2000
    80205518:	14fd                	addi	s1,s1,-1
    8020551a:	04b6                	slli	s1,s1,0xd
    for (argc = 0; argv[argc]; argc++) {
    8020551c:	4901                	li	s2,0
    ustack[0] = argc;
    8020551e:	e9243823          	sd	s2,-368(s0)
    ustack[argc + 1] = 0;
    80205522:	00190793          	addi	a5,s2,1
    80205526:	078e                	slli	a5,a5,0x3
    80205528:	f9078793          	addi	a5,a5,-112
    8020552c:	97a2                	add	a5,a5,s0
    8020552e:	f007b023          	sd	zero,-256(a5)
    char *envVariable[2] = {"va=a", "vb=b"};
    80205532:	00007797          	auipc	a5,0x7
    80205536:	78e78793          	addi	a5,a5,1934 # 8020ccc0 <__func__.0+0x168>
    8020553a:	e0f43023          	sd	a5,-512(s0)
    8020553e:	00007797          	auipc	a5,0x7
    80205542:	78a78793          	addi	a5,a5,1930 # 8020ccc8 <__func__.0+0x170>
    80205546:	e0f43423          	sd	a5,-504(s0)
    for (i = 0; i < envCount; i++) {
    8020554a:	e0040c13          	addi	s8,s0,-512
    8020554e:	00290993          	addi	s3,s2,2
    80205552:	098e                	slli	s3,s3,0x3
    80205554:	e9040793          	addi	a5,s0,-368
    80205558:	01378bb3          	add	s7,a5,s3
    8020555c:	e1040d13          	addi	s10,s0,-496
        if (sp < stackbase)
    80205560:	fcfffab7          	lui	s5,0xfcfff
    80205564:	0aba                	slli	s5,s5,0xe
    80205566:	01aada93          	srli	s5,s5,0x1a
        sp -= strlen(envVariable[i]) + 1;
    8020556a:	000c3c83          	ld	s9,0(s8)
    8020556e:	8566                	mv	a0,s9
    80205570:	00001097          	auipc	ra,0x1
    80205574:	970080e7          	jalr	-1680(ra) # 80205ee0 <strlen>
    80205578:	0015079b          	addiw	a5,a0,1
    8020557c:	40f487b3          	sub	a5,s1,a5
        sp -= sp % 16;  // riscv sp must be 16-byte aligned
    80205580:	ff07f493          	andi	s1,a5,-16
        if (sp < stackbase)
    80205584:	ec9af2e3          	bgeu	s5,s1,80205448 <exec+0x5ae>
        if (copyout(pagetable, sp, envVariable[i], strlen(envVariable[i]) + 1) < 0)
    80205588:	8566                	mv	a0,s9
    8020558a:	00001097          	auipc	ra,0x1
    8020558e:	956080e7          	jalr	-1706(ra) # 80205ee0 <strlen>
    80205592:	0015069b          	addiw	a3,a0,1
    80205596:	8666                	mv	a2,s9
    80205598:	85a6                	mv	a1,s1
    8020559a:	855a                	mv	a0,s6
    8020559c:	ffffd097          	auipc	ra,0xffffd
    802055a0:	e12080e7          	jalr	-494(ra) # 802023ae <copyout>
    802055a4:	ea0542e3          	bltz	a0,80205448 <exec+0x5ae>
        ustack[argc + 2 + i] = sp;
    802055a8:	009bb023          	sd	s1,0(s7)
    for (i = 0; i < envCount; i++) {
    802055ac:	0c21                	addi	s8,s8,8
    802055ae:	0ba1                	addi	s7,s7,8
    802055b0:	fbac1de3          	bne	s8,s10,8020556a <exec+0x6d0>
    ustack[argc + 2 + envCount] = 0;
    802055b4:	00490793          	addi	a5,s2,4
    802055b8:	078e                	slli	a5,a5,0x3
    802055ba:	f9078793          	addi	a5,a5,-112
    802055be:	97a2                	add	a5,a5,s0
    802055c0:	f007b023          	sd	zero,-256(a5)
    sp -= (argc + 3 + envCount) * sizeof(u64);
    802055c4:	01898693          	addi	a3,s3,24
    802055c8:	8c95                	sub	s1,s1,a3
    sp -= sp % 16;
    802055ca:	98c1                	andi	s1,s1,-16
    if (sp < stackbase)
    802055cc:	fcfff7b7          	lui	a5,0xfcfff
    802055d0:	07ba                	slli	a5,a5,0xe
    802055d2:	83e9                	srli	a5,a5,0x1a
    802055d4:	e697fae3          	bgeu	a5,s1,80205448 <exec+0x5ae>
    if (copyout(pagetable, sp, (char*)ustack, (argc + 3 + envCount) * sizeof(u64)) < 0)
    802055d8:	e9040613          	addi	a2,s0,-368
    802055dc:	85a6                	mv	a1,s1
    802055de:	855a                	mv	a0,s6
    802055e0:	ffffd097          	auipc	ra,0xffffd
    802055e4:	dce080e7          	jalr	-562(ra) # 802023ae <copyout>
    802055e8:	e60540e3          	bltz	a0,80205448 <exec+0x5ae>
    getHartTrapFrame()->a1 = sp;
    802055ec:	00000097          	auipc	ra,0x0
    802055f0:	5b8080e7          	jalr	1464(ra) # 80205ba4 <getHartTrapFrame>
    802055f4:	fd24                	sd	s1,120(a0)
    p->pgdir = pagetable;
    802055f6:	176a3423          	sd	s6,360(s4)
    getHartTrapFrame()->epc = elf.entry;  // initial program counter = main
    802055fa:	00000097          	auipc	ra,0x0
    802055fe:	5aa080e7          	jalr	1450(ra) # 80205ba4 <getHartTrapFrame>
    80205602:	e6843783          	ld	a5,-408(s0)
    80205606:	ed1c                	sd	a5,24(a0)
    getHartTrapFrame()->sp = sp;          // initial stack pointer
    80205608:	00000097          	auipc	ra,0x0
    8020560c:	59c080e7          	jalr	1436(ra) # 80205ba4 <getHartTrapFrame>
    80205610:	f904                	sd	s1,48(a0)
    pgdirFree(oldpagetable);
    80205612:	db843503          	ld	a0,-584(s0)
    80205616:	ffffd097          	auipc	ra,0xffffd
    8020561a:	88a080e7          	jalr	-1910(ra) # 80201ea0 <pgdirFree>
    asm volatile("fence.i");
    8020561e:	0000100f          	fence.i
    printf("Get out exec");    
    80205622:	00007517          	auipc	a0,0x7
    80205626:	6ae50513          	addi	a0,a0,1710 # 8020ccd0 <__func__.0+0x178>
    8020562a:	ffffb097          	auipc	ra,0xffffb
    8020562e:	496080e7          	jalr	1174(ra) # 80200ac0 <printf>
    return argc;  // this ends up in a0, the first argument to main(argc, argv)
    80205632:	0009051b          	sext.w	a0,s2
    80205636:	ba6d                	j	80204ff0 <exec+0x156>
            eunlock(de);
    80205638:	de843503          	ld	a0,-536(s0)
    8020563c:	00003097          	auipc	ra,0x3
    80205640:	3f2080e7          	jalr	1010(ra) # 80208a2e <eunlock>
    80205644:	ba79                	j	80204fe2 <exec+0x148>
        return -1;
    80205646:	557d                	li	a0,-1
    80205648:	b265                	j	80204ff0 <exec+0x156>
        page = pa2page(pageLookup(pagetable, va + i, &entry));
    8020564a:	de043823          	sd	zero,-528(s0)
            if (pageAlloc(&page) != 0) {
    8020564e:	df040513          	addi	a0,s0,-528
    80205652:	ffffc097          	auipc	ra,0xffffc
    80205656:	5bc080e7          	jalr	1468(ra) # 80201c0e <pageAlloc>
    8020565a:	c6051ae3          	bnez	a0,802052ce <exec+0x434>
    return page - pages;
    8020565e:	df043603          	ld	a2,-528(s0)
    80205662:	001bd797          	auipc	a5,0x1bd
    80205666:	e1678793          	addi	a5,a5,-490 # 803c2478 <pages>
    8020566a:	8e1d                	sub	a2,a2,a5
    8020566c:	860d                	srai	a2,a2,0x3
    8020566e:	00008797          	auipc	a5,0x8
    80205672:	c6a7b783          	ld	a5,-918(a5) # 8020d2d8 <__func__.0+0x8>
    80205676:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020567a:	00c6161b          	slliw	a2,a2,0xc
    8020567e:	1602                	slli	a2,a2,0x20
    80205680:	9201                	srli	a2,a2,0x20
            pageInsert(pagetable, va + i, page2pa(page), PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
    80205682:	46f9                	li	a3,30
    80205684:	964e                	add	a2,a2,s3
    80205686:	85de                	mv	a1,s7
    80205688:	855a                	mv	a0,s6
    8020568a:	ffffd097          	auipc	ra,0xffffd
    8020568e:	910080e7          	jalr	-1776(ra) # 80201f9a <pageInsert>
    80205692:	bee5                	j	8020528a <exec+0x3f0>
    for (i = r; i < binSize; i += r) {
    80205694:	84d6                	mv	s1,s5
    int r = 0;    
    80205696:	4901                	li	s2,0
    80205698:	b455                	j	8020513c <exec+0x2a2>
        page = pa2page(pageLookup(pagetable, va, &entry));
    8020569a:	de043823          	sd	zero,-528(s0)
            if (pageAlloc(&page) < 0) {
    8020569e:	df040513          	addi	a0,s0,-528
    802056a2:	ffffc097          	auipc	ra,0xffffc
    802056a6:	56c080e7          	jalr	1388(ra) # 80201c0e <pageAlloc>
    802056aa:	aa0545e3          	bltz	a0,80205154 <exec+0x2ba>
    return page - pages;
    802056ae:	df043603          	ld	a2,-528(s0)
    802056b2:	001bd797          	auipc	a5,0x1bd
    802056b6:	dc678793          	addi	a5,a5,-570 # 803c2478 <pages>
    802056ba:	8e1d                	sub	a2,a2,a5
    802056bc:	860d                	srai	a2,a2,0x3
    802056be:	00008797          	auipc	a5,0x8
    802056c2:	c1a7b783          	ld	a5,-998(a5) # 8020d2d8 <__func__.0+0x8>
    802056c6:	02f60633          	mul	a2,a2,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    802056ca:	00c6161b          	slliw	a2,a2,0xc
    802056ce:	1602                	slli	a2,a2,0x20
    802056d0:	9201                	srli	a2,a2,0x20
            pageInsert(pagetable, va, page2pa(page), PTE_EXECUTE | PTE_READ | PTE_WRITE | PTE_USER);
    802056d2:	46f9                	li	a3,30
    802056d4:	964e                	add	a2,a2,s3
    802056d6:	85e6                	mv	a1,s9
    802056d8:	855a                	mv	a0,s6
    802056da:	ffffd097          	auipc	ra,0xffffd
    802056de:	8c0080e7          	jalr	-1856(ra) # 80201f9a <pageInsert>
    802056e2:	b2f5                	j	802050ce <exec+0x234>

00000000802056e4 <sys_exec>:

#define MAXPATH      128   // maximum file path name
u64 sys_exec(void) {
    802056e4:	7141                	addi	sp,sp,-496
    802056e6:	f786                	sd	ra,488(sp)
    802056e8:	f3a2                	sd	s0,480(sp)
    802056ea:	efa6                	sd	s1,472(sp)
    802056ec:	ebca                	sd	s2,464(sp)
    802056ee:	e7ce                	sd	s3,456(sp)
    802056f0:	e3d2                	sd	s4,448(sp)
    802056f2:	ff56                	sd	s5,440(sp)
    802056f4:	fb5a                	sd	s6,432(sp)
    802056f6:	f75e                	sd	s7,424(sp)
    802056f8:	f362                	sd	s8,416(sp)
    802056fa:	1b80                	addi	s0,sp,496
    char path[MAXPATH], *argv[MAXARG];
    int i;
    u64 uargv, uarg;

    if (argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0) {
    802056fc:	08000613          	li	a2,128
    80205700:	f3040593          	addi	a1,s0,-208
    80205704:	4501                	li	a0,0
    80205706:	ffffe097          	auipc	ra,0xffffe
    8020570a:	74e080e7          	jalr	1870(ra) # 80203e54 <argstr>
        return -1;
    8020570e:	59fd                	li	s3,-1
    if (argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0) {
    80205710:	14054863          	bltz	a0,80205860 <sys_exec+0x17c>
    80205714:	e2840593          	addi	a1,s0,-472
    80205718:	4505                	li	a0,1
    8020571a:	ffffe097          	auipc	ra,0xffffe
    8020571e:	60a080e7          	jalr	1546(ra) # 80203d24 <argaddr>
    80205722:	12054f63          	bltz	a0,80205860 <sys_exec+0x17c>
    }
    memset(argv, 0, sizeof(argv));
    80205726:	10000613          	li	a2,256
    8020572a:	4581                	li	a1,0
    8020572c:	e3040513          	addi	a0,s0,-464
    80205730:	00000097          	auipc	ra,0x0
    80205734:	634080e7          	jalr	1588(ra) # 80205d64 <memset>
    for (i = 0;; i++) {
        if (i >= NELEM(argv)) {
    80205738:	e3040493          	addi	s1,s0,-464
    memset(argv, 0, sizeof(argv));
    8020573c:	89a6                	mv	s3,s1
    8020573e:	4901                	li	s2,0
    return page - pages;
    80205740:	001bdb17          	auipc	s6,0x1bd
    80205744:	d38b0b13          	addi	s6,s6,-712 # 803c2478 <pages>
    80205748:	00008a97          	auipc	s5,0x8
    8020574c:	b90a8a93          	addi	s5,s5,-1136 # 8020d2d8 <__func__.0+0x8>
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80205750:	4a05                	li	s4,1
    80205752:	0a7e                	slli	s4,s4,0x1f
        if (i >= NELEM(argv)) {
    80205754:	02000b93          	li	s7,32
    80205758:	00090c1b          	sext.w	s8,s2
            goto bad;
        }
        if (fetchaddr(uargv + sizeof(u64) * i, (u64*)&uarg) < 0) {
    8020575c:	00391513          	slli	a0,s2,0x3
    80205760:	e2040593          	addi	a1,s0,-480
    80205764:	e2843783          	ld	a5,-472(s0)
    80205768:	953e                	add	a0,a0,a5
    8020576a:	ffffe097          	auipc	ra,0xffffe
    8020576e:	55a080e7          	jalr	1370(ra) # 80203cc4 <fetchaddr>
    80205772:	04054963          	bltz	a0,802057c4 <sys_exec+0xe0>
            goto bad;
        }
        if (uarg == 0) {
    80205776:	e2043783          	ld	a5,-480(s0)
    8020577a:	c7c1                	beqz	a5,80205802 <sys_exec+0x11e>
            argv[i] = 0;
            break;
        }
        PhysicalPage *page;
        if(pageAlloc(&page))
    8020577c:	e1840513          	addi	a0,s0,-488
    80205780:	ffffc097          	auipc	ra,0xffffc
    80205784:	48e080e7          	jalr	1166(ra) # 80201c0e <pageAlloc>
    80205788:	ed15                	bnez	a0,802057c4 <sys_exec+0xe0>
    return page - pages;
    8020578a:	e1843583          	ld	a1,-488(s0)
    8020578e:	416585b3          	sub	a1,a1,s6
    80205792:	858d                	srai	a1,a1,0x3
    80205794:	000ab783          	ld	a5,0(s5)
    80205798:	02f585b3          	mul	a1,a1,a5
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    8020579c:	00c5959b          	slliw	a1,a1,0xc
    802057a0:	1582                	slli	a1,a1,0x20
    802057a2:	9181                	srli	a1,a1,0x20
    802057a4:	95d2                	add	a1,a1,s4
            goto bad;
        argv[i] = (char *)page2pa(page);
    802057a6:	00b9b023          	sd	a1,0(s3)
        if (argv[i] == 0)
            goto bad;
        if (fetchstr(uarg, argv[i], PGSIZE) < 0)
    802057aa:	6605                	lui	a2,0x1
    802057ac:	e2043503          	ld	a0,-480(s0)
    802057b0:	ffffe097          	auipc	ra,0xffffe
    802057b4:	65a080e7          	jalr	1626(ra) # 80203e0a <fetchstr>
    802057b8:	00054663          	bltz	a0,802057c4 <sys_exec+0xe0>
        if (i >= NELEM(argv)) {
    802057bc:	0905                	addi	s2,s2,1
    802057be:	09a1                	addi	s3,s3,8
    802057c0:	f9791ce3          	bne	s2,s7,80205758 <sys_exec+0x74>
        pageFree(pa2page((u64)argv[i]));

    return ret;

bad:
    for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
    802057c4:	f3040913          	addi	s2,s0,-208
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    802057c8:	80000ab7          	lui	s5,0x80000
    return pages + ppn;
    802057cc:	59fd                	li	s3,-1
    802057ce:	0209d993          	srli	s3,s3,0x20
    802057d2:	001bda17          	auipc	s4,0x1bd
    802057d6:	ca6a0a13          	addi	s4,s4,-858 # 803c2478 <pages>
    802057da:	609c                	ld	a5,0(s1)
    802057dc:	c3c9                	beqz	a5,8020585e <sys_exec+0x17a>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    802057de:	97d6                	add	a5,a5,s5
    802057e0:	83b1                	srli	a5,a5,0xc
    return pages + ppn;
    802057e2:	0137f7b3          	and	a5,a5,s3
    802057e6:	00179513          	slli	a0,a5,0x1
    802057ea:	953e                	add	a0,a0,a5
    802057ec:	050e                	slli	a0,a0,0x3
        pageFree(pa2page((u64)argv[i]));
    802057ee:	9552                	add	a0,a0,s4
    802057f0:	ffffc097          	auipc	ra,0xffffc
    802057f4:	5f2080e7          	jalr	1522(ra) # 80201de2 <pageFree>
    for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
    802057f8:	04a1                	addi	s1,s1,8
    802057fa:	fe9910e3          	bne	s2,s1,802057da <sys_exec+0xf6>
    return -1;
    802057fe:	59fd                	li	s3,-1
    80205800:	a085                	j	80205860 <sys_exec+0x17c>
            argv[i] = 0;
    80205802:	0c0e                	slli	s8,s8,0x3
    80205804:	fb0c0793          	addi	a5,s8,-80
    80205808:	00878c33          	add	s8,a5,s0
    8020580c:	e80c3023          	sd	zero,-384(s8)
    int ret = exec(path, argv);
    80205810:	e3040593          	addi	a1,s0,-464
    80205814:	f3040513          	addi	a0,s0,-208
    80205818:	fffff097          	auipc	ra,0xfffff
    8020581c:	682080e7          	jalr	1666(ra) # 80204e9a <exec>
    80205820:	89aa                	mv	s3,a0
    for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
    80205822:	f3040913          	addi	s2,s0,-208
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80205826:	80000b37          	lui	s6,0x80000
    return pages + ppn;
    8020582a:	5a7d                	li	s4,-1
    8020582c:	020a5a13          	srli	s4,s4,0x20
    80205830:	001bda97          	auipc	s5,0x1bd
    80205834:	c48a8a93          	addi	s5,s5,-952 # 803c2478 <pages>
    80205838:	609c                	ld	a5,0(s1)
    8020583a:	c39d                	beqz	a5,80205860 <sys_exec+0x17c>
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    8020583c:	97da                	add	a5,a5,s6
    8020583e:	83b1                	srli	a5,a5,0xc
    return pages + ppn;
    80205840:	0147f7b3          	and	a5,a5,s4
    80205844:	00179513          	slli	a0,a5,0x1
    80205848:	953e                	add	a0,a0,a5
    8020584a:	050e                	slli	a0,a0,0x3
        pageFree(pa2page((u64)argv[i]));
    8020584c:	9556                	add	a0,a0,s5
    8020584e:	ffffc097          	auipc	ra,0xffffc
    80205852:	594080e7          	jalr	1428(ra) # 80201de2 <pageFree>
    for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
    80205856:	04a1                	addi	s1,s1,8
    80205858:	ff2490e3          	bne	s1,s2,80205838 <sys_exec+0x154>
    8020585c:	a011                	j	80205860 <sys_exec+0x17c>
    return -1;
    8020585e:	59fd                	li	s3,-1
}
    80205860:	854e                	mv	a0,s3
    80205862:	70be                	ld	ra,488(sp)
    80205864:	741e                	ld	s0,480(sp)
    80205866:	64fe                	ld	s1,472(sp)
    80205868:	695e                	ld	s2,464(sp)
    8020586a:	69be                	ld	s3,456(sp)
    8020586c:	6a1e                	ld	s4,448(sp)
    8020586e:	7afa                	ld	s5,440(sp)
    80205870:	7b5a                	ld	s6,432(sp)
    80205872:	7bba                	ld	s7,424(sp)
    80205874:	7c1a                	ld	s8,416(sp)
    80205876:	617d                	addi	sp,sp,496
    80205878:	8082                	ret

000000008020587a <interruptPush>:
#include "Interrupt.h"
#include "Riscv.h"
#include "Hart.h"
#include "Driver.h"

void interruptPush(void) {
    8020587a:	1101                	addi	sp,sp,-32
    8020587c:	ec06                	sd	ra,24(sp)
    8020587e:	e822                	sd	s0,16(sp)
    80205880:	e426                	sd	s1,8(sp)
    80205882:	1000                	addi	s0,sp,32
#define SSTATUS_SIE (1L << 1)  // Supervisor Interrupt Enable
#define SSTATUS_UIE (1L << 0)  // User Interrupt Enable

static inline u64 r_sstatus() {
    u64 x;
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    80205884:	100024f3          	csrr	s1,sstatus
    80205888:	100027f3          	csrr	a5,sstatus
	w_sstatus(r_sstatus() | SSTATUS_SIE);
}

// disable device interrupts
static inline void intr_off() {
	w_sstatus(r_sstatus() & ~SSTATUS_SIE);
    8020588c:	9bf5                	andi	a5,a5,-3
    asm volatile("csrw sstatus, %0" : : "r" (x));
    8020588e:	10079073          	csrw	sstatus,a5
    int oldInterruptEnable = intr_get();
    intr_off();

    struct Hart* hart = myHart();
    80205892:	00000097          	auipc	ra,0x0
    80205896:	2f6080e7          	jalr	758(ra) # 80205b88 <myHart>
    if (hart->interruptLayer == 0)
    8020589a:	411c                	lw	a5,0(a0)
    8020589c:	e781                	bnez	a5,802058a4 <interruptPush+0x2a>
}

// are device interrupts enabled?
static inline bool intr_get() {
	u64 x = r_sstatus();
	return (x & SSTATUS_SIE) != 0;
    8020589e:	8085                	srli	s1,s1,0x1
    802058a0:	8885                	andi	s1,s1,1
        hart->lastInterruptEnable = oldInterruptEnable;
    802058a2:	c144                	sw	s1,4(a0)
    hart->interruptLayer++;
    802058a4:	2785                	addiw	a5,a5,1
    802058a6:	c11c                	sw	a5,0(a0)
}
    802058a8:	60e2                	ld	ra,24(sp)
    802058aa:	6442                	ld	s0,16(sp)
    802058ac:	64a2                	ld	s1,8(sp)
    802058ae:	6105                	addi	sp,sp,32
    802058b0:	8082                	ret

00000000802058b2 <interruptPop>:

void interruptPop(void) {
    802058b2:	1141                	addi	sp,sp,-16
    802058b4:	e406                	sd	ra,8(sp)
    802058b6:	e022                	sd	s0,0(sp)
    802058b8:	0800                	addi	s0,sp,16
    struct Hart* hart = myHart();
    802058ba:	00000097          	auipc	ra,0x0
    802058be:	2ce080e7          	jalr	718(ra) # 80205b88 <myHart>
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    802058c2:	100027f3          	csrr	a5,sstatus
	return (x & SSTATUS_SIE) != 0;
    802058c6:	8b89                	andi	a5,a5,2
    if (intr_get()) {
    802058c8:	e78d                	bnez	a5,802058f2 <interruptPop+0x40>
        panic("Interrupt bit still have!\n");
    }

    if (hart->interruptLayer < 0) {
    802058ca:	411c                	lw	a5,0(a0)
    802058cc:	0407c463          	bltz	a5,80205914 <interruptPop+0x62>
        panic("Interrupt close error! Not match!\n");
    }

    hart->interruptLayer--;
    802058d0:	37fd                	addiw	a5,a5,-1
    802058d2:	0007871b          	sext.w	a4,a5
    802058d6:	c11c                	sw	a5,0(a0)
    if (hart->interruptLayer == 0 && hart->lastInterruptEnable)
    802058d8:	eb09                	bnez	a4,802058ea <interruptPop+0x38>
    802058da:	415c                	lw	a5,4(a0)
    802058dc:	c799                	beqz	a5,802058ea <interruptPop+0x38>
    asm volatile("csrr %0, sstatus" : "=r" (x) );
    802058de:	100027f3          	csrr	a5,sstatus
	w_sstatus(r_sstatus() | SSTATUS_SIE);
    802058e2:	0027e793          	ori	a5,a5,2
    asm volatile("csrw sstatus, %0" : : "r" (x));
    802058e6:	10079073          	csrw	sstatus,a5
        intr_on();
    802058ea:	60a2                	ld	ra,8(sp)
    802058ec:	6402                	ld	s0,0(sp)
    802058ee:	0141                	addi	sp,sp,16
    802058f0:	8082                	ret
        panic("Interrupt bit still have!\n");
    802058f2:	00007697          	auipc	a3,0x7
    802058f6:	3fe68693          	addi	a3,a3,1022 # 8020ccf0 <__func__.0+0x10>
    802058fa:	00007617          	auipc	a2,0x7
    802058fe:	44e60613          	addi	a2,a2,1102 # 8020cd48 <__func__.0>
    80205902:	45cd                	li	a1,19
    80205904:	00007517          	auipc	a0,0x7
    80205908:	40c50513          	addi	a0,a0,1036 # 8020cd10 <__func__.0+0x30>
    8020590c:	ffffb097          	auipc	ra,0xffffb
    80205910:	240080e7          	jalr	576(ra) # 80200b4c <_panic_>
        panic("Interrupt close error! Not match!\n");
    80205914:	00007697          	auipc	a3,0x7
    80205918:	40c68693          	addi	a3,a3,1036 # 8020cd20 <__func__.0+0x40>
    8020591c:	00007617          	auipc	a2,0x7
    80205920:	42c60613          	addi	a2,a2,1068 # 8020cd48 <__func__.0>
    80205924:	45dd                	li	a1,23
    80205926:	00007517          	auipc	a0,0x7
    8020592a:	3ea50513          	addi	a0,a0,1002 # 8020cd10 <__func__.0+0x30>
    8020592e:	ffffb097          	auipc	ra,0xffffb
    80205932:	21e080e7          	jalr	542(ra) # 80200b4c <_panic_>

0000000080205936 <initsleeplock>:
int holdingsleep(struct Sleeplock* lk) {
    return 1;
}
#else

void initsleeplock(struct Sleeplock* lk, char* name) {
    80205936:	1101                	addi	sp,sp,-32
    80205938:	ec06                	sd	ra,24(sp)
    8020593a:	e822                	sd	s0,16(sp)
    8020593c:	e426                	sd	s1,8(sp)
    8020593e:	e04a                	sd	s2,0(sp)
    80205940:	1000                	addi	s0,sp,32
    80205942:	84aa                	mv	s1,a0
    80205944:	892e                	mv	s2,a1
    initLock(&lk->lk, "sleep lock");
    80205946:	00007597          	auipc	a1,0x7
    8020594a:	41258593          	addi	a1,a1,1042 # 8020cd58 <__func__.0+0x10>
    8020594e:	0521                	addi	a0,a0,8
    80205950:	00000097          	auipc	ra,0x0
    80205954:	114080e7          	jalr	276(ra) # 80205a64 <initLock>
    lk->name = name;
    80205958:	0324b023          	sd	s2,32(s1) # 2000020 <_start-0x7e1fffe0>
    lk->locked = 0;
    8020595c:	0004a023          	sw	zero,0(s1)
    lk->pid = 0;
    80205960:	0204a423          	sw	zero,40(s1)
}
    80205964:	60e2                	ld	ra,24(sp)
    80205966:	6442                	ld	s0,16(sp)
    80205968:	64a2                	ld	s1,8(sp)
    8020596a:	6902                	ld	s2,0(sp)
    8020596c:	6105                	addi	sp,sp,32
    8020596e:	8082                	ret

0000000080205970 <acquiresleep>:

void acquiresleep(struct Sleeplock* lk) {
    80205970:	1101                	addi	sp,sp,-32
    80205972:	ec06                	sd	ra,24(sp)
    80205974:	e822                	sd	s0,16(sp)
    80205976:	e426                	sd	s1,8(sp)
    80205978:	e04a                	sd	s2,0(sp)
    8020597a:	1000                	addi	s0,sp,32
    8020597c:	84aa                	mv	s1,a0
    acquireLock(&lk->lk);
    8020597e:	00850913          	addi	s2,a0,8
    80205982:	854a                	mv	a0,s2
    80205984:	00000097          	auipc	ra,0x0
    80205988:	12a080e7          	jalr	298(ra) # 80205aae <acquireLock>
    while (lk->locked) {
    8020598c:	409c                	lw	a5,0(s1)
    8020598e:	cb89                	beqz	a5,802059a0 <acquiresleep+0x30>
        // MSG_PRINT("in while");
        sleep(lk, &lk->lk);
    80205990:	85ca                	mv	a1,s2
    80205992:	8526                	mv	a0,s1
    80205994:	ffffe097          	auipc	ra,0xffffe
    80205998:	f32080e7          	jalr	-206(ra) # 802038c6 <sleep>
    while (lk->locked) {
    8020599c:	409c                	lw	a5,0(s1)
    8020599e:	fbed                	bnez	a5,80205990 <acquiresleep+0x20>
    }
    lk->locked = 1;
    802059a0:	4785                	li	a5,1
    802059a2:	c09c                	sw	a5,0(s1)
    lk->pid = myproc()->id;
    802059a4:	ffffd097          	auipc	ra,0xffffd
    802059a8:	00c080e7          	jalr	12(ra) # 802029b0 <myproc>
    802059ac:	17052783          	lw	a5,368(a0)
    802059b0:	d49c                	sw	a5,40(s1)
    releaseLock(&lk->lk);
    802059b2:	854a                	mv	a0,s2
    802059b4:	00000097          	auipc	ra,0x0
    802059b8:	176080e7          	jalr	374(ra) # 80205b2a <releaseLock>
}
    802059bc:	60e2                	ld	ra,24(sp)
    802059be:	6442                	ld	s0,16(sp)
    802059c0:	64a2                	ld	s1,8(sp)
    802059c2:	6902                	ld	s2,0(sp)
    802059c4:	6105                	addi	sp,sp,32
    802059c6:	8082                	ret

00000000802059c8 <releasesleep>:

void releasesleep(struct Sleeplock* lk) {
    802059c8:	1101                	addi	sp,sp,-32
    802059ca:	ec06                	sd	ra,24(sp)
    802059cc:	e822                	sd	s0,16(sp)
    802059ce:	e426                	sd	s1,8(sp)
    802059d0:	e04a                	sd	s2,0(sp)
    802059d2:	1000                	addi	s0,sp,32
    802059d4:	84aa                	mv	s1,a0
    acquireLock(&lk->lk);
    802059d6:	00850913          	addi	s2,a0,8
    802059da:	854a                	mv	a0,s2
    802059dc:	00000097          	auipc	ra,0x0
    802059e0:	0d2080e7          	jalr	210(ra) # 80205aae <acquireLock>
    lk->locked = 0;
    802059e4:	0004a023          	sw	zero,0(s1)
    lk->pid = 0;
    802059e8:	0204a423          	sw	zero,40(s1)
    wakeup(lk);
    802059ec:	8526                	mv	a0,s1
    802059ee:	ffffd097          	auipc	ra,0xffffd
    802059f2:	7b6080e7          	jalr	1974(ra) # 802031a4 <wakeup>
    releaseLock(&lk->lk);
    802059f6:	854a                	mv	a0,s2
    802059f8:	00000097          	auipc	ra,0x0
    802059fc:	132080e7          	jalr	306(ra) # 80205b2a <releaseLock>
}
    80205a00:	60e2                	ld	ra,24(sp)
    80205a02:	6442                	ld	s0,16(sp)
    80205a04:	64a2                	ld	s1,8(sp)
    80205a06:	6902                	ld	s2,0(sp)
    80205a08:	6105                	addi	sp,sp,32
    80205a0a:	8082                	ret

0000000080205a0c <holdingsleep>:

int holdingsleep(struct Sleeplock* lk) {
    80205a0c:	7179                	addi	sp,sp,-48
    80205a0e:	f406                	sd	ra,40(sp)
    80205a10:	f022                	sd	s0,32(sp)
    80205a12:	ec26                	sd	s1,24(sp)
    80205a14:	e84a                	sd	s2,16(sp)
    80205a16:	e44e                	sd	s3,8(sp)
    80205a18:	1800                	addi	s0,sp,48
    80205a1a:	84aa                	mv	s1,a0
    int r;

    acquireLock(&lk->lk);
    80205a1c:	00850913          	addi	s2,a0,8
    80205a20:	854a                	mv	a0,s2
    80205a22:	00000097          	auipc	ra,0x0
    80205a26:	08c080e7          	jalr	140(ra) # 80205aae <acquireLock>
    r = lk->locked && (lk->pid == myproc()->id);
    80205a2a:	409c                	lw	a5,0(s1)
    80205a2c:	ef99                	bnez	a5,80205a4a <holdingsleep+0x3e>
    80205a2e:	4481                	li	s1,0
    releaseLock(&lk->lk);
    80205a30:	854a                	mv	a0,s2
    80205a32:	00000097          	auipc	ra,0x0
    80205a36:	0f8080e7          	jalr	248(ra) # 80205b2a <releaseLock>
    return r;
}
    80205a3a:	8526                	mv	a0,s1
    80205a3c:	70a2                	ld	ra,40(sp)
    80205a3e:	7402                	ld	s0,32(sp)
    80205a40:	64e2                	ld	s1,24(sp)
    80205a42:	6942                	ld	s2,16(sp)
    80205a44:	69a2                	ld	s3,8(sp)
    80205a46:	6145                	addi	sp,sp,48
    80205a48:	8082                	ret
    r = lk->locked && (lk->pid == myproc()->id);
    80205a4a:	0284a983          	lw	s3,40(s1)
    80205a4e:	ffffd097          	auipc	ra,0xffffd
    80205a52:	f62080e7          	jalr	-158(ra) # 802029b0 <myproc>
    80205a56:	17052483          	lw	s1,368(a0)
    80205a5a:	413484b3          	sub	s1,s1,s3
    80205a5e:	0014b493          	seqz	s1,s1
    80205a62:	b7f9                	j	80205a30 <holdingsleep+0x24>

0000000080205a64 <initLock>:
#include "Spinlock.h"
#include "Hart.h"
#include "Interrupt.h"
#include "Driver.h"

void initLock(struct Spinlock* lock, char* name) {
    80205a64:	1141                	addi	sp,sp,-16
    80205a66:	e422                	sd	s0,8(sp)
    80205a68:	0800                	addi	s0,sp,16
    lock->name = name;
    80205a6a:	e50c                	sd	a1,8(a0)
    lock->locked = 0;
    80205a6c:	00050023          	sb	zero,0(a0)
    lock->hart = 0;
    80205a70:	00053823          	sd	zero,16(a0)
    lock->times = 0;
    80205a74:	00052223          	sw	zero,4(a0)
}
    80205a78:	6422                	ld	s0,8(sp)
    80205a7a:	0141                	addi	sp,sp,16
    80205a7c:	8082                	ret

0000000080205a7e <holding>:
    interruptPop();
}

int holding(struct Spinlock* lock) {
    int r;
    r = (lock->locked && lock->hart == myHart());
    80205a7e:	00054783          	lbu	a5,0(a0)
    80205a82:	e399                	bnez	a5,80205a88 <holding+0xa>
    80205a84:	4501                	li	a0,0
    return r;
    80205a86:	8082                	ret
int holding(struct Spinlock* lock) {
    80205a88:	1101                	addi	sp,sp,-32
    80205a8a:	ec06                	sd	ra,24(sp)
    80205a8c:	e822                	sd	s0,16(sp)
    80205a8e:	e426                	sd	s1,8(sp)
    80205a90:	1000                	addi	s0,sp,32
    r = (lock->locked && lock->hart == myHart());
    80205a92:	6904                	ld	s1,16(a0)
    80205a94:	00000097          	auipc	ra,0x0
    80205a98:	0f4080e7          	jalr	244(ra) # 80205b88 <myHart>
    80205a9c:	40a48533          	sub	a0,s1,a0
    80205aa0:	00153513          	seqz	a0,a0
    80205aa4:	60e2                	ld	ra,24(sp)
    80205aa6:	6442                	ld	s0,16(sp)
    80205aa8:	64a2                	ld	s1,8(sp)
    80205aaa:	6105                	addi	sp,sp,32
    80205aac:	8082                	ret

0000000080205aae <acquireLock>:
void acquireLock(struct Spinlock* lock) {
    80205aae:	1101                	addi	sp,sp,-32
    80205ab0:	ec06                	sd	ra,24(sp)
    80205ab2:	e822                	sd	s0,16(sp)
    80205ab4:	e426                	sd	s1,8(sp)
    80205ab6:	1000                	addi	s0,sp,32
    80205ab8:	84aa                	mv	s1,a0
    interruptPush();
    80205aba:	00000097          	auipc	ra,0x0
    80205abe:	dc0080e7          	jalr	-576(ra) # 8020587a <interruptPush>
    if (holding(lock)) {
    80205ac2:	8526                	mv	a0,s1
    80205ac4:	00000097          	auipc	ra,0x0
    80205ac8:	fba080e7          	jalr	-70(ra) # 80205a7e <holding>
    80205acc:	ed0d                	bnez	a0,80205b06 <acquireLock+0x58>
    while(__sync_lock_test_and_set(&lock->locked, 1) != 0);
    80205ace:	ffc4f713          	andi	a4,s1,-4
    80205ad2:	0034f693          	andi	a3,s1,3
    80205ad6:	0036969b          	slliw	a3,a3,0x3
    80205ada:	4605                	li	a2,1
    80205adc:	00d6163b          	sllw	a2,a2,a3
    80205ae0:	44c727af          	amoor.w.aq	a5,a2,(a4)
    80205ae4:	00d7d7bb          	srlw	a5,a5,a3
    80205ae8:	0ff7f793          	zext.b	a5,a5
    80205aec:	fbf5                	bnez	a5,80205ae0 <acquireLock+0x32>
    __sync_synchronize();
    80205aee:	0ff0000f          	fence
    lock->hart = myHart();
    80205af2:	00000097          	auipc	ra,0x0
    80205af6:	096080e7          	jalr	150(ra) # 80205b88 <myHart>
    80205afa:	e888                	sd	a0,16(s1)
}
    80205afc:	60e2                	ld	ra,24(sp)
    80205afe:	6442                	ld	s0,16(sp)
    80205b00:	64a2                	ld	s1,8(sp)
    80205b02:	6105                	addi	sp,sp,32
    80205b04:	8082                	ret
        panic("You have acquire the lock! The lock is %s\n", lock->name);
    80205b06:	6498                	ld	a4,8(s1)
    80205b08:	00007697          	auipc	a3,0x7
    80205b0c:	26068693          	addi	a3,a3,608 # 8020cd68 <__func__.0+0x20>
    80205b10:	00007617          	auipc	a2,0x7
    80205b14:	2c860613          	addi	a2,a2,712 # 8020cdd8 <__func__.1>
    80205b18:	45c9                	li	a1,18
    80205b1a:	00007517          	auipc	a0,0x7
    80205b1e:	27e50513          	addi	a0,a0,638 # 8020cd98 <__func__.0+0x50>
    80205b22:	ffffb097          	auipc	ra,0xffffb
    80205b26:	02a080e7          	jalr	42(ra) # 80200b4c <_panic_>

0000000080205b2a <releaseLock>:
void releaseLock(struct Spinlock* lock) {
    80205b2a:	1101                	addi	sp,sp,-32
    80205b2c:	ec06                	sd	ra,24(sp)
    80205b2e:	e822                	sd	s0,16(sp)
    80205b30:	e426                	sd	s1,8(sp)
    80205b32:	1000                	addi	s0,sp,32
    80205b34:	84aa                	mv	s1,a0
    if (!holding(lock)) {
    80205b36:	00000097          	auipc	ra,0x0
    80205b3a:	f48080e7          	jalr	-184(ra) # 80205a7e <holding>
    80205b3e:	c115                	beqz	a0,80205b62 <releaseLock+0x38>
    lock->hart = 0;
    80205b40:	0004b823          	sd	zero,16(s1)
    __sync_synchronize();
    80205b44:	0ff0000f          	fence
    __sync_lock_release(&lock->locked);
    80205b48:	0ff0000f          	fence
    80205b4c:	00048023          	sb	zero,0(s1)
    interruptPop();
    80205b50:	00000097          	auipc	ra,0x0
    80205b54:	d62080e7          	jalr	-670(ra) # 802058b2 <interruptPop>
}
    80205b58:	60e2                	ld	ra,24(sp)
    80205b5a:	6442                	ld	s0,16(sp)
    80205b5c:	64a2                	ld	s1,8(sp)
    80205b5e:	6105                	addi	sp,sp,32
    80205b60:	8082                	ret
        panic("You have release the lock! The lock is %s\n", lock->name);
    80205b62:	6498                	ld	a4,8(s1)
    80205b64:	00007697          	auipc	a3,0x7
    80205b68:	24468693          	addi	a3,a3,580 # 8020cda8 <__func__.0+0x60>
    80205b6c:	00007617          	auipc	a2,0x7
    80205b70:	27c60613          	addi	a2,a2,636 # 8020cde8 <__func__.0>
    80205b74:	02700593          	li	a1,39
    80205b78:	00007517          	auipc	a0,0x7
    80205b7c:	22050513          	addi	a0,a0,544 # 8020cd98 <__func__.0+0x50>
    80205b80:	ffffb097          	auipc	ra,0xffffb
    80205b84:	fcc080e7          	jalr	-52(ra) # 80200b4c <_panic_>

0000000080205b88 <myHart>:
#include "Process.h"
#include "MemoryConfig.h"

struct Hart harts[HART_TOTAL_NUMBER];

inline struct Hart* myHart() {
    80205b88:	1141                	addi	sp,sp,-16
    80205b8a:	e422                	sd	s0,8(sp)
    80205b8c:	0800                	addi	s0,sp,16
#define HART_TOTAL_NUMBER 5

// which hart (core) is this?
static inline u64 r_hartid() {
    u64 x;
    asm volatile("mv %0, tp" : "=r" (x) );
    80205b8e:	8792                	mv	a5,tp
    int r = r_hartid();
    return &harts[r];
    80205b90:	2781                	sext.w	a5,a5
    80205b92:	078e                	slli	a5,a5,0x3
}
    80205b94:	003f8517          	auipc	a0,0x3f8
    80205b98:	a1450513          	addi	a0,a0,-1516 # 805fd5a8 <harts>
    80205b9c:	953e                	add	a0,a0,a5
    80205b9e:	6422                	ld	s0,8(sp)
    80205ba0:	0141                	addi	sp,sp,16
    80205ba2:	8082                	ret

0000000080205ba4 <getHartTrapFrame>:

Trapframe* getHartTrapFrame() {
    80205ba4:	1141                	addi	sp,sp,-16
    80205ba6:	e422                	sd	s0,8(sp)
    80205ba8:	0800                	addi	s0,sp,16
    80205baa:	8792                	mv	a5,tp
    return (Trapframe*)(TRAMPOLINE_BASE + PAGE_SIZE + r_hartid() * sizeof(Trapframe)); 
    80205bac:	00379513          	slli	a0,a5,0x3
    80205bb0:	953e                	add	a0,a0,a5
    80205bb2:	0516                	slli	a0,a0,0x5
    80205bb4:	040007b7          	lui	a5,0x4000
}
    80205bb8:	17fd                	addi	a5,a5,-1
    80205bba:	07b2                	slli	a5,a5,0xc
    80205bbc:	953e                	add	a0,a0,a5
    80205bbe:	6422                	ld	s0,8(sp)
    80205bc0:	0141                	addi	sp,sp,16
    80205bc2:	8082                	ret

0000000080205bc4 <getHartKernelTopSp>:

u64 getHartKernelTopSp() {
    80205bc4:	1141                	addi	sp,sp,-16
    80205bc6:	e422                	sd	s0,8(sp)
    80205bc8:	0800                	addi	s0,sp,16
    80205bca:	8792                	mv	a5,tp
    extern char kernelStack[];
    return (u64)kernelStack + KERNEL_STACK_SIZE * (r_hartid() + 1);
    80205bcc:	0785                	addi	a5,a5,1
    80205bce:	07c2                	slli	a5,a5,0x10
    80205bd0:	0016b517          	auipc	a0,0x16b
    80205bd4:	43050513          	addi	a0,a0,1072 # 80371000 <_stack>
    80205bd8:	953e                	add	a0,a0,a5
    80205bda:	6422                	ld	s0,8(sp)
    80205bdc:	0141                	addi	sp,sp,16
    80205bde:	8082                	ret

0000000080205be0 <signProccessMask>:
#include <Signal.h>
#include <Riscv.h>
#include <Process.h>
#include <Page.h>

int signProccessMask(u64 how, SignalSet *newSet) {
    80205be0:	1101                	addi	sp,sp,-32
    80205be2:	ec06                	sd	ra,24(sp)
    80205be4:	e822                	sd	s0,16(sp)
    80205be6:	e426                	sd	s1,8(sp)
    80205be8:	e04a                	sd	s2,0(sp)
    80205bea:	1000                	addi	s0,sp,32
    80205bec:	84aa                	mv	s1,a0
    80205bee:	892e                	mv	s2,a1
    Process *p = myproc();
    80205bf0:	ffffd097          	auipc	ra,0xffffd
    80205bf4:	dc0080e7          	jalr	-576(ra) # 802029b0 <myproc>
    switch (how) {
    80205bf8:	4785                	li	a5,1
    80205bfa:	00f48d63          	beq	s1,a5,80205c14 <signProccessMask+0x34>
    80205bfe:	4789                	li	a5,2
    80205c00:	02f48e63          	beq	s1,a5,80205c3c <signProccessMask+0x5c>
    80205c04:	c09d                	beqz	s1,80205c2a <signProccessMask+0x4a>
    80205c06:	557d                	li	a0,-1
        p->blocked = *newSet;
        return 0;
    default:
        return -1;
    }
}
    80205c08:	60e2                	ld	ra,24(sp)
    80205c0a:	6442                	ld	s0,16(sp)
    80205c0c:	64a2                	ld	s1,8(sp)
    80205c0e:	6902                	ld	s2,0(sp)
    80205c10:	6105                	addi	sp,sp,32
    80205c12:	8082                	ret
        p->blocked |= ~(*newSet);
    80205c14:	00093703          	ld	a4,0(s2)
    80205c18:	fff74713          	not	a4,a4
    80205c1c:	5d853783          	ld	a5,1496(a0)
    80205c20:	8fd9                	or	a5,a5,a4
    80205c22:	5cf53c23          	sd	a5,1496(a0)
        return 0;
    80205c26:	4501                	li	a0,0
    80205c28:	b7c5                	j	80205c08 <signProccessMask+0x28>
        p->blocked &= *newSet;
    80205c2a:	5d853783          	ld	a5,1496(a0)
    80205c2e:	00093703          	ld	a4,0(s2)
    80205c32:	8ff9                	and	a5,a5,a4
    80205c34:	5cf53c23          	sd	a5,1496(a0)
        return 0;
    80205c38:	4501                	li	a0,0
    80205c3a:	b7f9                	j	80205c08 <signProccessMask+0x28>
        p->blocked = *newSet;
    80205c3c:	00093783          	ld	a5,0(s2)
    80205c40:	5cf53c23          	sd	a5,1496(a0)
        return 0;
    80205c44:	4501                	li	a0,0
    80205c46:	b7c9                	j	80205c08 <signProccessMask+0x28>

0000000080205c48 <doSignalAction>:

int doSignalAction(int sig, u64 act, u64 oldAction) {
    80205c48:	7179                	addi	sp,sp,-48
    80205c4a:	f406                	sd	ra,40(sp)
    80205c4c:	f022                	sd	s0,32(sp)
    80205c4e:	ec26                	sd	s1,24(sp)
    80205c50:	e84a                	sd	s2,16(sp)
    80205c52:	e44e                	sd	s3,8(sp)
    80205c54:	1800                	addi	s0,sp,48
    80205c56:	84aa                	mv	s1,a0
    80205c58:	892e                	mv	s2,a1
    80205c5a:	89b2                	mv	s3,a2
    Process *p = myproc();
    80205c5c:	ffffd097          	auipc	ra,0xffffd
    80205c60:	d54080e7          	jalr	-684(ra) # 802029b0 <myproc>
    if (sig < 1 || sig > SIGNAL_COUNT) {
    80205c64:	fff4871b          	addiw	a4,s1,-1
    80205c68:	03f00793          	li	a5,63
    80205c6c:	06e7e963          	bltu	a5,a4,80205cde <doSignalAction+0x96>
        return -1;
    }
	SignalAction *k = getSignalHandler(p) + (sig - 1);
    80205c70:	ffffd097          	auipc	ra,0xffffd
    80205c74:	dd0080e7          	jalr	-560(ra) # 80202a40 <getSignalHandler>
    80205c78:	00249793          	slli	a5,s1,0x2
    80205c7c:	97a6                	add	a5,a5,s1
    80205c7e:	078e                	slli	a5,a5,0x3
    80205c80:	fd878793          	addi	a5,a5,-40 # 3ffffd8 <_start-0x7c200028>
    80205c84:	00f504b3          	add	s1,a0,a5
    if (oldAction) {
    80205c88:	00099c63          	bnez	s3,80205ca0 <doSignalAction+0x58>
        copyout(myproc()->pgdir, oldAction, (char*)k, sizeof(SignalAction));
    }
	if (act) {
		copyin(myproc()->pgdir, (char *)k, act, sizeof(SignalAction));
	}
	return 0;
    80205c8c:	4501                	li	a0,0
	if (act) {
    80205c8e:	02091863          	bnez	s2,80205cbe <doSignalAction+0x76>
}
    80205c92:	70a2                	ld	ra,40(sp)
    80205c94:	7402                	ld	s0,32(sp)
    80205c96:	64e2                	ld	s1,24(sp)
    80205c98:	6942                	ld	s2,16(sp)
    80205c9a:	69a2                	ld	s3,8(sp)
    80205c9c:	6145                	addi	sp,sp,48
    80205c9e:	8082                	ret
        copyout(myproc()->pgdir, oldAction, (char*)k, sizeof(SignalAction));
    80205ca0:	ffffd097          	auipc	ra,0xffffd
    80205ca4:	d10080e7          	jalr	-752(ra) # 802029b0 <myproc>
    80205ca8:	02800693          	li	a3,40
    80205cac:	8626                	mv	a2,s1
    80205cae:	85ce                	mv	a1,s3
    80205cb0:	16853503          	ld	a0,360(a0)
    80205cb4:	ffffc097          	auipc	ra,0xffffc
    80205cb8:	6fa080e7          	jalr	1786(ra) # 802023ae <copyout>
    80205cbc:	bfc1                	j	80205c8c <doSignalAction+0x44>
		copyin(myproc()->pgdir, (char *)k, act, sizeof(SignalAction));
    80205cbe:	ffffd097          	auipc	ra,0xffffd
    80205cc2:	cf2080e7          	jalr	-782(ra) # 802029b0 <myproc>
    80205cc6:	02800693          	li	a3,40
    80205cca:	864a                	mv	a2,s2
    80205ccc:	85a6                	mv	a1,s1
    80205cce:	16853503          	ld	a0,360(a0)
    80205cd2:	ffffc097          	auipc	ra,0xffffc
    80205cd6:	64a080e7          	jalr	1610(ra) # 8020231c <copyin>
	return 0;
    80205cda:	4501                	li	a0,0
    80205cdc:	bf5d                	j	80205c92 <doSignalAction+0x4a>
        return -1;
    80205cde:	557d                	li	a0,-1
    80205ce0:	bf4d                	j	80205c92 <doSignalAction+0x4a>

0000000080205ce2 <__dequeueSignal>:

int __dequeueSignal(SignalSet *pending, SignalSet *mask) {
    80205ce2:	1141                	addi	sp,sp,-16
    80205ce4:	e422                	sd	s0,8(sp)
    80205ce6:	0800                	addi	s0,sp,16
    u64 x = *pending & ~*mask;
    80205ce8:	619c                	ld	a5,0(a1)
    80205cea:	fff7c793          	not	a5,a5
    80205cee:	6118                	ld	a4,0(a0)
    80205cf0:	8ff9                	and	a5,a5,a4
            i++;
            x >>= 1;
        }
        return i;
    }
    return 0;
    80205cf2:	4501                	li	a0,0
    if (x) {
    80205cf4:	e781                	bnez	a5,80205cfc <__dequeueSignal+0x1a>
}
    80205cf6:	6422                	ld	s0,8(sp)
    80205cf8:	0141                	addi	sp,sp,16
    80205cfa:	8082                	ret
        while (!(x & 1)) {
    80205cfc:	0017f713          	andi	a4,a5,1
    80205d00:	eb01                	bnez	a4,80205d10 <__dequeueSignal+0x2e>
        int i = 1;
    80205d02:	4505                	li	a0,1
            i++;
    80205d04:	2505                	addiw	a0,a0,1
            x >>= 1;
    80205d06:	8385                	srli	a5,a5,0x1
        while (!(x & 1)) {
    80205d08:	0017f713          	andi	a4,a5,1
    80205d0c:	df65                	beqz	a4,80205d04 <__dequeueSignal+0x22>
    80205d0e:	b7e5                	j	80205cf6 <__dequeueSignal+0x14>
        int i = 1;
    80205d10:	4505                	li	a0,1
    80205d12:	b7d5                	j	80205cf6 <__dequeueSignal+0x14>

0000000080205d14 <doSignalTimedWait>:
static int dequeueSignal(Process *p, SignalSet *mask, SignalInfo *info) {
    int signal = __dequeueSignal(&p->pending, mask);
    return signal;
}

int doSignalTimedWait(SignalSet *which, SignalInfo *info, TimeSpec *ts) {
    80205d14:	1101                	addi	sp,sp,-32
    80205d16:	ec06                	sd	ra,24(sp)
    80205d18:	e822                	sd	s0,16(sp)
    80205d1a:	e426                	sd	s1,8(sp)
    80205d1c:	e04a                	sd	s2,0(sp)
    80205d1e:	1000                	addi	s0,sp,32
    80205d20:	892a                	mv	s2,a0
    80205d22:	84b2                	mv	s1,a2
    Process *p = myproc();
    80205d24:	ffffd097          	auipc	ra,0xffffd
    80205d28:	c8c080e7          	jalr	-884(ra) # 802029b0 <myproc>
    if (ts) {
    80205d2c:	cc99                	beqz	s1,80205d4a <doSignalTimedWait+0x36>
// supervisor-mode cycle counter
static inline u64 r_time() {
	u64 x;
  	// asm volatile("csrr %0, time" : "=r" (x) );
  	// this instruction will trap in SBI
	asm volatile("rdtime %0" : "=r" (x) );
    80205d2e:	c01026f3          	rdtime	a3
        p->awakeTime = r_time() +  ts->second * 1000000 + ts->microSecond;
    80205d32:	609c                	ld	a5,0(s1)
    80205d34:	000f4737          	lui	a4,0xf4
    80205d38:	24070713          	addi	a4,a4,576 # f4240 <_start-0x8010bdc0>
    80205d3c:	02e787b3          	mul	a5,a5,a4
    80205d40:	6498                	ld	a4,8(s1)
    80205d42:	97ba                	add	a5,a5,a4
    80205d44:	97b6                	add	a5,a5,a3
    80205d46:	16f53023          	sd	a5,352(a0)
    int signal = __dequeueSignal(&p->pending, mask);
    80205d4a:	85ca                	mv	a1,s2
    80205d4c:	5e050513          	addi	a0,a0,1504
    80205d50:	00000097          	auipc	ra,0x0
    80205d54:	f92080e7          	jalr	-110(ra) # 80205ce2 <__dequeueSignal>
    }
    return dequeueSignal(p, which, info);    
}
    80205d58:	60e2                	ld	ra,24(sp)
    80205d5a:	6442                	ld	s0,16(sp)
    80205d5c:	64a2                	ld	s1,8(sp)
    80205d5e:	6902                	ld	s2,0(sp)
    80205d60:	6105                	addi	sp,sp,32
    80205d62:	8082                	ret

0000000080205d64 <memset>:
#include "Type.h"

void* memset(void* dst, int c, uint n) {
    80205d64:	1141                	addi	sp,sp,-16
    80205d66:	e422                	sd	s0,8(sp)
    80205d68:	0800                	addi	s0,sp,16
    char* cdst = (char*)dst;
    int i;
    for (i = 0; i < n; i++) {
    80205d6a:	ca19                	beqz	a2,80205d80 <memset+0x1c>
    80205d6c:	87aa                	mv	a5,a0
    80205d6e:	1602                	slli	a2,a2,0x20
    80205d70:	9201                	srli	a2,a2,0x20
    80205d72:	00a60733          	add	a4,a2,a0
        cdst[i] = c;
    80205d76:	00b78023          	sb	a1,0(a5)
    for (i = 0; i < n; i++) {
    80205d7a:	0785                	addi	a5,a5,1
    80205d7c:	fee79de3          	bne	a5,a4,80205d76 <memset+0x12>
    }
    return dst;
}
    80205d80:	6422                	ld	s0,8(sp)
    80205d82:	0141                	addi	sp,sp,16
    80205d84:	8082                	ret

0000000080205d86 <memcmp>:

int memcmp(const void* v1, const void* v2, uint n) {
    80205d86:	1141                	addi	sp,sp,-16
    80205d88:	e422                	sd	s0,8(sp)
    80205d8a:	0800                	addi	s0,sp,16
    const uchar *s1, *s2;

    s1 = v1;
    s2 = v2;
    while (n-- > 0) {
    80205d8c:	ca05                	beqz	a2,80205dbc <memcmp+0x36>
    80205d8e:	fff6069b          	addiw	a3,a2,-1
    80205d92:	1682                	slli	a3,a3,0x20
    80205d94:	9281                	srli	a3,a3,0x20
    80205d96:	0685                	addi	a3,a3,1
    80205d98:	96aa                	add	a3,a3,a0
        if (*s1 != *s2)
    80205d9a:	00054783          	lbu	a5,0(a0)
    80205d9e:	0005c703          	lbu	a4,0(a1)
    80205da2:	00e79863          	bne	a5,a4,80205db2 <memcmp+0x2c>
            return *s1 - *s2;
        s1++, s2++;
    80205da6:	0505                	addi	a0,a0,1
    80205da8:	0585                	addi	a1,a1,1
    while (n-- > 0) {
    80205daa:	fed518e3          	bne	a0,a3,80205d9a <memcmp+0x14>
    }

    return 0;
    80205dae:	4501                	li	a0,0
    80205db0:	a019                	j	80205db6 <memcmp+0x30>
            return *s1 - *s2;
    80205db2:	40e7853b          	subw	a0,a5,a4
}
    80205db6:	6422                	ld	s0,8(sp)
    80205db8:	0141                	addi	sp,sp,16
    80205dba:	8082                	ret
    return 0;
    80205dbc:	4501                	li	a0,0
    80205dbe:	bfe5                	j	80205db6 <memcmp+0x30>

0000000080205dc0 <memmove>:

void* memmove(void* dst, const void* src, uint n) {
    80205dc0:	1141                	addi	sp,sp,-16
    80205dc2:	e422                	sd	s0,8(sp)
    80205dc4:	0800                	addi	s0,sp,16
    const char* s;
    char* d;

    if (n == 0)
    80205dc6:	c205                	beqz	a2,80205de6 <memmove+0x26>
        return dst;

    s = src;
    d = dst;
    if (s < d && s + n > d) {
    80205dc8:	02a5e263          	bltu	a1,a0,80205dec <memmove+0x2c>
        s += n;
        d += n;
        while (n-- > 0)
            *--d = *--s;
    } else
        while (n-- > 0)
    80205dcc:	1602                	slli	a2,a2,0x20
    80205dce:	9201                	srli	a2,a2,0x20
    80205dd0:	00c587b3          	add	a5,a1,a2
void* memmove(void* dst, const void* src, uint n) {
    80205dd4:	872a                	mv	a4,a0
            *d++ = *s++;
    80205dd6:	0585                	addi	a1,a1,1
    80205dd8:	0705                	addi	a4,a4,1
    80205dda:	fff5c683          	lbu	a3,-1(a1)
    80205dde:	fed70fa3          	sb	a3,-1(a4)
        while (n-- > 0)
    80205de2:	fef59ae3          	bne	a1,a5,80205dd6 <memmove+0x16>

    return dst;
}
    80205de6:	6422                	ld	s0,8(sp)
    80205de8:	0141                	addi	sp,sp,16
    80205dea:	8082                	ret
    if (s < d && s + n > d) {
    80205dec:	02061693          	slli	a3,a2,0x20
    80205df0:	9281                	srli	a3,a3,0x20
    80205df2:	00d58733          	add	a4,a1,a3
    80205df6:	fce57be3          	bgeu	a0,a4,80205dcc <memmove+0xc>
        d += n;
    80205dfa:	96aa                	add	a3,a3,a0
        while (n-- > 0)
    80205dfc:	fff6079b          	addiw	a5,a2,-1
    80205e00:	1782                	slli	a5,a5,0x20
    80205e02:	9381                	srli	a5,a5,0x20
    80205e04:	fff7c793          	not	a5,a5
    80205e08:	97ba                	add	a5,a5,a4
            *--d = *--s;
    80205e0a:	177d                	addi	a4,a4,-1
    80205e0c:	16fd                	addi	a3,a3,-1
    80205e0e:	00074603          	lbu	a2,0(a4)
    80205e12:	00c68023          	sb	a2,0(a3)
        while (n-- > 0)
    80205e16:	fee79ae3          	bne	a5,a4,80205e0a <memmove+0x4a>
    80205e1a:	b7f1                	j	80205de6 <memmove+0x26>

0000000080205e1c <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void* memcpy(void* dst, const void* src, uint n) {
    80205e1c:	1141                	addi	sp,sp,-16
    80205e1e:	e406                	sd	ra,8(sp)
    80205e20:	e022                	sd	s0,0(sp)
    80205e22:	0800                	addi	s0,sp,16
    return memmove(dst, src, n);
    80205e24:	00000097          	auipc	ra,0x0
    80205e28:	f9c080e7          	jalr	-100(ra) # 80205dc0 <memmove>
}
    80205e2c:	60a2                	ld	ra,8(sp)
    80205e2e:	6402                	ld	s0,0(sp)
    80205e30:	0141                	addi	sp,sp,16
    80205e32:	8082                	ret

0000000080205e34 <strncmp>:

int strncmp(const char* p, const char* q, uint n) {
    80205e34:	1141                	addi	sp,sp,-16
    80205e36:	e422                	sd	s0,8(sp)
    80205e38:	0800                	addi	s0,sp,16
    while (n > 0 && *p && *p == *q)
    80205e3a:	ce11                	beqz	a2,80205e56 <strncmp+0x22>
    80205e3c:	00054783          	lbu	a5,0(a0)
    80205e40:	cf89                	beqz	a5,80205e5a <strncmp+0x26>
    80205e42:	0005c703          	lbu	a4,0(a1)
    80205e46:	00f71a63          	bne	a4,a5,80205e5a <strncmp+0x26>
        n--, p++, q++;
    80205e4a:	367d                	addiw	a2,a2,-1
    80205e4c:	0505                	addi	a0,a0,1
    80205e4e:	0585                	addi	a1,a1,1
    while (n > 0 && *p && *p == *q)
    80205e50:	f675                	bnez	a2,80205e3c <strncmp+0x8>
    if (n == 0)
        return 0;
    80205e52:	4501                	li	a0,0
    80205e54:	a809                	j	80205e66 <strncmp+0x32>
    80205e56:	4501                	li	a0,0
    80205e58:	a039                	j	80205e66 <strncmp+0x32>
    if (n == 0)
    80205e5a:	ca09                	beqz	a2,80205e6c <strncmp+0x38>
    return (uchar)*p - (uchar)*q;
    80205e5c:	00054503          	lbu	a0,0(a0)
    80205e60:	0005c783          	lbu	a5,0(a1)
    80205e64:	9d1d                	subw	a0,a0,a5
}
    80205e66:	6422                	ld	s0,8(sp)
    80205e68:	0141                	addi	sp,sp,16
    80205e6a:	8082                	ret
        return 0;
    80205e6c:	4501                	li	a0,0
    80205e6e:	bfe5                	j	80205e66 <strncmp+0x32>

0000000080205e70 <strncpy>:

char* strncpy(char* s, const char* t, int n) {
    80205e70:	1141                	addi	sp,sp,-16
    80205e72:	e422                	sd	s0,8(sp)
    80205e74:	0800                	addi	s0,sp,16
    char* os;

    os = s;
    while (n-- > 0 && (*s++ = *t++) != 0)
    80205e76:	872a                	mv	a4,a0
    80205e78:	8832                	mv	a6,a2
    80205e7a:	367d                	addiw	a2,a2,-1
    80205e7c:	01005963          	blez	a6,80205e8e <strncpy+0x1e>
    80205e80:	0705                	addi	a4,a4,1
    80205e82:	0005c783          	lbu	a5,0(a1)
    80205e86:	fef70fa3          	sb	a5,-1(a4)
    80205e8a:	0585                	addi	a1,a1,1
    80205e8c:	f7f5                	bnez	a5,80205e78 <strncpy+0x8>
        ;
    while (n-- > 0)
    80205e8e:	86ba                	mv	a3,a4
    80205e90:	00c05c63          	blez	a2,80205ea8 <strncpy+0x38>
        *s++ = 0;
    80205e94:	0685                	addi	a3,a3,1
    80205e96:	fe068fa3          	sb	zero,-1(a3)
    while (n-- > 0)
    80205e9a:	40d707bb          	subw	a5,a4,a3
    80205e9e:	37fd                	addiw	a5,a5,-1
    80205ea0:	010787bb          	addw	a5,a5,a6
    80205ea4:	fef048e3          	bgtz	a5,80205e94 <strncpy+0x24>
    return os;
}
    80205ea8:	6422                	ld	s0,8(sp)
    80205eaa:	0141                	addi	sp,sp,16
    80205eac:	8082                	ret

0000000080205eae <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char* safestrcpy(char* s, const char* t, int n) {
    80205eae:	1141                	addi	sp,sp,-16
    80205eb0:	e422                	sd	s0,8(sp)
    80205eb2:	0800                	addi	s0,sp,16
    char* os;

    os = s;
    if (n <= 0)
    80205eb4:	02c05363          	blez	a2,80205eda <safestrcpy+0x2c>
    80205eb8:	fff6069b          	addiw	a3,a2,-1
    80205ebc:	1682                	slli	a3,a3,0x20
    80205ebe:	9281                	srli	a3,a3,0x20
    80205ec0:	96ae                	add	a3,a3,a1
    80205ec2:	87aa                	mv	a5,a0
        return os;
    while (--n > 0 && (*s++ = *t++) != 0)
    80205ec4:	00d58963          	beq	a1,a3,80205ed6 <safestrcpy+0x28>
    80205ec8:	0585                	addi	a1,a1,1
    80205eca:	0785                	addi	a5,a5,1
    80205ecc:	fff5c703          	lbu	a4,-1(a1)
    80205ed0:	fee78fa3          	sb	a4,-1(a5)
    80205ed4:	fb65                	bnez	a4,80205ec4 <safestrcpy+0x16>
        ;
    *s = 0;
    80205ed6:	00078023          	sb	zero,0(a5)
    return os;
}
    80205eda:	6422                	ld	s0,8(sp)
    80205edc:	0141                	addi	sp,sp,16
    80205ede:	8082                	ret

0000000080205ee0 <strlen>:

int strlen(const char* s) {
    80205ee0:	1141                	addi	sp,sp,-16
    80205ee2:	e422                	sd	s0,8(sp)
    80205ee4:	0800                	addi	s0,sp,16
    int n;

    for (n = 0; s[n]; n++)
    80205ee6:	00054783          	lbu	a5,0(a0)
    80205eea:	cf91                	beqz	a5,80205f06 <strlen+0x26>
    80205eec:	0505                	addi	a0,a0,1
    80205eee:	87aa                	mv	a5,a0
    80205ef0:	4685                	li	a3,1
    80205ef2:	9e89                	subw	a3,a3,a0
    80205ef4:	00f6853b          	addw	a0,a3,a5
    80205ef8:	0785                	addi	a5,a5,1
    80205efa:	fff7c703          	lbu	a4,-1(a5)
    80205efe:	fb7d                	bnez	a4,80205ef4 <strlen+0x14>
        ;
    return n;
}
    80205f00:	6422                	ld	s0,8(sp)
    80205f02:	0141                	addi	sp,sp,16
    80205f04:	8082                	ret
    for (n = 0; s[n]; n++)
    80205f06:	4501                	li	a0,0
    80205f08:	bfe5                	j	80205f00 <strlen+0x20>

0000000080205f0a <strchr>:

char* strchr(const char* s, char c) {
    80205f0a:	1141                	addi	sp,sp,-16
    80205f0c:	e422                	sd	s0,8(sp)
    80205f0e:	0800                	addi	s0,sp,16
    for (; *s; s++)
    80205f10:	00054783          	lbu	a5,0(a0)
    80205f14:	cb99                	beqz	a5,80205f2a <strchr+0x20>
        if (*s == c)
    80205f16:	00f58763          	beq	a1,a5,80205f24 <strchr+0x1a>
    for (; *s; s++)
    80205f1a:	0505                	addi	a0,a0,1
    80205f1c:	00054783          	lbu	a5,0(a0)
    80205f20:	fbfd                	bnez	a5,80205f16 <strchr+0xc>
            return (char*)s;
    return 0;
    80205f22:	4501                	li	a0,0
}
    80205f24:	6422                	ld	s0,8(sp)
    80205f26:	0141                	addi	sp,sp,16
    80205f28:	8082                	ret
    return 0;
    80205f2a:	4501                	li	a0,0
    80205f2c:	bfe5                	j	80205f24 <strchr+0x1a>

0000000080205f2e <snstr>:

// convert wide char string into uchar string
void snstr(char* dst, wchar const* src, int len) {
    80205f2e:	1141                	addi	sp,sp,-16
    80205f30:	e422                	sd	s0,8(sp)
    80205f32:	0800                	addi	s0,sp,16
    while (len-- && *src) {
    80205f34:	fff6071b          	addiw	a4,a2,-1
    80205f38:	02061693          	slli	a3,a2,0x20
    80205f3c:	9281                	srli	a3,a3,0x20
    80205f3e:	96aa                	add	a3,a3,a0
    80205f40:	c61d                	beqz	a2,80205f6e <snstr+0x40>
    80205f42:	0005d783          	lhu	a5,0(a1)
    80205f46:	cb89                	beqz	a5,80205f58 <snstr+0x2a>
        *dst++ = (uchar)(*src & 0xff);
    80205f48:	0505                	addi	a0,a0,1
    80205f4a:	fef50fa3          	sb	a5,-1(a0)
        src++;
    80205f4e:	0589                	addi	a1,a1,2
    while (len-- && *src) {
    80205f50:	377d                	addiw	a4,a4,-1
    80205f52:	fed518e3          	bne	a0,a3,80205f42 <snstr+0x14>
        *dst++ = (uchar)(*src & 0xff);
    80205f56:	8536                	mv	a0,a3
    }
    while (len-- > 0)
    80205f58:	02071793          	slli	a5,a4,0x20
    80205f5c:	9381                	srli	a5,a5,0x20
    80205f5e:	97aa                	add	a5,a5,a0
    80205f60:	00e05763          	blez	a4,80205f6e <snstr+0x40>
        *dst++ = 0;
    80205f64:	0505                	addi	a0,a0,1
    80205f66:	fe050fa3          	sb	zero,-1(a0)
    while (len-- > 0)
    80205f6a:	fea79de3          	bne	a5,a0,80205f64 <snstr+0x36>
    80205f6e:	6422                	ld	s0,8(sp)
    80205f70:	0141                	addi	sp,sp,16
    80205f72:	8082                	ret

0000000080205f74 <fsAlloc>:
#include <Driver.h>
#include <file.h>
FileSystem fileSystem[32];

int fsAlloc(FileSystem **fs) {
    for (int i = 0; i < 32; i++) {
    80205f74:	003fc717          	auipc	a4,0x3fc
    80205f78:	05470713          	addi	a4,a4,84 # 80601fc8 <fileSystem>
    80205f7c:	4781                	li	a5,0
    80205f7e:	02000613          	li	a2,32
        if (!fileSystem[i].valid) {
    80205f82:	00074683          	lbu	a3,0(a4)
    80205f86:	ca81                	beqz	a3,80205f96 <fsAlloc+0x22>
    for (int i = 0; i < 32; i++) {
    80205f88:	2785                	addiw	a5,a5,1
    80205f8a:	20070713          	addi	a4,a4,512
    80205f8e:	fec79ae3          	bne	a5,a2,80205f82 <fsAlloc+0xe>
            memset(*fs, 0, sizeof(FileSystem));
            fileSystem[i].valid = true;
            return 0;
        }
    }
    return -1;
    80205f92:	557d                	li	a0,-1
}
    80205f94:	8082                	ret
int fsAlloc(FileSystem **fs) {
    80205f96:	1101                	addi	sp,sp,-32
    80205f98:	ec06                	sd	ra,24(sp)
    80205f9a:	e822                	sd	s0,16(sp)
    80205f9c:	e426                	sd	s1,8(sp)
    80205f9e:	1000                	addi	s0,sp,32
            *fs = &fileSystem[i];
    80205fa0:	07a6                	slli	a5,a5,0x9
    80205fa2:	003fc717          	auipc	a4,0x3fc
    80205fa6:	02670713          	addi	a4,a4,38 # 80601fc8 <fileSystem>
    80205faa:	00e784b3          	add	s1,a5,a4
    80205fae:	e104                	sd	s1,0(a0)
            memset(*fs, 0, sizeof(FileSystem));
    80205fb0:	20000613          	li	a2,512
    80205fb4:	4581                	li	a1,0
    80205fb6:	8526                	mv	a0,s1
    80205fb8:	00000097          	auipc	ra,0x0
    80205fbc:	dac080e7          	jalr	-596(ra) # 80205d64 <memset>
            fileSystem[i].valid = true;
    80205fc0:	4785                	li	a5,1
    80205fc2:	00f48023          	sb	a5,0(s1)
            return 0;
    80205fc6:	4501                	li	a0,0
}
    80205fc8:	60e2                	ld	ra,24(sp)
    80205fca:	6442                	ld	s0,16(sp)
    80205fcc:	64a2                	ld	s1,8(sp)
    80205fce:	6105                	addi	sp,sp,32
    80205fd0:	8082                	ret

0000000080205fd2 <fatInit>:

DirentCache direntCache;
// fs's read, name, mount_point should be inited
int fatInit(FileSystem *fs) {
    80205fd2:	1101                	addi	sp,sp,-32
    80205fd4:	ec06                	sd	ra,24(sp)
    80205fd6:	e822                	sd	s0,16(sp)
    80205fd8:	e426                	sd	s1,8(sp)
    80205fda:	e04a                	sd	s2,0(sp)
    80205fdc:	1000                	addi	s0,sp,32
    80205fde:	84aa                	mv	s1,a0
    // printf("[FAT32 init]fat init begin\n");
    struct buf *b = fs->read(fs, 0);
    80205fe0:	1f853783          	ld	a5,504(a0)
    80205fe4:	4581                	li	a1,0
    80205fe6:	9782                	jalr	a5
    if (b == 0) {
    80205fe8:	c56d                	beqz	a0,802060d2 <fatInit+0x100>
    80205fea:	892a                	mv	s2,a0
        panic("");
    }
    if (strncmp((char const*)(b->data + 82), "FAT32", 5)) {
    80205fec:	4615                	li	a2,5
    80205fee:	00007597          	auipc	a1,0x7
    80205ff2:	e1a58593          	addi	a1,a1,-486 # 8020ce08 <__func__.0+0x20>
    80205ff6:	0aa50513          	addi	a0,a0,170
    80205ffa:	00000097          	auipc	ra,0x0
    80205ffe:	e3a080e7          	jalr	-454(ra) # 80205e34 <strncmp>
    80206002:	e96d                	bnez	a0,802060f4 <fatInit+0x122>
        panic("not FAT32 volume");
        return -1;
    }
    memmove(&fs->superBlock.bpb.byts_per_sec, b->data + 11, 2); 
    80206004:	4609                	li	a2,2
    80206006:	06390593          	addi	a1,s2,99
    8020600a:	05448513          	addi	a0,s1,84
    8020600e:	00000097          	auipc	ra,0x0
    80206012:	db2080e7          	jalr	-590(ra) # 80205dc0 <memmove>
    fs->superBlock.bpb.sec_per_clus = *(b->data + 13);
    80206016:	06594683          	lbu	a3,101(s2)
    8020601a:	04d48b23          	sb	a3,86(s1)
    fs->superBlock.bpb.rsvd_sec_cnt = *(uint16*)(b->data + 14);
    8020601e:	06695603          	lhu	a2,102(s2)
    80206022:	04c49c23          	sh	a2,88(s1)
    fs->superBlock.bpb.fat_cnt = *(b->data + 16);
    80206026:	06894703          	lbu	a4,104(s2)
    8020602a:	04e48d23          	sb	a4,90(s1)
    fs->superBlock.bpb.hidd_sec = *(uint32*)(b->data + 28);
    8020602e:	07492783          	lw	a5,116(s2)
    80206032:	ccfc                	sw	a5,92(s1)
    fs->superBlock.bpb.tot_sec = *(uint32*)(b->data + 32);
    80206034:	07892783          	lw	a5,120(s2)
    80206038:	d0bc                	sw	a5,96(s1)
    fs->superBlock.bpb.fat_sz = *(uint32*)(b->data + 36);
    8020603a:	07c92583          	lw	a1,124(s2)
    8020603e:	d0ec                	sw	a1,100(s1)
    fs->superBlock.bpb.root_clus = *(uint32*)(b->data + 44);
    80206040:	08492503          	lw	a0,132(s2)
    80206044:	d4a8                	sw	a0,104(s1)
    fs->superBlock.first_data_sec = fs->superBlock.bpb.rsvd_sec_cnt + fs->superBlock.bpb.fat_cnt * fs->superBlock.bpb.fat_sz;
    80206046:	02b7073b          	mulw	a4,a4,a1
    8020604a:	9f31                	addw	a4,a4,a2
    8020604c:	c0f8                	sw	a4,68(s1)
    fs->superBlock.data_sec_cnt = fs->superBlock.bpb.tot_sec - fs->superBlock.first_data_sec;
    8020604e:	9f99                	subw	a5,a5,a4
    80206050:	c4bc                	sw	a5,72(s1)
    fs->superBlock.data_clus_cnt = fs->superBlock.data_sec_cnt / fs->superBlock.bpb.sec_per_clus;
    80206052:	02d7d7bb          	divuw	a5,a5,a3
    80206056:	c4fc                	sw	a5,76(s1)
    fs->superBlock.byts_per_clus = fs->superBlock.bpb.sec_per_clus * fs->superBlock.bpb.byts_per_sec;
    80206058:	0544d783          	lhu	a5,84(s1)
    8020605c:	02d787bb          	mulw	a5,a5,a3
    80206060:	c8bc                	sw	a5,80(s1)
    brelse(b);
    80206062:	854a                	mv	a0,s2
    80206064:	00001097          	auipc	ra,0x1
    80206068:	78e080e7          	jalr	1934(ra) # 802077f2 <brelse>
    printf("[FAT32 init]fat_sz: %d\n", fat.bpb.fat_sz);
    printf("[FAT32 init]first_data_sec: %d\n", fat.first_data_sec);
#endif

    // make sure that byts_per_sec has the same value with BSIZE
    if (BSIZE != fs->superBlock.bpb.byts_per_sec)
    8020606c:	0544d703          	lhu	a4,84(s1)
    80206070:	20000793          	li	a5,512
    80206074:	0af71163          	bne	a4,a5,80206116 <fatInit+0x144>
        panic("byts_per_sec != BSIZE");
    memset(&fs->root, 0, sizeof(fs->root));
    80206078:	17000613          	li	a2,368
    8020607c:	4581                	li	a1,0
    8020607e:	07048513          	addi	a0,s1,112
    80206082:	00000097          	auipc	ra,0x0
    80206086:	ce2080e7          	jalr	-798(ra) # 80205d64 <memset>
    initsleeplock(&fs->root.lock, "entry");
    8020608a:	00007597          	auipc	a1,0x7
    8020608e:	db658593          	addi	a1,a1,-586 # 8020ce40 <__func__.0+0x58>
    80206092:	1b048513          	addi	a0,s1,432
    80206096:	00000097          	auipc	ra,0x0
    8020609a:	8a0080e7          	jalr	-1888(ra) # 80205936 <initsleeplock>
    fs->root.attribute = (ATTR_DIRECTORY | ATTR_SYSTEM);
    8020609e:	47d1                	li	a5,20
    802060a0:	16f48823          	sb	a5,368(s1)
    fs->root.first_clus = fs->root.cur_clus = fs->superBlock.bpb.root_clus;
    802060a4:	54bc                	lw	a5,104(s1)
    802060a6:	16f4ae23          	sw	a5,380(s1)
    802060aa:	16f4aa23          	sw	a5,372(s1)
    fs->root.valid = 1;
    802060ae:	4785                	li	a5,1
    802060b0:	18f49923          	sh	a5,402(s1)
    fs->root.filename[0]='/';
    802060b4:	02f00713          	li	a4,47
    802060b8:	06e48823          	sb	a4,112(s1)
    fs->root.fileSystem = fs;
    802060bc:	1894b423          	sd	s1,392(s1)
    fs->root.ref = 1;
    802060c0:	1af4a023          	sw	a5,416(s1)
    
    // printf("[FAT32 init]fat init end\n");
    return 0;
}
    802060c4:	4501                	li	a0,0
    802060c6:	60e2                	ld	ra,24(sp)
    802060c8:	6442                	ld	s0,16(sp)
    802060ca:	64a2                	ld	s1,8(sp)
    802060cc:	6902                	ld	s2,0(sp)
    802060ce:	6105                	addi	sp,sp,32
    802060d0:	8082                	ret
        panic("");
    802060d2:	00006697          	auipc	a3,0x6
    802060d6:	5fe68693          	addi	a3,a3,1534 # 8020c6d0 <__func__.1+0x100>
    802060da:	00007617          	auipc	a2,0x7
    802060de:	19660613          	addi	a2,a2,406 # 8020d270 <__func__.0>
    802060e2:	45ed                	li	a1,27
    802060e4:	00007517          	auipc	a0,0x7
    802060e8:	d1450513          	addi	a0,a0,-748 # 8020cdf8 <__func__.0+0x10>
    802060ec:	ffffb097          	auipc	ra,0xffffb
    802060f0:	a60080e7          	jalr	-1440(ra) # 80200b4c <_panic_>
        panic("not FAT32 volume");
    802060f4:	00007697          	auipc	a3,0x7
    802060f8:	d1c68693          	addi	a3,a3,-740 # 8020ce10 <__func__.0+0x28>
    802060fc:	00007617          	auipc	a2,0x7
    80206100:	17460613          	addi	a2,a2,372 # 8020d270 <__func__.0>
    80206104:	45f9                	li	a1,30
    80206106:	00007517          	auipc	a0,0x7
    8020610a:	cf250513          	addi	a0,a0,-782 # 8020cdf8 <__func__.0+0x10>
    8020610e:	ffffb097          	auipc	ra,0xffffb
    80206112:	a3e080e7          	jalr	-1474(ra) # 80200b4c <_panic_>
        panic("byts_per_sec != BSIZE");
    80206116:	00007697          	auipc	a3,0x7
    8020611a:	d1268693          	addi	a3,a3,-750 # 8020ce28 <__func__.0+0x40>
    8020611e:	00007617          	auipc	a2,0x7
    80206122:	15260613          	addi	a2,a2,338 # 8020d270 <__func__.0>
    80206126:	03b00593          	li	a1,59
    8020612a:	00007517          	auipc	a0,0x7
    8020612e:	cce50513          	addi	a0,a0,-818 # 8020cdf8 <__func__.0+0x10>
    80206132:	ffffb097          	auipc	ra,0xffffb
    80206136:	a1a080e7          	jalr	-1510(ra) # 80200b4c <_panic_>

000000008020613a <initDirentCache>:

FileSystem rootFileSystem;
void initDirentCache() {
    8020613a:	7179                	addi	sp,sp,-48
    8020613c:	f406                	sd	ra,40(sp)
    8020613e:	f022                	sd	s0,32(sp)
    80206140:	ec26                	sd	s1,24(sp)
    80206142:	e84a                	sd	s2,16(sp)
    80206144:	e44e                	sd	s3,8(sp)
    80206146:	1800                	addi	s0,sp,48
    initLock(&direntCache.lock, "ecache");
    80206148:	00007597          	auipc	a1,0x7
    8020614c:	d0058593          	addi	a1,a1,-768 # 8020ce48 <__func__.0+0x60>
    80206150:	003f7517          	auipc	a0,0x3f7
    80206154:	68050513          	addi	a0,a0,1664 # 805fd7d0 <direntCache>
    80206158:	00000097          	auipc	ra,0x0
    8020615c:	90c080e7          	jalr	-1780(ra) # 80205a64 <initLock>
    struct file* file = filealloc();
    80206160:	00003097          	auipc	ra,0x3
    80206164:	3a6080e7          	jalr	934(ra) # 80209506 <filealloc>
    rootFileSystem.image = file;
    80206168:	003f7797          	auipc	a5,0x3f7
    8020616c:	64a7b423          	sd	a0,1608(a5) # 805fd7b0 <rootFileSystem+0x1e0>
    file->type = FD_DEVICE;
    80206170:	478d                	li	a5,3
    80206172:	c11c                	sw	a5,0(a0)
    file->major = 0;
    80206174:	02051223          	sh	zero,36(a0)
    file->readable = true;
    80206178:	4785                	li	a5,1
    8020617a:	00f50423          	sb	a5,8(a0)
    file->writable = true;
    8020617e:	00f504a3          	sb	a5,9(a0)
   // fs->root.prev = &fs->root;
   // fs->root.next = &fs->root;
    for (struct dirent* de = direntCache.entries;
         de < direntCache.entries + ENTRY_CACHE_NUM; de++) {
    80206182:	003f7497          	auipc	s1,0x3f7
    80206186:	7a648493          	addi	s1,s1,1958 # 805fd928 <direntCache+0x158>
    8020618a:	003fc997          	auipc	s3,0x3fc
    8020618e:	f7e98993          	addi	s3,s3,-130 # 80602108 <fileSystem+0x140>
        de->ref = 0;
        de->dirty = 0;
        de->parent = 0;
     //   de->next = fs->root.next;
     //   de->prev = &fs->root;
        initsleeplock(&de->lock, "entry");
    80206192:	00007917          	auipc	s2,0x7
    80206196:	cae90913          	addi	s2,s2,-850 # 8020ce40 <__func__.0+0x58>
        de->dev = 0;
    8020619a:	fe048023          	sb	zero,-32(s1)
        de->valid = 0;
    8020619e:	fe049123          	sh	zero,-30(s1)
        de->ref = 0;
    802061a2:	fe04a823          	sw	zero,-16(s1)
        de->dirty = 0;
    802061a6:	fe0480a3          	sb	zero,-31(s1)
        de->parent = 0;
    802061aa:	fe04bc23          	sd	zero,-8(s1)
        initsleeplock(&de->lock, "entry");
    802061ae:	85ca                	mv	a1,s2
    802061b0:	8526                	mv	a0,s1
    802061b2:	fffff097          	auipc	ra,0xfffff
    802061b6:	784080e7          	jalr	1924(ra) # 80205936 <initsleeplock>
         de < direntCache.entries + ENTRY_CACHE_NUM; de++) {
    802061ba:	17048493          	addi	s1,s1,368
    802061be:	fd349ee3          	bne	s1,s3,8020619a <initDirentCache+0x60>
     //   fs->root.next->prev = de;
     //   fs->root.next = de;
    }
    802061c2:	70a2                	ld	ra,40(sp)
    802061c4:	7402                	ld	s0,32(sp)
    802061c6:	64e2                	ld	s1,24(sp)
    802061c8:	6942                	ld	s2,16(sp)
    802061ca:	69a2                	ld	s3,8(sp)
    802061cc:	6145                	addi	sp,sp,48
    802061ce:	8082                	ret

00000000802061d0 <argfd>:
#include <FileSystem.h>
#include <Iovec.h>

// Fetch the nth word-sized system call argument as a file descriptor
// and return both the descriptor and the corresponding struct file.
int argfd(int n, int* pfd, struct file** pf) {
    802061d0:	7179                	addi	sp,sp,-48
    802061d2:	f406                	sd	ra,40(sp)
    802061d4:	f022                	sd	s0,32(sp)
    802061d6:	ec26                	sd	s1,24(sp)
    802061d8:	e84a                	sd	s2,16(sp)
    802061da:	1800                	addi	s0,sp,48
    802061dc:	892e                	mv	s2,a1
    802061de:	84b2                	mv	s1,a2
    int fd;
    struct file* f;

    if (argint(n, &fd) < 0)
    802061e0:	fdc40593          	addi	a1,s0,-36
    802061e4:	ffffe097          	auipc	ra,0xffffe
    802061e8:	b1e080e7          	jalr	-1250(ra) # 80203d02 <argint>
    802061ec:	04054163          	bltz	a0,8020622e <argfd+0x5e>
        return -1;
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL)
    802061f0:	fdc42703          	lw	a4,-36(s0)
    802061f4:	07f00793          	li	a5,127
    802061f8:	02e7ed63          	bltu	a5,a4,80206232 <argfd+0x62>
    802061fc:	ffffc097          	auipc	ra,0xffffc
    80206200:	7b4080e7          	jalr	1972(ra) # 802029b0 <myproc>
    80206204:	fdc42703          	lw	a4,-36(s0)
    80206208:	03670793          	addi	a5,a4,54
    8020620c:	078e                	slli	a5,a5,0x3
    8020620e:	953e                	add	a0,a0,a5
    80206210:	611c                	ld	a5,0(a0)
    80206212:	c395                	beqz	a5,80206236 <argfd+0x66>
        return -1;
    if (pfd)
    80206214:	00090463          	beqz	s2,8020621c <argfd+0x4c>
        *pfd = fd;
    80206218:	00e92023          	sw	a4,0(s2)
    if (pf)
        *pf = f;
    return 0;
    8020621c:	4501                	li	a0,0
    if (pf)
    8020621e:	c091                	beqz	s1,80206222 <argfd+0x52>
        *pf = f;
    80206220:	e09c                	sd	a5,0(s1)
}
    80206222:	70a2                	ld	ra,40(sp)
    80206224:	7402                	ld	s0,32(sp)
    80206226:	64e2                	ld	s1,24(sp)
    80206228:	6942                	ld	s2,16(sp)
    8020622a:	6145                	addi	sp,sp,48
    8020622c:	8082                	ret
        return -1;
    8020622e:	557d                	li	a0,-1
    80206230:	bfcd                	j	80206222 <argfd+0x52>
        return -1;
    80206232:	557d                	li	a0,-1
    80206234:	b7fd                	j	80206222 <argfd+0x52>
    80206236:	557d                	li	a0,-1
    80206238:	b7ed                	j	80206222 <argfd+0x52>

000000008020623a <fdalloc>:

// Allocate a file descriptor for the given file.
// Takes over file reference from caller on success.
int fdalloc(struct file* f) {
    8020623a:	1101                	addi	sp,sp,-32
    8020623c:	ec06                	sd	ra,24(sp)
    8020623e:	e822                	sd	s0,16(sp)
    80206240:	e426                	sd	s1,8(sp)
    80206242:	1000                	addi	s0,sp,32
    80206244:	84aa                	mv	s1,a0
    int fd;
    struct Process* p = myproc();
    80206246:	ffffc097          	auipc	ra,0xffffc
    8020624a:	76a080e7          	jalr	1898(ra) # 802029b0 <myproc>
    8020624e:	862a                	mv	a2,a0
    
    for (fd = 0; fd < NOFILE; fd++) {
    80206250:	1b050793          	addi	a5,a0,432
    80206254:	4501                	li	a0,0
    80206256:	08000693          	li	a3,128
        if (p->ofile[fd] == 0) {
    8020625a:	6398                	ld	a4,0(a5)
    8020625c:	c719                	beqz	a4,8020626a <fdalloc+0x30>
    for (fd = 0; fd < NOFILE; fd++) {
    8020625e:	2505                	addiw	a0,a0,1
    80206260:	07a1                	addi	a5,a5,8
    80206262:	fed51ce3          	bne	a0,a3,8020625a <fdalloc+0x20>
            p->ofile[fd] = f;
            return fd;
        }
    }
    return -1;
    80206266:	557d                	li	a0,-1
    80206268:	a031                	j	80206274 <fdalloc+0x3a>
            p->ofile[fd] = f;
    8020626a:	03650793          	addi	a5,a0,54
    8020626e:	078e                	slli	a5,a5,0x3
    80206270:	963e                	add	a2,a2,a5
    80206272:	e204                	sd	s1,0(a2)
}
    80206274:	60e2                	ld	ra,24(sp)
    80206276:	6442                	ld	s0,16(sp)
    80206278:	64a2                	ld	s1,8(sp)
    8020627a:	6105                	addi	sp,sp,32
    8020627c:	8082                	ret

000000008020627e <syscallDup>:

void syscallDup(void) {
    8020627e:	7179                	addi	sp,sp,-48
    80206280:	f406                	sd	ra,40(sp)
    80206282:	f022                	sd	s0,32(sp)
    80206284:	ec26                	sd	s1,24(sp)
    80206286:	e84a                	sd	s2,16(sp)
    80206288:	e44e                	sd	s3,8(sp)
    8020628a:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    8020628c:	00000097          	auipc	ra,0x0
    80206290:	918080e7          	jalr	-1768(ra) # 80205ba4 <getHartTrapFrame>
    80206294:	892a                	mv	s2,a0
    struct file* f;
    int fd = tf->a0;
    80206296:	7924                	ld	s1,112(a0)
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206298:	0004871b          	sext.w	a4,s1
    8020629c:	07f00793          	li	a5,127
    802062a0:	00e7fc63          	bgeu	a5,a4,802062b8 <syscallDup+0x3a>
        tf->a0 = -1;
        return;
    802062a4:	57fd                	li	a5,-1
        tf->a0 = -1;
    802062a6:	06f93823          	sd	a5,112(s2)
        return;
    }

    filedup(f);
    tf->a0 = fd;
}
    802062aa:	70a2                	ld	ra,40(sp)
    802062ac:	7402                	ld	s0,32(sp)
    802062ae:	64e2                	ld	s1,24(sp)
    802062b0:	6942                	ld	s2,16(sp)
    802062b2:	69a2                	ld	s3,8(sp)
    802062b4:	6145                	addi	sp,sp,48
    802062b6:	8082                	ret
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    802062b8:	ffffc097          	auipc	ra,0xffffc
    802062bc:	6f8080e7          	jalr	1784(ra) # 802029b0 <myproc>
    802062c0:	2481                	sext.w	s1,s1
    802062c2:	03648493          	addi	s1,s1,54
    802062c6:	048e                	slli	s1,s1,0x3
    802062c8:	9526                	add	a0,a0,s1
    802062ca:	00053983          	ld	s3,0(a0)
    802062ce:	fc098be3          	beqz	s3,802062a4 <syscallDup+0x26>
    if ((fd = fdalloc(f)) < 0) {
    802062d2:	854e                	mv	a0,s3
    802062d4:	00000097          	auipc	ra,0x0
    802062d8:	f66080e7          	jalr	-154(ra) # 8020623a <fdalloc>
    802062dc:	84aa                	mv	s1,a0
    802062de:	57fd                	li	a5,-1
    802062e0:	fc0543e3          	bltz	a0,802062a6 <syscallDup+0x28>
    filedup(f);
    802062e4:	854e                	mv	a0,s3
    802062e6:	00003097          	auipc	ra,0x3
    802062ea:	28a080e7          	jalr	650(ra) # 80209570 <filedup>
    tf->a0 = fd;
    802062ee:	87a6                	mv	a5,s1
    802062f0:	bf5d                	j	802062a6 <syscallDup+0x28>

00000000802062f2 <syscallDupAndSet>:

void syscallDupAndSet(void) {
    802062f2:	7179                	addi	sp,sp,-48
    802062f4:	f406                	sd	ra,40(sp)
    802062f6:	f022                	sd	s0,32(sp)
    802062f8:	ec26                	sd	s1,24(sp)
    802062fa:	e84a                	sd	s2,16(sp)
    802062fc:	e44e                	sd	s3,8(sp)
    802062fe:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    80206300:	00000097          	auipc	ra,0x0
    80206304:	8a4080e7          	jalr	-1884(ra) # 80205ba4 <getHartTrapFrame>
    80206308:	84aa                	mv	s1,a0
    struct file* f;
    int fd = tf->a0, fdnew = tf->a1;
    8020630a:	07053903          	ld	s2,112(a0)
    8020630e:	07853983          	ld	s3,120(a0)

    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206312:	0009071b          	sext.w	a4,s2
    80206316:	07f00793          	li	a5,127
    8020631a:	00e7fb63          	bgeu	a5,a4,80206330 <syscallDupAndSet+0x3e>
        tf->a0 = -1;
        return;
    8020631e:	57fd                	li	a5,-1
        tf->a0 = -1;
    80206320:	f8bc                	sd	a5,112(s1)
    }

    myproc()->ofile[fdnew] = f;
    filedup(f);
    tf->a0 = fdnew;
}
    80206322:	70a2                	ld	ra,40(sp)
    80206324:	7402                	ld	s0,32(sp)
    80206326:	64e2                	ld	s1,24(sp)
    80206328:	6942                	ld	s2,16(sp)
    8020632a:	69a2                	ld	s3,8(sp)
    8020632c:	6145                	addi	sp,sp,48
    8020632e:	8082                	ret
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206330:	ffffc097          	auipc	ra,0xffffc
    80206334:	680080e7          	jalr	1664(ra) # 802029b0 <myproc>
    80206338:	2901                	sext.w	s2,s2
    8020633a:	03690913          	addi	s2,s2,54
    8020633e:	090e                	slli	s2,s2,0x3
    80206340:	954a                	add	a0,a0,s2
    80206342:	00053903          	ld	s2,0(a0)
    80206346:	fc090ce3          	beqz	s2,8020631e <syscallDupAndSet+0x2c>
    if (fdnew < 0 || fdnew >= NOFILE || myproc()->ofile[fdnew] != NULL) {
    8020634a:	0009879b          	sext.w	a5,s3
    8020634e:	07f00713          	li	a4,127
    80206352:	00f77463          	bgeu	a4,a5,8020635a <syscallDupAndSet+0x68>
        return;
    80206356:	57fd                	li	a5,-1
    80206358:	b7e1                	j	80206320 <syscallDupAndSet+0x2e>
    int fd = tf->a0, fdnew = tf->a1;
    8020635a:	89be                	mv	s3,a5
    if (fdnew < 0 || fdnew >= NOFILE || myproc()->ofile[fdnew] != NULL) {
    8020635c:	ffffc097          	auipc	ra,0xffffc
    80206360:	654080e7          	jalr	1620(ra) # 802029b0 <myproc>
    80206364:	03698793          	addi	a5,s3,54
    80206368:	078e                	slli	a5,a5,0x3
    8020636a:	953e                	add	a0,a0,a5
    8020636c:	611c                	ld	a5,0(a0)
    8020636e:	f7e5                	bnez	a5,80206356 <syscallDupAndSet+0x64>
    myproc()->ofile[fdnew] = f;
    80206370:	ffffc097          	auipc	ra,0xffffc
    80206374:	640080e7          	jalr	1600(ra) # 802029b0 <myproc>
    80206378:	03698793          	addi	a5,s3,54
    8020637c:	078e                	slli	a5,a5,0x3
    8020637e:	953e                	add	a0,a0,a5
    80206380:	01253023          	sd	s2,0(a0)
    filedup(f);
    80206384:	854a                	mv	a0,s2
    80206386:	00003097          	auipc	ra,0x3
    8020638a:	1ea080e7          	jalr	490(ra) # 80209570 <filedup>
    tf->a0 = fdnew;
    8020638e:	87ce                	mv	a5,s3
    80206390:	bf41                	j	80206320 <syscallDupAndSet+0x2e>

0000000080206392 <syscallRead>:

void syscallRead(void) {
    80206392:	7179                	addi	sp,sp,-48
    80206394:	f406                	sd	ra,40(sp)
    80206396:	f022                	sd	s0,32(sp)
    80206398:	ec26                	sd	s1,24(sp)
    8020639a:	e84a                	sd	s2,16(sp)
    8020639c:	e44e                	sd	s3,8(sp)
    8020639e:	e052                	sd	s4,0(sp)
    802063a0:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    802063a2:	00000097          	auipc	ra,0x0
    802063a6:	802080e7          	jalr	-2046(ra) # 80205ba4 <getHartTrapFrame>
    802063aa:	84aa                	mv	s1,a0
    struct file* f;
    int len = tf->a2, fd = tf->a0;
    802063ac:	08053983          	ld	s3,128(a0)
    802063b0:	07053903          	ld	s2,112(a0)
    u64 uva = tf->a1;
    802063b4:	07853a03          	ld	s4,120(a0)

    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    802063b8:	0009071b          	sext.w	a4,s2
    802063bc:	07f00793          	li	a5,127
    802063c0:	00e7fc63          	bgeu	a5,a4,802063d8 <syscallRead+0x46>
        tf->a0 = -1;
        return;
    802063c4:	57fd                	li	a5,-1
        tf->a0 = -1;
    802063c6:	f8bc                	sd	a5,112(s1)
        tf->a0 = -1;
        return;
    }
    
    tf->a0 = fileread(f, uva, len);
}
    802063c8:	70a2                	ld	ra,40(sp)
    802063ca:	7402                	ld	s0,32(sp)
    802063cc:	64e2                	ld	s1,24(sp)
    802063ce:	6942                	ld	s2,16(sp)
    802063d0:	69a2                	ld	s3,8(sp)
    802063d2:	6a02                	ld	s4,0(sp)
    802063d4:	6145                	addi	sp,sp,48
    802063d6:	8082                	ret
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    802063d8:	ffffc097          	auipc	ra,0xffffc
    802063dc:	5d8080e7          	jalr	1496(ra) # 802029b0 <myproc>
    802063e0:	2901                	sext.w	s2,s2
    802063e2:	03690913          	addi	s2,s2,54
    802063e6:	090e                	slli	s2,s2,0x3
    802063e8:	954a                	add	a0,a0,s2
    802063ea:	6108                	ld	a0,0(a0)
    802063ec:	dd61                	beqz	a0,802063c4 <syscallRead+0x32>
    int len = tf->a2, fd = tf->a0;
    802063ee:	0009861b          	sext.w	a2,s3
    if (len < 0) {
    802063f2:	57fd                	li	a5,-1
    802063f4:	fc0649e3          	bltz	a2,802063c6 <syscallRead+0x34>
    tf->a0 = fileread(f, uva, len);
    802063f8:	85d2                	mv	a1,s4
    802063fa:	00003097          	auipc	ra,0x3
    802063fe:	318080e7          	jalr	792(ra) # 80209712 <fileread>
    80206402:	87aa                	mv	a5,a0
    80206404:	b7c9                	j	802063c6 <syscallRead+0x34>

0000000080206406 <syscallWrite>:

void syscallWrite(void) {
    80206406:	7179                	addi	sp,sp,-48
    80206408:	f406                	sd	ra,40(sp)
    8020640a:	f022                	sd	s0,32(sp)
    8020640c:	ec26                	sd	s1,24(sp)
    8020640e:	e84a                	sd	s2,16(sp)
    80206410:	e44e                	sd	s3,8(sp)
    80206412:	e052                	sd	s4,0(sp)
    80206414:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    80206416:	fffff097          	auipc	ra,0xfffff
    8020641a:	78e080e7          	jalr	1934(ra) # 80205ba4 <getHartTrapFrame>
    8020641e:	84aa                	mv	s1,a0
    struct file* f;
    int len = tf->a2, fd = tf->a0;
    80206420:	08053983          	ld	s3,128(a0)
    80206424:	07053903          	ld	s2,112(a0)
    u64 uva = tf->a1;
    80206428:	07853a03          	ld	s4,120(a0)

    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    8020642c:	0009071b          	sext.w	a4,s2
    80206430:	07f00793          	li	a5,127
    80206434:	00e7fc63          	bgeu	a5,a4,8020644c <syscallWrite+0x46>
        tf->a0 = -1;
        return;
    80206438:	57fd                	li	a5,-1
        tf->a0 = -1;
    8020643a:	f8bc                	sd	a5,112(s1)
        tf->a0 = -1;
        return;
    }

    tf->a0 = filewrite(f, uva, len);
}
    8020643c:	70a2                	ld	ra,40(sp)
    8020643e:	7402                	ld	s0,32(sp)
    80206440:	64e2                	ld	s1,24(sp)
    80206442:	6942                	ld	s2,16(sp)
    80206444:	69a2                	ld	s3,8(sp)
    80206446:	6a02                	ld	s4,0(sp)
    80206448:	6145                	addi	sp,sp,48
    8020644a:	8082                	ret
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    8020644c:	ffffc097          	auipc	ra,0xffffc
    80206450:	564080e7          	jalr	1380(ra) # 802029b0 <myproc>
    80206454:	2901                	sext.w	s2,s2
    80206456:	03690913          	addi	s2,s2,54
    8020645a:	090e                	slli	s2,s2,0x3
    8020645c:	954a                	add	a0,a0,s2
    8020645e:	6108                	ld	a0,0(a0)
    80206460:	dd61                	beqz	a0,80206438 <syscallWrite+0x32>
    int len = tf->a2, fd = tf->a0;
    80206462:	0009861b          	sext.w	a2,s3
    if (len < 0) {
    80206466:	57fd                	li	a5,-1
    80206468:	fc0649e3          	bltz	a2,8020643a <syscallWrite+0x34>
    tf->a0 = filewrite(f, uva, len);
    8020646c:	85d2                	mv	a1,s4
    8020646e:	00003097          	auipc	ra,0x3
    80206472:	37e080e7          	jalr	894(ra) # 802097ec <filewrite>
    80206476:	87aa                	mv	a5,a0
    80206478:	b7c9                	j	8020643a <syscallWrite+0x34>

000000008020647a <syscallWriteVector>:

void syscallWriteVector() {
    8020647a:	bc010113          	addi	sp,sp,-1088
    8020647e:	42113c23          	sd	ra,1080(sp)
    80206482:	42813823          	sd	s0,1072(sp)
    80206486:	42913423          	sd	s1,1064(sp)
    8020648a:	43213023          	sd	s2,1056(sp)
    8020648e:	41313c23          	sd	s3,1048(sp)
    80206492:	41413823          	sd	s4,1040(sp)
    80206496:	41513423          	sd	s5,1032(sp)
    8020649a:	44010413          	addi	s0,sp,1088
    Trapframe* tf = getHartTrapFrame();
    8020649e:	fffff097          	auipc	ra,0xfffff
    802064a2:	706080e7          	jalr	1798(ra) # 80205ba4 <getHartTrapFrame>
    802064a6:	84aa                	mv	s1,a0
    struct file* f;
    int fd = tf->a0;
    802064a8:	07053903          	ld	s2,112(a0)

    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    802064ac:	0009071b          	sext.w	a4,s2
    802064b0:	07f00793          	li	a5,127
    802064b4:	02e7f663          	bgeu	a5,a4,802064e0 <syscallWriteVector+0x66>
    }
    tf->a0 = len;
    return;

bad:
    tf->a0 = -1;
    802064b8:	59fd                	li	s3,-1
    802064ba:	0734b823          	sd	s3,112(s1)
}
    802064be:	43813083          	ld	ra,1080(sp)
    802064c2:	43013403          	ld	s0,1072(sp)
    802064c6:	42813483          	ld	s1,1064(sp)
    802064ca:	42013903          	ld	s2,1056(sp)
    802064ce:	41813983          	ld	s3,1048(sp)
    802064d2:	41013a03          	ld	s4,1040(sp)
    802064d6:	40813a83          	ld	s5,1032(sp)
    802064da:	44010113          	addi	sp,sp,1088
    802064de:	8082                	ret
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    802064e0:	ffffc097          	auipc	ra,0xffffc
    802064e4:	4d0080e7          	jalr	1232(ra) # 802029b0 <myproc>
    802064e8:	2901                	sext.w	s2,s2
    802064ea:	03690913          	addi	s2,s2,54
    802064ee:	090e                	slli	s2,s2,0x3
    802064f0:	954a                	add	a0,a0,s2
    802064f2:	00053a83          	ld	s5,0(a0)
    802064f6:	fc0a81e3          	beqz	s5,802064b8 <syscallWriteVector+0x3e>
    int cnt = tf->a2;
    802064fa:	60dc                	ld	a5,128(s1)
    if (cnt < 0 || cnt >= IOVMAX) {
    802064fc:	00078a1b          	sext.w	s4,a5
    80206500:	03f00713          	li	a4,63
    80206504:	fb476ae3          	bltu	a4,s4,802064b8 <syscallWriteVector+0x3e>
    struct Process* p = myproc();
    80206508:	ffffc097          	auipc	ra,0xffffc
    8020650c:	4a8080e7          	jalr	1192(ra) # 802029b0 <myproc>
    if (copyin(p->pgdir, (char*)vec, tf->a1, cnt * sizeof(struct Iovec)) != 0) {
    80206510:	004a1693          	slli	a3,s4,0x4
    80206514:	7cb0                	ld	a2,120(s1)
    80206516:	bc040593          	addi	a1,s0,-1088
    8020651a:	16853503          	ld	a0,360(a0)
    8020651e:	ffffc097          	auipc	ra,0xffffc
    80206522:	dfe080e7          	jalr	-514(ra) # 8020231c <copyin>
    80206526:	f949                	bnez	a0,802064b8 <syscallWriteVector+0x3e>
    for (int i = 0; i < cnt; i++) {
    80206528:	03405b63          	blez	s4,8020655e <syscallWriteVector+0xe4>
    8020652c:	bc040913          	addi	s2,s0,-1088
    80206530:	3a7d                	addiw	s4,s4,-1
    80206532:	020a1793          	slli	a5,s4,0x20
    80206536:	01c7da13          	srli	s4,a5,0x1c
    8020653a:	bd040793          	addi	a5,s0,-1072
    8020653e:	9a3e                	add	s4,s4,a5
    u64 len = 0;
    80206540:	4981                	li	s3,0
        len += filewrite(f, (u64)vec[i].iovBase, vec[i].iovLen);
    80206542:	00892603          	lw	a2,8(s2)
    80206546:	00093583          	ld	a1,0(s2)
    8020654a:	8556                	mv	a0,s5
    8020654c:	00003097          	auipc	ra,0x3
    80206550:	2a0080e7          	jalr	672(ra) # 802097ec <filewrite>
    80206554:	99aa                	add	s3,s3,a0
    for (int i = 0; i < cnt; i++) {
    80206556:	0941                	addi	s2,s2,16
    80206558:	ff4915e3          	bne	s2,s4,80206542 <syscallWriteVector+0xc8>
    8020655c:	bfb9                	j	802064ba <syscallWriteVector+0x40>
    u64 len = 0;
    8020655e:	4981                	li	s3,0
    return;
    80206560:	bfa9                	j	802064ba <syscallWriteVector+0x40>

0000000080206562 <syscallClose>:

void syscallClose(void) {
    80206562:	7179                	addi	sp,sp,-48
    80206564:	f406                	sd	ra,40(sp)
    80206566:	f022                	sd	s0,32(sp)
    80206568:	ec26                	sd	s1,24(sp)
    8020656a:	e84a                	sd	s2,16(sp)
    8020656c:	e44e                	sd	s3,8(sp)
    8020656e:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    80206570:	fffff097          	auipc	ra,0xfffff
    80206574:	634080e7          	jalr	1588(ra) # 80205ba4 <getHartTrapFrame>
    80206578:	892a                	mv	s2,a0
    int fd = tf->a0;
    8020657a:	793c                	ld	a5,112(a0)
    struct file* f;

    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    8020657c:	0007869b          	sext.w	a3,a5
    80206580:	07f00713          	li	a4,127
    80206584:	00d77c63          	bgeu	a4,a3,8020659c <syscallClose+0x3a>
        tf->a0 = -1;
        return;
    80206588:	57fd                	li	a5,-1
        tf->a0 = -1;
    8020658a:	06f93823          	sd	a5,112(s2)
    }
    
    myproc()->ofile[fd] = 0;
    fileclose(f);
    tf->a0 = 0;
}
    8020658e:	70a2                	ld	ra,40(sp)
    80206590:	7402                	ld	s0,32(sp)
    80206592:	64e2                	ld	s1,24(sp)
    80206594:	6942                	ld	s2,16(sp)
    80206596:	69a2                	ld	s3,8(sp)
    80206598:	6145                	addi	sp,sp,48
    8020659a:	8082                	ret
    int fd = tf->a0;
    8020659c:	84b6                	mv	s1,a3
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    8020659e:	ffffc097          	auipc	ra,0xffffc
    802065a2:	412080e7          	jalr	1042(ra) # 802029b0 <myproc>
    802065a6:	03648793          	addi	a5,s1,54
    802065aa:	078e                	slli	a5,a5,0x3
    802065ac:	953e                	add	a0,a0,a5
    802065ae:	00053983          	ld	s3,0(a0)
    802065b2:	fc098be3          	beqz	s3,80206588 <syscallClose+0x26>
    myproc()->ofile[fd] = 0;
    802065b6:	ffffc097          	auipc	ra,0xffffc
    802065ba:	3fa080e7          	jalr	1018(ra) # 802029b0 <myproc>
    802065be:	03648793          	addi	a5,s1,54
    802065c2:	078e                	slli	a5,a5,0x3
    802065c4:	953e                	add	a0,a0,a5
    802065c6:	00053023          	sd	zero,0(a0)
    fileclose(f);
    802065ca:	854e                	mv	a0,s3
    802065cc:	00003097          	auipc	ra,0x3
    802065d0:	00a080e7          	jalr	10(ra) # 802095d6 <fileclose>
    802065d4:	4781                	li	a5,0
    802065d6:	bf55                	j	8020658a <syscallClose+0x28>

00000000802065d8 <syscallGetFileState>:

void syscallGetFileState(void) {
    802065d8:	7179                	addi	sp,sp,-48
    802065da:	f406                	sd	ra,40(sp)
    802065dc:	f022                	sd	s0,32(sp)
    802065de:	ec26                	sd	s1,24(sp)
    802065e0:	e84a                	sd	s2,16(sp)
    802065e2:	e44e                	sd	s3,8(sp)
    802065e4:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    802065e6:	fffff097          	auipc	ra,0xfffff
    802065ea:	5be080e7          	jalr	1470(ra) # 80205ba4 <getHartTrapFrame>
    802065ee:	84aa                	mv	s1,a0
    struct file* f;
    int fd = tf->a0;
    802065f0:	07053903          	ld	s2,112(a0)
    u64 uva = tf->a1; 
    802065f4:	07853983          	ld	s3,120(a0)

    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    802065f8:	0009071b          	sext.w	a4,s2
    802065fc:	07f00793          	li	a5,127
    80206600:	00e7fb63          	bgeu	a5,a4,80206616 <syscallGetFileState+0x3e>
        tf->a0 = -1;
        return;
    80206604:	557d                	li	a0,-1
        tf->a0 = -1;
    80206606:	f8a8                	sd	a0,112(s1)
    }

    tf->a0 = filestat(f, uva);
}
    80206608:	70a2                	ld	ra,40(sp)
    8020660a:	7402                	ld	s0,32(sp)
    8020660c:	64e2                	ld	s1,24(sp)
    8020660e:	6942                	ld	s2,16(sp)
    80206610:	69a2                	ld	s3,8(sp)
    80206612:	6145                	addi	sp,sp,48
    80206614:	8082                	ret
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206616:	ffffc097          	auipc	ra,0xffffc
    8020661a:	39a080e7          	jalr	922(ra) # 802029b0 <myproc>
    8020661e:	2901                	sext.w	s2,s2
    80206620:	03690913          	addi	s2,s2,54
    80206624:	090e                	slli	s2,s2,0x3
    80206626:	954a                	add	a0,a0,s2
    80206628:	6108                	ld	a0,0(a0)
    8020662a:	dd69                	beqz	a0,80206604 <syscallGetFileState+0x2c>
    tf->a0 = filestat(f, uva);
    8020662c:	85ce                	mv	a1,s3
    8020662e:	00003097          	auipc	ra,0x3
    80206632:	072080e7          	jalr	114(ra) # 802096a0 <filestat>
    80206636:	bfc1                	j	80206606 <syscallGetFileState+0x2e>

0000000080206638 <syscallGetDirent>:

extern struct entry_cache* ecache;
void syscallGetDirent() {
    80206638:	7105                	addi	sp,sp,-480
    8020663a:	ef86                	sd	ra,472(sp)
    8020663c:	eba2                	sd	s0,464(sp)
    8020663e:	e7a6                	sd	s1,456(sp)
    80206640:	e3ca                	sd	s2,448(sp)
    80206642:	ff4e                	sd	s3,440(sp)
    80206644:	fb52                	sd	s4,432(sp)
    80206646:	f756                	sd	s5,424(sp)
    80206648:	f35a                	sd	s6,416(sp)
    8020664a:	ef5e                	sd	s7,408(sp)
    8020664c:	eb62                	sd	s8,400(sp)
    8020664e:	1380                	addi	s0,sp,480
    struct file* f;
    int fd, n;
    u64 addr;

    if (argfd(0, &fd, &f) < 0 || argaddr(1, &addr) < 0 || argint(2, &n) < 0) {
    80206650:	fa840613          	addi	a2,s0,-88
    80206654:	fa440593          	addi	a1,s0,-92
    80206658:	4501                	li	a0,0
    8020665a:	00000097          	auipc	ra,0x0
    8020665e:	b76080e7          	jalr	-1162(ra) # 802061d0 <argfd>
    80206662:	04054663          	bltz	a0,802066ae <syscallGetDirent+0x76>
    80206666:	f9840593          	addi	a1,s0,-104
    8020666a:	4505                	li	a0,1
    8020666c:	ffffd097          	auipc	ra,0xffffd
    80206670:	6b8080e7          	jalr	1720(ra) # 80203d24 <argaddr>
    80206674:	02054d63          	bltz	a0,802066ae <syscallGetDirent+0x76>
    80206678:	fa040593          	addi	a1,s0,-96
    8020667c:	4509                	li	a0,2
    8020667e:	ffffd097          	auipc	ra,0xffffd
    80206682:	684080e7          	jalr	1668(ra) # 80203d02 <argint>
    80206686:	02054463          	bltz	a0,802066ae <syscallGetDirent+0x76>
        getHartTrapFrame()->a0 = -2;
        return;
    }
    struct Process* p = myproc();
    8020668a:	ffffc097          	auipc	ra,0xffffc
    8020668e:	326080e7          	jalr	806(ra) # 802029b0 <myproc>
    80206692:	89aa                	mv	s3,a0
    static char buf[512];
    struct linux_dirent64* dir64 = (struct linux_dirent64*)buf;

    if (f->type == FD_ENTRY) {
    80206694:	fa843483          	ld	s1,-88(s0)
    80206698:	4098                	lw	a4,0(s1)
    8020669a:	4789                	li	a5,2
    8020669c:	02f70b63          	beq	a4,a5,802066d2 <syscallGetDirent+0x9a>
        //     return;
        // }
        getHartTrapFrame()->a0 = nread;
        return;
    }
    getHartTrapFrame()->a0 = -5;
    802066a0:	fffff097          	auipc	ra,0xfffff
    802066a4:	504080e7          	jalr	1284(ra) # 80205ba4 <getHartTrapFrame>
    802066a8:	57ed                	li	a5,-5
    802066aa:	f93c                	sd	a5,112(a0)
    return;
    802066ac:	a039                	j	802066ba <syscallGetDirent+0x82>
        getHartTrapFrame()->a0 = -2;
    802066ae:	fffff097          	auipc	ra,0xfffff
    802066b2:	4f6080e7          	jalr	1270(ra) # 80205ba4 <getHartTrapFrame>
    802066b6:	57f9                	li	a5,-2
    802066b8:	f93c                	sd	a5,112(a0)
}
    802066ba:	60fe                	ld	ra,472(sp)
    802066bc:	645e                	ld	s0,464(sp)
    802066be:	64be                	ld	s1,456(sp)
    802066c0:	691e                	ld	s2,448(sp)
    802066c2:	79fa                	ld	s3,440(sp)
    802066c4:	7a5a                	ld	s4,432(sp)
    802066c6:	7aba                	ld	s5,424(sp)
    802066c8:	7b1a                	ld	s6,416(sp)
    802066ca:	6bfa                	ld	s7,408(sp)
    802066cc:	6c5a                	ld	s8,400(sp)
    802066ce:	613d                	addi	sp,sp,480
    802066d0:	8082                	ret
        int count = 0;
    802066d2:	e2042223          	sw	zero,-476(s0)
        elock(f->ep);
    802066d6:	6c88                	ld	a0,24(s1)
    802066d8:	00002097          	auipc	ra,0x2
    802066dc:	30c080e7          	jalr	780(ra) # 802089e4 <elock>
        int nread=0;
    802066e0:	4a01                	li	s4,0
            if (ret == -1)
    802066e2:	5afd                	li	s5,-1
            dir64->d_ino = 0;
    802066e4:	00400917          	auipc	s2,0x400
    802066e8:	8e490913          	addi	s2,s2,-1820 # 80605fc8 <buf.6>
            dir64->d_type = (de.attribute & ATTR_DIRECTORY) ? DT_DIR : DT_REG;
    802066ec:	4b11                	li	s6,4
    802066ee:	4ba1                	li	s7,8
    802066f0:	a801                	j	80206700 <syscallGetDirent+0xc8>
                f->off += count * 32;
    802066f2:	e2442783          	lw	a5,-476(s0)
    802066f6:	0057979b          	slliw	a5,a5,0x5
    802066fa:	5098                	lw	a4,32(s1)
    802066fc:	9fb9                	addw	a5,a5,a4
    802066fe:	d09c                	sw	a5,32(s1)
            de.valid = 0;
    80206700:	f4041523          	sh	zero,-182(s0)
            while ((ret = enext(f->ep, &de, f->off, &count)) ==
    80206704:	e2440693          	addi	a3,s0,-476
    80206708:	5090                	lw	a2,32(s1)
    8020670a:	e2840593          	addi	a1,s0,-472
    8020670e:	6c88                	ld	a0,24(s1)
    80206710:	00002097          	auipc	ra,0x2
    80206714:	4fe080e7          	jalr	1278(ra) # 80208c0e <enext>
    80206718:	dd69                	beqz	a0,802066f2 <syscallGetDirent+0xba>
            if (ret == -1)
    8020671a:	0d550b63          	beq	a0,s5,802067f0 <syscallGetDirent+0x1b8>
            f->off += count * 32;
    8020671e:	e2442783          	lw	a5,-476(s0)
    80206722:	0057979b          	slliw	a5,a5,0x5
    80206726:	5098                	lw	a4,32(s1)
    80206728:	9fb9                	addw	a5,a5,a4
    8020672a:	d09c                	sw	a5,32(s1)
            int len = strlen(de.filename);
    8020672c:	e2840513          	addi	a0,s0,-472
    80206730:	fffff097          	auipc	ra,0xfffff
    80206734:	7b0080e7          	jalr	1968(ra) # 80205ee0 <strlen>
    80206738:	8c2a                	mv	s8,a0
            if (n < prefix + len + 1) {
    8020673a:	0135071b          	addiw	a4,a0,19
    8020673e:	fa042783          	lw	a5,-96(s0)
    80206742:	06f75c63          	bge	a4,a5,802067ba <syscallGetDirent+0x182>
            dir64->d_ino = 0;
    80206746:	00093023          	sd	zero,0(s2)
            dir64->d_off = 0;  // This maybe wrong;
    8020674a:	00093423          	sd	zero,8(s2)
            dir64->d_reclen = len + prefix + 1;
    8020674e:	0145079b          	addiw	a5,a0,20
    80206752:	00f91823          	sh	a5,16(s2)
            dir64->d_type = (de.attribute & ATTR_DIRECTORY) ? DT_DIR : DT_REG;
    80206756:	f2844783          	lbu	a5,-216(s0)
    8020675a:	8bc1                	andi	a5,a5,16
    8020675c:	875a                	mv	a4,s6
    8020675e:	e391                	bnez	a5,80206762 <syscallGetDirent+0x12a>
    80206760:	875e                	mv	a4,s7
    80206762:	00e90923          	sb	a4,18(s2)
            if (copyout(p->pgdir, addr, (char*)dir64, prefix) != 0) {
    80206766:	46cd                	li	a3,19
    80206768:	864a                	mv	a2,s2
    8020676a:	f9843583          	ld	a1,-104(s0)
    8020676e:	1689b503          	ld	a0,360(s3)
    80206772:	ffffc097          	auipc	ra,0xffffc
    80206776:	c3c080e7          	jalr	-964(ra) # 802023ae <copyout>
    8020677a:	ed21                	bnez	a0,802067d2 <syscallGetDirent+0x19a>
            if (copyout(p->pgdir, addr + prefix, de.filename, len+1) != 0) {
    8020677c:	001c069b          	addiw	a3,s8,1
    80206780:	e2840613          	addi	a2,s0,-472
    80206784:	f9843583          	ld	a1,-104(s0)
    80206788:	05cd                	addi	a1,a1,19
    8020678a:	1689b503          	ld	a0,360(s3)
    8020678e:	ffffc097          	auipc	ra,0xffffc
    80206792:	c20080e7          	jalr	-992(ra) # 802023ae <copyout>
    80206796:	e529                	bnez	a0,802067e0 <syscallGetDirent+0x1a8>
            addr += prefix + len + 1;
    80206798:	2c51                	addiw	s8,s8,20
    8020679a:	000c071b          	sext.w	a4,s8
    8020679e:	f9843783          	ld	a5,-104(s0)
    802067a2:	97ba                	add	a5,a5,a4
    802067a4:	f8f43c23          	sd	a5,-104(s0)
            nread += prefix + len + 1;
    802067a8:	014c0a3b          	addw	s4,s8,s4
            n -= prefix + len + 1;
    802067ac:	fa042783          	lw	a5,-96(s0)
    802067b0:	418787bb          	subw	a5,a5,s8
    802067b4:	faf42023          	sw	a5,-96(s0)
            while ((ret = enext(f->ep, &de, f->off, &count)) ==
    802067b8:	b7a1                	j	80206700 <syscallGetDirent+0xc8>
                eunlock(f->ep);
    802067ba:	6c88                	ld	a0,24(s1)
    802067bc:	00002097          	auipc	ra,0x2
    802067c0:	272080e7          	jalr	626(ra) # 80208a2e <eunlock>
                getHartTrapFrame()->a0 = nread;
    802067c4:	fffff097          	auipc	ra,0xfffff
    802067c8:	3e0080e7          	jalr	992(ra) # 80205ba4 <getHartTrapFrame>
    802067cc:	07453823          	sd	s4,112(a0)
                return;
    802067d0:	b5ed                	j	802066ba <syscallGetDirent+0x82>
                getHartTrapFrame()->a0 = -4;
    802067d2:	fffff097          	auipc	ra,0xfffff
    802067d6:	3d2080e7          	jalr	978(ra) # 80205ba4 <getHartTrapFrame>
    802067da:	57f1                	li	a5,-4
    802067dc:	f93c                	sd	a5,112(a0)
                return;
    802067de:	bdf1                	j	802066ba <syscallGetDirent+0x82>
                getHartTrapFrame()->a0 = -114;
    802067e0:	fffff097          	auipc	ra,0xfffff
    802067e4:	3c4080e7          	jalr	964(ra) # 80205ba4 <getHartTrapFrame>
    802067e8:	f8e00793          	li	a5,-114
    802067ec:	f93c                	sd	a5,112(a0)
                return;
    802067ee:	b5f1                	j	802066ba <syscallGetDirent+0x82>
        eunlock(f->ep);
    802067f0:	6c88                	ld	a0,24(s1)
    802067f2:	00002097          	auipc	ra,0x2
    802067f6:	23c080e7          	jalr	572(ra) # 80208a2e <eunlock>
        getHartTrapFrame()->a0 = nread;
    802067fa:	fffff097          	auipc	ra,0xfffff
    802067fe:	3aa080e7          	jalr	938(ra) # 80205ba4 <getHartTrapFrame>
    80206802:	07453823          	sd	s4,112(a0)
        return;
    80206806:	bd55                	j	802066ba <syscallGetDirent+0x82>

0000000080206808 <syscallOpenAt>:

//todo: support the mode
//todo: change the directory? whether we should add the ref(eput)
void syscallOpenAt(void) {
    80206808:	714d                	addi	sp,sp,-336
    8020680a:	e686                	sd	ra,328(sp)
    8020680c:	e2a2                	sd	s0,320(sp)
    8020680e:	fe26                	sd	s1,312(sp)
    80206810:	fa4a                	sd	s2,304(sp)
    80206812:	f64e                	sd	s3,296(sp)
    80206814:	f252                	sd	s4,288(sp)
    80206816:	ee56                	sd	s5,280(sp)
    80206818:	ea5a                	sd	s6,272(sp)
    8020681a:	0a80                	addi	s0,sp,336
    Trapframe* tf = getHartTrapFrame();
    8020681c:	fffff097          	auipc	ra,0xfffff
    80206820:	388080e7          	jalr	904(ra) # 80205ba4 <getHartTrapFrame>
    80206824:	84aa                	mv	s1,a0
    int startFd = tf->a0, flags = tf->a2, mode = tf->a3;
    80206826:	07053903          	ld	s2,112(a0)
    8020682a:	08053a03          	ld	s4,128(a0)
    8020682e:	08853983          	ld	s3,136(a0)
    char path[FAT32_MAX_PATH];
    if (fetchstr(tf->a1, path, FAT32_MAX_PATH) < 0) {
    80206832:	10400613          	li	a2,260
    80206836:	eb840593          	addi	a1,s0,-328
    8020683a:	7d28                	ld	a0,120(a0)
    8020683c:	ffffd097          	auipc	ra,0xffffd
    80206840:	5ce080e7          	jalr	1486(ra) # 80203e0a <fetchstr>
    80206844:	0e054c63          	bltz	a0,8020693c <syscallOpenAt+0x134>
    int startFd = tf->a0, flags = tf->a2, mode = tf->a3;
    80206848:	0009051b          	sext.w	a0,s2
    8020684c:	000a0a9b          	sext.w	s5,s4
        return;
    }
    struct dirent* entryPoint;

    // printf("startFd: %d, flags: %x, mode: %x\n", startFd, flags, mode);
    if (flags & O_CREATE) {
    80206850:	040a7793          	andi	a5,s4,64
    80206854:	c3c9                	beqz	a5,802068d6 <syscallOpenAt+0xce>
        entryPoint = create(startFd, path, T_FILE, mode);
    80206856:	0009869b          	sext.w	a3,s3
    8020685a:	4609                	li	a2,2
    8020685c:	eb840593          	addi	a1,s0,-328
    80206860:	00003097          	auipc	ra,0x3
    80206864:	b5e080e7          	jalr	-1186(ra) # 802093be <create>
    80206868:	892a                	mv	s2,a0
        if (entryPoint == NULL) {
    8020686a:	10050463          	beqz	a0,80206972 <syscallOpenAt+0x16a>
            goto bad;
        }
    }
    struct file* file;
    int fd;
    if ((file = filealloc()) == NULL || (fd = fdalloc(file)) < 0) {
    8020686e:	00003097          	auipc	ra,0x3
    80206872:	c98080e7          	jalr	-872(ra) # 80209506 <filealloc>
    80206876:	89aa                	mv	s3,a0
    80206878:	c17d                	beqz	a0,8020695e <syscallOpenAt+0x156>
    8020687a:	00000097          	auipc	ra,0x0
    8020687e:	9c0080e7          	jalr	-1600(ra) # 8020623a <fdalloc>
    80206882:	8b2a                	mv	s6,a0
    80206884:	0c054863          	bltz	a0,80206954 <syscallOpenAt+0x14c>
        eunlock(entryPoint);
        eput(entryPoint);
        goto bad;
    }

    if (!(entryPoint->attribute & ATTR_DIRECTORY) && (flags & O_TRUNC)) {
    80206888:	10094783          	lbu	a5,256(s2)
    8020688c:	8bc1                	andi	a5,a5,16
    8020688e:	e781                	bnez	a5,80206896 <syscallOpenAt+0x8e>
    80206890:	400af793          	andi	a5,s5,1024
    80206894:	efd1                	bnez	a5,80206930 <syscallOpenAt+0x128>
        etrunc(entryPoint);
    }

    file->type = FD_ENTRY;
    80206896:	4789                	li	a5,2
    80206898:	00f9a023          	sw	a5,0(s3)
    file->off = (flags & O_APPEND) ? entryPoint->file_size : 0;
    8020689c:	004af793          	andi	a5,s5,4
    802068a0:	4701                	li	a4,0
    802068a2:	c399                	beqz	a5,802068a8 <syscallOpenAt+0xa0>
    802068a4:	10892703          	lw	a4,264(s2)
    802068a8:	02e9a023          	sw	a4,32(s3)
    file->ep = entryPoint;
    802068ac:	0129bc23          	sd	s2,24(s3)
    file->readable = !(flags & O_WRONLY);
    802068b0:	001aca93          	xori	s5,s5,1
    802068b4:	001afa93          	andi	s5,s5,1
    802068b8:	01598423          	sb	s5,8(s3)
    file->writable = (flags & O_WRONLY) || (flags & O_RDWR);
    802068bc:	003a7a13          	andi	s4,s4,3
    802068c0:	01403a33          	snez	s4,s4
    802068c4:	014984a3          	sb	s4,9(s3)

    eunlock(entryPoint);
    802068c8:	854a                	mv	a0,s2
    802068ca:	00002097          	auipc	ra,0x2
    802068ce:	164080e7          	jalr	356(ra) # 80208a2e <eunlock>

    tf->a0 = fd;
    802068d2:	855a                	mv	a0,s6
    return;
    802068d4:	a0ad                	j	8020693e <syscallOpenAt+0x136>
        if ((entryPoint = ename(startFd, path)) == NULL) {
    802068d6:	eb840593          	addi	a1,s0,-328
    802068da:	00003097          	auipc	ra,0x3
    802068de:	82c080e7          	jalr	-2004(ra) # 80209106 <ename>
    802068e2:	892a                	mv	s2,a0
    802068e4:	c559                	beqz	a0,80206972 <syscallOpenAt+0x16a>
        elock(entryPoint);
    802068e6:	00002097          	auipc	ra,0x2
    802068ea:	0fe080e7          	jalr	254(ra) # 802089e4 <elock>
        if (!(entryPoint->attribute & ATTR_DIRECTORY) && (flags & O_DIRECTORY)) {
    802068ee:	10094783          	lbu	a5,256(s2)
    802068f2:	8bc1                	andi	a5,a5,16
    802068f4:	e385                	bnez	a5,80206914 <syscallOpenAt+0x10c>
    802068f6:	015ad793          	srli	a5,s5,0x15
    802068fa:	8b85                	andi	a5,a5,1
    802068fc:	dbad                	beqz	a5,8020686e <syscallOpenAt+0x66>
            eunlock(entryPoint);
    802068fe:	854a                	mv	a0,s2
    80206900:	00002097          	auipc	ra,0x2
    80206904:	12e080e7          	jalr	302(ra) # 80208a2e <eunlock>
            eput(entryPoint);
    80206908:	854a                	mv	a0,s2
    8020690a:	00002097          	auipc	ra,0x2
    8020690e:	186080e7          	jalr	390(ra) # 80208a90 <eput>
            goto bad;
    80206912:	a085                	j	80206972 <syscallOpenAt+0x16a>
        if ((entryPoint->attribute & ATTR_DIRECTORY) && (flags & 0xFFF) != O_RDONLY) { //todo
    80206914:	034a9793          	slli	a5,s5,0x34
    80206918:	dbb9                	beqz	a5,8020686e <syscallOpenAt+0x66>
            eunlock(entryPoint);
    8020691a:	854a                	mv	a0,s2
    8020691c:	00002097          	auipc	ra,0x2
    80206920:	112080e7          	jalr	274(ra) # 80208a2e <eunlock>
            eput(entryPoint);
    80206924:	854a                	mv	a0,s2
    80206926:	00002097          	auipc	ra,0x2
    8020692a:	16a080e7          	jalr	362(ra) # 80208a90 <eput>
            goto bad;
    8020692e:	a091                	j	80206972 <syscallOpenAt+0x16a>
        etrunc(entryPoint);
    80206930:	854a                	mv	a0,s2
    80206932:	00002097          	auipc	ra,0x2
    80206936:	03c080e7          	jalr	60(ra) # 8020896e <etrunc>
    8020693a:	bfb1                	j	80206896 <syscallOpenAt+0x8e>
    8020693c:	557d                	li	a0,-1
        tf->a0 = -1;
    8020693e:	f8a8                	sd	a0,112(s1)
bad:
    tf->a0 = -1;
}
    80206940:	60b6                	ld	ra,328(sp)
    80206942:	6416                	ld	s0,320(sp)
    80206944:	74f2                	ld	s1,312(sp)
    80206946:	7952                	ld	s2,304(sp)
    80206948:	79b2                	ld	s3,296(sp)
    8020694a:	7a12                	ld	s4,288(sp)
    8020694c:	6af2                	ld	s5,280(sp)
    8020694e:	6b52                	ld	s6,272(sp)
    80206950:	6171                	addi	sp,sp,336
    80206952:	8082                	ret
            fileclose(file);
    80206954:	854e                	mv	a0,s3
    80206956:	00003097          	auipc	ra,0x3
    8020695a:	c80080e7          	jalr	-896(ra) # 802095d6 <fileclose>
        eunlock(entryPoint);
    8020695e:	854a                	mv	a0,s2
    80206960:	00002097          	auipc	ra,0x2
    80206964:	0ce080e7          	jalr	206(ra) # 80208a2e <eunlock>
        eput(entryPoint);
    80206968:	854a                	mv	a0,s2
    8020696a:	00002097          	auipc	ra,0x2
    8020696e:	126080e7          	jalr	294(ra) # 80208a90 <eput>
    tf->a0 = -1;
    80206972:	57fd                	li	a5,-1
    80206974:	f8bc                	sd	a5,112(s1)
    80206976:	b7e9                	j	80206940 <syscallOpenAt+0x138>

0000000080206978 <syscallMakeDirAt>:

//todo: support the mode
//todo: change the directory? whether we should add the ref(eput)
void syscallMakeDirAt(void) {
    80206978:	7129                	addi	sp,sp,-320
    8020697a:	fe06                	sd	ra,312(sp)
    8020697c:	fa22                	sd	s0,304(sp)
    8020697e:	f626                	sd	s1,296(sp)
    80206980:	f24a                	sd	s2,288(sp)
    80206982:	ee4e                	sd	s3,280(sp)
    80206984:	0280                	addi	s0,sp,320
    Trapframe* tf = getHartTrapFrame();
    80206986:	fffff097          	auipc	ra,0xfffff
    8020698a:	21e080e7          	jalr	542(ra) # 80205ba4 <getHartTrapFrame>
    8020698e:	84aa                	mv	s1,a0
    int dirFd = tf->a0, mode = tf->a2;
    80206990:	07053903          	ld	s2,112(a0)
    80206994:	08053983          	ld	s3,128(a0)
    char path[FAT32_MAX_PATH];
    if (fetchstr(tf->a1, path, FAT32_MAX_PATH) < 0) {
    80206998:	10400613          	li	a2,260
    8020699c:	ec840593          	addi	a1,s0,-312
    802069a0:	7d28                	ld	a0,120(a0)
    802069a2:	ffffd097          	auipc	ra,0xffffd
    802069a6:	468080e7          	jalr	1128(ra) # 80203e0a <fetchstr>
    802069aa:	02054d63          	bltz	a0,802069e4 <syscallMakeDirAt+0x6c>
        return;
    }

    struct dirent* entryPoint;

    if ((entryPoint = create(dirFd, path, T_DIR, mode)) == 0) {
    802069ae:	0009869b          	sext.w	a3,s3
    802069b2:	4605                	li	a2,1
    802069b4:	ec840593          	addi	a1,s0,-312
    802069b8:	0009051b          	sext.w	a0,s2
    802069bc:	00003097          	auipc	ra,0x3
    802069c0:	a02080e7          	jalr	-1534(ra) # 802093be <create>
    802069c4:	892a                	mv	s2,a0
    802069c6:	cd01                	beqz	a0,802069de <syscallMakeDirAt+0x66>
        goto bad;
    }

    eunlock(entryPoint);
    802069c8:	00002097          	auipc	ra,0x2
    802069cc:	066080e7          	jalr	102(ra) # 80208a2e <eunlock>
    eput(entryPoint);
    802069d0:	854a                	mv	a0,s2
    802069d2:	00002097          	auipc	ra,0x2
    802069d6:	0be080e7          	jalr	190(ra) # 80208a90 <eput>
    tf->a0 = 0;
    return;
    802069da:	4781                	li	a5,0
    802069dc:	a029                	j	802069e6 <syscallMakeDirAt+0x6e>

bad:
    tf->a0 = -1;
    802069de:	57fd                	li	a5,-1
    802069e0:	f8bc                	sd	a5,112(s1)
    802069e2:	a019                	j	802069e8 <syscallMakeDirAt+0x70>
    802069e4:	57fd                	li	a5,-1
        tf->a0 = -1;
    802069e6:	f8bc                	sd	a5,112(s1)
}
    802069e8:	70f2                	ld	ra,312(sp)
    802069ea:	7452                	ld	s0,304(sp)
    802069ec:	74b2                	ld	s1,296(sp)
    802069ee:	7912                	ld	s2,288(sp)
    802069f0:	69f2                	ld	s3,280(sp)
    802069f2:	6131                	addi	sp,sp,320
    802069f4:	8082                	ret

00000000802069f6 <syscallChangeDir>:

void syscallChangeDir(void) {
    802069f6:	7129                	addi	sp,sp,-320
    802069f8:	fe06                	sd	ra,312(sp)
    802069fa:	fa22                	sd	s0,304(sp)
    802069fc:	f626                	sd	s1,296(sp)
    802069fe:	f24a                	sd	s2,288(sp)
    80206a00:	ee4e                	sd	s3,280(sp)
    80206a02:	0280                	addi	s0,sp,320
    Trapframe* tf = getHartTrapFrame();
    80206a04:	fffff097          	auipc	ra,0xfffff
    80206a08:	1a0080e7          	jalr	416(ra) # 80205ba4 <getHartTrapFrame>
    80206a0c:	84aa                	mv	s1,a0
    char path[FAT32_MAX_PATH];
    struct dirent* ep;

    struct Process* p = myproc();
    80206a0e:	ffffc097          	auipc	ra,0xffffc
    80206a12:	fa2080e7          	jalr	-94(ra) # 802029b0 <myproc>
    80206a16:	89aa                	mv	s3,a0
    
    if (fetchstr(tf->a0, path, FAT32_MAX_PATH) < 0 || (ep = ename(AT_FDCWD, path)) == NULL) {
    80206a18:	10400613          	li	a2,260
    80206a1c:	ec840593          	addi	a1,s0,-312
    80206a20:	78a8                	ld	a0,112(s1)
    80206a22:	ffffd097          	auipc	ra,0xffffd
    80206a26:	3e8080e7          	jalr	1000(ra) # 80203e0a <fetchstr>
    80206a2a:	04054e63          	bltz	a0,80206a86 <syscallChangeDir+0x90>
    80206a2e:	ec840593          	addi	a1,s0,-312
    80206a32:	f9c00513          	li	a0,-100
    80206a36:	00002097          	auipc	ra,0x2
    80206a3a:	6d0080e7          	jalr	1744(ra) # 80209106 <ename>
    80206a3e:	892a                	mv	s2,a0
    80206a40:	c139                	beqz	a0,80206a86 <syscallChangeDir+0x90>
        tf->a0 = -1;
        return;
    }

    elock(ep);
    80206a42:	00002097          	auipc	ra,0x2
    80206a46:	fa2080e7          	jalr	-94(ra) # 802089e4 <elock>
    if (!(ep->attribute & ATTR_DIRECTORY)) {
    80206a4a:	10094783          	lbu	a5,256(s2)
    80206a4e:	8bc1                	andi	a5,a5,16
    80206a50:	c38d                	beqz	a5,80206a72 <syscallChangeDir+0x7c>
        eput(ep);
        tf->a0 = -1;
        return;
    }    

    eunlock(ep);
    80206a52:	854a                	mv	a0,s2
    80206a54:	00002097          	auipc	ra,0x2
    80206a58:	fda080e7          	jalr	-38(ra) # 80208a2e <eunlock>
    eput(p->cwd);
    80206a5c:	1a89b503          	ld	a0,424(s3)
    80206a60:	00002097          	auipc	ra,0x2
    80206a64:	030080e7          	jalr	48(ra) # 80208a90 <eput>
    p->cwd = ep;
    80206a68:	1b29b423          	sd	s2,424(s3)
    tf->a0 = 0;
    80206a6c:	0604b823          	sd	zero,112(s1)
    80206a70:	a829                	j	80206a8a <syscallChangeDir+0x94>
        eunlock(ep);
    80206a72:	854a                	mv	a0,s2
    80206a74:	00002097          	auipc	ra,0x2
    80206a78:	fba080e7          	jalr	-70(ra) # 80208a2e <eunlock>
        eput(ep);
    80206a7c:	854a                	mv	a0,s2
    80206a7e:	00002097          	auipc	ra,0x2
    80206a82:	012080e7          	jalr	18(ra) # 80208a90 <eput>
        tf->a0 = -1;
    80206a86:	57fd                	li	a5,-1
    80206a88:	f8bc                	sd	a5,112(s1)
}
    80206a8a:	70f2                	ld	ra,312(sp)
    80206a8c:	7452                	ld	s0,304(sp)
    80206a8e:	74b2                	ld	s1,296(sp)
    80206a90:	7912                	ld	s2,288(sp)
    80206a92:	69f2                	ld	s3,280(sp)
    80206a94:	6131                	addi	sp,sp,320
    80206a96:	8082                	ret

0000000080206a98 <syscallPipe>:
    }
    
    tf->a0 = uva;
}

void syscallPipe(void) {
    80206a98:	715d                	addi	sp,sp,-80
    80206a9a:	e486                	sd	ra,72(sp)
    80206a9c:	e0a2                	sd	s0,64(sp)
    80206a9e:	fc26                	sd	s1,56(sp)
    80206aa0:	f84a                	sd	s2,48(sp)
    80206aa2:	f44e                	sd	s3,40(sp)
    80206aa4:	0880                	addi	s0,sp,80
    Trapframe* tf = getHartTrapFrame();
    80206aa6:	fffff097          	auipc	ra,0xfffff
    80206aaa:	0fe080e7          	jalr	254(ra) # 80205ba4 <getHartTrapFrame>
    80206aae:	84aa                	mv	s1,a0
    u64 fdarray = tf->a0;  // user pointer to array of two integers
    80206ab0:	07053983          	ld	s3,112(a0)
    struct file *rf, *wf;
    int fd0, fd1;
    struct Process* p = myproc();
    80206ab4:	ffffc097          	auipc	ra,0xffffc
    80206ab8:	efc080e7          	jalr	-260(ra) # 802029b0 <myproc>
    80206abc:	892a                	mv	s2,a0

    if (pipealloc(&rf, &wf) < 0) {
    80206abe:	fc040593          	addi	a1,s0,-64
    80206ac2:	fc840513          	addi	a0,s0,-56
    80206ac6:	00003097          	auipc	ra,0x3
    80206aca:	f12080e7          	jalr	-238(ra) # 802099d8 <pipealloc>
    80206ace:	0c054863          	bltz	a0,80206b9e <syscallPipe+0x106>
        goto bad;
    }

    fd0 = -1;
    80206ad2:	57fd                	li	a5,-1
    80206ad4:	faf42e23          	sw	a5,-68(s0)
    if ((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0) {
    80206ad8:	fc843503          	ld	a0,-56(s0)
    80206adc:	fffff097          	auipc	ra,0xfffff
    80206ae0:	75e080e7          	jalr	1886(ra) # 8020623a <fdalloc>
    80206ae4:	faa42e23          	sw	a0,-68(s0)
    80206ae8:	08054f63          	bltz	a0,80206b86 <syscallPipe+0xee>
    80206aec:	fc043503          	ld	a0,-64(s0)
    80206af0:	fffff097          	auipc	ra,0xfffff
    80206af4:	74a080e7          	jalr	1866(ra) # 8020623a <fdalloc>
    80206af8:	faa42c23          	sw	a0,-72(s0)
    80206afc:	06054a63          	bltz	a0,80206b70 <syscallPipe+0xd8>
        fileclose(rf);
        fileclose(wf);
        goto bad;
    }
    
    if (copyout(p->pgdir, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
    80206b00:	4691                	li	a3,4
    80206b02:	fbc40613          	addi	a2,s0,-68
    80206b06:	85ce                	mv	a1,s3
    80206b08:	16893503          	ld	a0,360(s2)
    80206b0c:	ffffc097          	auipc	ra,0xffffc
    80206b10:	8a2080e7          	jalr	-1886(ra) # 802023ae <copyout>
    80206b14:	02054063          	bltz	a0,80206b34 <syscallPipe+0x9c>
        copyout(p->pgdir, fdarray + sizeof(fd0), (char*)&fd1, sizeof(fd1)) <
    80206b18:	4691                	li	a3,4
    80206b1a:	fb840613          	addi	a2,s0,-72
    80206b1e:	00498593          	addi	a1,s3,4
    80206b22:	16893503          	ld	a0,360(s2)
    80206b26:	ffffc097          	auipc	ra,0xffffc
    80206b2a:	888080e7          	jalr	-1912(ra) # 802023ae <copyout>
    80206b2e:	4781                	li	a5,0
    if (copyout(p->pgdir, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
    80206b30:	06055863          	bgez	a0,80206ba0 <syscallPipe+0x108>
            0) {
        p->ofile[fd0] = 0;
    80206b34:	fbc42783          	lw	a5,-68(s0)
    80206b38:	03678793          	addi	a5,a5,54
    80206b3c:	078e                	slli	a5,a5,0x3
    80206b3e:	97ca                	add	a5,a5,s2
    80206b40:	0007b023          	sd	zero,0(a5)
        p->ofile[fd1] = 0;
    80206b44:	fb842783          	lw	a5,-72(s0)
    80206b48:	03678793          	addi	a5,a5,54
    80206b4c:	078e                	slli	a5,a5,0x3
    80206b4e:	00f90533          	add	a0,s2,a5
    80206b52:	00053023          	sd	zero,0(a0)
        fileclose(rf);
    80206b56:	fc843503          	ld	a0,-56(s0)
    80206b5a:	00003097          	auipc	ra,0x3
    80206b5e:	a7c080e7          	jalr	-1412(ra) # 802095d6 <fileclose>
        fileclose(wf);
    80206b62:	fc043503          	ld	a0,-64(s0)
    80206b66:	00003097          	auipc	ra,0x3
    80206b6a:	a70080e7          	jalr	-1424(ra) # 802095d6 <fileclose>
        goto bad;
    80206b6e:	a805                	j	80206b9e <syscallPipe+0x106>
        if (fd0 >= 0)
    80206b70:	fbc42783          	lw	a5,-68(s0)
    80206b74:	0007c963          	bltz	a5,80206b86 <syscallPipe+0xee>
            p->ofile[fd0] = 0;
    80206b78:	03678793          	addi	a5,a5,54
    80206b7c:	078e                	slli	a5,a5,0x3
    80206b7e:	00f90533          	add	a0,s2,a5
    80206b82:	00053023          	sd	zero,0(a0)
        fileclose(rf);
    80206b86:	fc843503          	ld	a0,-56(s0)
    80206b8a:	00003097          	auipc	ra,0x3
    80206b8e:	a4c080e7          	jalr	-1460(ra) # 802095d6 <fileclose>
        fileclose(wf);
    80206b92:	fc043503          	ld	a0,-64(s0)
    80206b96:	00003097          	auipc	ra,0x3
    80206b9a:	a40080e7          	jalr	-1472(ra) # 802095d6 <fileclose>
    
    tf->a0 = 0;
    return;

bad:
    tf->a0 = -1;
    80206b9e:	57fd                	li	a5,-1
    80206ba0:	f8bc                	sd	a5,112(s1)
}
    80206ba2:	60a6                	ld	ra,72(sp)
    80206ba4:	6406                	ld	s0,64(sp)
    80206ba6:	74e2                	ld	s1,56(sp)
    80206ba8:	7942                	ld	s2,48(sp)
    80206baa:	79a2                	ld	s3,40(sp)
    80206bac:	6161                	addi	sp,sp,80
    80206bae:	8082                	ret

0000000080206bb0 <syscallDevice>:

void syscallDevice(void) {
    80206bb0:	7139                	addi	sp,sp,-64
    80206bb2:	fc06                	sd	ra,56(sp)
    80206bb4:	f822                	sd	s0,48(sp)
    80206bb6:	f426                	sd	s1,40(sp)
    80206bb8:	f04a                	sd	s2,32(sp)
    80206bba:	ec4e                	sd	s3,24(sp)
    80206bbc:	e852                	sd	s4,16(sp)
    80206bbe:	e456                	sd	s5,8(sp)
    80206bc0:	0080                	addi	s0,sp,64
    Trapframe* tf = getHartTrapFrame();
    80206bc2:	fffff097          	auipc	ra,0xfffff
    80206bc6:	fe2080e7          	jalr	-30(ra) # 80205ba4 <getHartTrapFrame>
    int fd, omode = tf->a1;
    80206bca:	07853903          	ld	s2,120(a0)
    int major = tf->a0;
    80206bce:	07053a03          	ld	s4,112(a0)
    struct file* f;

    if (omode & O_CREATE) {
    80206bd2:	04097793          	andi	a5,s2,64
    80206bd6:	e785                	bnez	a5,80206bfe <syscallDevice+0x4e>
    80206bd8:	84aa                	mv	s1,a0
    80206bda:	00090a9b          	sext.w	s5,s2
        panic("dev file on FAT");
    }

    if (major < 0 || major >= NDEV) {
    80206bde:	000a079b          	sext.w	a5,s4
    80206be2:	470d                	li	a4,3
    80206be4:	02f77f63          	bgeu	a4,a5,80206c22 <syscallDevice+0x72>
    f->writable = (omode & O_WRONLY) || (omode & O_RDWR);

    tf->a0 = fd;
    return;

bad:
    80206be8:	557d                	li	a0,-1
    tf->a0 = fd;
    80206bea:	f8a8                	sd	a0,112(s1)
    tf->a0 = -1;
}
    80206bec:	70e2                	ld	ra,56(sp)
    80206bee:	7442                	ld	s0,48(sp)
    80206bf0:	74a2                	ld	s1,40(sp)
    80206bf2:	7902                	ld	s2,32(sp)
    80206bf4:	69e2                	ld	s3,24(sp)
    80206bf6:	6a42                	ld	s4,16(sp)
    80206bf8:	6aa2                	ld	s5,8(sp)
    80206bfa:	6121                	addi	sp,sp,64
    80206bfc:	8082                	ret
        panic("dev file on FAT");
    80206bfe:	00006697          	auipc	a3,0x6
    80206c02:	25268693          	addi	a3,a3,594 # 8020ce50 <__func__.0+0x68>
    80206c06:	00006617          	auipc	a2,0x6
    80206c0a:	2a260613          	addi	a2,a2,674 # 8020cea8 <__func__.4>
    80206c0e:	1c800593          	li	a1,456
    80206c12:	00006517          	auipc	a0,0x6
    80206c16:	24e50513          	addi	a0,a0,590 # 8020ce60 <__func__.0+0x78>
    80206c1a:	ffffa097          	auipc	ra,0xffffa
    80206c1e:	f32080e7          	jalr	-206(ra) # 80200b4c <_panic_>
    if ((f = filealloc()) == NULL || (fd = fdalloc(f)) < 0) {
    80206c22:	00003097          	auipc	ra,0x3
    80206c26:	8e4080e7          	jalr	-1820(ra) # 80209506 <filealloc>
    80206c2a:	89aa                	mv	s3,a0
    80206c2c:	dd55                	beqz	a0,80206be8 <syscallDevice+0x38>
    80206c2e:	fffff097          	auipc	ra,0xfffff
    80206c32:	60c080e7          	jalr	1548(ra) # 8020623a <fdalloc>
    80206c36:	02054863          	bltz	a0,80206c66 <syscallDevice+0xb6>
    f->type = FD_DEVICE;
    80206c3a:	478d                	li	a5,3
    80206c3c:	00f9a023          	sw	a5,0(s3)
    f->off = 0;
    80206c40:	0209a023          	sw	zero,32(s3)
    f->ep = 0;
    80206c44:	0009bc23          	sd	zero,24(s3)
    f->major = major;
    80206c48:	03499223          	sh	s4,36(s3)
    f->readable = !(omode & O_WRONLY);
    80206c4c:	001aca93          	xori	s5,s5,1
    80206c50:	001afa93          	andi	s5,s5,1
    80206c54:	01598423          	sb	s5,8(s3)
    f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
    80206c58:	00397913          	andi	s2,s2,3
    80206c5c:	01203933          	snez	s2,s2
    80206c60:	012984a3          	sb	s2,9(s3)
    return;
    80206c64:	b759                	j	80206bea <syscallDevice+0x3a>
            fileclose(f);
    80206c66:	854e                	mv	a0,s3
    80206c68:	00003097          	auipc	ra,0x3
    80206c6c:	96e080e7          	jalr	-1682(ra) # 802095d6 <fileclose>
    80206c70:	bfa5                	j	80206be8 <syscallDevice+0x38>

0000000080206c72 <syscallReadDir>:

void syscallReadDir(void) {
    80206c72:	7179                	addi	sp,sp,-48
    80206c74:	f406                	sd	ra,40(sp)
    80206c76:	f022                	sd	s0,32(sp)
    80206c78:	ec26                	sd	s1,24(sp)
    80206c7a:	e84a                	sd	s2,16(sp)
    80206c7c:	e44e                	sd	s3,8(sp)
    80206c7e:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    80206c80:	fffff097          	auipc	ra,0xfffff
    80206c84:	f24080e7          	jalr	-220(ra) # 80205ba4 <getHartTrapFrame>
    80206c88:	84aa                	mv	s1,a0
    struct file* f;
    int fd = tf->a0;
    80206c8a:	07053903          	ld	s2,112(a0)
    u64 uva = tf->a1;
    80206c8e:	07853983          	ld	s3,120(a0)

    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206c92:	0009071b          	sext.w	a4,s2
    80206c96:	07f00793          	li	a5,127
    80206c9a:	00e7fb63          	bgeu	a5,a4,80206cb0 <syscallReadDir+0x3e>
        tf->a0 = -1;
        return;
    80206c9e:	557d                	li	a0,-1
        tf->a0 = -1;
    80206ca0:	f8a8                	sd	a0,112(s1)
    }
    
    tf->a0 = dirnext(f, uva);
}
    80206ca2:	70a2                	ld	ra,40(sp)
    80206ca4:	7402                	ld	s0,32(sp)
    80206ca6:	64e2                	ld	s1,24(sp)
    80206ca8:	6942                	ld	s2,16(sp)
    80206caa:	69a2                	ld	s3,8(sp)
    80206cac:	6145                	addi	sp,sp,48
    80206cae:	8082                	ret
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
    80206cb0:	ffffc097          	auipc	ra,0xffffc
    80206cb4:	d00080e7          	jalr	-768(ra) # 802029b0 <myproc>
    80206cb8:	2901                	sext.w	s2,s2
    80206cba:	03690913          	addi	s2,s2,54
    80206cbe:	090e                	slli	s2,s2,0x3
    80206cc0:	954a                	add	a0,a0,s2
    80206cc2:	6108                	ld	a0,0(a0)
    80206cc4:	dd69                	beqz	a0,80206c9e <syscallReadDir+0x2c>
    tf->a0 = dirnext(f, uva);
    80206cc6:	85ce                	mv	a1,s3
    80206cc8:	00003097          	auipc	ra,0x3
    80206ccc:	c2a080e7          	jalr	-982(ra) # 802098f2 <dirnext>
    80206cd0:	bfc1                	j	80206ca0 <syscallReadDir+0x2e>

0000000080206cd2 <sys_rename>:
    return 0;
} */

// Must hold too many locks at a time! It's possible to raise a deadlock.
// Because this op takes some steps, we can't promise
u64 sys_rename(void) {
    80206cd2:	c4010113          	addi	sp,sp,-960
    80206cd6:	3a113c23          	sd	ra,952(sp)
    80206cda:	3a813823          	sd	s0,944(sp)
    80206cde:	3a913423          	sd	s1,936(sp)
    80206ce2:	3b213023          	sd	s2,928(sp)
    80206ce6:	39313c23          	sd	s3,920(sp)
    80206cea:	39413823          	sd	s4,912(sp)
    80206cee:	0780                	addi	s0,sp,960
    char old[FAT32_MAX_PATH], new[FAT32_MAX_PATH];
    if (argstr(0, old, FAT32_MAX_PATH) < 0 ||
    80206cf0:	10400613          	li	a2,260
    80206cf4:	ec840593          	addi	a1,s0,-312
    80206cf8:	4501                	li	a0,0
    80206cfa:	ffffd097          	auipc	ra,0xffffd
    80206cfe:	15a080e7          	jalr	346(ra) # 80203e54 <argstr>
        argstr(1, new, FAT32_MAX_PATH) < 0) {
        return -1;
    80206d02:	57fd                	li	a5,-1
    if (argstr(0, old, FAT32_MAX_PATH) < 0 ||
    80206d04:	0e054163          	bltz	a0,80206de6 <sys_rename+0x114>
        argstr(1, new, FAT32_MAX_PATH) < 0) {
    80206d08:	10400613          	li	a2,260
    80206d0c:	dc040593          	addi	a1,s0,-576
    80206d10:	4505                	li	a0,1
    80206d12:	ffffd097          	auipc	ra,0xffffd
    80206d16:	142080e7          	jalr	322(ra) # 80203e54 <argstr>
        return -1;
    80206d1a:	57fd                	li	a5,-1
    if (argstr(0, old, FAT32_MAX_PATH) < 0 ||
    80206d1c:	0c054563          	bltz	a0,80206de6 <sys_rename+0x114>
    }

    struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
    int srclock = 0;
    char* name;
    if ((src = ename(AT_FDCWD, old)) == NULL || (pdst = enameparent(AT_FDCWD, new, old)) == NULL ||
    80206d20:	ec840593          	addi	a1,s0,-312
    80206d24:	f9c00513          	li	a0,-100
    80206d28:	00002097          	auipc	ra,0x2
    80206d2c:	3de080e7          	jalr	990(ra) # 80209106 <ename>
    80206d30:	84aa                	mv	s1,a0
    80206d32:	1c050b63          	beqz	a0,80206f08 <sys_rename+0x236>
    80206d36:	ec840613          	addi	a2,s0,-312
    80206d3a:	dc040593          	addi	a1,s0,-576
    80206d3e:	f9c00513          	li	a0,-100
    80206d42:	00002097          	auipc	ra,0x2
    80206d46:	660080e7          	jalr	1632(ra) # 802093a2 <enameparent>
    80206d4a:	892a                	mv	s2,a0
    80206d4c:	cd35                	beqz	a0,80206dc8 <sys_rename+0xf6>
        (name = formatname(old)) == NULL) {
    80206d4e:	ec840513          	addi	a0,s0,-312
    80206d52:	00001097          	auipc	ra,0x1
    80206d56:	52a080e7          	jalr	1322(ra) # 8020827c <formatname>
    80206d5a:	89aa                	mv	s3,a0
    if ((src = ename(AT_FDCWD, old)) == NULL || (pdst = enameparent(AT_FDCWD, new, old)) == NULL ||
    80206d5c:	c535                	beqz	a0,80206dc8 <sys_rename+0xf6>
        goto fail;  // src doesn't exist || dst parent doesn't exist || illegal
                    // new name
    }
    for (struct dirent* ep = pdst; ep != NULL; ep = ep->parent) {
        if (ep ==
    80206d5e:	07248563          	beq	s1,s2,80206dc8 <sys_rename+0xf6>
    for (struct dirent* ep = pdst; ep != NULL; ep = ep->parent) {
    80206d62:	87ca                	mv	a5,s2
    80206d64:	1387b783          	ld	a5,312(a5)
    80206d68:	c781                	beqz	a5,80206d70 <sys_rename+0x9e>
        if (ep ==
    80206d6a:	fef49de3          	bne	s1,a5,80206d64 <sys_rename+0x92>
    80206d6e:	a8a9                	j	80206dc8 <sys_rename+0xf6>
            goto fail;
        }
    }

    uint off;
    elock(src);  // must hold child's lock before acquiring parent's, because we
    80206d70:	8526                	mv	a0,s1
    80206d72:	00002097          	auipc	ra,0x2
    80206d76:	c72080e7          	jalr	-910(ra) # 802089e4 <elock>
                 // do so in other similar cases
    srclock = 1;
    elock(pdst);
    80206d7a:	854a                	mv	a0,s2
    80206d7c:	00002097          	auipc	ra,0x2
    80206d80:	c68080e7          	jalr	-920(ra) # 802089e4 <elock>
    dst = dirlookup(pdst, name, &off);
    80206d84:	dbc40613          	addi	a2,s0,-580
    80206d88:	85ce                	mv	a1,s3
    80206d8a:	854a                	mv	a0,s2
    80206d8c:	00002097          	auipc	ra,0x2
    80206d90:	058080e7          	jalr	88(ra) # 80208de4 <dirlookup>
    80206d94:	8a2a                	mv	s4,a0
    if (dst != NULL) {
    80206d96:	cd45                	beqz	a0,80206e4e <sys_rename+0x17c>
        eunlock(pdst);
    80206d98:	854a                	mv	a0,s2
    80206d9a:	00002097          	auipc	ra,0x2
    80206d9e:	c94080e7          	jalr	-876(ra) # 80208a2e <eunlock>
        if (src == dst) {
    80206da2:	01448963          	beq	s1,s4,80206db4 <sys_rename+0xe2>
            goto fail;
        } else if (src->attribute & dst->attribute & ATTR_DIRECTORY) {
    80206da6:	1004c783          	lbu	a5,256(s1)
    80206daa:	100a4703          	lbu	a4,256(s4)
    80206dae:	8ff9                	and	a5,a5,a4
    80206db0:	8bc1                	andi	a5,a5,16
    80206db2:	ebb1                	bnez	a5,80206e06 <sys_rename+0x134>

    return 0;

fail:
    if (srclock)
        eunlock(src);
    80206db4:	8526                	mv	a0,s1
    80206db6:	00002097          	auipc	ra,0x2
    80206dba:	c78080e7          	jalr	-904(ra) # 80208a2e <eunlock>
    if (dst)
        eput(dst);
    80206dbe:	8552                	mv	a0,s4
    80206dc0:	00002097          	auipc	ra,0x2
    80206dc4:	cd0080e7          	jalr	-816(ra) # 80208a90 <eput>
    if (pdst)
    80206dc8:	00090763          	beqz	s2,80206dd6 <sys_rename+0x104>
        eput(pdst);
    80206dcc:	854a                	mv	a0,s2
    80206dce:	00002097          	auipc	ra,0x2
    80206dd2:	cc2080e7          	jalr	-830(ra) # 80208a90 <eput>
    if (src)
        eput(src);
    return -1;
    80206dd6:	57fd                	li	a5,-1
    if (src)
    80206dd8:	c499                	beqz	s1,80206de6 <sys_rename+0x114>
        eput(src);
    80206dda:	8526                	mv	a0,s1
    80206ddc:	00002097          	auipc	ra,0x2
    80206de0:	cb4080e7          	jalr	-844(ra) # 80208a90 <eput>
    return -1;
    80206de4:	57fd                	li	a5,-1
}
    80206de6:	853e                	mv	a0,a5
    80206de8:	3b813083          	ld	ra,952(sp)
    80206dec:	3b013403          	ld	s0,944(sp)
    80206df0:	3a813483          	ld	s1,936(sp)
    80206df4:	3a013903          	ld	s2,928(sp)
    80206df8:	39813983          	ld	s3,920(sp)
    80206dfc:	39013a03          	ld	s4,912(sp)
    80206e00:	3c010113          	addi	sp,sp,960
    80206e04:	8082                	ret
            elock(dst);
    80206e06:	8552                	mv	a0,s4
    80206e08:	00002097          	auipc	ra,0x2
    80206e0c:	bdc080e7          	jalr	-1060(ra) # 802089e4 <elock>
    ep.valid = 0;
    80206e10:	d6041523          	sh	zero,-662(s0)
    return enext(dp, &ep, 2 * 32, &count) == -1; // skip the "." and ".."
    80206e14:	c4440693          	addi	a3,s0,-956
    80206e18:	04000613          	li	a2,64
    80206e1c:	c4840593          	addi	a1,s0,-952
    80206e20:	8552                	mv	a0,s4
    80206e22:	00002097          	auipc	ra,0x2
    80206e26:	dec080e7          	jalr	-532(ra) # 80208c0e <enext>
            if (!isDirEmpty(dst)) {  // it's ok to overwrite an empty dir
    80206e2a:	57fd                	li	a5,-1
    80206e2c:	0cf51863          	bne	a0,a5,80206efc <sys_rename+0x22a>
            elock(pdst);
    80206e30:	854a                	mv	a0,s2
    80206e32:	00002097          	auipc	ra,0x2
    80206e36:	bb2080e7          	jalr	-1102(ra) # 802089e4 <elock>
        eremove(dst);
    80206e3a:	8552                	mv	a0,s4
    80206e3c:	00002097          	auipc	ra,0x2
    80206e40:	a5e080e7          	jalr	-1442(ra) # 8020889a <eremove>
        eunlock(dst);
    80206e44:	8552                	mv	a0,s4
    80206e46:	00002097          	auipc	ra,0x2
    80206e4a:	be8080e7          	jalr	-1048(ra) # 80208a2e <eunlock>
    memmove(src->filename, name, FAT32_MAX_FILENAME);
    80206e4e:	0ff00613          	li	a2,255
    80206e52:	85ce                	mv	a1,s3
    80206e54:	8526                	mv	a0,s1
    80206e56:	fffff097          	auipc	ra,0xfffff
    80206e5a:	f6a080e7          	jalr	-150(ra) # 80205dc0 <memmove>
    emake(pdst, src, off);
    80206e5e:	dbc42603          	lw	a2,-580(s0)
    80206e62:	85a6                	mv	a1,s1
    80206e64:	854a                	mv	a0,s2
    80206e66:	00001097          	auipc	ra,0x1
    80206e6a:	4ce080e7          	jalr	1230(ra) # 80208334 <emake>
    if (src->parent != pdst) {
    80206e6e:	1384b783          	ld	a5,312(s1)
    80206e72:	01278d63          	beq	a5,s2,80206e8c <sys_rename+0x1ba>
        eunlock(pdst);
    80206e76:	854a                	mv	a0,s2
    80206e78:	00002097          	auipc	ra,0x2
    80206e7c:	bb6080e7          	jalr	-1098(ra) # 80208a2e <eunlock>
        elock(src->parent);
    80206e80:	1384b503          	ld	a0,312(s1)
    80206e84:	00002097          	auipc	ra,0x2
    80206e88:	b60080e7          	jalr	-1184(ra) # 802089e4 <elock>
    eremove(src);
    80206e8c:	8526                	mv	a0,s1
    80206e8e:	00002097          	auipc	ra,0x2
    80206e92:	a0c080e7          	jalr	-1524(ra) # 8020889a <eremove>
    eunlock(src->parent);
    80206e96:	1384b503          	ld	a0,312(s1)
    80206e9a:	00002097          	auipc	ra,0x2
    80206e9e:	b94080e7          	jalr	-1132(ra) # 80208a2e <eunlock>
    struct dirent* psrc = src->parent;  // src must not be root, or it won't
    80206ea2:	1384b983          	ld	s3,312(s1)
    src->parent = edup(pdst);
    80206ea6:	854a                	mv	a0,s2
    80206ea8:	00002097          	auipc	ra,0x2
    80206eac:	8b2080e7          	jalr	-1870(ra) # 8020875a <edup>
    80206eb0:	12a4bc23          	sd	a0,312(s1)
    src->off = off;
    80206eb4:	dbc42783          	lw	a5,-580(s0)
    80206eb8:	12f4aa23          	sw	a5,308(s1)
    src->valid = 1;
    80206ebc:	4785                	li	a5,1
    80206ebe:	12f49123          	sh	a5,290(s1)
    eunlock(src);
    80206ec2:	8526                	mv	a0,s1
    80206ec4:	00002097          	auipc	ra,0x2
    80206ec8:	b6a080e7          	jalr	-1174(ra) # 80208a2e <eunlock>
    eput(psrc);
    80206ecc:	854e                	mv	a0,s3
    80206ece:	00002097          	auipc	ra,0x2
    80206ed2:	bc2080e7          	jalr	-1086(ra) # 80208a90 <eput>
    if (dst) {
    80206ed6:	000a0763          	beqz	s4,80206ee4 <sys_rename+0x212>
        eput(dst);
    80206eda:	8552                	mv	a0,s4
    80206edc:	00002097          	auipc	ra,0x2
    80206ee0:	bb4080e7          	jalr	-1100(ra) # 80208a90 <eput>
    eput(pdst);
    80206ee4:	854a                	mv	a0,s2
    80206ee6:	00002097          	auipc	ra,0x2
    80206eea:	baa080e7          	jalr	-1110(ra) # 80208a90 <eput>
    eput(src);
    80206eee:	8526                	mv	a0,s1
    80206ef0:	00002097          	auipc	ra,0x2
    80206ef4:	ba0080e7          	jalr	-1120(ra) # 80208a90 <eput>
    return 0;
    80206ef8:	4781                	li	a5,0
    80206efa:	b5f5                	j	80206de6 <sys_rename+0x114>
                eunlock(dst);
    80206efc:	8552                	mv	a0,s4
    80206efe:	00002097          	auipc	ra,0x2
    80206f02:	b30080e7          	jalr	-1232(ra) # 80208a2e <eunlock>
                goto fail;
    80206f06:	b57d                	j	80206db4 <sys_rename+0xe2>
    struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
    80206f08:	892a                	mv	s2,a0
    if (dst)
    80206f0a:	bd7d                	j	80206dc8 <sys_rename+0xf6>

0000000080206f0c <syscallMount>:

void syscallMount() {
    80206f0c:	d9010113          	addi	sp,sp,-624
    80206f10:	26113423          	sd	ra,616(sp)
    80206f14:	26813023          	sd	s0,608(sp)
    80206f18:	24913c23          	sd	s1,600(sp)
    80206f1c:	25213823          	sd	s2,592(sp)
    80206f20:	25313423          	sd	s3,584(sp)
    80206f24:	25413023          	sd	s4,576(sp)
    80206f28:	23513c23          	sd	s5,568(sp)
    80206f2c:	1c80                	addi	s0,sp,624
    Trapframe *tf = getHartTrapFrame();
    80206f2e:	fffff097          	auipc	ra,0xfffff
    80206f32:	c76080e7          	jalr	-906(ra) # 80205ba4 <getHartTrapFrame>
    80206f36:	84aa                	mv	s1,a0
    u64 imagePathUva = tf->a0, mountPathUva = tf->a1, typeUva = tf->a2, dataUva = tf->a4;
    80206f38:	07053903          	ld	s2,112(a0)
    80206f3c:	07853a03          	ld	s4,120(a0)
    80206f40:	09053a83          	ld	s5,144(a0)
    int flag = tf->a3;
    80206f44:	08853983          	ld	s3,136(a0)
    char imagePath[FAT32_MAX_FILENAME], mountPath[FAT32_MAX_FILENAME], type[10], data[10];
    if (fetchstr(typeUva, type, 10) < 0 || strncmp(type, "vfat", 4)) {
    80206f48:	4629                	li	a2,10
    80206f4a:	db040593          	addi	a1,s0,-592
    80206f4e:	6148                	ld	a0,128(a0)
    80206f50:	ffffd097          	auipc	ra,0xffffd
    80206f54:	eba080e7          	jalr	-326(ra) # 80203e0a <fetchstr>
    80206f58:	00054e63          	bltz	a0,80206f74 <syscallMount+0x68>
    80206f5c:	4611                	li	a2,4
    80206f5e:	00006597          	auipc	a1,0x6
    80206f62:	f1258593          	addi	a1,a1,-238 # 8020ce70 <__func__.0+0x88>
    80206f66:	db040513          	addi	a0,s0,-592
    80206f6a:	fffff097          	auipc	ra,0xfffff
    80206f6e:	eca080e7          	jalr	-310(ra) # 80205e34 <strncmp>
    80206f72:	c505                	beqz	a0,80206f9a <syscallMount+0x8e>
        tf->a0 = -1;
    80206f74:	57fd                	li	a5,-1
    80206f76:	f8bc                	sd	a5,112(s1)
    fs->read = mountBlockRead;
    fatInit(fs);
    fs->next = dp->head;
    dp->head = fs;
    tf->a0 = 0;
}
    80206f78:	26813083          	ld	ra,616(sp)
    80206f7c:	26013403          	ld	s0,608(sp)
    80206f80:	25813483          	ld	s1,600(sp)
    80206f84:	25013903          	ld	s2,592(sp)
    80206f88:	24813983          	ld	s3,584(sp)
    80206f8c:	24013a03          	ld	s4,576(sp)
    80206f90:	23813a83          	ld	s5,568(sp)
    80206f94:	27010113          	addi	sp,sp,624
    80206f98:	8082                	ret
    if (fetchstr(imagePathUva, imagePath, FAT32_MAX_PATH) < 0 || (ep = ename(AT_FDCWD, imagePath)) == NULL) {
    80206f9a:	10400613          	li	a2,260
    80206f9e:	ec040593          	addi	a1,s0,-320
    80206fa2:	854a                	mv	a0,s2
    80206fa4:	ffffd097          	auipc	ra,0xffffd
    80206fa8:	e66080e7          	jalr	-410(ra) # 80203e0a <fetchstr>
    80206fac:	fc0544e3          	bltz	a0,80206f74 <syscallMount+0x68>
    80206fb0:	ec040593          	addi	a1,s0,-320
    80206fb4:	f9c00513          	li	a0,-100
    80206fb8:	00002097          	auipc	ra,0x2
    80206fbc:	14e080e7          	jalr	334(ra) # 80209106 <ename>
    80206fc0:	892a                	mv	s2,a0
    80206fc2:	d94d                	beqz	a0,80206f74 <syscallMount+0x68>
    if (fetchstr(mountPathUva, mountPath, FAT32_MAX_PATH) < 0 || (dp = ename(AT_FDCWD, mountPath)) == NULL) {
    80206fc4:	10400613          	li	a2,260
    80206fc8:	dc040593          	addi	a1,s0,-576
    80206fcc:	8552                	mv	a0,s4
    80206fce:	ffffd097          	auipc	ra,0xffffd
    80206fd2:	e3c080e7          	jalr	-452(ra) # 80203e0a <fetchstr>
    80206fd6:	f8054fe3          	bltz	a0,80206f74 <syscallMount+0x68>
    80206fda:	dc040593          	addi	a1,s0,-576
    80206fde:	f9c00513          	li	a0,-100
    80206fe2:	00002097          	auipc	ra,0x2
    80206fe6:	124080e7          	jalr	292(ra) # 80209106 <ename>
    80206fea:	8a2a                	mv	s4,a0
    80206fec:	d541                	beqz	a0,80206f74 <syscallMount+0x68>
    if (dataUva && fetchstr(dataUva, data, 10) < 0) {
    80206fee:	000a8c63          	beqz	s5,80207006 <syscallMount+0xfa>
    80206ff2:	4629                	li	a2,10
    80206ff4:	da040593          	addi	a1,s0,-608
    80206ff8:	8556                	mv	a0,s5
    80206ffa:	ffffd097          	auipc	ra,0xffffd
    80206ffe:	e10080e7          	jalr	-496(ra) # 80203e0a <fetchstr>
    80207002:	f60549e3          	bltz	a0,80206f74 <syscallMount+0x68>
    assert(flag == 0);
    80207006:	0009869b          	sext.w	a3,s3
    8020700a:	0016b693          	seqz	a3,a3
    8020700e:	00006617          	auipc	a2,0x6
    80207012:	eaa60613          	addi	a2,a2,-342 # 8020ceb8 <__func__.3>
    80207016:	2ab00593          	li	a1,683
    8020701a:	00006517          	auipc	a0,0x6
    8020701e:	e4650513          	addi	a0,a0,-442 # 8020ce60 <__func__.0+0x78>
    80207022:	ffffa097          	auipc	ra,0xffffa
    80207026:	ba0080e7          	jalr	-1120(ra) # 80200bc2 <_assert_>
    if (fsAlloc(&fs) < 0) {
    8020702a:	d9840513          	addi	a0,s0,-616
    8020702e:	fffff097          	auipc	ra,0xfffff
    80207032:	f46080e7          	jalr	-186(ra) # 80205f74 <fsAlloc>
    80207036:	f2054fe3          	bltz	a0,80206f74 <syscallMount+0x68>
    struct file *file = filealloc();
    8020703a:	00002097          	auipc	ra,0x2
    8020703e:	4cc080e7          	jalr	1228(ra) # 80209506 <filealloc>
    80207042:	87aa                	mv	a5,a0
    file->off = 0;
    80207044:	02052023          	sw	zero,32(a0)
    file->readable = true;
    80207048:	4705                	li	a4,1
    8020704a:	00e50423          	sb	a4,8(a0)
    file->writable = true;
    8020704e:	00e504a3          	sb	a4,9(a0)
    if (ep->head) {
    80207052:	12893703          	ld	a4,296(s2)
    80207056:	c325                	beqz	a4,802070b6 <syscallMount+0x1aa>
        file->type = ep->head->image->type;
    80207058:	1e073703          	ld	a4,480(a4)
    8020705c:	4318                	lw	a4,0(a4)
    8020705e:	c118                	sw	a4,0(a0)
        file->ep = ep->head->image->ep;
    80207060:	12893703          	ld	a4,296(s2)
    80207064:	1e073703          	ld	a4,480(a4)
    80207068:	01873903          	ld	s2,24(a4)
    8020706c:	0127bc23          	sd	s2,24(a5)
    fs->name[0] = 'm';
    80207070:	d9843703          	ld	a4,-616(s0)
    80207074:	06d00693          	li	a3,109
    80207078:	00d700a3          	sb	a3,1(a4)
    fs->name[1] = 0;
    8020707c:	d9843703          	ld	a4,-616(s0)
    80207080:	00070123          	sb	zero,2(a4)
    fs->image = file;
    80207084:	d9843503          	ld	a0,-616(s0)
    80207088:	1ef53023          	sd	a5,480(a0)
    fs->read = mountBlockRead;
    8020708c:	00000797          	auipc	a5,0x0
    80207090:	66e78793          	addi	a5,a5,1646 # 802076fa <mountBlockRead>
    80207094:	1ef53c23          	sd	a5,504(a0)
    fatInit(fs);
    80207098:	fffff097          	auipc	ra,0xfffff
    8020709c:	f3a080e7          	jalr	-198(ra) # 80205fd2 <fatInit>
    fs->next = dp->head;
    802070a0:	d9843783          	ld	a5,-616(s0)
    802070a4:	128a3703          	ld	a4,296(s4)
    802070a8:	1ee7b423          	sd	a4,488(a5)
    dp->head = fs;
    802070ac:	12fa3423          	sd	a5,296(s4)
    tf->a0 = 0;
    802070b0:	0604b823          	sd	zero,112(s1)
    802070b4:	b5d1                	j	80206f78 <syscallMount+0x6c>
        file->type = FD_ENTRY;
    802070b6:	4709                	li	a4,2
    802070b8:	c118                	sw	a4,0(a0)
        file->ep = ep;
    802070ba:	bf4d                	j	8020706c <syscallMount+0x160>

00000000802070bc <syscallUmount>:

void syscallUmount() {
    802070bc:	7169                	addi	sp,sp,-304
    802070be:	f606                	sd	ra,296(sp)
    802070c0:	f222                	sd	s0,288(sp)
    802070c2:	ee26                	sd	s1,280(sp)
    802070c4:	ea4a                	sd	s2,272(sp)
    802070c6:	e64e                	sd	s3,264(sp)
    802070c8:	e252                	sd	s4,256(sp)
    802070ca:	1a00                	addi	s0,sp,304
    Trapframe *tf = getHartTrapFrame();
    802070cc:	fffff097          	auipc	ra,0xfffff
    802070d0:	ad8080e7          	jalr	-1320(ra) # 80205ba4 <getHartTrapFrame>
    802070d4:	8a2a                	mv	s4,a0
    u64 mountPathUva = tf->a0;
    int flag = tf->a1;
    802070d6:	7d24                	ld	s1,120(a0)
    char mountPath[FAT32_MAX_FILENAME];
    struct dirent *ep;

    if (fetchstr(mountPathUva, mountPath, FAT32_MAX_PATH) < 0 || (ep = ename(AT_FDCWD, mountPath)) == NULL) {
    802070d8:	10400613          	li	a2,260
    802070dc:	ed040593          	addi	a1,s0,-304
    802070e0:	7928                	ld	a0,112(a0)
    802070e2:	ffffd097          	auipc	ra,0xffffd
    802070e6:	d28080e7          	jalr	-728(ra) # 80203e0a <fetchstr>
    802070ea:	0a054763          	bltz	a0,80207198 <syscallUmount+0xdc>
    802070ee:	ed040593          	addi	a1,s0,-304
    802070f2:	f9c00513          	li	a0,-100
    802070f6:	00002097          	auipc	ra,0x2
    802070fa:	010080e7          	jalr	16(ra) # 80209106 <ename>
    802070fe:	892a                	mv	s2,a0
    80207100:	cd41                	beqz	a0,80207198 <syscallUmount+0xdc>
        tf->a0 = -1;
        return;
    }

    assert(flag == 0);
    80207102:	0004869b          	sext.w	a3,s1
    80207106:	0016b693          	seqz	a3,a3
    8020710a:	00006617          	auipc	a2,0x6
    8020710e:	dbe60613          	addi	a2,a2,-578 # 8020cec8 <__func__.2>
    80207112:	2d300593          	li	a1,723
    80207116:	00006517          	auipc	a0,0x6
    8020711a:	d4a50513          	addi	a0,a0,-694 # 8020ce60 <__func__.0+0x78>
    8020711e:	ffffa097          	auipc	ra,0xffffa
    80207122:	aa4080e7          	jalr	-1372(ra) # 80200bc2 <_assert_>

    if (ep->head == NULL) {
    80207126:	12893783          	ld	a5,296(s2)
    8020712a:	c7bd                	beqz	a5,80207198 <syscallUmount+0xdc>
        tf->a0 = -1;
        return;
    }

    extern DirentCache direntCache;
    acquireLock(&direntCache.lock);
    8020712c:	003f6517          	auipc	a0,0x3f6
    80207130:	6a450513          	addi	a0,a0,1700 # 805fd7d0 <direntCache>
    80207134:	fffff097          	auipc	ra,0xfffff
    80207138:	97a080e7          	jalr	-1670(ra) # 80205aae <acquireLock>
    // bool canUmount = true;
    for(int i = 0; i < ENTRY_CACHE_NUM; i++) {
    8020713c:	003f6497          	auipc	s1,0x3f6
    80207140:	6ac48493          	addi	s1,s1,1708 # 805fd7e8 <direntCache+0x18>
    80207144:	003fb997          	auipc	s3,0x3fb
    80207148:	e8498993          	addi	s3,s3,-380 # 80601fc8 <fileSystem>
    8020714c:	a029                	j	80207156 <syscallUmount+0x9a>
    8020714e:	17048493          	addi	s1,s1,368
    80207152:	01348e63          	beq	s1,s3,8020716e <syscallUmount+0xb2>
        struct dirent* entry = &direntCache.entries[i];
        if (entry->fileSystem == ep->head) {
    80207156:	1184b703          	ld	a4,280(s1)
    8020715a:	12893783          	ld	a5,296(s2)
    8020715e:	fef718e3          	bne	a4,a5,8020714e <syscallUmount+0x92>
            eput(entry);
    80207162:	8526                	mv	a0,s1
    80207164:	00002097          	auipc	ra,0x2
    80207168:	92c080e7          	jalr	-1748(ra) # 80208a90 <eput>
    8020716c:	b7cd                	j	8020714e <syscallUmount+0x92>
        }
    }

    releaseLock(&direntCache.lock);
    8020716e:	003f6517          	auipc	a0,0x3f6
    80207172:	66250513          	addi	a0,a0,1634 # 805fd7d0 <direntCache>
    80207176:	fffff097          	auipc	ra,0xfffff
    8020717a:	9b4080e7          	jalr	-1612(ra) # 80205b2a <releaseLock>

    ep->head->valid = 0;
    8020717e:	12893783          	ld	a5,296(s2)
    80207182:	00078023          	sb	zero,0(a5)
    ep->head = ep->head->next;
    80207186:	12893783          	ld	a5,296(s2)
    8020718a:	1e87b783          	ld	a5,488(a5)
    8020718e:	12f93423          	sd	a5,296(s2)

    tf->a0 = 0;
    80207192:	060a3823          	sd	zero,112(s4)
    80207196:	a021                	j	8020719e <syscallUmount+0xe2>
        tf->a0 = -1;
    80207198:	57fd                	li	a5,-1
    8020719a:	06fa3823          	sd	a5,112(s4)
}
    8020719e:	70b2                	ld	ra,296(sp)
    802071a0:	7412                	ld	s0,288(sp)
    802071a2:	64f2                	ld	s1,280(sp)
    802071a4:	6952                	ld	s2,272(sp)
    802071a6:	69b2                	ld	s3,264(sp)
    802071a8:	6a12                	ld	s4,256(sp)
    802071aa:	6155                	addi	sp,sp,304
    802071ac:	8082                	ret

00000000802071ae <syscallUnlinkAt>:
        eunlock(targetPoint);
    }
    tf->a0 = -1;
}

void syscallUnlinkAt() {
    802071ae:	7169                	addi	sp,sp,-304
    802071b0:	f606                	sd	ra,296(sp)
    802071b2:	f222                	sd	s0,288(sp)
    802071b4:	ee26                	sd	s1,280(sp)
    802071b6:	ea4a                	sd	s2,272(sp)
    802071b8:	1a00                	addi	s0,sp,304
    Trapframe *tf = getHartTrapFrame();
    802071ba:	fffff097          	auipc	ra,0xfffff
    802071be:	9ea080e7          	jalr	-1558(ra) # 80205ba4 <getHartTrapFrame>
    802071c2:	84aa                	mv	s1,a0
    int dirFd = tf->a0, flags = tf->a2;
    802071c4:	07053903          	ld	s2,112(a0)
    
    assert(flags == 0);
    802071c8:	08052683          	lw	a3,128(a0)
    802071cc:	0016b693          	seqz	a3,a3
    802071d0:	00006617          	auipc	a2,0x6
    802071d4:	d0860613          	addi	a2,a2,-760 # 8020ced8 <__func__.0>
    802071d8:	32000593          	li	a1,800
    802071dc:	00006517          	auipc	a0,0x6
    802071e0:	c8450513          	addi	a0,a0,-892 # 8020ce60 <__func__.0+0x78>
    802071e4:	ffffa097          	auipc	ra,0xffffa
    802071e8:	9de080e7          	jalr	-1570(ra) # 80200bc2 <_assert_>
    char path[FAT32_MAX_PATH];
    if (fetchstr(tf->a1, path, FAT32_MAX_PATH) < 0) {
    802071ec:	10400613          	li	a2,260
    802071f0:	ed840593          	addi	a1,s0,-296
    802071f4:	7ca8                	ld	a0,120(s1)
    802071f6:	ffffd097          	auipc	ra,0xffffd
    802071fa:	c14080e7          	jalr	-1004(ra) # 80203e0a <fetchstr>
    802071fe:	02054663          	bltz	a0,8020722a <syscallUnlinkAt+0x7c>
        tf->a0 = -1;
        return;
    }
    struct dirent* entryPoint;

    if((entryPoint = ename(dirFd, path)) == NULL) {
    80207202:	ed840593          	addi	a1,s0,-296
    80207206:	0009051b          	sext.w	a0,s2
    8020720a:	00002097          	auipc	ra,0x2
    8020720e:	efc080e7          	jalr	-260(ra) # 80209106 <ename>
    80207212:	c909                	beqz	a0,80207224 <syscallUnlinkAt+0x76>
        goto bad;
    }

    entryPoint->_nt_res = 0;
    80207214:	10050a23          	sb	zero,276(a0)
    eremove(entryPoint);
    80207218:	00001097          	auipc	ra,0x1
    8020721c:	682080e7          	jalr	1666(ra) # 8020889a <eremove>

    tf->a0 = 0;
    return;
    80207220:	4781                	li	a5,0
    80207222:	a029                	j	8020722c <syscallUnlinkAt+0x7e>
bad:
    tf->a0 = -1;
    80207224:	57fd                	li	a5,-1
    80207226:	f8bc                	sd	a5,112(s1)
    80207228:	a019                	j	8020722e <syscallUnlinkAt+0x80>
    8020722a:	57fd                	li	a5,-1
        tf->a0 = -1;
    8020722c:	f8bc                	sd	a5,112(s1)
}
    8020722e:	70b2                	ld	ra,296(sp)
    80207230:	7412                	ld	s0,288(sp)
    80207232:	64f2                	ld	s1,280(sp)
    80207234:	6952                	ld	s2,272(sp)
    80207236:	6155                	addi	sp,sp,304
    80207238:	8082                	ret

000000008020723a <syscallLSeek>:

void syscallLSeek() {
    8020723a:	7179                	addi	sp,sp,-48
    8020723c:	f406                	sd	ra,40(sp)
    8020723e:	f022                	sd	s0,32(sp)
    80207240:	ec26                	sd	s1,24(sp)
    80207242:	e84a                	sd	s2,16(sp)
    80207244:	e44e                	sd	s3,8(sp)
    80207246:	e052                	sd	s4,0(sp)
    80207248:	1800                	addi	s0,sp,48
    Trapframe *tf = getHartTrapFrame();
    8020724a:	fffff097          	auipc	ra,0xfffff
    8020724e:	95a080e7          	jalr	-1702(ra) # 80205ba4 <getHartTrapFrame>
    80207252:	84aa                	mv	s1,a0
    int fd = tf->a0, mode = tf->a2;
    80207254:	07053903          	ld	s2,112(a0)
    80207258:	08053983          	ld	s3,128(a0)
    u64 offset = tf->a1;
    8020725c:	07853a03          	ld	s4,120(a0)
    if (fd < 0 || fd >= NOFILE) {
    80207260:	0009071b          	sext.w	a4,s2
    80207264:	07f00793          	li	a5,127
    80207268:	00e7fd63          	bgeu	a5,a4,80207282 <syscallLSeek+0x48>
            goto bad;
    }
    file->off = (off >= file->off ? file->off : off);
    tf->a0 = off;
    return;
bad:
    8020726c:	5a7d                	li	s4,-1
    tf->a0 = off;
    8020726e:	0744b823          	sd	s4,112(s1)
    tf->a0 = -1;
}
    80207272:	70a2                	ld	ra,40(sp)
    80207274:	7402                	ld	s0,32(sp)
    80207276:	64e2                	ld	s1,24(sp)
    80207278:	6942                	ld	s2,16(sp)
    8020727a:	69a2                	ld	s3,8(sp)
    8020727c:	6a02                	ld	s4,0(sp)
    8020727e:	6145                	addi	sp,sp,48
    80207280:	8082                	ret
    struct file* file = myproc()->ofile[fd];
    80207282:	ffffb097          	auipc	ra,0xffffb
    80207286:	72e080e7          	jalr	1838(ra) # 802029b0 <myproc>
    8020728a:	2901                	sext.w	s2,s2
    8020728c:	03690913          	addi	s2,s2,54
    80207290:	090e                	slli	s2,s2,0x3
    80207292:	954a                	add	a0,a0,s2
    80207294:	6118                	ld	a4,0(a0)
    if (file == 0) {
    80207296:	db79                	beqz	a4,8020726c <syscallLSeek+0x32>
    int fd = tf->a0, mode = tf->a2;
    80207298:	0009879b          	sext.w	a5,s3
    switch (mode) {
    8020729c:	4685                	li	a3,1
    8020729e:	00d78d63          	beq	a5,a3,802072b8 <syscallLSeek+0x7e>
    802072a2:	4689                	li	a3,2
    802072a4:	00d78e63          	beq	a5,a3,802072c0 <syscallLSeek+0x86>
    802072a8:	f3f1                	bnez	a5,8020726c <syscallLSeek+0x32>
    file->off = (off >= file->off ? file->off : off);
    802072aa:	02076783          	lwu	a5,32(a4)
    802072ae:	00fa7363          	bgeu	s4,a5,802072b4 <syscallLSeek+0x7a>
    802072b2:	87d2                	mv	a5,s4
    802072b4:	d31c                	sw	a5,32(a4)
    return;
    802072b6:	bf65                	j	8020726e <syscallLSeek+0x34>
            off += file->off;
    802072b8:	02076783          	lwu	a5,32(a4)
    802072bc:	9a3e                	add	s4,s4,a5
            break;
    802072be:	b7f5                	j	802072aa <syscallLSeek+0x70>
            off += file->ep->file_size;
    802072c0:	6f1c                	ld	a5,24(a4)
    802072c2:	1087e783          	lwu	a5,264(a5)
    802072c6:	9a3e                	add	s4,s4,a5
            break;
    802072c8:	b7cd                	j	802072aa <syscallLSeek+0x70>

00000000802072ca <getAbsolutePath>:

extern FileSystem rootFileSystem;
int getAbsolutePath(struct dirent* d, int isUser, u64 buf, int maxLen) {
    802072ca:	7149                	addi	sp,sp,-368
    802072cc:	f686                	sd	ra,360(sp)
    802072ce:	f2a2                	sd	s0,352(sp)
    802072d0:	eea6                	sd	s1,344(sp)
    802072d2:	eaca                	sd	s2,336(sp)
    802072d4:	e6ce                	sd	s3,328(sp)
    802072d6:	e2d2                	sd	s4,320(sp)
    802072d8:	fe56                	sd	s5,312(sp)
    802072da:	fa5a                	sd	s6,304(sp)
    802072dc:	f65e                	sd	s7,296(sp)
    802072de:	f262                	sd	s8,288(sp)
    802072e0:	ee66                	sd	s9,280(sp)
    802072e2:	1a80                	addi	s0,sp,368
    802072e4:	8c2e                	mv	s8,a1
    802072e6:	8cb2                	mv	s9,a2
    char path[FAT32_MAX_PATH];
    
    if (d->parent == NULL) {
    802072e8:	13853783          	ld	a5,312(a0)
    802072ec:	c7d1                	beqz	a5,80207378 <getAbsolutePath+0xae>
    802072ee:	892a                	mv	s2,a0
        return either_copyout(isUser, buf, "/", 2);
    }
    char *s = path + FAT32_MAX_PATH - 1;
    *s = '\0';
    802072f0:	f8040da3          	sb	zero,-101(s0)
    char *s = path + FAT32_MAX_PATH - 1;
    802072f4:	f9b40993          	addi	s3,s0,-101
    while (d->parent) {
        int len = strlen(d->filename);
        s -= len;
        if (s <= path || s - path <= FAT32_MAX_PATH - maxLen)  // can't reach root "/"
    802072f8:	e9840a13          	addi	s4,s0,-360
    802072fc:	10400b13          	li	s6,260
    80207300:	40db0b3b          	subw	s6,s6,a3
            return -1;
        strncpy(s, d->filename, len);
        *--s = '/';
    80207304:	02f00b93          	li	s7,47
        int len = strlen(d->filename);
    80207308:	854a                	mv	a0,s2
    8020730a:	fffff097          	auipc	ra,0xfffff
    8020730e:	bd6080e7          	jalr	-1066(ra) # 80205ee0 <strlen>
    80207312:	862a                	mv	a2,a0
        s -= len;
    80207314:	40a984b3          	sub	s1,s3,a0
        if (s <= path || s - path <= FAT32_MAX_PATH - maxLen)  // can't reach root "/"
    80207318:	069a7c63          	bgeu	s4,s1,80207390 <getAbsolutePath+0xc6>
    8020731c:	414487b3          	sub	a5,s1,s4
    80207320:	06fb5a63          	bge	s6,a5,80207394 <getAbsolutePath+0xca>
        strncpy(s, d->filename, len);
    80207324:	85ca                	mv	a1,s2
    80207326:	8526                	mv	a0,s1
    80207328:	fffff097          	auipc	ra,0xfffff
    8020732c:	b48080e7          	jalr	-1208(ra) # 80205e70 <strncpy>
        *--s = '/';
    80207330:	fff48993          	addi	s3,s1,-1
    80207334:	ff748fa3          	sb	s7,-1(s1)
        d = d->parent;
    80207338:	13893903          	ld	s2,312(s2)
    while (d->parent) {
    8020733c:	13893783          	ld	a5,312(s2)
    80207340:	f7e1                	bnez	a5,80207308 <getAbsolutePath+0x3e>
    }
    return either_copyout(isUser, buf, (void*)s, strlen(s) + 1);
    80207342:	854e                	mv	a0,s3
    80207344:	fffff097          	auipc	ra,0xfffff
    80207348:	b9c080e7          	jalr	-1124(ra) # 80205ee0 <strlen>
    8020734c:	0015069b          	addiw	a3,a0,1
    80207350:	864e                	mv	a2,s3
    80207352:	85e6                	mv	a1,s9
    80207354:	8562                	mv	a0,s8
    80207356:	ffffc097          	auipc	ra,0xffffc
    8020735a:	ed4080e7          	jalr	-300(ra) # 8020322a <either_copyout>
    8020735e:	70b6                	ld	ra,360(sp)
    80207360:	7416                	ld	s0,352(sp)
    80207362:	64f6                	ld	s1,344(sp)
    80207364:	6956                	ld	s2,336(sp)
    80207366:	69b6                	ld	s3,328(sp)
    80207368:	6a16                	ld	s4,320(sp)
    8020736a:	7af2                	ld	s5,312(sp)
    8020736c:	7b52                	ld	s6,304(sp)
    8020736e:	7bb2                	ld	s7,296(sp)
    80207370:	7c12                	ld	s8,288(sp)
    80207372:	6cf2                	ld	s9,280(sp)
    80207374:	6175                	addi	sp,sp,368
    80207376:	8082                	ret
        return either_copyout(isUser, buf, "/", 2);
    80207378:	4689                	li	a3,2
    8020737a:	00006617          	auipc	a2,0x6
    8020737e:	afe60613          	addi	a2,a2,-1282 # 8020ce78 <__func__.0+0x90>
    80207382:	85e6                	mv	a1,s9
    80207384:	8562                	mv	a0,s8
    80207386:	ffffc097          	auipc	ra,0xffffc
    8020738a:	ea4080e7          	jalr	-348(ra) # 8020322a <either_copyout>
    8020738e:	bfc1                	j	8020735e <getAbsolutePath+0x94>
            return -1;
    80207390:	557d                	li	a0,-1
    80207392:	b7f1                	j	8020735e <getAbsolutePath+0x94>
    80207394:	557d                	li	a0,-1
    80207396:	b7e1                	j	8020735e <getAbsolutePath+0x94>

0000000080207398 <syscallGetWorkDir>:
void syscallGetWorkDir(void) {
    80207398:	7179                	addi	sp,sp,-48
    8020739a:	f406                	sd	ra,40(sp)
    8020739c:	f022                	sd	s0,32(sp)
    8020739e:	ec26                	sd	s1,24(sp)
    802073a0:	e84a                	sd	s2,16(sp)
    802073a2:	e44e                	sd	s3,8(sp)
    802073a4:	1800                	addi	s0,sp,48
    Trapframe* tf = getHartTrapFrame();
    802073a6:	ffffe097          	auipc	ra,0xffffe
    802073aa:	7fe080e7          	jalr	2046(ra) # 80205ba4 <getHartTrapFrame>
    u64 uva = tf->a0;
    802073ae:	07053903          	ld	s2,112(a0)
    int n = tf->a1;
    802073b2:	07852983          	lw	s3,120(a0)
    if (uva == 0) {
    802073b6:	02090b63          	beqz	s2,802073ec <syscallGetWorkDir+0x54>
    802073ba:	84aa                	mv	s1,a0
    int len = getAbsolutePath(myproc()->cwd, 1, uva, n);
    802073bc:	ffffb097          	auipc	ra,0xffffb
    802073c0:	5f4080e7          	jalr	1524(ra) # 802029b0 <myproc>
    802073c4:	86ce                	mv	a3,s3
    802073c6:	864a                	mv	a2,s2
    802073c8:	4585                	li	a1,1
    802073ca:	1a853503          	ld	a0,424(a0)
    802073ce:	00000097          	auipc	ra,0x0
    802073d2:	efc080e7          	jalr	-260(ra) # 802072ca <getAbsolutePath>
    if (len < 0) {
    802073d6:	02054d63          	bltz	a0,80207410 <syscallGetWorkDir+0x78>
    802073da:	0724b823          	sd	s2,112(s1)
}
    802073de:	70a2                	ld	ra,40(sp)
    802073e0:	7402                	ld	s0,32(sp)
    802073e2:	64e2                	ld	s1,24(sp)
    802073e4:	6942                	ld	s2,16(sp)
    802073e6:	69a2                	ld	s3,8(sp)
    802073e8:	6145                	addi	sp,sp,48
    802073ea:	8082                	ret
        panic("Alloc addr not implement for cwd\n");
    802073ec:	00006697          	auipc	a3,0x6
    802073f0:	a9468693          	addi	a3,a3,-1388 # 8020ce80 <__func__.0+0x98>
    802073f4:	00006617          	auipc	a2,0x6
    802073f8:	af460613          	addi	a2,a2,-1292 # 8020cee8 <__func__.5>
    802073fc:	18f00593          	li	a1,399
    80207400:	00006517          	auipc	a0,0x6
    80207404:	a6050513          	addi	a0,a0,-1440 # 8020ce60 <__func__.0+0x78>
    80207408:	ffff9097          	auipc	ra,0xffff9
    8020740c:	744080e7          	jalr	1860(ra) # 80200b4c <_panic_>
        tf->a0 = -1;
    80207410:	597d                	li	s2,-1
    80207412:	b7e1                	j	802073da <syscallGetWorkDir+0x42>

0000000080207414 <syscallLinkAt>:
void syscallLinkAt() {
    80207414:	cb010113          	addi	sp,sp,-848
    80207418:	34113423          	sd	ra,840(sp)
    8020741c:	34813023          	sd	s0,832(sp)
    80207420:	32913c23          	sd	s1,824(sp)
    80207424:	33213823          	sd	s2,816(sp)
    80207428:	33313423          	sd	s3,808(sp)
    8020742c:	0e80                	addi	s0,sp,848
    Trapframe *tf = getHartTrapFrame();
    8020742e:	ffffe097          	auipc	ra,0xffffe
    80207432:	776080e7          	jalr	1910(ra) # 80205ba4 <getHartTrapFrame>
    80207436:	84aa                	mv	s1,a0
    int oldDirFd = tf->a0, newDirFd = tf->a2, flags = tf->a4;
    80207438:	07053903          	ld	s2,112(a0)
    8020743c:	08053983          	ld	s3,128(a0)
    assert(flags == 0);
    80207440:	09052683          	lw	a3,144(a0)
    80207444:	0016b693          	seqz	a3,a3
    80207448:	00006617          	auipc	a2,0x6
    8020744c:	ab860613          	addi	a2,a2,-1352 # 8020cf00 <__func__.1>
    80207450:	2f000593          	li	a1,752
    80207454:	00006517          	auipc	a0,0x6
    80207458:	a0c50513          	addi	a0,a0,-1524 # 8020ce60 <__func__.0+0x78>
    8020745c:	ffff9097          	auipc	ra,0xffff9
    80207460:	766080e7          	jalr	1894(ra) # 80200bc2 <_assert_>
    if (fetchstr(tf->a1, oldPath, FAT32_MAX_PATH) < 0) {
    80207464:	10400613          	li	a2,260
    80207468:	ec840593          	addi	a1,s0,-312
    8020746c:	7ca8                	ld	a0,120(s1)
    8020746e:	ffffd097          	auipc	ra,0xffffd
    80207472:	99c080e7          	jalr	-1636(ra) # 80203e0a <fetchstr>
    80207476:	0a054163          	bltz	a0,80207518 <syscallLinkAt+0x104>
    if (fetchstr(tf->a3, newPath, FAT32_MAX_PATH) < 0) {
    8020747a:	10400613          	li	a2,260
    8020747e:	dc040593          	addi	a1,s0,-576
    80207482:	64c8                	ld	a0,136(s1)
    80207484:	ffffd097          	auipc	ra,0xffffd
    80207488:	986080e7          	jalr	-1658(ra) # 80203e0a <fetchstr>
    8020748c:	0a054563          	bltz	a0,80207536 <syscallLinkAt+0x122>
    if((entryPoint = ename(oldDirFd, oldPath)) == NULL) {
    80207490:	ec840593          	addi	a1,s0,-312
    80207494:	0009051b          	sext.w	a0,s2
    80207498:	00002097          	auipc	ra,0x2
    8020749c:	c6e080e7          	jalr	-914(ra) # 80209106 <ename>
    802074a0:	892a                	mv	s2,a0
    802074a2:	c925                	beqz	a0,80207512 <syscallLinkAt+0xfe>
    if ((targetPoint = create(newDirFd, newPath, T_FILE, O_RDWR)) == NULL) {
    802074a4:	4689                	li	a3,2
    802074a6:	4609                	li	a2,2
    802074a8:	dc040593          	addi	a1,s0,-576
    802074ac:	0009851b          	sext.w	a0,s3
    802074b0:	00002097          	auipc	ra,0x2
    802074b4:	f0e080e7          	jalr	-242(ra) # 802093be <create>
    802074b8:	89aa                	mv	s3,a0
    802074ba:	cd21                	beqz	a0,80207512 <syscallLinkAt+0xfe>
    if (getAbsolutePath(entryPoint, 0, (u64)buf, FAT32_MAX_PATH) < 0) {
    802074bc:	10400693          	li	a3,260
    802074c0:	cb840613          	addi	a2,s0,-840
    802074c4:	4581                	li	a1,0
    802074c6:	854a                	mv	a0,s2
    802074c8:	00000097          	auipc	ra,0x0
    802074cc:	e02080e7          	jalr	-510(ra) # 802072ca <getAbsolutePath>
    802074d0:	02054c63          	bltz	a0,80207508 <syscallLinkAt+0xf4>
    int len = strlen(buf);
    802074d4:	cb840513          	addi	a0,s0,-840
    802074d8:	fffff097          	auipc	ra,0xfffff
    802074dc:	a08080e7          	jalr	-1528(ra) # 80205ee0 <strlen>
    802074e0:	892a                	mv	s2,a0
    if (ewrite(targetPoint, 0, (u64)buf, 0, strlen(buf)) != len) {
    802074e2:	cb840513          	addi	a0,s0,-840
    802074e6:	fffff097          	auipc	ra,0xfffff
    802074ea:	9fa080e7          	jalr	-1542(ra) # 80205ee0 <strlen>
    802074ee:	0005071b          	sext.w	a4,a0
    802074f2:	4681                	li	a3,0
    802074f4:	cb840613          	addi	a2,s0,-840
    802074f8:	4581                	li	a1,0
    802074fa:	854e                	mv	a0,s3
    802074fc:	00001097          	auipc	ra,0x1
    80207500:	c52080e7          	jalr	-942(ra) # 8020814e <ewrite>
    80207504:	03250c63          	beq	a0,s2,8020753c <syscallLinkAt+0x128>
        eunlock(targetPoint);
    80207508:	854e                	mv	a0,s3
    8020750a:	00001097          	auipc	ra,0x1
    8020750e:	524080e7          	jalr	1316(ra) # 80208a2e <eunlock>
    tf->a0 = -1;
    80207512:	57fd                	li	a5,-1
    80207514:	f8bc                	sd	a5,112(s1)
    80207516:	a019                	j	8020751c <syscallLinkAt+0x108>
        tf->a0 = -1;
    80207518:	57fd                	li	a5,-1
    8020751a:	f8bc                	sd	a5,112(s1)
}
    8020751c:	34813083          	ld	ra,840(sp)
    80207520:	34013403          	ld	s0,832(sp)
    80207524:	33813483          	ld	s1,824(sp)
    80207528:	33013903          	ld	s2,816(sp)
    8020752c:	32813983          	ld	s3,808(sp)
    80207530:	35010113          	addi	sp,sp,848
    80207534:	8082                	ret
        tf->a0 = -1;
    80207536:	57fd                	li	a5,-1
    80207538:	f8bc                	sd	a5,112(s1)
        return;
    8020753a:	b7cd                	j	8020751c <syscallLinkAt+0x108>
    targetPoint->_nt_res = DT_LNK;
    8020753c:	47a9                	li	a5,10
    8020753e:	10f98a23          	sb	a5,276(s3)
    eupdate(targetPoint);
    80207542:	854e                	mv	a0,s3
    80207544:	00001097          	auipc	ra,0x1
    80207548:	25a080e7          	jalr	602(ra) # 8020879e <eupdate>
    tf->a0 = 0;
    8020754c:	0604b823          	sd	zero,112(s1)
    eunlock(targetPoint);
    80207550:	854e                	mv	a0,s3
    80207552:	00001097          	auipc	ra,0x1
    80207556:	4dc080e7          	jalr	1244(ra) # 80208a2e <eunlock>
    return;
    8020755a:	b7c9                	j	8020751c <syscallLinkAt+0x108>

000000008020755c <binit>:
    // Sorted by how recently the buffer was used.
    // head.next is most recent, head.prev is least.
    struct buf head;
} bcache;

void binit(void) {
    8020755c:	7179                	addi	sp,sp,-48
    8020755e:	f406                	sd	ra,40(sp)
    80207560:	f022                	sd	s0,32(sp)
    80207562:	ec26                	sd	s1,24(sp)
    80207564:	e84a                	sd	s2,16(sp)
    80207566:	e44e                	sd	s3,8(sp)
    80207568:	e052                	sd	s4,0(sp)
    8020756a:	1800                	addi	s0,sp,48
    struct buf* b;

    initLock(&bcache.lock, "bcache");
    8020756c:	00006597          	auipc	a1,0x6
    80207570:	9a458593          	addi	a1,a1,-1628 # 8020cf10 <__func__.1+0x10>
    80207574:	003ff517          	auipc	a0,0x3ff
    80207578:	c5450513          	addi	a0,a0,-940 # 806061c8 <bcache>
    8020757c:	ffffe097          	auipc	ra,0xffffe
    80207580:	4e8080e7          	jalr	1256(ra) # 80205a64 <initLock>

    // Create linked list of buffers
    bcache.head.prev = &bcache.head;
    80207584:	00412797          	auipc	a5,0x412
    80207588:	c4478793          	addi	a5,a5,-956 # 806191c8 <ftable+0x150>
    8020758c:	00412717          	auipc	a4,0x412
    80207590:	85470713          	addi	a4,a4,-1964 # 80618de0 <bcache+0x12c18>
    80207594:	c6e7b023          	sd	a4,-928(a5)
    bcache.head.next = &bcache.head;
    80207598:	c6e7b423          	sd	a4,-920(a5)
    for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
    8020759c:	003ff497          	auipc	s1,0x3ff
    802075a0:	c4448493          	addi	s1,s1,-956 # 806061e0 <bcache+0x18>
        b->next = bcache.head.next;
    802075a4:	893e                	mv	s2,a5
        b->prev = &bcache.head;
    802075a6:	89ba                	mv	s3,a4
        initsleeplock(&b->lock, "buffer");
    802075a8:	00006a17          	auipc	s4,0x6
    802075ac:	970a0a13          	addi	s4,s4,-1680 # 8020cf18 <__func__.1+0x18>
        b->next = bcache.head.next;
    802075b0:	c6893783          	ld	a5,-920(s2)
    802075b4:	e8bc                	sd	a5,80(s1)
        b->prev = &bcache.head;
    802075b6:	0534b423          	sd	s3,72(s1)
        initsleeplock(&b->lock, "buffer");
    802075ba:	85d2                	mv	a1,s4
    802075bc:	01048513          	addi	a0,s1,16
    802075c0:	ffffe097          	auipc	ra,0xffffe
    802075c4:	376080e7          	jalr	886(ra) # 80205936 <initsleeplock>
        bcache.head.next->prev = b;
    802075c8:	c6893783          	ld	a5,-920(s2)
    802075cc:	e7a4                	sd	s1,72(a5)
        bcache.head.next = b;
    802075ce:	c6993423          	sd	s1,-920(s2)
    for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
    802075d2:	25848493          	addi	s1,s1,600
    802075d6:	fd349de3          	bne	s1,s3,802075b0 <binit+0x54>
    }
}
    802075da:	70a2                	ld	ra,40(sp)
    802075dc:	7402                	ld	s0,32(sp)
    802075de:	64e2                	ld	s1,24(sp)
    802075e0:	6942                	ld	s2,16(sp)
    802075e2:	69a2                	ld	s3,8(sp)
    802075e4:	6a02                	ld	s4,0(sp)
    802075e6:	6145                	addi	sp,sp,48
    802075e8:	8082                	ret

00000000802075ea <bread>:
struct buf* blockRead(FileSystem* fs, u64 blockNum) {
    return bread(fs->deviceNumber, blockNum);
}

// Return a locked buf with the contents of the indicated block.
struct buf* bread(uint dev, uint blockno) {
    802075ea:	7179                	addi	sp,sp,-48
    802075ec:	f406                	sd	ra,40(sp)
    802075ee:	f022                	sd	s0,32(sp)
    802075f0:	ec26                	sd	s1,24(sp)
    802075f2:	e84a                	sd	s2,16(sp)
    802075f4:	e44e                	sd	s3,8(sp)
    802075f6:	1800                	addi	s0,sp,48
    802075f8:	892a                	mv	s2,a0
    802075fa:	89ae                	mv	s3,a1
    acquireLock(&bcache.lock);
    802075fc:	003ff517          	auipc	a0,0x3ff
    80207600:	bcc50513          	addi	a0,a0,-1076 # 806061c8 <bcache>
    80207604:	ffffe097          	auipc	ra,0xffffe
    80207608:	4aa080e7          	jalr	1194(ra) # 80205aae <acquireLock>
    if (dev >= 0) {
    8020760c:	04094963          	bltz	s2,8020765e <bread+0x74>
        for (b = bcache.head.next; b != &bcache.head; b = b->next) {
    80207610:	00412497          	auipc	s1,0x412
    80207614:	8204b483          	ld	s1,-2016(s1) # 80618e30 <bcache+0x12c68>
    80207618:	00411797          	auipc	a5,0x411
    8020761c:	7c878793          	addi	a5,a5,1992 # 80618de0 <bcache+0x12c18>
    80207620:	02f48f63          	beq	s1,a5,8020765e <bread+0x74>
    80207624:	873e                	mv	a4,a5
    80207626:	a021                	j	8020762e <bread+0x44>
    80207628:	68a4                	ld	s1,80(s1)
    8020762a:	02e48a63          	beq	s1,a4,8020765e <bread+0x74>
            if (b->dev == dev && b->blockno == blockno) {
    8020762e:	449c                	lw	a5,8(s1)
    80207630:	ff279ce3          	bne	a5,s2,80207628 <bread+0x3e>
    80207634:	44dc                	lw	a5,12(s1)
    80207636:	ff3799e3          	bne	a5,s3,80207628 <bread+0x3e>
                b->refcnt++;
    8020763a:	40bc                	lw	a5,64(s1)
    8020763c:	2785                	addiw	a5,a5,1
    8020763e:	c0bc                	sw	a5,64(s1)
                releaseLock(&bcache.lock);
    80207640:	003ff517          	auipc	a0,0x3ff
    80207644:	b8850513          	addi	a0,a0,-1144 # 806061c8 <bcache>
    80207648:	ffffe097          	auipc	ra,0xffffe
    8020764c:	4e2080e7          	jalr	1250(ra) # 80205b2a <releaseLock>
                acquiresleep(&b->lock);
    80207650:	01048513          	addi	a0,s1,16
    80207654:	ffffe097          	auipc	ra,0xffffe
    80207658:	31c080e7          	jalr	796(ra) # 80205970 <acquiresleep>
                return b;
    8020765c:	a88d                	j	802076ce <bread+0xe4>
    for (b = bcache.head.prev; b != &bcache.head; b = b->prev) {
    8020765e:	00411497          	auipc	s1,0x411
    80207662:	7ca4b483          	ld	s1,1994(s1) # 80618e28 <bcache+0x12c60>
    80207666:	00411797          	auipc	a5,0x411
    8020766a:	77a78793          	addi	a5,a5,1914 # 80618de0 <bcache+0x12c18>
    8020766e:	00f48863          	beq	s1,a5,8020767e <bread+0x94>
    80207672:	873e                	mv	a4,a5
        if (b->refcnt == 0) {
    80207674:	40bc                	lw	a5,64(s1)
    80207676:	c795                	beqz	a5,802076a2 <bread+0xb8>
    for (b = bcache.head.prev; b != &bcache.head; b = b->prev) {
    80207678:	64a4                	ld	s1,72(s1)
    8020767a:	fee49de3          	bne	s1,a4,80207674 <bread+0x8a>
    panic("bget: no buffers");
    8020767e:	00006697          	auipc	a3,0x6
    80207682:	8a268693          	addi	a3,a3,-1886 # 8020cf20 <__func__.1+0x20>
    80207686:	00006617          	auipc	a2,0x6
    8020768a:	c0260613          	addi	a2,a2,-1022 # 8020d288 <__func__.2>
    8020768e:	05900593          	li	a1,89
    80207692:	00006517          	auipc	a0,0x6
    80207696:	8a650513          	addi	a0,a0,-1882 # 8020cf38 <__func__.1+0x38>
    8020769a:	ffff9097          	auipc	ra,0xffff9
    8020769e:	4b2080e7          	jalr	1202(ra) # 80200b4c <_panic_>
            b->dev = dev;
    802076a2:	0124a423          	sw	s2,8(s1)
            b->blockno = blockno;
    802076a6:	0134a623          	sw	s3,12(s1)
            b->valid = 0;
    802076aa:	0004a023          	sw	zero,0(s1)
            b->refcnt = 1;
    802076ae:	4785                	li	a5,1
    802076b0:	c0bc                	sw	a5,64(s1)
            releaseLock(&bcache.lock);
    802076b2:	003ff517          	auipc	a0,0x3ff
    802076b6:	b1650513          	addi	a0,a0,-1258 # 806061c8 <bcache>
    802076ba:	ffffe097          	auipc	ra,0xffffe
    802076be:	470080e7          	jalr	1136(ra) # 80205b2a <releaseLock>
            acquiresleep(&b->lock);
    802076c2:	01048513          	addi	a0,s1,16
    802076c6:	ffffe097          	auipc	ra,0xffffe
    802076ca:	2aa080e7          	jalr	682(ra) # 80205970 <acquiresleep>
    // static int cnt = 0;
    // printf("[Bread] %d\n", cnt++);
    struct buf* b;
    b = bget(dev, blockno);
    if (!b->valid) {
    802076ce:	409c                	lw	a5,0(s1)
    802076d0:	cb89                	beqz	a5,802076e2 <bread+0xf8>
        sdRead(b->data, b->blockno, 1);
        b->valid = 1;
    }
    return b;
}
    802076d2:	8526                	mv	a0,s1
    802076d4:	70a2                	ld	ra,40(sp)
    802076d6:	7402                	ld	s0,32(sp)
    802076d8:	64e2                	ld	s1,24(sp)
    802076da:	6942                	ld	s2,16(sp)
    802076dc:	69a2                	ld	s3,8(sp)
    802076de:	6145                	addi	sp,sp,48
    802076e0:	8082                	ret
        sdRead(b->data, b->blockno, 1);
    802076e2:	4605                	li	a2,1
    802076e4:	00c4e583          	lwu	a1,12(s1)
    802076e8:	05848513          	addi	a0,s1,88
    802076ec:	ffff9097          	auipc	ra,0xffff9
    802076f0:	5cc080e7          	jalr	1484(ra) # 80200cb8 <sdRead>
        b->valid = 1;
    802076f4:	4785                	li	a5,1
    802076f6:	c09c                	sw	a5,0(s1)
    return b;
    802076f8:	bfe9                	j	802076d2 <bread+0xe8>

00000000802076fa <mountBlockRead>:
struct buf* mountBlockRead(FileSystem* fs, u64 blockNum) {
    802076fa:	1101                	addi	sp,sp,-32
    802076fc:	ec06                	sd	ra,24(sp)
    802076fe:	e822                	sd	s0,16(sp)
    80207700:	e426                	sd	s1,8(sp)
    80207702:	e04a                	sd	s2,0(sp)
    80207704:	1000                	addi	s0,sp,32
    80207706:	892e                	mv	s2,a1
    struct file* file = fs->image;
    80207708:	1e053783          	ld	a5,480(a0)
    if (file->type == FD_DEVICE) {
    8020770c:	4394                	lw	a3,0(a5)
    8020770e:	470d                	li	a4,3
    80207710:	04e68c63          	beq	a3,a4,80207768 <mountBlockRead+0x6e>
    80207714:	84aa                	mv	s1,a0
    assert(file->type == FD_ENTRY);
    80207716:	16f9                	addi	a3,a3,-2
    80207718:	0016b693          	seqz	a3,a3
    8020771c:	00006617          	auipc	a2,0x6
    80207720:	83460613          	addi	a2,a2,-1996 # 8020cf50 <__func__.3>
    80207724:	06100593          	li	a1,97
    80207728:	00006517          	auipc	a0,0x6
    8020772c:	81050513          	addi	a0,a0,-2032 # 8020cf38 <__func__.1+0x38>
    80207730:	ffff9097          	auipc	ra,0xffff9
    80207734:	492080e7          	jalr	1170(ra) # 80200bc2 <_assert_>
    struct dirent *image = fs->image->ep;
    80207738:	1e04b783          	ld	a5,480(s1)
    8020773c:	6f88                	ld	a0,24(a5)
    FileSystem* parentFs = image->fileSystem;
    8020773e:	11853483          	ld	s1,280(a0)
    int parentBlockNum = getBlockNumber(image, blockNum); 
    80207742:	0009059b          	sext.w	a1,s2
    80207746:	00001097          	auipc	ra,0x1
    8020774a:	8a6080e7          	jalr	-1882(ra) # 80207fec <getBlockNumber>
    8020774e:	85aa                	mv	a1,a0
    if (parentBlockNum < 0) {
    80207750:	02054463          	bltz	a0,80207778 <mountBlockRead+0x7e>
    return parentFs->read(parentFs, parentBlockNum);
    80207754:	1f84b783          	ld	a5,504(s1)
    80207758:	8526                	mv	a0,s1
    8020775a:	9782                	jalr	a5
}
    8020775c:	60e2                	ld	ra,24(sp)
    8020775e:	6442                	ld	s0,16(sp)
    80207760:	64a2                	ld	s1,8(sp)
    80207762:	6902                	ld	s2,0(sp)
    80207764:	6105                	addi	sp,sp,32
    80207766:	8082                	ret
        return bread(file->major, blockNum);
    80207768:	2581                	sext.w	a1,a1
    8020776a:	02479503          	lh	a0,36(a5)
    8020776e:	00000097          	auipc	ra,0x0
    80207772:	e7c080e7          	jalr	-388(ra) # 802075ea <bread>
    80207776:	b7dd                	j	8020775c <mountBlockRead+0x62>
        return 0;
    80207778:	4501                	li	a0,0
    8020777a:	b7cd                	j	8020775c <mountBlockRead+0x62>

000000008020777c <blockRead>:
struct buf* blockRead(FileSystem* fs, u64 blockNum) {
    8020777c:	1141                	addi	sp,sp,-16
    8020777e:	e406                	sd	ra,8(sp)
    80207780:	e022                	sd	s0,0(sp)
    80207782:	0800                	addi	s0,sp,16
    return bread(fs->deviceNumber, blockNum);
    80207784:	2581                	sext.w	a1,a1
    80207786:	1f052503          	lw	a0,496(a0)
    8020778a:	00000097          	auipc	ra,0x0
    8020778e:	e60080e7          	jalr	-416(ra) # 802075ea <bread>
}
    80207792:	60a2                	ld	ra,8(sp)
    80207794:	6402                	ld	s0,0(sp)
    80207796:	0141                	addi	sp,sp,16
    80207798:	8082                	ret

000000008020779a <bwrite>:

// Write b's contents to disk.  Must be locked.
void bwrite(struct buf* b) {
    8020779a:	1101                	addi	sp,sp,-32
    8020779c:	ec06                	sd	ra,24(sp)
    8020779e:	e822                	sd	s0,16(sp)
    802077a0:	e426                	sd	s1,8(sp)
    802077a2:	1000                	addi	s0,sp,32
    802077a4:	84aa                	mv	s1,a0
    if (!holdingsleep(&b->lock))
    802077a6:	0541                	addi	a0,a0,16
    802077a8:	ffffe097          	auipc	ra,0xffffe
    802077ac:	264080e7          	jalr	612(ra) # 80205a0c <holdingsleep>
    802077b0:	cd19                	beqz	a0,802077ce <bwrite+0x34>
        panic("bwrite");
    sdWrite(b->data, b->blockno, 1);
    802077b2:	4605                	li	a2,1
    802077b4:	00c4e583          	lwu	a1,12(s1)
    802077b8:	05848513          	addi	a0,s1,88
    802077bc:	ffff9097          	auipc	ra,0xffff9
    802077c0:	7f4080e7          	jalr	2036(ra) # 80200fb0 <sdWrite>
}
    802077c4:	60e2                	ld	ra,24(sp)
    802077c6:	6442                	ld	s0,16(sp)
    802077c8:	64a2                	ld	s1,8(sp)
    802077ca:	6105                	addi	sp,sp,32
    802077cc:	8082                	ret
        panic("bwrite");
    802077ce:	00005697          	auipc	a3,0x5
    802077d2:	77268693          	addi	a3,a3,1906 # 8020cf40 <__func__.1+0x40>
    802077d6:	00006617          	auipc	a2,0x6
    802077da:	aaa60613          	addi	a2,a2,-1366 # 8020d280 <__func__.1>
    802077de:	07f00593          	li	a1,127
    802077e2:	00005517          	auipc	a0,0x5
    802077e6:	75650513          	addi	a0,a0,1878 # 8020cf38 <__func__.1+0x38>
    802077ea:	ffff9097          	auipc	ra,0xffff9
    802077ee:	362080e7          	jalr	866(ra) # 80200b4c <_panic_>

00000000802077f2 <brelse>:

// Release a locked buffer.
// Move to the head of the most-recently-used list.
void brelse(struct buf* b) {
    802077f2:	1101                	addi	sp,sp,-32
    802077f4:	ec06                	sd	ra,24(sp)
    802077f6:	e822                	sd	s0,16(sp)
    802077f8:	e426                	sd	s1,8(sp)
    802077fa:	e04a                	sd	s2,0(sp)
    802077fc:	1000                	addi	s0,sp,32
    802077fe:	84aa                	mv	s1,a0
    if (!holdingsleep(&b->lock))
    80207800:	01050913          	addi	s2,a0,16
    80207804:	854a                	mv	a0,s2
    80207806:	ffffe097          	auipc	ra,0xffffe
    8020780a:	206080e7          	jalr	518(ra) # 80205a0c <holdingsleep>
    8020780e:	c92d                	beqz	a0,80207880 <brelse+0x8e>
        panic("brelse");

    releasesleep(&b->lock);
    80207810:	854a                	mv	a0,s2
    80207812:	ffffe097          	auipc	ra,0xffffe
    80207816:	1b6080e7          	jalr	438(ra) # 802059c8 <releasesleep>

    acquireLock(&bcache.lock);
    8020781a:	003ff517          	auipc	a0,0x3ff
    8020781e:	9ae50513          	addi	a0,a0,-1618 # 806061c8 <bcache>
    80207822:	ffffe097          	auipc	ra,0xffffe
    80207826:	28c080e7          	jalr	652(ra) # 80205aae <acquireLock>
    b->refcnt--;
    8020782a:	40bc                	lw	a5,64(s1)
    8020782c:	37fd                	addiw	a5,a5,-1
    8020782e:	0007871b          	sext.w	a4,a5
    80207832:	c0bc                	sw	a5,64(s1)
    if (b->refcnt == 0) {
    80207834:	eb05                	bnez	a4,80207864 <brelse+0x72>
        // no one is waiting for it.
        b->next->prev = b->prev;
    80207836:	68bc                	ld	a5,80(s1)
    80207838:	64b8                	ld	a4,72(s1)
    8020783a:	e7b8                	sd	a4,72(a5)
        b->prev->next = b->next;
    8020783c:	64bc                	ld	a5,72(s1)
    8020783e:	68b8                	ld	a4,80(s1)
    80207840:	ebb8                	sd	a4,80(a5)
        b->next = bcache.head.next;
    80207842:	00412797          	auipc	a5,0x412
    80207846:	98678793          	addi	a5,a5,-1658 # 806191c8 <ftable+0x150>
    8020784a:	c687b703          	ld	a4,-920(a5)
    8020784e:	e8b8                	sd	a4,80(s1)
        b->prev = &bcache.head;
    80207850:	00411717          	auipc	a4,0x411
    80207854:	59070713          	addi	a4,a4,1424 # 80618de0 <bcache+0x12c18>
    80207858:	e4b8                	sd	a4,72(s1)
        bcache.head.next->prev = b;
    8020785a:	c687b703          	ld	a4,-920(a5)
    8020785e:	e724                	sd	s1,72(a4)
        bcache.head.next = b;
    80207860:	c697b423          	sd	s1,-920(a5)
    }

    releaseLock(&bcache.lock);
    80207864:	003ff517          	auipc	a0,0x3ff
    80207868:	96450513          	addi	a0,a0,-1692 # 806061c8 <bcache>
    8020786c:	ffffe097          	auipc	ra,0xffffe
    80207870:	2be080e7          	jalr	702(ra) # 80205b2a <releaseLock>
}
    80207874:	60e2                	ld	ra,24(sp)
    80207876:	6442                	ld	s0,16(sp)
    80207878:	64a2                	ld	s1,8(sp)
    8020787a:	6902                	ld	s2,0(sp)
    8020787c:	6105                	addi	sp,sp,32
    8020787e:	8082                	ret
        panic("brelse");
    80207880:	00005697          	auipc	a3,0x5
    80207884:	6c868693          	addi	a3,a3,1736 # 8020cf48 <__func__.1+0x48>
    80207888:	00006617          	auipc	a2,0x6
    8020788c:	9f060613          	addi	a2,a2,-1552 # 8020d278 <__func__.0>
    80207890:	08700593          	li	a1,135
    80207894:	00005517          	auipc	a0,0x5
    80207898:	6a450513          	addi	a0,a0,1700 # 8020cf38 <__func__.1+0x38>
    8020789c:	ffff9097          	auipc	ra,0xffff9
    802078a0:	2b0080e7          	jalr	688(ra) # 80200b4c <_panic_>

00000000802078a4 <bpin>:

void bpin(struct buf* b) {
    802078a4:	1101                	addi	sp,sp,-32
    802078a6:	ec06                	sd	ra,24(sp)
    802078a8:	e822                	sd	s0,16(sp)
    802078aa:	e426                	sd	s1,8(sp)
    802078ac:	1000                	addi	s0,sp,32
    802078ae:	84aa                	mv	s1,a0
    acquireLock(&bcache.lock);
    802078b0:	003ff517          	auipc	a0,0x3ff
    802078b4:	91850513          	addi	a0,a0,-1768 # 806061c8 <bcache>
    802078b8:	ffffe097          	auipc	ra,0xffffe
    802078bc:	1f6080e7          	jalr	502(ra) # 80205aae <acquireLock>
    b->refcnt++;
    802078c0:	40bc                	lw	a5,64(s1)
    802078c2:	2785                	addiw	a5,a5,1
    802078c4:	c0bc                	sw	a5,64(s1)
    releaseLock(&bcache.lock);
    802078c6:	003ff517          	auipc	a0,0x3ff
    802078ca:	90250513          	addi	a0,a0,-1790 # 806061c8 <bcache>
    802078ce:	ffffe097          	auipc	ra,0xffffe
    802078d2:	25c080e7          	jalr	604(ra) # 80205b2a <releaseLock>
}
    802078d6:	60e2                	ld	ra,24(sp)
    802078d8:	6442                	ld	s0,16(sp)
    802078da:	64a2                	ld	s1,8(sp)
    802078dc:	6105                	addi	sp,sp,32
    802078de:	8082                	ret

00000000802078e0 <bunpin>:

void bunpin(struct buf* b) {
    802078e0:	1101                	addi	sp,sp,-32
    802078e2:	ec06                	sd	ra,24(sp)
    802078e4:	e822                	sd	s0,16(sp)
    802078e6:	e426                	sd	s1,8(sp)
    802078e8:	1000                	addi	s0,sp,32
    802078ea:	84aa                	mv	s1,a0
    acquireLock(&bcache.lock);
    802078ec:	003ff517          	auipc	a0,0x3ff
    802078f0:	8dc50513          	addi	a0,a0,-1828 # 806061c8 <bcache>
    802078f4:	ffffe097          	auipc	ra,0xffffe
    802078f8:	1ba080e7          	jalr	442(ra) # 80205aae <acquireLock>
    b->refcnt--;
    802078fc:	40bc                	lw	a5,64(s1)
    802078fe:	37fd                	addiw	a5,a5,-1
    80207900:	c0bc                	sw	a5,64(s1)
    releaseLock(&bcache.lock);
    80207902:	003ff517          	auipc	a0,0x3ff
    80207906:	8c650513          	addi	a0,a0,-1850 # 806061c8 <bcache>
    8020790a:	ffffe097          	auipc	ra,0xffffe
    8020790e:	220080e7          	jalr	544(ra) # 80205b2a <releaseLock>
}
    80207912:	60e2                	ld	ra,24(sp)
    80207914:	6442                	ld	s0,16(sp)
    80207916:	64a2                	ld	s1,8(sp)
    80207918:	6105                	addi	sp,sp,32
    8020791a:	8082                	ret

000000008020791c <write_fat>:
 * @param   cluster     the number of cluster to write its content in FAT table
 * @param   content     the content which should be the next cluster number of
 * FAT end of chain flag
 */
static int write_fat(FileSystem *fs, uint32 cluster, uint32 content) {
    if (cluster > fs->superBlock.data_clus_cnt + 1) {
    8020791c:	457c                	lw	a5,76(a0)
    8020791e:	2785                	addiw	a5,a5,1
    80207920:	06b7e663          	bltu	a5,a1,8020798c <write_fat+0x70>
static int write_fat(FileSystem *fs, uint32 cluster, uint32 content) {
    80207924:	7179                	addi	sp,sp,-48
    80207926:	f406                	sd	ra,40(sp)
    80207928:	f022                	sd	s0,32(sp)
    8020792a:	ec26                	sd	s1,24(sp)
    8020792c:	e84a                	sd	s2,16(sp)
    8020792e:	e44e                	sd	s3,8(sp)
    80207930:	e052                	sd	s4,0(sp)
    80207932:	1800                	addi	s0,sp,48
    80207934:	892a                	mv	s2,a0
    80207936:	8a32                	mv	s4,a2
    return fs->superBlock.bpb.rsvd_sec_cnt + (cluster << 2) / fs->superBlock.bpb.byts_per_sec +
    80207938:	0025949b          	slliw	s1,a1,0x2
    8020793c:	05455583          	lhu	a1,84(a0)
    80207940:	02b4d5bb          	divuw	a1,s1,a1
    80207944:	05855783          	lhu	a5,88(a0)
    80207948:	9dbd                	addw	a1,a1,a5
        return -1;
    }
    uint32 fat_sec = fat_sec_of_clus(fs, cluster, 1);
    struct buf* b = fs->read(fs, fat_sec);
    8020794a:	1f853783          	ld	a5,504(a0)
    8020794e:	1582                	slli	a1,a1,0x20
    80207950:	9181                	srli	a1,a1,0x20
    80207952:	9782                	jalr	a5
    80207954:	89aa                	mv	s3,a0
    return (cluster << 2) % fs->superBlock.bpb.byts_per_sec;
    80207956:	05495783          	lhu	a5,84(s2)
    8020795a:	02f4f5bb          	remuw	a1,s1,a5
    uint off = fat_offset_of_clus(fs, cluster);
    *(uint32*)(b->data + off) = content;
    8020795e:	1582                	slli	a1,a1,0x20
    80207960:	9181                	srli	a1,a1,0x20
    80207962:	95aa                	add	a1,a1,a0
    80207964:	0545ac23          	sw	s4,88(a1)
    bwrite(b);
    80207968:	00000097          	auipc	ra,0x0
    8020796c:	e32080e7          	jalr	-462(ra) # 8020779a <bwrite>
    brelse(b);
    80207970:	854e                	mv	a0,s3
    80207972:	00000097          	auipc	ra,0x0
    80207976:	e80080e7          	jalr	-384(ra) # 802077f2 <brelse>
    return 0;
    8020797a:	4501                	li	a0,0
}
    8020797c:	70a2                	ld	ra,40(sp)
    8020797e:	7402                	ld	s0,32(sp)
    80207980:	64e2                	ld	s1,24(sp)
    80207982:	6942                	ld	s2,16(sp)
    80207984:	69a2                	ld	s3,8(sp)
    80207986:	6a02                	ld	s4,0(sp)
    80207988:	6145                	addi	sp,sp,48
    8020798a:	8082                	ret
        return -1;
    8020798c:	557d                	li	a0,-1
}
    8020798e:	8082                	ret

0000000080207990 <read_fat>:
static uint32 read_fat(FileSystem *fs, uint32 cluster) {
    80207990:	1101                	addi	sp,sp,-32
    80207992:	ec06                	sd	ra,24(sp)
    80207994:	e822                	sd	s0,16(sp)
    80207996:	e426                	sd	s1,8(sp)
    80207998:	e04a                	sd	s2,0(sp)
    8020799a:	1000                	addi	s0,sp,32
    if (cluster >= FAT32_EOC) {
    8020799c:	100007b7          	lui	a5,0x10000
    802079a0:	17dd                	addi	a5,a5,-9
        return cluster;
    802079a2:	84ae                	mv	s1,a1
    if (cluster >= FAT32_EOC) {
    802079a4:	04b7e363          	bltu	a5,a1,802079ea <read_fat+0x5a>
    802079a8:	892a                	mv	s2,a0
        fs->superBlock.data_clus_cnt + 1) {  // because cluster number starts at 2, not 0
    802079aa:	457c                	lw	a5,76(a0)
    if (cluster >
    802079ac:	2785                	addiw	a5,a5,1
        return 0;
    802079ae:	4481                	li	s1,0
    if (cluster >
    802079b0:	02b7ed63          	bltu	a5,a1,802079ea <read_fat+0x5a>
    return fs->superBlock.bpb.rsvd_sec_cnt + (cluster << 2) / fs->superBlock.bpb.byts_per_sec +
    802079b4:	0025949b          	slliw	s1,a1,0x2
    802079b8:	05455583          	lhu	a1,84(a0)
    802079bc:	02b4d5bb          	divuw	a1,s1,a1
    802079c0:	05855783          	lhu	a5,88(a0)
    802079c4:	9dbd                	addw	a1,a1,a5
    struct buf* b = fs->read(fs, fat_sec);
    802079c6:	1f853783          	ld	a5,504(a0)
    802079ca:	1582                	slli	a1,a1,0x20
    802079cc:	9181                	srli	a1,a1,0x20
    802079ce:	9782                	jalr	a5
    return (cluster << 2) % fs->superBlock.bpb.byts_per_sec;
    802079d0:	05495783          	lhu	a5,84(s2)
    802079d4:	02f4f5bb          	remuw	a1,s1,a5
    uint32 next_clus = *(uint32*)(b->data + fat_offset_of_clus(fs, cluster));
    802079d8:	1582                	slli	a1,a1,0x20
    802079da:	9181                	srli	a1,a1,0x20
    802079dc:	00b507b3          	add	a5,a0,a1
    802079e0:	4fa4                	lw	s1,88(a5)
    brelse(b);
    802079e2:	00000097          	auipc	ra,0x0
    802079e6:	e10080e7          	jalr	-496(ra) # 802077f2 <brelse>
}
    802079ea:	8526                	mv	a0,s1
    802079ec:	60e2                	ld	ra,24(sp)
    802079ee:	6442                	ld	s0,16(sp)
    802079f0:	64a2                	ld	s1,8(sp)
    802079f2:	6902                	ld	s2,0(sp)
    802079f4:	6105                	addi	sp,sp,32
    802079f6:	8082                	ret

00000000802079f8 <alloc_clus>:
        bwrite(b);
        brelse(b);
    }
}

static uint32 alloc_clus(FileSystem *fs, uint8 dev) {
    802079f8:	715d                	addi	sp,sp,-80
    802079fa:	e486                	sd	ra,72(sp)
    802079fc:	e0a2                	sd	s0,64(sp)
    802079fe:	fc26                	sd	s1,56(sp)
    80207a00:	f84a                	sd	s2,48(sp)
    80207a02:	f44e                	sd	s3,40(sp)
    80207a04:	f052                	sd	s4,32(sp)
    80207a06:	ec56                	sd	s5,24(sp)
    80207a08:	e85a                	sd	s6,16(sp)
    80207a0a:	e45e                	sd	s7,8(sp)
    80207a0c:	e062                	sd	s8,0(sp)
    80207a0e:	0880                	addi	s0,sp,80
    // should we keep a free cluster list? instead of searching fat every time.
    struct buf* b;
    uint32 sec = fs->superBlock.bpb.rsvd_sec_cnt;
    80207a10:	05855b83          	lhu	s7,88(a0)
    uint32 const ent_per_sec = fs->superBlock.bpb.byts_per_sec / sizeof(uint32);
    80207a14:	05455983          	lhu	s3,84(a0)
    for (uint32 i = 0; i < fs->superBlock.bpb.fat_sz; i++, sec++) {
    80207a18:	517c                	lw	a5,100(a0)
    80207a1a:	c7fd                	beqz	a5,80207b08 <alloc_clus+0x110>
    80207a1c:	892a                	mv	s2,a0
    80207a1e:	0029d99b          	srliw	s3,s3,0x2
    80207a22:	00098a1b          	sext.w	s4,s3
    80207a26:	4b01                	li	s6,0
        b = fs->read(fs, sec);
        for (uint32 j = 0; j < ent_per_sec; j++) {
    80207a28:	4c01                	li	s8,0
    80207a2a:	a855                	j	80207ade <alloc_clus+0xe6>
            if (((uint32*)(b->data))[j] == 0) {
                ((uint32*)(b->data))[j] = FAT32_EOC + 7;
    80207a2c:	100007b7          	lui	a5,0x10000
    80207a30:	17fd                	addi	a5,a5,-1
    80207a32:	c29c                	sw	a5,0(a3)
                bwrite(b);
    80207a34:	8556                	mv	a0,s5
    80207a36:	00000097          	auipc	ra,0x0
    80207a3a:	d64080e7          	jalr	-668(ra) # 8020779a <bwrite>
                brelse(b);
    80207a3e:	8556                	mv	a0,s5
    80207a40:	00000097          	auipc	ra,0x0
    80207a44:	db2080e7          	jalr	-590(ra) # 802077f2 <brelse>
                uint32 clus = i * ent_per_sec + j;
    80207a48:	036989bb          	mulw	s3,s3,s6
    80207a4c:	009989bb          	addw	s3,s3,s1
    80207a50:	00098a9b          	sext.w	s5,s3
    return ((cluster - 2) * fs->superBlock.bpb.sec_per_clus) + fs->superBlock.first_data_sec;
    80207a54:	05694783          	lbu	a5,86(s2)
    80207a58:	ffe98a1b          	addiw	s4,s3,-2
    80207a5c:	02fa0a3b          	mulw	s4,s4,a5
    80207a60:	04492703          	lw	a4,68(s2)
    80207a64:	00ea0a3b          	addw	s4,s4,a4
    for (int i = 0; i < fs->superBlock.bpb.sec_per_clus; i++) {
    80207a68:	c3b9                	beqz	a5,80207aae <alloc_clus+0xb6>
    80207a6a:	4981                	li	s3,0
        b = fs->read(fs, sec++);
    80207a6c:	014985bb          	addw	a1,s3,s4
    80207a70:	1f893783          	ld	a5,504(s2)
    80207a74:	1582                	slli	a1,a1,0x20
    80207a76:	9181                	srli	a1,a1,0x20
    80207a78:	854a                	mv	a0,s2
    80207a7a:	9782                	jalr	a5
    80207a7c:	84aa                	mv	s1,a0
        memset(b->data, 0, BSIZE);
    80207a7e:	20000613          	li	a2,512
    80207a82:	4581                	li	a1,0
    80207a84:	05850513          	addi	a0,a0,88
    80207a88:	ffffe097          	auipc	ra,0xffffe
    80207a8c:	2dc080e7          	jalr	732(ra) # 80205d64 <memset>
        bwrite(b);
    80207a90:	8526                	mv	a0,s1
    80207a92:	00000097          	auipc	ra,0x0
    80207a96:	d08080e7          	jalr	-760(ra) # 8020779a <bwrite>
        brelse(b);
    80207a9a:	8526                	mv	a0,s1
    80207a9c:	00000097          	auipc	ra,0x0
    80207aa0:	d56080e7          	jalr	-682(ra) # 802077f2 <brelse>
    for (int i = 0; i < fs->superBlock.bpb.sec_per_clus; i++) {
    80207aa4:	2985                	addiw	s3,s3,1
    80207aa6:	05694783          	lbu	a5,86(s2)
    80207aaa:	fcf9c1e3          	blt	s3,a5,80207a6c <alloc_clus+0x74>
            }
        }
        brelse(b);
    }
    panic("no clusters");
}
    80207aae:	8556                	mv	a0,s5
    80207ab0:	60a6                	ld	ra,72(sp)
    80207ab2:	6406                	ld	s0,64(sp)
    80207ab4:	74e2                	ld	s1,56(sp)
    80207ab6:	7942                	ld	s2,48(sp)
    80207ab8:	79a2                	ld	s3,40(sp)
    80207aba:	7a02                	ld	s4,32(sp)
    80207abc:	6ae2                	ld	s5,24(sp)
    80207abe:	6b42                	ld	s6,16(sp)
    80207ac0:	6ba2                	ld	s7,8(sp)
    80207ac2:	6c02                	ld	s8,0(sp)
    80207ac4:	6161                	addi	sp,sp,80
    80207ac6:	8082                	ret
        brelse(b);
    80207ac8:	8556                	mv	a0,s5
    80207aca:	00000097          	auipc	ra,0x0
    80207ace:	d28080e7          	jalr	-728(ra) # 802077f2 <brelse>
    for (uint32 i = 0; i < fs->superBlock.bpb.fat_sz; i++, sec++) {
    80207ad2:	2b05                	addiw	s6,s6,1
    80207ad4:	2b85                	addiw	s7,s7,1
    80207ad6:	06492783          	lw	a5,100(s2)
    80207ada:	02fb7763          	bgeu	s6,a5,80207b08 <alloc_clus+0x110>
        b = fs->read(fs, sec);
    80207ade:	1f893783          	ld	a5,504(s2)
    80207ae2:	020b9593          	slli	a1,s7,0x20
    80207ae6:	9181                	srli	a1,a1,0x20
    80207ae8:	854a                	mv	a0,s2
    80207aea:	9782                	jalr	a5
    80207aec:	8aaa                	mv	s5,a0
        for (uint32 j = 0; j < ent_per_sec; j++) {
    80207aee:	fc0a0de3          	beqz	s4,80207ac8 <alloc_clus+0xd0>
    80207af2:	05850793          	addi	a5,a0,88
    80207af6:	84e2                	mv	s1,s8
            if (((uint32*)(b->data))[j] == 0) {
    80207af8:	86be                	mv	a3,a5
    80207afa:	4398                	lw	a4,0(a5)
    80207afc:	db05                	beqz	a4,80207a2c <alloc_clus+0x34>
        for (uint32 j = 0; j < ent_per_sec; j++) {
    80207afe:	2485                	addiw	s1,s1,1
    80207b00:	0791                	addi	a5,a5,4
    80207b02:	fe9a1be3          	bne	s4,s1,80207af8 <alloc_clus+0x100>
    80207b06:	b7c9                	j	80207ac8 <alloc_clus+0xd0>
    panic("no clusters");
    80207b08:	00005697          	auipc	a3,0x5
    80207b0c:	45868693          	addi	a3,a3,1112 # 8020cf60 <__func__.3+0x10>
    80207b10:	00005617          	auipc	a2,0x5
    80207b14:	57060613          	addi	a2,a2,1392 # 8020d080 <__func__.11>
    80207b18:	0db00593          	li	a1,219
    80207b1c:	00005517          	auipc	a0,0x5
    80207b20:	45450513          	addi	a0,a0,1108 # 8020cf70 <__func__.3+0x20>
    80207b24:	ffff9097          	auipc	ra,0xffff9
    80207b28:	028080e7          	jalr	40(ra) # 80200b4c <_panic_>

0000000080207b2c <reloc_clus>:
 * @param   entry       modify its cur_clus field
 * @param   off         the offset from the beginning of the relative file
 * @param   alloc       whether alloc new cluster when meeting end of FAT chains
 * @return              the offset from the new cur_clus
 */
static int reloc_clus(FileSystem *fs, struct dirent* entry, uint off, int alloc) {
    80207b2c:	715d                	addi	sp,sp,-80
    80207b2e:	e486                	sd	ra,72(sp)
    80207b30:	e0a2                	sd	s0,64(sp)
    80207b32:	fc26                	sd	s1,56(sp)
    80207b34:	f84a                	sd	s2,48(sp)
    80207b36:	f44e                	sd	s3,40(sp)
    80207b38:	f052                	sd	s4,32(sp)
    80207b3a:	ec56                	sd	s5,24(sp)
    80207b3c:	e85a                	sd	s6,16(sp)
    80207b3e:	e45e                	sd	s7,8(sp)
    80207b40:	e062                	sd	s8,0(sp)
    80207b42:	0880                	addi	s0,sp,80
    80207b44:	89aa                	mv	s3,a0
    80207b46:	84ae                	mv	s1,a1
    80207b48:	8ab2                	mv	s5,a2
    int clus_num = off / fs->superBlock.byts_per_clus;
    80207b4a:	05052c03          	lw	s8,80(a0)
    80207b4e:	03865a3b          	divuw	s4,a2,s8
    while (clus_num > entry->clus_cnt) {
    80207b52:	1105a703          	lw	a4,272(a1)
    80207b56:	07477863          	bgeu	a4,s4,80207bc6 <reloc_clus+0x9a>
    80207b5a:	8bb6                	mv	s7,a3
        int clus = read_fat(fs, entry->cur_clus);
        if (clus >= FAT32_EOC) {
    80207b5c:	10000b37          	lui	s6,0x10000
    80207b60:	1b5d                	addi	s6,s6,-9
    80207b62:	a82d                	j	80207b9c <reloc_clus+0x70>
            if (alloc) {
                clus = alloc_clus(fs, entry->dev);
    80207b64:	1204c583          	lbu	a1,288(s1)
    80207b68:	854e                	mv	a0,s3
    80207b6a:	00000097          	auipc	ra,0x0
    80207b6e:	e8e080e7          	jalr	-370(ra) # 802079f8 <alloc_clus>
    80207b72:	0005091b          	sext.w	s2,a0
                write_fat(fs, entry->cur_clus, clus);
    80207b76:	864a                	mv	a2,s2
    80207b78:	10c4a583          	lw	a1,268(s1)
    80207b7c:	854e                	mv	a0,s3
    80207b7e:	00000097          	auipc	ra,0x0
    80207b82:	d9e080e7          	jalr	-610(ra) # 8020791c <write_fat>
                entry->cur_clus = entry->first_clus;
                entry->clus_cnt = 0;
                return -1;
            }
        }
        entry->cur_clus = clus;
    80207b86:	1124a623          	sw	s2,268(s1)
        entry->clus_cnt++;
    80207b8a:	1104a783          	lw	a5,272(s1)
    80207b8e:	2785                	addiw	a5,a5,1
    80207b90:	0007871b          	sext.w	a4,a5
    80207b94:	10f4a823          	sw	a5,272(s1)
    while (clus_num > entry->clus_cnt) {
    80207b98:	03477763          	bgeu	a4,s4,80207bc6 <reloc_clus+0x9a>
        int clus = read_fat(fs, entry->cur_clus);
    80207b9c:	10c4a583          	lw	a1,268(s1)
    80207ba0:	854e                	mv	a0,s3
    80207ba2:	00000097          	auipc	ra,0x0
    80207ba6:	dee080e7          	jalr	-530(ra) # 80207990 <read_fat>
    80207baa:	0005091b          	sext.w	s2,a0
        if (clus >= FAT32_EOC) {
    80207bae:	fd2b5ce3          	bge	s6,s2,80207b86 <reloc_clus+0x5a>
            if (alloc) {
    80207bb2:	fa0b99e3          	bnez	s7,80207b64 <reloc_clus+0x38>
                entry->cur_clus = entry->first_clus;
    80207bb6:	1044a783          	lw	a5,260(s1)
    80207bba:	10f4a623          	sw	a5,268(s1)
                entry->clus_cnt = 0;
    80207bbe:	1004a823          	sw	zero,272(s1)
                return -1;
    80207bc2:	557d                	li	a0,-1
    80207bc4:	a0b9                	j	80207c12 <reloc_clus+0xe6>
    }
    if (clus_num < entry->clus_cnt) {
    80207bc6:	04ea7263          	bgeu	s4,a4,80207c0a <reloc_clus+0xde>
        entry->cur_clus = entry->first_clus;
    80207bca:	1044a783          	lw	a5,260(s1)
    80207bce:	10f4a623          	sw	a5,268(s1)
        entry->clus_cnt = 0;
    80207bd2:	1004a823          	sw	zero,272(s1)
        while (entry->clus_cnt < clus_num) {
    80207bd6:	038aea63          	bltu	s5,s8,80207c0a <reloc_clus+0xde>
            entry->cur_clus = read_fat(fs, entry->cur_clus);
            if (entry->cur_clus >= FAT32_EOC) {
    80207bda:	10000937          	lui	s2,0x10000
    80207bde:	195d                	addi	s2,s2,-9
            entry->cur_clus = read_fat(fs, entry->cur_clus);
    80207be0:	10c4a583          	lw	a1,268(s1)
    80207be4:	854e                	mv	a0,s3
    80207be6:	00000097          	auipc	ra,0x0
    80207bea:	daa080e7          	jalr	-598(ra) # 80207990 <read_fat>
    80207bee:	2501                	sext.w	a0,a0
    80207bf0:	10a4a623          	sw	a0,268(s1)
            if (entry->cur_clus >= FAT32_EOC) {
    80207bf4:	02a96b63          	bltu	s2,a0,80207c2a <reloc_clus+0xfe>
                panic("reloc_clus");
            }
            entry->clus_cnt++;
    80207bf8:	1104a783          	lw	a5,272(s1)
    80207bfc:	2785                	addiw	a5,a5,1
    80207bfe:	0007871b          	sext.w	a4,a5
    80207c02:	10f4a823          	sw	a5,272(s1)
        while (entry->clus_cnt < clus_num) {
    80207c06:	fd476de3          	bltu	a4,s4,80207be0 <reloc_clus+0xb4>
        }
    }
    return off % fs->superBlock.byts_per_clus;
    80207c0a:	0509a783          	lw	a5,80(s3)
    80207c0e:	02faf53b          	remuw	a0,s5,a5
}
    80207c12:	60a6                	ld	ra,72(sp)
    80207c14:	6406                	ld	s0,64(sp)
    80207c16:	74e2                	ld	s1,56(sp)
    80207c18:	7942                	ld	s2,48(sp)
    80207c1a:	79a2                	ld	s3,40(sp)
    80207c1c:	7a02                	ld	s4,32(sp)
    80207c1e:	6ae2                	ld	s5,24(sp)
    80207c20:	6b42                	ld	s6,16(sp)
    80207c22:	6ba2                	ld	s7,8(sp)
    80207c24:	6c02                	ld	s8,0(sp)
    80207c26:	6161                	addi	sp,sp,80
    80207c28:	8082                	ret
                panic("reloc_clus");
    80207c2a:	00005697          	auipc	a3,0x5
    80207c2e:	34e68693          	addi	a3,a3,846 # 8020cf78 <__func__.3+0x28>
    80207c32:	00005617          	auipc	a2,0x5
    80207c36:	45e60613          	addi	a2,a2,1118 # 8020d090 <__func__.12>
    80207c3a:	15000593          	li	a1,336
    80207c3e:	00005517          	auipc	a0,0x5
    80207c42:	33250513          	addi	a0,a0,818 # 8020cf70 <__func__.3+0x20>
    80207c46:	ffff9097          	auipc	ra,0xffff9
    80207c4a:	f06080e7          	jalr	-250(ra) # 80200b4c <_panic_>

0000000080207c4e <rw_clus>:
                    uint n) {
    80207c4e:	7119                	addi	sp,sp,-128
    80207c50:	fc86                	sd	ra,120(sp)
    80207c52:	f8a2                	sd	s0,112(sp)
    80207c54:	f4a6                	sd	s1,104(sp)
    80207c56:	f0ca                	sd	s2,96(sp)
    80207c58:	ecce                	sd	s3,88(sp)
    80207c5a:	e8d2                	sd	s4,80(sp)
    80207c5c:	e4d6                	sd	s5,72(sp)
    80207c5e:	e0da                	sd	s6,64(sp)
    80207c60:	fc5e                	sd	s7,56(sp)
    80207c62:	f862                	sd	s8,48(sp)
    80207c64:	f466                	sd	s9,40(sp)
    80207c66:	f06a                	sd	s10,32(sp)
    80207c68:	ec6e                	sd	s11,24(sp)
    80207c6a:	0100                	addi	s0,sp,128
    80207c6c:	f8d43023          	sd	a3,-128(s0)
    80207c70:	8b3a                	mv	s6,a4
    if (off + n > fs->superBlock.byts_per_clus)
    80207c72:	010786bb          	addw	a3,a5,a6
    80207c76:	4938                	lw	a4,80(a0)
    80207c78:	02d76d63          	bltu	a4,a3,80207cb2 <rw_clus+0x64>
    80207c7c:	8c2a                	mv	s8,a0
    80207c7e:	8bb2                	mv	s7,a2
    80207c80:	8cc2                	mv	s9,a6
    uint sec = first_sec_of_clus(fs, cluster) + off / fs->superBlock.bpb.byts_per_sec;
    80207c82:	05455703          	lhu	a4,84(a0)
    return ((cluster - 2) * fs->superBlock.bpb.sec_per_clus) + fs->superBlock.first_data_sec;
    80207c86:	ffe5899b          	addiw	s3,a1,-2
    80207c8a:	05654683          	lbu	a3,86(a0)
    80207c8e:	02d989bb          	mulw	s3,s3,a3
    80207c92:	4174                	lw	a3,68(a0)
    80207c94:	00d989bb          	addw	s3,s3,a3
    uint sec = first_sec_of_clus(fs, cluster) + off / fs->superBlock.bpb.byts_per_sec;
    80207c98:	02e7d6bb          	divuw	a3,a5,a4
    80207c9c:	00d989bb          	addw	s3,s3,a3
    off = off % fs->superBlock.bpb.byts_per_sec;
    80207ca0:	02e7fabb          	remuw	s5,a5,a4
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    80207ca4:	10080163          	beqz	a6,80207da6 <rw_clus+0x158>
    80207ca8:	4a01                	li	s4,0
        m = BSIZE - off % BSIZE;
    80207caa:	20000d93          	li	s11,512
        if (bad == -1) {
    80207cae:	5d7d                	li	s10,-1
    80207cb0:	a8bd                	j	80207d2e <rw_clus+0xe0>
        panic("offset out of range");
    80207cb2:	00005697          	auipc	a3,0x5
    80207cb6:	2d668693          	addi	a3,a3,726 # 8020cf88 <__func__.3+0x38>
    80207cba:	00005617          	auipc	a2,0x5
    80207cbe:	60660613          	addi	a2,a2,1542 # 8020d2c0 <__func__.10>
    80207cc2:	11500593          	li	a1,277
    80207cc6:	00005517          	auipc	a0,0x5
    80207cca:	2aa50513          	addi	a0,a0,682 # 8020cf70 <__func__.3+0x20>
    80207cce:	ffff9097          	auipc	ra,0xffff9
    80207cd2:	e7e080e7          	jalr	-386(ra) # 80200b4c <_panic_>
                bwrite(bp);
    80207cd6:	854a                	mv	a0,s2
    80207cd8:	00000097          	auipc	ra,0x0
    80207cdc:	ac2080e7          	jalr	-1342(ra) # 8020779a <bwrite>
        brelse(bp);
    80207ce0:	854a                	mv	a0,s2
    80207ce2:	00000097          	auipc	ra,0x0
    80207ce6:	b10080e7          	jalr	-1264(ra) # 802077f2 <brelse>
        if (bad == -1) {
    80207cea:	a805                	j	80207d1a <rw_clus+0xcc>
            bad = either_copyout(user, data, bp->data + (off % BSIZE), m);
    80207cec:	05890613          	addi	a2,s2,88 # 10000058 <_start-0x701fffa8>
    80207cf0:	1682                	slli	a3,a3,0x20
    80207cf2:	9281                	srli	a3,a3,0x20
    80207cf4:	963a                	add	a2,a2,a4
    80207cf6:	85da                	mv	a1,s6
    80207cf8:	f8043503          	ld	a0,-128(s0)
    80207cfc:	ffffb097          	auipc	ra,0xffffb
    80207d00:	52e080e7          	jalr	1326(ra) # 8020322a <either_copyout>
    80207d04:	f8a43423          	sd	a0,-120(s0)
        brelse(bp);
    80207d08:	854a                	mv	a0,s2
    80207d0a:	00000097          	auipc	ra,0x0
    80207d0e:	ae8080e7          	jalr	-1304(ra) # 802077f2 <brelse>
        if (bad == -1) {
    80207d12:	f8843783          	ld	a5,-120(s0)
    80207d16:	07a78863          	beq	a5,s10,80207d86 <rw_clus+0x138>
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    80207d1a:	01448a3b          	addw	s4,s1,s4
    80207d1e:	01548abb          	addw	s5,s1,s5
    80207d22:	1482                	slli	s1,s1,0x20
    80207d24:	9081                	srli	s1,s1,0x20
    80207d26:	9b26                	add	s6,s6,s1
    80207d28:	2985                	addiw	s3,s3,1
    80207d2a:	059a7e63          	bgeu	s4,s9,80207d86 <rw_clus+0x138>
        bp = fs->read(fs, sec);
    80207d2e:	1f8c3783          	ld	a5,504(s8)
    80207d32:	02099593          	slli	a1,s3,0x20
    80207d36:	9181                	srli	a1,a1,0x20
    80207d38:	8562                	mv	a0,s8
    80207d3a:	9782                	jalr	a5
    80207d3c:	892a                	mv	s2,a0
        m = BSIZE - off % BSIZE;
    80207d3e:	1ffaf713          	andi	a4,s5,511
        if (n - tot < m) {
    80207d42:	414c87bb          	subw	a5,s9,s4
        m = BSIZE - off % BSIZE;
    80207d46:	40ed863b          	subw	a2,s11,a4
    80207d4a:	86be                	mv	a3,a5
    80207d4c:	2781                	sext.w	a5,a5
    80207d4e:	0006059b          	sext.w	a1,a2
    80207d52:	00f5f363          	bgeu	a1,a5,80207d58 <rw_clus+0x10a>
    80207d56:	86b2                	mv	a3,a2
    80207d58:	0006849b          	sext.w	s1,a3
        if (write) {
    80207d5c:	f80b88e3          	beqz	s7,80207cec <rw_clus+0x9e>
            if ((bad = either_copyin(bp->data + (off % BSIZE), user, data,
    80207d60:	05890513          	addi	a0,s2,88
    80207d64:	1682                	slli	a3,a3,0x20
    80207d66:	9281                	srli	a3,a3,0x20
    80207d68:	865a                	mv	a2,s6
    80207d6a:	f8043583          	ld	a1,-128(s0)
    80207d6e:	953a                	add	a0,a0,a4
    80207d70:	ffffb097          	auipc	ra,0xffffb
    80207d74:	512080e7          	jalr	1298(ra) # 80203282 <either_copyin>
    80207d78:	f5a51fe3          	bne	a0,s10,80207cd6 <rw_clus+0x88>
        brelse(bp);
    80207d7c:	854a                	mv	a0,s2
    80207d7e:	00000097          	auipc	ra,0x0
    80207d82:	a74080e7          	jalr	-1420(ra) # 802077f2 <brelse>
}
    80207d86:	8552                	mv	a0,s4
    80207d88:	70e6                	ld	ra,120(sp)
    80207d8a:	7446                	ld	s0,112(sp)
    80207d8c:	74a6                	ld	s1,104(sp)
    80207d8e:	7906                	ld	s2,96(sp)
    80207d90:	69e6                	ld	s3,88(sp)
    80207d92:	6a46                	ld	s4,80(sp)
    80207d94:	6aa6                	ld	s5,72(sp)
    80207d96:	6b06                	ld	s6,64(sp)
    80207d98:	7be2                	ld	s7,56(sp)
    80207d9a:	7c42                	ld	s8,48(sp)
    80207d9c:	7ca2                	ld	s9,40(sp)
    80207d9e:	7d02                	ld	s10,32(sp)
    80207da0:	6de2                	ld	s11,24(sp)
    80207da2:	6109                	addi	sp,sp,128
    80207da4:	8082                	ret
    for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
    80207da6:	8a42                	mv	s4,a6
    80207da8:	bff9                	j	80207d86 <rw_clus+0x138>

0000000080207daa <eget>:
// cache entries by their whole path. But when parsing a path, we open all the
// directories through it, which forms a linked list from the final file to the
// root. Thus, we use the "parent" pointer to recognize whether an entry with
// the "name" as given is really the file we want in the right path. Should
// never get root by eget, it's easy to understand.
static struct dirent* eget(struct dirent* parent, char* name) {
    80207daa:	715d                	addi	sp,sp,-80
    80207dac:	e486                	sd	ra,72(sp)
    80207dae:	e0a2                	sd	s0,64(sp)
    80207db0:	fc26                	sd	s1,56(sp)
    80207db2:	f84a                	sd	s2,48(sp)
    80207db4:	f44e                	sd	s3,40(sp)
    80207db6:	f052                	sd	s4,32(sp)
    80207db8:	ec56                	sd	s5,24(sp)
    80207dba:	e85a                	sd	s6,16(sp)
    80207dbc:	e45e                	sd	s7,8(sp)
    80207dbe:	0880                	addi	s0,sp,80
    80207dc0:	8b2a                	mv	s6,a0
    80207dc2:	8bae                	mv	s7,a1
    struct dirent* ep;
    acquireLock(&direntCache.lock);
    80207dc4:	003f6517          	auipc	a0,0x3f6
    80207dc8:	a0c50513          	addi	a0,a0,-1524 # 805fd7d0 <direntCache>
    80207dcc:	ffffe097          	auipc	ra,0xffffe
    80207dd0:	ce2080e7          	jalr	-798(ra) # 80205aae <acquireLock>
    if (name) {
    80207dd4:	080b8b63          	beqz	s7,80207e6a <eget+0xc0>
    80207dd8:	003f6497          	auipc	s1,0x3f6
    80207ddc:	a1048493          	addi	s1,s1,-1520 # 805fd7e8 <direntCache+0x18>
        for (int i = 0; i < ENTRY_CACHE_NUM; i++) {
    80207de0:	4901                	li	s2,0
            ep = &direntCache.entries[i];
            if (ep->valid == 1 && ep->parent == parent &&
    80207de2:	4a05                	li	s4,1
        for (int i = 0; i < ENTRY_CACHE_NUM; i++) {
    80207de4:	03200a93          	li	s5,50
    80207de8:	a031                	j	80207df4 <eget+0x4a>
    80207dea:	2905                	addiw	s2,s2,1
    80207dec:	17048493          	addi	s1,s1,368
    80207df0:	07590d63          	beq	s2,s5,80207e6a <eget+0xc0>
            if (ep->valid == 1 && ep->parent == parent &&
    80207df4:	89a6                	mv	s3,s1
    80207df6:	12249783          	lh	a5,290(s1)
    80207dfa:	ff4798e3          	bne	a5,s4,80207dea <eget+0x40>
    80207dfe:	1384b783          	ld	a5,312(s1)
    80207e02:	ff6794e3          	bne	a5,s6,80207dea <eget+0x40>
                strncmp(ep->filename, name, FAT32_MAX_FILENAME) == 0) {
    80207e06:	0ff00613          	li	a2,255
    80207e0a:	85de                	mv	a1,s7
    80207e0c:	8526                	mv	a0,s1
    80207e0e:	ffffe097          	auipc	ra,0xffffe
    80207e12:	026080e7          	jalr	38(ra) # 80205e34 <strncmp>
            if (ep->valid == 1 && ep->parent == parent &&
    80207e16:	f971                	bnez	a0,80207dea <eget+0x40>
                if (ep->ref++ == 0) {
    80207e18:	17000713          	li	a4,368
    80207e1c:	02e90733          	mul	a4,s2,a4
    80207e20:	003f6797          	auipc	a5,0x3f6
    80207e24:	9b078793          	addi	a5,a5,-1616 # 805fd7d0 <direntCache>
    80207e28:	97ba                	add	a5,a5,a4
    80207e2a:	1487a703          	lw	a4,328(a5)
    80207e2e:	0017069b          	addiw	a3,a4,1
    80207e32:	14d7a423          	sw	a3,328(a5)
    80207e36:	e30d                	bnez	a4,80207e58 <eget+0xae>
                    ep->parent->ref++;
    80207e38:	17000793          	li	a5,368
    80207e3c:	02f90933          	mul	s2,s2,a5
    80207e40:	003f6797          	auipc	a5,0x3f6
    80207e44:	99078793          	addi	a5,a5,-1648 # 805fd7d0 <direntCache>
    80207e48:	97ca                	add	a5,a5,s2
    80207e4a:	1507b703          	ld	a4,336(a5)
    80207e4e:	13072783          	lw	a5,304(a4)
    80207e52:	2785                	addiw	a5,a5,1
    80207e54:	12f72823          	sw	a5,304(a4)
                }
                releaseLock(&direntCache.lock);
    80207e58:	003f6517          	auipc	a0,0x3f6
    80207e5c:	97850513          	addi	a0,a0,-1672 # 805fd7d0 <direntCache>
    80207e60:	ffffe097          	auipc	ra,0xffffe
    80207e64:	cca080e7          	jalr	-822(ra) # 80205b2a <releaseLock>
                return ep;
    80207e68:	a051                	j	80207eec <eget+0x142>
            }
        }
    }
    for (int i = 0; i < ENTRY_CACHE_NUM; i++) {
    80207e6a:	003f6717          	auipc	a4,0x3f6
    80207e6e:	aae70713          	addi	a4,a4,-1362 # 805fd918 <direntCache+0x148>
    80207e72:	4781                	li	a5,0
    80207e74:	03200613          	li	a2,50
        ep = &direntCache.entries[i];
        if (ep->ref == 0) {
    80207e78:	4314                	lw	a3,0(a4)
    80207e7a:	ca85                	beqz	a3,80207eaa <eget+0x100>
    for (int i = 0; i < ENTRY_CACHE_NUM; i++) {
    80207e7c:	2785                	addiw	a5,a5,1
    80207e7e:	17070713          	addi	a4,a4,368
    80207e82:	fec79be3          	bne	a5,a2,80207e78 <eget+0xce>
            ep->fileSystem = parent->fileSystem;
            releaseLock(&direntCache.lock);
            return ep;
        }
    }
    panic("eget: insufficient ecache");
    80207e86:	00005697          	auipc	a3,0x5
    80207e8a:	11a68693          	addi	a3,a3,282 # 8020cfa0 <__func__.3+0x50>
    80207e8e:	00005617          	auipc	a2,0x5
    80207e92:	41a60613          	addi	a2,a2,1050 # 8020d2a8 <__func__.5>
    80207e96:	1c500593          	li	a1,453
    80207e9a:	00005517          	auipc	a0,0x5
    80207e9e:	0d650513          	addi	a0,a0,214 # 8020cf70 <__func__.3+0x20>
    80207ea2:	ffff9097          	auipc	ra,0xffff9
    80207ea6:	caa080e7          	jalr	-854(ra) # 80200b4c <_panic_>
        ep = &direntCache.entries[i];
    80207eaa:	17000713          	li	a4,368
    80207eae:	02e787b3          	mul	a5,a5,a4
    80207eb2:	01878993          	addi	s3,a5,24
    80207eb6:	003f6517          	auipc	a0,0x3f6
    80207eba:	91a50513          	addi	a0,a0,-1766 # 805fd7d0 <direntCache>
    80207ebe:	99aa                	add	s3,s3,a0
            ep->ref = 1;
    80207ec0:	97aa                	add	a5,a5,a0
    80207ec2:	4705                	li	a4,1
    80207ec4:	14e7a423          	sw	a4,328(a5)
            ep->dev = parent->dev;
    80207ec8:	120b4703          	lbu	a4,288(s6) # 10000120 <_start-0x701ffee0>
    80207ecc:	12e78c23          	sb	a4,312(a5)
            ep->off = 0;
    80207ed0:	1407a623          	sw	zero,332(a5)
            ep->valid = 0;
    80207ed4:	12079d23          	sh	zero,314(a5)
            ep->dirty = 0;
    80207ed8:	12078ca3          	sb	zero,313(a5)
            ep->fileSystem = parent->fileSystem;
    80207edc:	118b3703          	ld	a4,280(s6)
    80207ee0:	12e7b823          	sd	a4,304(a5)
            releaseLock(&direntCache.lock);
    80207ee4:	ffffe097          	auipc	ra,0xffffe
    80207ee8:	c46080e7          	jalr	-954(ra) # 80205b2a <releaseLock>
    return 0;
}
    80207eec:	854e                	mv	a0,s3
    80207eee:	60a6                	ld	ra,72(sp)
    80207ef0:	6406                	ld	s0,64(sp)
    80207ef2:	74e2                	ld	s1,56(sp)
    80207ef4:	7942                	ld	s2,48(sp)
    80207ef6:	79a2                	ld	s3,40(sp)
    80207ef8:	7a02                	ld	s4,32(sp)
    80207efa:	6ae2                	ld	s5,24(sp)
    80207efc:	6b42                	ld	s6,16(sp)
    80207efe:	6ba2                	ld	s7,8(sp)
    80207f00:	6161                	addi	sp,sp,80
    80207f02:	8082                	ret

0000000080207f04 <read_entry_name>:
 * Read filename from directory entry.
 * @param   buffer      pointer to the array that stores the name
 * @param   raw_entry   pointer to the entry in a sector buffer
 * @param   islong      if non-zero, read as l-n-e, otherwise s-n-e.
 */
static void read_entry_name(char* buffer, union dentry* d) {
    80207f04:	7179                	addi	sp,sp,-48
    80207f06:	f406                	sd	ra,40(sp)
    80207f08:	f022                	sd	s0,32(sp)
    80207f0a:	ec26                	sd	s1,24(sp)
    80207f0c:	e84a                	sd	s2,16(sp)
    80207f0e:	1800                	addi	s0,sp,48
    80207f10:	84aa                	mv	s1,a0
    80207f12:	892e                	mv	s2,a1
    if (d->lne.attr == ATTR_LONG_NAME) {  // long entry branch
    80207f14:	00b5c703          	lbu	a4,11(a1)
    80207f18:	47bd                	li	a5,15
    80207f1a:	08f70463          	beq	a4,a5,80207fa2 <read_entry_name+0x9e>
        snstr(buffer, d->lne.name2, NELEM(d->lne.name2));
        buffer += NELEM(d->lne.name2);
        snstr(buffer, d->lne.name3, NELEM(d->lne.name3));
    } else {
        // assert: only "." and ".." will enter this branch
        memset(buffer, 0, CHAR_SHORT_NAME + 2);  // plus '.' and '\0'
    80207f1e:	4635                	li	a2,13
    80207f20:	4581                	li	a1,0
    80207f22:	ffffe097          	auipc	ra,0xffffe
    80207f26:	e42080e7          	jalr	-446(ra) # 80205d64 <memset>
        int i;
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80207f2a:	00094703          	lbu	a4,0(s2)
    80207f2e:	02000793          	li	a5,32
    80207f32:	0af70b63          	beq	a4,a5,80207fe8 <read_entry_name+0xe4>
    80207f36:	4785                	li	a5,1
    80207f38:	02000613          	li	a2,32
    80207f3c:	45a5                	li	a1,9
            buffer[i] = d->sne.name[i];
    80207f3e:	00f486b3          	add	a3,s1,a5
    80207f42:	fee68fa3          	sb	a4,-1(a3)
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80207f46:	0007869b          	sext.w	a3,a5
    80207f4a:	00f90733          	add	a4,s2,a5
    80207f4e:	00074703          	lbu	a4,0(a4)
    80207f52:	00c70563          	beq	a4,a2,80207f5c <read_entry_name+0x58>
    80207f56:	0785                	addi	a5,a5,1
    80207f58:	feb793e3          	bne	a5,a1,80207f3e <read_entry_name+0x3a>
        }
        if (d->sne.name[8] != ' ') {
    80207f5c:	00894703          	lbu	a4,8(s2)
    80207f60:	02000793          	li	a5,32
    80207f64:	00f70963          	beq	a4,a5,80207f76 <read_entry_name+0x72>
            buffer[i++] = '.';
    80207f68:	00d487b3          	add	a5,s1,a3
    80207f6c:	02e00713          	li	a4,46
    80207f70:	00e78023          	sb	a4,0(a5)
    80207f74:	2685                	addiw	a3,a3,1
        }
        for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
    80207f76:	00890793          	addi	a5,s2,8
    80207f7a:	94b6                	add	s1,s1,a3
    80207f7c:	092d                	addi	s2,s2,11
            if (d->sne.name[j] == ' ') {
    80207f7e:	02000693          	li	a3,32
    80207f82:	0007c703          	lbu	a4,0(a5)
    80207f86:	00d70863          	beq	a4,a3,80207f96 <read_entry_name+0x92>
                break;
            }
            buffer[i] = d->sne.name[j];
    80207f8a:	00e48023          	sb	a4,0(s1)
        for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
    80207f8e:	0785                	addi	a5,a5,1
    80207f90:	0485                	addi	s1,s1,1
    80207f92:	ff2798e3          	bne	a5,s2,80207f82 <read_entry_name+0x7e>
        }
    }
}
    80207f96:	70a2                	ld	ra,40(sp)
    80207f98:	7402                	ld	s0,32(sp)
    80207f9a:	64e2                	ld	s1,24(sp)
    80207f9c:	6942                	ld	s2,16(sp)
    80207f9e:	6145                	addi	sp,sp,48
    80207fa0:	8082                	ret
        memmove(temp, d->lne.name1, sizeof(temp));
    80207fa2:	4629                	li	a2,10
    80207fa4:	0585                	addi	a1,a1,1
    80207fa6:	fd040513          	addi	a0,s0,-48
    80207faa:	ffffe097          	auipc	ra,0xffffe
    80207fae:	e16080e7          	jalr	-490(ra) # 80205dc0 <memmove>
        snstr(buffer, temp, NELEM(d->lne.name1));
    80207fb2:	4615                	li	a2,5
    80207fb4:	fd040593          	addi	a1,s0,-48
    80207fb8:	8526                	mv	a0,s1
    80207fba:	ffffe097          	auipc	ra,0xffffe
    80207fbe:	f74080e7          	jalr	-140(ra) # 80205f2e <snstr>
        snstr(buffer, d->lne.name2, NELEM(d->lne.name2));
    80207fc2:	4619                	li	a2,6
    80207fc4:	00e90593          	addi	a1,s2,14
    80207fc8:	00548513          	addi	a0,s1,5
    80207fcc:	ffffe097          	auipc	ra,0xffffe
    80207fd0:	f62080e7          	jalr	-158(ra) # 80205f2e <snstr>
        snstr(buffer, d->lne.name3, NELEM(d->lne.name3));
    80207fd4:	4609                	li	a2,2
    80207fd6:	01c90593          	addi	a1,s2,28
    80207fda:	00b48513          	addi	a0,s1,11
    80207fde:	ffffe097          	auipc	ra,0xffffe
    80207fe2:	f50080e7          	jalr	-176(ra) # 80205f2e <snstr>
    80207fe6:	bf45                	j	80207f96 <read_entry_name+0x92>
        for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
    80207fe8:	4681                	li	a3,0
    80207fea:	bf8d                	j	80207f5c <read_entry_name+0x58>

0000000080207fec <getBlockNumber>:
int getBlockNumber(struct dirent* entry, int dataBlockNum) {
    80207fec:	7179                	addi	sp,sp,-48
    80207fee:	f406                	sd	ra,40(sp)
    80207ff0:	f022                	sd	s0,32(sp)
    80207ff2:	ec26                	sd	s1,24(sp)
    80207ff4:	e84a                	sd	s2,16(sp)
    80207ff6:	e44e                	sd	s3,8(sp)
    80207ff8:	1800                	addi	s0,sp,48
    int offset = (dataBlockNum << 9);
    80207ffa:	0095949b          	slliw	s1,a1,0x9
    if (offset > entry->file_size) {
    80207ffe:	0004861b          	sext.w	a2,s1
    80208002:	10852783          	lw	a5,264(a0)
    80208006:	04c7e663          	bltu	a5,a2,80208052 <getBlockNumber+0x66>
    8020800a:	892a                	mv	s2,a0
    FileSystem *fs = entry->fileSystem;
    8020800c:	11853983          	ld	s3,280(a0)
    reloc_clus(fs, entry, offset, 0);
    80208010:	4681                	li	a3,0
    80208012:	85aa                	mv	a1,a0
    80208014:	854e                	mv	a0,s3
    80208016:	00000097          	auipc	ra,0x0
    8020801a:	b16080e7          	jalr	-1258(ra) # 80207b2c <reloc_clus>
    return ((cluster - 2) * fs->superBlock.bpb.sec_per_clus) + fs->superBlock.first_data_sec;
    8020801e:	10c92503          	lw	a0,268(s2)
    80208022:	3579                	addiw	a0,a0,-2
    80208024:	0569c783          	lbu	a5,86(s3)
    80208028:	02f5053b          	mulw	a0,a0,a5
    8020802c:	0449a783          	lw	a5,68(s3)
    80208030:	9d3d                	addw	a0,a0,a5
    return first_sec_of_clus(fs, entry->cur_clus) + offset % fs->superBlock.byts_per_clus / fs->superBlock.bpb.byts_per_sec;
    80208032:	0509a783          	lw	a5,80(s3)
    80208036:	02f4f4bb          	remuw	s1,s1,a5
    8020803a:	0549d783          	lhu	a5,84(s3)
    8020803e:	02f4d4bb          	divuw	s1,s1,a5
    80208042:	9d25                	addw	a0,a0,s1
}
    80208044:	70a2                	ld	ra,40(sp)
    80208046:	7402                	ld	s0,32(sp)
    80208048:	64e2                	ld	s1,24(sp)
    8020804a:	6942                	ld	s2,16(sp)
    8020804c:	69a2                	ld	s3,8(sp)
    8020804e:	6145                	addi	sp,sp,48
    80208050:	8082                	ret
        return -1;
    80208052:	557d                	li	a0,-1
    80208054:	bfc5                	j	80208044 <getBlockNumber+0x58>

0000000080208056 <eread>:
    if (off > entry->file_size || off + n < off ||
    80208056:	10852783          	lw	a5,264(a0)
    8020805a:	0ed7e863          	bltu	a5,a3,8020814a <eread+0xf4>
int eread(struct dirent* entry, int user_dst, u64 dst, uint off, uint n) {
    8020805e:	711d                	addi	sp,sp,-96
    80208060:	ec86                	sd	ra,88(sp)
    80208062:	e8a2                	sd	s0,80(sp)
    80208064:	e4a6                	sd	s1,72(sp)
    80208066:	e0ca                	sd	s2,64(sp)
    80208068:	fc4e                	sd	s3,56(sp)
    8020806a:	f852                	sd	s4,48(sp)
    8020806c:	f456                	sd	s5,40(sp)
    8020806e:	f05a                	sd	s6,32(sp)
    80208070:	ec5e                	sd	s7,24(sp)
    80208072:	e862                	sd	s8,16(sp)
    80208074:	e466                	sd	s9,8(sp)
    80208076:	e06a                	sd	s10,0(sp)
    80208078:	1080                	addi	s0,sp,96
    8020807a:	8a2a                	mv	s4,a0
    8020807c:	8c2e                	mv	s8,a1
    8020807e:	8ab2                	mv	s5,a2
    80208080:	8936                	mv	s2,a3
    80208082:	8b3a                	mv	s6,a4
    if (off > entry->file_size || off + n < off ||
    80208084:	9eb9                	addw	a3,a3,a4
        return 0;
    80208086:	4501                	li	a0,0
    if (off > entry->file_size || off + n < off ||
    80208088:	0b26e163          	bltu	a3,s2,8020812a <eread+0xd4>
    8020808c:	100a4703          	lbu	a4,256(s4)
    80208090:	8b41                	andi	a4,a4,16
    80208092:	ef41                	bnez	a4,8020812a <eread+0xd4>
    if (off + n > entry->file_size) {
    80208094:	00d7f463          	bgeu	a5,a3,8020809c <eread+0x46>
        n = entry->file_size - off;
    80208098:	41278b3b          	subw	s6,a5,s2
    FileSystem *fs = entry->fileSystem;
    8020809c:	118a3b83          	ld	s7,280(s4)
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
    802080a0:	10ca2703          	lw	a4,268(s4)
    802080a4:	100007b7          	lui	a5,0x10000
    802080a8:	17dd                	addi	a5,a5,-9
    802080aa:	06e7ed63          	bltu	a5,a4,80208124 <eread+0xce>
    802080ae:	080b0c63          	beqz	s6,80208146 <eread+0xf0>
    802080b2:	4981                	li	s3,0
    802080b4:	8cbe                	mv	s9,a5
    802080b6:	a835                	j	802080f2 <eread+0x9c>
    802080b8:	00048d1b          	sext.w	s10,s1
        if (rw_clus(fs, entry->cur_clus, 0, user_dst, dst, 
    802080bc:	886a                	mv	a6,s10
    802080be:	8756                	mv	a4,s5
    802080c0:	86e2                	mv	a3,s8
    802080c2:	4601                	li	a2,0
    802080c4:	10ca2583          	lw	a1,268(s4)
    802080c8:	855e                	mv	a0,s7
    802080ca:	00000097          	auipc	ra,0x0
    802080ce:	b84080e7          	jalr	-1148(ra) # 80207c4e <rw_clus>
    802080d2:	2501                	sext.w	a0,a0
    802080d4:	04ad1963          	bne	s10,a0,80208126 <eread+0xd0>
         tot += m, off += m, dst += m) {
    802080d8:	013489bb          	addw	s3,s1,s3
    802080dc:	0124893b          	addw	s2,s1,s2
    802080e0:	1482                	slli	s1,s1,0x20
    802080e2:	9081                	srli	s1,s1,0x20
    802080e4:	9aa6                	add	s5,s5,s1
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
    802080e6:	10ca2783          	lw	a5,268(s4)
    802080ea:	02fcee63          	bltu	s9,a5,80208126 <eread+0xd0>
    802080ee:	0369fc63          	bgeu	s3,s6,80208126 <eread+0xd0>
        reloc_clus(fs, entry, off, 0);
    802080f2:	4681                	li	a3,0
    802080f4:	864a                	mv	a2,s2
    802080f6:	85d2                	mv	a1,s4
    802080f8:	855e                	mv	a0,s7
    802080fa:	00000097          	auipc	ra,0x0
    802080fe:	a32080e7          	jalr	-1486(ra) # 80207b2c <reloc_clus>
        m = fs->superBlock.byts_per_clus - off % fs->superBlock.byts_per_clus;
    80208102:	050ba703          	lw	a4,80(s7)
    80208106:	02e976bb          	remuw	a3,s2,a4
    8020810a:	0006879b          	sext.w	a5,a3
        if (n - tot < m) {
    8020810e:	413b083b          	subw	a6,s6,s3
        m = fs->superBlock.byts_per_clus - off % fs->superBlock.byts_per_clus;
    80208112:	9f15                	subw	a4,a4,a3
    80208114:	84c2                	mv	s1,a6
    80208116:	2801                	sext.w	a6,a6
    80208118:	0007069b          	sext.w	a3,a4
    8020811c:	f906fee3          	bgeu	a3,a6,802080b8 <eread+0x62>
    80208120:	84ba                	mv	s1,a4
    80208122:	bf59                	j	802080b8 <eread+0x62>
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
    80208124:	4981                	li	s3,0
    return tot;
    80208126:	0009851b          	sext.w	a0,s3
}
    8020812a:	60e6                	ld	ra,88(sp)
    8020812c:	6446                	ld	s0,80(sp)
    8020812e:	64a6                	ld	s1,72(sp)
    80208130:	6906                	ld	s2,64(sp)
    80208132:	79e2                	ld	s3,56(sp)
    80208134:	7a42                	ld	s4,48(sp)
    80208136:	7aa2                	ld	s5,40(sp)
    80208138:	7b02                	ld	s6,32(sp)
    8020813a:	6be2                	ld	s7,24(sp)
    8020813c:	6c42                	ld	s8,16(sp)
    8020813e:	6ca2                	ld	s9,8(sp)
    80208140:	6d02                	ld	s10,0(sp)
    80208142:	6125                	addi	sp,sp,96
    80208144:	8082                	ret
    for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
    80208146:	89da                	mv	s3,s6
    80208148:	bff9                	j	80208126 <eread+0xd0>
        return 0;
    8020814a:	4501                	li	a0,0
}
    8020814c:	8082                	ret

000000008020814e <ewrite>:
    if (off > entry->file_size || off + n < off ||
    8020814e:	10852783          	lw	a5,264(a0)
    80208152:	0ed7e563          	bltu	a5,a3,8020823c <ewrite+0xee>
int ewrite(struct dirent* entry, int user_src, u64 src, uint off, uint n) {
    80208156:	711d                	addi	sp,sp,-96
    80208158:	ec86                	sd	ra,88(sp)
    8020815a:	e8a2                	sd	s0,80(sp)
    8020815c:	e4a6                	sd	s1,72(sp)
    8020815e:	e0ca                	sd	s2,64(sp)
    80208160:	fc4e                	sd	s3,56(sp)
    80208162:	f852                	sd	s4,48(sp)
    80208164:	f456                	sd	s5,40(sp)
    80208166:	f05a                	sd	s6,32(sp)
    80208168:	ec5e                	sd	s7,24(sp)
    8020816a:	e862                	sd	s8,16(sp)
    8020816c:	e466                	sd	s9,8(sp)
    8020816e:	1080                	addi	s0,sp,96
    80208170:	8b2a                	mv	s6,a0
    80208172:	8c2e                	mv	s8,a1
    80208174:	8a32                	mv	s4,a2
    80208176:	8936                	mv	s2,a3
    80208178:	8bba                	mv	s7,a4
    if (off > entry->file_size || off + n < off ||
    8020817a:	00e687bb          	addw	a5,a3,a4
    8020817e:	0cd7e163          	bltu	a5,a3,80208240 <ewrite+0xf2>
        (u64)off + n > 0xffffffff || (entry->attribute & ATTR_READ_ONLY)) {
    80208182:	02069793          	slli	a5,a3,0x20
    80208186:	9381                	srli	a5,a5,0x20
    80208188:	1702                	slli	a4,a4,0x20
    8020818a:	9301                	srli	a4,a4,0x20
    8020818c:	97ba                	add	a5,a5,a4
    if (off > entry->file_size || off + n < off ||
    8020818e:	577d                	li	a4,-1
    80208190:	9301                	srli	a4,a4,0x20
    80208192:	0af76963          	bltu	a4,a5,80208244 <ewrite+0xf6>
        (u64)off + n > 0xffffffff || (entry->attribute & ATTR_READ_ONLY)) {
    80208196:	10054783          	lbu	a5,256(a0)
    8020819a:	8b85                	andi	a5,a5,1
    8020819c:	e7d5                	bnez	a5,80208248 <ewrite+0xfa>
    FileSystem *fs = entry->fileSystem;
    8020819e:	11853a83          	ld	s5,280(a0)
    if (entry->first_clus ==
    802081a2:	10452783          	lw	a5,260(a0)
    802081a6:	c789                	beqz	a5,802081b0 <ewrite+0x62>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    802081a8:	080b8863          	beqz	s7,80208238 <ewrite+0xea>
    802081ac:	4981                	li	s3,0
    802081ae:	a8a1                	j	80208206 <ewrite+0xb8>
        entry->cur_clus = entry->first_clus = alloc_clus(fs, entry->dev);
    802081b0:	12054583          	lbu	a1,288(a0)
    802081b4:	8556                	mv	a0,s5
    802081b6:	00000097          	auipc	ra,0x0
    802081ba:	842080e7          	jalr	-1982(ra) # 802079f8 <alloc_clus>
    802081be:	2501                	sext.w	a0,a0
    802081c0:	10ab2223          	sw	a0,260(s6)
    802081c4:	10ab2623          	sw	a0,268(s6)
        entry->clus_cnt = 0;
    802081c8:	100b2823          	sw	zero,272(s6)
        entry->dirty = 1;
    802081cc:	4785                	li	a5,1
    802081ce:	12fb00a3          	sb	a5,289(s6)
    802081d2:	bfd9                	j	802081a8 <ewrite+0x5a>
    802081d4:	00048c9b          	sext.w	s9,s1
        if (rw_clus(fs, entry->cur_clus, 1, user_src, src, 
    802081d8:	8866                	mv	a6,s9
    802081da:	8752                	mv	a4,s4
    802081dc:	86e2                	mv	a3,s8
    802081de:	4605                	li	a2,1
    802081e0:	10cb2583          	lw	a1,268(s6)
    802081e4:	8556                	mv	a0,s5
    802081e6:	00000097          	auipc	ra,0x0
    802081ea:	a68080e7          	jalr	-1432(ra) # 80207c4e <rw_clus>
    802081ee:	2501                	sext.w	a0,a0
    802081f0:	04ac9e63          	bne	s9,a0,8020824c <ewrite+0xfe>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    802081f4:	013489bb          	addw	s3,s1,s3
    802081f8:	0124893b          	addw	s2,s1,s2
    802081fc:	1482                	slli	s1,s1,0x20
    802081fe:	9081                	srli	s1,s1,0x20
    80208200:	9a26                	add	s4,s4,s1
    80208202:	0579f563          	bgeu	s3,s7,8020824c <ewrite+0xfe>
        reloc_clus(fs, entry, off, 1);
    80208206:	4685                	li	a3,1
    80208208:	864a                	mv	a2,s2
    8020820a:	85da                	mv	a1,s6
    8020820c:	8556                	mv	a0,s5
    8020820e:	00000097          	auipc	ra,0x0
    80208212:	91e080e7          	jalr	-1762(ra) # 80207b2c <reloc_clus>
        m = fs->superBlock.byts_per_clus - off % fs->superBlock.byts_per_clus;
    80208216:	050aa703          	lw	a4,80(s5)
    8020821a:	02e976bb          	remuw	a3,s2,a4
    8020821e:	0006879b          	sext.w	a5,a3
        if (n - tot < m) {
    80208222:	413b883b          	subw	a6,s7,s3
        m = fs->superBlock.byts_per_clus - off % fs->superBlock.byts_per_clus;
    80208226:	9f15                	subw	a4,a4,a3
    80208228:	84c2                	mv	s1,a6
    8020822a:	2801                	sext.w	a6,a6
    8020822c:	0007069b          	sext.w	a3,a4
    80208230:	fb06f2e3          	bgeu	a3,a6,802081d4 <ewrite+0x86>
    80208234:	84ba                	mv	s1,a4
    80208236:	bf79                	j	802081d4 <ewrite+0x86>
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
    80208238:	89de                	mv	s3,s7
    8020823a:	a015                	j	8020825e <ewrite+0x110>
        return -1;
    8020823c:	557d                	li	a0,-1
}
    8020823e:	8082                	ret
        return -1;
    80208240:	557d                	li	a0,-1
    80208242:	a005                	j	80208262 <ewrite+0x114>
    80208244:	557d                	li	a0,-1
    80208246:	a831                	j	80208262 <ewrite+0x114>
    80208248:	557d                	li	a0,-1
    8020824a:	a821                	j	80208262 <ewrite+0x114>
        if (off > entry->file_size) {
    8020824c:	108b2783          	lw	a5,264(s6)
    80208250:	0127f763          	bgeu	a5,s2,8020825e <ewrite+0x110>
            entry->file_size = off;
    80208254:	112b2423          	sw	s2,264(s6)
            entry->dirty = 1;
    80208258:	4785                	li	a5,1
    8020825a:	12fb00a3          	sb	a5,289(s6)
    return tot;
    8020825e:	0009851b          	sext.w	a0,s3
}
    80208262:	60e6                	ld	ra,88(sp)
    80208264:	6446                	ld	s0,80(sp)
    80208266:	64a6                	ld	s1,72(sp)
    80208268:	6906                	ld	s2,64(sp)
    8020826a:	79e2                	ld	s3,56(sp)
    8020826c:	7a42                	ld	s4,48(sp)
    8020826e:	7aa2                	ld	s5,40(sp)
    80208270:	7b02                	ld	s6,32(sp)
    80208272:	6be2                	ld	s7,24(sp)
    80208274:	6c42                	ld	s8,16(sp)
    80208276:	6ca2                	ld	s9,8(sp)
    80208278:	6125                	addi	sp,sp,96
    8020827a:	8082                	ret

000000008020827c <formatname>:
char* formatname(char* name) {
    8020827c:	7179                	addi	sp,sp,-48
    8020827e:	f406                	sd	ra,40(sp)
    80208280:	f022                	sd	s0,32(sp)
    80208282:	ec26                	sd	s1,24(sp)
    80208284:	e84a                	sd	s2,16(sp)
    80208286:	e44e                	sd	s3,8(sp)
    80208288:	e052                	sd	s4,0(sp)
    8020828a:	1800                	addi	s0,sp,48
    8020828c:	84aa                	mv	s1,a0
    while (*name == ' ' || *name == '.') {
    8020828e:	02000793          	li	a5,32
    80208292:	02e00713          	li	a4,46
    80208296:	a011                	j	8020829a <formatname+0x1e>
        name++;
    80208298:	0485                	addi	s1,s1,1
    while (*name == ' ' || *name == '.') {
    8020829a:	0004c583          	lbu	a1,0(s1)
    8020829e:	fef58de3          	beq	a1,a5,80208298 <formatname+0x1c>
    802082a2:	fee58be3          	beq	a1,a4,80208298 <formatname+0x1c>
    for (p = name; *p; p++) {
    802082a6:	c1b9                	beqz	a1,802082ec <formatname+0x70>
    802082a8:	8926                	mv	s2,s1
        if (c < 0x20 || strchr(illegal, c)) {
    802082aa:	49fd                	li	s3,31
    802082ac:	00006a17          	auipc	s4,0x6
    802082b0:	584a0a13          	addi	s4,s4,1412 # 8020e830 <illegal.9>
    802082b4:	02b9fe63          	bgeu	s3,a1,802082f0 <formatname+0x74>
    802082b8:	8552                	mv	a0,s4
    802082ba:	ffffe097          	auipc	ra,0xffffe
    802082be:	c50080e7          	jalr	-944(ra) # 80205f0a <strchr>
    802082c2:	e121                	bnez	a0,80208302 <formatname+0x86>
    for (p = name; *p; p++) {
    802082c4:	0905                	addi	s2,s2,1
    802082c6:	00094583          	lbu	a1,0(s2)
    802082ca:	f5ed                	bnez	a1,802082b4 <formatname+0x38>
        if (*p != ' ') {
    802082cc:	02000693          	li	a3,32
    802082d0:	874a                	mv	a4,s2
    while (p-- > name) {
    802082d2:	0124fb63          	bgeu	s1,s2,802082e8 <formatname+0x6c>
        if (*p != ' ') {
    802082d6:	197d                	addi	s2,s2,-1
    802082d8:	00094783          	lbu	a5,0(s2)
    802082dc:	fed78ae3          	beq	a5,a3,802082d0 <formatname+0x54>
            p[1] = '\0';
    802082e0:	00070023          	sb	zero,0(a4)
            break;
    802082e4:	8526                	mv	a0,s1
    802082e6:	a031                	j	802082f2 <formatname+0x76>
    802082e8:	8526                	mv	a0,s1
    802082ea:	a021                	j	802082f2 <formatname+0x76>
    for (p = name; *p; p++) {
    802082ec:	8526                	mv	a0,s1
    802082ee:	a011                	j	802082f2 <formatname+0x76>
            return 0;
    802082f0:	4501                	li	a0,0
}
    802082f2:	70a2                	ld	ra,40(sp)
    802082f4:	7402                	ld	s0,32(sp)
    802082f6:	64e2                	ld	s1,24(sp)
    802082f8:	6942                	ld	s2,16(sp)
    802082fa:	69a2                	ld	s3,8(sp)
    802082fc:	6a02                	ld	s4,0(sp)
    802082fe:	6145                	addi	sp,sp,48
    80208300:	8082                	ret
            return 0;
    80208302:	4501                	li	a0,0
    80208304:	b7fd                	j	802082f2 <formatname+0x76>

0000000080208306 <cal_checksum>:
uint8 cal_checksum(uchar* shortname) {
    80208306:	1141                	addi	sp,sp,-16
    80208308:	e422                	sd	s0,8(sp)
    8020830a:	0800                	addi	s0,sp,16
    8020830c:	87aa                	mv	a5,a0
    for (int i = CHAR_SHORT_NAME; i != 0; i--) {
    8020830e:	00b50613          	addi	a2,a0,11
    uint8 sum = 0;
    80208312:	4501                	li	a0,0
        sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1) + *shortname++;
    80208314:	0075171b          	slliw	a4,a0,0x7
    80208318:	0785                	addi	a5,a5,1
    8020831a:	0015551b          	srliw	a0,a0,0x1
    8020831e:	fff7c683          	lbu	a3,-1(a5) # fffffff <_start-0x70200001>
    80208322:	9d35                	addw	a0,a0,a3
    80208324:	953a                	add	a0,a0,a4
    80208326:	0ff57513          	zext.b	a0,a0
    for (int i = CHAR_SHORT_NAME; i != 0; i--) {
    8020832a:	fef615e3          	bne	a2,a5,80208314 <cal_checksum+0xe>
}
    8020832e:	6422                	ld	s0,8(sp)
    80208330:	0141                	addi	sp,sp,16
    80208332:	8082                	ret

0000000080208334 <emake>:
void emake(struct dirent* dp, struct dirent* ep, uint off) {
    80208334:	7171                	addi	sp,sp,-176
    80208336:	f506                	sd	ra,168(sp)
    80208338:	f122                	sd	s0,160(sp)
    8020833a:	ed26                	sd	s1,152(sp)
    8020833c:	e94a                	sd	s2,144(sp)
    8020833e:	e54e                	sd	s3,136(sp)
    80208340:	e152                	sd	s4,128(sp)
    80208342:	fcd6                	sd	s5,120(sp)
    80208344:	f8da                	sd	s6,112(sp)
    80208346:	f4de                	sd	s7,104(sp)
    80208348:	f0e2                	sd	s8,96(sp)
    8020834a:	ece6                	sd	s9,88(sp)
    8020834c:	e8ea                	sd	s10,80(sp)
    8020834e:	e4ee                	sd	s11,72(sp)
    80208350:	1900                	addi	s0,sp,176
    if (!(dp->attribute & ATTR_DIRECTORY))
    80208352:	10054783          	lbu	a5,256(a0)
    80208356:	8bc1                	andi	a5,a5,16
    80208358:	cff9                	beqz	a5,80208436 <emake+0x102>
    8020835a:	8aaa                	mv	s5,a0
    8020835c:	8bae                	mv	s7,a1
    8020835e:	8d32                	mv	s10,a2
    if (off % sizeof(union dentry))
    80208360:	01f67793          	andi	a5,a2,31
    80208364:	ebfd                	bnez	a5,8020845a <emake+0x126>
    assert(dp->fileSystem == ep->fileSystem);
    80208366:	11853683          	ld	a3,280(a0)
    8020836a:	1185b783          	ld	a5,280(a1)
    8020836e:	8e9d                	sub	a3,a3,a5
    80208370:	0016b693          	seqz	a3,a3
    80208374:	00005617          	auipc	a2,0x5
    80208378:	f4460613          	addi	a2,a2,-188 # 8020d2b8 <__func__.8>
    8020837c:	22300593          	li	a1,547
    80208380:	00005517          	auipc	a0,0x5
    80208384:	bf050513          	addi	a0,a0,-1040 # 8020cf70 <__func__.3+0x20>
    80208388:	ffff9097          	auipc	ra,0xffff9
    8020838c:	83a080e7          	jalr	-1990(ra) # 80200bc2 <_assert_>
    FileSystem *fs = ep->fileSystem;
    80208390:	118bbc83          	ld	s9,280(s7)
    memset(&de, 0, sizeof(de));
    80208394:	02000613          	li	a2,32
    80208398:	4581                	li	a1,0
    8020839a:	f7040513          	addi	a0,s0,-144
    8020839e:	ffffe097          	auipc	ra,0xffffe
    802083a2:	9c6080e7          	jalr	-1594(ra) # 80205d64 <memset>
    if (off <= 32) {
    802083a6:	02000793          	li	a5,32
    802083aa:	0fa7e663          	bltu	a5,s10,80208496 <emake+0x162>
        if (off == 0) {
    802083ae:	0c0d1863          	bnez	s10,8020847e <emake+0x14a>
            strncpy(de.sne.name, ".          ", sizeof(de.sne.name));
    802083b2:	462d                	li	a2,11
    802083b4:	00005597          	auipc	a1,0x5
    802083b8:	c3458593          	addi	a1,a1,-972 # 8020cfe8 <__func__.3+0x98>
    802083bc:	f7040513          	addi	a0,s0,-144
    802083c0:	ffffe097          	auipc	ra,0xffffe
    802083c4:	ab0080e7          	jalr	-1360(ra) # 80205e70 <strncpy>
        de.sne.attr = ATTR_DIRECTORY;
    802083c8:	47c1                	li	a5,16
    802083ca:	f6f40da3          	sb	a5,-133(s0)
            (uint16)(ep->first_clus >> 16);  // first clus high 16 bits
    802083ce:	104ba783          	lw	a5,260(s7)
    802083d2:	0107d71b          	srliw	a4,a5,0x10
    802083d6:	f8e41223          	sh	a4,-124(s0)
        de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff);  // low 16 bits
    802083da:	f8f41523          	sh	a5,-118(s0)
        de.sne.file_size = 0;  // filesize is updated in eupdate()
    802083de:	f8042623          	sw	zero,-116(s0)
        de.sne._nt_res = ep->_nt_res;
    802083e2:	114bc783          	lbu	a5,276(s7)
    802083e6:	f6f40e23          	sb	a5,-132(s0)
        off = reloc_clus(fs, dp, off, 1);
    802083ea:	4685                	li	a3,1
    802083ec:	866a                	mv	a2,s10
    802083ee:	85d6                	mv	a1,s5
    802083f0:	8566                	mv	a0,s9
    802083f2:	fffff097          	auipc	ra,0xfffff
    802083f6:	73a080e7          	jalr	1850(ra) # 80207b2c <reloc_clus>
        rw_clus(fs, dp->cur_clus, 1, 0, (u64)&de, off, sizeof(de));
    802083fa:	02000813          	li	a6,32
    802083fe:	0005079b          	sext.w	a5,a0
    80208402:	f7040713          	addi	a4,s0,-144
    80208406:	4681                	li	a3,0
    80208408:	4605                	li	a2,1
    8020840a:	10caa583          	lw	a1,268(s5)
    8020840e:	8566                	mv	a0,s9
    80208410:	00000097          	auipc	ra,0x0
    80208414:	83e080e7          	jalr	-1986(ra) # 80207c4e <rw_clus>
}
    80208418:	70aa                	ld	ra,168(sp)
    8020841a:	740a                	ld	s0,160(sp)
    8020841c:	64ea                	ld	s1,152(sp)
    8020841e:	694a                	ld	s2,144(sp)
    80208420:	69aa                	ld	s3,136(sp)
    80208422:	6a0a                	ld	s4,128(sp)
    80208424:	7ae6                	ld	s5,120(sp)
    80208426:	7b46                	ld	s6,112(sp)
    80208428:	7ba6                	ld	s7,104(sp)
    8020842a:	7c06                	ld	s8,96(sp)
    8020842c:	6ce6                	ld	s9,88(sp)
    8020842e:	6d46                	ld	s10,80(sp)
    80208430:	6da6                	ld	s11,72(sp)
    80208432:	614d                	addi	sp,sp,176
    80208434:	8082                	ret
        panic("emake: not dir");
    80208436:	00005697          	auipc	a3,0x5
    8020843a:	b8a68693          	addi	a3,a3,-1142 # 8020cfc0 <__func__.3+0x70>
    8020843e:	00005617          	auipc	a2,0x5
    80208442:	e7a60613          	addi	a2,a2,-390 # 8020d2b8 <__func__.8>
    80208446:	21f00593          	li	a1,543
    8020844a:	00005517          	auipc	a0,0x5
    8020844e:	b2650513          	addi	a0,a0,-1242 # 8020cf70 <__func__.3+0x20>
    80208452:	ffff8097          	auipc	ra,0xffff8
    80208456:	6fa080e7          	jalr	1786(ra) # 80200b4c <_panic_>
        panic("emake: not aligned");
    8020845a:	00005697          	auipc	a3,0x5
    8020845e:	b7668693          	addi	a3,a3,-1162 # 8020cfd0 <__func__.3+0x80>
    80208462:	00005617          	auipc	a2,0x5
    80208466:	e5660613          	addi	a2,a2,-426 # 8020d2b8 <__func__.8>
    8020846a:	22100593          	li	a1,545
    8020846e:	00005517          	auipc	a0,0x5
    80208472:	b0250513          	addi	a0,a0,-1278 # 8020cf70 <__func__.3+0x20>
    80208476:	ffff8097          	auipc	ra,0xffff8
    8020847a:	6d6080e7          	jalr	1750(ra) # 80200b4c <_panic_>
            strncpy(de.sne.name, "..         ", sizeof(de.sne.name));
    8020847e:	462d                	li	a2,11
    80208480:	00005597          	auipc	a1,0x5
    80208484:	b7858593          	addi	a1,a1,-1160 # 8020cff8 <__func__.3+0xa8>
    80208488:	f7040513          	addi	a0,s0,-144
    8020848c:	ffffe097          	auipc	ra,0xffffe
    80208490:	9e4080e7          	jalr	-1564(ra) # 80205e70 <strncpy>
    80208494:	bf15                	j	802083c8 <emake+0x94>
        int entcnt = (strlen(ep->filename) + CHAR_LONG_NAME - 1) /
    80208496:	895e                	mv	s2,s7
    80208498:	855e                	mv	a0,s7
    8020849a:	ffffe097          	auipc	ra,0xffffe
    8020849e:	a46080e7          	jalr	-1466(ra) # 80205ee0 <strlen>
    802084a2:	f4a43c23          	sd	a0,-168(s0)
    802084a6:	00c5071b          	addiw	a4,a0,12
    802084aa:	47b5                	li	a5,13
    802084ac:	02f747bb          	divw	a5,a4,a5
    802084b0:	f4f42a23          	sw	a5,-172(s0)
    802084b4:	00078d9b          	sext.w	s11,a5
        memset(shortname, 0, sizeof(shortname));
    802084b8:	4631                	li	a2,12
    802084ba:	4581                	li	a1,0
    802084bc:	f6040513          	addi	a0,s0,-160
    802084c0:	ffffe097          	auipc	ra,0xffffe
    802084c4:	8a4080e7          	jalr	-1884(ra) # 80205d64 <memset>
    for (int j = strlen(name) - 1; j >= 0; j--) {
    802084c8:	855e                	mv	a0,s7
    802084ca:	ffffe097          	auipc	ra,0xffffe
    802084ce:	a16080e7          	jalr	-1514(ra) # 80205ee0 <strlen>
    802084d2:	fff5079b          	addiw	a5,a0,-1
    802084d6:	0207ca63          	bltz	a5,8020850a <emake+0x1d6>
    802084da:	97de                	add	a5,a5,s7
    802084dc:	ffeb8693          	addi	a3,s7,-2
    802084e0:	96aa                	add	a3,a3,a0
    802084e2:	fff5071b          	addiw	a4,a0,-1
    802084e6:	1702                	slli	a4,a4,0x20
    802084e8:	9301                	srli	a4,a4,0x20
    802084ea:	8e99                	sub	a3,a3,a4
        if (name[j] == '.') {
    802084ec:	02e00613          	li	a2,46
    802084f0:	89be                	mv	s3,a5
    802084f2:	0007c703          	lbu	a4,0(a5)
    802084f6:	00c70663          	beq	a4,a2,80208502 <emake+0x1ce>
    for (int j = strlen(name) - 1; j >= 0; j--) {
    802084fa:	17fd                	addi	a5,a5,-1
    802084fc:	fed79ae3          	bne	a5,a3,802084f0 <emake+0x1bc>
    char c, *p = name;
    80208500:	89de                	mv	s3,s7
        shortname[i++] = c;
    80208502:	4481                	li	s1,0
        if (i == 8 && p) {
    80208504:	4b21                	li	s6,8
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    80208506:	4c29                	li	s8,10
    80208508:	a0c9                	j	802085ca <emake+0x296>
    char c, *p = name;
    8020850a:	89de                	mv	s3,s7
    8020850c:	bfdd                	j	80208502 <emake+0x1ce>
        if (i == 8 && p) {
    8020850e:	22098d63          	beqz	s3,80208748 <emake+0x414>
            if (p + 1 < name) {
    80208512:	0985                	addi	s3,s3,1
    80208514:	0949f263          	bgeu	s3,s4,80208598 <emake+0x264>
    80208518:	f6040793          	addi	a5,s0,-160
    8020851c:	97a6                	add	a5,a5,s1
        shortname[i++] = ' ';
    8020851e:	02000693          	li	a3,32
    while (i < CHAR_SHORT_NAME) {
    80208522:	4729                	li	a4,10
        shortname[i++] = ' ';
    80208524:	2485                	addiw	s1,s1,1
    80208526:	00d78023          	sb	a3,0(a5)
    while (i < CHAR_SHORT_NAME) {
    8020852a:	0785                	addi	a5,a5,1
    8020852c:	fe975ce3          	bge	a4,s1,80208524 <emake+0x1f0>
        de.lne.checksum = cal_checksum((uchar*)shortname);
    80208530:	f6040513          	addi	a0,s0,-160
    80208534:	00000097          	auipc	ra,0x0
    80208538:	dd2080e7          	jalr	-558(ra) # 80208306 <cal_checksum>
    8020853c:	f6a40ea3          	sb	a0,-131(s0)
        de.lne.attr = ATTR_LONG_NAME;
    80208540:	47bd                	li	a5,15
    80208542:	f6f40da3          	sb	a5,-133(s0)
        for (int i = entcnt; i > 0; i--) {
    80208546:	f5843783          	ld	a5,-168(s0)
    8020854a:	14f05563          	blez	a5,80208694 <emake+0x360>
    8020854e:	f5442783          	lw	a5,-172(s0)
    80208552:	37fd                	addiw	a5,a5,-1
    80208554:	f4f42a23          	sw	a5,-172(s0)
    80208558:	00179b1b          	slliw	s6,a5,0x1
    8020855c:	00fb0b3b          	addw	s6,s6,a5
    80208560:	002b1b1b          	slliw	s6,s6,0x2
    80208564:	00fb0b3b          	addw	s6,s6,a5
    80208568:	9b5e                	add	s6,s6,s7
    8020856a:	8a6e                	mv	s4,s11
    8020856c:	8c6a                	mv	s8,s10
            int end = 0;
    8020856e:	4981                	li	s3,0
    80208570:	0ff00913          	li	s2,255
                switch (j) {
    80208574:	44ad                	li	s1,11
    80208576:	a0dd                	j	8020865c <emake+0x328>
            if (name > p) {  // last '.'
    80208578:	0549f663          	bgeu	s3,s4,802085c4 <emake+0x290>
                memset(shortname + i, ' ', 8 - i);
    8020857c:	47a1                	li	a5,8
    8020857e:	4097863b          	subw	a2,a5,s1
    80208582:	02000593          	li	a1,32
    80208586:	f6040793          	addi	a5,s0,-160
    8020858a:	00978533          	add	a0,a5,s1
    8020858e:	ffffd097          	auipc	ra,0xffffd
    80208592:	7d6080e7          	jalr	2006(ra) # 80205d64 <memset>
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    80208596:	89d2                	mv	s3,s4
        shortname[i++] = c;
    80208598:	8a4e                	mv	s4,s3
    8020859a:	84da                	mv	s1,s6
    8020859c:	4981                	li	s3,0
    8020859e:	a02d                	j	802085c8 <emake+0x294>
            if (strchr(illegal, c) != NULL) {
    802085a0:	85ca                	mv	a1,s2
    802085a2:	001b9517          	auipc	a0,0x1b9
    802085a6:	a6650513          	addi	a0,a0,-1434 # 803c1008 <illegal.7>
    802085aa:	ffffe097          	auipc	ra,0xffffe
    802085ae:	960080e7          	jalr	-1696(ra) # 80205f0a <strchr>
    802085b2:	c119                	beqz	a0,802085b8 <emake+0x284>
                c = '_';
    802085b4:	05f00913          	li	s2,95
        shortname[i++] = c;
    802085b8:	f9048793          	addi	a5,s1,-112
    802085bc:	97a2                	add	a5,a5,s0
    802085be:	fd278823          	sb	s2,-48(a5)
    802085c2:	2485                	addiw	s1,s1,1
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    802085c4:	f69c46e3          	blt	s8,s1,80208530 <emake+0x1fc>
        shortname[i++] = c;
    802085c8:	8952                	mv	s2,s4
    while (i < CHAR_SHORT_NAME && (c = *name++)) {
    802085ca:	00190a13          	addi	s4,s2,1
    802085ce:	00094903          	lbu	s2,0(s2)
    802085d2:	02090763          	beqz	s2,80208600 <emake+0x2cc>
        if (i == 8 && p) {
    802085d6:	f3648ce3          	beq	s1,s6,8020850e <emake+0x1da>
        if (c == ' ') {
    802085da:	02000793          	li	a5,32
    802085de:	fef903e3          	beq	s2,a5,802085c4 <emake+0x290>
        if (c == '.') {
    802085e2:	02e00793          	li	a5,46
    802085e6:	f8f909e3          	beq	s2,a5,80208578 <emake+0x244>
        if (c >= 'a' && c <= 'z') {
    802085ea:	f9f9079b          	addiw	a5,s2,-97
    802085ee:	0ff7f793          	zext.b	a5,a5
    802085f2:	4765                	li	a4,25
    802085f4:	faf766e3          	bltu	a4,a5,802085a0 <emake+0x26c>
            c += 'A' - 'a';
    802085f8:	3901                	addiw	s2,s2,-32
    802085fa:	0ff97913          	zext.b	s2,s2
    802085fe:	bf6d                	j	802085b8 <emake+0x284>
    while (i < CHAR_SHORT_NAME) {
    80208600:	47a9                	li	a5,10
    80208602:	f097dbe3          	bge	a5,s1,80208518 <emake+0x1e4>
    80208606:	b72d                	j	80208530 <emake+0x1fc>
                de.lne.order |= LAST_LONG_ENTRY;
    80208608:	0407e793          	ori	a5,a5,64
    8020860c:	f6f40823          	sb	a5,-144(s0)
    80208610:	a8a1                	j	80208668 <emake+0x334>
                    if ((*w++ = *p++) == 0) {
    80208612:	00084603          	lbu	a2,0(a6)
                        end = 1;
    80208616:	00163513          	seqz	a0,a2
                    *w++ = 0;
    8020861a:	00278893          	addi	a7,a5,2
                    if ((*w++ = *p++) == 0) {
    8020861e:	0805                	addi	a6,a6,1
                    *w++ = 0;
    80208620:	85ce                	mv	a1,s3
    80208622:	a229                	j	8020872c <emake+0x3f8>
            uint off2 = reloc_clus(fs, dp, off, 1);
    80208624:	4685                	li	a3,1
    80208626:	8662                	mv	a2,s8
    80208628:	85d6                	mv	a1,s5
    8020862a:	8566                	mv	a0,s9
    8020862c:	fffff097          	auipc	ra,0xfffff
    80208630:	500080e7          	jalr	1280(ra) # 80207b2c <reloc_clus>
            rw_clus(fs, dp->cur_clus, 1, 0, (u64)&de, off2, sizeof(de));
    80208634:	02000813          	li	a6,32
    80208638:	0005079b          	sext.w	a5,a0
    8020863c:	f7040713          	addi	a4,s0,-144
    80208640:	86ce                	mv	a3,s3
    80208642:	4605                	li	a2,1
    80208644:	10caa583          	lw	a1,268(s5)
    80208648:	8566                	mv	a0,s9
    8020864a:	fffff097          	auipc	ra,0xfffff
    8020864e:	604080e7          	jalr	1540(ra) # 80207c4e <rw_clus>
            off += sizeof(de);
    80208652:	020c0c1b          	addiw	s8,s8,32
        for (int i = entcnt; i > 0; i--) {
    80208656:	1b4d                	addi	s6,s6,-13
    80208658:	03405163          	blez	s4,8020867a <emake+0x346>
            if ((de.lne.order = i) == entcnt) {
    8020865c:	0ffa7793          	zext.b	a5,s4
    80208660:	fafd84e3          	beq	s11,a5,80208608 <emake+0x2d4>
    80208664:	f6f40823          	sb	a5,-144(s0)
            char* p = ep->filename + (i - 1) * CHAR_LONG_NAME;
    80208668:	3a7d                	addiw	s4,s4,-1
    8020866a:	885a                	mv	a6,s6
    8020866c:	4709                	li	a4,2
            int end = 0;
    8020866e:	854e                	mv	a0,s3
            uint8* w = (uint8*)de.lne.name1;
    80208670:	f7140793          	addi	a5,s0,-143
                switch (j) {
    80208674:	4315                	li	t1,5
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    80208676:	4e35                	li	t3,13
    80208678:	a055                	j	8020871c <emake+0x3e8>
    8020867a:	020d0d1b          	addiw	s10,s10,32
            off += sizeof(de);
    8020867e:	4781                	li	a5,0
    80208680:	f5843703          	ld	a4,-168(s0)
    80208684:	00e05663          	blez	a4,80208690 <emake+0x35c>
    80208688:	f5442783          	lw	a5,-172(s0)
    8020868c:	0057979b          	slliw	a5,a5,0x5
    80208690:	01a78d3b          	addw	s10,a5,s10
        memset(&de, 0, sizeof(de));
    80208694:	02000613          	li	a2,32
    80208698:	4581                	li	a1,0
    8020869a:	f7040513          	addi	a0,s0,-144
    8020869e:	ffffd097          	auipc	ra,0xffffd
    802086a2:	6c6080e7          	jalr	1734(ra) # 80205d64 <memset>
        strncpy(de.sne.name, shortname, sizeof(de.sne.name));
    802086a6:	462d                	li	a2,11
    802086a8:	f6040593          	addi	a1,s0,-160
    802086ac:	f7040513          	addi	a0,s0,-144
    802086b0:	ffffd097          	auipc	ra,0xffffd
    802086b4:	7c0080e7          	jalr	1984(ra) # 80205e70 <strncpy>
        de.sne.attr = ep->attribute;
    802086b8:	100bc783          	lbu	a5,256(s7)
    802086bc:	f6f40da3          	sb	a5,-133(s0)
            (uint16)(ep->first_clus >> 16);  // first clus high 16 bits
    802086c0:	104ba783          	lw	a5,260(s7)
    802086c4:	0107d71b          	srliw	a4,a5,0x10
    802086c8:	f8e41223          	sh	a4,-124(s0)
        de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff);  // low 16 bits
    802086cc:	f8f41523          	sh	a5,-118(s0)
        de.sne.file_size = ep->file_size;  // filesize is updated in eupdate()
    802086d0:	108ba783          	lw	a5,264(s7)
    802086d4:	f8f42623          	sw	a5,-116(s0)
        de.sne._nt_res = ep->_nt_res;
    802086d8:	114bc783          	lbu	a5,276(s7)
    802086dc:	f6f40e23          	sb	a5,-132(s0)
        off = reloc_clus(fs, dp, off, 1);
    802086e0:	4685                	li	a3,1
    802086e2:	866a                	mv	a2,s10
    802086e4:	85d6                	mv	a1,s5
    802086e6:	8566                	mv	a0,s9
    802086e8:	fffff097          	auipc	ra,0xfffff
    802086ec:	444080e7          	jalr	1092(ra) # 80207b2c <reloc_clus>
        rw_clus(fs, dp->cur_clus, 1, 0, (u64)&de, off, sizeof(de));
    802086f0:	02000813          	li	a6,32
    802086f4:	0005079b          	sext.w	a5,a0
    802086f8:	f7040713          	addi	a4,s0,-144
    802086fc:	4681                	li	a3,0
    802086fe:	4605                	li	a2,1
    80208700:	10caa583          	lw	a1,268(s5)
    80208704:	8566                	mv	a0,s9
    80208706:	fffff097          	auipc	ra,0xfffff
    8020870a:	548080e7          	jalr	1352(ra) # 80207c4e <rw_clus>
}
    8020870e:	b329                	j	80208418 <emake+0xe4>
                        w = (uint8*)de.lne.name2;
    80208710:	f7e40793          	addi	a5,s0,-130
    80208714:	a019                	j	8020871a <emake+0x3e6>
                switch (j) {
    80208716:	f8c40793          	addi	a5,s0,-116
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    8020871a:	2705                	addiw	a4,a4,1
    8020871c:	fff7069b          	addiw	a3,a4,-1
                if (end) {
    80208720:	ee0509e3          	beqz	a0,80208612 <emake+0x2de>
                    *w++ = 0xff;
    80208724:	00278893          	addi	a7,a5,2
    80208728:	864a                	mv	a2,s2
    8020872a:	85ca                	mv	a1,s2
                    *w++ = 0xff;  // on k210, unaligned reading is illegal
    8020872c:	00c78023          	sb	a2,0(a5)
                    *w++ = 0xff;
    80208730:	00b780a3          	sb	a1,1(a5)
                switch (j) {
    80208734:	fc668ee3          	beq	a3,t1,80208710 <emake+0x3dc>
    80208738:	fc968fe3          	beq	a3,s1,80208716 <emake+0x3e2>
            for (int j = 1; j <= CHAR_LONG_NAME; j++) {
    8020873c:	0007079b          	sext.w	a5,a4
    80208740:	eefe42e3          	blt	t3,a5,80208624 <emake+0x2f0>
    80208744:	87c6                	mv	a5,a7
    80208746:	bfd1                	j	8020871a <emake+0x3e6>
        if (c == ' ') {
    80208748:	02000793          	li	a5,32
    8020874c:	e6f90ee3          	beq	s2,a5,802085c8 <emake+0x294>
        if (c == '.') {
    80208750:	02e00793          	li	a5,46
    80208754:	e8f91be3          	bne	s2,a5,802085ea <emake+0x2b6>
    80208758:	b515                	j	8020857c <emake+0x248>

000000008020875a <edup>:
struct dirent* edup(struct dirent* entry) {
    8020875a:	1101                	addi	sp,sp,-32
    8020875c:	ec06                	sd	ra,24(sp)
    8020875e:	e822                	sd	s0,16(sp)
    80208760:	e426                	sd	s1,8(sp)
    80208762:	1000                	addi	s0,sp,32
    80208764:	84aa                	mv	s1,a0
    if (entry != 0) {
    80208766:	c515                	beqz	a0,80208792 <edup+0x38>
        acquireLock(&direntCache.lock);
    80208768:	003f5517          	auipc	a0,0x3f5
    8020876c:	06850513          	addi	a0,a0,104 # 805fd7d0 <direntCache>
    80208770:	ffffd097          	auipc	ra,0xffffd
    80208774:	33e080e7          	jalr	830(ra) # 80205aae <acquireLock>
        entry->ref++;
    80208778:	1304a783          	lw	a5,304(s1)
    8020877c:	2785                	addiw	a5,a5,1
    8020877e:	12f4a823          	sw	a5,304(s1)
        releaseLock(&direntCache.lock);
    80208782:	003f5517          	auipc	a0,0x3f5
    80208786:	04e50513          	addi	a0,a0,78 # 805fd7d0 <direntCache>
    8020878a:	ffffd097          	auipc	ra,0xffffd
    8020878e:	3a0080e7          	jalr	928(ra) # 80205b2a <releaseLock>
}
    80208792:	8526                	mv	a0,s1
    80208794:	60e2                	ld	ra,24(sp)
    80208796:	6442                	ld	s0,16(sp)
    80208798:	64a2                	ld	s1,8(sp)
    8020879a:	6105                	addi	sp,sp,32
    8020879c:	8082                	ret

000000008020879e <eupdate>:
    if (!entry->dirty || entry->valid != 1) {
    8020879e:	12154783          	lbu	a5,289(a0)
    802087a2:	cbfd                	beqz	a5,80208898 <eupdate+0xfa>
void eupdate(struct dirent* entry) {
    802087a4:	711d                	addi	sp,sp,-96
    802087a6:	ec86                	sd	ra,88(sp)
    802087a8:	e8a2                	sd	s0,80(sp)
    802087aa:	e4a6                	sd	s1,72(sp)
    802087ac:	e0ca                	sd	s2,64(sp)
    802087ae:	fc4e                	sd	s3,56(sp)
    802087b0:	1080                	addi	s0,sp,96
    802087b2:	84aa                	mv	s1,a0
    if (!entry->dirty || entry->valid != 1) {
    802087b4:	12251703          	lh	a4,290(a0)
    802087b8:	4785                	li	a5,1
    802087ba:	00f70963          	beq	a4,a5,802087cc <eupdate+0x2e>
}
    802087be:	60e6                	ld	ra,88(sp)
    802087c0:	6446                	ld	s0,80(sp)
    802087c2:	64a6                	ld	s1,72(sp)
    802087c4:	6906                	ld	s2,64(sp)
    802087c6:	79e2                	ld	s3,56(sp)
    802087c8:	6125                	addi	sp,sp,96
    802087ca:	8082                	ret
    uint entcnt = 0;
    802087cc:	fc042623          	sw	zero,-52(s0)
    FileSystem *fs = entry->fileSystem;
    802087d0:	11853903          	ld	s2,280(a0)
    uint32 off = reloc_clus(fs, entry->parent, entry->off, 0);
    802087d4:	4681                	li	a3,0
    802087d6:	13452603          	lw	a2,308(a0)
    802087da:	13853583          	ld	a1,312(a0)
    802087de:	854a                	mv	a0,s2
    802087e0:	fffff097          	auipc	ra,0xfffff
    802087e4:	34c080e7          	jalr	844(ra) # 80207b2c <reloc_clus>
    rw_clus(fs, entry->parent->cur_clus, 0, 0, (u64)&entcnt, off, 1);
    802087e8:	1384b583          	ld	a1,312(s1)
    802087ec:	4805                	li	a6,1
    802087ee:	0005079b          	sext.w	a5,a0
    802087f2:	fcc40713          	addi	a4,s0,-52
    802087f6:	4681                	li	a3,0
    802087f8:	4601                	li	a2,0
    802087fa:	10c5a583          	lw	a1,268(a1)
    802087fe:	854a                	mv	a0,s2
    80208800:	fffff097          	auipc	ra,0xfffff
    80208804:	44e080e7          	jalr	1102(ra) # 80207c4e <rw_clus>
    entcnt &= ~LAST_LONG_ENTRY;
    80208808:	fcc42603          	lw	a2,-52(s0)
    8020880c:	fbf67613          	andi	a2,a2,-65
    80208810:	fcc42623          	sw	a2,-52(s0)
    off = reloc_clus(fs, entry->parent, entry->off + (entcnt << 5), 0);
    80208814:	0056161b          	slliw	a2,a2,0x5
    80208818:	1344a783          	lw	a5,308(s1)
    8020881c:	4681                	li	a3,0
    8020881e:	9e3d                	addw	a2,a2,a5
    80208820:	1384b583          	ld	a1,312(s1)
    80208824:	854a                	mv	a0,s2
    80208826:	fffff097          	auipc	ra,0xfffff
    8020882a:	306080e7          	jalr	774(ra) # 80207b2c <reloc_clus>
    8020882e:	0005099b          	sext.w	s3,a0
    rw_clus(fs, entry->parent->cur_clus, 0, 0, (u64)&de, off, sizeof(de));
    80208832:	1384b583          	ld	a1,312(s1)
    80208836:	02000813          	li	a6,32
    8020883a:	87ce                	mv	a5,s3
    8020883c:	fa840713          	addi	a4,s0,-88
    80208840:	4681                	li	a3,0
    80208842:	4601                	li	a2,0
    80208844:	10c5a583          	lw	a1,268(a1)
    80208848:	854a                	mv	a0,s2
    8020884a:	fffff097          	auipc	ra,0xfffff
    8020884e:	404080e7          	jalr	1028(ra) # 80207c4e <rw_clus>
    de.sne.fst_clus_hi = (uint16)(entry->first_clus >> 16);
    80208852:	1044a783          	lw	a5,260(s1)
    80208856:	0107d71b          	srliw	a4,a5,0x10
    8020885a:	fae41e23          	sh	a4,-68(s0)
    de.sne.fst_clus_lo = (uint16)(entry->first_clus & 0xffff);
    8020885e:	fcf41123          	sh	a5,-62(s0)
    de.sne.file_size = entry->file_size;
    80208862:	1084a783          	lw	a5,264(s1)
    80208866:	fcf42223          	sw	a5,-60(s0)
    de.sne._nt_res = entry->_nt_res;
    8020886a:	1144c783          	lbu	a5,276(s1)
    8020886e:	faf40a23          	sb	a5,-76(s0)
    rw_clus(fs, entry->parent->cur_clus, 1, 0, (u64)&de, off, sizeof(de));
    80208872:	1384b583          	ld	a1,312(s1)
    80208876:	02000813          	li	a6,32
    8020887a:	87ce                	mv	a5,s3
    8020887c:	fa840713          	addi	a4,s0,-88
    80208880:	4681                	li	a3,0
    80208882:	4605                	li	a2,1
    80208884:	10c5a583          	lw	a1,268(a1)
    80208888:	854a                	mv	a0,s2
    8020888a:	fffff097          	auipc	ra,0xfffff
    8020888e:	3c4080e7          	jalr	964(ra) # 80207c4e <rw_clus>
    entry->dirty = 0;
    80208892:	120480a3          	sb	zero,289(s1)
    80208896:	b725                	j	802087be <eupdate+0x20>
    80208898:	8082                	ret

000000008020889a <eremove>:
    if (entry->valid != 1) {
    8020889a:	12251703          	lh	a4,290(a0)
    8020889e:	4785                	li	a5,1
    802088a0:	00f70363          	beq	a4,a5,802088a6 <eremove+0xc>
    802088a4:	8082                	ret
void eremove(struct dirent* entry) {
    802088a6:	715d                	addi	sp,sp,-80
    802088a8:	e486                	sd	ra,72(sp)
    802088aa:	e0a2                	sd	s0,64(sp)
    802088ac:	fc26                	sd	s1,56(sp)
    802088ae:	f84a                	sd	s2,48(sp)
    802088b0:	f44e                	sd	s3,40(sp)
    802088b2:	f052                	sd	s4,32(sp)
    802088b4:	ec56                	sd	s5,24(sp)
    802088b6:	0880                	addi	s0,sp,80
    802088b8:	89aa                	mv	s3,a0
    FileSystem *fs = entry->fileSystem;
    802088ba:	11853a83          	ld	s5,280(a0)
    uint entcnt = 0;
    802088be:	fa042e23          	sw	zero,-68(s0)
    uint32 off = entry->off;
    802088c2:	13452a03          	lw	s4,308(a0)
    uint32 off2 = reloc_clus(fs, entry->parent, off, 0);
    802088c6:	4681                	li	a3,0
    802088c8:	8652                	mv	a2,s4
    802088ca:	13853583          	ld	a1,312(a0)
    802088ce:	8556                	mv	a0,s5
    802088d0:	fffff097          	auipc	ra,0xfffff
    802088d4:	25c080e7          	jalr	604(ra) # 80207b2c <reloc_clus>
    802088d8:	0005049b          	sext.w	s1,a0
    rw_clus(fs, entry->parent->cur_clus, 0, 0, (u64)&entcnt, off2, 1);
    802088dc:	1389b583          	ld	a1,312(s3)
    802088e0:	4805                	li	a6,1
    802088e2:	87a6                	mv	a5,s1
    802088e4:	fbc40713          	addi	a4,s0,-68
    802088e8:	4681                	li	a3,0
    802088ea:	4601                	li	a2,0
    802088ec:	10c5a583          	lw	a1,268(a1)
    802088f0:	8556                	mv	a0,s5
    802088f2:	fffff097          	auipc	ra,0xfffff
    802088f6:	35c080e7          	jalr	860(ra) # 80207c4e <rw_clus>
    entcnt &= ~LAST_LONG_ENTRY;
    802088fa:	fbc42783          	lw	a5,-68(s0)
    802088fe:	fbf7f793          	andi	a5,a5,-65
    80208902:	faf42e23          	sw	a5,-68(s0)
    uint8 flag = EMPTY_ENTRY;
    80208906:	5795                	li	a5,-27
    80208908:	faf40da3          	sb	a5,-69(s0)
    for (int i = 0; i <= entcnt; i++) {
    8020890c:	4901                	li	s2,0
        rw_clus(fs, entry->parent->cur_clus, 1, 0, (u64)&flag, off2, 1);
    8020890e:	1389b583          	ld	a1,312(s3)
    80208912:	4805                	li	a6,1
    80208914:	87a6                	mv	a5,s1
    80208916:	fbb40713          	addi	a4,s0,-69
    8020891a:	4681                	li	a3,0
    8020891c:	4605                	li	a2,1
    8020891e:	10c5a583          	lw	a1,268(a1)
    80208922:	8556                	mv	a0,s5
    80208924:	fffff097          	auipc	ra,0xfffff
    80208928:	32a080e7          	jalr	810(ra) # 80207c4e <rw_clus>
        off += 32;
    8020892c:	020a0a1b          	addiw	s4,s4,32
        off2 = reloc_clus(fs, entry->parent, off, 0);
    80208930:	4681                	li	a3,0
    80208932:	8652                	mv	a2,s4
    80208934:	1389b583          	ld	a1,312(s3)
    80208938:	8556                	mv	a0,s5
    8020893a:	fffff097          	auipc	ra,0xfffff
    8020893e:	1f2080e7          	jalr	498(ra) # 80207b2c <reloc_clus>
    80208942:	0005049b          	sext.w	s1,a0
    for (int i = 0; i <= entcnt; i++) {
    80208946:	0019071b          	addiw	a4,s2,1
    8020894a:	0007091b          	sext.w	s2,a4
    8020894e:	fbc42783          	lw	a5,-68(s0)
    80208952:	fb27fee3          	bgeu	a5,s2,8020890e <eremove+0x74>
    entry->valid = -1;
    80208956:	57fd                	li	a5,-1
    80208958:	12f99123          	sh	a5,290(s3)
}
    8020895c:	60a6                	ld	ra,72(sp)
    8020895e:	6406                	ld	s0,64(sp)
    80208960:	74e2                	ld	s1,56(sp)
    80208962:	7942                	ld	s2,48(sp)
    80208964:	79a2                	ld	s3,40(sp)
    80208966:	7a02                	ld	s4,32(sp)
    80208968:	6ae2                	ld	s5,24(sp)
    8020896a:	6161                	addi	sp,sp,80
    8020896c:	8082                	ret

000000008020896e <etrunc>:
void etrunc(struct dirent* entry) {
    8020896e:	7139                	addi	sp,sp,-64
    80208970:	fc06                	sd	ra,56(sp)
    80208972:	f822                	sd	s0,48(sp)
    80208974:	f426                	sd	s1,40(sp)
    80208976:	f04a                	sd	s2,32(sp)
    80208978:	ec4e                	sd	s3,24(sp)
    8020897a:	e852                	sd	s4,16(sp)
    8020897c:	e456                	sd	s5,8(sp)
    8020897e:	0080                	addi	s0,sp,64
    80208980:	8aaa                	mv	s5,a0
    FileSystem *fs = entry->fileSystem;
    80208982:	11853903          	ld	s2,280(a0)
    for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC;) {
    80208986:	10452483          	lw	s1,260(a0)
    8020898a:	ffe4871b          	addiw	a4,s1,-2
    8020898e:	100007b7          	lui	a5,0x10000
    80208992:	17d5                	addi	a5,a5,-11
    80208994:	02e7e863          	bltu	a5,a4,802089c4 <etrunc+0x56>
    80208998:	8a3e                	mv	s4,a5
        uint32 next = read_fat(fs, clus);
    8020899a:	0004899b          	sext.w	s3,s1
    8020899e:	85a6                	mv	a1,s1
    802089a0:	854a                	mv	a0,s2
    802089a2:	fffff097          	auipc	ra,0xfffff
    802089a6:	fee080e7          	jalr	-18(ra) # 80207990 <read_fat>
    802089aa:	0005049b          	sext.w	s1,a0
    write_fat(fs, cluster, 0);
    802089ae:	4601                	li	a2,0
    802089b0:	85ce                	mv	a1,s3
    802089b2:	854a                	mv	a0,s2
    802089b4:	fffff097          	auipc	ra,0xfffff
    802089b8:	f68080e7          	jalr	-152(ra) # 8020791c <write_fat>
    for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC;) {
    802089bc:	ffe4879b          	addiw	a5,s1,-2
    802089c0:	fcfa7de3          	bgeu	s4,a5,8020899a <etrunc+0x2c>
    entry->file_size = 0;
    802089c4:	100aa423          	sw	zero,264(s5)
    entry->first_clus = 0;
    802089c8:	100aa223          	sw	zero,260(s5)
    entry->dirty = 1;
    802089cc:	4785                	li	a5,1
    802089ce:	12fa80a3          	sb	a5,289(s5)
}
    802089d2:	70e2                	ld	ra,56(sp)
    802089d4:	7442                	ld	s0,48(sp)
    802089d6:	74a2                	ld	s1,40(sp)
    802089d8:	7902                	ld	s2,32(sp)
    802089da:	69e2                	ld	s3,24(sp)
    802089dc:	6a42                	ld	s4,16(sp)
    802089de:	6aa2                	ld	s5,8(sp)
    802089e0:	6121                	addi	sp,sp,64
    802089e2:	8082                	ret

00000000802089e4 <elock>:
void elock(struct dirent* entry) {
    802089e4:	1141                	addi	sp,sp,-16
    802089e6:	e406                	sd	ra,8(sp)
    802089e8:	e022                	sd	s0,0(sp)
    802089ea:	0800                	addi	s0,sp,16
    if (entry == 0 || entry->ref < 1)
    802089ec:	cd19                	beqz	a0,80208a0a <elock+0x26>
    802089ee:	13052783          	lw	a5,304(a0)
    802089f2:	00f05c63          	blez	a5,80208a0a <elock+0x26>
    acquiresleep(&entry->lock);
    802089f6:	14050513          	addi	a0,a0,320
    802089fa:	ffffd097          	auipc	ra,0xffffd
    802089fe:	f76080e7          	jalr	-138(ra) # 80205970 <acquiresleep>
}
    80208a02:	60a2                	ld	ra,8(sp)
    80208a04:	6402                	ld	s0,0(sp)
    80208a06:	0141                	addi	sp,sp,16
    80208a08:	8082                	ret
        panic("elock");
    80208a0a:	00004697          	auipc	a3,0x4
    80208a0e:	5fe68693          	addi	a3,a3,1534 # 8020d008 <__func__.3+0xb8>
    80208a12:	00005617          	auipc	a2,0x5
    80208a16:	88e60613          	addi	a2,a2,-1906 # 8020d2a0 <__func__.4>
    80208a1a:	2e300593          	li	a1,739
    80208a1e:	00004517          	auipc	a0,0x4
    80208a22:	55250513          	addi	a0,a0,1362 # 8020cf70 <__func__.3+0x20>
    80208a26:	ffff8097          	auipc	ra,0xffff8
    80208a2a:	126080e7          	jalr	294(ra) # 80200b4c <_panic_>

0000000080208a2e <eunlock>:
void eunlock(struct dirent* entry) {
    80208a2e:	1101                	addi	sp,sp,-32
    80208a30:	ec06                	sd	ra,24(sp)
    80208a32:	e822                	sd	s0,16(sp)
    80208a34:	e426                	sd	s1,8(sp)
    80208a36:	e04a                	sd	s2,0(sp)
    80208a38:	1000                	addi	s0,sp,32
    if (entry == 0 || !holdingsleep(&entry->lock) || entry->ref < 1)
    80208a3a:	c90d                	beqz	a0,80208a6c <eunlock+0x3e>
    80208a3c:	84aa                	mv	s1,a0
    80208a3e:	14050913          	addi	s2,a0,320
    80208a42:	854a                	mv	a0,s2
    80208a44:	ffffd097          	auipc	ra,0xffffd
    80208a48:	fc8080e7          	jalr	-56(ra) # 80205a0c <holdingsleep>
    80208a4c:	c105                	beqz	a0,80208a6c <eunlock+0x3e>
    80208a4e:	1304a783          	lw	a5,304(s1)
    80208a52:	00f05d63          	blez	a5,80208a6c <eunlock+0x3e>
    releasesleep(&entry->lock);
    80208a56:	854a                	mv	a0,s2
    80208a58:	ffffd097          	auipc	ra,0xffffd
    80208a5c:	f70080e7          	jalr	-144(ra) # 802059c8 <releasesleep>
}
    80208a60:	60e2                	ld	ra,24(sp)
    80208a62:	6442                	ld	s0,16(sp)
    80208a64:	64a2                	ld	s1,8(sp)
    80208a66:	6902                	ld	s2,0(sp)
    80208a68:	6105                	addi	sp,sp,32
    80208a6a:	8082                	ret
        panic("eunlock");
    80208a6c:	00004697          	auipc	a3,0x4
    80208a70:	5a468693          	addi	a3,a3,1444 # 8020d010 <__func__.3+0xc0>
    80208a74:	00005617          	auipc	a2,0x5
    80208a78:	82460613          	addi	a2,a2,-2012 # 8020d298 <__func__.3>
    80208a7c:	2e900593          	li	a1,745
    80208a80:	00004517          	auipc	a0,0x4
    80208a84:	4f050513          	addi	a0,a0,1264 # 8020cf70 <__func__.3+0x20>
    80208a88:	ffff8097          	auipc	ra,0xffff8
    80208a8c:	0c4080e7          	jalr	196(ra) # 80200b4c <_panic_>

0000000080208a90 <eput>:
void eput(struct dirent* entry) {
    80208a90:	1101                	addi	sp,sp,-32
    80208a92:	ec06                	sd	ra,24(sp)
    80208a94:	e822                	sd	s0,16(sp)
    80208a96:	e426                	sd	s1,8(sp)
    80208a98:	e04a                	sd	s2,0(sp)
    80208a9a:	1000                	addi	s0,sp,32
    80208a9c:	84aa                	mv	s1,a0
    acquireLock(&direntCache.lock);
    80208a9e:	003f5517          	auipc	a0,0x3f5
    80208aa2:	d3250513          	addi	a0,a0,-718 # 805fd7d0 <direntCache>
    80208aa6:	ffffd097          	auipc	ra,0xffffd
    80208aaa:	008080e7          	jalr	8(ra) # 80205aae <acquireLock>
    if ((entry >= direntCache.entries && entry < direntCache.entries + ENTRY_CACHE_NUM) && entry->valid != 0 && entry->ref == 1) {
    80208aae:	003f5797          	auipc	a5,0x3f5
    80208ab2:	d3a78793          	addi	a5,a5,-710 # 805fd7e8 <direntCache+0x18>
    80208ab6:	02f4e063          	bltu	s1,a5,80208ad6 <eput+0x46>
    80208aba:	003f9797          	auipc	a5,0x3f9
    80208abe:	50e78793          	addi	a5,a5,1294 # 80601fc8 <fileSystem>
    80208ac2:	00f4fa63          	bgeu	s1,a5,80208ad6 <eput+0x46>
    80208ac6:	12249783          	lh	a5,290(s1)
    80208aca:	c791                	beqz	a5,80208ad6 <eput+0x46>
    80208acc:	1304a703          	lw	a4,304(s1)
    80208ad0:	4785                	li	a5,1
    80208ad2:	02f70563          	beq	a4,a5,80208afc <eput+0x6c>
    entry->ref--;
    80208ad6:	1304a783          	lw	a5,304(s1)
    80208ada:	37fd                	addiw	a5,a5,-1
    80208adc:	12f4a823          	sw	a5,304(s1)
    releaseLock(&direntCache.lock);
    80208ae0:	003f5517          	auipc	a0,0x3f5
    80208ae4:	cf050513          	addi	a0,a0,-784 # 805fd7d0 <direntCache>
    80208ae8:	ffffd097          	auipc	ra,0xffffd
    80208aec:	042080e7          	jalr	66(ra) # 80205b2a <releaseLock>
}
    80208af0:	60e2                	ld	ra,24(sp)
    80208af2:	6442                	ld	s0,16(sp)
    80208af4:	64a2                	ld	s1,8(sp)
    80208af6:	6902                	ld	s2,0(sp)
    80208af8:	6105                	addi	sp,sp,32
    80208afa:	8082                	ret
        acquiresleep(&entry->lock);
    80208afc:	14048913          	addi	s2,s1,320
    80208b00:	854a                	mv	a0,s2
    80208b02:	ffffd097          	auipc	ra,0xffffd
    80208b06:	e6e080e7          	jalr	-402(ra) # 80205970 <acquiresleep>
        releaseLock(&direntCache.lock);
    80208b0a:	003f5517          	auipc	a0,0x3f5
    80208b0e:	cc650513          	addi	a0,a0,-826 # 805fd7d0 <direntCache>
    80208b12:	ffffd097          	auipc	ra,0xffffd
    80208b16:	018080e7          	jalr	24(ra) # 80205b2a <releaseLock>
        if (entry->valid == -1) {  // this means some one has called eremove()
    80208b1a:	12249703          	lh	a4,290(s1)
    80208b1e:	57fd                	li	a5,-1
    80208b20:	06f70863          	beq	a4,a5,80208b90 <eput+0x100>
            elock(entry->parent);
    80208b24:	1384b503          	ld	a0,312(s1)
    80208b28:	00000097          	auipc	ra,0x0
    80208b2c:	ebc080e7          	jalr	-324(ra) # 802089e4 <elock>
            eupdate(entry);
    80208b30:	8526                	mv	a0,s1
    80208b32:	00000097          	auipc	ra,0x0
    80208b36:	c6c080e7          	jalr	-916(ra) # 8020879e <eupdate>
            eunlock(entry->parent);
    80208b3a:	1384b503          	ld	a0,312(s1)
    80208b3e:	00000097          	auipc	ra,0x0
    80208b42:	ef0080e7          	jalr	-272(ra) # 80208a2e <eunlock>
        releasesleep(&entry->lock);
    80208b46:	854a                	mv	a0,s2
    80208b48:	ffffd097          	auipc	ra,0xffffd
    80208b4c:	e80080e7          	jalr	-384(ra) # 802059c8 <releasesleep>
        struct dirent* eparent = entry->parent;
    80208b50:	1384b903          	ld	s2,312(s1)
        acquireLock(&direntCache.lock);
    80208b54:	003f5517          	auipc	a0,0x3f5
    80208b58:	c7c50513          	addi	a0,a0,-900 # 805fd7d0 <direntCache>
    80208b5c:	ffffd097          	auipc	ra,0xffffd
    80208b60:	f52080e7          	jalr	-174(ra) # 80205aae <acquireLock>
        entry->ref--;
    80208b64:	1304a783          	lw	a5,304(s1)
    80208b68:	37fd                	addiw	a5,a5,-1
    80208b6a:	12f4a823          	sw	a5,304(s1)
        releaseLock(&direntCache.lock);
    80208b6e:	003f5517          	auipc	a0,0x3f5
    80208b72:	c6250513          	addi	a0,a0,-926 # 805fd7d0 <direntCache>
    80208b76:	ffffd097          	auipc	ra,0xffffd
    80208b7a:	fb4080e7          	jalr	-76(ra) # 80205b2a <releaseLock>
        if (entry->ref == 0) {
    80208b7e:	1304a783          	lw	a5,304(s1)
    80208b82:	f7bd                	bnez	a5,80208af0 <eput+0x60>
            eput(eparent);
    80208b84:	854a                	mv	a0,s2
    80208b86:	00000097          	auipc	ra,0x0
    80208b8a:	f0a080e7          	jalr	-246(ra) # 80208a90 <eput>
    80208b8e:	b78d                	j	80208af0 <eput+0x60>
            etrunc(entry);
    80208b90:	8526                	mv	a0,s1
    80208b92:	00000097          	auipc	ra,0x0
    80208b96:	ddc080e7          	jalr	-548(ra) # 8020896e <etrunc>
    80208b9a:	b775                	j	80208b46 <eput+0xb6>

0000000080208b9c <estat>:
void estat(struct dirent* de, struct stat* st) {
    80208b9c:	1141                	addi	sp,sp,-16
    80208b9e:	e422                	sd	s0,8(sp)
    80208ba0:	0800                	addi	s0,sp,16
    st->st_dev = de->dev;
    80208ba2:	12054783          	lbu	a5,288(a0)
    80208ba6:	e19c                	sd	a5,0(a1)
    st->st_size = de->file_size;
    80208ba8:	10856703          	lwu	a4,264(a0)
    80208bac:	f998                	sd	a4,48(a1)
    st->st_ino = (de - direntCache.entries);
    80208bae:	003f5797          	auipc	a5,0x3f5
    80208bb2:	c3a78793          	addi	a5,a5,-966 # 805fd7e8 <direntCache+0x18>
    80208bb6:	40f507b3          	sub	a5,a0,a5
    80208bba:	8791                	srai	a5,a5,0x4
    80208bbc:	00004697          	auipc	a3,0x4
    80208bc0:	7346b683          	ld	a3,1844(a3) # 8020d2f0 <__func__.0+0x20>
    80208bc4:	02d787b3          	mul	a5,a5,a3
    80208bc8:	e59c                	sd	a5,8(a1)
    st->st_mode = de->attribute;
    80208bca:	10054783          	lbu	a5,256(a0)
    80208bce:	c99c                	sw	a5,16(a1)
    st->st_nlink = 1;
    80208bd0:	4785                	li	a5,1
    80208bd2:	c9dc                	sw	a5,20(a1)
    st->st_uid = 0;
    80208bd4:	0005ac23          	sw	zero,24(a1)
    st->st_gid = 0;
    80208bd8:	0005ae23          	sw	zero,28(a1)
    st->st_rdev = 0;  // What's this?
    80208bdc:	0205b023          	sd	zero,32(a1)
    st->st_blksize = de->fileSystem->superBlock.bpb.byts_per_sec;
    80208be0:	11853783          	ld	a5,280(a0)
    80208be4:	0547d783          	lhu	a5,84(a5)
    80208be8:	dd9c                	sw	a5,56(a1)
    st->st_blocks = st->st_size / st->st_blksize;
    80208bea:	02f74733          	div	a4,a4,a5
    80208bee:	e1b8                	sd	a4,64(a1)
    st->st_atime_sec = 0;
    80208bf0:	0405b423          	sd	zero,72(a1)
    st->st_atime_nsec = 0;
    80208bf4:	0405b823          	sd	zero,80(a1)
    st->st_mtime_sec = 0;
    80208bf8:	0405bc23          	sd	zero,88(a1)
    st->st_mtime_nsec = 0;
    80208bfc:	0605b023          	sd	zero,96(a1)
    st->st_ctime_sec = 0;
    80208c00:	0605b423          	sd	zero,104(a1)
    st->st_ctime_nsec = 0;
    80208c04:	0605b823          	sd	zero,112(a1)
}
    80208c08:	6422                	ld	s0,8(sp)
    80208c0a:	0141                	addi	sp,sp,16
    80208c0c:	8082                	ret

0000000080208c0e <enext>:
 * @param   count   to write the count of entries
 * @return  -1      meet the end of dir
 *          0       find empty slots
 *          1       find a file with all its entries
 */
int enext(struct dirent* dp, struct dirent* ep, uint off, int* count) {
    80208c0e:	7119                	addi	sp,sp,-128
    80208c10:	fc86                	sd	ra,120(sp)
    80208c12:	f8a2                	sd	s0,112(sp)
    80208c14:	f4a6                	sd	s1,104(sp)
    80208c16:	f0ca                	sd	s2,96(sp)
    80208c18:	ecce                	sd	s3,88(sp)
    80208c1a:	e8d2                	sd	s4,80(sp)
    80208c1c:	e4d6                	sd	s5,72(sp)
    80208c1e:	e0da                	sd	s6,64(sp)
    80208c20:	fc5e                	sd	s7,56(sp)
    80208c22:	f862                	sd	s8,48(sp)
    80208c24:	f466                	sd	s9,40(sp)
    80208c26:	0100                	addi	s0,sp,128
    // assert(dp->fileSystem == ep->fileSystem);
    if (!(dp->attribute & ATTR_DIRECTORY))
    80208c28:	10054783          	lbu	a5,256(a0)
    80208c2c:	8bc1                	andi	a5,a5,16
    80208c2e:	cf95                	beqz	a5,80208c6a <enext+0x5c>
    80208c30:	892a                	mv	s2,a0
    80208c32:	89ae                	mv	s3,a1
    80208c34:	84b2                	mv	s1,a2
    80208c36:	8ab6                	mv	s5,a3
        panic("enext not dir");
    if (ep->valid)
    80208c38:	12259783          	lh	a5,290(a1)
    80208c3c:	eba9                	bnez	a5,80208c8e <enext+0x80>
        panic("enext ep valid");
    if (off % 32)
    80208c3e:	01f67793          	andi	a5,a2,31
    80208c42:	eba5                	bnez	a5,80208cb2 <enext+0xa4>
        panic("enext not align");
    if (dp->valid != 1) {
    80208c44:	12251703          	lh	a4,290(a0)
    80208c48:	4785                	li	a5,1
        return -1;
    80208c4a:	557d                	li	a0,-1
    if (dp->valid != 1) {
    80208c4c:	08f70563          	beq	a4,a5,80208cd6 <enext+0xc8>
            read_entry_info(ep, &de);
            return 1;
        }
    }
    return -1;
}
    80208c50:	70e6                	ld	ra,120(sp)
    80208c52:	7446                	ld	s0,112(sp)
    80208c54:	74a6                	ld	s1,104(sp)
    80208c56:	7906                	ld	s2,96(sp)
    80208c58:	69e6                	ld	s3,88(sp)
    80208c5a:	6a46                	ld	s4,80(sp)
    80208c5c:	6aa6                	ld	s5,72(sp)
    80208c5e:	6b06                	ld	s6,64(sp)
    80208c60:	7be2                	ld	s7,56(sp)
    80208c62:	7c42                	ld	s8,48(sp)
    80208c64:	7ca2                	ld	s9,40(sp)
    80208c66:	6109                	addi	sp,sp,128
    80208c68:	8082                	ret
        panic("enext not dir");
    80208c6a:	00004697          	auipc	a3,0x4
    80208c6e:	3ae68693          	addi	a3,a3,942 # 8020d018 <__func__.3+0xc8>
    80208c72:	00004617          	auipc	a2,0x4
    80208c76:	61e60613          	addi	a2,a2,1566 # 8020d290 <__func__.2>
    80208c7a:	36a00593          	li	a1,874
    80208c7e:	00004517          	auipc	a0,0x4
    80208c82:	2f250513          	addi	a0,a0,754 # 8020cf70 <__func__.3+0x20>
    80208c86:	ffff8097          	auipc	ra,0xffff8
    80208c8a:	ec6080e7          	jalr	-314(ra) # 80200b4c <_panic_>
        panic("enext ep valid");
    80208c8e:	00004697          	auipc	a3,0x4
    80208c92:	39a68693          	addi	a3,a3,922 # 8020d028 <__func__.3+0xd8>
    80208c96:	00004617          	auipc	a2,0x4
    80208c9a:	5fa60613          	addi	a2,a2,1530 # 8020d290 <__func__.2>
    80208c9e:	36c00593          	li	a1,876
    80208ca2:	00004517          	auipc	a0,0x4
    80208ca6:	2ce50513          	addi	a0,a0,718 # 8020cf70 <__func__.3+0x20>
    80208caa:	ffff8097          	auipc	ra,0xffff8
    80208cae:	ea2080e7          	jalr	-350(ra) # 80200b4c <_panic_>
        panic("enext not align");
    80208cb2:	00004697          	auipc	a3,0x4
    80208cb6:	38668693          	addi	a3,a3,902 # 8020d038 <__func__.3+0xe8>
    80208cba:	00004617          	auipc	a2,0x4
    80208cbe:	5d660613          	addi	a2,a2,1494 # 8020d290 <__func__.2>
    80208cc2:	36e00593          	li	a1,878
    80208cc6:	00004517          	auipc	a0,0x4
    80208cca:	2aa50513          	addi	a0,a0,682 # 8020cf70 <__func__.3+0x20>
    80208cce:	ffff8097          	auipc	ra,0xffff8
    80208cd2:	e7e080e7          	jalr	-386(ra) # 80200b4c <_panic_>
    memset(ep->filename, 0, FAT32_MAX_FILENAME + 1);
    80208cd6:	10000613          	li	a2,256
    80208cda:	4581                	li	a1,0
    80208cdc:	854e                	mv	a0,s3
    80208cde:	ffffd097          	auipc	ra,0xffffd
    80208ce2:	086080e7          	jalr	134(ra) # 80205d64 <memset>
    FileSystem *fs = dp->fileSystem;
    80208ce6:	11893a03          	ld	s4,280(s2)
    int cnt = 0;
    80208cea:	4b01                	li	s6,0
    for (int off2; (off2 = reloc_clus(fs, dp, off, 0)) != -1; off += 32) {
    80208cec:	5bfd                	li	s7,-1
        if (de.lne.order == EMPTY_ENTRY) {
    80208cee:	0e500c13          	li	s8,229
        if (de.lne.attr == ATTR_LONG_NAME) {
    80208cf2:	4cbd                	li	s9,15
    for (int off2; (off2 = reloc_clus(fs, dp, off, 0)) != -1; off += 32) {
    80208cf4:	a805                	j	80208d24 <enext+0x116>
            cnt++;
    80208cf6:	2b05                	addiw	s6,s6,1
            continue;
    80208cf8:	a025                	j	80208d20 <enext+0x112>
            *count = cnt;
    80208cfa:	016aa023          	sw	s6,0(s5)
            return 0;
    80208cfe:	4501                	li	a0,0
    80208d00:	bf81                	j	80208c50 <enext+0x42>
            read_entry_name(ep->filename + (lcnt - 1) * CHAR_LONG_NAME, &de);
    80208d02:	fff7079b          	addiw	a5,a4,-1
    80208d06:	0017951b          	slliw	a0,a5,0x1
    80208d0a:	9d3d                	addw	a0,a0,a5
    80208d0c:	0025151b          	slliw	a0,a0,0x2
    80208d10:	9d3d                	addw	a0,a0,a5
    80208d12:	f8040593          	addi	a1,s0,-128
    80208d16:	954e                	add	a0,a0,s3
    80208d18:	fffff097          	auipc	ra,0xfffff
    80208d1c:	1ec080e7          	jalr	492(ra) # 80207f04 <read_entry_name>
    for (int off2; (off2 = reloc_clus(fs, dp, off, 0)) != -1; off += 32) {
    80208d20:	0204849b          	addiw	s1,s1,32
    80208d24:	4681                	li	a3,0
    80208d26:	8626                	mv	a2,s1
    80208d28:	85ca                	mv	a1,s2
    80208d2a:	8552                	mv	a0,s4
    80208d2c:	fffff097          	auipc	ra,0xfffff
    80208d30:	e00080e7          	jalr	-512(ra) # 80207b2c <reloc_clus>
    80208d34:	f1750ee3          	beq	a0,s7,80208c50 <enext+0x42>
        if (rw_clus(fs, dp->cur_clus, 0, 0, (u64)&de, off2, 32) != 32 ||
    80208d38:	02000813          	li	a6,32
    80208d3c:	0005079b          	sext.w	a5,a0
    80208d40:	f8040713          	addi	a4,s0,-128
    80208d44:	4681                	li	a3,0
    80208d46:	4601                	li	a2,0
    80208d48:	10c92583          	lw	a1,268(s2)
    80208d4c:	8552                	mv	a0,s4
    80208d4e:	fffff097          	auipc	ra,0xfffff
    80208d52:	f00080e7          	jalr	-256(ra) # 80207c4e <rw_clus>
    80208d56:	2501                	sext.w	a0,a0
    80208d58:	02000793          	li	a5,32
    80208d5c:	08f51063          	bne	a0,a5,80208ddc <enext+0x1ce>
            de.lne.order == END_OF_ENTRY) {
    80208d60:	f8044783          	lbu	a5,-128(s0)
        if (rw_clus(fs, dp->cur_clus, 0, 0, (u64)&de, off2, 32) != 32 ||
    80208d64:	cfb5                	beqz	a5,80208de0 <enext+0x1d2>
        if (de.lne.order == EMPTY_ENTRY) {
    80208d66:	f98788e3          	beq	a5,s8,80208cf6 <enext+0xe8>
        } else if (cnt) {
    80208d6a:	f80b18e3          	bnez	s6,80208cfa <enext+0xec>
        if (de.lne.attr == ATTR_LONG_NAME) {
    80208d6e:	f8b44703          	lbu	a4,-117(s0)
    80208d72:	01971d63          	bne	a4,s9,80208d8c <enext+0x17e>
            int lcnt = de.lne.order & ~LAST_LONG_ENTRY;
    80208d76:	0bf7f713          	andi	a4,a5,191
            if (de.lne.order & LAST_LONG_ENTRY) {
    80208d7a:	0407f793          	andi	a5,a5,64
    80208d7e:	d3d1                	beqz	a5,80208d02 <enext+0xf4>
                *count = lcnt + 1;  // plus the s-n-e;
    80208d80:	0017079b          	addiw	a5,a4,1
    80208d84:	00faa023          	sw	a5,0(s5)
                count = 0;
    80208d88:	4a81                	li	s5,0
    80208d8a:	bfa5                	j	80208d02 <enext+0xf4>
            if (count) {
    80208d8c:	000a8c63          	beqz	s5,80208da4 <enext+0x196>
                *count = 1;
    80208d90:	4785                	li	a5,1
    80208d92:	00faa023          	sw	a5,0(s5)
                read_entry_name(ep->filename, &de);
    80208d96:	f8040593          	addi	a1,s0,-128
    80208d9a:	854e                	mv	a0,s3
    80208d9c:	fffff097          	auipc	ra,0xfffff
    80208da0:	168080e7          	jalr	360(ra) # 80207f04 <read_entry_name>
    entry->attribute = d->sne.attr;
    80208da4:	f8b44783          	lbu	a5,-117(s0)
    80208da8:	10f98023          	sb	a5,256(s3)
    entry->first_clus = ((uint32)d->sne.fst_clus_hi << 16) | d->sne.fst_clus_lo;
    80208dac:	f9445783          	lhu	a5,-108(s0)
    80208db0:	0107979b          	slliw	a5,a5,0x10
    80208db4:	f9a45703          	lhu	a4,-102(s0)
    80208db8:	8fd9                	or	a5,a5,a4
    80208dba:	2781                	sext.w	a5,a5
    80208dbc:	10f9a223          	sw	a5,260(s3)
    entry->file_size = d->sne.file_size;
    80208dc0:	f9c42703          	lw	a4,-100(s0)
    80208dc4:	10e9a423          	sw	a4,264(s3)
    entry->cur_clus = entry->first_clus;
    80208dc8:	10f9a623          	sw	a5,268(s3)
    entry->clus_cnt = 0;
    80208dcc:	1009a823          	sw	zero,272(s3)
    entry->_nt_res = d->sne._nt_res;
    80208dd0:	f8c44783          	lbu	a5,-116(s0)
    80208dd4:	10f98a23          	sb	a5,276(s3)
            return 1;
    80208dd8:	4505                	li	a0,1
}
    80208dda:	bd9d                	j	80208c50 <enext+0x42>
            return -1;
    80208ddc:	557d                	li	a0,-1
    80208dde:	bd8d                	j	80208c50 <enext+0x42>
    80208de0:	557d                	li	a0,-1
    80208de2:	b5bd                	j	80208c50 <enext+0x42>

0000000080208de4 <dirlookup>:
 * @param   dp          entry of a directory file
 * @param   filename    target filename
 * @param   poff        offset of proper empty entry slots from the beginning of
 * the dir
 */
struct dirent* dirlookup(struct dirent* dp, char* filename, uint* poff) {
    80208de4:	715d                	addi	sp,sp,-80
    80208de6:	e486                	sd	ra,72(sp)
    80208de8:	e0a2                	sd	s0,64(sp)
    80208dea:	fc26                	sd	s1,56(sp)
    80208dec:	f84a                	sd	s2,48(sp)
    80208dee:	f44e                	sd	s3,40(sp)
    80208df0:	f052                	sd	s4,32(sp)
    80208df2:	ec56                	sd	s5,24(sp)
    80208df4:	e85a                	sd	s6,16(sp)
    80208df6:	0880                	addi	s0,sp,80
    if (!(dp->attribute & ATTR_DIRECTORY))
    80208df8:	10054783          	lbu	a5,256(a0)
    80208dfc:	8bc1                	andi	a5,a5,16
    80208dfe:	cbb1                	beqz	a5,80208e52 <dirlookup+0x6e>
    80208e00:	84aa                	mv	s1,a0
    80208e02:	89ae                	mv	s3,a1
    80208e04:	8ab2                	mv	s5,a2
        panic("dirlookup not DIR");
    
    if (strncmp(filename, ".", FAT32_MAX_FILENAME) == 0) {
    80208e06:	0ff00613          	li	a2,255
    80208e0a:	00004597          	auipc	a1,0x4
    80208e0e:	25658593          	addi	a1,a1,598 # 8020d060 <__func__.3+0x110>
    80208e12:	854e                	mv	a0,s3
    80208e14:	ffffd097          	auipc	ra,0xffffd
    80208e18:	020080e7          	jalr	32(ra) # 80205e34 <strncmp>
    80208e1c:	cd29                	beqz	a0,80208e76 <dirlookup+0x92>
        return edup(dp);
    } else if (strncmp(filename, "..", FAT32_MAX_FILENAME) == 0) {
    80208e1e:	0ff00613          	li	a2,255
    80208e22:	00004597          	auipc	a1,0x4
    80208e26:	24658593          	addi	a1,a1,582 # 8020d068 <__func__.3+0x118>
    80208e2a:	854e                	mv	a0,s3
    80208e2c:	ffffd097          	auipc	ra,0xffffd
    80208e30:	008080e7          	jalr	8(ra) # 80205e34 <strncmp>
    80208e34:	e925                	bnez	a0,80208ea4 <dirlookup+0xc0>
        if (dp == &dp->fileSystem->root) {
    80208e36:	1184b503          	ld	a0,280(s1)
    80208e3a:	07050513          	addi	a0,a0,112
    80208e3e:	04950d63          	beq	a0,s1,80208e98 <dirlookup+0xb4>
            return edup(&dp->fileSystem->root);
        }
        return edup(dp->parent);
    80208e42:	1384b503          	ld	a0,312(s1)
    80208e46:	00000097          	auipc	ra,0x0
    80208e4a:	914080e7          	jalr	-1772(ra) # 8020875a <edup>
    80208e4e:	892a                	mv	s2,a0
    80208e50:	a80d                	j	80208e82 <dirlookup+0x9e>
        panic("dirlookup not DIR");
    80208e52:	00004697          	auipc	a3,0x4
    80208e56:	1f668693          	addi	a3,a3,502 # 8020d048 <__func__.3+0xf8>
    80208e5a:	00004617          	auipc	a2,0x4
    80208e5e:	24660613          	addi	a2,a2,582 # 8020d0a0 <__func__.1>
    80208e62:	3a100593          	li	a1,929
    80208e66:	00004517          	auipc	a0,0x4
    80208e6a:	10a50513          	addi	a0,a0,266 # 8020cf70 <__func__.3+0x20>
    80208e6e:	ffff8097          	auipc	ra,0xffff8
    80208e72:	cde080e7          	jalr	-802(ra) # 80200b4c <_panic_>
        return edup(dp);
    80208e76:	8526                	mv	a0,s1
    80208e78:	00000097          	auipc	ra,0x0
    80208e7c:	8e2080e7          	jalr	-1822(ra) # 8020875a <edup>
    80208e80:	892a                	mv	s2,a0
    if (poff) {
        *poff = off;
    }
    eput(ep);
    return NULL;
}
    80208e82:	854a                	mv	a0,s2
    80208e84:	60a6                	ld	ra,72(sp)
    80208e86:	6406                	ld	s0,64(sp)
    80208e88:	74e2                	ld	s1,56(sp)
    80208e8a:	7942                	ld	s2,48(sp)
    80208e8c:	79a2                	ld	s3,40(sp)
    80208e8e:	7a02                	ld	s4,32(sp)
    80208e90:	6ae2                	ld	s5,24(sp)
    80208e92:	6b42                	ld	s6,16(sp)
    80208e94:	6161                	addi	sp,sp,80
    80208e96:	8082                	ret
            return edup(&dp->fileSystem->root);
    80208e98:	00000097          	auipc	ra,0x0
    80208e9c:	8c2080e7          	jalr	-1854(ra) # 8020875a <edup>
    80208ea0:	892a                	mv	s2,a0
    80208ea2:	b7c5                	j	80208e82 <dirlookup+0x9e>
    if (dp->valid != 1) {
    80208ea4:	12249703          	lh	a4,290(s1)
    80208ea8:	4785                	li	a5,1
        return NULL;
    80208eaa:	4901                	li	s2,0
    if (dp->valid != 1) {
    80208eac:	fcf71be3          	bne	a4,a5,80208e82 <dirlookup+0x9e>
    struct dirent* ep = eget(dp, filename);
    80208eb0:	85ce                	mv	a1,s3
    80208eb2:	8526                	mv	a0,s1
    80208eb4:	fffff097          	auipc	ra,0xfffff
    80208eb8:	ef6080e7          	jalr	-266(ra) # 80207daa <eget>
    80208ebc:	892a                	mv	s2,a0
    if (ep->valid == 1) {
    80208ebe:	12251703          	lh	a4,290(a0)
    80208ec2:	4785                	li	a5,1
    80208ec4:	faf70fe3          	beq	a4,a5,80208e82 <dirlookup+0x9e>
    int len = strlen(filename);
    80208ec8:	854e                	mv	a0,s3
    80208eca:	ffffd097          	auipc	ra,0xffffd
    80208ece:	016080e7          	jalr	22(ra) # 80205ee0 <strlen>
    int count = 0;
    80208ed2:	fa042e23          	sw	zero,-68(s0)
    reloc_clus(fs, dp, 0, 0);
    80208ed6:	4681                	li	a3,0
    80208ed8:	4601                	li	a2,0
    80208eda:	85a6                	mv	a1,s1
    80208edc:	1184b503          	ld	a0,280(s1)
    80208ee0:	fffff097          	auipc	ra,0xfffff
    80208ee4:	c4c080e7          	jalr	-948(ra) # 80207b2c <reloc_clus>
    uint off = 0;
    80208ee8:	4a01                	li	s4,0
    while ((type = enext(dp, ep, off, &count) != -1)) {
    80208eea:	5b7d                	li	s6,-1
    80208eec:	fbc40693          	addi	a3,s0,-68
    80208ef0:	8652                	mv	a2,s4
    80208ef2:	85ca                	mv	a1,s2
    80208ef4:	8526                	mv	a0,s1
    80208ef6:	00000097          	auipc	ra,0x0
    80208efa:	d18080e7          	jalr	-744(ra) # 80208c0e <enext>
    80208efe:	03650f63          	beq	a0,s6,80208f3c <dirlookup+0x158>
        } else if (strncmp(filename, ep->filename, FAT32_MAX_FILENAME) == 0) {
    80208f02:	0ff00613          	li	a2,255
    80208f06:	85ca                	mv	a1,s2
    80208f08:	854e                	mv	a0,s3
    80208f0a:	ffffd097          	auipc	ra,0xffffd
    80208f0e:	f2a080e7          	jalr	-214(ra) # 80205e34 <strncmp>
    80208f12:	c901                	beqz	a0,80208f22 <dirlookup+0x13e>
        off += count << 5;
    80208f14:	fbc42783          	lw	a5,-68(s0)
    80208f18:	0057979b          	slliw	a5,a5,0x5
    80208f1c:	01478a3b          	addw	s4,a5,s4
    80208f20:	b7f1                	j	80208eec <dirlookup+0x108>
            ep->parent = edup(dp);
    80208f22:	8526                	mv	a0,s1
    80208f24:	00000097          	auipc	ra,0x0
    80208f28:	836080e7          	jalr	-1994(ra) # 8020875a <edup>
    80208f2c:	12a93c23          	sd	a0,312(s2)
            ep->off = off;
    80208f30:	13492a23          	sw	s4,308(s2)
            ep->valid = 1;
    80208f34:	4785                	li	a5,1
    80208f36:	12f91123          	sh	a5,290(s2)
            return ep;
    80208f3a:	b7a1                	j	80208e82 <dirlookup+0x9e>
    if (poff) {
    80208f3c:	000a8463          	beqz	s5,80208f44 <dirlookup+0x160>
        *poff = off;
    80208f40:	014aa023          	sw	s4,0(s5)
    eput(ep);
    80208f44:	854a                	mv	a0,s2
    80208f46:	00000097          	auipc	ra,0x0
    80208f4a:	b4a080e7          	jalr	-1206(ra) # 80208a90 <eput>
    return NULL;
    80208f4e:	4901                	li	s2,0
    80208f50:	bf0d                	j	80208e82 <dirlookup+0x9e>

0000000080208f52 <ealloc>:
struct dirent* ealloc(struct dirent* dp, char* name, int attr) {
    80208f52:	715d                	addi	sp,sp,-80
    80208f54:	e486                	sd	ra,72(sp)
    80208f56:	e0a2                	sd	s0,64(sp)
    80208f58:	fc26                	sd	s1,56(sp)
    80208f5a:	f84a                	sd	s2,48(sp)
    80208f5c:	f44e                	sd	s3,40(sp)
    80208f5e:	f052                	sd	s4,32(sp)
    80208f60:	ec56                	sd	s5,24(sp)
    80208f62:	0880                	addi	s0,sp,80
    80208f64:	892a                	mv	s2,a0
    if (!(dp->attribute & ATTR_DIRECTORY)) {
    80208f66:	10054783          	lbu	a5,256(a0)
    80208f6a:	8bc1                	andi	a5,a5,16
    80208f6c:	c7b1                	beqz	a5,80208fb8 <ealloc+0x66>
    80208f6e:	852e                	mv	a0,a1
    80208f70:	8a32                	mv	s4,a2
    if (dp->valid != 1 ||
    80208f72:	12291703          	lh	a4,290(s2)
    80208f76:	4785                	li	a5,1
        return NULL;
    80208f78:	4481                	li	s1,0
    if (dp->valid != 1 ||
    80208f7a:	02f71563          	bne	a4,a5,80208fa4 <ealloc+0x52>
        !(name = formatname(name))) {  // detect illegal character
    80208f7e:	fffff097          	auipc	ra,0xfffff
    80208f82:	2fe080e7          	jalr	766(ra) # 8020827c <formatname>
    80208f86:	89aa                	mv	s3,a0
    if (dp->valid != 1 ||
    80208f88:	16050d63          	beqz	a0,80209102 <ealloc+0x1b0>
    uint off = 0;
    80208f8c:	fa042e23          	sw	zero,-68(s0)
    if ((ep = dirlookup(dp, name, &off)) != 0) {  // entry exists
    80208f90:	fbc40613          	addi	a2,s0,-68
    80208f94:	85aa                	mv	a1,a0
    80208f96:	854a                	mv	a0,s2
    80208f98:	00000097          	auipc	ra,0x0
    80208f9c:	e4c080e7          	jalr	-436(ra) # 80208de4 <dirlookup>
    80208fa0:	84aa                	mv	s1,a0
    80208fa2:	cd0d                	beqz	a0,80208fdc <ealloc+0x8a>
}
    80208fa4:	8526                	mv	a0,s1
    80208fa6:	60a6                	ld	ra,72(sp)
    80208fa8:	6406                	ld	s0,64(sp)
    80208faa:	74e2                	ld	s1,56(sp)
    80208fac:	7942                	ld	s2,48(sp)
    80208fae:	79a2                	ld	s3,40(sp)
    80208fb0:	7a02                	ld	s4,32(sp)
    80208fb2:	6ae2                	ld	s5,24(sp)
    80208fb4:	6161                	addi	sp,sp,80
    80208fb6:	8082                	ret
        panic("ealloc not dir");
    80208fb8:	00004697          	auipc	a3,0x4
    80208fbc:	0b868693          	addi	a3,a3,184 # 8020d070 <__func__.3+0x120>
    80208fc0:	00004617          	auipc	a2,0x4
    80208fc4:	2f060613          	addi	a2,a2,752 # 8020d2b0 <__func__.6>
    80208fc8:	26d00593          	li	a1,621
    80208fcc:	00004517          	auipc	a0,0x4
    80208fd0:	fa450513          	addi	a0,a0,-92 # 8020cf70 <__func__.3+0x20>
    80208fd4:	ffff8097          	auipc	ra,0xffff8
    80208fd8:	b78080e7          	jalr	-1160(ra) # 80200b4c <_panic_>
    ep = eget(dp, name);
    80208fdc:	85ce                	mv	a1,s3
    80208fde:	854a                	mv	a0,s2
    80208fe0:	fffff097          	auipc	ra,0xfffff
    80208fe4:	dca080e7          	jalr	-566(ra) # 80207daa <eget>
    80208fe8:	84aa                	mv	s1,a0
    elock(ep);
    80208fea:	00000097          	auipc	ra,0x0
    80208fee:	9fa080e7          	jalr	-1542(ra) # 802089e4 <elock>
    if (attr == ATTR_LINK) {
    80208ff2:	04000793          	li	a5,64
    80208ff6:	08fa0063          	beq	s4,a5,80209076 <ealloc+0x124>
        ep->attribute = attr;
    80208ffa:	11448023          	sb	s4,256(s1)
        ep->_nt_res = 0;
    80208ffe:	10048a23          	sb	zero,276(s1)
    ep->file_size = 0;
    80209002:	1004a423          	sw	zero,264(s1)
    ep->first_clus = 0;
    80209006:	1004a223          	sw	zero,260(s1)
    ep->parent = edup(dp);
    8020900a:	854a                	mv	a0,s2
    8020900c:	fffff097          	auipc	ra,0xfffff
    80209010:	74e080e7          	jalr	1870(ra) # 8020875a <edup>
    80209014:	12a4bc23          	sd	a0,312(s1)
    ep->off = off;
    80209018:	fbc42a83          	lw	s5,-68(s0)
    8020901c:	1354aa23          	sw	s5,308(s1)
    ep->clus_cnt = 0;
    80209020:	1004a823          	sw	zero,272(s1)
    ep->cur_clus = 0;
    80209024:	1004a623          	sw	zero,268(s1)
    ep->dirty = 0;
    80209028:	120480a3          	sb	zero,289(s1)
    strncpy(ep->filename, name, FAT32_MAX_FILENAME);
    8020902c:	0ff00613          	li	a2,255
    80209030:	85ce                	mv	a1,s3
    80209032:	8526                	mv	a0,s1
    80209034:	ffffd097          	auipc	ra,0xffffd
    80209038:	e3c080e7          	jalr	-452(ra) # 80205e70 <strncpy>
    ep->filename[FAT32_MAX_FILENAME] = '\0';
    8020903c:	0e048fa3          	sb	zero,255(s1)
    FileSystem *fs = ep->fileSystem;
    80209040:	1184b503          	ld	a0,280(s1)
    if (attr == ATTR_DIRECTORY) {  // generate "." and ".." for ep
    80209044:	47c1                	li	a5,16
    80209046:	06fa0d63          	beq	s4,a5,802090c0 <ealloc+0x16e>
        ep->attribute |= ATTR_ARCHIVE;
    8020904a:	1004c783          	lbu	a5,256(s1)
    8020904e:	0207e793          	ori	a5,a5,32
    80209052:	10f48023          	sb	a5,256(s1)
    emake(dp, ep, off);
    80209056:	8656                	mv	a2,s5
    80209058:	85a6                	mv	a1,s1
    8020905a:	854a                	mv	a0,s2
    8020905c:	fffff097          	auipc	ra,0xfffff
    80209060:	2d8080e7          	jalr	728(ra) # 80208334 <emake>
    ep->valid = 1;
    80209064:	4785                	li	a5,1
    80209066:	12f49123          	sh	a5,290(s1)
    eunlock(ep);
    8020906a:	8526                	mv	a0,s1
    8020906c:	00000097          	auipc	ra,0x0
    80209070:	9c2080e7          	jalr	-1598(ra) # 80208a2e <eunlock>
    return ep;
    80209074:	bf05                	j	80208fa4 <ealloc+0x52>
        ep->attribute = 0;
    80209076:	10048023          	sb	zero,256(s1)
        ep->_nt_res = DT_LNK;
    8020907a:	47a9                	li	a5,10
    8020907c:	10f48a23          	sb	a5,276(s1)
    ep->file_size = 0;
    80209080:	1004a423          	sw	zero,264(s1)
    ep->first_clus = 0;
    80209084:	1004a223          	sw	zero,260(s1)
    ep->parent = edup(dp);
    80209088:	854a                	mv	a0,s2
    8020908a:	fffff097          	auipc	ra,0xfffff
    8020908e:	6d0080e7          	jalr	1744(ra) # 8020875a <edup>
    80209092:	12a4bc23          	sd	a0,312(s1)
    ep->off = off;
    80209096:	fbc42a83          	lw	s5,-68(s0)
    8020909a:	1354aa23          	sw	s5,308(s1)
    ep->clus_cnt = 0;
    8020909e:	1004a823          	sw	zero,272(s1)
    ep->cur_clus = 0;
    802090a2:	1004a623          	sw	zero,268(s1)
    ep->dirty = 0;
    802090a6:	120480a3          	sb	zero,289(s1)
    strncpy(ep->filename, name, FAT32_MAX_FILENAME);
    802090aa:	0ff00613          	li	a2,255
    802090ae:	85ce                	mv	a1,s3
    802090b0:	8526                	mv	a0,s1
    802090b2:	ffffd097          	auipc	ra,0xffffd
    802090b6:	dbe080e7          	jalr	-578(ra) # 80205e70 <strncpy>
    ep->filename[FAT32_MAX_FILENAME] = '\0';
    802090ba:	0e048fa3          	sb	zero,255(s1)
    if (attr == ATTR_DIRECTORY) {  // generate "." and ".." for ep
    802090be:	b771                	j	8020904a <ealloc+0xf8>
        ep->attribute |= ATTR_DIRECTORY;
    802090c0:	1004c783          	lbu	a5,256(s1)
    802090c4:	0107e793          	ori	a5,a5,16
    802090c8:	10f48023          	sb	a5,256(s1)
        ep->cur_clus = ep->first_clus = alloc_clus(fs, dp->dev);
    802090cc:	12094583          	lbu	a1,288(s2)
    802090d0:	fffff097          	auipc	ra,0xfffff
    802090d4:	928080e7          	jalr	-1752(ra) # 802079f8 <alloc_clus>
    802090d8:	2501                	sext.w	a0,a0
    802090da:	10a4a223          	sw	a0,260(s1)
    802090de:	10a4a623          	sw	a0,268(s1)
        emake(ep, ep, 0);
    802090e2:	4601                	li	a2,0
    802090e4:	85a6                	mv	a1,s1
    802090e6:	8526                	mv	a0,s1
    802090e8:	fffff097          	auipc	ra,0xfffff
    802090ec:	24c080e7          	jalr	588(ra) # 80208334 <emake>
        emake(ep, dp, 32);
    802090f0:	02000613          	li	a2,32
    802090f4:	85ca                	mv	a1,s2
    802090f6:	8526                	mv	a0,s1
    802090f8:	fffff097          	auipc	ra,0xfffff
    802090fc:	23c080e7          	jalr	572(ra) # 80208334 <emake>
    80209100:	bf99                	j	80209056 <ealloc+0x104>
        return NULL;
    80209102:	84aa                	mv	s1,a0
    80209104:	b545                	j	80208fa4 <ealloc+0x52>

0000000080209106 <ename>:
        return NULL;
    }
    return entry;
}

struct dirent* ename(int fd, char* path) {
    80209106:	716d                	addi	sp,sp,-272
    80209108:	e606                	sd	ra,264(sp)
    8020910a:	e222                	sd	s0,256(sp)
    8020910c:	0a00                	addi	s0,sp,272
    char name[FAT32_MAX_FILENAME + 1];
    return lookup_path(fd, path, 0, name);
    8020910e:	ef040693          	addi	a3,s0,-272
    80209112:	4601                	li	a2,0
    80209114:	00000097          	auipc	ra,0x0
    80209118:	082080e7          	jalr	130(ra) # 80209196 <lookup_path>
}
    8020911c:	60b2                	ld	ra,264(sp)
    8020911e:	6412                	ld	s0,256(sp)
    80209120:	6151                	addi	sp,sp,272
    80209122:	8082                	ret

0000000080209124 <jumpToLinkDirent>:
static struct dirent* jumpToLinkDirent(struct dirent* link) {
    80209124:	712d                	addi	sp,sp,-288
    80209126:	ee06                	sd	ra,280(sp)
    80209128:	ea22                	sd	s0,272(sp)
    8020912a:	e626                	sd	s1,264(sp)
    8020912c:	1200                	addi	s0,sp,288
    while (link && link->_nt_res == DT_LNK) {
    8020912e:	44a9                	li	s1,10
    80209130:	c915                	beqz	a0,80209164 <jumpToLinkDirent+0x40>
    80209132:	11454783          	lbu	a5,276(a0)
    80209136:	02979963          	bne	a5,s1,80209168 <jumpToLinkDirent+0x44>
        eread(link, 0, (u64)buf, 0, FAT32_MAX_FILENAME);
    8020913a:	0ff00713          	li	a4,255
    8020913e:	4681                	li	a3,0
    80209140:	ee040613          	addi	a2,s0,-288
    80209144:	4581                	li	a1,0
    80209146:	fffff097          	auipc	ra,0xfffff
    8020914a:	f10080e7          	jalr	-240(ra) # 80208056 <eread>
        link = ename(AT_FDCWD, buf);
    8020914e:	ee040593          	addi	a1,s0,-288
    80209152:	f9c00513          	li	a0,-100
    80209156:	00000097          	auipc	ra,0x0
    8020915a:	fb0080e7          	jalr	-80(ra) # 80209106 <ename>
    while (link && link->_nt_res == DT_LNK) {
    8020915e:	f971                	bnez	a0,80209132 <jumpToLinkDirent+0xe>
        link = ename(AT_FDCWD, buf);
    80209160:	84aa                	mv	s1,a0
    80209162:	a021                	j	8020916a <jumpToLinkDirent+0x46>
    while (link && link->_nt_res == DT_LNK) {
    80209164:	84aa                	mv	s1,a0
    80209166:	a011                	j	8020916a <jumpToLinkDirent+0x46>
    80209168:	84aa                	mv	s1,a0
    assert(link != NULL);
    8020916a:	009036b3          	snez	a3,s1
    8020916e:	00004617          	auipc	a2,0x4
    80209172:	f4260613          	addi	a2,a2,-190 # 8020d0b0 <__func__.0>
    80209176:	3f100593          	li	a1,1009
    8020917a:	00004517          	auipc	a0,0x4
    8020917e:	df650513          	addi	a0,a0,-522 # 8020cf70 <__func__.3+0x20>
    80209182:	ffff8097          	auipc	ra,0xffff8
    80209186:	a40080e7          	jalr	-1472(ra) # 80200bc2 <_assert_>
}
    8020918a:	8526                	mv	a0,s1
    8020918c:	60f2                	ld	ra,280(sp)
    8020918e:	6452                	ld	s0,272(sp)
    80209190:	64b2                	ld	s1,264(sp)
    80209192:	6115                	addi	sp,sp,288
    80209194:	8082                	ret

0000000080209196 <lookup_path>:
static struct dirent* lookup_path(int fd, char* path, int parent, char* name) {
    80209196:	715d                	addi	sp,sp,-80
    80209198:	e486                	sd	ra,72(sp)
    8020919a:	e0a2                	sd	s0,64(sp)
    8020919c:	fc26                	sd	s1,56(sp)
    8020919e:	f84a                	sd	s2,48(sp)
    802091a0:	f44e                	sd	s3,40(sp)
    802091a2:	f052                	sd	s4,32(sp)
    802091a4:	ec56                	sd	s5,24(sp)
    802091a6:	e85a                	sd	s6,16(sp)
    802091a8:	e45e                	sd	s7,8(sp)
    802091aa:	e062                	sd	s8,0(sp)
    802091ac:	0880                	addi	s0,sp,80
    802091ae:	84ae                	mv	s1,a1
    802091b0:	8b32                	mv	s6,a2
    802091b2:	8ab6                	mv	s5,a3
    if (*path != '/' && fd != AT_FDCWD && fd >= 0 && fd < NOFILE) {
    802091b4:	0005c783          	lbu	a5,0(a1)
    802091b8:	02f00713          	li	a4,47
    802091bc:	06e78f63          	beq	a5,a4,8020923a <lookup_path+0xa4>
    802091c0:	892a                	mv	s2,a0
    802091c2:	0005071b          	sext.w	a4,a0
    802091c6:	07f00693          	li	a3,127
    802091ca:	02e6fb63          	bgeu	a3,a4,80209200 <lookup_path+0x6a>
    } else if (*path != '\0' && fd == AT_FDCWD) {
    802091ce:	1a078463          	beqz	a5,80209376 <lookup_path+0x1e0>
    802091d2:	f9c00793          	li	a5,-100
        return NULL;
    802091d6:	4a01                	li	s4,0
    } else if (*path != '\0' && fd == AT_FDCWD) {
    802091d8:	08f51663          	bne	a0,a5,80209264 <lookup_path+0xce>
        entry = edup(myproc()->cwd);
    802091dc:	ffff9097          	auipc	ra,0xffff9
    802091e0:	7d4080e7          	jalr	2004(ra) # 802029b0 <myproc>
    802091e4:	1a853503          	ld	a0,424(a0)
    802091e8:	fffff097          	auipc	ra,0xfffff
    802091ec:	572080e7          	jalr	1394(ra) # 8020875a <edup>
    802091f0:	8a2a                	mv	s4,a0
    while (*path == '/') {
    802091f2:	02f00913          	li	s2,47
    802091f6:	0ff00b93          	li	s7,255
    802091fa:	0ff00c13          	li	s8,255
    802091fe:	aa81                	j	8020934e <lookup_path+0x1b8>
        if (myproc()->ofile[fd] == 0) {
    80209200:	ffff9097          	auipc	ra,0xffff9
    80209204:	7b0080e7          	jalr	1968(ra) # 802029b0 <myproc>
    80209208:	03690793          	addi	a5,s2,54
    8020920c:	078e                	slli	a5,a5,0x3
    8020920e:	97aa                	add	a5,a5,a0
    80209210:	0007ba03          	ld	s4,0(a5)
    80209214:	040a0863          	beqz	s4,80209264 <lookup_path+0xce>
        entry = edup(myproc()->ofile[fd]->ep);
    80209218:	ffff9097          	auipc	ra,0xffff9
    8020921c:	798080e7          	jalr	1944(ra) # 802029b0 <myproc>
    80209220:	03690713          	addi	a4,s2,54
    80209224:	070e                	slli	a4,a4,0x3
    80209226:	00e507b3          	add	a5,a0,a4
    8020922a:	639c                	ld	a5,0(a5)
    8020922c:	6f88                	ld	a0,24(a5)
    8020922e:	fffff097          	auipc	ra,0xfffff
    80209232:	52c080e7          	jalr	1324(ra) # 8020875a <edup>
    80209236:	8a2a                	mv	s4,a0
    80209238:	bf6d                	j	802091f2 <lookup_path+0x5c>
        entry = edup(&rootFileSystem.root);
    8020923a:	003f4517          	auipc	a0,0x3f4
    8020923e:	40650513          	addi	a0,a0,1030 # 805fd640 <rootFileSystem+0x70>
    80209242:	fffff097          	auipc	ra,0xfffff
    80209246:	518080e7          	jalr	1304(ra) # 8020875a <edup>
    8020924a:	8a2a                	mv	s4,a0
    8020924c:	b75d                	j	802091f2 <lookup_path+0x5c>
            eunlock(entry);
    8020924e:	854e                	mv	a0,s3
    80209250:	fffff097          	auipc	ra,0xfffff
    80209254:	7de080e7          	jalr	2014(ra) # 80208a2e <eunlock>
            eput(entry);
    80209258:	854e                	mv	a0,s3
    8020925a:	00000097          	auipc	ra,0x0
    8020925e:	836080e7          	jalr	-1994(ra) # 80208a90 <eput>
            return NULL;
    80209262:	4a01                	li	s4,0
}
    80209264:	8552                	mv	a0,s4
    80209266:	60a6                	ld	ra,72(sp)
    80209268:	6406                	ld	s0,64(sp)
    8020926a:	74e2                	ld	s1,56(sp)
    8020926c:	7942                	ld	s2,48(sp)
    8020926e:	79a2                	ld	s3,40(sp)
    80209270:	7a02                	ld	s4,32(sp)
    80209272:	6ae2                	ld	s5,24(sp)
    80209274:	6b42                	ld	s6,16(sp)
    80209276:	6ba2                	ld	s7,8(sp)
    80209278:	6c02                	ld	s8,0(sp)
    8020927a:	6161                	addi	sp,sp,80
    8020927c:	8082                	ret
            eunlock(entry);
    8020927e:	854e                	mv	a0,s3
    80209280:	fffff097          	auipc	ra,0xfffff
    80209284:	7ae080e7          	jalr	1966(ra) # 80208a2e <eunlock>
            return entry;
    80209288:	8a4e                	mv	s4,s3
    8020928a:	bfe9                	j	80209264 <lookup_path+0xce>
            eunlock(entry);
    8020928c:	854e                	mv	a0,s3
    8020928e:	fffff097          	auipc	ra,0xfffff
    80209292:	7a0080e7          	jalr	1952(ra) # 80208a2e <eunlock>
            eput(entry);
    80209296:	854e                	mv	a0,s3
    80209298:	fffff097          	auipc	ra,0xfffff
    8020929c:	7f8080e7          	jalr	2040(ra) # 80208a90 <eput>
            return NULL;
    802092a0:	b7d1                	j	80209264 <lookup_path+0xce>
    int len = path - s;
    802092a2:	40b487b3          	sub	a5,s1,a1
    802092a6:	863e                	mv	a2,a5
    802092a8:	2781                	sext.w	a5,a5
    802092aa:	00fbd363          	bge	s7,a5,802092b0 <lookup_path+0x11a>
    802092ae:	8662                	mv	a2,s8
    802092b0:	0006079b          	sext.w	a5,a2
    name[len] = 0;
    802092b4:	97d6                	add	a5,a5,s5
    802092b6:	00078023          	sb	zero,0(a5)
    memmove(name, s, len);
    802092ba:	2601                	sext.w	a2,a2
    802092bc:	8556                	mv	a0,s5
    802092be:	ffffd097          	auipc	ra,0xffffd
    802092c2:	b02080e7          	jalr	-1278(ra) # 80205dc0 <memmove>
    while (*path == '/') {
    802092c6:	0004c783          	lbu	a5,0(s1)
    802092ca:	01279763          	bne	a5,s2,802092d8 <lookup_path+0x142>
        path++;
    802092ce:	0485                	addi	s1,s1,1
    while (*path == '/') {
    802092d0:	0004c783          	lbu	a5,0(s1)
    802092d4:	ff278de3          	beq	a5,s2,802092ce <lookup_path+0x138>
        entry = jumpToLinkDirent(entry);
    802092d8:	8552                	mv	a0,s4
    802092da:	00000097          	auipc	ra,0x0
    802092de:	e4a080e7          	jalr	-438(ra) # 80209124 <jumpToLinkDirent>
    802092e2:	89aa                	mv	s3,a0
        elock(entry);
    802092e4:	fffff097          	auipc	ra,0xfffff
    802092e8:	700080e7          	jalr	1792(ra) # 802089e4 <elock>
        if (!(entry->attribute & ATTR_DIRECTORY)) {
    802092ec:	1009c783          	lbu	a5,256(s3)
    802092f0:	8bc1                	andi	a5,a5,16
    802092f2:	dfb1                	beqz	a5,8020924e <lookup_path+0xb8>
        if (entry->head != NULL) {
    802092f4:	1289b503          	ld	a0,296(s3)
    802092f8:	c11d                	beqz	a0,8020931e <lookup_path+0x188>
            struct dirent* mountDirent = &entry->head->root;
    802092fa:	07050a13          	addi	s4,a0,112
            eunlock(entry);
    802092fe:	854e                	mv	a0,s3
    80209300:	fffff097          	auipc	ra,0xfffff
    80209304:	72e080e7          	jalr	1838(ra) # 80208a2e <eunlock>
            elock(mountDirent);
    80209308:	8552                	mv	a0,s4
    8020930a:	fffff097          	auipc	ra,0xfffff
    8020930e:	6da080e7          	jalr	1754(ra) # 802089e4 <elock>
            entry = edup(mountDirent);
    80209312:	8552                	mv	a0,s4
    80209314:	fffff097          	auipc	ra,0xfffff
    80209318:	446080e7          	jalr	1094(ra) # 8020875a <edup>
    8020931c:	89aa                	mv	s3,a0
        if (parent && *path == '\0') {
    8020931e:	000b0563          	beqz	s6,80209328 <lookup_path+0x192>
    80209322:	0004c783          	lbu	a5,0(s1)
    80209326:	dfa1                	beqz	a5,8020927e <lookup_path+0xe8>
        if ((next = dirlookup(entry, name, 0)) == 0) {
    80209328:	4601                	li	a2,0
    8020932a:	85d6                	mv	a1,s5
    8020932c:	854e                	mv	a0,s3
    8020932e:	00000097          	auipc	ra,0x0
    80209332:	ab6080e7          	jalr	-1354(ra) # 80208de4 <dirlookup>
    80209336:	8a2a                	mv	s4,a0
    80209338:	d931                	beqz	a0,8020928c <lookup_path+0xf6>
        eunlock(entry);
    8020933a:	854e                	mv	a0,s3
    8020933c:	fffff097          	auipc	ra,0xfffff
    80209340:	6f2080e7          	jalr	1778(ra) # 80208a2e <eunlock>
        eput(entry);
    80209344:	854e                	mv	a0,s3
    80209346:	fffff097          	auipc	ra,0xfffff
    8020934a:	74a080e7          	jalr	1866(ra) # 80208a90 <eput>
    while (*path == '/') {
    8020934e:	0004c783          	lbu	a5,0(s1)
    80209352:	05279363          	bne	a5,s2,80209398 <lookup_path+0x202>
        path++;
    80209356:	0485                	addi	s1,s1,1
    while (*path == '/') {
    80209358:	0004c783          	lbu	a5,0(s1)
    8020935c:	ff278de3          	beq	a5,s2,80209356 <lookup_path+0x1c0>
    if (*path == 0) {
    80209360:	cf89                	beqz	a5,8020937a <lookup_path+0x1e4>
        path++;
    80209362:	85a6                	mv	a1,s1
    while (*path != '/' && *path != 0) {
    80209364:	f3278fe3          	beq	a5,s2,802092a2 <lookup_path+0x10c>
    80209368:	df8d                	beqz	a5,802092a2 <lookup_path+0x10c>
        path++;
    8020936a:	0485                	addi	s1,s1,1
    while (*path != '/' && *path != 0) {
    8020936c:	0004c783          	lbu	a5,0(s1)
    80209370:	ff279ce3          	bne	a5,s2,80209368 <lookup_path+0x1d2>
    80209374:	b73d                	j	802092a2 <lookup_path+0x10c>
        return NULL;
    80209376:	4a01                	li	s4,0
    80209378:	b5f5                	j	80209264 <lookup_path+0xce>
    entry = jumpToLinkDirent(entry);
    8020937a:	8552                	mv	a0,s4
    8020937c:	00000097          	auipc	ra,0x0
    80209380:	da8080e7          	jalr	-600(ra) # 80209124 <jumpToLinkDirent>
    80209384:	8a2a                	mv	s4,a0
    if (parent) {
    80209386:	ec0b0fe3          	beqz	s6,80209264 <lookup_path+0xce>
        eput(entry);
    8020938a:	8552                	mv	a0,s4
    8020938c:	fffff097          	auipc	ra,0xfffff
    80209390:	704080e7          	jalr	1796(ra) # 80208a90 <eput>
        return NULL;
    80209394:	4a01                	li	s4,0
    80209396:	b5f9                	j	80209264 <lookup_path+0xce>
    if (*path == 0) {
    80209398:	d3ed                	beqz	a5,8020937a <lookup_path+0x1e4>
    while (*path != '/' && *path != 0) {
    8020939a:	0004c783          	lbu	a5,0(s1)
    8020939e:	85a6                	mv	a1,s1
    802093a0:	b7e1                	j	80209368 <lookup_path+0x1d2>

00000000802093a2 <enameparent>:

struct dirent* enameparent(int fd, char* path, char* name) {
    802093a2:	1141                	addi	sp,sp,-16
    802093a4:	e406                	sd	ra,8(sp)
    802093a6:	e022                	sd	s0,0(sp)
    802093a8:	0800                	addi	s0,sp,16
    802093aa:	86b2                	mv	a3,a2
    return lookup_path(fd, path, 1, name);
    802093ac:	4605                	li	a2,1
    802093ae:	00000097          	auipc	ra,0x0
    802093b2:	de8080e7          	jalr	-536(ra) # 80209196 <lookup_path>
}
    802093b6:	60a2                	ld	ra,8(sp)
    802093b8:	6402                	ld	s0,0(sp)
    802093ba:	0141                	addi	sp,sp,16
    802093bc:	8082                	ret

00000000802093be <create>:
struct dirent* create(int fd, char* path, short type, int mode) {
    802093be:	7169                	addi	sp,sp,-304
    802093c0:	f606                	sd	ra,296(sp)
    802093c2:	f222                	sd	s0,288(sp)
    802093c4:	ee26                	sd	s1,280(sp)
    802093c6:	ea4a                	sd	s2,272(sp)
    802093c8:	e64e                	sd	s3,264(sp)
    802093ca:	1a00                	addi	s0,sp,304
    802093cc:	89b2                	mv	s3,a2
    if ((dp = enameparent(fd, path, name)) == NULL) {
    802093ce:	ed040613          	addi	a2,s0,-304
    802093d2:	00000097          	auipc	ra,0x0
    802093d6:	fd0080e7          	jalr	-48(ra) # 802093a2 <enameparent>
    802093da:	84aa                	mv	s1,a0
    802093dc:	c541                	beqz	a0,80209464 <create+0xa6>
    if (type == T_DIR) {
    802093de:	0009879b          	sext.w	a5,s3
    802093e2:	4705                	li	a4,1
    802093e4:	08e78263          	beq	a5,a4,80209468 <create+0xaa>
    elock(dp);
    802093e8:	fffff097          	auipc	ra,0xfffff
    802093ec:	5fc080e7          	jalr	1532(ra) # 802089e4 <elock>
    }  else if (type == T_LINK) {
    802093f0:	ffc98613          	addi	a2,s3,-4
    802093f4:	00163613          	seqz	a2,a2
    if ((ep = ealloc(dp, name, mode)) == NULL) {
    802093f8:	0066161b          	slliw	a2,a2,0x6
    802093fc:	ed040593          	addi	a1,s0,-304
    80209400:	8526                	mv	a0,s1
    80209402:	00000097          	auipc	ra,0x0
    80209406:	b50080e7          	jalr	-1200(ra) # 80208f52 <ealloc>
    8020940a:	892a                	mv	s2,a0
    8020940c:	c121                	beqz	a0,8020944c <create+0x8e>
    if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
    8020940e:	2981                	sext.w	s3,s3
    80209410:	4789                	li	a5,2
    80209412:	00f99663          	bne	s3,a5,8020941e <create+0x60>
        (type == T_FILE && (ep->attribute & ATTR_DIRECTORY))) {
    80209416:	10054783          	lbu	a5,256(a0)
    8020941a:	8bc1                	andi	a5,a5,16
    8020941c:	eba5                	bnez	a5,8020948c <create+0xce>
    eunlock(dp);
    8020941e:	8526                	mv	a0,s1
    80209420:	fffff097          	auipc	ra,0xfffff
    80209424:	60e080e7          	jalr	1550(ra) # 80208a2e <eunlock>
    eput(dp);
    80209428:	8526                	mv	a0,s1
    8020942a:	fffff097          	auipc	ra,0xfffff
    8020942e:	666080e7          	jalr	1638(ra) # 80208a90 <eput>
    elock(ep);
    80209432:	854a                	mv	a0,s2
    80209434:	fffff097          	auipc	ra,0xfffff
    80209438:	5b0080e7          	jalr	1456(ra) # 802089e4 <elock>
}
    8020943c:	854a                	mv	a0,s2
    8020943e:	70b2                	ld	ra,296(sp)
    80209440:	7412                	ld	s0,288(sp)
    80209442:	64f2                	ld	s1,280(sp)
    80209444:	6952                	ld	s2,272(sp)
    80209446:	69b2                	ld	s3,264(sp)
    80209448:	6155                	addi	sp,sp,304
    8020944a:	8082                	ret
        eunlock(dp);
    8020944c:	8526                	mv	a0,s1
    8020944e:	fffff097          	auipc	ra,0xfffff
    80209452:	5e0080e7          	jalr	1504(ra) # 80208a2e <eunlock>
        eput(dp);
    80209456:	8526                	mv	a0,s1
    80209458:	fffff097          	auipc	ra,0xfffff
    8020945c:	638080e7          	jalr	1592(ra) # 80208a90 <eput>
        return NULL;
    80209460:	4901                	li	s2,0
    80209462:	bfe9                	j	8020943c <create+0x7e>
        return NULL;
    80209464:	892a                	mv	s2,a0
    80209466:	bfd9                	j	8020943c <create+0x7e>
    elock(dp);
    80209468:	fffff097          	auipc	ra,0xfffff
    8020946c:	57c080e7          	jalr	1404(ra) # 802089e4 <elock>
    if ((ep = ealloc(dp, name, mode)) == NULL) {
    80209470:	4641                	li	a2,16
    80209472:	ed040593          	addi	a1,s0,-304
    80209476:	8526                	mv	a0,s1
    80209478:	00000097          	auipc	ra,0x0
    8020947c:	ada080e7          	jalr	-1318(ra) # 80208f52 <ealloc>
    80209480:	892a                	mv	s2,a0
    80209482:	d569                	beqz	a0,8020944c <create+0x8e>
    if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
    80209484:	10094783          	lbu	a5,256(s2)
    80209488:	8bc1                	andi	a5,a5,16
    8020948a:	fbd1                	bnez	a5,8020941e <create+0x60>
        eunlock(dp);
    8020948c:	8526                	mv	a0,s1
    8020948e:	fffff097          	auipc	ra,0xfffff
    80209492:	5a0080e7          	jalr	1440(ra) # 80208a2e <eunlock>
        eput(ep);
    80209496:	854a                	mv	a0,s2
    80209498:	fffff097          	auipc	ra,0xfffff
    8020949c:	5f8080e7          	jalr	1528(ra) # 80208a90 <eput>
        eput(dp);
    802094a0:	8526                	mv	a0,s1
    802094a2:	fffff097          	auipc	ra,0xfffff
    802094a6:	5ee080e7          	jalr	1518(ra) # 80208a90 <eput>
        return NULL;
    802094aa:	4901                	li	s2,0
    802094ac:	bf41                	j	8020943c <create+0x7e>

00000000802094ae <fileinit>:
struct {
    struct Spinlock lock;
    struct file file[NFILE];
} ftable;

void fileinit(void) {
    802094ae:	1101                	addi	sp,sp,-32
    802094b0:	ec06                	sd	ra,24(sp)
    802094b2:	e822                	sd	s0,16(sp)
    802094b4:	e426                	sd	s1,8(sp)
    802094b6:	e04a                	sd	s2,0(sp)
    802094b8:	1000                	addi	s0,sp,32
    initLock(&ftable.lock, "ftable");
    802094ba:	00004597          	auipc	a1,0x4
    802094be:	c0e58593          	addi	a1,a1,-1010 # 8020d0c8 <__func__.0+0x18>
    802094c2:	00410517          	auipc	a0,0x410
    802094c6:	bb650513          	addi	a0,a0,-1098 # 80619078 <ftable>
    802094ca:	ffffc097          	auipc	ra,0xffffc
    802094ce:	59a080e7          	jalr	1434(ra) # 80205a64 <initLock>
    struct file* f;
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
    802094d2:	00410497          	auipc	s1,0x410
    802094d6:	bbe48493          	addi	s1,s1,-1090 # 80619090 <ftable+0x18>
    802094da:	00410917          	auipc	s2,0x410
    802094de:	5b690913          	addi	s2,s2,1462 # 80619a90 <test_content_to_read>
        memset(f, 0, sizeof(struct file));
    802094e2:	02800613          	li	a2,40
    802094e6:	4581                	li	a1,0
    802094e8:	8526                	mv	a0,s1
    802094ea:	ffffd097          	auipc	ra,0xffffd
    802094ee:	87a080e7          	jalr	-1926(ra) # 80205d64 <memset>
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
    802094f2:	02848493          	addi	s1,s1,40
    802094f6:	ff2496e3          	bne	s1,s2,802094e2 <fileinit+0x34>
    }
}
    802094fa:	60e2                	ld	ra,24(sp)
    802094fc:	6442                	ld	s0,16(sp)
    802094fe:	64a2                	ld	s1,8(sp)
    80209500:	6902                	ld	s2,0(sp)
    80209502:	6105                	addi	sp,sp,32
    80209504:	8082                	ret

0000000080209506 <filealloc>:

// Allocate a file structure.
struct file* filealloc(void) {
    80209506:	1101                	addi	sp,sp,-32
    80209508:	ec06                	sd	ra,24(sp)
    8020950a:	e822                	sd	s0,16(sp)
    8020950c:	e426                	sd	s1,8(sp)
    8020950e:	1000                	addi	s0,sp,32
    struct file* f;

    acquireLock(&ftable.lock);
    80209510:	00410517          	auipc	a0,0x410
    80209514:	b6850513          	addi	a0,a0,-1176 # 80619078 <ftable>
    80209518:	ffffc097          	auipc	ra,0xffffc
    8020951c:	596080e7          	jalr	1430(ra) # 80205aae <acquireLock>
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
    80209520:	00410497          	auipc	s1,0x410
    80209524:	b7048493          	addi	s1,s1,-1168 # 80619090 <ftable+0x18>
    80209528:	00410717          	auipc	a4,0x410
    8020952c:	56870713          	addi	a4,a4,1384 # 80619a90 <test_content_to_read>
        if (f->ref == 0) {
    80209530:	40dc                	lw	a5,4(s1)
    80209532:	cf99                	beqz	a5,80209550 <filealloc+0x4a>
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
    80209534:	02848493          	addi	s1,s1,40
    80209538:	fee49ce3          	bne	s1,a4,80209530 <filealloc+0x2a>
            f->ref = 1;
            releaseLock(&ftable.lock);
            return f;
        }
    }
    releaseLock(&ftable.lock);
    8020953c:	00410517          	auipc	a0,0x410
    80209540:	b3c50513          	addi	a0,a0,-1220 # 80619078 <ftable>
    80209544:	ffffc097          	auipc	ra,0xffffc
    80209548:	5e6080e7          	jalr	1510(ra) # 80205b2a <releaseLock>
    return NULL;
    8020954c:	4481                	li	s1,0
    8020954e:	a819                	j	80209564 <filealloc+0x5e>
            f->ref = 1;
    80209550:	4785                	li	a5,1
    80209552:	c0dc                	sw	a5,4(s1)
            releaseLock(&ftable.lock);
    80209554:	00410517          	auipc	a0,0x410
    80209558:	b2450513          	addi	a0,a0,-1244 # 80619078 <ftable>
    8020955c:	ffffc097          	auipc	ra,0xffffc
    80209560:	5ce080e7          	jalr	1486(ra) # 80205b2a <releaseLock>
}
    80209564:	8526                	mv	a0,s1
    80209566:	60e2                	ld	ra,24(sp)
    80209568:	6442                	ld	s0,16(sp)
    8020956a:	64a2                	ld	s1,8(sp)
    8020956c:	6105                	addi	sp,sp,32
    8020956e:	8082                	ret

0000000080209570 <filedup>:

// Increment ref count for file f.
struct file* filedup(struct file* f) {
    80209570:	1101                	addi	sp,sp,-32
    80209572:	ec06                	sd	ra,24(sp)
    80209574:	e822                	sd	s0,16(sp)
    80209576:	e426                	sd	s1,8(sp)
    80209578:	1000                	addi	s0,sp,32
    8020957a:	84aa                	mv	s1,a0
    acquireLock(&ftable.lock);
    8020957c:	00410517          	auipc	a0,0x410
    80209580:	afc50513          	addi	a0,a0,-1284 # 80619078 <ftable>
    80209584:	ffffc097          	auipc	ra,0xffffc
    80209588:	52a080e7          	jalr	1322(ra) # 80205aae <acquireLock>
    if (f->ref < 1)
    8020958c:	40dc                	lw	a5,4(s1)
    8020958e:	02f05263          	blez	a5,802095b2 <filedup+0x42>
        panic("filedup");
    f->ref++;
    80209592:	2785                	addiw	a5,a5,1
    80209594:	c0dc                	sw	a5,4(s1)
    releaseLock(&ftable.lock);
    80209596:	00410517          	auipc	a0,0x410
    8020959a:	ae250513          	addi	a0,a0,-1310 # 80619078 <ftable>
    8020959e:	ffffc097          	auipc	ra,0xffffc
    802095a2:	58c080e7          	jalr	1420(ra) # 80205b2a <releaseLock>
    return f;
}
    802095a6:	8526                	mv	a0,s1
    802095a8:	60e2                	ld	ra,24(sp)
    802095aa:	6442                	ld	s0,16(sp)
    802095ac:	64a2                	ld	s1,8(sp)
    802095ae:	6105                	addi	sp,sp,32
    802095b0:	8082                	ret
        panic("filedup");
    802095b2:	00004697          	auipc	a3,0x4
    802095b6:	b1e68693          	addi	a3,a3,-1250 # 8020d0d0 <__func__.0+0x20>
    802095ba:	00004617          	auipc	a2,0x4
    802095be:	d0e60613          	addi	a2,a2,-754 # 8020d2c8 <__func__.3>
    802095c2:	03000593          	li	a1,48
    802095c6:	00004517          	auipc	a0,0x4
    802095ca:	b1250513          	addi	a0,a0,-1262 # 8020d0d8 <__func__.0+0x28>
    802095ce:	ffff7097          	auipc	ra,0xffff7
    802095d2:	57e080e7          	jalr	1406(ra) # 80200b4c <_panic_>

00000000802095d6 <fileclose>:

// Close file f.  (Decrement ref count, close when reaches 0.)
void fileclose(struct file* f) {
    802095d6:	7139                	addi	sp,sp,-64
    802095d8:	fc06                	sd	ra,56(sp)
    802095da:	f822                	sd	s0,48(sp)
    802095dc:	f426                	sd	s1,40(sp)
    802095de:	f04a                	sd	s2,32(sp)
    802095e0:	ec4e                	sd	s3,24(sp)
    802095e2:	e852                	sd	s4,16(sp)
    802095e4:	e456                	sd	s5,8(sp)
    802095e6:	0080                	addi	s0,sp,64
    802095e8:	84aa                	mv	s1,a0
    struct file ff;

    // printf("[FILE CLOSE]%x %x\n", f, f->ref);
    acquireLock(&ftable.lock);
    802095ea:	00410517          	auipc	a0,0x410
    802095ee:	a8e50513          	addi	a0,a0,-1394 # 80619078 <ftable>
    802095f2:	ffffc097          	auipc	ra,0xffffc
    802095f6:	4bc080e7          	jalr	1212(ra) # 80205aae <acquireLock>
    if (f->ref < 1)
    802095fa:	40dc                	lw	a5,4(s1)
    802095fc:	04f05863          	blez	a5,8020964c <fileclose+0x76>
        panic("fileclose");
    if (--f->ref > 0) {
    80209600:	37fd                	addiw	a5,a5,-1
    80209602:	0007871b          	sext.w	a4,a5
    80209606:	c0dc                	sw	a5,4(s1)
    80209608:	06e04463          	bgtz	a4,80209670 <fileclose+0x9a>
        releaseLock(&ftable.lock);
        return;
    }
    ff = *f;
    8020960c:	0004a903          	lw	s2,0(s1)
    80209610:	0094ca03          	lbu	s4,9(s1)
    80209614:	0104b983          	ld	s3,16(s1)
    80209618:	0184ba83          	ld	s5,24(s1)
    f->ref = 0;
    8020961c:	0004a223          	sw	zero,4(s1)
    f->type = FD_NONE;
    80209620:	0004a023          	sw	zero,0(s1)
    releaseLock(&ftable.lock);
    80209624:	00410517          	auipc	a0,0x410
    80209628:	a5450513          	addi	a0,a0,-1452 # 80619078 <ftable>
    8020962c:	ffffc097          	auipc	ra,0xffffc
    80209630:	4fe080e7          	jalr	1278(ra) # 80205b2a <releaseLock>

    // printf("FILECLOSE %x\n", ff.type);
    if (ff.type == FD_PIPE) {
    80209634:	4785                	li	a5,1
    80209636:	04f90e63          	beq	s2,a5,80209692 <fileclose+0xbc>
        pipeclose(ff.pipe, ff.writable);
    } else if (ff.type == FD_ENTRY) {
    8020963a:	4789                	li	a5,2
    8020963c:	04f91263          	bne	s2,a5,80209680 <fileclose+0xaa>
        eput(ff.ep);
    80209640:	8556                	mv	a0,s5
    80209642:	fffff097          	auipc	ra,0xfffff
    80209646:	44e080e7          	jalr	1102(ra) # 80208a90 <eput>
    8020964a:	a81d                	j	80209680 <fileclose+0xaa>
        panic("fileclose");
    8020964c:	00004697          	auipc	a3,0x4
    80209650:	a9468693          	addi	a3,a3,-1388 # 8020d0e0 <__func__.0+0x30>
    80209654:	00004617          	auipc	a2,0x4
    80209658:	abc60613          	addi	a2,a2,-1348 # 8020d110 <__func__.2>
    8020965c:	03d00593          	li	a1,61
    80209660:	00004517          	auipc	a0,0x4
    80209664:	a7850513          	addi	a0,a0,-1416 # 8020d0d8 <__func__.0+0x28>
    80209668:	ffff7097          	auipc	ra,0xffff7
    8020966c:	4e4080e7          	jalr	1252(ra) # 80200b4c <_panic_>
        releaseLock(&ftable.lock);
    80209670:	00410517          	auipc	a0,0x410
    80209674:	a0850513          	addi	a0,a0,-1528 # 80619078 <ftable>
    80209678:	ffffc097          	auipc	ra,0xffffc
    8020967c:	4b2080e7          	jalr	1202(ra) # 80205b2a <releaseLock>
    } else if (ff.type == FD_DEVICE) {
    }
}
    80209680:	70e2                	ld	ra,56(sp)
    80209682:	7442                	ld	s0,48(sp)
    80209684:	74a2                	ld	s1,40(sp)
    80209686:	7902                	ld	s2,32(sp)
    80209688:	69e2                	ld	s3,24(sp)
    8020968a:	6a42                	ld	s4,16(sp)
    8020968c:	6aa2                	ld	s5,8(sp)
    8020968e:	6121                	addi	sp,sp,64
    80209690:	8082                	ret
        pipeclose(ff.pipe, ff.writable);
    80209692:	85d2                	mv	a1,s4
    80209694:	854e                	mv	a0,s3
    80209696:	00000097          	auipc	ra,0x0
    8020969a:	454080e7          	jalr	1108(ra) # 80209aea <pipeclose>
    8020969e:	b7cd                	j	80209680 <fileclose+0xaa>

00000000802096a0 <filestat>:

// Get metadata about file f.
// addr is a user virtual address, pointing to a struct stat.
int filestat(struct file* f, u64 addr) {
    802096a0:	7171                	addi	sp,sp,-176
    802096a2:	f506                	sd	ra,168(sp)
    802096a4:	f122                	sd	s0,160(sp)
    802096a6:	ed26                	sd	s1,152(sp)
    802096a8:	e94a                	sd	s2,144(sp)
    802096aa:	e54e                	sd	s3,136(sp)
    802096ac:	1900                	addi	s0,sp,176
    802096ae:	84aa                	mv	s1,a0
    802096b0:	89ae                	mv	s3,a1
    struct Process *p = myproc();
    802096b2:	ffff9097          	auipc	ra,0xffff9
    802096b6:	2fe080e7          	jalr	766(ra) # 802029b0 <myproc>
    struct stat st;

    if (f->type == FD_ENTRY) {
    802096ba:	4098                	lw	a4,0(s1)
    802096bc:	4789                	li	a5,2
    802096be:	04f71863          	bne	a4,a5,8020970e <filestat+0x6e>
    802096c2:	892a                	mv	s2,a0
        elock(f->ep);
    802096c4:	6c88                	ld	a0,24(s1)
    802096c6:	fffff097          	auipc	ra,0xfffff
    802096ca:	31e080e7          	jalr	798(ra) # 802089e4 <elock>
        estat(f->ep, &st);
    802096ce:	f5040593          	addi	a1,s0,-176
    802096d2:	6c88                	ld	a0,24(s1)
    802096d4:	fffff097          	auipc	ra,0xfffff
    802096d8:	4c8080e7          	jalr	1224(ra) # 80208b9c <estat>
        eunlock(f->ep);
    802096dc:	6c88                	ld	a0,24(s1)
    802096de:	fffff097          	auipc	ra,0xfffff
    802096e2:	350080e7          	jalr	848(ra) # 80208a2e <eunlock>
        if(copyout(p->pgdir, addr, (char *)&st, sizeof(st)) < 0)
    802096e6:	08000693          	li	a3,128
    802096ea:	f5040613          	addi	a2,s0,-176
    802096ee:	85ce                	mv	a1,s3
    802096f0:	16893503          	ld	a0,360(s2)
    802096f4:	ffff9097          	auipc	ra,0xffff9
    802096f8:	cba080e7          	jalr	-838(ra) # 802023ae <copyout>
    802096fc:	41f5551b          	sraiw	a0,a0,0x1f
            return -1;
        return 0;
    }
    return -1;
}
    80209700:	70aa                	ld	ra,168(sp)
    80209702:	740a                	ld	s0,160(sp)
    80209704:	64ea                	ld	s1,152(sp)
    80209706:	694a                	ld	s2,144(sp)
    80209708:	69aa                	ld	s3,136(sp)
    8020970a:	614d                	addi	sp,sp,176
    8020970c:	8082                	ret
    return -1;
    8020970e:	557d                	li	a0,-1
    80209710:	bfc5                	j	80209700 <filestat+0x60>

0000000080209712 <fileread>:

// Read from file f.
// addr is a user virtual address.
int fileread(struct file* f, u64 addr, int n) {
    80209712:	7179                	addi	sp,sp,-48
    80209714:	f406                	sd	ra,40(sp)
    80209716:	f022                	sd	s0,32(sp)
    80209718:	ec26                	sd	s1,24(sp)
    8020971a:	e84a                	sd	s2,16(sp)
    8020971c:	e44e                	sd	s3,8(sp)
    8020971e:	1800                	addi	s0,sp,48
    int r = 0;

    if (f->readable == 0)
    80209720:	00854783          	lbu	a5,8(a0)
    80209724:	cfd5                	beqz	a5,802097e0 <fileread+0xce>
    80209726:	84aa                	mv	s1,a0
    80209728:	89ae                	mv	s3,a1
    8020972a:	8932                	mv	s2,a2
        return -1;

    switch (f->type) {
    8020972c:	411c                	lw	a5,0(a0)
    8020972e:	4709                	li	a4,2
    80209730:	06e78e63          	beq	a5,a4,802097ac <fileread+0x9a>
    80209734:	470d                	li	a4,3
    80209736:	04e78563          	beq	a5,a4,80209780 <fileread+0x6e>
    8020973a:	4705                	li	a4,1
    8020973c:	02e78463          	beq	a5,a4,80209764 <fileread+0x52>
            if ((r = eread(f->ep, 1, addr, f->off, n)) > 0)
                f->off += r;
            eunlock(f->ep);
            break;
        default:
            panic("fileread");
    80209740:	00004697          	auipc	a3,0x4
    80209744:	9b068693          	addi	a3,a3,-1616 # 8020d0f0 <__func__.0+0x40>
    80209748:	00004617          	auipc	a2,0x4
    8020974c:	9d860613          	addi	a2,a2,-1576 # 8020d120 <__func__.1>
    80209750:	07900593          	li	a1,121
    80209754:	00004517          	auipc	a0,0x4
    80209758:	98450513          	addi	a0,a0,-1660 # 8020d0d8 <__func__.0+0x28>
    8020975c:	ffff7097          	auipc	ra,0xffff7
    80209760:	3f0080e7          	jalr	1008(ra) # 80200b4c <_panic_>
            r = piperead(f->pipe, addr, n);
    80209764:	6908                	ld	a0,16(a0)
    80209766:	00000097          	auipc	ra,0x0
    8020976a:	4fe080e7          	jalr	1278(ra) # 80209c64 <piperead>
    8020976e:	892a                	mv	s2,a0
    }

    return r;
}
    80209770:	854a                	mv	a0,s2
    80209772:	70a2                	ld	ra,40(sp)
    80209774:	7402                	ld	s0,32(sp)
    80209776:	64e2                	ld	s1,24(sp)
    80209778:	6942                	ld	s2,16(sp)
    8020977a:	69a2                	ld	s3,8(sp)
    8020977c:	6145                	addi	sp,sp,48
    8020977e:	8082                	ret
            if (f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
    80209780:	02451783          	lh	a5,36(a0)
    80209784:	03079693          	slli	a3,a5,0x30
    80209788:	92c1                	srli	a3,a3,0x30
    8020978a:	470d                	li	a4,3
    8020978c:	04d76c63          	bltu	a4,a3,802097e4 <fileread+0xd2>
    80209790:	0792                	slli	a5,a5,0x4
    80209792:	00410717          	auipc	a4,0x410
    80209796:	8a670713          	addi	a4,a4,-1882 # 80619038 <devsw>
    8020979a:	97ba                	add	a5,a5,a4
    8020979c:	639c                	ld	a5,0(a5)
    8020979e:	c7a9                	beqz	a5,802097e8 <fileread+0xd6>
            r = devsw[f->major].read(1, addr, 0, n);
    802097a0:	86b2                	mv	a3,a2
    802097a2:	4601                	li	a2,0
    802097a4:	4505                	li	a0,1
    802097a6:	9782                	jalr	a5
    802097a8:	892a                	mv	s2,a0
            break;
    802097aa:	b7d9                	j	80209770 <fileread+0x5e>
            elock(f->ep);
    802097ac:	6d08                	ld	a0,24(a0)
    802097ae:	fffff097          	auipc	ra,0xfffff
    802097b2:	236080e7          	jalr	566(ra) # 802089e4 <elock>
            if ((r = eread(f->ep, 1, addr, f->off, n)) > 0)
    802097b6:	874a                	mv	a4,s2
    802097b8:	5094                	lw	a3,32(s1)
    802097ba:	864e                	mv	a2,s3
    802097bc:	4585                	li	a1,1
    802097be:	6c88                	ld	a0,24(s1)
    802097c0:	fffff097          	auipc	ra,0xfffff
    802097c4:	896080e7          	jalr	-1898(ra) # 80208056 <eread>
    802097c8:	892a                	mv	s2,a0
    802097ca:	00a05563          	blez	a0,802097d4 <fileread+0xc2>
                f->off += r;
    802097ce:	509c                	lw	a5,32(s1)
    802097d0:	9fa9                	addw	a5,a5,a0
    802097d2:	d09c                	sw	a5,32(s1)
            eunlock(f->ep);
    802097d4:	6c88                	ld	a0,24(s1)
    802097d6:	fffff097          	auipc	ra,0xfffff
    802097da:	258080e7          	jalr	600(ra) # 80208a2e <eunlock>
            break;
    802097de:	bf49                	j	80209770 <fileread+0x5e>
        return -1;
    802097e0:	597d                	li	s2,-1
    802097e2:	b779                	j	80209770 <fileread+0x5e>
                return -1;
    802097e4:	597d                	li	s2,-1
    802097e6:	b769                	j	80209770 <fileread+0x5e>
    802097e8:	597d                	li	s2,-1
    802097ea:	b759                	j	80209770 <fileread+0x5e>

00000000802097ec <filewrite>:

// Write to file f.
// addr is a user virtual address.
int filewrite(struct file* f, u64 addr, int n) {
    802097ec:	7179                	addi	sp,sp,-48
    802097ee:	f406                	sd	ra,40(sp)
    802097f0:	f022                	sd	s0,32(sp)
    802097f2:	ec26                	sd	s1,24(sp)
    802097f4:	e84a                	sd	s2,16(sp)
    802097f6:	e44e                	sd	s3,8(sp)
    802097f8:	e052                	sd	s4,0(sp)
    802097fa:	1800                	addi	s0,sp,48
    int ret = 0;

    if (f->writable == 0)
    802097fc:	00954783          	lbu	a5,9(a0)
    80209800:	c3fd                	beqz	a5,802098e6 <filewrite+0xfa>
    80209802:	84aa                	mv	s1,a0
    80209804:	892e                	mv	s2,a1
    80209806:	89b2                	mv	s3,a2
        return -1;

    if (f->type == FD_PIPE) {
    80209808:	411c                	lw	a5,0(a0)
    8020980a:	4705                	li	a4,1
    8020980c:	04e78963          	beq	a5,a4,8020985e <filewrite+0x72>
        ret = pipewrite(f->pipe, addr, n);
        assert(ret != 0);
    } else if (f->type == FD_DEVICE) {
    80209810:	470d                	li	a4,3
    80209812:	06e78d63          	beq	a5,a4,8020988c <filewrite+0xa0>
        if (f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
            return -1;
        ret = devsw[f->major].write(1, addr, 0, n);
    } else if (f->type == FD_ENTRY) {
    80209816:	4709                	li	a4,2
    80209818:	0ae79563          	bne	a5,a4,802098c2 <filewrite+0xd6>
        elock(f->ep);
    8020981c:	6d08                	ld	a0,24(a0)
    8020981e:	fffff097          	auipc	ra,0xfffff
    80209822:	1c6080e7          	jalr	454(ra) # 802089e4 <elock>
        if (ewrite(f->ep, 1, addr, f->off, n) == n) {
    80209826:	00098a1b          	sext.w	s4,s3
    8020982a:	8752                	mv	a4,s4
    8020982c:	5094                	lw	a3,32(s1)
    8020982e:	864a                	mv	a2,s2
    80209830:	4585                	li	a1,1
    80209832:	6c88                	ld	a0,24(s1)
    80209834:	fffff097          	auipc	ra,0xfffff
    80209838:	91a080e7          	jalr	-1766(ra) # 8020814e <ewrite>
            ret = n;
            f->off += n;
        } else {
            ret = -1;
    8020983c:	597d                	li	s2,-1
        if (ewrite(f->ep, 1, addr, f->off, n) == n) {
    8020983e:	07350c63          	beq	a0,s3,802098b6 <filewrite+0xca>
        }
        eunlock(f->ep);
    80209842:	6c88                	ld	a0,24(s1)
    80209844:	fffff097          	auipc	ra,0xfffff
    80209848:	1ea080e7          	jalr	490(ra) # 80208a2e <eunlock>
    } else {
        panic("filewrite");
    }

    return ret;
}
    8020984c:	854a                	mv	a0,s2
    8020984e:	70a2                	ld	ra,40(sp)
    80209850:	7402                	ld	s0,32(sp)
    80209852:	64e2                	ld	s1,24(sp)
    80209854:	6942                	ld	s2,16(sp)
    80209856:	69a2                	ld	s3,8(sp)
    80209858:	6a02                	ld	s4,0(sp)
    8020985a:	6145                	addi	sp,sp,48
    8020985c:	8082                	ret
        ret = pipewrite(f->pipe, addr, n);
    8020985e:	6908                	ld	a0,16(a0)
    80209860:	00000097          	auipc	ra,0x0
    80209864:	316080e7          	jalr	790(ra) # 80209b76 <pipewrite>
    80209868:	892a                	mv	s2,a0
        assert(ret != 0);
    8020986a:	00a036b3          	snez	a3,a0
    8020986e:	00004617          	auipc	a2,0x4
    80209872:	8c260613          	addi	a2,a2,-1854 # 8020d130 <__func__.0>
    80209876:	08900593          	li	a1,137
    8020987a:	00004517          	auipc	a0,0x4
    8020987e:	85e50513          	addi	a0,a0,-1954 # 8020d0d8 <__func__.0+0x28>
    80209882:	ffff7097          	auipc	ra,0xffff7
    80209886:	340080e7          	jalr	832(ra) # 80200bc2 <_assert_>
    8020988a:	b7c9                	j	8020984c <filewrite+0x60>
        if (f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
    8020988c:	02451783          	lh	a5,36(a0)
    80209890:	03079693          	slli	a3,a5,0x30
    80209894:	92c1                	srli	a3,a3,0x30
    80209896:	04d76a63          	bltu	a4,a3,802098ea <filewrite+0xfe>
    8020989a:	0792                	slli	a5,a5,0x4
    8020989c:	0040f717          	auipc	a4,0x40f
    802098a0:	79c70713          	addi	a4,a4,1948 # 80619038 <devsw>
    802098a4:	97ba                	add	a5,a5,a4
    802098a6:	679c                	ld	a5,8(a5)
    802098a8:	c3b9                	beqz	a5,802098ee <filewrite+0x102>
        ret = devsw[f->major].write(1, addr, 0, n);
    802098aa:	86b2                	mv	a3,a2
    802098ac:	4601                	li	a2,0
    802098ae:	4505                	li	a0,1
    802098b0:	9782                	jalr	a5
    802098b2:	892a                	mv	s2,a0
    802098b4:	bf61                	j	8020984c <filewrite+0x60>
            f->off += n;
    802098b6:	509c                	lw	a5,32(s1)
    802098b8:	014787bb          	addw	a5,a5,s4
    802098bc:	d09c                	sw	a5,32(s1)
            ret = n;
    802098be:	894e                	mv	s2,s3
    802098c0:	b749                	j	80209842 <filewrite+0x56>
        panic("filewrite");
    802098c2:	00004697          	auipc	a3,0x4
    802098c6:	83e68693          	addi	a3,a3,-1986 # 8020d100 <__func__.0+0x50>
    802098ca:	00004617          	auipc	a2,0x4
    802098ce:	86660613          	addi	a2,a2,-1946 # 8020d130 <__func__.0>
    802098d2:	09800593          	li	a1,152
    802098d6:	00004517          	auipc	a0,0x4
    802098da:	80250513          	addi	a0,a0,-2046 # 8020d0d8 <__func__.0+0x28>
    802098de:	ffff7097          	auipc	ra,0xffff7
    802098e2:	26e080e7          	jalr	622(ra) # 80200b4c <_panic_>
        return -1;
    802098e6:	597d                	li	s2,-1
    802098e8:	b795                	j	8020984c <filewrite+0x60>
            return -1;
    802098ea:	597d                	li	s2,-1
    802098ec:	b785                	j	8020984c <filewrite+0x60>
    802098ee:	597d                	li	s2,-1
    802098f0:	bfb1                	j	8020984c <filewrite+0x60>

00000000802098f2 <dirnext>:

// Read from dir f.
// addr is a user virtual address.
int dirnext(struct file* f, u64 addr) {
    802098f2:	dd010113          	addi	sp,sp,-560
    802098f6:	22113423          	sd	ra,552(sp)
    802098fa:	22813023          	sd	s0,544(sp)
    802098fe:	20913c23          	sd	s1,536(sp)
    80209902:	21213823          	sd	s2,528(sp)
    80209906:	21313423          	sd	s3,520(sp)
    8020990a:	21413023          	sd	s4,512(sp)
    8020990e:	1c00                	addi	s0,sp,560
    80209910:	84aa                	mv	s1,a0
    80209912:	8a2e                	mv	s4,a1
    struct Process* p = myproc();
    80209914:	ffff9097          	auipc	ra,0xffff9
    80209918:	09c080e7          	jalr	156(ra) # 802029b0 <myproc>

    if (f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    8020991c:	0084c783          	lbu	a5,8(s1)
    80209920:	cfc1                	beqz	a5,802099b8 <dirnext+0xc6>
    80209922:	89aa                	mv	s3,a0
    80209924:	6c98                	ld	a4,24(s1)
    80209926:	10074783          	lbu	a5,256(a4)
    8020992a:	8bc1                	andi	a5,a5,16
        return -1;
    8020992c:	557d                	li	a0,-1
    if (f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
    8020992e:	c7d1                	beqz	a5,802099ba <dirnext+0xc8>

    struct dirent de;
    struct stat st;
    int count = 0;
    80209930:	dc042e23          	sw	zero,-548(s0)
    int ret;
    elock(f->ep);
    80209934:	853a                	mv	a0,a4
    80209936:	fffff097          	auipc	ra,0xfffff
    8020993a:	0ae080e7          	jalr	174(ra) # 802089e4 <elock>
    while ((ret = enext(f->ep, &de, f->off, &count)) ==
    8020993e:	a801                	j	8020994e <dirnext+0x5c>
           0) {  // skip empty entry
        f->off += count * 32;
    80209940:	ddc42783          	lw	a5,-548(s0)
    80209944:	0057979b          	slliw	a5,a5,0x5
    80209948:	5098                	lw	a4,32(s1)
    8020994a:	9fb9                	addw	a5,a5,a4
    8020994c:	d09c                	sw	a5,32(s1)
    while ((ret = enext(f->ep, &de, f->off, &count)) ==
    8020994e:	ddc40693          	addi	a3,s0,-548
    80209952:	5090                	lw	a2,32(s1)
    80209954:	e6040593          	addi	a1,s0,-416
    80209958:	6c88                	ld	a0,24(s1)
    8020995a:	fffff097          	auipc	ra,0xfffff
    8020995e:	2b4080e7          	jalr	692(ra) # 80208c0e <enext>
    80209962:	892a                	mv	s2,a0
    80209964:	dd71                	beqz	a0,80209940 <dirnext+0x4e>
    }
    eunlock(f->ep);
    80209966:	6c88                	ld	a0,24(s1)
    80209968:	fffff097          	auipc	ra,0xfffff
    8020996c:	0c6080e7          	jalr	198(ra) # 80208a2e <eunlock>
    if (ret == -1)
    80209970:	57fd                	li	a5,-1
        return 0;
    80209972:	4501                	li	a0,0
    if (ret == -1)
    80209974:	04f90363          	beq	s2,a5,802099ba <dirnext+0xc8>

    f->off += count * 32;
    80209978:	ddc42783          	lw	a5,-548(s0)
    8020997c:	0057979b          	slliw	a5,a5,0x5
    80209980:	5098                	lw	a4,32(s1)
    80209982:	9fb9                	addw	a5,a5,a4
    80209984:	d09c                	sw	a5,32(s1)
    estat(&de, &st);
    80209986:	de040593          	addi	a1,s0,-544
    8020998a:	e6040513          	addi	a0,s0,-416
    8020998e:	fffff097          	auipc	ra,0xfffff
    80209992:	20e080e7          	jalr	526(ra) # 80208b9c <estat>
    if (copyout(p->pgdir, addr, (char*)&st, sizeof(st)) < 0)
    80209996:	08000693          	li	a3,128
    8020999a:	de040613          	addi	a2,s0,-544
    8020999e:	85d2                	mv	a1,s4
    802099a0:	1689b503          	ld	a0,360(s3)
    802099a4:	ffff9097          	auipc	ra,0xffff9
    802099a8:	a0a080e7          	jalr	-1526(ra) # 802023ae <copyout>
        return -1;
    802099ac:	fff54513          	not	a0,a0
    802099b0:	957d                	srai	a0,a0,0x3f
    802099b2:	8909                	andi	a0,a0,2
    802099b4:	157d                	addi	a0,a0,-1
    802099b6:	a011                	j	802099ba <dirnext+0xc8>
        return -1;
    802099b8:	557d                	li	a0,-1

    return 1;
    802099ba:	22813083          	ld	ra,552(sp)
    802099be:	22013403          	ld	s0,544(sp)
    802099c2:	21813483          	ld	s1,536(sp)
    802099c6:	21013903          	ld	s2,528(sp)
    802099ca:	20813983          	ld	s3,520(sp)
    802099ce:	20013a03          	ld	s4,512(sp)
    802099d2:	23010113          	addi	sp,sp,560
    802099d6:	8082                	ret

00000000802099d8 <pipealloc>:
#include "Type.h"
#include "file.h"
#include "string.h"
#include "Riscv.h"

int pipealloc(struct file** f0, struct file** f1) {
    802099d8:	715d                	addi	sp,sp,-80
    802099da:	e486                	sd	ra,72(sp)
    802099dc:	e0a2                	sd	s0,64(sp)
    802099de:	fc26                	sd	s1,56(sp)
    802099e0:	f84a                	sd	s2,48(sp)
    802099e2:	f44e                	sd	s3,40(sp)
    802099e4:	f052                	sd	s4,32(sp)
    802099e6:	ec56                	sd	s5,24(sp)
    802099e8:	0880                	addi	s0,sp,80
    802099ea:	84aa                	mv	s1,a0
    802099ec:	892e                	mv	s2,a1
    struct pipe* pi;

    pi = 0;
    *f0 = *f1 = 0;
    802099ee:	0005b023          	sd	zero,0(a1)
    802099f2:	00053023          	sd	zero,0(a0)
    if ((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
    802099f6:	00000097          	auipc	ra,0x0
    802099fa:	b10080e7          	jalr	-1264(ra) # 80209506 <filealloc>
    802099fe:	e088                	sd	a0,0(s1)
    80209a00:	c905                	beqz	a0,80209a30 <pipealloc+0x58>
    80209a02:	00000097          	auipc	ra,0x0
    80209a06:	b04080e7          	jalr	-1276(ra) # 80209506 <filealloc>
    80209a0a:	00a93023          	sd	a0,0(s2)
    80209a0e:	c971                	beqz	a0,80209ae2 <pipealloc+0x10a>
        goto bad;
    PhysicalPage* pp = NULL;
    80209a10:	fa043c23          	sd	zero,-72(s0)
    if (pageAlloc(&pp) != 0)
    80209a14:	fb840513          	addi	a0,s0,-72
    80209a18:	ffff8097          	auipc	ra,0xffff8
    80209a1c:	1f6080e7          	jalr	502(ra) # 80201c0e <pageAlloc>
    80209a20:	8a2a                	mv	s4,a0
    80209a22:	c90d                	beqz	a0,80209a54 <pipealloc+0x7c>
    return 0;

bad:
    if (pi)
        pageFree(pa2page((u64)pi));
    if (*f0)
    80209a24:	6088                	ld	a0,0(s1)
    80209a26:	c509                	beqz	a0,80209a30 <pipealloc+0x58>
        fileclose(*f0);
    80209a28:	00000097          	auipc	ra,0x0
    80209a2c:	bae080e7          	jalr	-1106(ra) # 802095d6 <fileclose>
    if (*f1)
    80209a30:	00093503          	ld	a0,0(s2)
        fileclose(*f1);
    return -1;
    80209a34:	5a7d                	li	s4,-1
    if (*f1)
    80209a36:	c509                	beqz	a0,80209a40 <pipealloc+0x68>
        fileclose(*f1);
    80209a38:	00000097          	auipc	ra,0x0
    80209a3c:	b9e080e7          	jalr	-1122(ra) # 802095d6 <fileclose>
}
    80209a40:	8552                	mv	a0,s4
    80209a42:	60a6                	ld	ra,72(sp)
    80209a44:	6406                	ld	s0,64(sp)
    80209a46:	74e2                	ld	s1,56(sp)
    80209a48:	7942                	ld	s2,48(sp)
    80209a4a:	79a2                	ld	s3,40(sp)
    80209a4c:	7a02                	ld	s4,32(sp)
    80209a4e:	6ae2                	ld	s5,24(sp)
    80209a50:	6161                	addi	sp,sp,80
    80209a52:	8082                	ret
    int hartId;
} PhysicalPage;

inline u32 page2PPN(PhysicalPage *page) {
    extern PhysicalPage pages[];
    return page - pages;
    80209a54:	fb843983          	ld	s3,-72(s0)
    80209a58:	001b9797          	auipc	a5,0x1b9
    80209a5c:	a2078793          	addi	a5,a5,-1504 # 803c2478 <pages>
    80209a60:	40f989b3          	sub	s3,s3,a5
    80209a64:	4039d993          	srai	s3,s3,0x3
    80209a68:	00004797          	auipc	a5,0x4
    80209a6c:	8707b783          	ld	a5,-1936(a5) # 8020d2d8 <__func__.0+0x8>
    80209a70:	02f989b3          	mul	s3,s3,a5
    return pages + ppn;
}


inline u64 page2pa(PhysicalPage *page) {
    return PHYSICAL_ADDRESS_BASE + (page2PPN(page) << PAGE_SHIFT);
    80209a74:	00c9999b          	slliw	s3,s3,0xc
    80209a78:	1982                	slli	s3,s3,0x20
    80209a7a:	0209d993          	srli	s3,s3,0x20
    80209a7e:	4a85                	li	s5,1
    80209a80:	01fa9793          	slli	a5,s5,0x1f
    80209a84:	99be                	add	s3,s3,a5
    pi->readopen = 1;
    80209a86:	2359a023          	sw	s5,544(s3)
    pi->writeopen = 1;
    80209a8a:	2359a223          	sw	s5,548(s3)
    pi->nwrite = 0;
    80209a8e:	2009ae23          	sw	zero,540(s3)
    pi->nread = 0;
    80209a92:	2009ac23          	sw	zero,536(s3)
    initLock(&pi->lock, "pipe");
    80209a96:	00003597          	auipc	a1,0x3
    80209a9a:	6aa58593          	addi	a1,a1,1706 # 8020d140 <__func__.0+0x10>
    80209a9e:	854e                	mv	a0,s3
    80209aa0:	ffffc097          	auipc	ra,0xffffc
    80209aa4:	fc4080e7          	jalr	-60(ra) # 80205a64 <initLock>
    (*f0)->type = FD_PIPE;
    80209aa8:	609c                	ld	a5,0(s1)
    80209aaa:	0157a023          	sw	s5,0(a5)
    (*f0)->readable = 1;
    80209aae:	609c                	ld	a5,0(s1)
    80209ab0:	01578423          	sb	s5,8(a5)
    (*f0)->writable = 0;
    80209ab4:	609c                	ld	a5,0(s1)
    80209ab6:	000784a3          	sb	zero,9(a5)
    (*f0)->pipe = pi;
    80209aba:	609c                	ld	a5,0(s1)
    80209abc:	0137b823          	sd	s3,16(a5)
    (*f1)->type = FD_PIPE;
    80209ac0:	00093783          	ld	a5,0(s2)
    80209ac4:	0157a023          	sw	s5,0(a5)
    (*f1)->readable = 0;
    80209ac8:	00093783          	ld	a5,0(s2)
    80209acc:	00078423          	sb	zero,8(a5)
    (*f1)->writable = 1;
    80209ad0:	00093783          	ld	a5,0(s2)
    80209ad4:	015784a3          	sb	s5,9(a5)
    (*f1)->pipe = pi;
    80209ad8:	00093783          	ld	a5,0(s2)
    80209adc:	0137b823          	sd	s3,16(a5)
    return 0;
    80209ae0:	b785                	j	80209a40 <pipealloc+0x68>
    if (*f0)
    80209ae2:	6088                	ld	a0,0(s1)
    80209ae4:	f131                	bnez	a0,80209a28 <pipealloc+0x50>
    return -1;
    80209ae6:	5a7d                	li	s4,-1
    80209ae8:	bfa1                	j	80209a40 <pipealloc+0x68>

0000000080209aea <pipeclose>:

void pipeclose(struct pipe* pi, int writable) {
    80209aea:	1101                	addi	sp,sp,-32
    80209aec:	ec06                	sd	ra,24(sp)
    80209aee:	e822                	sd	s0,16(sp)
    80209af0:	e426                	sd	s1,8(sp)
    80209af2:	e04a                	sd	s2,0(sp)
    80209af4:	1000                	addi	s0,sp,32
    80209af6:	84aa                	mv	s1,a0
    80209af8:	892e                	mv	s2,a1
    acquireLock(&pi->lock);
    80209afa:	ffffc097          	auipc	ra,0xffffc
    80209afe:	fb4080e7          	jalr	-76(ra) # 80205aae <acquireLock>
    // printf("%x %x %x\n", pi->writeopen, pi->readopen, writable);
    if (writable) {
    80209b02:	04090b63          	beqz	s2,80209b58 <pipeclose+0x6e>
        pi->writeopen = 0;
    80209b06:	2204a223          	sw	zero,548(s1)
        wakeup(&pi->nread);
    80209b0a:	21848513          	addi	a0,s1,536
    80209b0e:	ffff9097          	auipc	ra,0xffff9
    80209b12:	696080e7          	jalr	1686(ra) # 802031a4 <wakeup>
    } else {
        pi->readopen = 0;
        wakeup(&pi->nwrite);
    }
    if (pi->readopen == 0 && pi->writeopen == 0) {
    80209b16:	2204b783          	ld	a5,544(s1)
    80209b1a:	eba1                	bnez	a5,80209b6a <pipeclose+0x80>
        releaseLock(&pi->lock);
    80209b1c:	8526                	mv	a0,s1
    80209b1e:	ffffc097          	auipc	ra,0xffffc
    80209b22:	00c080e7          	jalr	12(ra) # 80205b2a <releaseLock>
}

inline PhysicalPage* pa2page(u64 pa) {
    if (pa == 0)
        return NULL;
    return ppn2page((pa - PHYSICAL_ADDRESS_BASE) >> PAGE_SHIFT);
    80209b26:	800007b7          	lui	a5,0x80000
    80209b2a:	94be                	add	s1,s1,a5
    80209b2c:	80b1                	srli	s1,s1,0xc
    return pages + ppn;
    80209b2e:	1482                	slli	s1,s1,0x20
    80209b30:	9081                	srli	s1,s1,0x20
    80209b32:	00149793          	slli	a5,s1,0x1
    80209b36:	97a6                	add	a5,a5,s1
    80209b38:	078e                	slli	a5,a5,0x3
        pageFree(pa2page((u64)pi));
    80209b3a:	001b9517          	auipc	a0,0x1b9
    80209b3e:	93e50513          	addi	a0,a0,-1730 # 803c2478 <pages>
    80209b42:	953e                	add	a0,a0,a5
    80209b44:	ffff8097          	auipc	ra,0xffff8
    80209b48:	29e080e7          	jalr	670(ra) # 80201de2 <pageFree>
    } else
        releaseLock(&pi->lock);
}
    80209b4c:	60e2                	ld	ra,24(sp)
    80209b4e:	6442                	ld	s0,16(sp)
    80209b50:	64a2                	ld	s1,8(sp)
    80209b52:	6902                	ld	s2,0(sp)
    80209b54:	6105                	addi	sp,sp,32
    80209b56:	8082                	ret
        pi->readopen = 0;
    80209b58:	2204a023          	sw	zero,544(s1)
        wakeup(&pi->nwrite);
    80209b5c:	21c48513          	addi	a0,s1,540
    80209b60:	ffff9097          	auipc	ra,0xffff9
    80209b64:	644080e7          	jalr	1604(ra) # 802031a4 <wakeup>
    80209b68:	b77d                	j	80209b16 <pipeclose+0x2c>
        releaseLock(&pi->lock);
    80209b6a:	8526                	mv	a0,s1
    80209b6c:	ffffc097          	auipc	ra,0xffffc
    80209b70:	fbe080e7          	jalr	-66(ra) # 80205b2a <releaseLock>
}
    80209b74:	bfe1                	j	80209b4c <pipeclose+0x62>

0000000080209b76 <pipewrite>:

int pipewrite(struct pipe* pi, u64 addr, int n) {
    80209b76:	711d                	addi	sp,sp,-96
    80209b78:	ec86                	sd	ra,88(sp)
    80209b7a:	e8a2                	sd	s0,80(sp)
    80209b7c:	e4a6                	sd	s1,72(sp)
    80209b7e:	e0ca                	sd	s2,64(sp)
    80209b80:	fc4e                	sd	s3,56(sp)
    80209b82:	f852                	sd	s4,48(sp)
    80209b84:	f456                	sd	s5,40(sp)
    80209b86:	f05a                	sd	s6,32(sp)
    80209b88:	ec5e                	sd	s7,24(sp)
    80209b8a:	e862                	sd	s8,16(sp)
    80209b8c:	1080                	addi	s0,sp,96
    80209b8e:	84aa                	mv	s1,a0
    80209b90:	8aae                	mv	s5,a1
    80209b92:	89b2                	mv	s3,a2
    int i = 0;
    struct Process* pr = myproc();
    80209b94:	ffff9097          	auipc	ra,0xffff9
    80209b98:	e1c080e7          	jalr	-484(ra) # 802029b0 <myproc>
    80209b9c:	8a2a                	mv	s4,a0

    // printf("%d WWWW pipe addr %x\n", r_hartid(), pi);
    acquireLock(&pi->lock);
    80209b9e:	8526                	mv	a0,s1
    80209ba0:	ffffc097          	auipc	ra,0xffffc
    80209ba4:	f0e080e7          	jalr	-242(ra) # 80205aae <acquireLock>
    while (i < n) {
    80209ba8:	0b305c63          	blez	s3,80209c60 <pipewrite+0xea>
    int i = 0;
    80209bac:	4901                	li	s2,0
            sleep(&pi->nwrite, &pi->lock);
            // printf("Write %x Stop sleep\n", r_hartid());
        } else {
            // printf("%d %d\n", i, n);
            char ch;
            if (copyin(pr->pgdir, &ch, addr + i, 1) == -1)
    80209bae:	5b7d                	li	s6,-1
            wakeup(&pi->nread);
    80209bb0:	21848c13          	addi	s8,s1,536
            sleep(&pi->nwrite, &pi->lock);
    80209bb4:	21c48b93          	addi	s7,s1,540
    80209bb8:	a0a1                	j	80209c00 <pipewrite+0x8a>
            releaseLock(&pi->lock);
    80209bba:	8526                	mv	a0,s1
    80209bbc:	ffffc097          	auipc	ra,0xffffc
    80209bc0:	f6e080e7          	jalr	-146(ra) # 80205b2a <releaseLock>
            return -1;
    80209bc4:	597d                	li	s2,-1
    80209bc6:	a041                	j	80209c46 <pipewrite+0xd0>
            wakeup(&pi->nread);
    80209bc8:	8562                	mv	a0,s8
    80209bca:	ffff9097          	auipc	ra,0xffff9
    80209bce:	5da080e7          	jalr	1498(ra) # 802031a4 <wakeup>
            sleep(&pi->nwrite, &pi->lock);
    80209bd2:	85a6                	mv	a1,s1
    80209bd4:	855e                	mv	a0,s7
    80209bd6:	ffffa097          	auipc	ra,0xffffa
    80209bda:	cf0080e7          	jalr	-784(ra) # 802038c6 <sleep>
    80209bde:	a839                	j	80209bfc <pipewrite+0x86>
                break;
            pi->data[pi->nwrite++ % PIPESIZE] = ch;
    80209be0:	21c4a783          	lw	a5,540(s1)
    80209be4:	0017871b          	addiw	a4,a5,1
    80209be8:	20e4ae23          	sw	a4,540(s1)
    80209bec:	1ff7f793          	andi	a5,a5,511
    80209bf0:	97a6                	add	a5,a5,s1
    80209bf2:	faf44703          	lbu	a4,-81(s0)
    80209bf6:	00e78c23          	sb	a4,24(a5) # ffffffff80000018 <bssEnd+0xfffffffeff9e5018>
            i++;
    80209bfa:	2905                	addiw	s2,s2,1
    while (i < n) {
    80209bfc:	03395a63          	bge	s2,s3,80209c30 <pipewrite+0xba>
        if (pi->readopen == 0 /*|| pr->killed*/) {
    80209c00:	2204a783          	lw	a5,544(s1)
    80209c04:	dbdd                	beqz	a5,80209bba <pipewrite+0x44>
        if (pi->nwrite == pi->nread + PIPESIZE) {  // DOC: pipewrite-full
    80209c06:	2184a783          	lw	a5,536(s1)
    80209c0a:	21c4a703          	lw	a4,540(s1)
    80209c0e:	2007879b          	addiw	a5,a5,512
    80209c12:	faf70be3          	beq	a4,a5,80209bc8 <pipewrite+0x52>
            if (copyin(pr->pgdir, &ch, addr + i, 1) == -1)
    80209c16:	4685                	li	a3,1
    80209c18:	01590633          	add	a2,s2,s5
    80209c1c:	faf40593          	addi	a1,s0,-81
    80209c20:	168a3503          	ld	a0,360(s4)
    80209c24:	ffff8097          	auipc	ra,0xffff8
    80209c28:	6f8080e7          	jalr	1784(ra) # 8020231c <copyin>
    80209c2c:	fb651ae3          	bne	a0,s6,80209be0 <pipewrite+0x6a>
        }
    }
    wakeup(&pi->nread);
    80209c30:	21848513          	addi	a0,s1,536
    80209c34:	ffff9097          	auipc	ra,0xffff9
    80209c38:	570080e7          	jalr	1392(ra) # 802031a4 <wakeup>
    // printf("%d %d\n", pi->nread, pi->nwrite);
    releaseLock(&pi->lock);
    80209c3c:	8526                	mv	a0,s1
    80209c3e:	ffffc097          	auipc	ra,0xffffc
    80209c42:	eec080e7          	jalr	-276(ra) # 80205b2a <releaseLock>
    return i;
}
    80209c46:	854a                	mv	a0,s2
    80209c48:	60e6                	ld	ra,88(sp)
    80209c4a:	6446                	ld	s0,80(sp)
    80209c4c:	64a6                	ld	s1,72(sp)
    80209c4e:	6906                	ld	s2,64(sp)
    80209c50:	79e2                	ld	s3,56(sp)
    80209c52:	7a42                	ld	s4,48(sp)
    80209c54:	7aa2                	ld	s5,40(sp)
    80209c56:	7b02                	ld	s6,32(sp)
    80209c58:	6be2                	ld	s7,24(sp)
    80209c5a:	6c42                	ld	s8,16(sp)
    80209c5c:	6125                	addi	sp,sp,96
    80209c5e:	8082                	ret
    int i = 0;
    80209c60:	4901                	li	s2,0
    80209c62:	b7f9                	j	80209c30 <pipewrite+0xba>

0000000080209c64 <piperead>:

int piperead(struct pipe* pi, u64 addr, int n) {
    80209c64:	715d                	addi	sp,sp,-80
    80209c66:	e486                	sd	ra,72(sp)
    80209c68:	e0a2                	sd	s0,64(sp)
    80209c6a:	fc26                	sd	s1,56(sp)
    80209c6c:	f84a                	sd	s2,48(sp)
    80209c6e:	f44e                	sd	s3,40(sp)
    80209c70:	f052                	sd	s4,32(sp)
    80209c72:	ec56                	sd	s5,24(sp)
    80209c74:	e85a                	sd	s6,16(sp)
    80209c76:	0880                	addi	s0,sp,80
    80209c78:	84aa                	mv	s1,a0
    80209c7a:	892e                	mv	s2,a1
    80209c7c:	8a32                	mv	s4,a2
    int i;
    struct Process* pr = myproc();
    80209c7e:	ffff9097          	auipc	ra,0xffff9
    80209c82:	d32080e7          	jalr	-718(ra) # 802029b0 <myproc>
    80209c86:	8aaa                	mv	s5,a0
    char ch;

    // printf("%d RRRR pipe addr %x\n", r_hartid(), pi);
    acquireLock(&pi->lock);
    80209c88:	8526                	mv	a0,s1
    80209c8a:	ffffc097          	auipc	ra,0xffffc
    80209c8e:	e24080e7          	jalr	-476(ra) # 80205aae <acquireLock>
    while (pi->nread == pi->nwrite && pi->writeopen) {  // DOC: pipe-empty
    80209c92:	2184a703          	lw	a4,536(s1)
    80209c96:	21c4a783          	lw	a5,540(s1)
        if (0 /*pr->killed*/) {
            releaseLock(&pi->lock);
            return -1;
        }
        // printf("Read %x Sleep?\n", r_hartid());
        sleep(&pi->nread, &pi->lock);  // DOC: piperead-sleep
    80209c9a:	21848993          	addi	s3,s1,536
    while (pi->nread == pi->nwrite && pi->writeopen) {  // DOC: pipe-empty
    80209c9e:	02f71163          	bne	a4,a5,80209cc0 <piperead+0x5c>
    80209ca2:	2244a783          	lw	a5,548(s1)
    80209ca6:	cf89                	beqz	a5,80209cc0 <piperead+0x5c>
        sleep(&pi->nread, &pi->lock);  // DOC: piperead-sleep
    80209ca8:	85a6                	mv	a1,s1
    80209caa:	854e                	mv	a0,s3
    80209cac:	ffffa097          	auipc	ra,0xffffa
    80209cb0:	c1a080e7          	jalr	-998(ra) # 802038c6 <sleep>
    while (pi->nread == pi->nwrite && pi->writeopen) {  // DOC: pipe-empty
    80209cb4:	2184a703          	lw	a4,536(s1)
    80209cb8:	21c4a783          	lw	a5,540(s1)
    80209cbc:	fef703e3          	beq	a4,a5,80209ca2 <piperead+0x3e>
        // printf("Read %x Stop sleep\n", r_hartid());
    }
    for (i = 0; i < n; i++) {  // DOC: piperead-copy
    80209cc0:	4981                	li	s3,0
        if (pi->nread == pi->nwrite)
            break;
        // printf("hart id %x, now read %d\n", r_hartid(), i);
        ch = pi->data[pi->nread++ % PIPESIZE];
        // printf("%x %x\n", r_hartid(), ch);
        if (copyout(pr->pgdir, addr + i, &ch, 1) == -1) {
    80209cc2:	5b7d                	li	s6,-1
    for (i = 0; i < n; i++) {  // DOC: piperead-copy
    80209cc4:	05405463          	blez	s4,80209d0c <piperead+0xa8>
        if (pi->nread == pi->nwrite)
    80209cc8:	2184a783          	lw	a5,536(s1)
    80209ccc:	21c4a703          	lw	a4,540(s1)
    80209cd0:	02f70e63          	beq	a4,a5,80209d0c <piperead+0xa8>
        ch = pi->data[pi->nread++ % PIPESIZE];
    80209cd4:	0017871b          	addiw	a4,a5,1
    80209cd8:	20e4ac23          	sw	a4,536(s1)
    80209cdc:	1ff7f793          	andi	a5,a5,511
    80209ce0:	97a6                	add	a5,a5,s1
    80209ce2:	0187c783          	lbu	a5,24(a5)
    80209ce6:	faf40fa3          	sb	a5,-65(s0)
        if (copyout(pr->pgdir, addr + i, &ch, 1) == -1) {
    80209cea:	4685                	li	a3,1
    80209cec:	fbf40613          	addi	a2,s0,-65
    80209cf0:	85ca                	mv	a1,s2
    80209cf2:	168ab503          	ld	a0,360(s5)
    80209cf6:	ffff8097          	auipc	ra,0xffff8
    80209cfa:	6b8080e7          	jalr	1720(ra) # 802023ae <copyout>
    80209cfe:	01650763          	beq	a0,s6,80209d0c <piperead+0xa8>
    for (i = 0; i < n; i++) {  // DOC: piperead-copy
    80209d02:	2985                	addiw	s3,s3,1
    80209d04:	0905                	addi	s2,s2,1
    80209d06:	fd3a11e3          	bne	s4,s3,80209cc8 <piperead+0x64>
    80209d0a:	89d2                	mv	s3,s4
            break;
        }
    }
    // printf("%x wake up %x, start %x, end %x\n", r_hartid(), &pi->nwrite, pi->nread, pi->nwrite);
    wakeup(&pi->nwrite);  // DOC: piperead-wakeup
    80209d0c:	21c48513          	addi	a0,s1,540
    80209d10:	ffff9097          	auipc	ra,0xffff9
    80209d14:	494080e7          	jalr	1172(ra) # 802031a4 <wakeup>
    releaseLock(&pi->lock);
    80209d18:	8526                	mv	a0,s1
    80209d1a:	ffffc097          	auipc	ra,0xffffc
    80209d1e:	e10080e7          	jalr	-496(ra) # 80205b2a <releaseLock>
    return i;
    80209d22:	854e                	mv	a0,s3
    80209d24:	60a6                	ld	ra,72(sp)
    80209d26:	6406                	ld	s0,64(sp)
    80209d28:	74e2                	ld	s1,56(sp)
    80209d2a:	7942                	ld	s2,48(sp)
    80209d2c:	79a2                	ld	s3,40(sp)
    80209d2e:	7a02                	ld	s4,32(sp)
    80209d30:	6ae2                	ld	s5,24(sp)
    80209d32:	6b42                	ld	s6,16(sp)
    80209d34:	6161                	addi	sp,sp,80
    80209d36:	8082                	ret

0000000080209d38 <testfat>:
#include <Debug.h>

char test_content_to_write[10] = "abcdefghi";
char test_content_to_read[10] = {0};

void testfat() {
    80209d38:	1101                	addi	sp,sp,-32
    80209d3a:	ec06                	sd	ra,24(sp)
    80209d3c:	e822                	sd	s0,16(sp)
    80209d3e:	e426                	sd	s1,8(sp)
    80209d40:	e04a                	sd	s2,0(sp)
    80209d42:	1000                	addi	s0,sp,32
    printf("[testfat] testing fat.......\n");
    80209d44:	00003517          	auipc	a0,0x3
    80209d48:	40450513          	addi	a0,a0,1028 # 8020d148 <__func__.0+0x18>
    80209d4c:	ffff7097          	auipc	ra,0xffff7
    80209d50:	d74080e7          	jalr	-652(ra) # 80200ac0 <printf>
    struct dirent* testfile = create(AT_FDCWD, "/testfile", T_FILE, O_CREATE | O_RDWR);
    80209d54:	04200693          	li	a3,66
    80209d58:	4609                	li	a2,2
    80209d5a:	00003597          	auipc	a1,0x3
    80209d5e:	40e58593          	addi	a1,a1,1038 # 8020d168 <__func__.0+0x38>
    80209d62:	f9c00513          	li	a0,-100
    80209d66:	fffff097          	auipc	ra,0xfffff
    80209d6a:	658080e7          	jalr	1624(ra) # 802093be <create>
    if (testfile == NULL) {
    80209d6e:	cd51                	beqz	a0,80209e0a <testfat+0xd2>
    80209d70:	84aa                	mv	s1,a0
        panic("[testfat] create file error\n");
    }
    MSG_PRINT("create file finish");
    int ret = ewrite(testfile, 0, (u64)test_content_to_write, 0, 9);
    80209d72:	4725                	li	a4,9
    80209d74:	4681                	li	a3,0
    80209d76:	00005617          	auipc	a2,0x5
    80209d7a:	aca60613          	addi	a2,a2,-1334 # 8020e840 <test_content_to_write>
    80209d7e:	4581                	li	a1,0
    80209d80:	ffffe097          	auipc	ra,0xffffe
    80209d84:	3ce080e7          	jalr	974(ra) # 8020814e <ewrite>
    if (ret != 9) {
    80209d88:	47a5                	li	a5,9
    80209d8a:	0af51163          	bne	a0,a5,80209e2c <testfat+0xf4>
        panic("[testfat] write file error\n");
    }

    MSG_PRINT("write file finish");
    eunlock(testfile);
    80209d8e:	8526                	mv	a0,s1
    80209d90:	fffff097          	auipc	ra,0xfffff
    80209d94:	c9e080e7          	jalr	-866(ra) # 80208a2e <eunlock>
    eput(testfile);
    80209d98:	8526                	mv	a0,s1
    80209d9a:	fffff097          	auipc	ra,0xfffff
    80209d9e:	cf6080e7          	jalr	-778(ra) # 80208a90 <eput>
    MSG_PRINT("eput file finish");
    testfile = ename(AT_FDCWD, "/testfile");
    80209da2:	00003597          	auipc	a1,0x3
    80209da6:	3c658593          	addi	a1,a1,966 # 8020d168 <__func__.0+0x38>
    80209daa:	f9c00513          	li	a0,-100
    80209dae:	fffff097          	auipc	ra,0xfffff
    80209db2:	358080e7          	jalr	856(ra) # 80209106 <ename>
    80209db6:	84aa                	mv	s1,a0
    if (testfile == NULL) {
    80209db8:	c959                	beqz	a0,80209e4e <testfat+0x116>
        printf("[testfat] open file error\n");
    }
    DEC_PRINT(testfile->ref);
    eread(testfile, 0, (u64)test_content_to_read, 0, 9);
    80209dba:	00410917          	auipc	s2,0x410
    80209dbe:	cd690913          	addi	s2,s2,-810 # 80619a90 <test_content_to_read>
    80209dc2:	4725                	li	a4,9
    80209dc4:	4681                	li	a3,0
    80209dc6:	864a                	mv	a2,s2
    80209dc8:	4581                	li	a1,0
    80209dca:	8526                	mv	a0,s1
    80209dcc:	ffffe097          	auipc	ra,0xffffe
    80209dd0:	28a080e7          	jalr	650(ra) # 80208056 <eread>
    if (strncmp(test_content_to_write, test_content_to_read, 114514)==0) {
    80209dd4:	6671                	lui	a2,0x1c
    80209dd6:	f5260613          	addi	a2,a2,-174 # 1bf52 <_start-0x801e40ae>
    80209dda:	85ca                	mv	a1,s2
    80209ddc:	00005517          	auipc	a0,0x5
    80209de0:	a6450513          	addi	a0,a0,-1436 # 8020e840 <test_content_to_write>
    80209de4:	ffffc097          	auipc	ra,0xffffc
    80209de8:	050080e7          	jalr	80(ra) # 80205e34 <strncmp>
    80209dec:	e935                	bnez	a0,80209e60 <testfat+0x128>
        printf("[testfat]  testfat passed\n");
    80209dee:	00003517          	auipc	a0,0x3
    80209df2:	3fa50513          	addi	a0,a0,1018 # 8020d1e8 <__func__.0+0xb8>
    80209df6:	ffff7097          	auipc	ra,0xffff7
    80209dfa:	cca080e7          	jalr	-822(ra) # 80200ac0 <printf>
    } else {
        printf("[testfat]  testfat failed\n");
    }
    80209dfe:	60e2                	ld	ra,24(sp)
    80209e00:	6442                	ld	s0,16(sp)
    80209e02:	64a2                	ld	s1,8(sp)
    80209e04:	6902                	ld	s2,0(sp)
    80209e06:	6105                	addi	sp,sp,32
    80209e08:	8082                	ret
        panic("[testfat] create file error\n");
    80209e0a:	00003697          	auipc	a3,0x3
    80209e0e:	36e68693          	addi	a3,a3,878 # 8020d178 <__func__.0+0x48>
    80209e12:	00003617          	auipc	a2,0x3
    80209e16:	4be60613          	addi	a2,a2,1214 # 8020d2d0 <__func__.0>
    80209e1a:	45b5                	li	a1,13
    80209e1c:	00003517          	auipc	a0,0x3
    80209e20:	37c50513          	addi	a0,a0,892 # 8020d198 <__func__.0+0x68>
    80209e24:	ffff7097          	auipc	ra,0xffff7
    80209e28:	d28080e7          	jalr	-728(ra) # 80200b4c <_panic_>
        panic("[testfat] write file error\n");
    80209e2c:	00003697          	auipc	a3,0x3
    80209e30:	37c68693          	addi	a3,a3,892 # 8020d1a8 <__func__.0+0x78>
    80209e34:	00003617          	auipc	a2,0x3
    80209e38:	49c60613          	addi	a2,a2,1180 # 8020d2d0 <__func__.0>
    80209e3c:	45c9                	li	a1,18
    80209e3e:	00003517          	auipc	a0,0x3
    80209e42:	35a50513          	addi	a0,a0,858 # 8020d198 <__func__.0+0x68>
    80209e46:	ffff7097          	auipc	ra,0xffff7
    80209e4a:	d06080e7          	jalr	-762(ra) # 80200b4c <_panic_>
        printf("[testfat] open file error\n");
    80209e4e:	00003517          	auipc	a0,0x3
    80209e52:	37a50513          	addi	a0,a0,890 # 8020d1c8 <__func__.0+0x98>
    80209e56:	ffff7097          	auipc	ra,0xffff7
    80209e5a:	c6a080e7          	jalr	-918(ra) # 80200ac0 <printf>
    80209e5e:	bfb1                	j	80209dba <testfat+0x82>
        printf("[testfat]  testfat failed\n");
    80209e60:	00003517          	auipc	a0,0x3
    80209e64:	3a850513          	addi	a0,a0,936 # 8020d208 <__func__.0+0xd8>
    80209e68:	ffff7097          	auipc	ra,0xffff7
    80209e6c:	c58080e7          	jalr	-936(ra) # 80200ac0 <printf>
    80209e70:	b779                	j	80209dfe <testfat+0xc6>
	...

000000008020a000 <_trampoline>:
    8020a000:	14051573          	csrrw	a0,sscratch,a0
    8020a004:	02153423          	sd	ra,40(a0)
    8020a008:	02253823          	sd	sp,48(a0)
    8020a00c:	02353c23          	sd	gp,56(a0)
    8020a010:	04453023          	sd	tp,64(a0)
    8020a014:	04553423          	sd	t0,72(a0)
    8020a018:	04653823          	sd	t1,80(a0)
    8020a01c:	04753c23          	sd	t2,88(a0)
    8020a020:	f120                	sd	s0,96(a0)
    8020a022:	f524                	sd	s1,104(a0)
    8020a024:	fd2c                	sd	a1,120(a0)
    8020a026:	e150                	sd	a2,128(a0)
    8020a028:	e554                	sd	a3,136(a0)
    8020a02a:	e958                	sd	a4,144(a0)
    8020a02c:	ed5c                	sd	a5,152(a0)
    8020a02e:	0b053023          	sd	a6,160(a0)
    8020a032:	0b153423          	sd	a7,168(a0)
    8020a036:	0b253823          	sd	s2,176(a0)
    8020a03a:	0b353c23          	sd	s3,184(a0)
    8020a03e:	0d453023          	sd	s4,192(a0)
    8020a042:	0d553423          	sd	s5,200(a0)
    8020a046:	0d653823          	sd	s6,208(a0)
    8020a04a:	0d753c23          	sd	s7,216(a0)
    8020a04e:	0f853023          	sd	s8,224(a0)
    8020a052:	0f953423          	sd	s9,232(a0)
    8020a056:	0fa53823          	sd	s10,240(a0)
    8020a05a:	0fb53c23          	sd	s11,248(a0)
    8020a05e:	11c53023          	sd	t3,256(a0)
    8020a062:	11d53423          	sd	t4,264(a0)
    8020a066:	11e53823          	sd	t5,272(a0)
    8020a06a:	11f53c23          	sd	t6,280(a0)
    8020a06e:	140022f3          	csrr	t0,sscratch
    8020a072:	06553823          	sd	t0,112(a0)
    8020a076:	00853103          	ld	sp,8(a0)
    8020a07a:	02053203          	ld	tp,32(a0)
    8020a07e:	01053283          	ld	t0,16(a0)
    8020a082:	14102373          	csrr	t1,sepc
    8020a086:	00653c23          	sd	t1,24(a0)
    8020a08a:	00053303          	ld	t1,0(a0)
    8020a08e:	18031073          	csrw	satp,t1
    8020a092:	12000073          	sfence.vma
    8020a096:	8282                	jr	t0

000000008020a098 <userReturn>:
    8020a098:	18059073          	csrw	satp,a1
    8020a09c:	12000073          	sfence.vma
    8020a0a0:	07053283          	ld	t0,112(a0)
    8020a0a4:	14029073          	csrw	sscratch,t0
    8020a0a8:	01853303          	ld	t1,24(a0)
    8020a0ac:	14131073          	csrw	sepc,t1
    8020a0b0:	02853083          	ld	ra,40(a0)
    8020a0b4:	03053103          	ld	sp,48(a0)
    8020a0b8:	03853183          	ld	gp,56(a0)
    8020a0bc:	04053203          	ld	tp,64(a0)
    8020a0c0:	04853283          	ld	t0,72(a0)
    8020a0c4:	05053303          	ld	t1,80(a0)
    8020a0c8:	05853383          	ld	t2,88(a0)
    8020a0cc:	7120                	ld	s0,96(a0)
    8020a0ce:	7524                	ld	s1,104(a0)
    8020a0d0:	7d2c                	ld	a1,120(a0)
    8020a0d2:	6150                	ld	a2,128(a0)
    8020a0d4:	6554                	ld	a3,136(a0)
    8020a0d6:	6958                	ld	a4,144(a0)
    8020a0d8:	6d5c                	ld	a5,152(a0)
    8020a0da:	0a053803          	ld	a6,160(a0)
    8020a0de:	0a853883          	ld	a7,168(a0)
    8020a0e2:	0b053903          	ld	s2,176(a0)
    8020a0e6:	0b853983          	ld	s3,184(a0)
    8020a0ea:	0c053a03          	ld	s4,192(a0)
    8020a0ee:	0c853a83          	ld	s5,200(a0)
    8020a0f2:	0d053b03          	ld	s6,208(a0)
    8020a0f6:	0d853b83          	ld	s7,216(a0)
    8020a0fa:	0e053c03          	ld	s8,224(a0)
    8020a0fe:	0e853c83          	ld	s9,232(a0)
    8020a102:	0f053d03          	ld	s10,240(a0)
    8020a106:	0f853d83          	ld	s11,248(a0)
    8020a10a:	10053e03          	ld	t3,256(a0)
    8020a10e:	10853e83          	ld	t4,264(a0)
    8020a112:	11053f03          	ld	t5,272(a0)
    8020a116:	11853f83          	ld	t6,280(a0)
    8020a11a:	14051573          	csrrw	a0,sscratch,a0
    8020a11e:	10200073          	sret
	...

000000008020b000 <trapframe>:
	...
